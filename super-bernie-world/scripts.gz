//324
// Preload compiler scripts header start
// length: 3899
// length: 15899
// length: 20827
// length: 13709
// length: 106718
// length: 3350
// length: 26500
// length: 110224
// length: 99182
// length: 107062
// length: 14512
// length: 1602326
// length: 1359092
// length: 364271
// Preload compiler scripts header end
// Script: screenfull.js
/*!
* screenfull
* v5.0.2 - 2020-02-13
* (c) Sindre Sorhus; MIT License
*/
(function () {
	'use strict';

	var document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};
	var isCommonjs = typeof module !== 'undefined' && module.exports;

	var fn = (function () {
		var val;

		var fnMap = [
			[
				'requestFullscreen',
				'exitFullscreen',
				'fullscreenElement',
				'fullscreenEnabled',
				'fullscreenchange',
				'fullscreenerror'
			],
			// New WebKit
			[
				'webkitRequestFullscreen',
				'webkitExitFullscreen',
				'webkitFullscreenElement',
				'webkitFullscreenEnabled',
				'webkitfullscreenchange',
				'webkitfullscreenerror'

			],
			// Old WebKit
			[
				'webkitRequestFullScreen',
				'webkitCancelFullScreen',
				'webkitCurrentFullScreenElement',
				'webkitCancelFullScreen',
				'webkitfullscreenchange',
				'webkitfullscreenerror'

			],
			[
				'mozRequestFullScreen',
				'mozCancelFullScreen',
				'mozFullScreenElement',
				'mozFullScreenEnabled',
				'mozfullscreenchange',
				'mozfullscreenerror'
			],
			[
				'msRequestFullscreen',
				'msExitFullscreen',
				'msFullscreenElement',
				'msFullscreenEnabled',
				'MSFullscreenChange',
				'MSFullscreenError'
			]
		];

		var i = 0;
		var l = fnMap.length;
		var ret = {};

		for (; i < l; i++) {
			val = fnMap[i];
			if (val && val[1] in document) {
				for (i = 0; i < val.length; i++) {
					ret[fnMap[0][i]] = val[i];
				}
				return ret;
			}
		}

		return false;
	})();

	var eventNameMap = {
		change: fn.fullscreenchange,
		error: fn.fullscreenerror
	};

	var screenfull = {
		request: function (element) {
			return new Promise(function (resolve, reject) {
				var onFullScreenEntered = function () {
					this.off('change', onFullScreenEntered);
					resolve();
				}.bind(this);

				this.on('change', onFullScreenEntered);

				element = element || document.documentElement;

				var returnPromise = element[fn.requestFullscreen]();

				if (returnPromise instanceof Promise) {
					returnPromise.then(onFullScreenEntered).catch(reject);
				}
			}.bind(this));
		},
		exit: function () {
			return new Promise(function (resolve, reject) {
				if (!this.isFullscreen) {
					resolve();
					return;
				}

				var onFullScreenExit = function () {
					this.off('change', onFullScreenExit);
					resolve();
				}.bind(this);

				this.on('change', onFullScreenExit);

				var returnPromise = document[fn.exitFullscreen]();

				if (returnPromise instanceof Promise) {
					returnPromise.then(onFullScreenExit).catch(reject);
				}
			}.bind(this));
		},
		toggle: function (element) {
			return this.isFullscreen ? this.exit() : this.request(element);
		},
		onchange: function (callback) {
			this.on('change', callback);
		},
		onerror: function (callback) {
			this.on('error', callback);
		},
		on: function (event, callback) {
			var eventName = eventNameMap[event];
			if (eventName) {
				document.addEventListener(eventName, callback, false);
			}
		},
		off: function (event, callback) {
			var eventName = eventNameMap[event];
			if (eventName) {
				document.removeEventListener(eventName, callback, false);
			}
		},
		raw: fn
	};

	if (!fn) {
		if (isCommonjs) {
			module.exports = {isEnabled: false};
		} else {
			window.screenfull = {isEnabled: false};
		}

		return;
	}

	Object.defineProperties(screenfull, {
		isFullscreen: {
			get: function () {
				return Boolean(document[fn.fullscreenElement]);
			}
		},
		element: {
			enumerable: true,
			get: function () {
				return document[fn.fullscreenElement];
			}
		},
		isEnabled: {
			enumerable: true,
			get: function () {
				// Coerce to boolean in case of old WebKit
				return Boolean(document[fn.fullscreenEnabled]);
			}
		}
	});

	if (isCommonjs) {
		module.exports = screenfull;
	} else {
		window.screenfull = screenfull;
	}
})();


// Script: lz-string.js
// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
// This work is free. You can redistribute it and/or modify it
// under the terms of the WTFPL, Version 2
// For more information see LICENSE.txt or http://www.wtfpl.net/
//
// For more information, the home page:
// http://pieroxy.net/blog/pages/lz-string/testing.html
//
// LZ-based compression algorithm, version 1.4.4
var LZString = (function() {

// private property
var f = String.fromCharCode;
var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
var baseReverseDic = {};

function getBaseValue(alphabet, character) {
  if (!baseReverseDic[alphabet]) {
    baseReverseDic[alphabet] = {};
    for (var i=0 ; i<alphabet.length ; i++) {
      baseReverseDic[alphabet][alphabet.charAt(i)] = i;
    }
  }
  return baseReverseDic[alphabet][character];
}

var LZString = {
  compressToBase64 : function (input) {
    if (input == null) return "";
    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});
    switch (res.length % 4) { // To produce valid Base64
    default: // When could this happen ?
    case 0 : return res;
    case 1 : return res+"===";
    case 2 : return res+"==";
    case 3 : return res+"=";
    }
  },

  decompressFromBase64 : function (input) {
    if (input == null) return "";
    if (input == "") return null;
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });
  },

  compressToUTF16 : function (input) {
    if (input == null) return "";
    return LZString._compress(input, 15, function(a){return f(a+32);}) + " ";
  },

  decompressFromUTF16: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });
  },

  //compress into uint8array (UCS-2 big endian format)
  compressToUint8Array: function (uncompressed) {
    var compressed = LZString.compress(uncompressed);
    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character

    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {
      var current_value = compressed.charCodeAt(i);
      buf[i*2] = current_value >>> 8;
      buf[i*2+1] = current_value % 256;
    }
    return buf;
  },

  //decompress from uint8array (UCS-2 big endian format)
  decompressFromUint8Array:function (compressed) {
    if (compressed===null || compressed===undefined){
        return LZString.decompress(compressed);
    } else {
        var buf=new Array(compressed.length/2); // 2 bytes per character
        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {
          buf[i]=compressed[i*2]*256+compressed[i*2+1];
        }

        var result = [];
        buf.forEach(function (c) {
          result.push(f(c));
        });
        return LZString.decompress(result.join(''));

    }

  },


  //compress into a string that is already URI encoded
  compressToEncodedURIComponent: function (input) {
    if (input == null) return "";
    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});
  },

  //decompress from an output of compressToEncodedURIComponent
  decompressFromEncodedURIComponent:function (input) {
    if (input == null) return "";
    if (input == "") return null;
    input = input.replace(/ /g, "+");
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });
  },

  compress: function (uncompressed) {
    return LZString._compress(uncompressed, 16, function(a){return f(a);});
  },
  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {
    if (uncompressed == null) return "";
    var i, value,
        context_dictionary= {},
        context_dictionaryToCreate= {},
        context_c="",
        context_wc="",
        context_w="",
        context_enlargeIn= 2, // Compensate for the first entry which should not count
        context_dictSize= 3,
        context_numBits= 2,
        context_data=[],
        context_data_val=0,
        context_data_position=0,
        ii;

    for (ii = 0; ii < uncompressed.length; ii += 1) {
      context_c = uncompressed.charAt(ii);
      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
        context_dictionary[context_c] = context_dictSize++;
        context_dictionaryToCreate[context_c] = true;
      }

      context_wc = context_w + context_c;
      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
        context_w = context_wc;
      } else {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
          if (context_w.charCodeAt(0)<256) {
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<8 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          } else {
            value = 1;
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1) | value;
              if (context_data_position ==bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = 0;
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<16 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          delete context_dictionaryToCreate[context_w];
        } else {
          value = context_dictionary[context_w];
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }


        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        // Add wc to the dictionary.
        context_dictionary[context_wc] = context_dictSize++;
        context_w = String(context_c);
      }
    }

    // Output the code for w.
    if (context_w !== "") {
      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
        if (context_w.charCodeAt(0)<256) {
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<8 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        } else {
          value = 1;
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | value;
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = 0;
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<16 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        delete context_dictionaryToCreate[context_w];
      } else {
        value = context_dictionary[context_w];
        for (i=0 ; i<context_numBits ; i++) {
          context_data_val = (context_data_val << 1) | (value&1);
          if (context_data_position == bitsPerChar-1) {
            context_data_position = 0;
            context_data.push(getCharFromInt(context_data_val));
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }


      }
      context_enlargeIn--;
      if (context_enlargeIn == 0) {
        context_enlargeIn = Math.pow(2, context_numBits);
        context_numBits++;
      }
    }

    // Mark the end of the stream
    value = 2;
    for (i=0 ; i<context_numBits ; i++) {
      context_data_val = (context_data_val << 1) | (value&1);
      if (context_data_position == bitsPerChar-1) {
        context_data_position = 0;
        context_data.push(getCharFromInt(context_data_val));
        context_data_val = 0;
      } else {
        context_data_position++;
      }
      value = value >> 1;
    }

    // Flush the last char
    while (true) {
      context_data_val = (context_data_val << 1);
      if (context_data_position == bitsPerChar-1) {
        context_data.push(getCharFromInt(context_data_val));
        break;
      }
      else context_data_position++;
    }
    return context_data.join('');
  },

  decompress: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });
  },

  _decompress: function (length, resetValue, getNextValue) {
    var dictionary = [],
        next,
        enlargeIn = 4,
        dictSize = 4,
        numBits = 3,
        entry = "",
        result = [],
        i,
        w,
        bits, resb, maxpower, power,
        c,
        data = {val:getNextValue(0), position:resetValue, index:1};

    for (i = 0; i < 3; i += 1) {
      dictionary[i] = i;
    }

    bits = 0;
    maxpower = Math.pow(2,2);
    power=1;
    while (power!=maxpower) {
      resb = data.val & data.position;
      data.position >>= 1;
      if (data.position == 0) {
        data.position = resetValue;
        data.val = getNextValue(data.index++);
      }
      bits |= (resb>0 ? 1 : 0) * power;
      power <<= 1;
    }

    switch (next = bits) {
      case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 2:
        return "";
    }
    dictionary[3] = c;
    w = c;
    result.push(c);
    while (true) {
      if (data.index > length) {
        return "";
      }

      bits = 0;
      maxpower = Math.pow(2,numBits);
      power=1;
      while (power!=maxpower) {
        resb = data.val & data.position;
        data.position >>= 1;
        if (data.position == 0) {
          data.position = resetValue;
          data.val = getNextValue(data.index++);
        }
        bits |= (resb>0 ? 1 : 0) * power;
        power <<= 1;
      }

      switch (c = bits) {
        case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }

          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 2:
          return result.join('');
      }

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

      if (dictionary[c]) {
        entry = dictionary[c];
      } else {
        if (c === dictSize) {
          entry = w + w.charAt(0);
        } else {
          return null;
        }
      }
      result.push(entry);

      // Add w+entry[0] to the dictionary.
      dictionary[dictSize++] = w + entry.charAt(0);
      enlargeIn--;

      w = entry;

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

    }
  }
};
  return LZString;
})();

if (typeof define === 'function' && define.amd) {
  define(function () { return LZString; });
} else if( typeof module !== 'undefined' && module != null ) {
  module.exports = LZString
}


// Script: md5.js
/**
 * [js-md5]{@link https://github.com/emn178/js-md5}
 *
 * @namespace md5
 * @version 0.4.1
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2016
 * @license MIT
 */
(function (root) {
  'use strict';

  var NODE_JS = typeof process == 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  }
  var COMMON_JS = !root.JS_MD5_TEST && typeof module == 'object' && module.exports;
  var AMD = typeof define == 'function' && define.amd;
  var ARRAY_BUFFER = !root.JS_MD5_TEST && typeof ArrayBuffer != 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var EXTRA = [128, 32768, 8388608, -2147483648];
  var SHIFT = [0, 8, 16, 24];
  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer'];

  var blocks = [], buffer8;
  if (ARRAY_BUFFER) {
    var buffer = new ArrayBuffer(68);
    buffer8 = new Uint8Array(buffer);
    blocks = new Uint32Array(buffer);
  }

  /**
   * @method hex
   * @memberof md5
   * @description Output hash as hex string
   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
   * @returns {String} Hex string
   * @example
   * md5.hex('The quick brown fox jumps over the lazy dog');
   * // equal to
   * md5('The quick brown fox jumps over the lazy dog');
   */
  /**
   * @method digest
   * @memberof md5
   * @description Output hash as bytes array
   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
   * @returns {Array} Bytes array
   * @example
   * md5.digest('The quick brown fox jumps over the lazy dog');
   */
  /**
   * @method array
   * @memberof md5
   * @description Output hash as bytes array
   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
   * @returns {Array} Bytes array
   * @example
   * md5.array('The quick brown fox jumps over the lazy dog');
   */
  /**
   * @method arrayBuffer
   * @memberof md5
   * @description Output hash as ArrayBuffer
   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
   * @returns {ArrayBuffer} ArrayBuffer
   * @example
   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');
   */
  /**
   * @method buffer
   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.
   * @memberof md5
   * @description Output hash as ArrayBuffer
   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
   * @returns {ArrayBuffer} ArrayBuffer
   * @example
   * md5.buffer('The quick brown fox jumps over the lazy dog');
   */
  var createOutputMethod = function (outputType) {
    return function (message) {
      return new Md5(true).update(message)[outputType]();
    };
  };

  /**
   * @method create
   * @memberof md5
   * @description Create Md5 object
   * @returns {Md5} Md5 object.
   * @example
   * var hash = md5.create();
   */
  /**
   * @method update
   * @memberof md5
   * @description Create and update Md5 object
   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
   * @returns {Md5} Md5 object.
   * @example
   * var hash = md5.update('The quick brown fox jumps over the lazy dog');
   * // equal to
   * var hash = md5.create();
   * hash.update('The quick brown fox jumps over the lazy dog');
   */
  var createMethod = function () {
    var method = createOutputMethod('hex');
    if (NODE_JS) {
      method = nodeWrap(method);
    }
    method.create = function () {
      return new Md5();
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    for (var i = 0;i < OUTPUT_TYPES.length;++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createOutputMethod(type);
    }
    return method;
  };

  var nodeWrap = function (method) {
    var crypto, Buffer;
    try {
      if (root.JS_MD5_TEST) {
        throw 'JS_MD5_TEST';
      }
      crypto = require('crypto');
      Buffer = require('buffer').Buffer;
    } catch (e) {
      console.log(e);
      return method;
    }
    var nodeMethod = function (message) {
      if (typeof message == 'string') {
        return crypto.createHash('md5').update(message, 'utf8').digest('hex');
      } else if (message.constructor == ArrayBuffer) {
        message = new Uint8Array(message);
      } else if (message.length === undefined) {
        return method(message);
      }
      return crypto.createHash('md5').update(new Buffer(message)).digest('hex');
    };
    return nodeMethod;
  };

  /**
   * Md5 class
   * @class Md5
   * @description This is internal class.
   * @see {@link md5.create}
   */
  function Md5(sharedMemory) {
    if (sharedMemory) {
      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
      blocks[4] = blocks[5] = blocks[6] = blocks[7] =
      blocks[8] = blocks[9] = blocks[10] = blocks[11] =
      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      this.blocks = blocks;
      this.buffer8 = buffer8;
    } else {
      if (ARRAY_BUFFER) {
        var buffer = new ArrayBuffer(68);
        this.buffer8 = new Uint8Array(buffer);
        this.blocks = new Uint32Array(buffer);
      } else {
        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      }
    }
    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = 0;
    this.finalized = this.hashed = false;
    this.first = true;
  }

  /**
   * @method update
   * @memberof Md5
   * @instance
   * @description Update hash
   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
   * @returns {Md5} Md5 object.
   * @see {@link md5.update}
   */
  Md5.prototype.update = function (message) {
    if (this.finalized) {
      return;
    }
    var notString = typeof(message) != 'string';
    if (notString && message.constructor == root.ArrayBuffer) {
      message = new Uint8Array(message);
    }
    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;
    var buffer8 = this.buffer8;

    while (index < length) {
      if (this.hashed) {
        this.hashed = false;
        blocks[0] = blocks[16];
        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }

      if (notString) {
        if (ARRAY_BUFFER) {
          for (i = this.start;index < length && i < 64; ++index) {
            buffer8[i++] = message[index];
          }
        } else {
          for (i = this.start;index < length && i < 64; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        }
      } else {
        if (ARRAY_BUFFER) {
          for (i = this.start;index < length && i < 64; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              buffer8[i++] = code;
            } else if (code < 0x800) {
              buffer8[i++] = 0xc0 | (code >> 6);
              buffer8[i++] = 0x80 | (code & 0x3f);
            } else if (code < 0xd800 || code >= 0xe000) {
              buffer8[i++] = 0xe0 | (code >> 12);
              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);
              buffer8[i++] = 0x80 | (code & 0x3f);
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
              buffer8[i++] = 0xf0 | (code >> 18);
              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);
              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);
              buffer8[i++] = 0x80 | (code & 0x3f);
            }
          }
        } else {
          for (i = this.start;index < length && i < 64; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            }
          }
        }
      }
      this.lastByteIndex = i;
      this.bytes += i - this.start;
      if (i >= 64) {
        this.start = i - 64;
        this.hash();
        this.hashed = true;
      } else {
        this.start = i;
      }
    }
    return this;
  };

  Md5.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex;
    blocks[i >> 2] |= EXTRA[i & 3];
    if (i >= 56) {
      if (!this.hashed) {
        this.hash();
      }
      blocks[0] = blocks[16];
      blocks[16] = blocks[1] = blocks[2] = blocks[3] =
      blocks[4] = blocks[5] = blocks[6] = blocks[7] =
      blocks[8] = blocks[9] = blocks[10] = blocks[11] =
      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    }
    blocks[14] = this.bytes << 3;
    this.hash();
  };

  Md5.prototype.hash = function () {
    var a, b, c, d, bc, da, blocks = this.blocks;

    if (this.first) {
      a = blocks[0] - 680876937;
      a = (a << 7 | a >>> 25) - 271733879 << 0;
      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;
      d = (d << 12 | d >>> 20) + a << 0;
      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;
      c = (c << 17 | c >>> 15) + d << 0;
      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;
      b = (b << 22 | b >>> 10) + c << 0;
    } else {
      a = this.h0;
      b = this.h1;
      c = this.h2;
      d = this.h3;
      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;
      a = (a << 7 | a >>> 25) + b << 0;
      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;
      d = (d << 12 | d >>> 20) + a << 0;
      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;
      c = (c << 17 | c >>> 15) + d << 0;
      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;
      b = (b << 22 | b >>> 10) + c << 0;
    }

    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;
    a = (a << 7 | a >>> 25) + b << 0;
    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;
    d = (d << 12 | d >>> 20) + a << 0;
    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;
    c = (c << 17 | c >>> 15) + d << 0;
    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;
    b = (b << 22 | b >>> 10) + c << 0;
    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;
    a = (a << 7 | a >>> 25) + b << 0;
    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;
    d = (d << 12 | d >>> 20) + a << 0;
    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;
    c = (c << 17 | c >>> 15) + d << 0;
    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;
    b = (b << 22 | b >>> 10) + c << 0;
    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;
    a = (a << 7 | a >>> 25) + b << 0;
    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;
    d = (d << 12 | d >>> 20) + a << 0;
    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;
    c = (c << 17 | c >>> 15) + d << 0;
    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;
    b = (b << 22 | b >>> 10) + c << 0;
    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;
    a = (a << 5 | a >>> 27) + b << 0;
    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;
    d = (d << 9 | d >>> 23) + a << 0;
    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;
    c = (c << 14 | c >>> 18) + d << 0;
    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;
    b = (b << 20 | b >>> 12) + c << 0;
    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;
    a = (a << 5 | a >>> 27) + b << 0;
    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;
    d = (d << 9 | d >>> 23) + a << 0;
    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;
    c = (c << 14 | c >>> 18) + d << 0;
    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;
    b = (b << 20 | b >>> 12) + c << 0;
    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;
    a = (a << 5 | a >>> 27) + b << 0;
    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;
    d = (d << 9 | d >>> 23) + a << 0;
    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;
    c = (c << 14 | c >>> 18) + d << 0;
    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;
    b = (b << 20 | b >>> 12) + c << 0;
    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;
    a = (a << 5 | a >>> 27) + b << 0;
    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;
    d = (d << 9 | d >>> 23) + a << 0;
    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;
    c = (c << 14 | c >>> 18) + d << 0;
    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;
    b = (b << 20 | b >>> 12) + c << 0;
    bc = b ^ c;
    a += (bc ^ d) + blocks[5] - 378558;
    a = (a << 4 | a >>> 28) + b << 0;
    d += (bc ^ a) + blocks[8] - 2022574463;
    d = (d << 11 | d >>> 21) + a << 0;
    da = d ^ a;
    c += (da ^ b) + blocks[11] + 1839030562;
    c = (c << 16 | c >>> 16) + d << 0;
    b += (da ^ c) + blocks[14] - 35309556;
    b = (b << 23 | b >>> 9) + c << 0;
    bc = b ^ c;
    a += (bc ^ d) + blocks[1] - 1530992060;
    a = (a << 4 | a >>> 28) + b << 0;
    d += (bc ^ a) + blocks[4] + 1272893353;
    d = (d << 11 | d >>> 21) + a << 0;
    da = d ^ a;
    c += (da ^ b) + blocks[7] - 155497632;
    c = (c << 16 | c >>> 16) + d << 0;
    b += (da ^ c) + blocks[10] - 1094730640;
    b = (b << 23 | b >>> 9) + c << 0;
    bc = b ^ c;
    a += (bc ^ d) + blocks[13] + 681279174;
    a = (a << 4 | a >>> 28) + b << 0;
    d += (bc ^ a) + blocks[0] - 358537222;
    d = (d << 11 | d >>> 21) + a << 0;
    da = d ^ a;
    c += (da ^ b) + blocks[3] - 722521979;
    c = (c << 16 | c >>> 16) + d << 0;
    b += (da ^ c) + blocks[6] + 76029189;
    b = (b << 23 | b >>> 9) + c << 0;
    bc = b ^ c;
    a += (bc ^ d) + blocks[9] - 640364487;
    a = (a << 4 | a >>> 28) + b << 0;
    d += (bc ^ a) + blocks[12] - 421815835;
    d = (d << 11 | d >>> 21) + a << 0;
    da = d ^ a;
    c += (da ^ b) + blocks[15] + 530742520;
    c = (c << 16 | c >>> 16) + d << 0;
    b += (da ^ c) + blocks[2] - 995338651;
    b = (b << 23 | b >>> 9) + c << 0;
    a += (c ^ (b | ~d)) + blocks[0] - 198630844;
    a = (a << 6 | a >>> 26) + b << 0;
    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;
    d = (d << 10 | d >>> 22) + a << 0;
    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;
    c = (c << 15 | c >>> 17) + d << 0;
    b += (d ^ (c | ~a)) + blocks[5] - 57434055;
    b = (b << 21 | b >>> 11) + c << 0;
    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;
    a = (a << 6 | a >>> 26) + b << 0;
    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;
    d = (d << 10 | d >>> 22) + a << 0;
    c += (a ^ (d | ~b)) + blocks[10] - 1051523;
    c = (c << 15 | c >>> 17) + d << 0;
    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;
    b = (b << 21 | b >>> 11) + c << 0;
    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;
    a = (a << 6 | a >>> 26) + b << 0;
    d += (b ^ (a | ~c)) + blocks[15] - 30611744;
    d = (d << 10 | d >>> 22) + a << 0;
    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;
    c = (c << 15 | c >>> 17) + d << 0;
    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;
    b = (b << 21 | b >>> 11) + c << 0;
    a += (c ^ (b | ~d)) + blocks[4] - 145523070;
    a = (a << 6 | a >>> 26) + b << 0;
    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;
    d = (d << 10 | d >>> 22) + a << 0;
    c += (a ^ (d | ~b)) + blocks[2] + 718787259;
    c = (c << 15 | c >>> 17) + d << 0;
    b += (d ^ (c | ~a)) + blocks[9] - 343485551;
    b = (b << 21 | b >>> 11) + c << 0;

    if (this.first) {
      this.h0 = a + 1732584193 << 0;
      this.h1 = b - 271733879 << 0;
      this.h2 = c - 1732584194 << 0;
      this.h3 = d + 271733878 << 0;
      this.first = false;
    } else {
      this.h0 = this.h0 + a << 0;
      this.h1 = this.h1 + b << 0;
      this.h2 = this.h2 + c << 0;
      this.h3 = this.h3 + d << 0;
    }
  };

  /**
   * @method hex
   * @memberof Md5
   * @instance
   * @description Output hash as hex string
   * @returns {String} Hex string
   * @see {@link md5.hex}
   * @example
   * hash.hex();
   */
  Md5.prototype.hex = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;

    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
       HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
       HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
       HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
       HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
       HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
       HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
       HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
       HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
       HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
       HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
       HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
       HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
       HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
       HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
       HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];
  };

  /**
   * @method toString
   * @memberof Md5
   * @instance
   * @description Output hash as hex string
   * @returns {String} Hex string
   * @see {@link md5.hex}
   * @example
   * hash.toString();
   */
  Md5.prototype.toString = Md5.prototype.hex;

  /**
   * @method digest
   * @memberof Md5
   * @instance
   * @description Output hash as bytes array
   * @returns {Array} Bytes array
   * @see {@link md5.digest}
   * @example
   * hash.digest();
   */
  Md5.prototype.digest = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
    return [
      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,
      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,
      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,
      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF
    ];
  };

  /**
   * @method array
   * @memberof Md5
   * @instance
   * @description Output hash as bytes array
   * @returns {Array} Bytes array
   * @see {@link md5.array}
   * @example
   * hash.array();
   */
  Md5.prototype.array = Md5.prototype.digest;

  /**
   * @method arrayBuffer
   * @memberof Md5
   * @instance
   * @description Output hash as ArrayBuffer
   * @returns {ArrayBuffer} ArrayBuffer
   * @see {@link md5.arrayBuffer}
   * @example
   * hash.arrayBuffer();
   */
  Md5.prototype.arrayBuffer = function () {
    this.finalize();

    var buffer = new ArrayBuffer(16);
    var blocks = new Uint32Array(buffer);
    blocks[0] = this.h0;
    blocks[1] = this.h1;
    blocks[2] = this.h2;
    blocks[3] = this.h3;
    return buffer;
  };

  /**
   * @method buffer
   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.
   * @memberof Md5
   * @instance
   * @description Output hash as ArrayBuffer
   * @returns {ArrayBuffer} ArrayBuffer
   * @see {@link md5.buffer}
   * @example
   * hash.buffer();
   */
  Md5.prototype.buffer = Md5.prototype.arrayBuffer;

  var exports = createMethod();

  if (COMMON_JS) {
    module.exports = exports;
  } else {
    /**
     * @method md5
     * @description Md5 hash function, export to global in browsers.
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {String} md5 hashes
     * @example
     * md5(''); // d41d8cd98f00b204e9800998ecf8427e
     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6
     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0
     *
     * // It also supports UTF-8 encoding
     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07
     *
     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`
     * md5([]); // d41d8cd98f00b204e9800998ecf8427e
     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e
     */
    root.md5 = exports;
    if (AMD) {
      define(function () {
        return exports;
      });
    }
  }
}(this));


// Script: hashtable.js
/**
 * @license jahashtable, a JavaScript implementation of a hash table. It creates a single constructor function called
 * Hashtable in the global scope.
 *
 * http://www.timdown.co.uk/jshashtable/
 * Copyright 2013 Tim Down.
 * Version: 3.0
 * Build date: 17 July 2013
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Hashtable = (function(UNDEFINED) {
    var FUNCTION = "function", STRING = "string", UNDEF = "undefined";

    // Require Array.prototype.splice, Object.prototype.hasOwnProperty and encodeURIComponent. In environments not
    // having these (e.g. IE <= 5), we bail out now and leave Hashtable null.
    if (typeof encodeURIComponent == UNDEF ||
            Array.prototype.splice === UNDEFINED ||
            Object.prototype.hasOwnProperty === UNDEFINED) {
        return null;
    }

    function toStr(obj) {
        return (typeof obj == STRING) ? obj : "" + obj;
    }

    function hashObject(obj) {
        var hashCode;
        if (typeof obj == STRING) {
            return obj;
        } else if (typeof obj.hashCode == FUNCTION) {
            // Check the hashCode method really has returned a string
            hashCode = obj.hashCode();
            return (typeof hashCode == STRING) ? hashCode : hashObject(hashCode);
        } else {
            return toStr(obj);
        }
    }
    
    function merge(o1, o2) {
        for (var i in o2) {
            if (o2.hasOwnProperty(i)) {
                o1[i] = o2[i];
            }
        }
    }

    function equals_fixedValueHasEquals(fixedValue, variableValue) {
        return fixedValue.equals(variableValue);
    }

    function equals_fixedValueNoEquals(fixedValue, variableValue) {
        return (typeof variableValue.equals == FUNCTION) ?
            variableValue.equals(fixedValue) : (fixedValue === variableValue);
    }

    function createKeyValCheck(kvStr) {
        return function(kv) {
            if (kv === null) {
                throw new Error("null is not a valid " + kvStr);
            } else if (kv === UNDEFINED) {
                throw new Error(kvStr + " must not be undefined");
            }
        };
    }

    var checkKey = createKeyValCheck("key"), checkValue = createKeyValCheck("value");

    /*----------------------------------------------------------------------------------------------------------------*/

    function Bucket(hash, firstKey, firstValue, equalityFunction) {
        this[0] = hash;
        this.entries = [];
        this.addEntry(firstKey, firstValue);

        if (equalityFunction !== null) {
            this.getEqualityFunction = function() {
                return equalityFunction;
            };
        }
    }

    var EXISTENCE = 0, ENTRY = 1, ENTRY_INDEX_AND_VALUE = 2;

    function createBucketSearcher(mode) {
        return function(key) {
            var i = this.entries.length, entry, equals = this.getEqualityFunction(key);
            while (i--) {
                entry = this.entries[i];
                if ( equals(key, entry[0]) ) {
                    switch (mode) {
                        case EXISTENCE:
                            return true;
                        case ENTRY:
                            return entry;
                        case ENTRY_INDEX_AND_VALUE:
                            return [ i, entry[1] ];
                    }
                }
            }
            return false;
        };
    }

    function createBucketLister(entryProperty) {
        return function(aggregatedArr) {
            var startIndex = aggregatedArr.length;
            for (var i = 0, entries = this.entries, len = entries.length; i < len; ++i) {
                aggregatedArr[startIndex + i] = entries[i][entryProperty];
            }
        };
    }

    Bucket.prototype = {
        getEqualityFunction: function(searchValue) {
            return (typeof searchValue.equals == FUNCTION) ? equals_fixedValueHasEquals : equals_fixedValueNoEquals;
        },

        getEntryForKey: createBucketSearcher(ENTRY),

        getEntryAndIndexForKey: createBucketSearcher(ENTRY_INDEX_AND_VALUE),

        removeEntryForKey: function(key) {
            var result = this.getEntryAndIndexForKey(key);
            if (result) {
                this.entries.splice(result[0], 1);
                return result[1];
            }
            return null;
        },

        addEntry: function(key, value) {
            this.entries.push( [key, value] );
        },

        keys: createBucketLister(0),

        values: createBucketLister(1),

        getEntries: function(destEntries) {
            var startIndex = destEntries.length;
            for (var i = 0, entries = this.entries, len = entries.length; i < len; ++i) {
                // Clone the entry stored in the bucket before adding to array
                destEntries[startIndex + i] = entries[i].slice(0);
            }
        },

        containsKey: createBucketSearcher(EXISTENCE),

        containsValue: function(value) {
            var entries = this.entries, i = entries.length;
            while (i--) {
                if ( value === entries[i][1] ) {
                    return true;
                }
            }
            return false;
        }
    };

    /*----------------------------------------------------------------------------------------------------------------*/

    // Supporting functions for searching hashtable buckets

    function searchBuckets(buckets, hash) {
        var i = buckets.length, bucket;
        while (i--) {
            bucket = buckets[i];
            if (hash === bucket[0]) {
                return i;
            }
        }
        return null;
    }

    function getBucketForHash(bucketsByHash, hash) {
        var bucket = bucketsByHash[hash];

        // Check that this is a genuine bucket and not something inherited from the bucketsByHash's prototype
        return ( bucket && (bucket instanceof Bucket) ) ? bucket : null;
    }

    /*----------------------------------------------------------------------------------------------------------------*/

    function Hashtable() {
        var buckets = [];
        var bucketsByHash = {};
        var properties = {
            replaceDuplicateKey: true,
            hashCode: hashObject,
            equals: null
        };

        var arg0 = arguments[0], arg1 = arguments[1];
        if (arg1 !== UNDEFINED) {
            properties.hashCode = arg0;
            properties.equals = arg1;
        } else if (arg0 !== UNDEFINED) {
            merge(properties, arg0);
        }

        var hashCode = properties.hashCode, equals = properties.equals;

        this.properties = properties;

        this.put = function(key, value) {
            checkKey(key);
            checkValue(value);
            var hash = hashCode(key), bucket, bucketEntry, oldValue = null;

            // Check if a bucket exists for the bucket key
            bucket = getBucketForHash(bucketsByHash, hash);
            if (bucket) {
                // Check this bucket to see if it already contains this key
                bucketEntry = bucket.getEntryForKey(key);
                if (bucketEntry) {
                    // This bucket entry is the current mapping of key to value, so replace the old value.
                    // Also, we optionally replace the key so that the latest key is stored.
                    if (properties.replaceDuplicateKey) {
                        bucketEntry[0] = key;
                    }
                    oldValue = bucketEntry[1];
                    bucketEntry[1] = value;
                } else {
                    // The bucket does not contain an entry for this key, so add one
                    bucket.addEntry(key, value);
                }
            } else {
                // No bucket exists for the key, so create one and put our key/value mapping in
                bucket = new Bucket(hash, key, value, equals);
                buckets.push(bucket);
                bucketsByHash[hash] = bucket;
            }
            return oldValue;
        };

        this.get = function(key) {
            checkKey(key);

            var hash = hashCode(key);

            // Check if a bucket exists for the bucket key
            var bucket = getBucketForHash(bucketsByHash, hash);
            if (bucket) {
                // Check this bucket to see if it contains this key
                var bucketEntry = bucket.getEntryForKey(key);
                if (bucketEntry) {
                    // This bucket entry is the current mapping of key to value, so return the value.
                    return bucketEntry[1];
                }
            }
            return null;
        };

        this.containsKey = function(key) {
            checkKey(key);
            var bucketKey = hashCode(key);

            // Check if a bucket exists for the bucket key
            var bucket = getBucketForHash(bucketsByHash, bucketKey);

            return bucket ? bucket.containsKey(key) : false;
        };

        this.containsValue = function(value) {
            checkValue(value);
            var i = buckets.length;
            while (i--) {
                if (buckets[i].containsValue(value)) {
                    return true;
                }
            }
            return false;
        };

        this.clear = function() {
            buckets.length = 0;
            bucketsByHash = {};
        };

        this.isEmpty = function() {
            return !buckets.length;
        };

        var createBucketAggregator = function(bucketFuncName) {
            return function() {
                var aggregated = [], i = buckets.length;
                while (i--) {
                    buckets[i][bucketFuncName](aggregated);
                }
                return aggregated;
            };
        };

        this.keys = createBucketAggregator("keys");
        this.values = createBucketAggregator("values");
        this.entries = createBucketAggregator("getEntries");

        this.remove = function(key) {
            checkKey(key);

            var hash = hashCode(key), bucketIndex, oldValue = null;

            // Check if a bucket exists for the bucket key
            var bucket = getBucketForHash(bucketsByHash, hash);

            if (bucket) {
                // Remove entry from this bucket for this key
                oldValue = bucket.removeEntryForKey(key);
                if (oldValue !== null) {
                    // Entry was removed, so check if bucket is empty
                    if (bucket.entries.length == 0) {
                        // Bucket is empty, so remove it from the bucket collections
                        bucketIndex = searchBuckets(buckets, hash);
                        buckets.splice(bucketIndex, 1);
                        delete bucketsByHash[hash];
                    }
                }
            }
            return oldValue;
        };

        this.size = function() {
            var total = 0, i = buckets.length;
            while (i--) {
                total += buckets[i].entries.length;
            }
            return total;
        };
    }

    Hashtable.prototype = {
        each: function(callback) {
            var entries = this.entries(), i = entries.length, entry;
            while (i--) {
                entry = entries[i];
                callback(entry[0], entry[1]);
            }
        },

        equals: function(hashtable) {
            var keys, key, val, count = this.size();
            if (count == hashtable.size()) {
                keys = this.keys();
                while (count--) {
                    key = keys[count];
                    val = hashtable.get(key);
                    if (val === null || val !== this.get(key)) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        },

        putAll: function(hashtable, conflictCallback) {
            var entries = hashtable.entries();
            var entry, key, value, thisValue, i = entries.length;
            var hasConflictCallback = (typeof conflictCallback == FUNCTION);
            while (i--) {
                entry = entries[i];
                key = entry[0];
                value = entry[1];

                // Check for a conflict. The default behaviour is to overwrite the value for an existing key
                if ( hasConflictCallback && (thisValue = this.get(key)) ) {
                    value = conflictCallback(key, thisValue, value);
                }
                this.put(key, value);
            }
        },

        clone: function() {
            var clone = new Hashtable(this.properties);
            clone.putAll(this);
            return clone;
        }
    };

    Hashtable.prototype.toQueryString = function() {
        var entries = this.entries(), i = entries.length, entry;
        var parts = [];
        while (i--) {
            entry = entries[i];
            parts[i] = encodeURIComponent( toStr(entry[0]) ) + "=" + encodeURIComponent( toStr(entry[1]) );
        }
        return parts.join("&");
    };

    return Hashtable;
})();

// Script: gl-matrix.js
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.2.0
 */

/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


(function(_global) {
  "use strict";

  var shim = {};
  if (typeof(exports) === 'undefined') {
    if(typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      shim.exports = {};
      define(function() {
        return shim.exports;
      });
    } else {
      // gl-matrix lives in a browser, define its namespaces in global
      shim.exports = typeof(window) !== 'undefined' ? window : _global;
    }
  }
  else {
    // gl-matrix lives in commonjs, define its namespaces in exports
    shim.exports = exports;
  }

  (function(exports) {
    /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


if(!GLMAT_EPSILON) {
    var GLMAT_EPSILON = 0.000001;
}

if(!GLMAT_ARRAY_TYPE) {
    var GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
}

if(!GLMAT_RANDOM) {
    var GLMAT_RANDOM = Math.random;
}

/**
 * @class Common utilities
 * @name glMatrix
 */
var glMatrix = {};

/**
 * Sets the type of array used when creating new vectors and matricies
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
glMatrix.setMatrixArrayType = function(type) {
    GLMAT_ARRAY_TYPE = type;
}

if(typeof(exports) !== 'undefined') {
    exports.glMatrix = glMatrix;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 2 Dimensional Vector
 * @name vec2
 */

var vec2 = {};

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
vec2.create = function() {
    var out = new GLMAT_ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
};

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
vec2.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
vec2.fromValues = function(x, y) {
    var out = new GLMAT_ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};

/**
 * Alias for {@link vec2.subtract}
 * @function
 */
vec2.sub = vec2.subtract;

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};

/**
 * Alias for {@link vec2.multiply}
 * @function
 */
vec2.mul = vec2.multiply;

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};

/**
 * Alias for {@link vec2.divide}
 * @function
 */
vec2.div = vec2.divide;

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
vec2.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.distance}
 * @function
 */
vec2.dist = vec2.distance;

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
vec2.sqrDist = vec2.squaredDistance;

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
vec2.length = function (a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.length}
 * @function
 */
vec2.len = vec2.length;

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec2.squaredLength = function (a) {
    var x = a[0],
        y = a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
vec2.sqrLen = vec2.squaredLength;

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x*x + y*y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
vec2.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
vec2.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */
vec2.random = function (out, scale) {
    scale = scale || 1.0;
    var r = GLMAT_RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2d = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat4 = function(out, a, m) {
    var x = a[0], 
        y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
};

/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec2.forEach = (function() {
    var vec = vec2.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 2;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec2.str = function (a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec2 = vec2;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 3 Dimensional Vector
 * @name vec3
 */

var vec3 = {};

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
vec3.create = function() {
    var out = new GLMAT_ARRAY_TYPE(3);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
};

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
vec3.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
vec3.fromValues = function(x, y, z) {
    var out = new GLMAT_ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
};

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
vec3.sub = vec3.subtract;

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
};

/**
 * Alias for {@link vec3.multiply}
 * @function
 */
vec3.mul = vec3.multiply;

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
};

/**
 * Alias for {@link vec3.divide}
 * @function
 */
vec3.div = vec3.divide;

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
};

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
};

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
};

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
vec3.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
vec3.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.distance}
 * @function
 */
vec3.dist = vec3.distance;

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
vec3.sqrDist = vec3.squaredDistance;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
vec3.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.length}
 * @function
 */
vec3.len = vec3.length;

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec3.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
vec3.sqrLen = vec3.squaredLength;

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
};

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
vec3.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var len = x*x + y*y + z*z;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
vec3.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.cross = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2];

    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
};

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */
vec3.random = function (out, scale) {
    scale = scale || 1.0;

    var r = GLMAT_RANDOM() * 2.0 * Math.PI;
    var z = (GLMAT_RANDOM() * 2.0) - 1.0;
    var zScale = Math.sqrt(1.0-z*z) * scale;

    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
};

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12];
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13];
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14];
    return out;
};

/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat3 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
};

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
vec3.transformQuat = function(out, a, q) {
    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec3.forEach = (function() {
    var vec = vec3.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 3;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec3.str = function (a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec3 = vec3;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 4 Dimensional Vector
 * @name vec4
 */

var vec4 = {};

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
vec4.create = function() {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
};

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
vec4.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
vec4.fromValues = function(x, y, z, w) {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
vec4.sub = vec4.subtract;

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
};

/**
 * Alias for {@link vec4.multiply}
 * @function
 */
vec4.mul = vec4.multiply;

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
};

/**
 * Alias for {@link vec4.divide}
 * @function
 */
vec4.div = vec4.divide;

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
};

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
};

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
vec4.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
vec4.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.distance}
 * @function
 */
vec4.dist = vec4.distance;

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
vec4.sqrDist = vec4.squaredDistance;

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
vec4.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.length}
 * @function
 */
vec4.len = vec4.length;

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec4.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
vec4.sqrLen = vec4.squaredLength;

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
};

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
vec4.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    var len = x*x + y*y + z*z + w*w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
        out[3] = a[3] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
vec4.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
vec4.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */
vec4.random = function (out, scale) {
    scale = scale || 1.0;

    //TODO: This is a pretty awful way of doing this. Find something better.
    out[0] = GLMAT_RANDOM();
    out[1] = GLMAT_RANDOM();
    out[2] = GLMAT_RANDOM();
    out[3] = GLMAT_RANDOM();
    vec4.normalize(out, out);
    vec4.scale(out, out, scale);
    return out;
};

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
vec4.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
};

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
vec4.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec4.forEach = (function() {
    var vec = vec4.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 4;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec4.str = function (a) {
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec4 = vec4;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 2x2 Matrix
 * @name mat2
 */

var mat2 = {};

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
mat2.create = function() {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
mat2.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
    } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
    }
    
    return out;
};

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],

        // Calculate the determinant
        det = a0 * a3 - a2 * a1;

    if (!det) {
        return null;
    }
    det = 1.0 / det;
    
    out[0] =  a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] =  a0 * det;

    return out;
};

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.adjoint = function(out, a) {
    // Caching this value is nessecary if out == a
    var a0 = a[0];
    out[0] =  a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] =  a0;

    return out;
};

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
mat2.determinant = function (a) {
    return a[0] * a[3] - a[2] * a[1];
};

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a1 * b2;
    out[1] = a0 * b1 + a1 * b3;
    out[2] = a2 * b0 + a3 * b2;
    out[3] = a2 * b1 + a3 * b3;
    return out;
};

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
mat2.mul = mat2.multiply;

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a1 * s;
    out[1] = a0 * -s + a1 * c;
    out[2] = a2 *  c + a3 * s;
    out[3] = a2 * -s + a3 * c;
    return out;
};

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
mat2.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v1;
    out[2] = a2 * v0;
    out[3] = a3 * v1;
    return out;
};

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2.str = function (a) {
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat2 = mat2;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 2x3 Matrix
 * @name mat2d
 * 
 * @description 
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, b,
 *  c, d,
 *  tx,ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, b, 0
 *  c, d, 0
 *  tx,ty,1]
 * </pre>
 * The last column is ignored so the array is shorter and operations are faster.
 */

var mat2d = {};

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.create = function() {
    var out = new GLMAT_ARRAY_TYPE(6);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
mat2d.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.invert = function(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
        atx = a[4], aty = a[5];

    var det = aa * ad - ab * ac;
    if(!det){
        return null;
    }
    det = 1.0 / det;

    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
};

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
mat2d.determinant = function (a) {
    return a[0] * a[3] - a[1] * a[2];
};

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.multiply = function (out, a, b) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
        atx = a[4], aty = a[5],
        ba = b[0], bb = b[1], bc = b[2], bd = b[3],
        btx = b[4], bty = b[5];

    out[0] = aa*ba + ab*bc;
    out[1] = aa*bb + ab*bd;
    out[2] = ac*ba + ad*bc;
    out[3] = ac*bb + ad*bd;
    out[4] = ba*atx + bc*aty + btx;
    out[5] = bb*atx + bd*aty + bty;
    return out;
};

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
mat2d.mul = mat2d.multiply;


/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.rotate = function (out, a, rad) {
    var aa = a[0],
        ab = a[1],
        ac = a[2],
        ad = a[3],
        atx = a[4],
        aty = a[5],
        st = Math.sin(rad),
        ct = Math.cos(rad);

    out[0] = aa*ct + ab*st;
    out[1] = -aa*st + ab*ct;
    out[2] = ac*ct + ad*st;
    out[3] = -ac*st + ct*ad;
    out[4] = ct*atx + st*aty;
    out[5] = ct*aty - st*atx;
    return out;
};

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
mat2d.scale = function(out, a, v) {
    var vx = v[0], vy = v[1];
    out[0] = a[0] * vx;
    out[1] = a[1] * vy;
    out[2] = a[2] * vx;
    out[3] = a[3] * vy;
    out[4] = a[4] * vx;
    out[5] = a[5] * vy;
    return out;
};

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
mat2d.translate = function(out, a, v) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4] + v[0];
    out[5] = a[5] + v[1];
    return out;
};

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2d.str = function (a) {
    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat2d = mat2d;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 3x3 Matrix
 * @name mat3
 */

var mat3 = {};

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
mat3.create = function() {
    var out = new GLMAT_ARRAY_TYPE(9);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */
mat3.fromMat4 = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
};

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
mat3.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }
    
    return out;
};

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,

        // Calculate the determinant
        det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
};

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    out[0] = (a11 * a22 - a12 * a21);
    out[1] = (a02 * a21 - a01 * a22);
    out[2] = (a01 * a12 - a02 * a11);
    out[3] = (a12 * a20 - a10 * a22);
    out[4] = (a00 * a22 - a02 * a20);
    out[5] = (a02 * a10 - a00 * a12);
    out[6] = (a10 * a21 - a11 * a20);
    out[7] = (a01 * a20 - a00 * a21);
    out[8] = (a00 * a11 - a01 * a10);
    return out;
};

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
mat3.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
};

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b00 = b[0], b01 = b[1], b02 = b[2],
        b10 = b[3], b11 = b[4], b12 = b[5],
        b20 = b[6], b21 = b[7], b22 = b[8];

    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;

    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;

    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
};

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
mat3.mul = mat3.multiply;

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
mat3.translate = function(out, a, v) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],
        x = v[0], y = v[1];

    out[0] = a00;
    out[1] = a01;
    out[2] = a02;

    out[3] = a10;
    out[4] = a11;
    out[5] = a12;

    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
};

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.rotate = function (out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        s = Math.sin(rad),
        c = Math.cos(rad);

    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;

    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;

    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
mat3.scale = function(out, a, v) {
    var x = v[0], y = v[1];

    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];

    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];

    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/
mat3.fromMat2d = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;

    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;

    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
};

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
mat3.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[3] = xy + wz;
    out[6] = xz - wy;

    out[1] = xy - wz;
    out[4] = 1 - (xx + zz);
    out[7] = yz + wx;

    out[2] = xz + wy;
    out[5] = yz - wx;
    out[8] = 1 - (xx + yy);

    return out;
};

/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/
mat3.normalFromMat4 = function (out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

    return out;
};

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat3.str = function (a) {
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + 
                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat3 = mat3;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 4x4 Matrix
 * @name mat4
 */

var mat4 = {};

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
mat4.create = function() {
    var out = new GLMAT_ARRAY_TYPE(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
mat4.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
mat4.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
mat4.mul = mat4.multiply;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.translate = function (out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.scale = function(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.rotate = function (out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < GLMAT_EPSILON) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateX = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateY = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateZ = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslation = function (out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};

/**
* Calculates a 4x4 matrix from the given quaternion
*
* @param {mat4} out mat4 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat4} out
*/
mat4.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;

    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;

    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.frustum = function (out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspective = function (out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.ortho = function (out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
mat4.lookAt = function (out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&
        Math.abs(eyey - centery) < GLMAT_EPSILON &&
        Math.abs(eyez - centerz) < GLMAT_EPSILON) {
        return mat4.identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat4.str = function (a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat4 = mat4;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class Quaternion
 * @name quat
 */

var quat = {};

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
quat.create = function() {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
quat.rotationTo = (function() {
    var tmpvec3 = vec3.create();
    var xUnitVec3 = vec3.fromValues(1,0,0);
    var yUnitVec3 = vec3.fromValues(0,1,0);

    return function(out, a, b) {
        var dot = vec3.dot(a, b);
        if (dot < -0.999999) {
            vec3.cross(tmpvec3, xUnitVec3, a);
            if (vec3.length(tmpvec3) < 0.000001)
                vec3.cross(tmpvec3, yUnitVec3, a);
            vec3.normalize(tmpvec3, tmpvec3);
            quat.setAxisAngle(out, tmpvec3, Math.PI);
            return out;
        } else if (dot > 0.999999) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        } else {
            vec3.cross(tmpvec3, a, b);
            out[0] = tmpvec3[0];
            out[1] = tmpvec3[1];
            out[2] = tmpvec3[2];
            out[3] = 1 + dot;
            return quat.normalize(out, out);
        }
    };
})();

/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
quat.setAxes = (function() {
    var matr = mat3.create();

    return function(out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];

        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];

        matr[2] = view[0];
        matr[5] = view[1];
        matr[8] = view[2];

        return quat.normalize(out, quat.fromMat3(out, matr));
    };
})();

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
quat.clone = vec4.clone;

/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
quat.fromValues = vec4.fromValues;

/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
quat.copy = vec4.copy;

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
quat.set = vec4.set;

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
};

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
quat.add = vec4.add;

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
quat.multiply = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
};

/**
 * Alias for {@link quat.multiply}
 * @function
 */
quat.mul = quat.multiply;

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
quat.scale = vec4.scale;

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateX = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateY = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        by = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateZ = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bz = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
};

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
quat.calculateW = function (out, a) {
    var x = a[0], y = a[1], z = a[2];

    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
};

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
quat.dot = vec4.dot;

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
quat.lerp = vec4.lerp;

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
quat.slerp = function (out, a, b, t) {
    // benchmarks:
    //    http://jsperf.com/quaternion-slerp-implementations

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    var        omega, cosom, sinom, scale0, scale1;

    // calc cosine
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    // adjust signs (if necessary)
    if ( cosom < 0.0 ) {
        cosom = -cosom;
        bx = - bx;
        by = - by;
        bz = - bz;
        bw = - bw;
    }
    // calculate coefficients
    if ( (1.0 - cosom) > 0.000001 ) {
        // standard case (slerp)
        omega  = Math.acos(cosom);
        sinom  = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
    } else {        
        // "from" and "to" quaternions are very close 
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
    }
    // calculate final values
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    
    return out;
};

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
quat.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
        invDot = dot ? 1.0/dot : 0;
    
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

    out[0] = -a0*invDot;
    out[1] = -a1*invDot;
    out[2] = -a2*invDot;
    out[3] = a3*invDot;
    return out;
};

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
quat.conjugate = function (out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
};

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */
quat.length = vec4.length;

/**
 * Alias for {@link quat.length}
 * @function
 */
quat.len = quat.length;

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
quat.squaredLength = vec4.squaredLength;

/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
quat.sqrLen = quat.squaredLength;

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
quat.normalize = vec4.normalize;

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
quat.fromMat3 = (function() {
    // benchmarks:
    //    http://jsperf.com/typed-array-access-speed
    //    http://jsperf.com/conversion-of-3x3-matrix-to-quaternion

    var s_iNext = (typeof(Int8Array) !== 'undefined' ? new Int8Array([1,2,0]) : [1,2,0]);

    return function(out, m) {
        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
        // article "Quaternion Calculus and Fast Animation".
        var fTrace = m[0] + m[4] + m[8];
        var fRoot;

        if ( fTrace > 0.0 ) {
            // |w| > 1/2, may as well choose w > 1/2
            fRoot = Math.sqrt(fTrace + 1.0);  // 2w
            out[3] = 0.5 * fRoot;
            fRoot = 0.5/fRoot;  // 1/(4w)
            out[0] = (m[7]-m[5])*fRoot;
            out[1] = (m[2]-m[6])*fRoot;
            out[2] = (m[3]-m[1])*fRoot;
        } else {
            // |w| <= 1/2
            var i = 0;
            if ( m[4] > m[0] )
              i = 1;
            if ( m[8] > m[i*3+i] )
              i = 2;
            var j = s_iNext[i];
            var k = s_iNext[j];
            
            fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
            out[i] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot;
            out[3] = (m[k*3+j] - m[j*3+k]) * fRoot;
            out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
            out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
        }
        
        return out;
    };
})();

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
quat.str = function (a) {
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.quat = quat;
}
;













  })(shim.exports);
})(this);


// Script: hashset.js
/**
 * Copyright 2013 Tim Down.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * HashSet
 *
 * This is a JavaScript implementation of HashSet, similar in concept to those found in Java or C#'s standard libraries.
 * It is distributed as part of jshashtable and depends on jshashtable.js. It creates a single constructor function
 * called HashSet in the global scope.
 *
 * Depends on: jshashtable.js
 * Author: Tim Down <tim@timdown.co.uk>
 * Version: 3.0
 * Build date: 17 July 2013
 * Website: http://www.timdown.co.uk/jshashtable/
 */

function HashSet(param1, param2) {
    var hashTable = new Hashtable(param1, param2);

    this.add = function(o) {
        hashTable.put(o, true);
    };

    this.addAll = function(arr) {
        for (var i = 0, len = arr.length; i < len; ++i) {
            hashTable.put(arr[i], true);
        }
    };

    this.values = function() {
        return hashTable.keys();
    };

    this.remove = function(o) {
        return hashTable.remove(o) ? o : null;
    };

    this.contains = function(o) {
        return hashTable.containsKey(o);
    };

    this.clear = function() {
        hashTable.clear();
    };

    this.size = function() {
        return hashTable.size();
    };

    this.isEmpty = function() {
        return hashTable.isEmpty();
    };

    this.clone = function() {
        var h = new HashSet(param1, param2);
        h.addAll(hashTable.keys());
        return h;
    };

    this.cloneEmpty = function() {
        return new HashSet(param1, param2);
    };

    this.intersection = function(hashSet) {
        var intersection = new HashSet(param1, param2);
        var values = hashSet.values(), i = values.length, val;
        while (i--) {
            val = values[i];
            if (hashTable.containsKey(val)) {
                intersection.add(val);
            }
        }
        return intersection;
    };

    this.union = function(hashSet) {
        var union = this.clone();
        var values = hashSet.values(), i = values.length, val;
        while (i--) {
            val = values[i];
            if (!hashTable.containsKey(val)) {
                union.add(val);
            }
        }
        return union;
    };

    this.isSubsetOf = function(hashSet) {
        var values = hashTable.keys(), i = values.length;
        while (i--) {
            if (!hashSet.contains(values[i])) {
                return false;
            }
        }
        return true;
    };

    this.complement = function(hashSet) {
        var complement = new HashSet(param1, param2);
        var values = this.values(), i = values.length, val;
        while (i--) {
            val = values[i];
            if (!hashSet.contains(val)) {
                complement.add(val);
            }
        }
        return complement;
    };
}


// Script: BigInteger.min.js
var bigInt=function(undefined){"use strict";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v==="undefined")return Integer[0];if(typeof radix!=="undefined")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value==="number"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r==="number"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];for(var j=0;j<l;j++){a_j=a[j];product=a_i*a_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error("Cannot divide by zero");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient==="number"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient==="number"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod==="number"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error("The exponent "+n.toString()+" is too large.");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error("Cannot take modPow with modulus 0");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(25))return true}BigInteger.prototype.isPrime=function(){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs(),nPrev=n.prev();var a=[2,3,5,7,11,13,17,19],b=nPrev,d,t,i,x;while(b.isEven())b=b.divide(2);for(i=0;i<a.length;i++){x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(t=true,d=b;t&&d.lesser(nPrev);d=d.multiply(2)){x=x.square().mod(n);if(x.equals(nPrev))t=false}if(t)return false}return true};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var i=0;i<t;i++){var a=bigInt.randBetween(2,n.minus(2));if(!a.modPow(n.prev(),n).isUnit())return false}return true};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+" and "+n.toString()+" are not co-prime");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n==="number"||typeof n==="string")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+" is too large for shifting.")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+" is too large for shifting.")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xBits=[],yBits=[];var xStop=false,yStop=false;while(!xStop||!yStop){if(xRem.isZero()){xStop=true;xBits.push(xSign?1:0)}else if(xSign)xBits.push(xRem.isEven()?1:0);else xBits.push(xRem.isEven()?0:1);if(yRem.isZero()){yStop=true;yBits.push(ySign?1:0)}else if(ySign)yBits.push(yRem.isEven()?1:0);else yBits.push(yRem.isEven()?0:1);xRem=xRem.over(2);yRem=yRem.over(2)}var result=[];for(var i=0;i<xBits.length;i++)result.push(fn(xBits[i],yBits[i]));var sum=bigInt(result.pop()).negate().times(bigInt(2).pow(result.length));while(result.length){sum=sum.add(bigInt(result.pop()).times(bigInt(2).pow(result.length)))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v==="number"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low);if(range.isSmall)return low.add(Math.round(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result==="number"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c==="-")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c==="1"&&absBase===1)continue;throw new Error(c+" is not a valid digit in base "+base+".")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+" is not a valid digit in base "+base+".")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+" is not a valid digit in base "+base+".")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]==="-";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c==="<"){var start=i;do{i++}while(text[i]!==">");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+" is not a valid character")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){var v=digit.value;if(typeof v==="number")v=[v];if(v.length===1&&v[0]<=35){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(v[0])}return"<"+v+">"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return"0";throw new Error("Cannot convert nonzero numbers to base 0.")}if(base.equals(-1)){if(n.isZero())return"0";if(n.isNegative())return new Array(1-n).join("10");return"1"+new Array(+n).join("01")}var minusSign="";if(n.isNegative()&&base.isPositive()){minusSign="-";n=n.abs()}if(base.equals(1)){if(n.isZero())return"0";return minusSign+new Array(+n+1).join(1)}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(stringify(digit))}out.push(stringify(left));return minusSign+out.reverse().join("")}BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBase(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros="0000000",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?"-":"";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBase(this,radix);return String(this.value)};BigInteger.prototype.valueOf=function(){return+this.toString()};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw"Invalid integer: "+v}var sign=v[0]==="-";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error("Invalid integer: "+split.join("e"));if(split.length===2){var exp=split[1];if(exp[0]==="+")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error("Invalid integer: "+exp+" is not a valid exponent.");var text=split[0];var decimalPlace=text.indexOf(".");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error("Cannot include negative exponent part for integers");text+=new Array(exp+1).join("0");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error("Invalid integer: "+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+" is not an integer.");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v==="number"){return parseNumberValue(v)}if(typeof v==="string"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(typeof module!=="undefined"&&module.hasOwnProperty("exports")){module.exports=bigInt}if(typeof define==="function"&&define.amd){define("big-integer",[],function(){return bigInt})}

// Script: mscorlib.js
// SaltarelleCompiler Runtime (http://www.saltarelle-compiler.com)
// Modified version of Script# Core Runtime (http://projects.nikhilk.net/ScriptSharp)

if (typeof(global) === "undefined") {
	if (typeof(window) !== "undefined")
		global = window;
	else if (typeof(self) !== "undefined")
		global = self;
}
(function(global) {
"use strict";

var ss = { __assemblies: {} };

ss.initAssembly = function assembly(obj, name, res) {
	res = res || {};
	obj.name = name;
	obj.toString = function() { return this.name; };
	obj.__types = {};
	obj.getResourceNames = function() { return Object.keys(res); };
	obj.getResourceDataBase64 = function(name) { return res[name] || null; };
	obj.getResourceData = function(name) { var r = res[name]; return r ? ss.dec64(r) : null; };
	ss.__assemblies[name] = obj;
};
ss.initAssembly(ss, 'mscorlib');

ss.load = function ss$load(name) {
	return ss.__assemblies[name] || require(name);
};

var enc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', dec;
ss.enc64 = function(a, b) {
	var s = '', i;
	for (i = 0; i < a.length; i += 3) {
		var c1 = a[i], c2 = a[i+1], c3 = a[i+2];
		s += (b && i && !(i%57) ? '\n' : '') + enc[c1 >> 2] + enc[((c1 & 3) << 4) | (c2 >> 4)] + (i < a.length - 1 ? enc[((c2 & 15) << 2) | (c3 >> 6)] : '=') + (i < a.length - 2 ? enc[c3 & 63] : '=');
	}
	return s;
};

ss.dec64 = function(s) {
	s = s.replace(/\s/g, '');
	dec = dec || (function() { var o = {'=':-1}; for (var i = 0; i < 64; i++) o[enc[i]] = i; return o; })();
	var a = Array(Math.max(s.length * 3 / 4 - 2, 0)), i;
	for (i = 0; i < s.length; i += 4) {
		var j = i * 3 / 4, c1 = dec[s[i]], c2 = dec[s[i+1]], c3 = dec[s[i+2]], c4 = dec[s[i+3]];
		a[j] = (c1 << 2) | (c2 >> 4);
		if (c3 >= 0) a[j+1] = ((c2 & 15) << 4) | (c3 >> 2);
		if (c4 >= 0) a[j+2] = ((c3 & 3) << 6) | c4;
	}
	return a;
};

ss.getAssemblies = function ss$getAssemblies() {
	return Object.keys(ss.__assemblies).map(function(n) { return ss.__assemblies[n]; });
};

ss.isNullOrUndefined = function ss$isNullOrUndefined(o) {
	return (o === null) || (o === undefined);
};

ss.isValue = function ss$isValue(o) {
	return (o !== null) && (o !== undefined);
};

ss.referenceEquals = function ss$referenceEquals(a, b) {
	return ss.isValue(a) ? a === b : !ss.isValue(b);
};

ss.mkdict = function ss$mkdict() {
	var a = (arguments.length != 1 ? arguments : arguments[0]);
	var r = {};
	for (var i = 0; i < a.length; i += 2) {
		r[a[i]] = a[i + 1];
	}
	return r;
};

ss.clone = function ss$clone(t, o) {
	return o ? t.$clone(o) : o;
}

ss.coalesce = function ss$coalesce(a, b) {
	return ss.isValue(a) ? a : b;
};

ss.isDate = function ss$isDate(obj) {
	return Object.prototype.toString.call(obj) === '[object Date]';
};

ss.isArray = function ss$isArray(obj) {
	return Object.prototype.toString.call(obj) === '[object Array]';
};

ss.isTypedArrayType = function ss$isTypedArrayType(type) {
	return ['Float32Array', 'Float64Array', 'Int8Array', 'Int16Array', 'Int32Array', 'Uint8Array', 'Uint16Array', 'Uint32Array', 'Uint8ClampedArray'].indexOf(ss.getTypeFullName(type)) >= 0;
};

ss.isArrayOrTypedArray = function ss$isArray(obj) {
	return ss.isArray(obj) || ss.isTypedArrayType(ss.getInstanceType(obj));
};

ss.getHashCode = function ss$getHashCode(obj) {
	if (!ss.isValue(obj))
		throw new ss_NullReferenceException('Cannot get hash code of null');
	else if (typeof(obj.getHashCode) === 'function')
		return obj.getHashCode();
	else if (typeof(obj) === 'boolean') {
		return obj ? 1 : 0;
	}
	else if (typeof(obj) === 'number') {
		var s = obj.toExponential();
		s = s.substr(0, s.indexOf('e'));
		return parseInt(s.replace('.', ''), 10) & 0xffffffff;
	}
	else if (typeof(obj) === 'string') {
		var res = 0;
		for (var i = 0; i < obj.length; i++)
			res = (res * 31 + obj.charCodeAt(i)) & 0xffffffff;
		return res;
	}
	else if (ss.isDate(obj)) {
		return obj.valueOf() & 0xffffffff;
	}
	else {
		return ss.defaultHashCode(obj);
	}
};

ss.defaultHashCode = function ss$defaultHashCode(obj) {
	return obj.$__hashCode__ || (obj.$__hashCode__ = (Math.random() * 0x100000000) | 0);
};

ss.equals = function ss$equals(a, b) {
	if (!ss.isValue(a))
		throw new ss_NullReferenceException('Object is null');
	else if (a !== ss && typeof(a.equals) === 'function')
		return a.equals(b);
	if (ss.isDate(a) && ss.isDate(b))
		return a.valueOf() === b.valueOf();
	else if (typeof(a) === 'function' && typeof(b) === 'function')
		return ss.delegateEquals(a, b);
	else if (ss.isNullOrUndefined(a) && ss.isNullOrUndefined(b))
		return true;
	else
		return a === b;
};

ss.compare = function ss$compare(a, b) {
	if (!ss.isValue(a))
		throw new ss_NullReferenceException('Object is null');
	else if (typeof(a) === 'number' || typeof(a) === 'string' || typeof(a) === 'boolean')
		return ss.isValue(b) ? (a < b ? -1 : (a > b ? 1 : 0)) : 1;
	else if (ss.isDate(a))
		return ss.isValue(b) ? ss.compare(a.valueOf(), b.valueOf()) : 1;
	else
		return a.compareTo(b);
};

ss.equalsT = function ss$equalsT(a, b) {
	if (!ss.isValue(a))
		throw new ss_NullReferenceException('Object is null');
	else if (typeof(a) === 'number' || typeof(a) === 'string' || typeof(a) === 'boolean')
		return a === b;
	else if (ss.isDate(a))
		return a.valueOf() === b.valueOf();
	else
		return a.equalsT(b);
};

ss.staticEquals = function ss$staticEquals(a, b) {
	if (!ss.isValue(a))
		return !ss.isValue(b);
	else
		return ss.isValue(b) ? ss.equals(a, b) : false;
};

ss.shallowCopy = function ss$shallowCopy(source, target) {
	var keys = Object.keys(source);
	for (var i = 0, l = keys.length; i < l; i++) {
		var k = keys[i];
		target[k] = source[k];
	}
};

ss.isLower = function ss$isLower(c) {
	var s = String.fromCharCode(c);
	return s === s.toLowerCase() && s !== s.toUpperCase();
};

ss.isUpper = function ss$isUpper(c) {
	var s = String.fromCharCode(c);
	return s !== s.toLowerCase() && s === s.toUpperCase();
};

if (typeof(window) == 'object') {
	// Browser-specific stuff that could go into the Web assembly, but that assembly does not have an associated JS file.
	if (!window.Element) {
		// IE does not have an Element constructor. This implementation should make casting to elements work.
		window.Element = function() {};
		window.Element.isInstanceOfType = function(instance) { return instance && typeof instance.constructor === 'undefined' && typeof instance.tagName === 'string'; };
	}
	window.Element.__typeName = 'Element';
	
	if (!window.XMLHttpRequest) {
		window.XMLHttpRequest = function() {
			var progIDs = [ 'Msxml2.XMLHTTP', 'Microsoft.XMLHTTP' ];
	
			for (var i = 0; i < progIDs.length; i++) {
				try {
					var xmlHttp = new ActiveXObject(progIDs[i]);
					return xmlHttp;
				}
				catch (ex) {
				}
			}
	
			return null;
		};
	}

	ss.parseXml = function(markup) {
		try {
			if (DOMParser) {
				var domParser = new DOMParser();
				return domParser.parseFromString(markup, 'text/xml');
			}
			else {
				var progIDs = [ 'Msxml2.DOMDocument.3.0', 'Msxml2.DOMDocument' ];

				for (var i = 0; i < progIDs.length; i++) {
					var xmlDOM = new ActiveXObject(progIDs[i]);
					xmlDOM.async = false;
					xmlDOM.loadXML(markup);
					xmlDOM.setProperty('SelectionLanguage', 'XPath');
					return xmlDOM;
				}
			}
		}
		catch (ex) {
		}

		return null;
	};
}

///////////////////////////////////////////////////////////////////////////////
// Object Extensions

ss.clearKeys = function ss$clearKeys(d) {
	for (var n in d) {
		if (d.hasOwnProperty(n))
			delete d[n];
	}
};

ss.keyExists = function ss$keyExists(d, key) {
	return d[key] !== undefined;
};

if (!Object.keys) {
	Object.keys = (function() {
		'use strict';
		var hasOwnProperty = Object.prototype.hasOwnProperty,
			hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
			dontEnums = ['toString','toLocaleString','valueOf','hasOwnProperty','isPrototypeOf','propertyIsEnumerable','constructor'],
			dontEnumsLength = dontEnums.length;

		return function (obj) {
			if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
				throw new TypeError('Object.keys called on non-object');
			}

			var result = [], prop, i;

			for (prop in obj) {
				if (hasOwnProperty.call(obj, prop)) {
					result.push(prop);
				}
			}

			if (hasDontEnumBug) {
				for (i = 0; i < dontEnumsLength; i++) {
					if (hasOwnProperty.call(obj, dontEnums[i])) {
						result.push(dontEnums[i]);
					}
				}
			}
			return result;
		};
	}());
}

ss.getKeyCount = function ss$getKeyCount(d) {
	return Object.keys(d).length;
};

///////////////////////////////////////////////////////////////////////////////
// Type System Implementation

ss.__genericCache = {};

ss._makeGenericTypeName = function ss$_makeGenericTypeName(genericType, typeArguments) {
	var result = genericType.__typeName;
	for (var i = 0; i < typeArguments.length; i++)
		result += (i === 0 ? '[' : ',') + '[' + ss.getTypeFullName(typeArguments[i]) + ']';
	result += ']';
	return result;
};

ss.makeGenericType = function ss$makeGenericType(genericType, typeArguments) {
	var name = ss._makeGenericTypeName(genericType, typeArguments);
	return ss.__genericCache[name] || genericType.apply(null, typeArguments);
};

ss.registerGenericClassInstance = function ss$registerGenericClassInstance(instance, genericType, typeArguments, members, baseType, interfaceTypes) {
	var name = ss._makeGenericTypeName(genericType, typeArguments);
	ss.__genericCache[name] = instance;
	instance.__typeName = name;
	instance.__genericTypeDefinition = genericType;
	instance.__typeArguments = typeArguments;
	ss.initClass(instance, genericType.__assembly, members, baseType(), interfaceTypes());
};

ss.registerGenericInterfaceInstance = function ss$registerGenericInterfaceInstance(instance, genericType, typeArguments, members, baseInterfaces) {
	var name = ss._makeGenericTypeName(genericType, typeArguments);
	ss.__genericCache[name] = instance;
	instance.__typeName = name;
	instance.__genericTypeDefinition = genericType;
	instance.__typeArguments = typeArguments;
	ss.initInterface(instance, genericType.__assembly, members, baseInterfaces());
};

ss.isGenericTypeDefinition = function ss$isGenericTypeDefinition(type) {
	return type.__isGenericTypeDefinition || false;
};

ss.getGenericTypeDefinition = function ss$getGenericTypeDefinition(type) {
	return type.__genericTypeDefinition || null;
};

ss.getGenericParameterCount = function ss$getGenericParameterCount(type) {
	//return type.__typeArgumentCount || 0; // does not work!
	return type.__typeArguments ? (type.__typeArguments ? type.__typeArguments.length : 0) : 0;
};

ss.getGenericArguments = function ss$getGenericArguments(type) {
	return type.__typeArguments || null;
};

ss.setMetadata = function ss$_setMetadata(type, metadata) {
	if (metadata.members) {
		for (var i = 0; i < metadata.members.length; i++) {
			var m = metadata.members[i];
			m.typeDef = type;
			if (m.adder) m.adder.typeDef = type;
			if (m.remover) m.remover.typeDef = type;
			if (m.getter) m.getter.typeDef = type;
			if (m.setter) m.setter.typeDef = type;
		}
	}
	type.__metadata = metadata;
	if (metadata.variance) {
		type.isAssignableFrom = function(source) {
			var check = function(target, type) {
				if (type.__genericTypeDefinition === target.__genericTypeDefinition && type.__typeArguments.length == target.__typeArguments.length) {
					for (var i = 0; i < target.__typeArguments.length; i++) {
						var v = target.__metadata.variance[i], t = target.__typeArguments[i], s = type.__typeArguments[i];
						switch (v) {
							case 1: if (!ss.isAssignableFrom(t, s)) return false; break;
							case 2: if (!ss.isAssignableFrom(s, t)) return false; break;
							default: if (s !== t) return false;
						}
					}
					return true;
				}
				return false;
			};

			if (source.__interface && check(this, source))
				return true;
			var ifs = ss.getInterfaces(source);
			for (var i = 0; i < ifs.length; i++) {
				if (ifs[i] === this || check(this, ifs[i]))
					return true;
			}
			return false;
		};
	}
}

ss.initClass = function ss$initClass(ctor, asm, members, baseType, interfaces) {
	ctor.__class = true;
	ctor.__assembly = asm;
	if (!ctor.__typeArguments)
		asm.__types[ctor.__typeName] = ctor;
	if (baseType && baseType !== Object) {
		var f = function(){};
		f.prototype = baseType.prototype;
		ctor.prototype = new f();
		ctor.prototype.constructor = ctor;
	}
	ss.shallowCopy(members, ctor.prototype);
	if (interfaces)
		ctor.__interfaces = interfaces;
};

ss.initGenericClass = function ss$initGenericClass(ctor, asm, typeArgumentCount) {
	ctor.__class = true;
	ctor.__assembly = asm;
	asm.__types[ctor.__typeName] = ctor;
	ctor.__typeArgumentCount = typeArgumentCount;
	ctor.__isGenericTypeDefinition = true;
};

ss.initInterface = function ss$initInterface(ctor, asm, members, baseInterfaces) {
	ctor.__interface = true;
	ctor.__assembly = asm;
	if (!ctor.__typeArguments)
		asm.__types[ctor.__typeName] = ctor;
	if (baseInterfaces)
		ctor.__interfaces = baseInterfaces;
	ss.shallowCopy(members, ctor.prototype);
	ctor.isAssignableFrom = function(type) { return ss.contains(ss.getInterfaces(type), this); };
};

ss.initGenericInterface = function ss$initGenericClass(ctor, asm, typeArgumentCount) {
	ctor.__interface = true;
	ctor.__assembly = asm;
	asm.__types[ctor.__typeName] = ctor;
	ctor.__typeArgumentCount = typeArgumentCount;
	ctor.__isGenericTypeDefinition = true;
};

ss.initEnum = function ss$initEnum(ctor, asm, members, namedValues) {
	ctor.__enum = true;
	ctor.__assembly = asm;
	asm.__types[ctor.__typeName] = ctor;
	ss.shallowCopy(members, ctor.prototype);
	ctor.getDefaultValue = ctor.createInstance = function() { return namedValues ? null : 0; };
	ctor.isInstanceOfType = function(instance) { return typeof(instance) == (namedValues ? 'string' : 'number'); };
};

ss.getBaseType = function ss$getBaseType(type) {
	if (type === Object || type.__interface) {
		return null;
	}
	else if (Object.getPrototypeOf) {
		return Object.getPrototypeOf(type.prototype).constructor;
	}
	else {
		var p = type.prototype;
		if (Object.prototype.hasOwnProperty.call(p, 'constructor')) {
			try {
				var ownValue = p.constructor;
				delete p.constructor;
				return p.constructor;
			}
			finally {
				p.constructor = ownValue;
			}
		}
		return p.constructor;
	}
};

ss.getTypeFullName = function ss$getTypeFullName(type) {
	return type.__typeName || type.name || (type.toString().match(/^\s*function\s*([^\s(]+)/) || [])[1] || 'Object';
};

ss.getTypeQName = function ss$getTypeFullName(type) {
	return ss.getTypeFullName(type) + (type.__assembly ? ', ' + type.__assembly.name : '');
};

ss.getTypeName = function ss$getTypeName(type) {
	var fullName = ss.getTypeFullName(type);
	var bIndex = fullName.indexOf('[');
	var nsIndex = fullName.lastIndexOf('.', bIndex >= 0 ? bIndex : fullName.length);
	return nsIndex > 0 ? fullName.substr(nsIndex + 1) : fullName;
};

ss.getTypeNamespace = function ss$getTypeNamespace(type) {
	var fullName = ss.getTypeFullName(type);
	var bIndex = fullName.indexOf('[');
	var nsIndex = fullName.lastIndexOf('.', bIndex >= 0 ? bIndex : fullName.length);
	return nsIndex > 0 ? fullName.substr(0, nsIndex) : '';
};

ss.getTypeAssembly = function ss$getTypeAssembly(type) {
	if (ss.contains([Date, Number, Boolean, String, Function, Array], type))
		return ss;
	else
		return type.__assembly || null;
};

ss._getAssemblyType = function ss$_getAssemblyType(asm, name) {
	var result = [];
	if (asm.__types) {
		return asm.__types[name] || null;
	}
	else {
		var a = name.split('.');
		for (var i = 0; i < a.length; i++) {
			asm = asm[a[i]];
			if (!ss.isValue(asm))
				return null;
		}
		if (typeof asm !== 'function')
			return null;
		return asm;
	}
};

ss.getAssemblyTypes = function ss$getAssemblyTypes(asm) {
	var result = [];
	if (asm.__types) {
		for (var t in asm.__types) {
			if (asm.__types.hasOwnProperty(t))
				result.push(asm.__types[t]);
		}
	}
	else {
		var traverse = function(s, n) {
			for (var c in s) {
				if (s.hasOwnProperty(c))
					traverse(s[c], c);
			}
			if (typeof(s) === 'function' && ss.isUpper(n.charCodeAt(0)))
				result.push(s);
		};
		traverse(asm, '');
	}
	return result;
};

ss.createAssemblyInstance = function ss$createAssemblyInstance(asm, typeName) {
	var t = ss.getType(typeName, asm);
	return t ? ss.createInstance(t) : null;
};

ss.getInterfaces = function ss$getInterfaces(type) {
	if (type.__interfaces)
		return type.__interfaces;
	else if (type === Date || type === Number)
		return [ ss_IEquatable, ss_IComparable, ss_IFormattable ];
	else if (type === Boolean || type === String)
		return [ ss_IEquatable, ss_IComparable ];
	else if (type === Array || ss.isTypedArrayType(type))
		return [ ss_IEnumerable, ss_ICollection, ss_IList ];
	else
		return [];
};

ss.isInstanceOfType = function ss$isInstanceOfType(instance, type) {
	if (ss.isNullOrUndefined(instance))
		return false;

	if (typeof(type.isInstanceOfType) === 'function')
		return type.isInstanceOfType(instance);

	return ss.isAssignableFrom(type, ss.getInstanceType(instance));
};

ss.isAssignableFrom = function ss$isAssignableFrom(target, type) {
	return target === type || (typeof(target.isAssignableFrom) === 'function' && target.isAssignableFrom(type)) || type.prototype instanceof target;
};

ss.isClass = function Type$isClass(type) {
	return (type.__class == true || type === Array || type === Function || type === RegExp || type === String || type === Error || type === Object);
};

ss.isEnum = function Type$isEnum(type) {
	return !!type.__enum;
};

ss.isFlags = function Type$isFlags(type) {
	return type.__metadata && type.__metadata.enumFlags || false;
};

ss.isInterface = function Type$isInterface(type) {
	return !!type.__interface;
};

ss.safeCast = function ss$safeCast(instance, type) {
	if (type === true)
		return instance;
	else if (type === false)
		return null;
	else
		return ss.isInstanceOfType(instance, type) ? instance : null;
};

ss.cast = function ss$cast(instance, type) {
	if (instance === null || typeof(instance) === 'undefined')
		return instance;
	else if (type === true || (type !== false && ss.isInstanceOfType(instance, type)))
		return instance;
	throw new ss_InvalidCastException('Cannot cast object to type ' + ss.getTypeFullName(type));
};

ss.getInstanceType = function ss$getInstanceType(instance) {
	if (!ss.isValue(instance))
		throw new ss_NullReferenceException('Cannot get type of null');

	// NOTE: We have to catch exceptions because the constructor
	//       cannot be looked up on native COM objects
	try {
		return instance.constructor;
	}
	catch (ex) {
		return Object;
	}
};

ss._getType = function (typeName, asm, re) {
	var outer = !re;
	re = re || /[[,\]]/g;
	var last = re.lastIndex, m = re.exec(typeName), tname, targs = [];
	if (m) {
		tname = typeName.substring(last, m.index);
		switch (m[0]) {
			case '[':
				if (typeName[m.index + 1] != '[')
					return null;
				for (;;) {
					re.exec(typeName);
					var t = ss._getType(typeName, global, re);
					if (!t)
						return null;
					targs.push(t);
					m = re.exec(typeName);
					if (m[0] === ']')
						break;
					else if (m[0] !== ',')
						return null;
				}
				m = re.exec(typeName);
				if (m && m[0] === ',') {
					re.exec(typeName);
					if (!(asm = ss.__assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()]))
						return null;
				}
				break;

			case ']':
				break;

			case ',':
				re.exec(typeName);
				if (!(asm = ss.__assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()]))
					return null;
				break;
		}
	}
	else {
		tname = typeName.substring(last);
	}

	if (outer && re.lastIndex)
		return null;

	var t = ss._getAssemblyType(asm, tname.trim());
	return targs.length ? ss.makeGenericType(t, targs) : t;
}

ss.getType = function ss$getType(typeName, asm) {
	return typeName ? ss._getType(typeName, asm || global) : null;
};

ss.getDefaultValue = function ss$getDefaultValue(type) {
	if (typeof(type.getDefaultValue) === 'function')
		return type.getDefaultValue();
	else if (type === Boolean)
		return false;
	else if (type === Date)
		return new Date(0);
	else if (type === Number)
		return 0;
	return null;
};

ss.createInstance = function ss$createInstance(type) {
	if (typeof(type.createInstance) === 'function')
		return type.createInstance();
	else if (type === Boolean)
		return false;
	else if (type === Date)
		return new Date(0);
	else if (type === Number)
		return 0;
	else if (type === String)
		return '';
	else
		return new type();
};

ss.applyConstructor = function ss$applyConstructor(constructor, args) {
	var f = function() {
		constructor.apply(this, args);
	};
	f.prototype = constructor.prototype;
	return new f();
};

ss.getAttributes = function ss$getAttributes(type, attrType, inherit) {
	var result = [];
	if (inherit) {
		var b = ss.getBaseType(type);
		if (b) {
			var a = ss.getAttributes(b, attrType, true);
			for (var i = 0; i < a.length; i++) {
				var t = ss.getInstanceType(a[i]);
				if (!t.__metadata || !t.__metadata.attrNoInherit)
					result.push(a[i]);
			}
		}
	}
	if (type.__metadata && type.__metadata.attr) {
		for (var i = 0; i < type.__metadata.attr.length; i++) {
			var a = type.__metadata.attr[i];
			if (attrType == null || ss.isInstanceOfType(a, attrType)) {
				var t = ss.getInstanceType(a);
				if (!t.__metadata || !t.__metadata.attrAllowMultiple) {
					for (var j = result.length - 1; j >= 0; j--) {
						if (ss.isInstanceOfType(result[j], t))
							result.splice(j, 1);
					}
				}
				result.push(a);
			}
		}
	}
	return result;
};

ss.getMembers = function ss$getMembers(type, memberTypes, bindingAttr, name, params) {
	var ignoreCase = ((bindingAttr & 1024) == 1024);

	var result = [];
	if ((bindingAttr & 72) == 72 || (bindingAttr & 6) == 4) {
		var b = ss.getBaseType(type);
		if (b) {
			var newBinding = bindingAttr & (bindingAttr & 64 ? 255 : 247) & (bindingAttr & 2 ? 251 : 255);
			if (ignoreCase)
				newBinding = newBinding | 1024;
			result = ss.getMembers(b, memberTypes & ~1, newBinding, name, params);
		}
	}

	var f = function(m) {
		var nameMatch = (!name || (ignoreCase ? m.name.toLowerCase() === name : m.name === name));
		if ((memberTypes & m.type) && (((bindingAttr & 4) && !m.isStatic) || ((bindingAttr & 8) && m.isStatic)) && nameMatch) {
			if (params) {
				if ((m.params || []).length !== params.length)
					return;
				for (var i = 0; i < params.length; i++) {
					if (params[i] !== m.params[i])
						return;
				}
			}
			result.push(m);
		}
	};

	if (type.__metadata && type.__metadata.members) {
		for (var i = 0; i < type.__metadata.members.length; i++) {
			var m = type.__metadata.members[i];
			f(m);
			for (var j = 0; j < 4; j++) {
				var a = ['getter','setter','adder','remover'][j];
				if (m[a])
					f(m[a]);
			}
		}
	}

	if (bindingAttr & 256) {
		while (type) {
			var r = [];
			for (var i = 0; i < result.length; i++) {
				if (result[i].typeDef === type)
					r.push(result[i]);
			}
			if (r.length > 1)
				throw new ss_AmbiguousMatchException('Ambiguous match');
			else if (r.length === 1)
				return r[0];
			type = ss.getBaseType(type);
		}
		return null;
	}

	return result;
};

ss.midel = function ss$midel(mi, target, typeArguments) {
	if (mi.isStatic && !!target)
		throw new ss_ArgumentException('Cannot specify target for static method');
	else if (!mi.isStatic && !target)
		throw new ss_ArgumentException('Must specify target for instance method');

	var method;
	if (mi.fget) {
		method = function() { return (mi.isStatic ? mi.typeDef : this)[mi.fget]; };
	}
	else if (mi.fset) {
		method = function(v) { (mi.isStatic ? mi.typeDef : this)[mi.fset] = v; };
	}
	else {
		method = mi.def || (mi.isStatic || mi.sm ? mi.typeDef[mi.sname] : target[mi.sname]);

		if (mi.tpcount) {
			if (!typeArguments || typeArguments.length !== mi.tpcount)
				throw new ss_ArgumentException('Wrong number of type arguments');
			method = method.apply(null, typeArguments);
		}
		else {
			if (typeArguments && typeArguments.length)
				throw new ss_ArgumentException('Cannot specify type arguments for non-generic method');
		}
		if (mi.exp) {
			var _m1 = method;
			method = function () { return _m1.apply(this, Array.prototype.slice.call(arguments, 0, arguments.length - 1).concat(arguments[arguments.length - 1])); };
		}
		if (mi.sm) {
			var _m2 = method;
			method = function() { return _m2.apply(null, [this].concat(Array.prototype.slice.call(arguments))); };
		}
	}
	return ss.mkdel(target, method);
};

ss.invokeCI = function ss$invokeCI(ci, args) {
	if (ci.exp)
		args = args.slice(0, args.length - 1).concat(args[args.length - 1]);

	if (ci.def)
		return ci.def.apply(null, args);
	else if (ci.sm)
		return ci.typeDef[ci.sname].apply(null, args);
	else
		return ss.applyConstructor(ci.sname ? ci.typeDef[ci.sname] : ci.typeDef, args);
};

ss.fieldAccess = function ss$fieldAccess(fi, obj) {
	if (fi.isStatic && !!obj)
		throw new ss_ArgumentException('Cannot specify target for static field');
	else if (!fi.isStatic && !obj)
		throw new ss_ArgumentException('Must specify target for instance field');
	obj = fi.isStatic ? fi.typeDef : obj;
	if (arguments.length === 3)
		obj[fi.sname] = arguments[2];
	else
		return obj[fi.sname];
};

///////////////////////////////////////////////////////////////////////////////
// IFormattable

var ss_IFormattable = function IFormattable$() { };

ss_IFormattable.__typeName = 'ss.IFormattable';
ss.IFormattable = ss_IFormattable;
ss.initInterface(ss_IFormattable, ss, { format: null });

ss.format = function ss$format(obj, fmt) {
	if (typeof(obj) === 'number')
		return ss.formatNumber(obj, fmt);
	else if (ss.isDate(obj))
		return ss.formatDate(obj, fmt);
	else
		return obj.format(fmt);
};

///////////////////////////////////////////////////////////////////////////////
// IComparable

var ss_IComparable = function IComparable$() { };

ss_IComparable.__typeName = 'ss.IComparable';
ss.IComparable = ss_IComparable;
ss.initInterface(ss_IComparable, ss, { compareTo: null });

///////////////////////////////////////////////////////////////////////////////
// IEquatable

var ss_IEquatable = function IEquatable$() { };

ss_IEquatable.__typeName = 'ss.IEquatable';
ss.IEquatable = ss_IEquatable;
ss.initInterface(ss_IEquatable, ss, { equalsT: null });

///////////////////////////////////////////////////////////////////////////////
// Number Extensions

ss.formatNumber = function ss$formatNumber(num, format) {
	if (ss.isNullOrUndefined(format) || (format.length == 0) || (format == 'i')) {
		return num.toString();
	}
	return ss.netFormatNumber(num, format, ss_CultureInfo.invariantCulture.numberFormat);
};

ss.localeFormatNumber = function ss$localeFormatNumber(num, format) {
	if (ss.isNullOrUndefined(format) || (format.length == 0) || (format == 'i')) {
		return num.toLocaleString();
	}
	return ss.netFormatNumber(num, format, ss_CultureInfo.currentCulture.numberFormat);
};

ss._commaFormatNumber = function ss$_commaFormat(number, groups, decimal, comma) {
	var decimalPart = null;
	var decimalIndex = number.indexOf(decimal);
	if (decimalIndex > 0) {
		decimalPart = number.substr(decimalIndex);
		number = number.substr(0, decimalIndex);
	}

	var negative = ss.startsWithString(number, '-');
	if (negative) {
		number = number.substr(1);
	}

	var groupIndex = 0;
	var groupSize = groups[groupIndex];
	if (number.length < groupSize) {
		return (negative ? '-' : '') + (decimalPart ? number + decimalPart : number);
	}

	var index = number.length;
	var s = '';
	var done = false;
	while (!done) {
		var length = groupSize;
		var startIndex = index - length;
		if (startIndex < 0) {
			groupSize += startIndex;
			length += startIndex;
			startIndex = 0;
			done = true;
		}
		if (!length) {
			break;
		}
		
		var part = number.substr(startIndex, length);
		if (s.length) {
			s = part + comma + s;
		}
		else {
			s = part;
		}
		index -= length;

		if (groupIndex < groups.length - 1) {
			groupIndex++;
			groupSize = groups[groupIndex];
		}
	}

	if (negative) {
		s = '-' + s;
	}    
	return decimalPart ? s + decimalPart : s;
};

ss.netFormatNumber = function ss$netFormatNumber(num, format, numberFormat) {
	var nf = (numberFormat && numberFormat.getFormat(ss_NumberFormatInfo)) || ss_CultureInfo.currentCulture.numberFormat;

	var s = '';    
	var precision = -1;
	
	if (format.length > 1) {
		precision = parseInt(format.substr(1), 10);
	}

	var fs = format.charAt(0);
	switch (fs) {
		case 'd': case 'D':
			s = parseInt(Math.abs(num)).toString();
			if (precision != -1) {
				s = ss.padLeftString(s, precision, 0x30);
			}
			if (num < 0) {
				s = '-' + s;
			}
			break;
		case 'x': case 'X':
			s = parseInt(Math.abs(num)).toString(16);
			if (fs == 'X') {
				s = s.toUpperCase();
			}
			if (precision != -1) {
				s = ss.padLeftString(s, precision, 0x30);
			}
			break;
		case 'e': case 'E':
			if (precision == -1) {
				s = num.toExponential();
			}
			else {
				s = num.toExponential(precision);
			}
			if (fs == 'E') {
				s = s.toUpperCase();
			}
			break;
		case 'f': case 'F':
		case 'n': case 'N':
			if (precision == -1) {
				precision = nf.numberDecimalDigits;
			}
			s = num.toFixed(precision).toString();
			if (precision && (nf.numberDecimalSeparator != '.')) {
				var index = s.indexOf('.');
				s = s.substr(0, index) + nf.numberDecimalSeparator + s.substr(index + 1);
			}
			if ((fs == 'n') || (fs == 'N')) {
				s = ss._commaFormatNumber(s, nf.numberGroupSizes, nf.numberDecimalSeparator, nf.numberGroupSeparator);
			}
			break;
		case 'c': case 'C':
			if (precision == -1) {
				precision = nf.currencyDecimalDigits;
			}
			s = Math.abs(num).toFixed(precision).toString();
			if (precision && (nf.currencyDecimalSeparator != '.')) {
				var index = s.indexOf('.');
				s = s.substr(0, index) + nf.currencyDecimalSeparator + s.substr(index + 1);
			}
			s = ss._commaFormatNumber(s, nf.currencyGroupSizes, nf.currencyDecimalSeparator, nf.currencyGroupSeparator);
			if (num < 0) {
				s = ss.formatString(nf.currencyNegativePattern, s);
			}
			else {
				s = ss.formatString(nf.currencyPositivePattern, s);
			}
			break;
		case 'p': case 'P':
			if (precision == -1) {
				precision = nf.percentDecimalDigits;
			}
			s = (Math.abs(num) * 100.0).toFixed(precision).toString();
			if (precision && (nf.percentDecimalSeparator != '.')) {
				var index = s.indexOf('.');
				s = s.substr(0, index) + nf.percentDecimalSeparator + s.substr(index + 1);
			}
			s = ss._commaFormatNumber(s, nf.percentGroupSizes, nf.percentDecimalSeparator, nf.percentGroupSeparator);
			if (num < 0) {
				s = ss.formatString(nf.percentNegativePattern, s);
			}
			else {
				s = ss.formatString(nf.percentPositivePattern, s);
			}
			break;
	}

	return s;
};

///////////////////////////////////////////////////////////////////////////////
// String Extensions
ss.netSplit = function ss$netSplit(s, strings, limit, options) {
	var re = new RegExp(strings.map(ss.regexpEscape).join('|'), 'g'), res = [], m, i;
	for (i = 0;; i = re.lastIndex) {
		if (m = re.exec(s)) {
			if (options !== 1 || m.index > i) {
				if (res.length === limit - 1) {
					res.push(s.substr(i));
					return res;
				}
				else
					res.push(s.substring(i, m.index));
			}
		}
		else {
			if (options !== 1 || i !== s.length)
				res.push(s.substr(i));
			return res;
		}
	}
};

ss.compareStrings = function ss$compareStrings(s1, s2, ignoreCase) {
	if (!ss.isValue(s1))
		return ss.isValue(s2) ? -1 : 0;
	if (!ss.isValue(s2))
		return 1;

	if (ignoreCase) {
		if (s1) {
			s1 = s1.toUpperCase();
		}
		if (s2) {
			s2 = s2.toUpperCase();
		}
	}
	s1 = s1 || '';
	s2 = s2 || '';

	if (s1 == s2) {
		return 0;
	}
	if (s1 < s2) {
		return -1;
	}
	return 1;
};

ss.endsWithString = function ss$endsWithString(s, suffix) {
	if (!suffix.length) {
		return true;
	}
	if (suffix.length > s.length) {
		return false;
	}
	return (s.substr(s.length - suffix.length) == suffix);
};

ss._formatString = function ss$_formatString(format, values, useLocale) {
	if (!ss._formatRE) {
		ss._formatRE = /\{\{|\}\}|\{[^\}\{]+\}/g;
	}

	return format.replace(ss._formatRE,
		function(m) {
			if (m === '{{' || m === '}}')
				return m.charAt(0);
			var index = parseInt(m.substr(1), 10);
			var value = values[index + 1];
			if (ss.isNullOrUndefined(value)) {
				return '';
			}
			if (ss.isInstanceOfType(value, ss_IFormattable)) {
				var formatSpec = null;
				var formatIndex = m.indexOf(':');
				if (formatIndex > 0) {
					formatSpec = m.substring(formatIndex + 1, m.length - 1);
				}
				return ss.format(value, formatSpec);
			}
			else {
				return useLocale ? value.toLocaleString() : value.toString();
			}
		});
};

ss.formatString = function String$format(format) {
	return ss._formatString(format, arguments, /* useLocale */ false);
};

ss.stringFromChar = function ss$stringFromChar(ch, count) {
	var s = ch;
	for (var i = 1; i < count; i++) {
		s += ch;
	}
	return s;
};

ss.htmlDecode = function ss$htmlDecode(s) {
	return s.replace(/&([^;]+);/g, function(_, e) {
		if (e[0] === '#')
			return String.fromCharCode(parseInt(e.substr(1), 10));
		switch (e) {
			case 'quot': return '"';
			case 'apos': return "'";
			case 'amp': return '&';
			case 'lt': return '<';
			case 'gt': return '>';
			default : return '&' + e + ';';
		}
	});
};

ss.htmlEncode = function ss$htmlEncode(s) {
	return s.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
};

ss.jsEncode = function ss$jsEncode(s, q) {
	s = s.replace(/\\/g, '\\\\').replace(/'/g, "\\'").replace(/"/g, '\\"');
	return q ? '"' + s + '"' : s;
};

ss.indexOfAnyString = function ss$indexOfAnyString(s, chars, startIndex, count) {
	var length = s.length;
	if (!length) {
		return -1;
	}

	chars = String.fromCharCode.apply(null, chars);
	startIndex = startIndex || 0;
	count = count || length;

	var endIndex = startIndex + count - 1;
	if (endIndex >= length) {
		endIndex = length - 1;
	}

	for (var i = startIndex; i <= endIndex; i++) {
		if (chars.indexOf(s.charAt(i)) >= 0) {
			return i;
		}
	}
	return -1;
};

ss.insertString = function ss$insertString(s, index, value) {
	if (!value) {
		return s;
	}
	if (!index) {
		return value + s;
	}
	var s1 = s.substr(0, index);
	var s2 = s.substr(index);
	return s1 + value + s2;
};

ss.isNullOrEmptyString = function ss$isNullOrEmptyString(s) {
	return !s || !s.length;
};

ss.lastIndexOfAnyString = function ss$lastIndexOfAnyString(s, chars, startIndex, count) {
	var length = s.length;
	if (!length) {
		return -1;
	}

	chars = String.fromCharCode.apply(null, chars);
	startIndex = startIndex || length - 1;
	count = count || length;

	var endIndex = startIndex - count + 1;
	if (endIndex < 0) {
		endIndex = 0;
	}

	for (var i = startIndex; i >= endIndex; i--) {
		if (chars.indexOf(s.charAt(i)) >= 0) {
			return i;
		}
	}
	return -1;
};

ss.localeFormatString = function ss$localeFormatString(format) {
	return ss._formatString(format, arguments, /* useLocale */ true);
};

ss.padLeftString = function ss$padLeftString(s, totalWidth, ch) {
	if (s.length < totalWidth) {
		ch = String.fromCharCode(ch || 0x20);
		return ss.stringFromChar(ch, totalWidth - s.length) + s;
	}
	return s;
};

ss.padRightString = function ss$padRightString(s, totalWidth, ch) {
	if (s.length < totalWidth) {
		ch = String.fromCharCode(ch || 0x20);
		return s + ss.stringFromChar(ch, totalWidth - s.length);
	}
	return s;
};

ss.removeString = function ss$removeString(s, index, count) {
	if (!count || ((index + count) > this.length)) {
		return s.substr(0, index);
	}
	return s.substr(0, index) + s.substr(index + count);
};

ss.replaceAllString = function ss$replaceAllString(s, oldValue, newValue) {
	newValue = newValue || '';
	return s.split(oldValue).join(newValue);
};

ss.startsWithString = function ss$startsWithString(s, prefix) {
	if (!prefix.length) {
		return true;
	}
	if (prefix.length > s.length) {
		return false;
	}
	return (s.substr(0, prefix.length) == prefix);
};

if (!String.prototype.trim) {
	String.prototype.trim = function String$trim() {
		return ss.trimStartString(ss.trimEndString(this));
	};
}

ss.trimEndString = function ss$trimEndString(s, chars) {
	return s.replace(chars ? new RegExp('[' + String.fromCharCode.apply(null, chars) + ']+$') : /\s*$/, '');
};

ss.trimStartString = function ss$trimStartString(s, chars) {
	return s.replace(chars ? new RegExp('^[' + String.fromCharCode.apply(null, chars) + ']+') : /^\s*/, '');
};

ss.trimString = function ss$trimString(s, chars) {
	return ss.trimStartString(ss.trimEndString(s, chars), chars);
};

ss.lastIndexOfString = function ss$lastIndexOfString(s, search, startIndex, count) {
	var index = s.lastIndexOf(search, startIndex);
	return (index < (startIndex - count + 1)) ? -1 : index;
};

ss.indexOfString = function ss$indexOfString(s, search, startIndex, count) {
	var index = s.indexOf(search, startIndex);
	return ((index + search.length) <= (startIndex + count)) ? index : -1;
};

///////////////////////////////////////////////////////////////////////////////
// Math Extensions

ss.divRem = function ss$divRem(a, b, result) {
	var remainder = a % b;
	result.$ = remainder;
	return (a - remainder) / b;
};

ss.round = function ss$round(n, d, rounding) {
	var m = Math.pow(10, d || 0);
	n *= m;
	var sign = (n > 0) | -(n < 0);
	if (n % 1 === 0.5 * sign) {
		var f = Math.floor(n);
		return (f + (rounding ? (sign > 0) : (f % 2 * sign))) / m;
	}

	return Math.round(n) / m;
};

///////////////////////////////////////////////////////////////////////////////
// IFormatProvider

var ss_IFormatProvider = function IFormatProvider$() { };

ss_IFormatProvider.__typeName = 'ss.IFormatProvider';
ss.IFormatProvider = ss_IFormatProvider;
ss.initInterface(ss_IFormatProvider, ss, { getFormat: null });

///////////////////////////////////////////////////////////////////////////////
// NumberFormatInfo

var ss_NumberFormatInfo = function NumberFormatInfo$() {
};

ss_NumberFormatInfo.__typeName = 'ss.NumberFormatInfo';
ss.NumberFormatInfo = ss_NumberFormatInfo;
ss.initClass(ss_NumberFormatInfo, ss, {
	getFormat:  function NumberFormatInfo$getFormat(type) {
		return (type === ss_NumberFormatInfo) ? this : null;
	}
}, null, [ss_IFormatProvider]);

ss_NumberFormatInfo.invariantInfo = new ss_NumberFormatInfo();
ss.shallowCopy({
	naNSymbol: 'NaN',
	negativeSign: '-',
	positiveSign: '+',
	negativeInfinitySymbol: '-Infinity',
	positiveInfinitySymbol: 'Infinity',

	percentSymbol: '%',
	percentGroupSizes: [3],
	percentDecimalDigits: 2,
	percentDecimalSeparator: '.',
	percentGroupSeparator: ',',
	percentPositivePattern: 0,
	percentNegativePattern: 0,

	currencySymbol: '$',
	currencyGroupSizes: [3],
	currencyDecimalDigits: 2,
	currencyDecimalSeparator: '.',
	currencyGroupSeparator: ',',
	currencyNegativePattern: 0,
	currencyPositivePattern: 0,

	numberGroupSizes: [3],
	numberDecimalDigits: 2,
	numberDecimalSeparator: '.',
	numberGroupSeparator: ','
}, ss_NumberFormatInfo.invariantInfo);

///////////////////////////////////////////////////////////////////////////////
// DateTimeFormatInfo

var ss_DateTimeFormatInfo = function DateTimeFormatInfo$() {
};

ss_DateTimeFormatInfo.__typeName = 'ss.DateTimeFormatInfo';
ss.DateTimeFormatInfo = ss_DateTimeFormatInfo;
ss.initClass(ss_DateTimeFormatInfo, ss, {
	getFormat: function DateTimeFormatInfo$getFormat(type) {
		return type === ss_DateTimeFormatInfo ? this : null;
	}
}, null, [ss_IFormatProvider]);

ss_DateTimeFormatInfo.invariantInfo = new ss_DateTimeFormatInfo();
ss.shallowCopy({
	amDesignator: 'AM',
	pmDesignator: 'PM',

	dateSeparator: '/',
	timeSeparator: ':',

	gmtDateTimePattern: 'ddd, dd MMM yyyy HH:mm:ss \'GMT\'',
	universalDateTimePattern: 'yyyy-MM-dd HH:mm:ssZ',
	sortableDateTimePattern: 'yyyy-MM-ddTHH:mm:ss',
	dateTimePattern: 'dddd, MMMM dd, yyyy h:mm:ss tt',

	longDatePattern: 'dddd, MMMM dd, yyyy',
	shortDatePattern: 'M/d/yyyy',

	longTimePattern: 'h:mm:ss tt',
	shortTimePattern: 'h:mm tt',

	firstDayOfWeek: 0,
	dayNames: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
	shortDayNames: ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],
	minimizedDayNames: ['Su','Mo','Tu','We','Th','Fr','Sa'],

	monthNames: ['January','February','March','April','May','June','July','August','September','October','November','December',''],
	shortMonthNames: ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','']
}, ss_DateTimeFormatInfo.invariantInfo);

///////////////////////////////////////////////////////////////////////////////
// Stopwatch

var ss_Stopwatch = function Stopwatch$() {
	this._stopTime = 0;
	this._startTime = 0;
	this.isRunning = false;
};

ss_Stopwatch.startNew = function  Stopwatch$startNew() {
	var s = new ss_Stopwatch();
	s.start();
	return s;
};

if (typeof(window) !== 'undefined' && window.performance && window.performance.now) {
	ss_Stopwatch.frequency = 1e6;
	ss_Stopwatch.isHighResolution = true;
	ss_Stopwatch.getTimestamp = function() { return Math.round(window.performance.now() * 1000); };
}
else if (typeof(process) !== 'undefined' && process.hrtime) {
	ss_Stopwatch.frequency = 1e9;
	ss_Stopwatch.isHighResolution = true;
	ss_Stopwatch.getTimestamp = function() { var hr = process.hrtime(); return hr[0] * 1e9 + hr[1]; };
}
else {
	ss_Stopwatch.frequency = 1e3;
	ss_Stopwatch.isHighResolution = false;
	ss_Stopwatch.getTimestamp = function() { return new Date().valueOf(); };
}

ss_Stopwatch.__typeName = 'ss.Stopwatch';
ss.Stopwatch = ss_Stopwatch;
ss.initClass(ss_Stopwatch, ss, {
	reset: function Stopwatch$reset() {
		this._stopTime = this._startTime = ss_Stopwatch.getTimestamp();
		this.isRunning = false;
	},

	ticks: function Stopwatch$ticks() {
		return (this.isRunning ? ss_Stopwatch.getTimestamp() : this._stopTime) - this._startTime;
	},

	milliseconds: function Stopwatch$milliseconds() {
		return Math.round(this.ticks() / ss_Stopwatch.frequency * 1000);
	},

	timeSpan: function Stopwatch$timeSpan() {
		return new ss_TimeSpan(this.milliseconds() * 10000);
	},

	start: function Stopwatch$start() {
		if (this.isRunning)
			return;
		this._startTime = ss_Stopwatch.getTimestamp();
		this.isRunning = true;
	},

	stop: function Stopwatch$stop() {
		if (!this.isRunning)
			return;
		this._stopTime = ss_Stopwatch.getTimestamp();
		this.isRunning = false;
	},

	restart: function Stopwatch$restart() {
		this.isRunning = false;
		this.start();
	}
});

///////////////////////////////////////////////////////////////////////////////
// Array Extensions

ss._flatIndex = function ss$_flatIndex(arr, indices) {
	if (indices.length != (arr._sizes ? arr._sizes.length : 1))
		throw new ss_ArgumentException('Invalid number of indices');

	if (indices[0] < 0 || indices[0] >= (arr._sizes ? arr._sizes[0] : arr.length))
		throw new ss_ArgumentException('Index 0 out of range');

	var idx = indices[0];
	if (arr._sizes) {
		for (var i = 1; i < arr._sizes.length; i++) {
			if (indices[i] < 0 || indices[i] >= arr._sizes[i])
				throw new ss_ArgumentException('Index ' + i + ' out of range');
			idx = idx * arr._sizes[i] + indices[i];
		}
	}
	return idx;
};

ss.arrayGet2 = function ss$arrayGet2(arr, indices) {
	var idx = ss._flatIndex(arr, indices);
	var r = arr[idx];
	return typeof r !== 'undefined' ? r : arr._defvalue;
};

ss.arrayGet = function ss$arrayGet(arr) {
	return ss.arrayGet2(arr, Array.prototype.slice.call(arguments, 1));
}

ss.arraySet2 = function ss$arraySet2(arr, value, indices) {
	var idx = ss._flatIndex(arr, indices);
	arr[idx] = value;
};

ss.arraySet = function ss$arraySet() {
	return ss.arraySet2(arguments[0], arguments[arguments.length - 1], Array.prototype.slice.call(arguments, 1, arguments.length - 1));
};

ss.arrayRank = function ss$arrayRank(arr) {
	return arr._sizes ? arr._sizes.length : 1;
};

ss.arrayLength = function ss$arrayLength(arr, dimension) {
	if (dimension >= (arr._sizes ? arr._sizes.length : 1))
		throw new ss_ArgumentException('Invalid dimension');
	return arr._sizes ? arr._sizes[dimension] : arr.length;
};

ss.arrayExtract = function ss$arrayExtract(arr, start, count) {
	if (!ss.isValue(count)) {
		return arr.slice(start);
	}
	return arr.slice(start, start + count);
};

ss.arrayAddRange = function ss$arrayAddRange(arr, items) {
	if (items instanceof Array) {
		arr.push.apply(arr, items);
	}
	else {
		var e = ss.getEnumerator(items);
		try {
			while (e.moveNext()) {
				ss.add(arr, e.current());
			}
		}
		finally {
			if (ss.isInstanceOfType(e, ss_IDisposable)) {
				ss.cast(e, ss_IDisposable).dispose();
			}
		}
	}
};

ss.arrayClone = function ss$arrayClone(arr) {
	if (arr.length === 1) {
		return [arr[0]];
	}
	else {
		return Array.apply(null, arr);
	}
};

ss.arrayPeekFront = function ss$arrayPeekFront(arr) {
	if (arr.length)
		return arr[0];
	throw new ss_InvalidOperationException('Array is empty');
};

ss.arrayPeekBack = function ss$arrayPeekBack(arr) {
	if (arr.length)
		return arr[arr.length - 1];
	throw new ss_InvalidOperationException('Array is empty');
};

ss.indexOfArray = function ss$indexOfArray(arr, item, startIndex) {
	startIndex = startIndex || 0;
	for (var i = startIndex; i < arr.length; i++) {
		if (ss.staticEquals(arr[i], item)) {
			return i;
		}
	}
	return -1;
}

ss.arrayInsertRange = function ss$arrayInsertRange(arr, index, items) {
	if (items instanceof Array) {
		if (index === 0) {
			arr.unshift.apply(arr, items);
		}
		else {
			for (var i = 0; i < items.length; i++) {
				arr.splice(index + i, 0, items[i]);
			}
		}
	}
	else {
		var e = ss.getEnumerator(items);
		try {
			while (e.moveNext()) {
				arr.insert(index, e.current());
				index++;
			}
		}
		finally {
			if (ss.isInstanceOfType(e, ss_IDisposable)) {
				ss.cast(e, ss_IDisposable).dispose();
			}
		}
	}
};

if (!Array.prototype.map) {
	Array.prototype.map = function Array$map(callback, instance) {
		var length = this.length;
		var mapped = new Array(length);
		for (var i = 0; i < length; i++) {
			if (i in this) {
				mapped[i] = callback.call(instance, this[i], i, this);
			}
		}
		return mapped;
	};
}

ss.arrayRemoveRange = function ss$arrayRemoveRange(arr, index, count) {
	arr.splice(index, count);
};

if (!Array.prototype.some) {
	Array.prototype.some = function Array$some(callback, instance) {
		var length = this.length;
		for (var i = 0; i < length; i++) {
			if (i in this && callback.call(instance, this[i], i, this)) {
				return true;
			}
		}
		return false;
	};
}

ss.arrayFromEnumerable = function ss$arrayFromEnumerable(enm) {
	if (!ss.isValue(enm))
		return null;

	var e = ss.getEnumerator(enm), r = [];
	try {
		while (e.moveNext())
			r.push(e.current());
	}
	finally {
		e.dispose();
	}
	return r;
};

ss.multidimArray = function ss$multidimArray(defvalue, sizes) {
	var arr = [];
	arr._defvalue = defvalue;
	arr._sizes = [arguments[1]];
	var length = arguments[1];
	for (var i = 2; i < arguments.length; i++) {
		length *= arguments[i];
		arr._sizes[i - 1] = arguments[i];
	}
	arr.length = length;
	return arr;
};

ss.repeat = function ss$repeat(value, count) {
	var result = [];
	for (var i = 0; i < count; i++)
		result.push(value);
	return result;
};

ss.arrayFill = function ss$arrayFill(dst, val, index, count) {
	if (index < 0 || count < 0 || (index + count) > dst.length)
		throw new ss_ArgumentException();
	if (Array.prototype.fill) {
		dst.fill(val, index, index + count);
	}
	else {
		while (--count >= 0)
			dst[index + count] = val;
	}
};

ss.arrayCopy = function ss$arrayCopy(src, spos, dst, dpos, len) {
	if (spos < 0 || dpos < 0 || len < 0)
		throw new ss_ArgumentOutOfRangeException();

	if (len > (src.length - spos) || len > (dst.length - dpos))
		throw new ss_ArgumentException();

	if (spos < dpos && src === dst) {
		while (--len >= 0)
			dst[dpos + len] = src[spos + len];
	}
	else {
		for (var i = 0; i < len; i++)
			dst[dpos + i] = src[spos + i];
	}
}

///////////////////////////////////////////////////////////////////////////////
// Date Extensions

ss.utcNow = function ss$utcNow() {
	var d = new Date();
	return new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
};

ss.toUTC = function ss$toUniversalTime(d) {
	return new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
};

ss.fromUTC = function ss$toLocalTime(d) {
	return new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));
};

ss.today = function ss$today() {
	var d = new Date();
	return new Date(d.getFullYear(), d.getMonth(), d.getDate());
}

ss.formatDate = function ss$formatDate(date, format) {
	if (ss.isNullOrUndefined(format) || (format.length == 0) || (format == 'i')) {
		return date.toString();
	}
	if (format == 'id') {
		return date.toDateString();
	}
	if (format == 'it') {
		return date.toTimeString();
	}

	return ss._netFormatDate(date, format, false);
};

ss.localeFormatDate = function ss$localeFormatDate(date, format) {
	if (ss.isNullOrUndefined(format) || (format.length == 0) || (format == 'i')) {
		return date.toLocaleString();
	}
	if (format == 'id') {
		return date.toLocaleDateString();
	}
	if (format == 'it') {
		return date.toLocaleTimeString();
	}

	return ss._netFormatDate(date, format, true);
};

ss._netFormatDate = function ss$_netFormatDate(dt, format, useLocale) {
	var dtf = useLocale ? ss_CultureInfo.currentCulture.dateTimeFormat : ss_CultureInfo.invariantCulture.dateTimeFormat;

	if (format.length == 1) {
		switch (format) {
			case 'f': format = dtf.longDatePattern + ' ' + dtf.shortTimePattern; break;
			case 'F': format = dtf.dateTimePattern; break;

			case 'd': format = dtf.shortDatePattern; break;
			case 'D': format = dtf.longDatePattern; break;

			case 't': format = dtf.shortTimePattern; break;
			case 'T': format = dtf.longTimePattern; break;

			case 'g': format = dtf.shortDatePattern + ' ' + dtf.shortTimePattern; break;
			case 'G': format = dtf.shortDatePattern + ' ' + dtf.longTimePattern; break;

			case 'R': case 'r':
				dtf = ss_CultureInfo.InvariantCulture.dateTimeFormat;
				format = dtf.gmtDateTimePattern;
				break;
			case 'u': format = dtf.universalDateTimePattern; break;
			case 'U':
				format = dtf.dateTimePattern;
				dt = new Date(dt.getUTCFullYear(), dt.getUTCMonth(), dt.getUTCDate(),
							  dt.getUTCHours(), dt.getUTCMinutes(), dt.getUTCSeconds(), dt.getUTCMilliseconds());
				break;

			case 's': format = dtf.sortableDateTimePattern; break;
		}
	}

	if (format.charAt(0) == '%') {
		format = format.substr(1);
	}

	if (!Date._formatRE) {
		Date._formatRE = /'.*?[^\\]'|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z/g;
	}

	var re = Date._formatRE;
	var sb = new ss_StringBuilder();

	re.lastIndex = 0;
	while (true) {
		var index = re.lastIndex;
		var match = re.exec(format);

		sb.append(format.slice(index, match ? match.index : format.length));
		if (!match) {
			break;
		}

		var fs = match[0];
		var part = fs;
		switch (fs) {
			case 'dddd':
				part = dtf.dayNames[dt.getDay()];
				break;
			case 'ddd':
				part = dtf.shortDayNames[dt.getDay()];
				break;
			case 'dd':
				part = ss.padLeftString(dt.getDate().toString(), 2, 0x30);
				break;
			case 'd':
				part = dt.getDate();
				break;
			case 'MMMM':
				part = dtf.monthNames[dt.getMonth()];
				break;
			case 'MMM':
				part = dtf.shortMonthNames[dt.getMonth()];
				break;
			case 'MM':
				part = ss.padLeftString((dt.getMonth() + 1).toString(), 2, 0x30);
				break;
			case 'M':
				part = (dt.getMonth() + 1);
				break;
			case 'yyyy':
				part = dt.getFullYear();
				break;
			case 'yy':
				part = ss.padLeftString((dt.getFullYear() % 100).toString(), 2, 0x30);
				break;
			case 'y':
				part = (dt.getFullYear() % 100);
				break;
			case 'h': case 'hh':
				part = dt.getHours() % 12;
				if (!part) {
					part = '12';
				}
				else if (fs == 'hh') {
					part = ss.padLeftString(part.toString(), 2, 0x30);
				}
				break;
			case 'HH':
				part = ss.padLeftString(dt.getHours().toString(), 2, 0x30);
				break;
			case 'H':
				part = dt.getHours();
				break;
			case 'mm':
				part = ss.padLeftString(dt.getMinutes().toString(), 2, 0x30);
				break;
			case 'm':
				part = dt.getMinutes();
				break;
			case 'ss':
				part = ss.padLeftString(dt.getSeconds().toString(), 2, 0x30);
				break;
			case 's':
				part = dt.getSeconds();
				break;
			case 't': case 'tt':
				part = (dt.getHours() < 12) ? dtf.amDesignator : dtf.pmDesignator;
				if (fs == 't') {
					part = part.charAt(0);
				}
				break;
			case 'fff':
				part = ss.padLeftString(dt.getMilliseconds().toString(), 3, 0x30);
				break;
			case 'ff':
				part = ss.padLeftString(dt.getMilliseconds().toString(), 3).substr(0, 2);
				break;
			case 'f':
				part = ss.padLeftString(dt.getMilliseconds().toString(), 3).charAt(0);
				break;
			case 'z':
				part = dt.getTimezoneOffset() / 60;
				part = ((part >= 0) ? '-' : '+') + Math.floor(Math.abs(part));
				break;
			case 'zz': case 'zzz':
				part = dt.getTimezoneOffset() / 60;
				part = ((part >= 0) ? '-' : '+') + Math.floor(ss.padLeftString(Math.abs(part)).toString(), 2, 0x30);
				if (fs == 'zzz') {
					part += dtf.timeSeparator + Math.abs(ss.padLeftString(dt.getTimezoneOffset() % 60).toString(), 2, 0x30);
				}
				break;
			default:
				if (part.charAt(0) == '\'') {
					part = part.substr(1, part.length - 2).replace(/\\'/g, '\'');
				}
				break;
		}
		sb.append(part);
	}

	return sb.toString();
};

ss._parseExactDate = function ss$_parseExactDate(val, format, provider, utc) {
	provider = (provider && provider.getFormat(ss_DateTimeFormatInfo)) || ss_CultureInfo.currentCulture.dateTimeFormat;
	var AM = provider.amDesignator, PM = provider.pmDesignator;

	var _isInteger = function(val) {
		var digits="1234567890";
		for (var i=0; i < val.length; i++) {
			if (digits.indexOf(val.charAt(i))==-1) {
				return false;
			}
		}
		return true;
	};

	var _getInt = function(str,i,minlength,maxlength) {
		for (var x=maxlength; x>=minlength; x--) {
			var token=str.substring(i,i+x);
			if (token.length < minlength) {
				return null;
			}
			if (_isInteger(token)) {
				return token;
			}
		}
		return null;
	};

	val = val + "";
	format = format + "";
	var i_val = 0;
	var i_format = 0;
	var c = "";
	var token = "";

	var year = 0, month = 1, date = 1, hh = 0, mm = 0, _ss = 0, ampm = "";
		
	while (i_format < format.length) {
		// Get next token from format string
		c = format.charAt(i_format);
		token = "";
		while ((format.charAt(i_format) == c) && (i_format < format.length)) {
			token += format.charAt(i_format++);
		}
		// Extract contents of value based on format token
		if (token=="yyyy" || token=="yy" || token=="y") {
			if (token == "yyyy")
				year = _getInt(val, i_val, 4, 4);
			if (token == "yy")
				year = _getInt(val, i_val, 2, 2);
			if (token == "y")
				year = _getInt(val, i_val, 2, 4);

			if (year == null)
				return null;

			i_val += year.length;
			if (year.length == 2) {
				if (year > 30) {
					year = 1900 + (year-0);
				}
				else {
					year = 2000 + (year-0);
				}
			}
		}
		else if (token == "MM" || token == "M") {
			month = _getInt(val, i_val, token.length, 2);
			if (month == null || (month < 1) || (month > 12))
				return null;
			i_val += month.length;
		}
		else if (token=="dd"||token=="d") {
			date = _getInt(val, i_val, token.length, 2);
			if (date == null || (date < 1) || (date > 31))
				return null;
			i_val += date.length;
		}
		else if (token=="hh"||token=="h") {
			hh = _getInt(val, i_val, token.length, 2);
			if (hh == null || (hh < 1) || (hh > 12))
				return null;
			i_val += hh.length;
		}
		else if (token=="HH"||token=="H") {
			hh = _getInt(val, i_val, token.length, 2);
			if (hh == null || (hh < 0) || (hh > 23))
				return null;
			i_val += hh.length;
		}
		else if (token == "mm" || token == "m") {
			mm = _getInt(val, i_val, token.length, 2);
			if (mm == null || (mm < 0) || (mm > 59))
				return null;
			i_val += mm.length;
		}
		else if (token == "ss" || token == "s") {
			_ss = _getInt(val, i_val, token.length, 2);
			if (_ss == null || (_ss < 0) || (_ss > 59))
				return null;
			i_val += _ss.length;
		}
		else if (token == "t") {
			if (val.substring(i_val, i_val + 1).toLowerCase() == AM.charAt(0).toLowerCase())
				ampm = AM;
			else if (val.substring(i_val, i_val + 1).toLowerCase() == PM.charAt(0).toLowerCase())
				ampm = PM;
			else
				return null;
			i_val += 1;
		}
		else if (token == "tt") {
			if (val.substring(i_val, i_val + 2).toLowerCase() == AM.toLowerCase())
				ampm = AM;
			else if (val.substring(i_val,i_val+2).toLowerCase() == PM.toLowerCase())
				ampm = PM;
			else
				return null;
			i_val += 2;
		}
		else {
			if (val.substring(i_val, i_val + token.length) != token)
				return null;
			else
				i_val += token.length;
		}
	}
	// If there are any trailing characters left in the value, it doesn't match
	if (i_val != val.length)
		return null;

	// Is date valid for month?
	if (month == 2) {
		// Check for leap year
		if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) { // leap year
			if (date > 29)
				return null;
		}
		else if (date > 28)
			return null;
	}
	if ((month == 4) || (month == 6) || (month == 9) || (month == 11)) {
		if (date > 30) {
			return null;
		}
	}
	// Correct hours value
	if (hh < 12 && ampm == PM) {
		hh = hh - 0 + 12;
	}
	else if (hh > 11 && ampm == AM) {
		hh -= 12;
	}

	if (utc)
		return new Date(Date.UTC(year, month - 1, date, hh, mm, _ss));
	else
		return new Date(year, month - 1, date, hh, mm, _ss);
};

ss.parseExactDate = function ss$parseExactDate(val, format, provider) {
	return ss._parseExactDate(val, format, provider, false);
};

ss.parseExactDateUTC = function ss$parseExactDateUTC(val, format, provider) {
	return ss._parseExactDate(val, format, provider, true);
};

///////////////////////////////////////////////////////////////////////////////
// Function Extensions

ss._delegateContains = function ss$_delegateContains(targets, object, method) {
	for (var i = 0; i < targets.length; i += 2) {
		if (targets[i] === object && targets[i + 1] === method) {
			return true;
		}
	}
	return false;
};

ss._mkdel = function ss$_mkdel(targets) {
	var delegate = function() {
		if (targets.length == 2) {
			return targets[1].apply(targets[0], arguments);
		}
		else {
			var clone = ss.arrayClone(targets);
			for (var i = 0; i < clone.length; i += 2) {
				if (ss._delegateContains(targets, clone[i], clone[i + 1])) {
					clone[i + 1].apply(clone[i], arguments);
				}
			}
			return null;
		}
	};
	delegate._targets = targets;

	return delegate;
};

ss.mkdel = function ss$mkdel(object, method) {
	if (!object) {
		return method;
	}
	if (typeof method === 'string') {
		method = object[method];
	}
	return ss._mkdel([object, method]);
};

ss.delegateCombine = function ss$delegateCombine(delegate1, delegate2) {
	if (!delegate1) {
		if (!delegate2._targets) {
			return ss.mkdel(null, delegate2);
		}
		return delegate2;
	}
	if (!delegate2) {
		if (!delegate1._targets) {
			return ss.mkdel(null, delegate1);
		}
		return delegate1;
	}

	var targets1 = delegate1._targets ? delegate1._targets : [null, delegate1];
	var targets2 = delegate2._targets ? delegate2._targets : [null, delegate2];

	return ss._mkdel(targets1.concat(targets2));
};

ss.delegateRemove = function ss$delegateRemove(delegate1, delegate2) {
	if (!delegate1 || (delegate1 === delegate2)) {
		return null;
	}
	if (!delegate2) {
		return delegate1;
	}

	var targets = delegate1._targets;
	var object = null;
	var method;
	if (delegate2._targets) {
		object = delegate2._targets[0];
		method = delegate2._targets[1];
	}
	else {
		method = delegate2;
	}

	for (var i = 0; i < targets.length; i += 2) {
		if ((targets[i] === object) && (targets[i + 1] === method)) {
			if (targets.length == 2) {
				return null;
			}
			var t = ss.arrayClone(targets);
			t.splice(i, 2);
			return ss._mkdel(t);
		}
	}

	return delegate1;
};

ss.delegateEquals = function ss$delegateEquals(a, b) {
	if (a === b)
		return true;
	if (!a._targets && !b._targets)
		return false;
	var ta = a._targets || [null, a], tb = b._targets || [null, b];
	if (ta.length != tb.length)
		return false;
	for (var i = 0; i < ta.length; i++) {
		if (ta[i] !== tb[i])
			return false;
	}
	return true;
};

ss.delegateClone = function ss$delegateClone(source) {
	return source._targets ? ss._mkdel(source._targets) : function() { return source.apply(this, arguments); };
};

ss.thisFix = function ss$thisFix(source) {
	return function() {
		var x = [this];
		for(var i = 0; i < arguments.length; i++)
			x.push(arguments[i]);
		return source.apply(source, x);
	};
};

ss.getInvocationList = function ss$getInvocationList(delegate) {
	if (!delegate._targets)
		return [delegate];
	var result = [];
	for (var i = 0; i < delegate._targets.length; i += 2)
		result.push(ss.mkdel(delegate._targets[i], delegate._targets[i + 1]));
	return result;
};

///////////////////////////////////////////////////////////////////////////////
// RegExp Extensions
ss.regexpEscape = function ss$regexpEscape(s) {
	return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
};

///////////////////////////////////////////////////////////////////////////////
// Debug Extensions

ss.Debug = global.Debug || function() {};
ss.Debug.__typeName = 'Debug';

if (!ss.Debug.writeln) {
	ss.Debug.writeln = function Debug$writeln(text) {
		if (global.console) {
			if (global.console.debug) {
				global.console.debug(text);
				return;
			}
			else if (global.console.log) {
				global.console.log(text);
				return;
			}
		}
		else if (global.opera &&
			global.opera.postError) {
			global.opera.postError(text);
			return;
		}
	}
};

ss.Debug._fail = function Debug$_fail(message) {
	ss.Debug.writeln(message);
	debugger;
};

ss.Debug.assert = function Debug$assert(condition, message) {
	if (!condition) {
		message = 'Assert failed: ' + message;
		if (confirm(message + '\r\n\r\nBreak into debugger?')) {
			ss.Debug._fail(message);
		}
	}
};

ss.Debug.fail = function Debug$fail(message) {
	ss.Debug._fail(message);
};

///////////////////////////////////////////////////////////////////////////////
// Enum

var ss_Enum = function Enum$() {
};
ss_Enum.__typeName = 'ss.Enum';
ss.Enum = ss_Enum;
ss.initClass(ss_Enum, ss, {});

ss_Enum.parse = function Enum$parse(enumType, s) {
	var values = enumType.prototype;
	if (!ss.isFlags(enumType)) {
		for (var f in values) {
			if (f === s) {
				return values[f];
			}
		}
	}
	else {
		var parts = s.split('|');
		var value = 0;
		var parsed = true;

		for (var i = parts.length - 1; i >= 0; i--) {
			var part = parts[i].trim();
			var found = false;

			for (var f in values) {
				if (f === part) {
					value |= values[f];
					found = true;
					break;
				}
			}
			if (!found) {
				parsed = false;
				break;
			}
		}

		if (parsed) {
			return value;
		}
	}
	throw new ss_ArgumentException('Invalid Enumeration Value');
};

ss_Enum.toString = function  Enum$toString(enumType, value) {
	var values = enumType.prototype;
	if (!ss.isFlags(enumType) || (value === 0)) {
		for (var i in values) {
			if (values[i] === value) {
				return i;
			}
		}
		throw new ss_ArgumentException('Invalid Enumeration Value');
	}
	else {
		var parts = [];
		for (var i in values) {
			if (values[i] & value) {
				ss.add(parts, i);
			}
		}
		if (!parts.length) {
			throw new ss_ArgumentException('Invalid Enumeration Value');
		}
		return parts.join(' | ');
	}
};

ss_Enum.getValues = function Enum$getValues(enumType) {
	var parts = [];
	var values = enumType.prototype;
	for (var i in values) {
		if (values.hasOwnProperty(i))
			parts.push(values[i]);
	}
	return parts;
};

///////////////////////////////////////////////////////////////////////////////
// CultureInfo

var ss_CultureInfo = function CultureInfo$(name, numberFormat, dateTimeFormat) {
	this.name = name;
	this.numberFormat = numberFormat;
	this.dateTimeFormat = dateTimeFormat;
};

ss_CultureInfo.__typeName = 'ss.CultureInfo';
ss.CultureInfo = ss_CultureInfo;
ss.initClass(ss_CultureInfo, ss, {
	getFormat:  function CultureInfo$getFormat(type) {
		switch (type) {
			case ss_NumberFormatInfo: return this.numberFormat;
			case ss_DateTimeFormatInfo: return this.dateTimeFormat;
			default: return null;
		}
	}
}, null, [ss_IFormatProvider]);

ss_CultureInfo.invariantCulture = new ss_CultureInfo('en-US', ss_NumberFormatInfo.invariantInfo, ss_DateTimeFormatInfo.invariantInfo);
ss_CultureInfo.currentCulture = ss_CultureInfo.invariantCulture;

///////////////////////////////////////////////////////////////////////////////
// IEnumerator

var ss_IEnumerator = function IEnumerator$() { };

ss_IEnumerator.__typeName = 'ss.IEnumerator';
ss.IEnumerator = ss_IEnumerator;
ss.initInterface(ss_IEnumerator, ss, { current: null, moveNext: null, reset: null }, [ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// IEnumerable

var ss_IEnumerable = function IEnumerable$() { };

ss_IEnumerable.__typeName = 'ss.IEnumerable';
ss.IEnumerable = ss_IEnumerable;
ss.initInterface(ss_IEnumerable, ss, { getEnumerator: null });
ss.getEnumerator = function ss$getEnumerator(obj) {
	return obj.getEnumerator ? obj.getEnumerator() : new ss_ArrayEnumerator(obj);
};

///////////////////////////////////////////////////////////////////////////////
// ICollection

var ss_ICollection = function ICollection$() { };

ss_ICollection.__typeName = 'ss.ICollection';
ss.ICollection = ss_ICollection;
ss.initInterface(ss_ICollection, ss, { get_count: null, add: null, clear: null, contains: null, remove: null });

ss.count = function ss$count(obj) {
	return obj.get_count ? obj.get_count() : obj.length;
};

ss.add = function ss$add(obj, item) {
	if (obj.add)
		obj.add(item);
	else if (ss.isArray(obj))
		obj.push(item);
	else
		throw new ss_NotSupportedException();
};

ss.clear = function ss$clear(obj) {
	if (obj.clear)
		obj.clear();
	else if (ss.isArray(obj))
		obj.length = 0;
	else
		throw new ss_NotSupportedException();
};

ss.remove = function ss$remove(obj, item) {
	if (obj.remove)
		return obj.remove(item);
	else if (ss.isArray(obj)) {
		var index = ss.indexOf(obj, item);
		if (index >= 0) {
			obj.splice(index, 1);
			return true;
		}
		return false;
	}
	else
		throw new ss_NotSupportedException();
};

ss.contains = function ss$contains(obj, item) {
	if (obj.contains)
		return obj.contains(item);
	else
		return ss.indexOf(obj, item) >= 0;
};

///////////////////////////////////////////////////////////////////////////////
// TimeSpan

var ss_TimeSpan = function TimeSpan$(ticks) {
	this.ticks = ticks || 0;
};

ss_TimeSpan.getDefaultValue = ss_TimeSpan.createInstance = function TimeSpan$default() {
	return new ss_TimeSpan(0);
};

ss_TimeSpan.__typeName = 'ss.TimeSpan';
ss.TimeSpan = ss_TimeSpan;
ss.initClass(ss_TimeSpan, ss, {
	compareTo: function TimeSpan$compareTo(other) {
		return this.ticks < other.ticks ? -1 : (this.ticks > other.ticks ? 1 : 0);
	},
	equals: function TimeSpan$equals(other) {
		return ss.isInstanceOfType(other, ss_TimeSpan) && other.ticks === this.ticks;
	},
	equalsT: function TimeSpan$equalsT(other) {
		return other.ticks === this.ticks;
	},
	toString: function TimeSpan$toString() {
		var d = function(s, n) { return ss.padLeftString(s + '', n || 2, 48); };

		var ticks = this.ticks;
		var result = '';
		if (Math.abs(ticks) >= 864000000000) {
			result += d((ticks / 864000000000) | 0) + '.';
			ticks %= 864000000000;
		}
		result += d(ticks / 36000000000 | 0) + ':';
		ticks %= 36000000000;
		result += d(ticks / 600000000 | 0) + ':';
		ticks %= 600000000;
		result += d(ticks / 10000000 | 0);
		ticks %= 10000000;
		if (ticks > 0)
			result += '.' + d(ticks, 7);
		return result;
	}
}, null, [ss_IComparable, ss_IEquatable]);
ss_TimeSpan.__class = false;

///////////////////////////////////////////////////////////////////////////////
// IEqualityComparer

var ss_IEqualityComparer = function IEqualityComparer$() { };

ss_IEqualityComparer.__typeName = 'ss.IEqualityComparer';
ss.IEqualityComparer = ss_IEqualityComparer;
ss.initInterface(ss_IEqualityComparer, ss, { areEqual: null, getObjectHashCode: null });

///////////////////////////////////////////////////////////////////////////////
// IComparer

var ss_IComparer = function IComparer$() { };

ss_IComparer.__typeName = 'ss.IComparer';
ss.IComparer = ss_IComparer;
ss.initInterface(ss_IComparer, ss, { compare: null });

///////////////////////////////////////////////////////////////////////////////
// Nullable

ss.unbox = function ss$unbox(instance) {
	if (!ss.isValue(instance))
		throw new ss_InvalidOperationException('Nullable object must have a value.');
	return instance;
};

var ss_Nullable$1 = function Nullable$1$(T) {
	var $type = function() {
	};
	$type.isInstanceOfType = function(instance) {
		return ss.isInstanceOfType(instance, T);
	};
	ss.registerGenericClassInstance($type, ss_Nullable$1, [T], {}, function() { return null; }, function() { return []; });
	return $type;
};

ss_Nullable$1.__typeName = 'ss.Nullable$1';
ss.Nullable$1 = ss_Nullable$1;
ss.initGenericClass(ss_Nullable$1, ss, 1);

ss_Nullable$1.eq = function Nullable$eq(a, b) {
	return !ss.isValue(a) ? !ss.isValue(b) : (a === b);
};

ss_Nullable$1.ne = function Nullable$eq(a, b) {
	return !ss.isValue(a) ? ss.isValue(b) : (a !== b);
};

ss_Nullable$1.le = function Nullable$le(a, b) {
	return ss.isValue(a) && ss.isValue(b) && a <= b;
};

ss_Nullable$1.ge = function Nullable$ge(a, b) {
	return ss.isValue(a) && ss.isValue(b) && a >= b;
};

ss_Nullable$1.lt = function Nullable$lt(a, b) {
	return ss.isValue(a) && ss.isValue(b) && a < b;
};

ss_Nullable$1.gt = function Nullable$gt(a, b) {
	return ss.isValue(a) && ss.isValue(b) && a > b;
};

ss_Nullable$1.sub = function Nullable$sub(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a - b : null;
};

ss_Nullable$1.add = function Nullable$add(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a + b : null;
};

ss_Nullable$1.mod = function Nullable$mod(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a % b : null;
};

ss_Nullable$1.div = function Nullable$divf(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a / b : null;
};

ss_Nullable$1.mul = function Nullable$mul(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a * b : null;
};

ss_Nullable$1.band = function Nullable$band(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a & b : null;
};

ss_Nullable$1.bor = function Nullable$bor(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a | b : null;
};

ss_Nullable$1.bxor = function Nullable$xor(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a ^ b : null;
};

ss_Nullable$1.shl = function Nullable$shl(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a << b : null;
};

ss_Nullable$1.srs = function Nullable$srs(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a >> b : null;
};

ss_Nullable$1.sru = function Nullable$sru(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a >>> b : null;
};

ss_Nullable$1.and = function Nullable$and(a, b) {
	if (a === true && b === true)
		return true;
	else if (a === false || b === false)
		return false;
	else
		return null;
};

ss_Nullable$1.or = function Nullable$or(a, b) {
	if (a === true || b === true)
		return true;
	else if (a === false && b === false)
		return false;
	else
		return null;
};

ss_Nullable$1.xor = function Nullable$xor(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? !!(a ^ b) : null;
};

ss_Nullable$1.not = function Nullable$not(a) {
	return ss.isValue(a) ? !a : null;
};

ss_Nullable$1.neg = function Nullable$neg(a) {
	return ss.isValue(a) ? -a : null;
};

ss_Nullable$1.pos = function Nullable$pos(a) {
	return ss.isValue(a) ? +a : null;
};

ss_Nullable$1.cpl = function Nullable$cpl(a) {
	return ss.isValue(a) ? ~a : null;
};

ss_Nullable$1.lift1 = function Nullable$lift1(f, o) {
	return ss.isValue(o) ? f(o) : null;
};

ss_Nullable$1.lift2 = function Nullable$lift2(f, a, b) {
	return ss.isValue(a) && ss.isValue(b) ? f(a, b) : null;
};

ss_Nullable$1.liftcmp = function Nullable$liftcmp(f, a, b) {
	return ss.isValue(a) && ss.isValue(b) ? f(a, b) : false;
};

ss_Nullable$1.lifteq = function Nullable$lifteq(f, a, b) {
	var va = ss.isValue(a), vb = ss.isValue(b);
	return (!va && !vb) || (va && vb && f(a, b));
};

ss_Nullable$1.liftne = function Nullable$liftne(f, a, b) {
	var va = ss.isValue(a), vb = ss.isValue(b);
	return (va !== vb) || (va && f(a, b));
};

///////////////////////////////////////////////////////////////////////////////
// IList

var ss_IList = function IList$() { };

ss_IList.__typeName = 'ss.IList';
ss.IList = ss_IList;
ss.initInterface(ss_IList, ss, { get_item: null, set_item: null, indexOf: null, insert: null, removeAt: null }, [ss_ICollection, ss_IEnumerable]);

ss.getItem = function ss$getItem(obj, index) {
	return obj.get_item ? obj.get_item(index) : obj[index];
}

ss.setItem = function ss$setItem(obj, index, value) {
	obj.set_item ? obj.set_item(index, value) : (obj[index] = value);
}

ss.indexOf = function ss$indexOf(obj, item) {
	if (ss.isArrayOrTypedArray(obj)) {
		for (var i = 0; i < obj.length; i++) {
			if (ss.staticEquals(obj[i], item)) {
				return i;
			}
		}
		return -1;
	}
	else
		return obj.indexOf(item);
};

ss.insert = function ss$insert(obj, index, item) {
	if (obj.insert)
		obj.insert(index, item);
	else if (ss.isArray(obj))
		obj.splice(index, 0, item);
	else
		throw new ss_NotSupportedException();
};

ss.removeAt = function ss$removeAt(obj, index) {
	if (obj.removeAt)
		obj.removeAt(index);
	else if (ss.isArray(obj))
		obj.splice(index, 1);
	else
		throw new ss_NotSupportedException();
};

///////////////////////////////////////////////////////////////////////////////
// IDictionary

var ss_IDictionary = function IDictionary$() { };

ss_IDictionary.__typeName = 'ss.IDictionary';
ss.IDictionary = ss_IDictionary;
ss.initInterface(ss_IDictionary, ss, { get_item: null, set_item: null, get_keys: null, get_values: null, containsKey: null, add: null, remove: null, tryGetValue: null }, [ss_IEnumerable]);

///////////////////////////////////////////////////////////////////////////////
// Int32

var ss_Int32 = function Int32$() { };

ss_Int32.__typeName = 'ss.Int32';
ss.Int32 = ss_Int32;
ss.initClass(ss_Int32, ss, {}, Object, [ ss_IEquatable, ss_IComparable, ss_IFormattable ]);
ss_Int32.__class = false;

ss_Int32.isInstanceOfType = function Int32$isInstanceOfType(instance) {
	return typeof(instance) === 'number' && isFinite(instance) && Math.round(instance, 0) == instance;
};

ss_Int32.getDefaultValue = ss_Int32.createInstance = function Int32$getDefaultValue() {
	return 0;
};

ss_Int32.div = function Int32$div(a, b) {
	if (!ss.isValue(a) || !ss.isValue(b)) return null;
	if (b === 0) throw new ss_DivideByZeroException();
	return ss_Int32.trunc(a / b);
};

ss_Int32.trunc = function Int32$trunc(n) {
	return ss.isValue(n) ? (n > 0 ? Math.floor(n) : Math.ceil(n)) : null;
};

ss_Int32.tryParse = function Int32$tryParse(s, result, min, max) {
	result.$ = 0;
	if (!/^[+-]?[0-9]+$/.test(s))
		return 0;
	var n = parseInt(s, 10);
	if (n < min || n > max)
		return false;
	result.$ = n;
	return true;
};

///////////////////////////////////////////////////////////////////////////////
// MutableDateTime

var ss_JsDate = function JsDate$() { };

ss_JsDate.__typeName = 'ss.JsDate';
ss.JsDate = ss_JsDate;
ss.initClass(ss_JsDate, ss, {}, Object, [ ss_IEquatable, ss_IComparable ]);

ss_JsDate.createInstance = function JsDate$createInstance() {
	return new Date();
};

ss_JsDate.isInstanceOfType = function JsDate$isInstanceOfType(instance) {
	return instance instanceof Date;
};

///////////////////////////////////////////////////////////////////////////////
// ArrayEnumerator

var ss_ArrayEnumerator = function ArrayEnumerator$(array) {
	this._array = array;
	this._index = -1;
};
ss_ArrayEnumerator.__typeName = 'ss.ArrayEnumerator';
ss.ArrayEnumerator = ss_ArrayEnumerator;
ss.initClass(ss_ArrayEnumerator, ss, {
	moveNext: function ArrayEnumerator$moveNext() {
		this._index++;
		return (this._index < this._array.length);
	},
	reset: function ArrayEnumerator$reset() {
		this._index = -1;
	},
	current: function ArrayEnumerator$current() {
		if (this._index < 0 || this._index >= this._array.length)
			throw 'Invalid operation';
		return this._array[this._index];
	},
	dispose: function ArrayEnumerator$dispose() {
	}
}, null, [ss_IEnumerator, ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// ObjectEnumerator

var ss_ObjectEnumerator = function ObjectEnumerator$(o) {
	this._keys = Object.keys(o);
	this._index = -1;
	this._object = o;
};

ss_ObjectEnumerator.__typeName = 'ss.ObjectEnumerator';
ss.ObjectEnumerator = ss_ObjectEnumerator;
ss.initClass(ss_ObjectEnumerator, ss, {
	moveNext: function ObjectEnumerator$moveNext() {
		this._index++;
		return (this._index < this._keys.length);
	},
	reset: function ObjectEnumerator$reset() {
		this._index = -1;
	},
	current: function ObjectEnumerator$current() {
		if (this._index < 0 || this._index >= this._keys.length)
			throw new ss_InvalidOperationException('Invalid operation');
		var k = this._keys[this._index];
		return { key: k, value: this._object[k] };
	},
	dispose: function ObjectEnumerator$dispose() {
	}
}, null, [ss_IEnumerator, ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// EqualityComparer

var ss_EqualityComparer = function EqualityComparer$() {
};
ss_EqualityComparer.__typeName = 'ss.EqualityComparer';
ss.EqualityComparer = ss_EqualityComparer;
ss.initClass(ss_EqualityComparer, ss, {
	areEqual: function EqualityComparer$areEqual(x, y) {
		return ss.staticEquals(x, y);
	},
	getObjectHashCode: function EqualityComparer$getObjectHashCode(obj) {
		return ss.isValue(obj) ? ss.getHashCode(obj) : 0;
	}
}, null, [ss_IEqualityComparer]);
ss_EqualityComparer.def = new ss_EqualityComparer();

///////////////////////////////////////////////////////////////////////////////
// Comparer

var ss_Comparer = function Comparer$(f) {
	this.f = f;
};

ss_Comparer.__typeName = 'ss.Comparer';
ss.Comparer = ss_Comparer;
ss.initClass(ss_Comparer, ss, {
	compare: function Comparer$compare(x, y) {
		return this.f(x, y);
	}
}, null, [ss_IComparer]);
ss_Comparer.def = new ss_Comparer(function Comparer$defaultCompare(a, b) {
	if (!ss.isValue(a))
		return !ss.isValue(b)? 0 : -1;
	else if (!ss.isValue(b))
		return 1;
	else
		return ss.compare(a, b);
});

///////////////////////////////////////////////////////////////////////////////
// Dictionary
var ss_$DictionaryCollection = function $DictionaryCollection$(dict, isKeys) {
	this._dict = dict;
	this._isKeys = isKeys;
};

var ss_Dictionary$2 = function Dictionary$2$(TKey, TValue) {
	var $type = function(o, cmp) {
		this.countField = 0;
		this.buckets = {};

		this.comparer = cmp || ss_EqualityComparer.def;

		if (ss.isInstanceOfType(o, ss_IDictionary)) {
			var e = ss.getEnumerator(o);
			try {
				while (e.moveNext()) {
					var c = e.current();
					this.add(c.key, c.value);
				}
			}
			finally {
				if (ss.isInstanceOfType(e, ss_IDisposable)) {
					ss.cast(e, ss_IDisposable).dispose();
				}
			}
		}
		else if (o) {
			var keys = Object.keys(o);
			for (var i = 0; i < keys.length; i++) {
				this.add(keys[i], o[keys[i]]);
			}
		}
	};

	ss.registerGenericClassInstance($type, ss_Dictionary$2, [TKey, TValue], {
		_setOrAdd: function(key, value, add) {
			var hash = this.comparer.getObjectHashCode(key);
			var entry = { key: key, value: value };
			if (this.buckets.hasOwnProperty(hash)) {
				var array = this.buckets[hash];
				for (var i = 0; i < array.length; i++) {
					if (this.comparer.areEqual(array[i].key, key)) {
						if (add)
							throw new ss_ArgumentException('Key ' + key + ' already exists.');
						array[i] = entry;
						return;
					}
				}
				array.push(entry);
			} else {
				this.buckets[hash] = [entry];
			}
			this.countField++;
		},

		add: function(key, value) {
			this._setOrAdd(key, value, true);
		},

		set_item: function(key, value) {
			this._setOrAdd(key, value, false);
		},

		_get: function(key) {
			var hash = this.comparer.getObjectHashCode(key);
			if (this.buckets.hasOwnProperty(hash)) {
				var array = this.buckets[hash];
				for (var i = 0; i < array.length; i++) {
					var entry = array[i];
					if (this.comparer.areEqual(entry.key, key))
						return entry.value !== undefined ? entry.value : null;
				}
			}
			return undefined;
		},

		get_item: function(key) {
			var v = this._get(key);
			if (v === undefined)
				throw new ss_KeyNotFoundException('Key ' + key + ' does not exist.');
			return v;
		},

		tryGetValue: function(key, value) {
			var v = this._get(key);
			if (v !== undefined) {
				value.$ = v;
				return true;
			}
			else {
				value.$ = ss.getDefaultValue(TValue);
				return false;
			}
		},

		containsKey: function(key) {
			var hash = this.comparer.getObjectHashCode(key);
			if (!this.buckets.hasOwnProperty(hash))
				return false;

			var array = this.buckets[hash];
			for (var i = 0; i < array.length; i++) {
				if (this.comparer.areEqual(array[i].key, key))
					return true;
			}
			return false;
		},

		clear: function() {
			this.countField = 0;
			this.buckets = {};
		},

		remove: function(key) {
			var hash = this.comparer.getObjectHashCode(key);
			if (!this.buckets.hasOwnProperty(hash))
				return false;

			var array = this.buckets[hash];
			for (var i = 0; i < array.length; i++) {
				if (this.comparer.areEqual(array[i].key, key)) {
					array.splice(i, 1);
					if (array.length == 0) delete this.buckets[hash];
					this.countField--;
					return true;
				}
			}
			return false;
		},

		get_count: function() {
			return this.countField;
		},

		_getEnumerator: function(projector) {
			var bucketKeys = Object.keys(this.buckets), bucketIndex = -1, arrayIndex;
			return new ss_IteratorBlockEnumerator(function() {
				if (bucketIndex < 0 || arrayIndex >= (this.buckets[bucketKeys[bucketIndex]].length - 1)) {
					arrayIndex = -1;
					bucketIndex++;
				}
				if (bucketIndex >= bucketKeys.length)
					return false;
				arrayIndex++;
				return true;
			}, function() { return projector(this.buckets[bucketKeys[bucketIndex]][arrayIndex]); }, null, this);
		},

		get_keys: function() {
			return new ss_$DictionaryCollection(this, true);
		},

		get_values: function() {
			return new ss_$DictionaryCollection(this, false);
		},

		getEnumerator: function() {
			return this._getEnumerator(function(e) { return e; });
		}
	}, function() { return null; }, function() { return [ ss_IDictionary, ss_IEnumerable ]; });
	return $type;
};

ss_Dictionary$2.__typeName = 'ss.Dictionary$2';
ss.Dictionary$2 = ss_Dictionary$2;
ss.initGenericClass(ss_Dictionary$2, ss, 2);
ss_$DictionaryCollection.__typeName = 'ss.$DictionaryCollection';
ss.$DictionaryCollection = ss_$DictionaryCollection;
ss.initClass(ss_$DictionaryCollection, ss, {
	get_count: function $DictionaryCollection$get_count() {
		return this._dict.get_count();
	},
	contains: function $DictionaryCollection$contains(v) {
		if (this._isKeys) {
			return this._dict.containsKey(v);
		}
		else {
			for (var e in this._dict.buckets) {
				if (this._dict.buckets.hasOwnProperty(e)) {
					var bucket = this._dict.buckets[e];
					for (var i = 0; i < bucket.length; i++) {
						if (this._dict.comparer.areEqual(bucket[i].value, v))
							return true;
					}
				}
			}
			return false;
		}
	},
	getEnumerator: function $DictionaryCollection$getEnumerator(v) {
		return this._dict._getEnumerator(this._isKeys ? function(e) { return e.key; } : function(e) { return e.value; });
	},
	add: function $DictionaryCollection$add(v) {
		throw new ss_InvalidOperationException('Collection is read-only');
	},
	clear: function $DictionaryCollection$clear() {
		throw new ss_InvalidOperationException('Collection is read-only');
	},
	remove: function $DictionaryCollection$remove() {
		throw new ss_InvalidOperationException('Collection is read-only');
	}
}, null, [ss_IEnumerable, ss_ICollection]);

///////////////////////////////////////////////////////////////////////////////
// IDisposable

var ss_IDisposable = function IDisposable$() { };
ss_IDisposable.__typeName = 'ss.IDisposable';
ss.IDisposable = ss_IDisposable;
ss.initInterface(ss_IDisposable, ss, { dispose: null });

///////////////////////////////////////////////////////////////////////////////
// StringBuilder

var ss_StringBuilder = function StringBuilder$(s) {
	this._parts = (ss.isValue(s) && s != '') ? [s] : [];
	this.length = ss.isValue(s) ? s.length : 0;
}

ss_StringBuilder.__typeName = 'ss.StringBuilder';
ss.StringBuilder = ss_StringBuilder;
ss.initClass(ss_StringBuilder, ss, {
	append: function StringBuilder$append(o) {
		if (ss.isValue(o)) {
			var s = o.toString();
			ss.add(this._parts, s);
			this.length += s.length;
		}
		return this;
	},

	appendChar: function StringBuilder$appendChar(c) {
		return this.append(String.fromCharCode(c));
	},

	appendLine: function StringBuilder$appendLine(s) {
		this.append(s);
		this.append('\r\n');
		return this;
	},

	appendLineChar: function StringBuilder$appendLineChar(c) {
		return this.appendLine(String.fromCharCode(c));
	},

	clear: function StringBuilder$clear() {
		this._parts = [];
		this.length = 0;
	},

	toString: function StringBuilder$toString() {
		return this._parts.join('');
	}
});

///////////////////////////////////////////////////////////////////////////////
// Random

var ss_Random = function Random$(seed) {
	var _seed = (seed === undefined) ? parseInt(Date.now() % 2147483648) : parseInt(Math.abs(seed));
	this.inext = 0;
	this.inextp = 21;
	this.seedArray = new Array(56);
	for(var i = 0; i < 56; i++)
		this.seedArray[i] = 0;

	_seed = 161803398 - _seed;
	if (_seed < 0)
		_seed += 2147483648;
	this.seedArray[55] = _seed;
	var mk = 1;
	for (var i = 1; i < 55; i++) {
		var ii = (21 * i) % 55;
		this.seedArray[ii] = mk;
		mk = _seed - mk;
		if (mk < 0)
			mk += 2147483648;

		_seed = this.seedArray[ii];
	}
	for (var j = 1; j < 5; j++) {
		for (var k = 1; k < 56; k++) {
			this.seedArray[k] -= this.seedArray[1 + (k + 30) % 55];
			if (this.seedArray[k] < 0)
				this.seedArray[k] += 2147483648;
		}
	}
};

ss_Random.__typeName = 'ss.Random';
ss.Random = ss_Random;
ss.initClass(ss_Random, ss, {
	next: function Random$next() {
		return this.sample() * 2147483648 | 0;
	},
	nextMax: function Random$nextMax(max) {
		return this.sample() * max | 0;
	},
	nextMinMax: function Random$nextMinMax(min, max) {
		return (this.sample() * (max - min) + min) | 0;
	},
	nextBytes: function Random$nextBytes(bytes) {
		for (var i = 0; i < bytes.length; i++)
			bytes[i] = (this.sample() * 256) | 0;
	},
	nextDouble: function Random$nextDouble() {
		return this.sample();
	},
	sample: function Random$sample() {
		if (++this.inext >= 56)
			this.inext = 1;
		if (++this.inextp >= 56)
			this.inextp = 1;

		var retVal =  this.seedArray[this.inext] - this.seedArray[this.inextp];

		if (retVal < 0)
			retVal += 2147483648;

		this.seedArray[this.inext] = retVal;

		return retVal * (1.0 / 2147483648);
	}
});

///////////////////////////////////////////////////////////////////////////////
// EventArgs

var ss_EventArgs = function EventArgs$() {
}
ss_EventArgs.__typeName = 'ss.EventArgs';
ss.EventArgs = ss_EventArgs;
ss.initClass(ss_EventArgs, ss, {});

ss_EventArgs.Empty = new ss_EventArgs();

///////////////////////////////////////////////////////////////////////////////
// Exception

var ss_Exception = function Exception$(message, innerException) {
	this._message = message || 'An error occurred.';
	this._innerException = innerException || null;
	this._error = new Error();
}

ss_Exception.__typeName = 'ss.Exception';
ss.Exception = ss_Exception;
ss.initClass(ss_Exception, ss, {
	get_message: function Exception$get_message() {
		return this._message;
	},
	get_innerException: function Exception$get_innerException() {
		return this._innerException;
	},
	get_stack: function Exception$get_stack() {
		return this._error.stack;
	}
});

ss_Exception.wrap = function Exception$wrap(o) {
	if (ss.isInstanceOfType(o, ss_Exception)) {
		return o;
	}
	else if (o instanceof TypeError) {
		// TypeError can either be 'cannot read property blah of null/undefined' (proper NullReferenceException), or it can be eg. accessing a non-existent method of an object.
		// As long as all code is compiled, they should with a very high probability indicate the use of a null reference.
		return new ss_NullReferenceException(o.message, new ss_JsErrorException(o));
	}
	else if (o instanceof RangeError) {
		return new ss_ArgumentOutOfRangeException(null, o.message, new ss_JsErrorException(o));
	}
	else if (o instanceof Error) {
		return new ss_JsErrorException(o);
	}
	else {
		return new ss_Exception(o.toString());
	}
};

////////////////////////////////////////////////////////////////////////////////
// NotImplementedException

var ss_NotImplementedException = function NotImplementedException$(message, innerException) {
	ss_Exception.call(this, message || 'The method or operation is not implemented.', innerException);
};
ss_NotImplementedException.__typeName = 'ss.NotImplementedException';
ss.NotImplementedException = ss_NotImplementedException;
ss.initClass(ss_NotImplementedException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// NotSupportedException

var ss_NotSupportedException = function NotSupportedException$(message, innerException) {
	ss_Exception.call(this, message || 'Specified method is not supported.', innerException);
};
ss_NotSupportedException.__typeName = 'ss.NotSupportedException';
ss.NotSupportedException = ss_NotSupportedException;
ss.initClass(ss_NotSupportedException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// AggregateException

var ss_AggregateException = function AggregateException$(message, innerExceptions) {
	this.innerExceptions = ss.isValue(innerExceptions) ? ss.arrayFromEnumerable(innerExceptions) : [];
	ss_Exception.call(this, message || 'One or more errors occurred.', this.innerExceptions.length ? this.innerExceptions[0] : null);
};

ss_AggregateException.__typeName = 'ss.AggregateException';
ss.AggregateException = ss_AggregateException;
ss.initClass(ss_AggregateException, ss, {
	flatten: function  AggregateException$flatten() {
		var inner = [];
		for (var i = 0; i < this.innerExceptions.length; i++) {
			var e = this.innerExceptions[i];
			if (ss.isInstanceOfType(e, ss_AggregateException)) {
				inner.push.apply(inner, e.flatten().innerExceptions);
			}
			else {
				inner.push(e);
			}
		}
		return new ss_AggregateException(this._message, inner);
	}
}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// PromiseException

var ss_PromiseException = function PromiseException(args, message, innerException) {
	ss_Exception.call(this, message || (args.length && args[0] ? args[0].toString() : 'An error occurred'), innerException);
	this.arguments = ss.arrayClone(args);
};

ss_PromiseException.__typeName = 'ss.PromiseException';
ss.PromiseException = ss_PromiseException;
ss.initClass(ss_PromiseException, ss, {
	get_arguments: function PromiseException$get_arguments() {
		return this._arguments;
	}
}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// JsErrorException

var ss_JsErrorException = function JsErrorException$(error, message, innerException) {
	ss_Exception.call(this, message || error.message, innerException);
	this.error = error;
};
ss_JsErrorException.__typeName = 'ss.JsErrorException';
ss.JsErrorException = ss_JsErrorException;
ss.initClass(ss_JsErrorException, ss, {
	get_stack: function Exception$get_stack() {
		return this.error.stack;
	}
}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// ArgumentException

var ss_ArgumentException = function ArgumentException$(message, paramName, innerException) {
	ss_Exception.call(this, message || 'Value does not fall within the expected range.', innerException);
	this.paramName = paramName || null;
};

ss_ArgumentException.__typeName = 'ss.ArgumentException';
ss.ArgumentException = ss_ArgumentException;
ss.initClass(ss_ArgumentException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// ArgumentNullException

var ss_ArgumentNullException = function ArgumentNullException$(paramName, message, innerException) {
	if (!message) {
		message = 'Value cannot be null.';
		if (paramName)
			message += '\nParameter name: ' + paramName;
	}

	ss_ArgumentException.call(this, message, paramName, innerException);
};

ss_ArgumentNullException.__typeName = 'ss.ArgumentNullException';
ss.ArgumentNullException = ss_ArgumentNullException;
ss.initClass(ss_ArgumentNullException, ss, {}, ss_ArgumentException);

////////////////////////////////////////////////////////////////////////////////
// ArgumentNullException

var ss_ArgumentOutOfRangeException = function ArgumentOutOfRangeException$(paramName, message, innerException, actualValue) {
	if (!message) {
		message = 'Value is out of range.';
		if (paramName)
			message += '\nParameter name: ' + paramName;
	}

	ss_ArgumentException.call(this, message, paramName, innerException);
	this.actualValue = actualValue || null;
};

ss_ArgumentOutOfRangeException.__typeName = 'ss.ArgumentOutOfRangeException';
ss.ArgumentOutOfRangeException = ss_ArgumentOutOfRangeException;
ss.initClass(ss_ArgumentOutOfRangeException, ss, {}, ss_ArgumentException);

////////////////////////////////////////////////////////////////////////////////
// FormatException

var ss_FormatException = function FormatException$(message, innerException) {
	ss_Exception.call(this, message || 'Invalid format.', innerException);
};
ss_FormatException.__typeName = 'ss.FormatException';
ss.FormatException = ss_FormatException;
ss.initClass(ss_FormatException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// DivideByZeroException

var ss_DivideByZeroException = function DivideByZeroException$(message, innerException) {
	ss_Exception.call(this, message || 'Division by 0.', innerException);
};
ss_DivideByZeroException.__typeName = 'ss.DivideByZeroException';
ss.DivideByZeroException = ss_DivideByZeroException;
ss.initClass(ss_DivideByZeroException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// InvalidCastException

var ss_InvalidCastException = function InvalidCastException$(message, innerException) {
	ss_Exception.call(this, message || 'The cast is not valid.', innerException);
};
ss_InvalidCastException.__typeName = 'ss.InvalidCastException';
ss.InvalidCastException = ss_InvalidCastException;
ss.initClass(ss_InvalidCastException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// InvalidOperationException

var ss_InvalidOperationException = function InvalidOperationException$(message, innerException) {
	ss_Exception.call(this, message || 'Operation is not valid due to the current state of the object.', innerException);
};
ss_InvalidOperationException.__typeName = 'ss.InvalidOperationException';
ss.InvalidOperationException = ss_InvalidOperationException;
ss.initClass(ss_InvalidOperationException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// NullReferenceException

var ss_NullReferenceException = function NullReferenceException$(message, innerException) {
	ss_Exception.call(this, message || 'Object is null.', innerException);
};
ss_NullReferenceException.__typeName = 'ss.NullReferenceException';
ss.NullReferenceException = ss_NullReferenceException;
ss.initClass(ss_NullReferenceException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// KeyNotFoundException

var ss_KeyNotFoundException = function KeyNotFoundException$(message, innerException) {
	ss_Exception.call(this, message || 'Key not found.', innerException);
};
ss_KeyNotFoundException.__typeName = 'ss.KeyNotFoundException';
ss.KeyNotFoundException = ss_KeyNotFoundException;
ss.initClass(ss_KeyNotFoundException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// InvalidOperationException

var ss_AmbiguousMatchException = function AmbiguousMatchException$(message, innerException) {
	ss_Exception.call(this, message || 'Ambiguous match.', innerException);
};
ss_AmbiguousMatchException.__typeName = 'ss.AmbiguousMatchException';
ss.AmbiguousMatchException = ss_AmbiguousMatchException;
ss.initClass(ss_AmbiguousMatchException, ss, {}, ss_Exception);

///////////////////////////////////////////////////////////////////////////////
// IteratorBlockEnumerable

var ss_IteratorBlockEnumerable = function IteratorBlockEnumerable$(getEnumerator, $this) {
	this._getEnumerator = getEnumerator;
	this._this = $this;
};

ss_IteratorBlockEnumerable.__typeName = 'ss.IteratorBlockEnumerable';
ss.IteratorBlockEnumerable = ss_IteratorBlockEnumerable;
ss.initClass(ss_IteratorBlockEnumerable, ss, {
	getEnumerator: function IteratorBlockEnumerable$getEnumerator() {
		return this._getEnumerator.call(this._this);
	}
}, null, [ss_IEnumerable]);

///////////////////////////////////////////////////////////////////////////////
// IteratorBlockEnumerator

var ss_IteratorBlockEnumerator = function IteratorBlockEnumerator$(moveNext, getCurrent, dispose, $this) {
	this._moveNext = moveNext;
	this._getCurrent = getCurrent;
	this._dispose = dispose;
	this._this = $this;
};

ss_IteratorBlockEnumerator.__typeName = 'ss.IteratorBlockEnumerator';
ss.IteratorBlockEnumerator = ss_IteratorBlockEnumerator;
ss.initClass(ss_IteratorBlockEnumerator, ss, {
	moveNext: function IteratorBlockEnumerator$moveNext() {
		try {
			return this._moveNext.call(this._this);
		}
		catch (ex) {
			if (this._dispose)
				this._dispose.call(this._this);
			throw ex;
		}
	},
	current: function IteratorBlockEnumerator$current() {
		return this._getCurrent.call(this._this);
	},
	reset: function IteratorBlockEnumerator$reset() {
		throw new ss_NotSupportedException('Reset is not supported.');
	},
	dispose: function IteratorBlockEnumerator$dispose() {
		if (this._dispose)
			this._dispose.call(this._this);
	}
}, null, [ss_IEnumerator, ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// Lazy

var ss_Lazy = function Lazy$(valueFactory) {
	this._valueFactory = valueFactory;
	this.isValueCreated = false;
};
ss_Lazy.__typeName = 'ss.Lazy';
ss.Lazy = ss_Lazy;
ss.initClass(ss_Lazy, ss, {
	value: function Lazy$value() {
		if (!this.isValueCreated) {
			this._value = this._valueFactory();
			delete this._valueFactory;
			this.isValueCreated = true;
		}
		return this._value;
	}
});

///////////////////////////////////////////////////////////////////////////////
// Task

var ss_Task = function Task$(action, state) {
	this._action = action;
	this._state = state;
	this.exception = null;
	this.status = 0;
	this._thens = [];
	this._result = null;
};

ss_Task.delay = function Task$delay(delay) {
	var tcs = new ss_TaskCompletionSource();
	setTimeout(function() {
		tcs.setResult(0);
	}, delay);
	return tcs.task;
};

ss_Task.fromResult = function Task$fromResult(result) {
	var t = new ss_Task();
	t.status = 5;
	t._result = result;
	return t;
};

ss_Task.run = function Task$run(f) {
	var tcs = new ss_TaskCompletionSource();
	setTimeout(function() {
		try {
			tcs.setResult(f());
		}
		catch (e) {
			tcs.setException(ss_Exception.wrap(e));
		}
	}, 0);
	return tcs.task;
};

ss_Task.whenAll = function Task$whenAll(tasks) {
	var tcs = new ss_TaskCompletionSource();
	if (tasks.length === 0) {
		tcs.setResult([]);
	}
	else {
		var result = new Array(tasks.length), remaining = tasks.length, cancelled = false, exceptions = [];
		for (var i = 0; i < tasks.length; i++) {
			(function(i) {
				tasks[i].continueWith(function(t) {
					switch (t.status) {
						case 5:
							result[i] = t.getResult();
							break;
						case 6:
							cancelled = true;
							break;
						case 7:
							ss.arrayAddRange(exceptions, t.exception.innerExceptions);
							break;
						default:
							throw new ss_InvalidOperationException('Invalid task status ' + t.status);
					}
					if (--remaining === 0) {
						if (exceptions.length > 0)
							tcs.setException(exceptions);
						else if (cancelled)
							tcs.setCanceled();
						else
							tcs.setResult(result);
					}
				});
			})(i);
		}
	}
	return tcs.task;
};

ss_Task.whenAny = function Task$whenAny(tasks) {
	if (!tasks.length)
		throw new ss_ArgumentException('Must wait for at least one task', 'tasks');

	var tcs = new ss_TaskCompletionSource();
	for (var i = 0; i < tasks.length; i++) {
		tasks[i].continueWith(function(t) {
			switch (t.status) {
				case 5:
					tcs.trySetResult(t);
					break;
				case 6:
					tcs.trySetCanceled();
					break;
				case 7:
					tcs.trySetException(t.exception.innerExceptions);
					break;
				default:
					throw new ss_InvalidOperationException('Invalid task status ' + t.status);
			}
		});
	}
	return tcs.task;
};

ss_Task.fromDoneCallback = function Task$fromDoneCallback(t, i, m) {
	var tcs = new ss_TaskCompletionSource(), args;
	if (typeof(i) === 'number') {
		args = Array.prototype.slice.call(arguments, 3);
		if (i < 0)
			i += args.length + 1;
	}
	else {
		args = Array.prototype.slice.call(arguments, 2);
		m = i;
		i = args.length;
	}

	var cb = function(v) {
		tcs.setResult(v);
	};
	
	args = args.slice(0, i).concat(cb, args.slice(i));

	t[m].apply(t, args);
	return tcs.task;
};

ss_Task.fromPromise = function Task$fromPromise(p, f) {
	var tcs = new ss_TaskCompletionSource();
	if (typeof(f) === 'number')
		f = (function(i) { return function() { return arguments[i >= 0 ? i : (arguments.length + i)]; }; })(f);
	else if (typeof(f) !== 'function')
		f = function() { return Array.prototype.slice.call(arguments, 0); };

	p.then(function() {
		tcs.setResult(typeof(f) === 'function' ? f.apply(null, arguments) : null);
	}, function() {
		tcs.setException(new ss_PromiseException(Array.prototype.slice.call(arguments, 0)));
	});
	return tcs.task;
};

ss_Task.fromNode = function  Task$fromNode(t, f, m) {
	var tcs = new ss_TaskCompletionSource(), args;
	if (typeof(f) === 'function') {
		args = Array.prototype.slice.call(arguments, 3);
	}
	else {
		args = Array.prototype.slice.call(arguments, 2);
		m = f;
		f = function() { return arguments[0]; };
	}

	var cb = function(e) {
		if (e)
			tcs.setException(ss_Exception.wrap(e));
		else
			tcs.setResult(f.apply(null, Array.prototype.slice.call(arguments, 1)));
	};
	
	args.push(cb);

	t[m].apply(t, args);
	return tcs.task;
};

ss_Task.__typeName = 'ss.Task';
ss.Task = ss_Task;
ss.initClass(ss_Task, ss, {
	continueWith: function Task$continueWith(continuation) {
		var tcs = new ss_TaskCompletionSource();
		var _this = this;
		var fn = function() {
			try {
				tcs.setResult(continuation(_this));
			}
			catch (e) {
				tcs.setException(ss_Exception.wrap(e));
			}
		};
		if (this.isCompleted()) {
			setTimeout(fn, 0);
		}
		else {
			this._thens.push(fn);
		}
		return tcs.task;
	},
	start: function Task$start() {
		if (this.status !== 0)
			throw new ss_InvalidOperationException('Task was already started.');
		var _this = this;
		this.status = 3;
		setTimeout(function() {
			try {
				var result = _this._action(_this._state);
				delete _this._action;
				delete _this._state;
				_this._complete(result);
			}
			catch (e) {
				_this._fail(new ss_AggregateException(null, [ss_Exception.wrap(e)]));
			}
		}, 0);
	},
	_runCallbacks: function Task$_runCallbacks() {
		for (var i = 0; i < this._thens.length; i++)
			this._thens[i](this);
		delete this._thens;
	},
	_complete: function Task$_complete(result) {
		if (this.isCompleted())
			return false;
		this._result = result;
		this.status = 5;
		this._runCallbacks();
		return true;
	},
	_fail: function Task$_fail(exception) {
		if (this.isCompleted())
			return false;
		this.exception = exception;
		this.status = 7;
		this._runCallbacks();
		return true;
	},
	_cancel: function Task$_cancel() {
		if (this.isCompleted())
			return false;
		this.status = 6;
		this._runCallbacks();
		return true;
	},
	isCanceled: function Task$isCanceled() {
		return this.status === 6;
	},
	isCompleted: function Task$isCompleted() {
		return this.status >= 5;
	},
	isFaulted: function Task$isFaulted() {
		return this.status === 7;
	},
	_getResult: function Task$_getResult(await) {
		switch (this.status) {
			case 5:
				return this._result;
			case 6:
				throw new ss_InvalidOperationException('Task was cancelled.');
			case 7:
				throw await ? this.exception.innerExceptions[0] : this.exception;
			default:
				throw new ss_InvalidOperationException('Task is not yet completed.');
		}
	},
	getResult: function Task$getResult() {
		return this._getResult(false);
	},
	getAwaitedResult: function Task$getAwaitedResult() {
		return this._getResult(true);
	},
	dispose: function Task$dispose() {
	}
}, null, [ss_IDisposable]);

////////////////////////////////////////////////////////////////////////////////
// TaskStatus
var ss_TaskStatus = function() {
};
ss_TaskStatus.__typeName = 'ss.TaskStatus';
ss.TaskStatus = ss_TaskStatus;
ss.initEnum(ss_TaskStatus, ss, { created: 0, running: 3, ranToCompletion: 5, canceled: 6, faulted: 7 });

///////////////////////////////////////////////////////////////////////////////
// TaskCompletionSource

var ss_TaskCompletionSource = function TaskCompletionSource$() {
	this.task = new ss_Task();
	this.task.status = 3;
};

ss_TaskCompletionSource.__typeName = 'ss.TaskCompletionSource';
ss.TaskCompletionSource = ss_TaskCompletionSource;
ss.initClass(ss_TaskCompletionSource, ss, {
	setCanceled: function TaskCompletionSource$setCanceled() {
		if (!this.task._cancel())
			throw new ss_InvalidOperationException('Task was already completed.');
	},
	setResult: function TaskCompletionSource$setResult(result) {
		if (!this.task._complete(result))
			throw new ss_InvalidOperationException('Task was already completed.');
	},
	setException: function TaskCompletionSource$setException(exception) {
		if (!this.trySetException(exception))
			throw new ss_InvalidOperationException('Task was already completed.');
	},
	trySetCanceled: function TaskCompletionSource$trySetCanceled() {
		return this.task._cancel();
	},
	trySetResult: function TaskCompletionSource$setResult(result) {
		return this.task._complete(result);
	},
	trySetException: function TaskCompletionSource$setException(exception) {
		if (ss.isInstanceOfType(exception, ss_Exception))
			exception = [exception];
		return this.task._fail(new ss_AggregateException(null, exception));
	}
});

///////////////////////////////////////////////////////////////////////////////
// CancelEventArgs

var ss_CancelEventArgs = function CancelEventArgs$() {
	ss_EventArgs.call(this);
	this.cancel = false;
}

ss_CancelEventArgs.__typeName = 'ss.CancelEventArgs';
ss.CancelEventArgs = ss_CancelEventArgs;
ss.initClass(ss_CancelEventArgs, ss, {}, ss_EventArgs);

///////////////////////////////////////////////////////////////////////////////
// Guid

var ss_Guid = function Guid$() {
};
ss_Guid.$valid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/ig;
ss_Guid.$split = /^(.{8})(.{4})(.{4})(.{4})(.{12})$/;
ss_Guid.empty = '00000000-0000-0000-0000-000000000000';
ss_Guid.$rng = new ss_Random();

ss_Guid.__typeName = 'ss.Guid';
ss.Guid = ss_Guid;
ss.initClass(ss_Guid, ss, {}, Object, [ ss_IEquatable, ss_IComparable ]);
ss_Guid.__class = false;

ss_Guid.isInstanceOfType = function Guid$isInstanceOfType(instance) {
	return typeof(instance) === 'string' && instance.match(ss_Guid.$valid);
};

ss_Guid.getDefaultValue = ss_Guid.createInstance = function Guid$default() {
	return ss_Guid.empty;
};

ss_Guid.parse = function Guid$parse(uuid, format) {
	var r = {};
	if (ss_Guid.tryParse(uuid, format, r))
		return r.$;
	throw new ss_FormatException('Unable to parse UUID');
};

ss_Guid.tryParse = function Guid$tryParse(uuid, format, r) {
	r.$ = ss_Guid.empty;
	if (!ss.isValue(uuid)) throw new ss_ArgumentNullException('uuid');
	if (!format) {
		var m = /^[{(]?([0-9a-f]{8})-?([0-9a-f]{4})-?([0-9a-f]{4})-?([0-9a-f]{4})-?([0-9a-f]{12})[)}]?$/ig.exec(uuid);
		if (m) {
			r.$ = m.slice(1).join('-').toLowerCase();
			return true;
		}
	}
	else {
		if (format === 'N') {
			var m = ss_Guid.$split.exec(uuid);
			if (!m)
				return false;
			uuid = m.slice(1).join('-');
		}
		else if (format === 'B' || format === 'P') {
			var b = format === 'B';
			if (uuid[0] !== (b ? '{' : '(') || uuid[uuid.length - 1] !== (b ? '}' : ')'))
				return false;
			uuid = uuid.substr(1, uuid.length - 2);
		}
		if (uuid.match(ss_Guid.$valid)) {
			r.$ = uuid.toLowerCase();
			return true;
		}
	}
	return false;
};

ss_Guid.format = function Guid$format(uuid, format) {
	switch (format) {
		case 'N': return uuid.replace(/-/g, '');
		case 'B': return '{' + uuid + '}';
		case 'P': return '(' + uuid + ')';
		default : return uuid;
	}
}

ss_Guid.fromBytes = function Guid$fromBytes(b) {
	if (!b || b.length !== 16)
		throw new ss_ArgumentException('b', 'Must be 16 bytes');
	var s = b.map(function(x) { return ss.formatNumber(x & 0xff, 'x2'); }).join('');
	return ss_Guid.$split.exec(s).slice(1).join('-');
}

ss_Guid.newGuid = function Guid$newGuid() {
	var a = Array(16);
	ss_Guid.$rng.nextBytes(a);
	a[6] = a[6] & 0x0f | 0x40;
	a[8] = a[8] & 0xbf | 0x80;
	return ss_Guid.fromBytes(a);
};

ss_Guid.getBytes = function Guid$getBytes(uuid) {
	var a = Array(16);
	var s = uuid.replace(/-/g, '');
	for (var i = 0; i < 16; i++) {
		a[i] = parseInt(s.substr(i * 2, 2), 16);
	}
	return a;
};

if (global.ss) {
	for (var n in ss) {
		if (ss.hasOwnProperty(n))
			global.ss[n] = ss[n];
	}
}
else {
	global.ss = ss;
}
})(global);


// Script: linq.js
/*--------------------------------------------------------------------------
 * linq.js - LINQ for JavaScript
 * ver 3.0.3-Beta4 (Oct. 9th, 2012)
 *
 * created and maintained by neuecc <ils@neue.cc>
 * licensed under MIT License
 * http://linqjs.codeplex.com/
 *------------------------------------------------------------------------*/

(function (root, undefined) {
    // ReadOnly Function
    var Functions = {
        Identity: function (x) { return x; },
        True: function () { return true; },
        Blank: function () { }
    };

    // const Type
    var Types = {
        Boolean: typeof true,
        Number: typeof 0,
        String: typeof "",
        Object: typeof {},
        Undefined: typeof undefined,
        Function: typeof function () { }
    };

    // private utility methods
    var Utils = {
        // Create anonymous function from lambda expression string
        createLambda: function (expression) {
            if (expression == null) return Functions.Identity;
            if (typeof expression == Types.String) {
                if (expression == "") {
                    return Functions.Identity;
                }
                else if (expression.indexOf("=>") == -1) {
                    var regexp = new RegExp("[$]+", "g");

                    var maxLength = 0;
                    var match;
                    while (match = regexp.exec(expression)) {
                        var paramNumber = match[0].length;
                        if (paramNumber > maxLength) {
                            maxLength = paramNumber;
                        }
                    }

                    var argArray = [];
                    for (var i = 1; i <= maxLength; i++) {
                        var dollar = "";
                        for (var j = 0; j < i; j++) {
                            dollar += "$";
                        }
                        argArray.push(dollar);
                    }

                    var args = Array.prototype.join.call(argArray, ",");

                    return new Function(args, "return " + expression);
                }
                else {
                    var expr = expression.match(/^[(\s]*([^()]*?)[)\s]*=>(.*)/);
                    return new Function(expr[1], "return " + expr[2]);
                }
            }
            return expression;
        },

        isIEnumerable: function (obj) {
            if (typeof Enumerator !== Types.Undefined) {
                try {
                    new Enumerator(obj); // check JScript(IE)'s Enumerator
                    return true;
                }
                catch (e) { }
            }

            return false;
        },

        // IE8's defineProperty is defined but cannot use, therefore check defineProperties
        defineProperty: (Object.defineProperties != null)
            ? function (target, methodName, value) {
                Object.defineProperty(target, methodName, {
                    enumerable: false,
                    configurable: true,
                    writable: true,
                    value: value
                })
            }
            : function (target, methodName, value) {
                target[methodName] = value;
            },

        compare: function (a, b) {
            return (a === b) ? 0
                 : (a > b) ? 1
                 : -1;
        },

        dispose: function (obj) {
            if (obj != null) obj.dispose();
        }
    };

    // IEnumerator State
    var State = { Before: 0, Running: 1, After: 2 };

    // "Enumerator" is conflict JScript's "Enumerator"
    var IEnumerator = function (initialize, tryGetNext, dispose) {
        var yielder = new Yielder();
        var state = State.Before;

        this.current = yielder.current;
        this.reset = function () { throw new Error('Reset is not supported'); };

        this.moveNext = function () {
            try {
                switch (state) {
                    case State.Before:
                        state = State.Running;
                        initialize();
                        // fall through
                    case State.Running:
                        if (tryGetNext.apply(yielder)) {
                            return true;
                        }
                        else {
                            this.dispose();
                            return false;
                        }
                    case State.After:
                        return false;
                }
            }
            catch (e) {
                this.dispose();
                throw e;
            }
        };

        this.dispose = function () {
            if (state != State.Running) return;

            try {
                dispose();
            }
            finally {
                state = State.After;
            }
        };
    };
    var $asm = {};
    ss.initAssembly($asm, 'linq');
    ss.initClass(IEnumerator, $asm, {}, null, [ss.IDisposable]);

    // for tryGetNext
    var Yielder = function () {
        var current = null;
        this.current = function () { return current; };
        this.yieldReturn = function (value) {
            current = value;
            return true;
        };
        this.yieldBreak = function () {
            return false;
        };
    };

    // Enumerable constuctor
    var Enumerable = function (getEnumerator) {
        this.getEnumerator = getEnumerator;
    };
    ss.initClass(Enumerable, $asm, {}, null, [ss.IEnumerable]);

    // Utility

    Enumerable.Utils = {}; // container

    Enumerable.Utils.createLambda = function (expression) {
        return Utils.createLambda(expression);
    };

    Enumerable.Utils.createEnumerable = function (getEnumerator) {
        return new Enumerable(getEnumerator);
    };

    Enumerable.Utils.createEnumerator = function (initialize, tryGetNext, dispose) {
        return new IEnumerator(initialize, tryGetNext, dispose);
    };

    Enumerable.Utils.extendTo = function (type) {
        var typeProto = type.prototype;
        var enumerableProto;

        if (type === Array) {
            enumerableProto = ArrayEnumerable.prototype;
            Utils.defineProperty(typeProto, "getSource", function () {
                return this;
            });
        }
        else {
            enumerableProto = Enumerable.prototype;
            Utils.defineProperty(typeProto, "getEnumerator", function () {
                return Enumerable.from(this).getEnumerator();
            });
        }

        for (var methodName in enumerableProto) {
            var func = enumerableProto[methodName];

            // already extended
            if (typeProto[methodName] == func) continue;

            // already defined(example Array#reverse/join/forEach...)
            if (typeProto[methodName] != null) {
                methodName = methodName + "ByLinq";
                if (typeProto[methodName] == func) continue; // recheck
            }

            if (func instanceof Function) {
                Utils.defineProperty(typeProto, methodName, func);
            }
        }
    };

    // Generator

    Enumerable.choice = function () // variable argument
    {
        var args = arguments;

        return new Enumerable(function () {
            return new IEnumerator(
                function () {
                    args = (args[0] instanceof Array) ? args[0]
                        : (args[0].getEnumerator != null) ? args[0].toArray()
                        : args;
                },
                function () {
                    return this.yieldReturn(args[Math.floor(Math.random() * args.length)]);
                },
                Functions.Blank);
        });
    };

    Enumerable.cycle = function () // variable argument
    {
        var args = arguments;

        return new Enumerable(function () {
            var index = 0;
            return new IEnumerator(
                function () {
                    args = (args[0] instanceof Array) ? args[0]
                        : (args[0].getEnumerator != null) ? args[0].toArray()
                        : args;
                },
                function () {
                    if (index >= args.length) index = 0;
                    return this.yieldReturn(args[index++]);
                },
                Functions.Blank);
        });
    };

    Enumerable.empty = function () {
        return new Enumerable(function () {
            return new IEnumerator(
                Functions.Blank,
                function () { return false; },
                Functions.Blank);
        });
    };

    Enumerable.from = function (obj) {
        if (obj == null) {
            return Enumerable.empty();
        }
        if (obj instanceof Enumerable) {
            return obj;
        }
        if (typeof obj == Types.Number || typeof obj == Types.Boolean) {
            return Enumerable.repeat(obj, 1);
        }
        if (typeof obj == Types.String) {
            return new Enumerable(function () {
                var index = 0;
                return new IEnumerator(
                    Functions.Blank,
                    function () {
                        return (index < obj.length) ? this.yieldReturn(obj.charAt(index++)) : false;
                    },
                    Functions.Blank);
            });
        }
        var ienum = ss.safeCast(obj, ss.IEnumerable);
        if (ienum) {
            var enumerator;
            return new Enumerable(function () {
                return new IEnumerator(
                    function () { enumerator = ss.getEnumerator(ienum); },
                    function () {
                        var ok = enumerator.moveNext();
                        return ok ? this.yieldReturn(enumerator.current()) : false;
                    },
                    function () {
                        var disposable = ss.safeCast(enumerator, ss.IDisposable);
                        if (disposable) {
                            disposable.dispose();
                        }
                    }
                );
            });
        }

        if (typeof obj != Types.Function) {
            // array or array like object
            if (typeof obj.length == Types.Number) {
                return new ArrayEnumerable(obj);
            }

            // JScript's IEnumerable
            if (!(obj instanceof Object) && Utils.isIEnumerable(obj)) {
                return new Enumerable(function () {
                    var isFirst = true;
                    var enumerator;
                    return new IEnumerator(
                        function () { enumerator = new Enumerator(obj); },
                        function () {
                            if (isFirst) isFirst = false;
                            else enumerator.moveNext();

                            return (enumerator.atEnd()) ? false : this.yieldReturn(enumerator.item());
                        },
                        Functions.Blank);
                });
            }

            // WinMD IIterable<T>
            if (typeof Windows === Types.Object && typeof obj.first === Types.Function) {
                return new Enumerable(function () {
                    var isFirst = true;
                    var enumerator;
                    return new IEnumerator(
                        function () { enumerator = obj.first(); },
                        function () {
                            if (isFirst) isFirst = false;
                            else enumerator.moveNext();

                            return (enumerator.hasCurrent) ? this.yieldReturn(enumerator.current) : this.yieldBreak();
                        },
                        Functions.Blank);
                });
            }
        }

        // case function/object : Create keyValuePair[]
        return new Enumerable(function () {
            var array = [];
            var index = 0;

            return new IEnumerator(
                function () {
                    for (var key in obj) {
                        var value = obj[key];
                        if (!(value instanceof Function) && Object.prototype.hasOwnProperty.call(obj, key)) {
                            array.push({ key: key, value: value });
                        }
                    }
                },
                function () {
                    return (index < array.length)
                        ? this.yieldReturn(array[index++])
                        : false;
                },
                Functions.Blank);
        });
    },

    Enumerable.make = function (element) {
        return Enumerable.repeat(element, 1);
    };

    // Overload:function(input, pattern)
    // Overload:function(input, pattern, flags)
    Enumerable.matches = function (input, pattern, flags) {
        if (flags == null) flags = "";
        if (pattern instanceof RegExp) {
            flags += (pattern.ignoreCase) ? "i" : "";
            flags += (pattern.multiline) ? "m" : "";
            pattern = pattern.source;
        }
        if (flags.indexOf("g") === -1) flags += "g";

        return new Enumerable(function () {
            var regex;
            return new IEnumerator(
                function () { regex = new RegExp(pattern, flags); },
                function () {
                    var match = regex.exec(input);
                    return (match) ? this.yieldReturn(match) : false;
                },
                Functions.Blank);
        });
    };

    // Overload:function(start, count)
    // Overload:function(start, count, step)
    Enumerable.range = function (start, count, step) {
        if (step == null) step = 1;

        return new Enumerable(function () {
            var value;
            var index = 0;

            return new IEnumerator(
                function () { value = start - step; },
                function () {
                    return (index++ < count)
                        ? this.yieldReturn(value += step)
                        : this.yieldBreak();
                },
                Functions.Blank);
        });
    };

    // Overload:function(start, count)
    // Overload:function(start, count, step)
    Enumerable.rangeDown = function (start, count, step) {
        if (step == null) step = 1;

        return new Enumerable(function () {
            var value;
            var index = 0;

            return new IEnumerator(
                function () { value = start + step; },
                function () {
                    return (index++ < count)
                        ? this.yieldReturn(value -= step)
                        : this.yieldBreak();
                },
                Functions.Blank);
        });
    };

    // Overload:function(start, to)
    // Overload:function(start, to, step)
    Enumerable.rangeTo = function (start, to, step) {
        if (step == null) step = 1;

        if (start < to) {
            return new Enumerable(function () {
                var value;

                return new IEnumerator(
                function () { value = start - step; },
                function () {
                    var next = value += step;
                    return (next <= to)
                        ? this.yieldReturn(next)
                        : this.yieldBreak();
                },
                Functions.Blank);
            });
        }
        else {
            return new Enumerable(function () {
                var value;

                return new IEnumerator(
                function () { value = start + step; },
                function () {
                    var next = value -= step;
                    return (next >= to)
                        ? this.yieldReturn(next)
                        : this.yieldBreak();
                },
                Functions.Blank);
            });
        }
    };

    // Overload:function(element)
    // Overload:function(element, count)
    Enumerable.repeat = function (element, count) {
        if (count != null) return Enumerable.repeat(element).take(count);

        return new Enumerable(function () {
            return new IEnumerator(
                Functions.Blank,
                function () { return this.yieldReturn(element); },
                Functions.Blank);
        });
    };

    Enumerable.repeatWithFinalize = function (initializer, finalizer) {
        initializer = Utils.createLambda(initializer);
        finalizer = Utils.createLambda(finalizer);

        return new Enumerable(function () {
            var element;
            return new IEnumerator(
                function () { element = initializer(); },
                function () { return this.yieldReturn(element); },
                function () {
                    if (element != null) {
                        finalizer(element);
                        element = null;
                    }
                });
        });
    };

    // Overload:function(func)
    // Overload:function(func, count)
    Enumerable.generate = function (func, count) {
        if (count != null) return Enumerable.generate(func).take(count);
        func = Utils.createLambda(func);

        return new Enumerable(function () {
            return new IEnumerator(
                Functions.Blank,
                function () { return this.yieldReturn(func()); },
                Functions.Blank);
        });
    };

    // Overload:function()
    // Overload:function(start)
    // Overload:function(start, step)
    Enumerable.toInfinity = function (start, step) {
        if (start == null) start = 0;
        if (step == null) step = 1;

        return new Enumerable(function () {
            var value;
            return new IEnumerator(
                function () { value = start - step; },
                function () { return this.yieldReturn(value += step); },
                Functions.Blank);
        });
    };

    // Overload:function()
    // Overload:function(start)
    // Overload:function(start, step)
    Enumerable.toNegativeInfinity = function (start, step) {
        if (start == null) start = 0;
        if (step == null) step = 1;

        return new Enumerable(function () {
            var value;
            return new IEnumerator(
                function () { value = start + step; },
                function () { return this.yieldReturn(value -= step); },
                Functions.Blank);
        });
    };

    Enumerable.unfold = function (seed, func) {
        func = Utils.createLambda(func);

        return new Enumerable(function () {
            var isFirst = true;
            var value;
            return new IEnumerator(
                Functions.Blank,
                function () {
                    if (isFirst) {
                        isFirst = false;
                        value = seed;
                        return this.yieldReturn(value);
                    }
                    value = func(value);
                    return this.yieldReturn(value);
                },
                Functions.Blank);
        });
    };

    Enumerable.defer = function (enumerableFactory) {

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () { enumerator = Enumerable.from(enumerableFactory()).getEnumerator(); },
                function () {
                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.current())
                        : this.yieldBreak();
                },
                function () {
                    Utils.dispose(enumerator);
                });
        });
    };

    // Extension Methods

    /* Projection and Filtering Methods */

    // Overload:function(func)
    // Overload:function(func, resultSelector<element>)
    // Overload:function(func, resultSelector<element, nestLevel>)
    Enumerable.prototype.traverseBreadthFirst = function (func, resultSelector) {
        var source = this;
        func = Utils.createLambda(func);
        resultSelector = Utils.createLambda(resultSelector);

        return new Enumerable(function () {
            var enumerator;
            var nestLevel = 0;
            var buffer = [];

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    while (true) {
                        if (enumerator.moveNext()) {
                            buffer.push(enumerator.current());
                            return this.yieldReturn(resultSelector(enumerator.current(), nestLevel));
                        }

                        var next = Enumerable.from(buffer).selectMany(function (x) { return func(x); });
                        if (!next.any()) {
                            return false;
                        }
                        else {
                            nestLevel++;
                            buffer = [];
                            Utils.dispose(enumerator);
                            enumerator = next.getEnumerator();
                        }
                    }
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function(func)
    // Overload:function(func, resultSelector<element>)
    // Overload:function(func, resultSelector<element, nestLevel>)
    Enumerable.prototype.traverseDepthFirst = function (func, resultSelector) {
        var source = this;
        func = Utils.createLambda(func);
        resultSelector = Utils.createLambda(resultSelector);

        return new Enumerable(function () {
            var enumeratorStack = [];
            var enumerator;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    while (true) {
                        if (enumerator.moveNext()) {
                            var value = resultSelector(enumerator.current(), enumeratorStack.length);
                            enumeratorStack.push(enumerator);
                            enumerator = Enumerable.from(func(enumerator.current())).getEnumerator();
                            return this.yieldReturn(value);
                        }

                        if (enumeratorStack.length <= 0) return false;
                        Utils.dispose(enumerator);
                        enumerator = enumeratorStack.pop();
                    }
                },
                function () {
                    try {
                        Utils.dispose(enumerator);
                    }
                    finally {
                        Enumerable.from(enumeratorStack).forEach(function (s) { s.dispose(); });
                    }
                });
        });
    };

    Enumerable.prototype.flatten = function () {
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var middleEnumerator = null;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    while (true) {
                        if (middleEnumerator != null) {
                            if (middleEnumerator.moveNext()) {
                                return this.yieldReturn(middleEnumerator.current());
                            }
                            else {
                                middleEnumerator = null;
                            }
                        }

                        if (enumerator.moveNext()) {
                            if (enumerator.current() instanceof Array) {
                                Utils.dispose(middleEnumerator);
                                middleEnumerator = Enumerable.from(enumerator.current())
                                    .selectMany(Functions.Identity)
                                    .flatten()
                                    .getEnumerator();
                                continue;
                            }
                            else {
                                return this.yieldReturn(enumerator.current());
                            }
                        }

                        return false;
                    }
                },
                function () {
                    try {
                        Utils.dispose(enumerator);
                    }
                    finally {
                        Utils.dispose(middleEnumerator);
                    }
                });
        });
    };

    Enumerable.prototype.pairwise = function (selector) {
        var source = this;
        selector = Utils.createLambda(selector);

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () {
                    enumerator = source.getEnumerator();
                    enumerator.moveNext();
                },
                function () {
                    var prev = enumerator.current();
                    return (enumerator.moveNext())
                        ? this.yieldReturn(selector(prev, enumerator.current()))
                        : false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function(func)
    // Overload:function(seed,func<value,element>)
    Enumerable.prototype.scan = function (seed, func) {
        var isUseSeed;
        if (func == null) {
            func = Utils.createLambda(seed); // arguments[0]
            isUseSeed = false;
        } else {
            func = Utils.createLambda(func);
            isUseSeed = true;
        }
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var value;
            var isFirst = true;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    if (isFirst) {
                        isFirst = false;
                        if (!isUseSeed) {
                            if (enumerator.moveNext()) {
                                return this.yieldReturn(value = enumerator.current());
                            }
                        }
                        else {
                            return this.yieldReturn(value = seed);
                        }
                    }

                    return (enumerator.moveNext())
                        ? this.yieldReturn(value = func(value, enumerator.current()))
                        : false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function(selector<element>)
    // Overload:function(selector<element,index>)
    Enumerable.prototype.select = function (selector) {
        selector = Utils.createLambda(selector);

        if (selector.length <= 1) {
            return new WhereSelectEnumerable(this, null, selector);
        }
        else {
            var source = this;

            return new Enumerable(function () {
                var enumerator;
                var index = 0;

                return new IEnumerator(
                    function () { enumerator = source.getEnumerator(); },
                    function () {
                        return (enumerator.moveNext())
                            ? this.yieldReturn(selector(enumerator.current(), index++))
                            : false;
                    },
                    function () { Utils.dispose(enumerator); });
            });
        }
    };

    // Overload:function(collectionSelector<element>)
    // Overload:function(collectionSelector<element,index>)
    // Overload:function(collectionSelector<element>,resultSelector)
    // Overload:function(collectionSelector<element,index>,resultSelector)
    Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {
        var source = this;
        collectionSelector = Utils.createLambda(collectionSelector);
        if (resultSelector == null) resultSelector = function (a, b) { return b; };
        resultSelector = Utils.createLambda(resultSelector);

        return new Enumerable(function () {
            var enumerator;
            var middleEnumerator = undefined;
            var index = 0;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    if (middleEnumerator === undefined) {
                        if (!enumerator.moveNext()) return false;
                    }
                    do {
                        if (middleEnumerator == null) {
                            var middleSeq = collectionSelector(enumerator.current(), index++);
                            middleEnumerator = Enumerable.from(middleSeq).getEnumerator();
                        }
                        if (middleEnumerator.moveNext()) {
                            return this.yieldReturn(resultSelector(enumerator.current(), middleEnumerator.current()));
                        }
                        Utils.dispose(middleEnumerator);
                        middleEnumerator = null;
                    } while (enumerator.moveNext());
                    return false;
                },
                function () {
                    try {
                        Utils.dispose(enumerator);
                    }
                    finally {
                        Utils.dispose(middleEnumerator);
                    }
                });
        });
    };

    // Overload:function(predicate<element>)
    // Overload:function(predicate<element,index>)
    Enumerable.prototype.where = function (predicate) {
        predicate = Utils.createLambda(predicate);

        if (predicate.length <= 1) {
            return new WhereEnumerable(this, predicate);
        }
        else {
            var source = this;

            return new Enumerable(function () {
                var enumerator;
                var index = 0;

                return new IEnumerator(
                    function () { enumerator = source.getEnumerator(); },
                    function () {
                        while (enumerator.moveNext()) {
                            if (predicate(enumerator.current(), index++)) {
                                return this.yieldReturn(enumerator.current());
                            }
                        }
                        return false;
                    },
                    function () { Utils.dispose(enumerator); });
            });
        }
    };


    // Overload:function(selector<element>)
    // Overload:function(selector<element,index>)
    Enumerable.prototype.choose = function (selector) {
        selector = Utils.createLambda(selector);
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var index = 0;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    while (enumerator.moveNext()) {
                        var result = selector(enumerator.current(), index++);
                        if (result != null) {
                            return this.yieldReturn(result);
                        }
                    }
                    return this.yieldBreak();
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    Enumerable.prototype.ofType = function (type) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () { enumerator = ss.getEnumerator(source); },
                function () {
                    while (enumerator.moveNext()) {
                        var v = ss.safeCast(enumerator.current(), type);
                        if (ss.isValue(v)) {
                            return this.yieldReturn(v);
                        }
                    }
                    return false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // mutiple arguments, last one is selector, others are enumerable
    Enumerable.prototype.zip = function () {
        var args = arguments;
        var selector = Utils.createLambda(arguments[arguments.length - 1]);

        var source = this;
        // optimized case:argument is 2
        if (arguments.length == 2) {
            var second = arguments[0];

            return new Enumerable(function () {
                var firstEnumerator;
                var secondEnumerator;
                var index = 0;

                return new IEnumerator(
                function () {
                    firstEnumerator = source.getEnumerator();
                    secondEnumerator = Enumerable.from(second).getEnumerator();
                },
                function () {
                    if (firstEnumerator.moveNext() && secondEnumerator.moveNext()) {
                        return this.yieldReturn(selector(firstEnumerator.current(), secondEnumerator.current(), index++));
                    }
                    return false;
                },
                function () {
                    try {
                        Utils.dispose(firstEnumerator);
                    } finally {
                        Utils.dispose(secondEnumerator);
                    }
                });
            });
        }
        else {
            return new Enumerable(function () {
                var enumerators;
                var index = 0;

                return new IEnumerator(
                function () {
                    var array = Enumerable.make(source)
                        .concat(Enumerable.from(args).takeExceptLast().select(Enumerable.from))
                        .select(function (x) { return x.getEnumerator() })
                        .toArray();
                    enumerators = Enumerable.from(array);
                },
                function () {
                    if (enumerators.all(function (x) { return x.moveNext() })) {
                        var array = enumerators
                            .select(function (x) { return x.current() })
                            .toArray();
                        array.push(index++);
                        return this.yieldReturn(selector.apply(null, array));
                    }
                    else {
                        return this.yieldBreak();
                    }
                },
                function () {
                    Enumerable.from(enumerators).forEach(Utils.dispose);
                });
            });
        }
    };

    // mutiple arguments
    Enumerable.prototype.merge = function () {
        var args = arguments;
        var source = this;

        return new Enumerable(function () {
            var enumerators;
            var index = -1;

            return new IEnumerator(
                function () {
                    enumerators = Enumerable.make(source)
                        .concat(Enumerable.from(args).select(Enumerable.from))
                        .select(function (x) { return x.getEnumerator() })
                        .toArray();
                },
                function () {
                    while (enumerators.length > 0) {
                        index = (index >= enumerators.length - 1) ? 0 : index + 1;
                        var enumerator = enumerators[index];

                        if (enumerator.moveNext()) {
                            return this.yieldReturn(enumerator.current());
                        }
                        else {
                            enumerator.dispose();
                            enumerators.splice(index--, 1);
                        }
                    }
                    return this.yieldBreak();
                },
                function () {
                    Enumerable.from(enumerators).forEach(Utils.dispose);
                });
        });
    };

    /* Join Methods */

    // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector)
    // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector, comparer)
    Enumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {
        outerKeySelector = Utils.createLambda(outerKeySelector);
        innerKeySelector = Utils.createLambda(innerKeySelector);
        resultSelector = Utils.createLambda(resultSelector);
        var source = this;

        return new Enumerable(function () {
            var outerEnumerator;
            var lookup;
            var innerElements = null;
            var innerCount = 0;

            return new IEnumerator(
                function () {
                    outerEnumerator = source.getEnumerator();
                    lookup = Enumerable.from(inner).toLookup(innerKeySelector, Functions.Identity, comparer);
                },
                function () {
                    while (true) {
                        if (innerElements != null) {
                            var innerElement = innerElements[innerCount++];
                            if (innerElement !== undefined) {
                                return this.yieldReturn(resultSelector(outerEnumerator.current(), innerElement));
                            }

                            innerElement = null;
                            innerCount = 0;
                        }

                        if (outerEnumerator.moveNext()) {
                            var key = outerKeySelector(outerEnumerator.current());
                            innerElements = lookup.get(key).toArray();
                        } else {
                            return false;
                        }
                    }
                },
                function () { Utils.dispose(outerEnumerator); });
        });
    };

    // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector)
    // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector, comparer)
    Enumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {
        outerKeySelector = Utils.createLambda(outerKeySelector);
        innerKeySelector = Utils.createLambda(innerKeySelector);
        resultSelector = Utils.createLambda(resultSelector);
        var source = this;

        return new Enumerable(function () {
            var enumerator = source.getEnumerator();
            var lookup = null;

            return new IEnumerator(
                function () {
                    enumerator = source.getEnumerator();
                    lookup = Enumerable.from(inner).toLookup(innerKeySelector, Functions.Identity, comparer);
                },
                function () {
                    if (enumerator.moveNext()) {
                        var innerElement = lookup.get(outerKeySelector(enumerator.current()));
                        return this.yieldReturn(resultSelector(enumerator.current(), innerElement));
                    }
                    return false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    /* Set Methods */

    Enumerable.prototype.all = function (predicate) {
        predicate = Utils.createLambda(predicate);

        var result = true;
        this.forEach(function (x) {
            if (!predicate(x)) {
                result = false;
                return false; // break
            }
        });
        return result;
    };

    // Overload:function()
    // Overload:function(predicate)
    Enumerable.prototype.any = function (predicate) {
        predicate = Utils.createLambda(predicate);

        var enumerator = this.getEnumerator();
        try {
            if (arguments.length == 0) return enumerator.moveNext(); // case:function()

            while (enumerator.moveNext()) // case:function(predicate)
            {
                if (predicate(enumerator.current())) return true;
            }
            return false;
        }
        finally {
            Utils.dispose(enumerator);
        }
    };

    Enumerable.prototype.isEmpty = function () {
        return !this.any();
    };

    // multiple arguments
    Enumerable.prototype.concat = function () {
        var source = this;

        if (arguments.length == 1) {
            var second = arguments[0];

            return new Enumerable(function () {
                var firstEnumerator;
                var secondEnumerator;

                return new IEnumerator(
                function () { firstEnumerator = source.getEnumerator(); },
                function () {
                    if (secondEnumerator == null) {
                        if (firstEnumerator.moveNext()) return this.yieldReturn(firstEnumerator.current());
                        secondEnumerator = Enumerable.from(second).getEnumerator();
                    }
                    if (secondEnumerator.moveNext()) return this.yieldReturn(secondEnumerator.current());
                    return false;
                },
                function () {
                    try {
                        Utils.dispose(firstEnumerator);
                    }
                    finally {
                        Utils.dispose(secondEnumerator);
                    }
                });
            });
        }
        else {
            var args = arguments;

            return new Enumerable(function () {
                var enumerators;

                return new IEnumerator(
                    function () {
                        enumerators = Enumerable.make(source)
                            .concat(Enumerable.from(args).select(Enumerable.from))
                            .select(function (x) { return x.getEnumerator() })
                            .toArray();
                    },
                    function () {
                        while (enumerators.length > 0) {
                            var enumerator = enumerators[0];

                            if (enumerator.moveNext()) {
                                return this.yieldReturn(enumerator.current());
                            }
                            else {
                                enumerator.dispose();
                                enumerators.splice(0, 1);
                            }
                        }
                        return this.yieldBreak();
                    },
                    function () {
                        Enumerable.from(enumerators).forEach(Utils.dispose);
                    });
            });
        }
    };

    Enumerable.prototype.insert = function (index, second) {
        var source = this;

        return new Enumerable(function () {
            var firstEnumerator;
            var secondEnumerator;
            var count = 0;
            var isEnumerated = false;

            return new IEnumerator(
                function () {
                    firstEnumerator = source.getEnumerator();
                    secondEnumerator = Enumerable.from(second).getEnumerator();
                },
                function () {
                    if (count == index && secondEnumerator.moveNext()) {
                        isEnumerated = true;
                        return this.yieldReturn(secondEnumerator.current());
                    }
                    if (firstEnumerator.moveNext()) {
                        count++;
                        return this.yieldReturn(firstEnumerator.current());
                    }
                    if (!isEnumerated && secondEnumerator.moveNext()) {
                        return this.yieldReturn(secondEnumerator.current());
                    }
                    return false;
                },
                function () {
                    try {
                        Utils.dispose(firstEnumerator);
                    }
                    finally {
                        Utils.dispose(secondEnumerator);
                    }
                });
        });
    };

    Enumerable.prototype.alternate = function (alternateValueOrSequence) {
        var source = this;

        return new Enumerable(function () {
            var buffer;
            var enumerator;
            var alternateSequence;
            var alternateEnumerator;

            return new IEnumerator(
                function () {
                    if (alternateValueOrSequence instanceof Array || alternateValueOrSequence.getEnumerator != null) {
                        alternateSequence = Enumerable.from(Enumerable.from(alternateValueOrSequence).toArray()); // freeze
                    }
                    else {
                        alternateSequence = Enumerable.make(alternateValueOrSequence);
                    }
                    enumerator = source.getEnumerator();
                    if (enumerator.moveNext()) buffer = enumerator.current();
                },
                function () {
                    while (true) {
                        if (alternateEnumerator != null) {
                            if (alternateEnumerator.moveNext()) {
                                return this.yieldReturn(alternateEnumerator.current());
                            }
                            else {
                                alternateEnumerator = null;
                            }
                        }

                        if (buffer == null && enumerator.moveNext()) {
                            buffer = enumerator.current(); // hasNext
                            alternateEnumerator = alternateSequence.getEnumerator();
                            continue; // GOTO
                        }
                        else if (buffer != null) {
                            var retVal = buffer;
                            buffer = null;
                            return this.yieldReturn(retVal);
                        }

                        return this.yieldBreak();
                    }
                },
                function () {
                    try {
                        Utils.dispose(enumerator);
                    }
                    finally {
                        Utils.dispose(alternateEnumerator);
                    }
                });
        });
    };

    // Overload:function(value)
    // Overload:function(value, comparer)
    Enumerable.prototype.contains = function (value, comparer) {
        comparer = comparer || ss.EqualityComparer.def;
        var enumerator = this.getEnumerator();
        try {
            while (enumerator.moveNext()) {
                if (comparer.areEqual(enumerator.current(), value)) return true;
            }
            return false;
        }
        finally {
            Utils.dispose(enumerator);
        }
    };

    Enumerable.prototype.defaultIfEmpty = function (defaultValue) {
        var source = this;
        if (defaultValue === undefined) defaultValue = null;

        return new Enumerable(function () {
            var enumerator;
            var isFirst = true;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    if (enumerator.moveNext()) {
                        isFirst = false;
                        return this.yieldReturn(enumerator.current());
                    }
                    else if (isFirst) {
                        isFirst = false;
                        return this.yieldReturn(defaultValue);
                    }
                    return false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function()
    // Overload:function(comparer)
    Enumerable.prototype.distinct = function (comparer) {
        return this.except(Enumerable.empty(), comparer);
    };

    Enumerable.prototype.distinctUntilChanged = function (compareSelector) {
        compareSelector = Utils.createLambda(compareSelector);
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var compareKey;
            var initial;

            return new IEnumerator(
                function () {
                    enumerator = source.getEnumerator();
                },
                function () {
                    while (enumerator.moveNext()) {
                        var key = compareSelector(enumerator.current());

                        if (initial) {
                            initial = false;
                            compareKey = key;
                            return this.yieldReturn(enumerator.current());
                        }

                        if (compareKey === key) {
                            continue;
                        }

                        compareKey = key;
                        return this.yieldReturn(enumerator.current());
                    }
                    return this.yieldBreak();
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function(second)
    // Overload:function(second, comparer)
    Enumerable.prototype.except = function (second, comparer) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var keys;

            return new IEnumerator(
                function () {
                    enumerator = source.getEnumerator();
                    keys = new (ss.makeGenericType(ss.Dictionary$2, [Object, Object]))(null, comparer);
                    Enumerable.from(second).forEach(function (key) { keys.add(key); });
                },
                function () {
                    while (enumerator.moveNext()) {
                        var current = enumerator.current();
                        if (!keys.containsKey(current)) {
                            keys.add(current);
                            return this.yieldReturn(current);
                        }
                    }
                    return false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function(second)
    // Overload:function(second, comparer)
    Enumerable.prototype.intersect = function (second, comparer) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var keys;
            var outs;

            return new IEnumerator(
                function () {
                    enumerator = source.getEnumerator();

                    keys = new (ss.makeGenericType(ss.Dictionary$2, [Object, Object]))(null, comparer);
                    Enumerable.from(second).forEach(function (key) { keys.add(key); });
                    outs = new (ss.makeGenericType(ss.Dictionary$2, [Object, Object]))(null, comparer);
                },
                function () {
                    while (enumerator.moveNext()) {
                        var current = enumerator.current();
                        if (!outs.containsKey(current) && keys.containsKey(current)) {
                            outs.add(current);
                            return this.yieldReturn(current);
                        }
                    }
                    return false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function(second)
    // Overload:function(second, comparer)
    Enumerable.prototype.sequenceEqual = function (second, comparer) {
        comparer = comparer || ss.EqualityComparer.def;

        var firstEnumerator = this.getEnumerator();
        try {
            var secondEnumerator = Enumerable.from(second).getEnumerator();
            try {
                while (firstEnumerator.moveNext()) {
                    if (!secondEnumerator.moveNext()
                    || !comparer.areEqual(firstEnumerator.current(), secondEnumerator.current())) {
                        return false;
                    }
                }

                if (secondEnumerator.moveNext()) return false;
                return true;
            }
            finally {
                Utils.dispose(secondEnumerator);
            }
        }
        finally {
            Utils.dispose(firstEnumerator);
        }
    };

    Enumerable.prototype.union = function (second, comparer) {
        var source = this;

        return new Enumerable(function () {
            var firstEnumerator;
            var secondEnumerator;
            var keys;

            return new IEnumerator(
                function () {
                    firstEnumerator = source.getEnumerator();
                    keys = new (ss.makeGenericType(ss.Dictionary$2, [Object, Object]))(null, comparer);
                },
                function () {
                    var current;
                    if (secondEnumerator === undefined) {
                        while (firstEnumerator.moveNext()) {
                            current = firstEnumerator.current();
                            if (!keys.containsKey(current)) {
                                keys.add(current);
                                return this.yieldReturn(current);
                            }
                        }
                        secondEnumerator = Enumerable.from(second).getEnumerator();
                    }
                    while (secondEnumerator.moveNext()) {
                        current = secondEnumerator.current();
                        if (!keys.containsKey(current)) {
                            keys.add(current);
                            return this.yieldReturn(current);
                        }
                    }
                    return false;
                },
                function () {
                    try {
                        Utils.dispose(firstEnumerator);
                    }
                    finally {
                        Utils.dispose(secondEnumerator);
                    }
                });
        });
    };

    /* Ordering Methods */

    // Overload:function()
    // Overload:function(keySelector)
    // Overload:function(keySelector, comparer)
    Enumerable.prototype.orderBy = function (keySelector, comparer) {
        return new OrderedEnumerable(this, keySelector, comparer, false);
    };

    // Overload:function()
    // Overload:function(keySelector)
    // Overload:function(keySelector, comparer)
    Enumerable.prototype.orderByDescending = function (keySelector, comparer) {
        return new OrderedEnumerable(this, keySelector, comparer, true);
    };

    Enumerable.prototype.reverse = function () {
        var source = this;

        return new Enumerable(function () {
            var buffer;
            var index;

            return new IEnumerator(
                function () {
                    buffer = source.toArray();
                    index = buffer.length;
                },
                function () {
                    return (index > 0)
                        ? this.yieldReturn(buffer[--index])
                        : false;
                },
                Functions.Blank);
        });
    };

    Enumerable.prototype.shuffle = function () {
        var source = this;

        return new Enumerable(function () {
            var buffer;

            return new IEnumerator(
                function () { buffer = source.toArray(); },
                function () {
                    if (buffer.length > 0) {
                        var i = Math.floor(Math.random() * buffer.length);
                        return this.yieldReturn(buffer.splice(i, 1)[0]);
                    }
                    return false;
                },
                Functions.Blank);
        });
    };

    Enumerable.prototype.weightedSample = function (weightSelector) {
        weightSelector = Utils.createLambda(weightSelector);
        var source = this;

        return new Enumerable(function () {
            var sortedByBound;
            var totalWeight = 0;

            return new IEnumerator(
                function () {
                    sortedByBound = source
                        .choose(function (x) {
                            var weight = weightSelector(x);
                            if (weight <= 0) return null; // ignore 0

                            totalWeight += weight;
                            return { value: x, bound: totalWeight };
                        })
                        .toArray();
                },
                function () {
                    if (sortedByBound.length > 0) {
                        var draw = Math.floor(Math.random() * totalWeight) + 1;

                        var lower = -1;
                        var upper = sortedByBound.length;
                        while (upper - lower > 1) {
                            var index = Math.floor((lower + upper) / 2);
                            if (sortedByBound[index].bound >= draw) {
                                upper = index;
                            }
                            else {
                                lower = index;
                            }
                        }

                        return this.yieldReturn(sortedByBound[upper].value);
                    }

                    return this.yieldBreak();
                },
                Functions.Blank);
        });
    };

    /* Grouping Methods */

    // Overload:function(keySelector)
    // Overload:function(keySelector,elementSelector)
    // Overload:function(keySelector,elementSelector,resultSelector)
    // Overload:function(keySelector,elementSelector,resultSelector,comparer)
    Enumerable.prototype.groupBy = function (keySelector, elementSelector, resultSelector, comparer) {
        var source = this;
        keySelector = Utils.createLambda(keySelector);
        elementSelector = Utils.createLambda(elementSelector);
        if (resultSelector != null) resultSelector = Utils.createLambda(resultSelector);

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () {
                    enumerator = source.toLookup(keySelector, elementSelector, comparer)
                        .toEnumerable()
                        .getEnumerator();
                },
                function () {
                    while (enumerator.moveNext()) {
                        return (resultSelector == null)
                            ? this.yieldReturn(enumerator.current())
                            : this.yieldReturn(resultSelector(enumerator.current().key(), enumerator.current()));
                    }
                    return false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function(keySelector)
    // Overload:function(keySelector,elementSelector)
    // Overload:function(keySelector,elementSelector,resultSelector)
    // Overload:function(keySelector,elementSelector,resultSelector,comperer)
    Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, comparer) {
        var source = this;
        keySelector = Utils.createLambda(keySelector);
        elementSelector = Utils.createLambda(elementSelector);
        comparer = comparer || ss.EqualityComparer.def;
        var hasResultSelector;
        if (resultSelector == null) {
            hasResultSelector = false;
            resultSelector = function (key, group) { return new Grouping(key, group); };
        }
        else {
            hasResultSelector = true;
            resultSelector = Utils.createLambda(resultSelector);
        }

        return new Enumerable(function () {
            var enumerator;
            var key;
            var group = [];

            return new IEnumerator(
                function () {
                    enumerator = source.getEnumerator();
                    if (enumerator.moveNext()) {
                        key = keySelector(enumerator.current());
                        group.push(elementSelector(enumerator.current()));
                    }
                },
                function () {
                    var hasNext;
                    while ((hasNext = enumerator.moveNext()) == true) {
                        if (comparer.areEqual(key, keySelector(enumerator.current()))) {
                            group.push(elementSelector(enumerator.current()));
                        }
                        else break;
                    }

                    if (group.length > 0) {
                        var result = (hasResultSelector)
                            ? resultSelector(key, Enumerable.from(group))
                            : resultSelector(key, group);
                        if (hasNext) {
                            key = keySelector(enumerator.current());
                            group = [elementSelector(enumerator.current())];
                        }
                        else group = [];

                        return this.yieldReturn(result);
                    }

                    return false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    Enumerable.prototype.buffer = function (count) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    var array = [];
                    var index = 0;
                    while (enumerator.moveNext()) {
                        array.push(enumerator.current());
                        if (++index >= count) return this.yieldReturn(array);
                    }
                    if (array.length > 0) return this.yieldReturn(array);
                    return false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    /* Aggregate Methods */

    // Overload:function(func)
    // Overload:function(seed,func)
    // Overload:function(seed,func,resultSelector)
    Enumerable.prototype.aggregate = function (seed, func, resultSelector) {
        resultSelector = Utils.createLambda(resultSelector);
        return resultSelector(this.scan(seed, func, resultSelector).last());
    };

    // Overload:function()
    // Overload:function(selector)
    Enumerable.prototype.average = function (selector) {
        selector = Utils.createLambda(selector);

        var sum = 0;
        var count = 0;
        this.forEach(function (x) {
            sum += selector(x);
            ++count;
        });

        return sum / count;
    };

    // Overload:function()
    // Overload:function(predicate)
    Enumerable.prototype.count = function (predicate) {
        predicate = (predicate == null) ? Functions.True : Utils.createLambda(predicate);

        var count = 0;
        this.forEach(function (x, i) {
            if (predicate(x, i))++count;
        });
        return count;
    };

    // Overload:function()
    // Overload:function(selector)
    Enumerable.prototype.max = function (selector) {
        if (selector == null) selector = Functions.Identity;
        return this.select(selector).aggregate(function (a, b) { return (a > b) ? a : b; });
    };

    // Overload:function()
    // Overload:function(selector)
    Enumerable.prototype.min = function (selector) {
        if (selector == null) selector = Functions.Identity;
        return this.select(selector).aggregate(function (a, b) { return (a < b) ? a : b; });
    };

    Enumerable.prototype.maxBy = function (keySelector) {
        keySelector = Utils.createLambda(keySelector);
        return this.aggregate(function (a, b) { return (keySelector(a) > keySelector(b)) ? a : b; });
    };

    Enumerable.prototype.minBy = function (keySelector) {
        keySelector = Utils.createLambda(keySelector);
        return this.aggregate(function (a, b) { return (keySelector(a) < keySelector(b)) ? a : b; });
    };

    // Overload:function()
    // Overload:function(selector)
    Enumerable.prototype.sum = function (selector) {
        if (selector == null) selector = Functions.Identity;
        return this.select(selector).aggregate(0, function (a, b) { return a + b; });
    };

    /* Paging Methods */

    Enumerable.prototype.elementAt = function (index) {
        var value;
        var found = false;
        this.forEach(function (x, i) {
            if (i == index) {
                value = x;
                found = true;
                return false;
            }
        });

        if (!found) throw new Error("index is less than 0 or greater than or equal to the number of elements in source.");
        return value;
    };

    Enumerable.prototype.elementAtOrDefault = function (index, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        var value;
        var found = false;
        this.forEach(function (x, i) {
            if (i == index) {
                value = x;
                found = true;
                return false;
            }
        });

        return (!found) ? defaultValue : value;
    };

    // Overload:function()
    // Overload:function(predicate)
    Enumerable.prototype.first = function (predicate) {
        if (predicate != null) return this.where(predicate).first();

        var value;
        var found = false;
        this.forEach(function (x) {
            value = x;
            found = true;
            return false;
        });

        if (!found) throw new Error("first:No element satisfies the condition.");
        return value;
    };

    Enumerable.prototype.firstOrDefault = function (predicate, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        if (predicate != null) return this.where(predicate).firstOrDefault(null, defaultValue);

        var value;
        var found = false;
        this.forEach(function (x) {
            value = x;
            found = true;
            return false;
        });
        return (!found) ? defaultValue : value;
    };

    // Overload:function()
    // Overload:function(predicate)
    Enumerable.prototype.last = function (predicate) {
        if (predicate != null) return this.where(predicate).last();

        var value;
        var found = false;
        this.forEach(function (x) {
            found = true;
            value = x;
        });

        if (!found) throw new Error("last:No element satisfies the condition.");
        return value;
    };

    // Overload:function(defaultValue)
    // Overload:function(defaultValue,predicate)
    Enumerable.prototype.lastOrDefault = function (predicate, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        if (predicate != null) return this.where(predicate).lastOrDefault(null, defaultValue);

        var value;
        var found = false;
        this.forEach(function (x) {
            found = true;
            value = x;
        });
        return (!found) ? defaultValue : value;
    };

    // Overload:function()
    // Overload:function(predicate)
    Enumerable.prototype.single = function (predicate) {
        if (predicate != null) return this.where(predicate).single();

        var value;
        var found = false;
        this.forEach(function (x) {
            if (!found) {
                found = true;
                value = x;
            } else throw new Error("single:sequence contains more than one element.");
        });

        if (!found) throw new Error("single:No element satisfies the condition.");
        return value;
    };

    // Overload:function(defaultValue)
    // Overload:function(defaultValue,predicate)
    Enumerable.prototype.singleOrDefault = function (predicate, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        if (predicate != null) return this.where(predicate).singleOrDefault(null, defaultValue);

        var value;
        var found = false;
        this.forEach(function (x) {
            if (!found) {
                found = true;
                value = x;
            } else throw new Error("single:sequence contains more than one element.");
        });

        return (!found) ? defaultValue : value;
    };

    Enumerable.prototype.skip = function (count) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var index = 0;

            return new IEnumerator(
                function () {
                    enumerator = source.getEnumerator();
                    while (index++ < count && enumerator.moveNext()) {
                    }
                    ;
                },
                function () {
                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.current())
                        : false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function(predicate<element>)
    // Overload:function(predicate<element,index>)
    Enumerable.prototype.skipWhile = function (predicate) {
        predicate = Utils.createLambda(predicate);
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var index = 0;
            var isSkipEnd = false;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    while (!isSkipEnd) {
                        if (enumerator.moveNext()) {
                            if (!predicate(enumerator.current(), index++)) {
                                isSkipEnd = true;
                                return this.yieldReturn(enumerator.current());
                            }
                            continue;
                        } else return false;
                    }

                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.current())
                        : false;

                },
                function () { Utils.dispose(enumerator); });
        });
    };

    Enumerable.prototype.take = function (count) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var index = 0;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    return (index++ < count && enumerator.moveNext())
                        ? this.yieldReturn(enumerator.current())
                        : false;
                },
                function () { Utils.dispose(enumerator); }
            );
        });
    };

    // Overload:function(predicate<element>)
    // Overload:function(predicate<element,index>)
    Enumerable.prototype.takeWhile = function (predicate) {
        predicate = Utils.createLambda(predicate);
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var index = 0;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    return (enumerator.moveNext() && predicate(enumerator.current(), index++))
                        ? this.yieldReturn(enumerator.current())
                        : false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function()
    // Overload:function(count)
    Enumerable.prototype.takeExceptLast = function (count) {
        if (count == null) count = 1;
        var source = this;

        return new Enumerable(function () {
            if (count <= 0) return source.getEnumerator(); // do nothing

            var enumerator;
            var q = [];

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    while (enumerator.moveNext()) {
                        if (q.length == count) {
                            q.push(enumerator.current());
                            return this.yieldReturn(q.shift());
                        }
                        q.push(enumerator.current());
                    }
                    return false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    Enumerable.prototype.takeFromLast = function (count) {
        if (count <= 0 || count == null) return Enumerable.empty();
        var source = this;

        return new Enumerable(function () {
            var sourceEnumerator;
            var enumerator;
            var q = [];

            return new IEnumerator(
                function () { sourceEnumerator = source.getEnumerator(); },
                function () {
                    while (sourceEnumerator.moveNext()) {
                        if (q.length == count) q.shift();
                        q.push(sourceEnumerator.current());
                    }
                    if (enumerator == null) {
                        enumerator = Enumerable.from(q).getEnumerator();
                    }
                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.current())
                        : false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function(item)
    // Overload:function(item, comparer)
    // Overload:function(predicate)
    Enumerable.prototype.indexOf = function (item, comparer) {
        var found = null;

        // item as predicate
        if (typeof (item) === Types.Function) {
            this.forEach(function (x, i) {
                if (item(x, i)) {
                    found = i;
                    return false;
                }
            });
        }
        else {
            comparer = comparer || ss.EqualityComparer.def;
            this.forEach(function (x, i) {
                if (comparer.areEqual(x, item)) {
                    found = i;
                    return false;
                }
            });
        }

        return (found !== null) ? found : -1;
    };

    // Overload:function(item)
    // Overload:function(item, comparer)
    // Overload:function(predicate)
    Enumerable.prototype.lastIndexOf = function (item, comparer) {
        var result = -1;

        // item as predicate
        if (typeof (item) === Types.Function) {
            this.forEach(function (x, i) {
                if (item(x, i)) result = i;
            });
        }
        else {
            comparer = comparer || ss.EqualityComparer.def;
            this.forEach(function (x, i) {
                if (comparer.areEqual(x, item)) result = i;
            });
        }

        return result;
    };

    /* Convert Methods */

    Enumerable.prototype.asEnumerable = function () {
        return Enumerable.from(this);
    };

    Enumerable.prototype.toArray = function () {
        var array = [];
        this.forEach(function (x) { array.push(x); });
        return array;
    };

    // Overload:function(keySelector)
    // Overload:function(keySelector, elementSelector)
    // Overload:function(keySelector, elementSelector, comparer)
    Enumerable.prototype.toLookup = function (keySelector, elementSelector, comparer) {
        keySelector = Utils.createLambda(keySelector);
        elementSelector = Utils.createLambda(elementSelector);

        var dict = new (ss.makeGenericType(ss.Dictionary$2, [Object, Object]))(null, comparer);
        var order = [];
        this.forEach(function (x) {
            var key = keySelector(x);
            var element = elementSelector(x);

            var array = { $: null };
            if (dict.tryGetValue(key, array)) {
                array.$.push(element);
            }
            else {
                order.push(key);
                dict.add(key, [element]);
            }
        });
        return new Lookup(dict, order);
    };

    Enumerable.prototype.toObject = function (keySelector, elementSelector) {
        keySelector = Utils.createLambda(keySelector);
        elementSelector = Utils.createLambda(elementSelector);

        var obj = {};
        this.forEach(function (x) {
            obj[keySelector(x)] = elementSelector(x);
        });
        return obj;
    };

    // Overload:function(keySelector, elementSelector, keyType, valueType)
    // Overload:function(keySelector, elementSelector, keyType, valueType, comparer)
    Enumerable.prototype.toDictionary = function (keySelector, elementSelector, keyType, valueType, comparer) {
        keySelector = Utils.createLambda(keySelector);
        elementSelector = Utils.createLambda(elementSelector);

        var dict = new (ss.makeGenericType(ss.Dictionary$2, [keyType, valueType]))(null, comparer);
        this.forEach(function (x) {
            dict.add(keySelector(x), elementSelector(x));
        });
        return dict;
    };

    // Overload:function()
    // Overload:function(replacer)
    // Overload:function(replacer, space)
    Enumerable.prototype.toJSONString = function (replacer, space) {
        if (typeof JSON === Types.Undefined || JSON.stringify == null) {
            throw new Error("toJSONString can't find JSON.stringify. This works native JSON support Browser or include json2.js");
        }
        return JSON.stringify(this.toArray(), replacer, space);
    };

    // Overload:function()
    // Overload:function(separator)
    // Overload:function(separator,selector)
    Enumerable.prototype.toJoinedString = function (separator, selector) {
        if (separator == null) separator = "";
        if (selector == null) selector = Functions.Identity;

        return this.select(selector).toArray().join(separator);
    };


    /* Action Methods */

    // Overload:function(action<element>)
    // Overload:function(action<element,index>)
    Enumerable.prototype.doAction = function (action) {
        var source = this;
        action = Utils.createLambda(action);

        return new Enumerable(function () {
            var enumerator;
            var index = 0;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    if (enumerator.moveNext()) {
                        action(enumerator.current(), index++);
                        return this.yieldReturn(enumerator.current());
                    }
                    return false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    // Overload:function(action<element>)
    // Overload:function(action<element,index>)
    // Overload:function(func<element,bool>)
    // Overload:function(func<element,index,bool>)
    Enumerable.prototype.forEach = function (action) {
        action = Utils.createLambda(action);

        var index = 0;
        var enumerator = this.getEnumerator();
        try {
            while (enumerator.moveNext()) {
                if (action(enumerator.current(), index++) === false) break;
            }
        } finally {
            Utils.dispose(enumerator);
        }
    };

    // Overload:function()
    // Overload:function(separator)
    // Overload:function(separator,selector)
    Enumerable.prototype.write = function (separator, selector) {
        if (separator == null) separator = "";
        selector = Utils.createLambda(selector);

        var isFirst = true;
        this.forEach(function (item) {
            if (isFirst) isFirst = false;
            else document.write(separator);
            document.write(selector(item));
        });
    };

    // Overload:function()
    // Overload:function(selector)
    Enumerable.prototype.writeLine = function (selector) {
        selector = Utils.createLambda(selector);

        this.forEach(function (item) {
            document.writeln(selector(item) + "<br />");
        });
    };

    Enumerable.prototype.force = function () {
        var enumerator = this.getEnumerator();

        try {
            while (enumerator.moveNext()) {
            }
        }
        finally {
            Utils.dispose(enumerator);
        }
    };

    /* Functional Methods */

    Enumerable.prototype.letBind = function (func) {
        func = Utils.createLambda(func);
        var source = this;

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () {
                    enumerator = Enumerable.from(func(source)).getEnumerator();
                },
                function () {
                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.current())
                        : false;
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    Enumerable.prototype.share = function () {
        var source = this;
        var sharedEnumerator;
        var disposed = false;

        return new DisposableEnumerable(function () {
            return new IEnumerator(
                function () {
                    if (sharedEnumerator == null) {
                        sharedEnumerator = source.getEnumerator();
                    }
                },
                function () {
                    if (disposed) throw new Error("enumerator is disposed");

                    return (sharedEnumerator.moveNext())
                        ? this.yieldReturn(sharedEnumerator.current())
                        : false;
                },
                Functions.Blank
            );
        }, function () {
            disposed = true;
            Utils.dispose(sharedEnumerator);
        });
    };

    Enumerable.prototype.memoize = function () {
        var source = this;
        var cache;
        var enumerator;
        var disposed = false;

        return new DisposableEnumerable(function () {
            var index = -1;

            return new IEnumerator(
                function () {
                    if (enumerator == null) {
                        enumerator = source.getEnumerator();
                        cache = [];
                    }
                },
                function () {
                    if (disposed) throw new Error("enumerator is disposed");

                    index++;
                    if (cache.length <= index) {
                        return (enumerator.moveNext())
                            ? this.yieldReturn(cache[index] = enumerator.current())
                            : false;
                    }

                    return this.yieldReturn(cache[index]);
                },
                Functions.Blank
            );
        }, function () {
            disposed = true;
            Utils.dispose(enumerator);
            cache = null;
        });
    };

    /* Error Handling Methods */

    Enumerable.prototype.catchError = function (handler) {
        handler = Utils.createLambda(handler);
        var source = this;

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    try {
                        return (enumerator.moveNext())
                            ? this.yieldReturn(enumerator.current())
                            : false;
                    } catch (e) {
                        handler(e);
                        return false;
                    }
                },
                function () { Utils.dispose(enumerator); });
        });
    };

    Enumerable.prototype.finallyAction = function (finallyAction) {
        finallyAction = Utils.createLambda(finallyAction);
        var source = this;

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () { enumerator = source.getEnumerator(); },
                function () {
                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.current())
                        : false;
                },
                function () {
                    try {
                        Utils.dispose(enumerator);
                    } finally {
                        finallyAction();
                    }
                });
        });
    };

    /* For Debug Methods */

    // Overload:function()
    // Overload:function(selector)
    Enumerable.prototype.log = function (selector) {
        selector = Utils.createLambda(selector);

        return this.doAction(function (item) {
            if (typeof console !== Types.Undefined) {
                console.log(selector(item));
            }
        });
    };

    // Overload:function()
    // Overload:function(message)
    // Overload:function(message,selector)
    Enumerable.prototype.trace = function (message, selector) {
        if (message == null) message = "Trace";
        selector = Utils.createLambda(selector);

        return this.doAction(function (item) {
            if (typeof console !== Types.Undefined) {
                console.log(message, selector(item));
            }
        });
    };

    // private

    var OrderedEnumerable = function (source, keySelector, comparer, descending, parent) {
        this.source = source;
        this.keySelector = Utils.createLambda(keySelector);
        this.comparer = comparer || ss.Comparer.def;
        this.descending = descending;
        this.parent = parent;
    };
    OrderedEnumerable.prototype = new Enumerable();

    OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, comparer, descending) {
        return new OrderedEnumerable(this.source, keySelector, comparer, descending, this);
    };
    OrderedEnumerable.prototype.thenBy = function (keySelector, comparer) {
        return this.createOrderedEnumerable(keySelector, comparer, false);
    };
    OrderedEnumerable.prototype.thenByDescending = function (keySelector, comparer) {
        return this.createOrderedEnumerable(keySelector, comparer, true);
    };
    OrderedEnumerable.prototype.getEnumerator = function () {
        var self = this;
        var buffer;
        var indexes;
        var index = 0;

        return new IEnumerator(
            function () {
                buffer = [];
                indexes = [];
                self.source.forEach(function (item, index) {
                    buffer.push(item);
                    indexes.push(index);
                });
                var sortContext = SortContext.create(self, null);
                sortContext.GenerateKeys(buffer);

                indexes.sort(function (a, b) { return sortContext.compare(a, b); });
            },
            function () {
                return (index < indexes.length)
                    ? this.yieldReturn(buffer[indexes[index++]])
                    : false;
            },
            Functions.Blank
        );
    };

    var SortContext = function (keySelector, comparer, descending, child) {
        this.keySelector = keySelector;
        this.comparer = comparer;
        this.descending = descending;
        this.child = child;
        this.keys = null;
    };
    SortContext.create = function (orderedEnumerable, currentContext) {
        var context = new SortContext(orderedEnumerable.keySelector, orderedEnumerable.comparer, orderedEnumerable.descending, currentContext);
        if (orderedEnumerable.parent != null) return SortContext.create(orderedEnumerable.parent, context);
        return context;
    };
    SortContext.prototype.GenerateKeys = function (source) {
        var len = source.length;
        var keySelector = this.keySelector;
        var keys = new Array(len);
        for (var i = 0; i < len; i++) keys[i] = keySelector(source[i]);
        this.keys = keys;

        if (this.child != null) this.child.GenerateKeys(source);
    };
    SortContext.prototype.compare = function (index1, index2) {
        var comparison = this.comparer.compare(this.keys[index1], this.keys[index2]);

        if (comparison == 0) {
            if (this.child != null) return this.child.compare(index1, index2);
            return Utils.compare(index1, index2);
        }

        return (this.descending) ? -comparison : comparison;
    };

    var DisposableEnumerable = function (getEnumerator, dispose) {
        this.dispose = dispose;
        Enumerable.call(this, getEnumerator);
    };
    DisposableEnumerable.prototype = new Enumerable();

    // optimize array or arraylike object

    var ArrayEnumerable = function (source) {
        this.getSource = function () { return source; };
    };
    ArrayEnumerable.prototype = new Enumerable();

    ArrayEnumerable.prototype.any = function (predicate) {
        return (predicate == null)
            ? (this.getSource().length > 0)
            : Enumerable.prototype.any.apply(this, arguments);
    };

    ArrayEnumerable.prototype.count = function (predicate) {
        return (predicate == null)
            ? this.getSource().length
            : Enumerable.prototype.count.apply(this, arguments);
    };

    ArrayEnumerable.prototype.elementAt = function (index) {
        var source = this.getSource();
        return (0 <= index && index < source.length)
            ? source[index]
            : Enumerable.prototype.elementAt.apply(this, arguments);
    };

    ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        var source = this.getSource();
        return (0 <= index && index < source.length)
            ? source[index]
            : defaultValue;
    };

    ArrayEnumerable.prototype.first = function (predicate) {
        var source = this.getSource();
        return (predicate == null && source.length > 0)
            ? source[0]
            : Enumerable.prototype.first.apply(this, arguments);
    };

    ArrayEnumerable.prototype.firstOrDefault = function (predicate, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        if (predicate != null) {
            return Enumerable.prototype.firstOrDefault.apply(this, arguments);
        }

        var source = this.getSource();
        return source.length > 0 ? source[0] : defaultValue;
    };

    ArrayEnumerable.prototype.last = function (predicate) {
        var source = this.getSource();
        return (predicate == null && source.length > 0)
            ? source[source.length - 1]
            : Enumerable.prototype.last.apply(this, arguments);
    };

    ArrayEnumerable.prototype.lastOrDefault = function (predicate, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        if (predicate != null) {
            return Enumerable.prototype.lastOrDefault.apply(this, arguments);
        }

        var source = this.getSource();
        return source.length > 0 ? source[source.length - 1] : defaultValue;
    };

    ArrayEnumerable.prototype.skip = function (count) {
        var source = this.getSource();

        return new Enumerable(function () {
            var index;

            return new IEnumerator(
                function () { index = (count < 0) ? 0 : count; },
                function () {
                    return (index < source.length)
                        ? this.yieldReturn(source[index++])
                        : false;
                },
                Functions.Blank);
        });
    };

    ArrayEnumerable.prototype.takeExceptLast = function (count) {
        if (count == null) count = 1;
        return this.take(this.getSource().length - count);
    };

    ArrayEnumerable.prototype.takeFromLast = function (count) {
        return this.skip(this.getSource().length - count);
    };

    ArrayEnumerable.prototype.reverse = function () {
        var source = this.getSource();

        return new Enumerable(function () {
            var index;

            return new IEnumerator(
                function () {
                    index = source.length;
                },
                function () {
                    return (index > 0)
                        ? this.yieldReturn(source[--index])
                        : false;
                },
                Functions.Blank);
        });
    };

    ArrayEnumerable.prototype.sequenceEqual = function (second, comparer) {
        if ((second instanceof ArrayEnumerable || second instanceof Array)
            && comparer == null
            && Enumerable.from(second).count() != this.count()) {
            return false;
        }

        return Enumerable.prototype.sequenceEqual.apply(this, arguments);
    };

    ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {
        var source = this.getSource();
        if (selector != null || !(source instanceof Array)) {
            return Enumerable.prototype.toJoinedString.apply(this, arguments);
        }

        if (separator == null) separator = "";
        return source.join(separator);
    };

    ArrayEnumerable.prototype.getEnumerator = function () {
        return new ss.ArrayEnumerator(this.getSource());
    };

    // optimization for multiple where and multiple select and whereselect

    var WhereEnumerable = function (source, predicate) {
        this.prevSource = source;
        this.prevPredicate = predicate; // predicate.length always <= 1
    };
    WhereEnumerable.prototype = new Enumerable();

    WhereEnumerable.prototype.where = function (predicate) {
        predicate = Utils.createLambda(predicate);

        if (predicate.length <= 1) {
            var prevPredicate = this.prevPredicate;
            var composedPredicate = function (x) { return prevPredicate(x) && predicate(x); };
            return new WhereEnumerable(this.prevSource, composedPredicate);
        }
        else {
            // if predicate use index, can't compose
            return Enumerable.prototype.where.call(this, predicate);
        }
    };

    WhereEnumerable.prototype.select = function (selector) {
        selector = Utils.createLambda(selector);

        return (selector.length <= 1)
            ? new WhereSelectEnumerable(this.prevSource, this.prevPredicate, selector)
            : Enumerable.prototype.select.call(this, selector);
    };

    WhereEnumerable.prototype.getEnumerator = function () {
        var predicate = this.prevPredicate;
        var source = this.prevSource;
        var enumerator;

        return new IEnumerator(
            function () { enumerator = source.getEnumerator(); },
            function () {
                while (enumerator.moveNext()) {
                    if (predicate(enumerator.current())) {
                        return this.yieldReturn(enumerator.current());
                    }
                }
                return false;
            },
            function () { Utils.dispose(enumerator); });
    };

    var WhereSelectEnumerable = function (source, predicate, selector) {
        this.prevSource = source;
        this.prevPredicate = predicate; // predicate.length always <= 1 or null
        this.prevSelector = selector; // selector.length always <= 1
    };
    WhereSelectEnumerable.prototype = new Enumerable();

    WhereSelectEnumerable.prototype.where = function (predicate) {
        predicate = Utils.createLambda(predicate);

        return (predicate.length <= 1)
            ? new WhereEnumerable(this, predicate)
            : Enumerable.prototype.where.call(this, predicate);
    };

    WhereSelectEnumerable.prototype.select = function (selector) {
        selector = Utils.createLambda(selector);

        if (selector.length <= 1) {
            var prevSelector = this.prevSelector;
            var composedSelector = function (x) { return selector(prevSelector(x)); };
            return new WhereSelectEnumerable(this.prevSource, this.prevPredicate, composedSelector);
        }
        else {
            // if selector use index, can't compose
            return Enumerable.prototype.select.call(this, selector);
        }
    };

    WhereSelectEnumerable.prototype.getEnumerator = function () {
        var predicate = this.prevPredicate;
        var selector = this.prevSelector;
        var source = this.prevSource;
        var enumerator;

        return new IEnumerator(
            function () { enumerator = source.getEnumerator(); },
            function () {
                while (enumerator.moveNext()) {
                    if (predicate == null || predicate(enumerator.current())) {
                        return this.yieldReturn(selector(enumerator.current()));
                    }
                }
                return false;
            },
            function () { Utils.dispose(enumerator); });
    };

    // Collections

    // dictionary = Dictionary<TKey, TValue[]>
    var Lookup = function (dictionary, order) {
        this.count = function () {
            return dictionary.get_count();
        };
        this.get = function (key) {
            var value = { $: null };
            var success = dictionary.tryGetValue(key, value);
            return Enumerable.from(success ? value.$ : []);
        };
        this.contains = function (key) {
            return dictionary.containsKey(key);
        };
        this.toEnumerable = function () {
            return Enumerable.from(order).select(function (key) {
                return new Grouping(key, dictionary.get_item(key));
            });
        };
        this.getEnumerator = function () {
            return this.toEnumerable().getEnumerator();
        };
    };
    ss.initClass(Lookup, $asm, {}, null, [ss.IEnumerable]);

    var Grouping = function (groupKey, elements) {
        this.key = function () {
            return groupKey;
        };
        ArrayEnumerable.call(this, elements);
    };
    Grouping.prototype = new ArrayEnumerable();

    // module export
    if (typeof define === Types.Function && define.amd) { // AMD
        define("linqjs", [], function () { return Enumerable; });
        root.Enumerable = Enumerable;
    }
    else if (typeof module !== Types.Undefined && module.exports) { // Node
        module.exports = Enumerable;
        global.Enumerable = Enumerable;
    }
    else {
        root.Enumerable = Enumerable;
    }
})(this);


// Script: opentype.js
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.opentype=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){

},{}],2:[function(_dereq_,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],3:[function(_dereq_,module,exports){
// Run-time checking of preconditions.

'use strict';

// Precondition function that checks if the given predicate is true.
// If not, it will log an error message to the console.
exports.argument = function (predicate, message) {
    if (!predicate) {
        throw new Error(message);
    }
};

},{}],4:[function(_dereq_,module,exports){
// Drawing utility functions.

'use strict';

// Draw a line on the given context from point `x1,y1` to point `x2,y2`.
function line(ctx, x1, y1, x2, y2) {
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
}

exports.line = line;

},{}],5:[function(_dereq_,module,exports){
// Glyph encoding

'use strict';

var cffStandardStrings = [
    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',
    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',
    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',
    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',
    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',
    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',
    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',
    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',
    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',
    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',
    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',
    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',
    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',
    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',
    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',
    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',
    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',
    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',
    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',
    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',
    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',
    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',
    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',
    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',
    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',
    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',
    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',
    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',
    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',
    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',
    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',
    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',
    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',
    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];

var cffStandardEncoding = [
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',
    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',
    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',
    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',
    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',
    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',
    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',
    'lslash', 'oslash', 'oe', 'germandbls'];

var cffExpertEncoding = [
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',
    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',
    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',
    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',
    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',
    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',
    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',
    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',
    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',
    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',
    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',
    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',
    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',
    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',
    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',
    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',
    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',
    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',
    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',
    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

var standardNames = [
    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',
    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',
    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',
    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',
    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',
    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',
    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',
    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',
    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',
    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',
    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',
    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',
    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',
    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',
    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',
    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',
    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',
    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',
    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',
    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',
    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',
    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',
    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

function CmapEncoding(cmap) {
    this.cmap = cmap;
}

CmapEncoding.prototype.charToGlyphIndex = function (s) {
    var ranges, code, l, c, r;
    ranges = this.cmap;
    code = s.charCodeAt(0);
    l = 0;
    r = ranges.length - 1;
    while (l < r) {
        c = (l + r + 1) >> 1;
        if (code < ranges[c].start) {
            r = c - 1;
        } else {
            l = c;
        }
    }
    if (ranges[l].start <= code && code <= ranges[l].end) {
        return (ranges[l].idDelta + (ranges[l].ids ? ranges[l].ids[code - ranges[l].start] : code)) & 0xFFFF;
    }
    return 0;
};

function CffEncoding(encoding, charset) {
    this.encoding = encoding;
    this.charset = charset;
}

CffEncoding.prototype.charToGlyphIndex = function (s) {
    var code, charName;
    code = s.charCodeAt(0);
    charName = this.encoding[code];
    return this.charset.indexOf(charName);
};

function GlyphNames(post) {
    var i;
    switch (post.version) {
    case 1:
        this.names = exports.standardNames.slice();
        break;
    case 2:
        this.names = new Array(post.numberOfGlyphs);
        for (i = 0; i < post.numberOfGlyphs; i++) {
            if (post.glyphNameIndex[i] < exports.standardNames.length) {
                this.names[i] = exports.standardNames[post.glyphNameIndex[i]];
            } else {
                this.names[i] = post.names[post.glyphNameIndex[i] - exports.standardNames.length];
            }
        }
        break;
    case 2.5:
        this.names = new Array(post.numberOfGlyphs);
        for (i = 0; i < post.numberOfGlyphs; i++) {
            this.names[i] = exports.standardNames[i + post.glyphNameIndex[i]];
        }
        break;
    }
}

GlyphNames.prototype.nameToGlyphIndex = function (name) {
    return this.names.indexOf(name);
};

GlyphNames.prototype.glyphIndexToName = function (gid) {
    return this.names[gid];
};

exports.cffStandardStrings = cffStandardStrings;
exports.cffStandardEncoding = cffStandardEncoding;
exports.cffExpertEncoding = cffExpertEncoding;
exports.standardNames = standardNames;
exports.CmapEncoding = CmapEncoding;
exports.CffEncoding = CffEncoding;
exports.GlyphNames = GlyphNames;

},{}],6:[function(_dereq_,module,exports){
// The Font object

'use strict';

var path = _dereq_('./path');

// A Font represents a loaded OpenType font file.
// It contains a set of glyphs and methods to draw text on a drawing context,
// or to get a path representing the text.
function Font() {
    this.supported = true;
    this.glyphs = [];
    this.encoding = null;
    this.tables = {};
}

// Convert the given character to a single glyph index.
// Note that this function assumes that there is a one-to-one mapping between
// the given character and a glyph; for complex scripts this might not be the case.
Font.prototype.charToGlyphIndex = function (s) {
    return this.encoding.charToGlyphIndex(s);
};

// Convert the given character to a single Glyph object.
// Note that this function assumes that there is a one-to-one mapping between
// the given character and a glyph; for complex scripts this might not be the case.
Font.prototype.charToGlyph = function (c) {
    var glyphIndex, glyph;
    glyphIndex = this.charToGlyphIndex(c);
    glyph = this.glyphs[glyphIndex];
    if (!glyph) {
        glyph = this.glyphs[0]; // .notdef
    }
    return glyph;
};

// Convert the given text to a list of Glyph objects.
// Note that there is no strict one-to-one mapping between characters and
// glyphs, so the list of returned glyphs can be larger or smaller than the
// length of the given string.
Font.prototype.stringToGlyphs = function (s) {
    var i, c, glyphs;
    glyphs = [];
    for (i = 0; i < s.length; i += 1) {
        c = s[i];
        glyphs.push(this.charToGlyph(c));
    }
    return glyphs;
};

Font.prototype.nameToGlyphIndex = function (name) {
    return this.glyphNames.nameToGlyphIndex(name);
};

Font.prototype.nameToGlyph = function (name) {
    var glyphIndex, glyph;
    glyphIndex = this.nametoGlyphIndex(name);
    glyph = this.glyphs[glyphIndex];
    if (!glyph) {
        glyph = this.glyphs[0]; // .notdef
    }
    return glyph;
};

Font.prototype.glyphIndexToName = function (gid) {
    if (!this.glyphNames.glyphIndexToName) {
        return '';
    }
    return this.glyphNames.glyphIndexToName(gid);
};

// Retrieve the value of the kerning pair between the left glyph (or its index)
// and the right glyph (or its index). If no kerning pair is found, return 0.
// The kerning value gets added to the advance width when calculating the spacing
// between glyphs.
Font.prototype.getKerningValue = function (leftGlyph, rightGlyph) {
    leftGlyph = leftGlyph.index || leftGlyph;
    rightGlyph = rightGlyph.index || rightGlyph;
    var gposKerning = this.getGposKerningValue;
    return gposKerning ? gposKerning(leftGlyph, rightGlyph) :
        (this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0);
};

// Helper function that invokes the given callback for each glyph in the given text.
// The callback gets `(glyph, x, y, fontSize, options)`.
Font.prototype.forEachGlyph = function (text, x, y, fontSize, options, callback) {
    var kerning, fontScale, glyphs, i, glyph, kerningValue;
    if (!this.supported) {
        return;
    }
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 72;
    options = options || {};
    kerning = options.kerning === undefined ? true : options.kerning;
    fontScale = 1 / this.unitsPerEm * fontSize;
    glyphs = this.stringToGlyphs(text);
    for (i = 0; i < glyphs.length; i += 1) {
        glyph = glyphs[i];
        callback(glyph, x, y, fontSize, options);
        if (glyph.advanceWidth) {
            x += glyph.advanceWidth * fontScale;
        }
        if (kerning && i < glyphs.length - 1) {
            kerningValue = this.getKerningValue(glyph, glyphs[i + 1]);
            x += kerningValue * fontScale;
        }
    }
};

// Create a Path object that represents the given text.
//
// text - The text to create.
// x - Horizontal position of the beginning of the text. (default: 0)
// y - Vertical position of the *baseline* of the text. (default: 0)
// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
// Options is an optional object that contains:
// - kerning - Whether to take kerning information into account. (default: true)
//
// Returns a Path object.
Font.prototype.getPath = function (text, x, y, fontSize, options) {
    var fullPath = new path.Path();
    this.forEachGlyph(text, x, y, fontSize, options, function (glyph, x, y, fontSize) {
        var path = glyph.getPath(x, y, fontSize);
        fullPath.extend(path);
    });
    return fullPath;
};

// Draw the text on the given drawing context.
//
// ctx - A 2D drawing context, like Canvas.
// text - The text to create.
// x - Horizontal position of the beginning of the text. (default: 0)
// y - Vertical position of the *baseline* of the text. (default: 0)
// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
// Options is an optional object that contains:
// - kerning - Whether to take kerning information into account. (default: true)
Font.prototype.draw = function (ctx, text, x, y, fontSize, options) {
    this.getPath(text, x, y, fontSize, options).draw(ctx);
};

// Draw the points of all glyphs in the text.
// On-curve points will be drawn in blue, off-curve points will be drawn in red.
//
// ctx - A 2D drawing context, like Canvas.
// text - The text to create.
// x - Horizontal position of the beginning of the text. (default: 0)
// y - Vertical position of the *baseline* of the text. (default: 0)
// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
// Options is an optional object that contains:
// - kerning - Whether to take kerning information into account. (default: true)
Font.prototype.drawPoints = function (ctx, text, x, y, fontSize, options) {
    this.forEachGlyph(text, x, y, fontSize, options, function (glyph, x, y, fontSize) {
        glyph.drawPoints(ctx, x, y, fontSize);
    });
};

// Draw lines indicating important font measurements for all glyphs in the text.
// Black lines indicate the origin of the coordinate system (point 0,0).
// Blue lines indicate the glyph bounding box.
// Green line indicates the advance width of the glyph.
//
// ctx - A 2D drawing context, like Canvas.
// text - The text to create.
// x - Horizontal position of the beginning of the text. (default: 0)
// y - Vertical position of the *baseline* of the text. (default: 0)
// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
// Options is an optional object that contains:
// - kerning - Whether to take kerning information into account. (default: true)
Font.prototype.drawMetrics = function (ctx, text, x, y, fontSize, options) {
    this.forEachGlyph(text, x, y, fontSize, options, function (glyph, x, y, fontSize) {
        glyph.drawMetrics(ctx, x, y, fontSize);
    });
};

exports.Font = Font;

},{"./path":10}],7:[function(_dereq_,module,exports){
// The Glyph object

'use strict';

var check = _dereq_('./check');
var draw = _dereq_('./draw');
var path = _dereq_('./path');

// A Glyph is an individual mark that often corresponds to a character.
// Some glyphs, such as ligatures, are a combination of many characters.
// Glyphs are the basic building blocks of a fonth.
//
// The `Glyph` class contains utility methods for drawing the path and its points.
function Glyph(options) {
    this.font = options.font || null;
    this.index = options.index || 0;
    this.xMin = options.xMin || 0;
    this.yMin = options.yMin || 0;
    this.xMax = options.xMax || 0;
    this.yMax = options.yMax || 0;
    this.advanceWidth = options.advanceWidth || 0;
    this.path = options.path || null;
}

// Convert the glyph to a Path we can draw on a drawing context.
//
// x - Horizontal position of the glyph. (default: 0)
// y - Vertical position of the *baseline* of the glyph. (default: 0)
// fontSize - Font size, in pixels (default: 72).
Glyph.prototype.getPath = function (x, y, fontSize) {
    var scale, p, commands, cmd;
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 72;
    scale = 1 / this.font.unitsPerEm * fontSize;
    p = new path.Path();
    commands = this.path.commands;
    for (var i = 0; i < commands.length; i += 1) {
        cmd = commands[i];
        if (cmd.type === 'M') {
            p.moveTo(x + (cmd.x * scale), y + (cmd.y * scale));
        } else if (cmd.type === 'L') {
            p.lineTo(x + (cmd.x * scale), y + (cmd.y * scale));
        } else if (cmd.type === 'Q') {
            p.quadraticCurveTo(x + (cmd.x1 * scale), y + (cmd.y1 * scale),
                               x + (cmd.x * scale), y + (cmd.y * scale));
        } else if (cmd.type === 'C') {
            p.curveTo(x + (cmd.x1 * scale), y + (cmd.y1 * scale),
                      x + (cmd.x2 * scale), y + (cmd.y2 * scale),
                      x + (cmd.x * scale), y + (cmd.y * scale));
        } else if (cmd.type === 'Z') {
            p.closePath();
        }
    }
    return p;
};

// Split the glyph into contours.
// This function is here for backwards compatibility, and to
// provide raw access to the TrueType glyph outlines.
Glyph.prototype.getContours = function () {
    var contours, currentContour, i, pt;
    if (this.points === undefined) {
        return [];
    }
    contours = [];
    currentContour = [];
    for (i = 0; i < this.points.length; i += 1) {
        pt = this.points[i];
        currentContour.push(pt);
        if (pt.lastPointOfContour) {
            contours.push(currentContour);
            currentContour = [];
        }
    }
    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
    return contours;
};

// Draw the glyph on the given context.
//
// ctx - The drawing context.
// x - Horizontal position of the glyph. (default: 0)
// y - Vertical position of the *baseline* of the glyph. (default: 0)
// fontSize - Font size, in pixels (default: 72).
Glyph.prototype.draw = function (ctx, x, y, fontSize) {
    this.getPath(x, y, fontSize).draw(ctx);
};

// Draw the points of the glyph.
// On-curve points will be drawn in blue, off-curve points will be drawn in red.
//
// ctx - The drawing context.
// x - Horizontal position of the glyph. (default: 0)
// y - Vertical position of the *baseline* of the glyph. (default: 0)
// fontSize - Font size, in pixels (default: 72).
Glyph.prototype.drawPoints = function (ctx, x, y, fontSize) {

    function drawCircles(l, x, y, scale) {
        var j, PI_SQ = Math.PI * 2;
        ctx.beginPath();
        for (j = 0; j < l.length; j += 1) {
            ctx.moveTo(x + (l[j].x * scale), y + (-l[j].y * scale));
            ctx.arc(x + (l[j].x * scale), y + (-l[j].y * scale), 2, 0, PI_SQ, false);
        }
        ctx.closePath();
        ctx.fill();
    }

    var scale, i, blueCircles, redCircles, path, cmd;
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 24;
    scale = 1 / this.font.unitsPerEm * fontSize;

    blueCircles = [];
    redCircles = [];
    path = this.path;
    for (i = 0; i < path.commands.length; i += 1) {
        cmd = path.commands[i];
        if (cmd.x !== undefined) {
            blueCircles.push({x: cmd.x, y: -cmd.y});
        }
        if (cmd.x1 !== undefined) {
            redCircles.push({x: cmd.x1, y: -cmd.y1});
        }
        if (cmd.x2 !== undefined) {
            redCircles.push({x: cmd.x2, y: -cmd.y2});
        }
    }

    ctx.fillStyle = 'blue';
    drawCircles(blueCircles, x, y, scale);
    ctx.fillStyle = 'red';
    drawCircles(redCircles, x, y, scale);
};

// Draw lines indicating important font measurements.
// Black lines indicate the origin of the coordinate system (point 0,0).
// Blue lines indicate the glyph bounding box.
// Green line indicates the advance width of the glyph.
//
// ctx - The drawing context.
// x - Horizontal position of the glyph. (default: 0)
// y - Vertical position of the *baseline* of the glyph. (default: 0)
// fontSize - Font size, in pixels (default: 72).
Glyph.prototype.drawMetrics = function (ctx, x, y, fontSize) {
    var scale;
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 24;
    scale = 1 / this.font.unitsPerEm * fontSize;
    ctx.lineWidth = 1;
    // Draw the origin
    ctx.strokeStyle = 'black';
    draw.line(ctx, x, -10000, x, 10000);
    draw.line(ctx, -10000, y, 10000, y);
    // Draw the glyph box
    ctx.strokeStyle = 'blue';
    draw.line(ctx, x + (this.xMin * scale), -10000, x + (this.xMin * scale), 10000);
    draw.line(ctx, x + (this.xMax * scale), -10000, x + (this.xMax * scale), 10000);
    draw.line(ctx, -10000, y + (-this.yMin * scale), 10000, y + (-this.yMin * scale));
    draw.line(ctx, -10000, y + (-this.yMax * scale), 10000, y + (-this.yMax * scale));
    // Draw the advance width
    ctx.strokeStyle = 'green';
    draw.line(ctx, x + (this.advanceWidth * scale), -10000, x + (this.advanceWidth * scale), 10000);
};

exports.Glyph = Glyph;

},{"./check":3,"./draw":4,"./path":10}],8:[function(_dereq_,module,exports){
(function (process){
// opentype.js
// https://github.com/nodebox/opentype.js
// (c) 2014 Frederik De Bleser
// opentype.js may be freely distributed under the MIT license.

/* global ArrayBuffer, DataView, Uint8Array, XMLHttpRequest  */

'use strict';

var encoding = _dereq_('./encoding');
var _font = _dereq_('./font');
var parse = _dereq_('./parse');

var cmap = _dereq_('./tables/cmap');
var cff = _dereq_('./tables/cff');
var glyf = _dereq_('./tables/glyf');
var gpos = _dereq_('./tables/gpos');
var head = _dereq_('./tables/head');
var hhea = _dereq_('./tables/hhea');
var hmtx = _dereq_('./tables/hmtx');
var kern = _dereq_('./tables/kern');
var loca = _dereq_('./tables/loca');
var maxp = _dereq_('./tables/maxp');
var nameTable = _dereq_('./tables/name');
var os2 = _dereq_('./tables/os2');
var post = _dereq_('./tables/post');

// File loaders /////////////////////////////////////////////////////////

// Convert a Node.js Buffer to an ArrayBuffer
function toArrayBuffer(buffer) {
    var i,
        arrayBuffer = new ArrayBuffer(buffer.length),
        data = new Uint8Array(arrayBuffer);

    for (i = 0; i < buffer.length; i += 1) {
        data[i] = buffer[i];
    }

    return arrayBuffer;
}

function loadFromFile(path, callback) {
    var fs = _dereq_('fs');
    fs.readFile(path, function (err, buffer) {
        if (err) {
            return callback(err.message);
        }

        callback(null, toArrayBuffer(buffer));
    });
}

function loadFromUrl(url, callback) {
    var request = new XMLHttpRequest();
    request.open('get', url, true);
    request.responseType = 'arraybuffer';
    request.onload = function () {
        if (request.status !== 200) {
            return callback('Font could not be loaded: ' + request.statusText);
        }
        return callback(null, request.response);
    };
    request.send();
}

// Public API ///////////////////////////////////////////////////////////

// Parse the OpenType file data (as an ArrayBuffer) and return a Font object.
// If the file could not be parsed (most likely because it contains Postscript outlines)
// we return an empty Font object with the `supported` flag set to `false`.
function parseBuffer(buffer) {
    var font, data, version, numTables, i, p, tag, offset, hmtxOffset, glyfOffset, locaOffset,
        cffOffset, kernOffset, gposOffset, indexToLocFormat, numGlyphs, locaTable,
        shortVersion;
    // OpenType fonts use big endian byte ordering.
    // We can't rely on typed array view types, because they operate with the endianness of the host computer.
    // Instead we use DataViews where we can specify endianness.

    font = new _font.Font();
    data = new DataView(buffer, 0);

    version = parse.getFixed(data, 0);
    if (version === 1.0) {
        font.outlinesFormat = 'truetype';
    } else {
        version = parse.getTag(data, 0);
        if (version === 'OTTO') {
            font.outlinesFormat = 'cff';
        } else {
            throw new Error('Unsupported OpenType version ' + version);
        }
    }

    numTables = parse.getUShort(data, 4);

    // Offset into the table records.
    p = 12;
    for (i = 0; i < numTables; i += 1) {
        tag = parse.getTag(data, p);
        offset = parse.getULong(data, p + 8);
        switch (tag) {
        case 'cmap':
            font.tables.cmap = cmap.parse(data, offset);
            font.encoding = new encoding.CmapEncoding(font.tables.cmap.segments);
            if (!font.encoding) {
                font.supported = false;
            }
            break;
        case 'head':
            font.tables.head = head.parse(data, offset);
            font.unitsPerEm = font.tables.head.unitsPerEm;
            indexToLocFormat = font.tables.head.indexToLocFormat;
            break;
        case 'hhea':
            font.tables.hhea = hhea.parse(data, offset);
            font.ascender = font.tables.hhea.ascender;
            font.descender = font.tables.hhea.descender;
            font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;
            break;
        case 'hmtx':
            hmtxOffset = offset;
            break;
        case 'maxp':
            font.tables.maxp = maxp.parse(data, offset);
            font.numGlyphs = numGlyphs = font.tables.maxp.numGlyphs;
            break;
        case 'name':
             font.tables.name = nameTable.parse(data, offset);
            break;
        case 'OS/2':
            font.tables.os2 = os2.parse(data, offset);
            break;
        case 'post':
            font.tables.post = post.parse(data, offset);
            font.glyphNames = new encoding.GlyphNames(font.tables.post);
            break;
        case 'glyf':
            glyfOffset = offset;
            break;
        case 'loca':
            locaOffset = offset;
            break;
        case 'CFF ':
            cffOffset = offset;
            break;
        case 'kern':
            kernOffset = offset;
            break;
        case 'GPOS':
            gposOffset = offset;
            break;
        }
        p += 16;
    }

    if (glyfOffset && locaOffset) {
        shortVersion = indexToLocFormat === 0;
        locaTable = loca.parse(data, locaOffset, numGlyphs, shortVersion);
        font.glyphs = glyf.parse(data, glyfOffset, locaTable, font);
        hmtx.parse(data, hmtxOffset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);
    } else if (cffOffset) {
        cff.parse(data, cffOffset, font);
    } else {
        font.supported = false;
    }

    if (font.supported) {
        if (kernOffset) {
            font.kerningPairs = kern.parse(data, kernOffset);
        } else {
            font.kerningPairs = {};
        }
        if (gposOffset) {
            gpos.parse(data, gposOffset, font);
        }
    }

    return font;
}

// Asynchronously load the font from a URL or a filesystem. When done, call the callback
// with two arguments `(err, font)`. The `err` will be null on success,
// the `font` is a Font object.
//
// We use the node.js callback convention so that
// opentype.js can integrate with frameworks like async.js.
function load(url, callback) {
    var loader = typeof process === 'undefined' || !process.browser ? loadFromFile : loadFromUrl;
    loader(url, function (err, arrayBuffer) {
        if (err) {
            return callback(err);
        }
        var font = parseBuffer(arrayBuffer);
        if (!font.supported) {
            return callback('Font is not supported (is this a Postscript font?)');
        }
        return callback(null, font);
    });
}

exports.parse = parseBuffer;
exports.load = load;

}).call(this,_dereq_("FWaASH"))
},{"./encoding":5,"./font":6,"./parse":9,"./tables/cff":11,"./tables/cmap":12,"./tables/glyf":13,"./tables/gpos":14,"./tables/head":15,"./tables/hhea":16,"./tables/hmtx":17,"./tables/kern":18,"./tables/loca":19,"./tables/maxp":20,"./tables/name":21,"./tables/os2":22,"./tables/post":23,"FWaASH":2,"fs":1}],9:[function(_dereq_,module,exports){
// Parsing utility functions

'use strict';

// Retrieve an unsigned byte from the DataView.
exports.getByte = function getByte(dataView, offset) {
    return dataView.getUint8(offset);
};

exports.getCard8 = exports.getByte;

// Retrieve an unsigned 16-bit short from the DataView.
// The value is stored in big endian.
exports.getUShort = function (dataView, offset) {
    return dataView.getUint16(offset, false);
};

exports.getCard16 = exports.getUShort;

// Retrieve a signed 16-bit short from the DataView.
// The value is stored in big endian.
exports.getShort = function (dataView, offset) {
    return dataView.getInt16(offset, false);
};

// Retrieve an unsigned 32-bit long from the DataView.
// The value is stored in big endian.
exports.getULong = function (dataView, offset) {
    return dataView.getUint32(offset, false);
};

// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
// The value is stored in big endian.
exports.getFixed = function (dataView, offset) {
    var decimal, fraction;
    decimal = dataView.getInt16(offset, false);
    fraction = dataView.getUint16(offset + 2, false);
    return decimal + fraction / 65535;
};

// Retrieve a 4-character tag from the DataView.
// Tags are used to identify tables.
exports.getTag = function (dataView, offset) {
    var tag = '', i;
    for (i = offset; i < offset + 4; i += 1) {
        tag += String.fromCharCode(dataView.getInt8(i));
    }
    return tag;
};

// Retrieve an offset from the DataView.
// Offsets are 1 to 4 bytes in length, depending on the offSize argument.
exports.getOffset = function (dataView, offset, offSize) {
    var i, v;
    v = 0;
    for (i = 0; i < offSize; i += 1) {
        v <<= 8;
        v += dataView.getUint8(offset + i);
    }
    return v;
};

// Retrieve a number of bytes from start offset to the end offset from the DataView.
exports.getBytes = function (dataView, startOffset, endOffset) {
    var bytes, i;
    bytes = [];
    for (i = startOffset; i < endOffset; i += 1) {
        bytes.push(dataView.getUint8(i));
    }
    return bytes;
};

// Convert the list of bytes to a string.
exports.bytesToString = function (bytes) {
    var s, i;
    s = '';
    for (i = 0; i < bytes.length; i += 1) {
        s += String.fromCharCode(bytes[i]);
    }
    return s;
};

var typeOffsets = {
    byte: 1,
    uShort: 2,
    short: 2,
    uLong: 4,
    fixed: 4,
    longDateTime: 8,
    tag: 4
};

// A stateful parser that changes the offset whenever a value is retrieved.
// The data is a DataView.
function Parser(data, offset) {
    this.data = data;
    this.offset = offset;
    this.relativeOffset = 0;
}

Parser.prototype.parseByte = function () {
    var v = this.data.getUint8(this.offset + this.relativeOffset);
    this.relativeOffset += 1;
    return v;
};

Parser.prototype.parseChar = function () {
    var v = this.data.getInt8(this.offset + this.relativeOffset);
    this.relativeOffset += 1;
    return v;
};

Parser.prototype.parseCard8 = Parser.prototype.parseByte;

Parser.prototype.parseUShort = function () {
    var v = this.data.getUint16(this.offset + this.relativeOffset);
    this.relativeOffset += 2;
    return v;
};
Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
Parser.prototype.parseSID = Parser.prototype.parseUShort;
Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;

Parser.prototype.parseShort = function () {
    var v = this.data.getInt16(this.offset + this.relativeOffset);
    this.relativeOffset += 2;
    return v;
};

Parser.prototype.parseF2Dot14 = function () {
    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
    this.relativeOffset += 2;
    return v;
};

Parser.prototype.parseULong = function () {
    var v = exports.getULong(this.data, this.offset + this.relativeOffset);
    this.relativeOffset += 4;
    return v;
};

Parser.prototype.parseFixed = function () {
    var v = exports.getFixed(this.data, this.offset + this.relativeOffset);
    this.relativeOffset += 4;
    return v;
};

Parser.prototype.parseOffset16List =
Parser.prototype.parseUShortList = function (count) {
    var offsets = new Array(count),
        dataView = this.data,
        offset = this.offset + this.relativeOffset;
    for (var i = 0; i < count; i++) {
        offsets[i] = exports.getUShort(dataView, offset);
        offset += 2;
    }
    this.relativeOffset += count * 2;
    return offsets;
};

Parser.prototype.parseString = function (length) {
    var dataView = this.data,
        offset = this.offset + this.relativeOffset,
        string = '';
    this.relativeOffset += length;
    for (var i = 0; i < length; i++) {
        string += String.fromCharCode(dataView.getUint8(offset + i));
    }
    return string;
};

Parser.prototype.parseTag = function () {
    return this.parseString(4);
};

// LONGDATETIME is a 64-bit integer.
// JavaScript and unix timestamps traditionally use 32 bits, so we
// only take the last 32 bits.
Parser.prototype.parseLongDateTime = function() {
    var v = exports.getULong(this.data, this.offset + this.relativeOffset + 4);
    this.relativeOffset += 8;
    return v;
};

Parser.prototype.parseFixed = function() {
    var v = exports.getULong(this.data, this.offset + this.relativeOffset);
    this.relativeOffset += 4;
    return v / 65536;
};

Parser.prototype.parseVersion = function() {
    var major = exports.getUShort(this.data, this.offset + this.relativeOffset);
    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
    // This returns the correct number if minor = 0xN000 where N is 0-9
    var minor = exports.getUShort(this.data, this.offset + this.relativeOffset + 2);
    this.relativeOffset += 4;
    return major + minor / 0x1000 / 10;
};

Parser.prototype.skip = function (type, amount) {
    if (amount === undefined) {
        amount = 1;
    }
    this.relativeOffset += typeOffsets[type] * amount;
};

exports.Parser = Parser;

},{}],10:[function(_dereq_,module,exports){
// Geometric objects

'use strict';

// A bézier path containing a set of path commands similar to a SVG path.
// Paths can be drawn on a context using `draw`.
function Path() {
    this.commands = [];
    this.fill = 'black';
    this.stroke = null;
    this.strokeWidth = 1;
}

Path.prototype.moveTo = function (x, y) {
    this.commands.push({type: 'M', x: x, y: y});
};

Path.prototype.lineTo = function (x, y) {
    this.commands.push({type: 'L', x: x, y: y});
};

Path.prototype.curveTo = Path.prototype.bezierCurveTo = function (x1, y1, x2, y2, x, y) {
    this.commands.push({type: 'C', x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y});
};

Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function (x1, y1, x, y) {
    this.commands.push({type: 'Q', x1: x1, y1: y1, x: x, y: y});
};

Path.prototype.close = Path.prototype.closePath = function () {
    this.commands.push({type: 'Z'});
};

// Add the given path or list of commands to the commands of this path.
Path.prototype.extend = function (pathOrCommands) {
    if (pathOrCommands.commands) {
        pathOrCommands = pathOrCommands.commands;
    }
    Array.prototype.push.apply(this.commands, pathOrCommands);
};

// Draw the path to a 2D context.
Path.prototype.draw = function (ctx) {
    var i, cmd;
    ctx.beginPath();
    for (i = 0; i < this.commands.length; i += 1) {
        cmd = this.commands[i];
        if (cmd.type === 'M') {
            ctx.moveTo(cmd.x, cmd.y);
        } else if (cmd.type === 'L') {
            ctx.lineTo(cmd.x, cmd.y);
        } else if (cmd.type === 'C') {
            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
        } else if (cmd.type === 'Q') {
            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
        } else if (cmd.type === 'Z') {
            ctx.closePath();
        }
    }
    if (this.fill) {
        ctx.fillStyle = this.fill;
        ctx.fill();
    }
    if (this.stroke) {
        ctx.strokeStyle = this.stroke;
        ctx.lineWidth = this.strokeWidth;
        ctx.stroke();
    }
};

exports.Path = Path;

},{}],11:[function(_dereq_,module,exports){
// The `CFF` table contains the glyph outlines in PostScript format.
// https://www.microsoft.com/typography/OTSPEC/cff.htm
// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/cff.pdf
// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/type2.pdf

'use strict';

var encoding = _dereq_('../encoding');
var _glyph = _dereq_('../glyph');
var parse = _dereq_('../parse');
var path = _dereq_('../path');

// Parse a `CFF` INDEX array.
// An index array consists of a list of offsets, then a list of objects at those offsets.
function parseCFFIndex(data, start, conversionFn) {
    var offsets, objects, count, endOffset, offsetSize, objectOffset, pos, i, value;
    offsets = [];
    objects = [];
    count = parse.getCard16(data, start);
    if (count !== 0) {
        offsetSize = parse.getByte(data, start + 2);
        objectOffset = start + ((count + 1) * offsetSize) + 2;
        pos = start + 3;
        for (i = 0; i < count + 1; i += 1) {
            offsets.push(parse.getOffset(data, pos, offsetSize));
            pos += offsetSize;
        }
        // The total size of the index array is 4 header bytes + the value of the last offset.
        endOffset = objectOffset + offsets[count];
    } else {
        endOffset = start + 2;
    }
    for (i = 0; i < offsets.length - 1; i += 1) {
        value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);
        if (conversionFn) {
            value = conversionFn(value);
        }
        objects.push(value);
    }
    return {objects: objects, startOffset: start, endOffset: endOffset};
}

// Parse a `CFF` DICT real value.
function parseFloatOperand(parser) {
    var s, eof, lookup, b, n1, n2;
    s = '';
    eof = 15;
    lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
    while (true) {
        b = parser.parseByte();
        n1 = b >> 4;
        n2 = b & 15;

        if (n1 === eof) {
            break;
        }
        s += lookup[n1];

        if (n2 === eof) {
            break;
        }
        s += lookup[n2];
    }
    return parseFloat(s);
}

// Parse a `CFF` DICT operand.
function parseOperand(parser, b0) {
    var b1, b2, b3, b4;
    if (b0 === 28) {
        b1 = parser.parseByte();
        b2 = parser.parseByte();
        return b1 << 8 | b2;
    }
    if (b0 === 29) {
        b1 = parser.parseByte();
        b2 = parser.parseByte();
        b3 = parser.parseByte();
        b4 = parser.parseByte();
        return b1 << 24 | b2 << 16 | b3 << 8 | b4;
    }
    if (b0 === 30) {
        return parseFloatOperand(parser);
    }
    if (b0 >= 32 && b0 <= 246) {
        return b0 - 139;
    }
    if (b0 >= 247 && b0 <= 250) {
        b1 = parser.parseByte();
        return (b0 - 247) * 256 + b1 + 108;
    }
    if (b0 >= 251 && b0 <= 254) {
        b1 = parser.parseByte();
        return -(b0 - 251) * 256 - b1 - 108;
    }
    throw new Error('Invalid b0 ' + b0);
}

// Convert the entries returned by `parseDict` to a proper dictionary.
// If a value is a list of one, it is unpacked.
function entriesToObject(entries) {
    var o, key, values, i, value;
    o = {};
    for (i = 0; i < entries.length; i += 1) {
        key = entries[i][0];
        values = entries[i][1];
        if (values.length === 1) {
            value = values[0];
        } else {
            value = values;
        }
        if (o.hasOwnProperty(key)) {
            throw new Error('Object ' + o + ' already has key ' + key);
        }
        o[key] = value;
    }
    return o;
}

// Parse a `CFF` DICT object.
// A dictionary contains key-value pairs in a compact tokenized format.
function parseCFFDict(data, start, size) {
    var parser, entries, operands, op;
    start = start !== undefined ? start : 0;
    parser = new parse.Parser(data, start);
    entries = [];
    operands = [];
    size = size !== undefined ? size : data.length;

    while (parser.relativeOffset < size) {
        op = parser.parseByte();
        // The first byte for each dict item distinguishes between operator (key) and operand (value).
        // Values <= 21 are operators.
        if (op <= 21) {
            // Two-byte operators have an initial escape byte of 12.
            if (op === 12) {
                op = 1200 + parser.parseByte();
            }
            entries.push([op, operands]);
            operands = [];
        } else {
            // Since the operands (values) come before the operators (keys), we store all operands in a list
            // until we encounter an operator.
            operands.push(parseOperand(parser, op));
        }
    }
    return entriesToObject(entries);
}

// Given a String Index (SID), return the value of the string.
// Strings below index 392 are standard CFF strings and are not encoded in the font.
function getCFFString(strings, index) {
    if (index < 391) { // ENI: changed from <= 391, length of the cffStandardStrings collection is only 391
        index = encoding.cffStandardStrings[index];
    } else {
        index = strings[index - 391];
    }
    return index;
}

// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.
function interpretDict(dict, meta, strings) {
    var i, m, value, newDict;
    newDict = {};
    // Because we also want to include missing values, we start out from the meta list
    // and lookup values in the dict.
    for (i = 0; i < meta.length; i += 1) {
        m = meta[i];
        value = dict[m.op];
        if (value === undefined) {
            value = m.value !== undefined ? m.value : null;
        }
        if (m.type === 'SID') {
            value = getCFFString(strings, value);
        }
        newDict[m.name] = value;
    }
    return newDict;
}

// Parse the CFF header.
function parseCFFHeader(data, start) {
    var header = {};
    header.formatMajor = parse.getCard8(data, start);
    header.formatMinor = parse.getCard8(data, start + 1);
    header.size = parse.getCard8(data, start + 2);
    header.offsetSize = parse.getCard8(data, start + 3);
    header.startOffset = start;
    header.endOffset = start + 4;
    return header;
}

// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
// The top dictionary contains the essential metadata for the font, together with the private dictionary.
function parseCFFTopDict(data, strings) {
    var dict, meta;
    meta = [
        {name: 'version', op: 0, type: 'SID'},
        {name: 'notice', op: 1, type: 'SID'},
        {name: 'copyright', op: 1200, type: 'SID'},
        {name: 'fullName', op: 2, type: 'SID'},
        {name: 'familyName', op: 3, type: 'SID'},
        {name: 'weight', op: 4, type: 'SID'},
        {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},
        {name: 'italicAngle', op: 1202, type: 'number', value: 0},
        {name: 'underlinePosition', op: 1203, type: 'number', value: -100},
        {name: 'underlineThickness', op: 1204, type: 'number', value: 50},
        {name: 'paintType', op: 1205, type: 'number', value: 0},
        {name: 'charstringType', op: 1206, type: 'number', value: 2},
        {name: 'fontMatrix', op: 1207, type: ['number', 'number', 'number', 'number'], value: [0.001, 0, 0, 0.001, 0, 0]},
        {name: 'uniqueId', op: 13, type: 'number'},
        {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},
        {name: 'strokeWidth', op: 1208, type: 'number', value: 0},
        {name: 'xuid', op: 14, type: []},
        {name: 'charset', op: 15, type: 'offset', value: 0},
        {name: 'encoding', op: 16, type: 'offset', value: 0},
        {name: 'charStrings', op: 17, type: 'number', value: 0},
        {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]}
    ];
    dict = parseCFFDict(data, 0, data.byteLength);
    return interpretDict(dict, meta, strings);
}

// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.
function parseCFFPrivateDict(data, start, size, strings) {
    var dict, meta;
    meta = [
        {name: 'subrs', op: 19, type: 'offset', value: 0},
        {name: 'defaultWidthX', op: 20, type: 'number', value: 0},
        {name: 'nominalWidthX', op: 21, type: 'number', value: 0}
    ];
    dict = parseCFFDict(data, start, size);
    return interpretDict(dict, meta, strings);
}

// Parse the CFF charset table, which contains internal names for all the glyphs.
// This function will return a list of glyph names.
// See Adobe TN #5176 chapter 13, "Charsets".
function parseCFFCharset(data, start, nGlyphs, strings) {
    var parser, format, charset, i, sid, count;
    parser = new parse.Parser(data, start);
    // The .notdef glyph is not included, so subtract 1.
    nGlyphs -= 1;
    charset = ['.notdef'];

    format = parser.parseCard8();
    if (format === 0) {
        for (i = 0; i < nGlyphs; i += 1) {
            sid = parser.parseSID();
            charset.push(getCFFString(strings, sid));
        }
    } else if (format === 1) {
        while (charset.length <= nGlyphs) {
            sid = parser.parseSID();
            count = parser.parseCard8();
            for (i = 0; i <= count; i += 1) {
                charset.push(getCFFString(strings, sid));
                sid += 1;
            }
        }
    } else if (format === 2) {
        while (charset.length <= nGlyphs) {
            sid = parser.parseSID();
            count = parser.parseCard16();
            for (i = 0; i <= count; i += 1) {
                charset.push(getCFFString(strings, sid));
                sid += 1;
            }
        }
    } else {
        throw new Error('Unknown charset format ' + format);
    }

    return charset;
}

// Parse the CFF encoding data. Only one encoding can be specified per font.
// See Adobe TN #5176 chapter 12, "Encodings".
function parseCFFEncoding(data, start, charset) {
    var encoding, parser, format, nCodes, i, code, nRanges, first, nLeft, j;
    encoding = {};
    parser = new parse.Parser(data, start);
    format = parser.parseCard8();
    if (format === 0) {
        nCodes = parser.parseCard8();
        for (i = 0; i < nCodes; i += 1) {
            code = parser.parseCard8();
            encoding[code] = i;
        }
    } else if (format === 1) {
        nRanges = parser.parseCard8();
        code = 1;
        for (i = 0; i < nRanges; i += 1) {
            first = parser.parseCard8();
            nLeft = parser.parseCard8();
            for (j = first; j <= first + nLeft; j += 1) {
                encoding[j] = code;
                code += 1;
            }
        }
    } else {
        throw new Error('Unknown encoding format ' + format);
    }
    return new encoding.CffEncoding(encoding, charset);
}

// Take in charstring code and return a Glyph object.
// The encoding is described in the Type 2 Charstring Format
// https://www.microsoft.com/typography/OTSPEC/charstr2.htm
function parseCFFCharstring(code, font, index) {
    var p, glyph, stack, nStems, haveWidth, width, x, y, c1x, c1y, c2x, c2y, v;
    p = new path.Path();
    stack = [];
    nStems = 0;
    haveWidth = false;
    width = font.defaultWidthX;
    x = y = 0;

    function parseStems() {
        var hasWidthArg;
        // The number of stem operators on the stack is always even.
        // If the value is uneven, that means a width is specified.
        hasWidthArg = stack.length % 2 !== 0;
        if (hasWidthArg && !haveWidth) {
            width = stack.shift() + font.nominalWidthX;
        }
        nStems += stack.length >> 1;
        stack.length = 0;
        haveWidth = true;
    }

    function parse(code) {
        var i, b1, b2, b3, b4, codeIndex, subrCode;
        i = 0;
        while (i < code.length) {
            v = code[i];
            i += 1;
            switch (v) {
            case 1: // hstem
                parseStems();
                break;
            case 3: // vstem
                parseStems();
                break;
            case 4: // vmoveto
                if (stack.length > 1 && !haveWidth) {
                    width = stack.shift() + font.nominalWidthX;
                    haveWidth = true;
                }
                y += stack.pop();
                p.closePath(); // ENI: multiple contours fix
                p.moveTo(x, -y);
                break;
            case 5: // rlineto
                while (stack.length > 0) {
                    x += stack.shift();
                    y += stack.shift();
                    p.lineTo(x, -y);
                }
                break;
            case 6: // hlineto
                while (stack.length > 0) {
                    x += stack.shift();
                    p.lineTo(x, -y);
                    if (stack.length === 0) {
                        break;
                    }
                    y += stack.shift();
                    p.lineTo(x, -y);
                }
                break;
            case 7: // vlineto
                while (stack.length > 0) {
                    y += stack.shift();
                    p.lineTo(x, -y);
                    if (stack.length === 0) {
                        break;
                    }
                    x += stack.shift();
                    p.lineTo(x, -y);
                }
                break;
            case 8: // rrcurveto
                while (stack.length > 0) {
                    c1x = x + stack.shift();
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y + stack.shift();
                    p.curveTo(c1x, -c1y, c2x, -c2y, x, -y);
                }
                break;
            case 10: // callsubr
                codeIndex = stack.pop() + font.subrsBias;
                subrCode = font.subrs[codeIndex];
                if (subrCode) {
                    parse(subrCode);
                }
                break;
            case 11: // return
                return;
            case 12: // escape
                v = code[i];
                i += 1;
                break;
            case 14: // endchar
                if (stack.length > 0 && !haveWidth) {
                    width = stack.shift() + font.nominalWidthX;
                    haveWidth = true;
                }
                p.closePath();
                break;
            case 18: // hstemhm
                parseStems();
                break;
            case 19: // hintmask
            case 20: // cntrmask
                parseStems();
                i += (nStems + 7) >> 3;
                break;
            case 21: // rmoveto
                if (stack.length > 2 && !haveWidth) {
                    width = stack.shift() + font.nominalWidthX;
                    haveWidth = true;
                }
                y += stack.pop();
                x += stack.pop();
                p.closePath(); // ENI: multiple contours fix
                p.moveTo(x, -y);
                break;
            case 22: // hmoveto
                if (stack.length > 1 && !haveWidth) {
                    width = stack.shift() + font.nominalWidthX;
                    haveWidth = true;
                }
                x += stack.pop();
                p.closePath(); // ENI: multiple contours fix
                p.moveTo(x, -y);
                break;
            case 23: // vstemhm
                parseStems();
                break;
            case 24: // rcurveline
                while (stack.length > 2) {
                    c1x = x + stack.shift();
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y + stack.shift();
                    p.curveTo(c1x, -c1y, c2x, -c2y, x, -y);
                }
                x += stack.shift();
                y += stack.shift();
                p.lineTo(x, -y);
                break;
            case 25: // rlinecurve
                while (stack.length > 6) {
                    x += stack.shift();
                    y += stack.shift();
                    p.lineTo(x, -y);
                }
                c1x = x + stack.shift();
                c1y = y + stack.shift();
                c2x = c1x + stack.shift();
                c2y = c1y + stack.shift();
                x = c2x + stack.shift();
                y = c2y + stack.shift();
                p.curveTo(c1x, -c1y, c2x, -c2y, x, -y);
                break;
            case 26: // vvcurveto
                if (stack.length % 2) {
                    x += stack.shift();
                }
                while (stack.length > 0) {
                    c1x = x;
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x;
                    y = c2y + stack.shift();
                    p.curveTo(c1x, -c1y, c2x, -c2y, x, -y);
                }
                break;
            case 27: // hhcurveto
                if (stack.length % 2) {
                    y += stack.shift();
                }
                while (stack.length > 0) {
                    c1x = x + stack.shift();
                    c1y = y;
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y;
                    p.curveTo(c1x, -c1y, c2x, -c2y, x, -y);
                }
                break;
            case 28: // shortint
                b1 = code[i];
                b2 = code[i + 1];
                stack.push(((b1 << 24) | (b2 << 16)) >> 16);
                i += 2;
                break;
            case 29: // callgsubr
                codeIndex = stack.pop() + font.gsubrsBias;
                subrCode = font.gsubrs[codeIndex];
                if (subrCode) {
                    parse(subrCode);
                }
                break;
            case 30: // vhcurveto
                while (stack.length > 0) {
                    c1x = x;
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y + (stack.length === 1 ? stack.shift() : 0);
                    p.curveTo(c1x, -c1y, c2x, -c2y, x, -y);
                    if (stack.length === 0) {
                        break;
                    }
                    c1x = x + stack.shift();
                    c1y = y;
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    y = c2y + stack.shift();
                    x = c2x + (stack.length === 1 ? stack.shift() : 0);
                    p.curveTo(c1x, -c1y, c2x, -c2y, x, -y);
                }
                break;
            case 31: // hvcurveto
                while (stack.length > 0) {
                    c1x = x + stack.shift();
                    c1y = y;
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    y = c2y + stack.shift();
                    x = c2x + (stack.length === 1 ? stack.shift() : 0);
                    p.curveTo(c1x, -c1y, c2x, -c2y, x, -y);
                    if (stack.length === 0) {
                        break;
                    }
                    c1x = x;
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y + (stack.length === 1 ? stack.shift() : 0);
                    p.curveTo(c1x, -c1y, c2x, -c2y, x, -y);
                }
                break;
            default:
                if (v < 32) {
                    throw new Error('Glyph ' + index + ': unknown operator ' + v);
                } else if (v < 247) {
                    stack.push(v - 139);
                } else if (v < 251) {
                    b1 = code[i];
                    i += 1;
                    stack.push((v - 247) * 256 + b1 + 108);
                } else if (v < 255) {
                    b1 = code[i];
                    i += 1;
                    stack.push(-(v - 251) * 256 - b1 - 108);
                } else {
                    b1 = code[i];
                    b2 = code[i + 1];
                    b3 = code[i + 2];
                    b4 = code[i + 3];
                    i += 4;
                    stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);
                }
            }
        }
    }

    parse(code);
    glyph = new _glyph.Glyph({font: font, index: index});
    glyph.path = p;
    glyph.advanceWidth = width;
    return glyph;
}

// Subroutines are encoded using the negative half of the number space.
// See type 2 chapter 4.7 "Subroutine operators".
function calcCFFSubroutineBias(subrs) {
    var bias;
    if (subrs.length < 1240) {
        bias = 107;
    } else if (subrs.length < 33900) {
        bias = 1131;
    } else {
        bias = 32768;
    }
    return bias;
}

// Parse the `CFF` table, which contains the glyph outlines in PostScript format.
function parseCFFTable(data, start, font) {
    var header, nameIndex, topDictIndex, stringIndex, globalSubrIndex, topDict, privateDictOffset, privateDict,
        subrOffset, subrIndex, charString, charStringsIndex, charset, i;
    font.tables.cff = {};
    header = parseCFFHeader(data, start);
    nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);
    topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
    stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);
    globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
    font.gsubrs = globalSubrIndex.objects;
    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);

    var topDictData = new DataView(new Uint8Array(topDictIndex.objects[0]).buffer);
    topDict = parseCFFTopDict(topDictData, stringIndex.objects);
    font.tables.cff.topDict = topDict;

    privateDictOffset = start + topDict['private'][1];
    privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict['private'][0], stringIndex.objects);
    font.defaultWidthX = privateDict.defaultWidthX;
    font.nominalWidthX = privateDict.nominalWidthX;

    subrOffset = privateDictOffset + privateDict.subrs;
    subrIndex = parseCFFIndex(data, subrOffset);
    font.subrs = subrIndex.objects;
    font.subrsBias = calcCFFSubroutineBias(font.subrs);

    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.
    charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
    font.nGlyphs = charStringsIndex.objects.length;

    charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);
    if (topDict.encoding === 0) { // Standard encoding
        font.cffEncoding = new encoding.CffEncoding(encoding.cffStandardEncoding, charset);
    } else if (topDict.encoding === 1) { // Expert encoding
        font.cffEncoding = new encoding.CffEncoding(encoding.cffExpertEncoding, charset);
    } else {
        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
    }
    // Prefer the CMAP encoding to the CFF encoding.
    font.encoding = font.encoding || font.cffEncoding;

    font.glyphs = [];
    for (i = 0; i < font.nGlyphs; i += 1) {
        charString = charStringsIndex.objects[i];
        font.glyphs.push(parseCFFCharstring(charString, font, i));
    }
}

exports.parse = parseCFFTable;

},{"../encoding":5,"../glyph":7,"../parse":9,"../path":10}],12:[function(_dereq_,module,exports){
// The `cmap` table stores the mappings from characters to glyphs.
// https://www.microsoft.com/typography/OTSPEC/cmap.htm

'use strict';

var check = _dereq_('../check');
var parse = _dereq_('../parse');


// Parse the `cmap` table. This table stores the mappings from characters to glyphs.
// There are many available formats, but we only support the Windows format 4.
// This function returns a `CmapEncoding` object or null if no supported format could be found.
function parseCmapTable(data, start) {
    var version, numTables, offset, platformId, encodingId, format, segCount,
        ranges, i, j, parserOffset, idRangeOffset, p, offsetBound;
    var cmap = {};
    cmap.version = version = parse.getUShort(data, start);
    check.argument(version === 0, 'cmap table version should be 0.');

    // The cmap table can contain many sub-tables, each with their own format.
    // We're only interested in a "platform 3" table. This is a Windows format.
    cmap.numtables = numTables = parse.getUShort(data, start + 2);
    offset = -1;
    for (i = 0; i < numTables; i += 1) {
        platformId = parse.getUShort(data, start + 4 + (i * 8));
        encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);
        if (platformId === 3 && (encodingId === 1 || encodingId === 0)) {
            offset = parse.getULong(data, start + 4 + (i * 8) + 4);
            break;
        }
    }
    if (offset === -1) {
        // There is no cmap table in the font that we support, so return null.
        // This font will be marked as unsupported.
        return null;
    }

    p = new parse.Parser(data, start + offset);
    cmap.format = format = p.parseUShort();
    check.argument(format === 4, 'Only format 4 cmap tables are supported.');
    // Length in bytes of the sub-tables.
    cmap.length = p.parseUShort();
    cmap.language = p.parseUShort();
    // segCount is stored x 2.
    cmap.segCount = segCount = p.parseUShort() >> 1;
    // Skip searchRange, entrySelector, rangeShift.
    p.skip('uShort', 3);
    ranges = [];
    for (i = 0; i < segCount; i += 1) {
        ranges[i] = { end: p.parseUShort() };
    }
    // Skip a padding value.
    p.skip('uShort');
    for (i = 0; i < segCount; i += 1) {
        ranges[i].start = p.parseUShort();
        ranges[i].length = ranges[i].end - ranges[i].start + 1;
    }
    for (i = 0; i < segCount; i += 1) {
        ranges[i].idDelta = p.parseShort();
    }
    offsetBound = p.offset + cmap.length;
    for (i = 0; i < segCount; i += 1) {
        parserOffset = p.offset + p.relativeOffset;
        idRangeOffset = p.parseUShort();
        parserOffset += idRangeOffset;
        if (idRangeOffset > 0) {
            ranges[i].ids = [];
            if (parserOffset >= offsetBound) break;
            for (j = 0; j < ranges[i].length; j += 1) {
                ranges[i].ids[j] = parse.getUShort(data, parserOffset);
                parserOffset += 2;
            }
        }
    }
    cmap.segments = ranges;
    return cmap;
}

exports.parse = parseCmapTable;

},{"../check":3,"../parse":9}],13:[function(_dereq_,module,exports){
// The `glyf` table describes the glyphs in TrueType outline format.
// http://www.microsoft.com/typography/otspec/glyf.htm

'use strict';

var check = _dereq_('../check');
var _glyph = _dereq_('../glyph');
var parse = _dereq_('../parse');
var path = _dereq_('../path');

// Parse the coordinate data for a glyph.
function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
    var v;
    if (flag & shortVectorBitMask) {
        // The coordinate is 1 byte long.
        v = p.parseByte();
        // The `same` bit is re-used for short values to signify the sign of the value.
        if (!(flag & sameBitMask)) {
            v = -v;
        }
        v = previousValue + v;
    } else {
        //  The coordinate is 2 bytes long.
        // If the `same` bit is set, the coordinate is the same as the previous coordinate.
        if (flag & sameBitMask) {
            v = previousValue;
        } else {
            // Parse the coordinate as a signed 16-bit delta value.
            v = previousValue + p.parseShort();
        }
    }
    return v;
}

// Parse a TrueType glyph.
function parseGlyph(data, start, index, font) {
    var p, glyph, flag, i, j, flags,
        endPointIndices, numberOfCoordinates, repeatCount, points, point, px, py,
        component, moreComponents;
    p = new parse.Parser(data, start);
    glyph = new _glyph.Glyph({font: font, index: index});
    glyph.numberOfContours = p.parseShort();
    glyph.xMin = p.parseShort();
    glyph.yMin = p.parseShort();
    glyph.xMax = p.parseShort();
    glyph.yMax = p.parseShort();
    if (glyph.numberOfContours > 0) {
        // This glyph is not a composite.
        endPointIndices = glyph.endPointIndices = [];
        for (i = 0; i < glyph.numberOfContours; i += 1) {
            endPointIndices.push(p.parseUShort());
        }

        glyph.instructionLength = p.parseUShort();
        glyph.instructions = [];
        for (i = 0; i < glyph.instructionLength; i += 1) {
            glyph.instructions.push(p.parseByte());
        }

        numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
        flags = [];
        for (i = 0; i < numberOfCoordinates; i += 1) {
            flag = p.parseByte();
            flags.push(flag);
            // If bit 3 is set, we repeat this flag n times, where n is the next byte.
            if (flag & 8) {
                repeatCount = p.parseByte();
                for (j = 0; j < repeatCount; j += 1) {
                    flags.push(flag);
                    i += 1;
                }
            }
        }
        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');

        if (endPointIndices.length > 0) {
            points = [];
            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.
            if (numberOfCoordinates > 0) {
                for (i = 0; i < numberOfCoordinates; i += 1) {
                    flag = flags[i];
                    point = {};
                    point.onCurve = !!(flag & 1);
                    point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;
                    points.push(point);
                }
                px = 0;
                for (i = 0; i < numberOfCoordinates; i += 1) {
                    flag = flags[i];
                    point = points[i];
                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
                    px = point.x;
                }

                py = 0;
                for (i = 0; i < numberOfCoordinates; i += 1) {
                    flag = flags[i];
                    point = points[i];
                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
                    py = point.y;
                }
            }
            glyph.points = points;
        } else {
            glyph.points = [];
        }
    } else if (glyph.numberOfContours === 0) {
        glyph.points = [];
    } else {
        glyph.isComposite = true;
        glyph.points = [];
        glyph.components = [];
        moreComponents = true;
        while (moreComponents) {
            flags = p.parseUShort();
            component = {
                glyphIndex: p.parseUShort(),
                 xScale: 1,
                 scale01: 0,
                 scale10: 0,
                 yScale: 1,
                 dx: 0,
                 dy: 0
             };
            if (flags & 1) {
                // The arguments are words
                component.dx = p.parseShort();
                component.dy = p.parseShort();
            } else {
                // The arguments are bytes
                component.dx = p.parseChar();
                component.dy = p.parseChar();
            }
            if (flags & 8) {
                // We have a scale
                component.xScale = component.yScale = p.parseF2Dot14();
            } else if (flags & 64) {
                // We have an X / Y scale
                component.xScale = p.parseF2Dot14();
                component.yScale = p.parseF2Dot14();
            } else if (flags & 128) {
                // We have a 2x2 transformation
                component.xScale = p.parseF2Dot14();
                component.scale01 = p.parseF2Dot14();
                component.scale10 = p.parseF2Dot14();
                component.yScale = p.parseF2Dot14();
            }

            glyph.components.push(component);
            moreComponents = !!(flags & 32);
        }
    }
    return glyph;
}

// Transform an array of points and return a new array.
function transformPoints(points, transform) {
    var newPoints, i, pt, newPt;
    newPoints = [];
    for (i = 0; i < points.length; i += 1) {
        pt = points[i];
        newPt = {
            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
            onCurve: pt.onCurve,
            lastPointOfContour: pt.lastPointOfContour
        };
        newPoints.push(newPt);
    }
    return newPoints;
}


function getContours(points) {
    var contours, currentContour, i, pt;
    contours = [];
    currentContour = [];
    for (i = 0; i < points.length; i += 1) {
        pt = points[i];
        currentContour.push(pt);
        if (pt.lastPointOfContour) {
            contours.push(currentContour);
            currentContour = [];
        }
    }
    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
    return contours;
}

// Convert the TrueType glyph outline to a Path.
function getPath(points) {
    var p, contours, i, realFirstPoint, j, contour, pt, firstPt,
        prevPt, midPt, curvePt, lastPt;
    p = new path.Path();
    if (!points) {
        return p;
    }
    contours = getContours(points);
    for (i = 0; i < contours.length; i += 1) {
        contour = contours[i];
        firstPt = contour[0];
        lastPt = contour[contour.length - 1];
        if (firstPt.onCurve) {
            curvePt = null;
            // The first point will be consumed by the moveTo command,
            // so skip it in the loop.
            realFirstPoint = true;
        } else {
            if (lastPt.onCurve) {
                // If the first point is off-curve and the last point is on-curve,
                // start at the last point.
                firstPt = lastPt;
            } else {
                // If both first and last points are off-curve, start at their middle.
                firstPt = { x: (firstPt.x + lastPt.x) / 2, y: (firstPt.y + lastPt.y) / 2 };
            }
            curvePt = firstPt;
            // The first point is synthesized, so don't skip the real first point.
            realFirstPoint = false;
        }
        p.moveTo(firstPt.x, -firstPt.y);

        for (j = realFirstPoint ? 1 : 0; j < contour.length; j += 1) {
            pt = contour[j];
            prevPt = j === 0 ? firstPt : contour[j - 1];
            if (prevPt.onCurve && pt.onCurve) {
                // This is a straight line.
                p.lineTo(pt.x, -pt.y);
            } else if (prevPt.onCurve && !pt.onCurve) {
                curvePt = pt;
            } else if (!prevPt.onCurve && !pt.onCurve) {
                midPt = { x: (prevPt.x + pt.x) / 2, y: (prevPt.y + pt.y) / 2 };
                p.quadraticCurveTo(prevPt.x, -prevPt.y, midPt.x, -midPt.y);
                curvePt = pt;
            } else if (!prevPt.onCurve && pt.onCurve) {
                // Previous point off-curve, this point on-curve.
                p.quadraticCurveTo(curvePt.x, -curvePt.y, pt.x, -pt.y);
                curvePt = null;
            } else {
                throw new Error('Invalid state.');
            }
        }
        if (firstPt !== lastPt) {
            // Connect the last and first points
            if (curvePt) {
                p.quadraticCurveTo(curvePt.x, -curvePt.y, firstPt.x, -firstPt.y);
            } else {
                p.lineTo(firstPt.x, -firstPt.y);
            }
        }
        
        p.closePath(); // ENI: multiple contours fix, moved inside for loop
    }
    return p;
}

// Parse all the glyphs according to the offsets from the `loca` table.
function parseGlyfTable(data, start, loca, font) {
    var glyphs, i, j, offset, nextOffset, glyph,
        component, componentGlyph, transformedPoints;
    glyphs = [];
    // The last element of the loca table is invalid.
    for (i = 0; i < loca.length - 1; i += 1) {
        offset = loca[i];
        nextOffset = loca[i + 1];
        if (offset !== nextOffset) {
            glyphs.push(parseGlyph(data, start + offset, i, font));
        } else {
            glyphs.push(new _glyph.Glyph({font: font, index: i}));
        }
    }
    // Go over the glyphs again, resolving the composite glyphs.
    for (i = 0; i < glyphs.length; i += 1) {
        glyph = glyphs[i];
        if (glyph.isComposite) {
            for (j = 0; j < glyph.components.length; j += 1) {
                component = glyph.components[j];
                componentGlyph = glyphs[component.glyphIndex];
                if (componentGlyph.points) {
                    transformedPoints = transformPoints(componentGlyph.points, component);
                    glyph.points = glyph.points.concat(transformedPoints);
                }
            }
        }
        glyph.path = getPath(glyph.points);
    }
    return glyphs;
}

exports.parse = parseGlyfTable;

},{"../check":3,"../glyph":7,"../parse":9,"../path":10}],14:[function(_dereq_,module,exports){
// The `GPOS` table contains kerning pairs, among other things.
// https://www.microsoft.com/typography/OTSPEC/gpos.htm

'use strict';

var check = _dereq_('../check');
var parse = _dereq_('../parse');

// Parse ScriptList and FeatureList tables of GPOS, GSUB, GDEF, BASE, JSTF tables.
// These lists are unused by now, this function is just the basis for a real parsing.
function parseTaggedListTable(data, start) {
    var p = new parse.Parser(data, start),
        n = p.parseUShort(),
        list = [];
    for (var i = 0; i < n; i++) {
        list[p.parseTag()] = { offset: p.parseUShort() };
    }
    return list;
}

// Parse a coverage table in a GSUB, GPOS or GDEF table.
// Format 1 is a simple list of glyph ids,
// Format 2 is a list of ranges. It is expanded in a list of glyphs, maybe not the best idea.
function parseCoverageTable(data, start) {
    var p = new parse.Parser(data, start),
        format = p.parseUShort(),
        count =  p.parseUShort();
    if (format === 1) {
        return p.parseUShortList(count);
    }
    else if (format === 2) {
        var i, begin, end, index, coverage = [];
        for (; count--;) {
            begin = p.parseUShort();
            end = p.parseUShort();
            index = p.parseUShort();
            for (i = begin; i <= end; i++) {
                coverage[index++] = i;
            }
        }
        return coverage;
    }
}

// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
// Returns a function that gets a class value from a glyph ID.
function parseClassDefTable(data, start) {
    var p = new parse.Parser(data, start),
        format = p.parseUShort();
    if (format === 1) {
        // Format 1 specifies a range of consecutive glyph indices, one class per glyph ID.
        var startGlyph = p.parseUShort(),
            glyphCount = p.parseUShort(),
            classes = p.parseUShortList(glyphCount);
        return function(glyphID) {
            return classes[glyphID - startGlyph] || 0;
        };
    }
    else if (format === 2) {
        // Format 2 defines multiple groups of glyph indices that belong to the same class.
        var rangeCount = p.parseUShort(),
            startGlyphs = [],
            endGlyphs = [],
            classValues = [];
        for (var i = 0; i < rangeCount; i++) {
            startGlyphs[i] = p.parseUShort();
            endGlyphs[i] = p.parseUShort();
            classValues[i] = p.parseUShort();
        }
        return function(glyphID) {
            var l, c, r;
            l = 0;
            r = startGlyphs.length - 1;
            while (l < r) {
                c = (l + r + 1) >> 1;
                if (glyphID < startGlyphs[c]) {
                    r = c - 1;
                } else {
                    l = c;
                }
            }
            if (startGlyphs[l] <= glyphID && glyphID <= endGlyphs[l]) {
                return classValues[l] || 0;
            }
            return 0;
        };
    }
}

// Parse a pair adjustment positioning subtable, format 1 or format 2
// The subtable is returned in the form of a lookup function.
function parsePairPosSubTable(data, start) {
    var p = new parse.Parser(data, start);
    var format, coverageOffset, coverage, valueFormat1, valueFormat2,
        sharedPairSets, firstGlyph, secondGlyph, value1, value2;
    // This part is common to format 1 and format 2 subtables
    format = p.parseUShort();
    coverageOffset = p.parseUShort();
    coverage = parseCoverageTable(data, start+coverageOffset);
    // valueFormat 4: XAdvance only, 1: XPlacement only, 0: no ValueRecord for second glyph
    // Only valueFormat1=4 and valueFormat2=0 is supported.
    valueFormat1 = p.parseUShort();
    valueFormat2 = p.parseUShort();
    if (valueFormat1 !== 4 || valueFormat2 !== 0) return;
    sharedPairSets = {};
    if (format === 1) {
        // Pair Positioning Adjustment: Format 1
        var pairSetCount, pairSetOffsets, pairSetOffset, sharedPairSet, pairValueCount, pairSet;
        pairSetCount = p.parseUShort();
        pairSet = [];
        // Array of offsets to PairSet tables-from beginning of PairPos subtable-ordered by Coverage Index
        pairSetOffsets = p.parseOffset16List(pairSetCount);
        for (firstGlyph = 0; firstGlyph < pairSetCount; firstGlyph++) {
            pairSetOffset = pairSetOffsets[firstGlyph];
            sharedPairSet = sharedPairSets[pairSetOffset];
            if (!sharedPairSet) {
                // Parse a pairset table in a pair adjustment subtable format 1
                sharedPairSet = {};
                p.relativeOffset = pairSetOffset;
                pairValueCount = p.parseUShort();
                for (; pairValueCount--;) {
                    secondGlyph = p.parseUShort();
                    if (valueFormat1) value1 = p.parseShort();
                    if (valueFormat2) value2 = p.parseShort();
                    // We only support valueFormat1 = 4 and valueFormat2 = 0,
                    // so value1 is the XAdvance and value2 is empty.
                    sharedPairSet[secondGlyph] = value1;
                }
            }
            pairSet[coverage[firstGlyph]] = sharedPairSet;
        }
        return function(leftGlyph, rightGlyph) {
            var pairs = pairSet[leftGlyph];
            if (pairs) return pairs[rightGlyph];
        };
    }
    else if (format === 2) {
        // Pair Positioning Adjustment: Format 2
        var classDef1Offset, classDef2Offset, class1Count, class2Count, i, j,
            getClass1, getClass2, kerningMatrix, kerningRow, covered;
        classDef1Offset = p.parseUShort();
        classDef2Offset = p.parseUShort();
        class1Count = p.parseUShort();
        class2Count = p.parseUShort();
        getClass1 = parseClassDefTable(data, start+classDef1Offset);
        getClass2 = parseClassDefTable(data, start+classDef2Offset);

        // Parse kerning values by class pair.
        kerningMatrix = [];
        for (i = 0; i < class1Count; i++) {
            kerningRow = kerningMatrix[i] = [];
            for (j = 0; j < class2Count; j++) {
                if (valueFormat1) value1 = p.parseShort();
                if (valueFormat2) value2 = p.parseShort();
                // We only support valueFormat1 = 4 and valueFormat2 = 0,
                // so value1 is the XAdvance and value2 is empty.
                kerningRow[j] = value1;
            }
        }

        // Convert coverage list to a hash
        covered = {};
        for(i = 0; i < coverage.length; i++) covered[coverage[i]] = 1;

        // Get the kerning value for a specific glyph pair.
        return function(leftGlyph, rightGlyph) {
            if (!covered[leftGlyph]) return null;
            var class1 = getClass1(leftGlyph),
                class2 = getClass2(rightGlyph),
                kerningRow = kerningMatrix[class1];
            return kerningRow ? kerningRow[class2] : null;
        };
    }
}

// Parse a LookupTable (present in of GPOS, GSUB, GDEF, BASE, JSTF tables).
function parseLookupTable(data, start) {
    var p = new parse.Parser(data, start);
    var table, lookupType, lookupFlag, useMarkFilteringSet, subTableCount, subTableOffsets, subtables, i;
    lookupType = p.parseUShort();
    lookupFlag = p.parseUShort();
    useMarkFilteringSet = lookupFlag & 0x10;
    subTableCount = p.parseUShort();
    subTableOffsets = p.parseOffset16List(subTableCount);
    table = {
        lookupType: lookupType,
        lookupFlag: lookupFlag,
        markFilteringSet: useMarkFilteringSet ? p.parseUShort() : -1
    };
    // LookupType 2, Pair adjustment
    if (lookupType === 2) {
        subtables = [];
        for (i = 0; i < subTableCount; i++) {
            subtables.push(parsePairPosSubTable(data, start + subTableOffsets[i]));
        }
        // Return a function which finds the kerning values in the subtables.
        table.getKerningValue = function(leftGlyph, rightGlyph) {
            for (var i = subtables.length; i--;) {
                var value = subtables[i](leftGlyph, rightGlyph);
                if (value !== undefined) return value;
            }
            return 0;
        };
    }
    return table;
}

// Parse the `GPOS` table which contains, among other things, kerning pairs.
// https://www.microsoft.com/typography/OTSPEC/gpos.htm
function parseGposTable(data, start, font) {
    var p, tableVersion, lookupListOffset, scriptList, i, featureList, lookupCount,
        lookupTableOffsets, lookupListAbsoluteOffset, table;

    p = new parse.Parser(data, start);
    tableVersion = p.parseFixed();
    check.argument(tableVersion === 1, 'Unsupported GPOS table version.');

    // ScriptList and FeatureList - ignored for now
    scriptList = parseTaggedListTable(data, start+p.parseUShort());
    // 'kern' is the feature we are looking for.
    featureList = parseTaggedListTable(data, start+p.parseUShort());

    // LookupList
    lookupListOffset = p.parseUShort();
    p.relativeOffset = lookupListOffset;
    lookupCount = p.parseUShort();
    lookupTableOffsets = p.parseOffset16List(lookupCount);
    lookupListAbsoluteOffset = start + lookupListOffset;
    for (i = 0; i < lookupCount; i++) {
        table = parseLookupTable(data, lookupListAbsoluteOffset + lookupTableOffsets[i]);
        if (table.lookupType === 2 && !font.getGposKerningValue) font.getGposKerningValue = table.getKerningValue;
    }
}

exports.parse = parseGposTable;

},{"../check":3,"../parse":9}],15:[function(_dereq_,module,exports){
// The `head` table contains global information about the font.
// https://www.microsoft.com/typography/OTSPEC/head.htm

'use strict';

var check = _dereq_('../check');
var parse = _dereq_('../parse');

// Parse the header `head` table
function parseHeadTable(data, start) {
    var head = {},
        p = new parse.Parser(data, start);
    head.version = p.parseVersion();
    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
    head.checkSumAdjustment = p.parseULong();
    head.magicNumber = p.parseULong();
    check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');
    head.flags = p.parseUShort();
    head.unitsPerEm = p.parseUShort();
    head.created = p.parseLongDateTime();
    head.modified = p.parseLongDateTime();
    head.xMin = p.parseShort();
    head.yMin = p.parseShort();
    head.xMax = p.parseShort();
    head.yMax = p.parseShort();
    head.macStyle = p.parseUShort();
    head.lowestRecPPEM = p.parseUShort();
    head.fontDirectionHint = p.parseShort();
    head.indexToLocFormat = p.parseShort();     // 50
    head.glyphDataFormat = p.parseShort();
    return head;
}

exports.parse = parseHeadTable;

},{"../check":3,"../parse":9}],16:[function(_dereq_,module,exports){
// The `hhea` table contains information for horizontal layout.
// https://www.microsoft.com/typography/OTSPEC/hhea.htm

'use strict';

var parse = _dereq_('../parse');

// Parse the horizontal header `hhea` table
function parseHheaTable(data, start) {
    var hhea = {},
        p = new parse.Parser(data, start);
    hhea.version = p.parseVersion();
    hhea.ascender = p.parseShort();
    hhea.descender = p.parseShort();
    hhea.lineGap = p.parseShort();
    hhea.advanceWidthMax = p.parseUShort();
    hhea.minLeftSideBearing = p.parseShort();
    hhea.minRightSideBearing = p.parseShort();
    hhea.xMaxExtent = p.parseShort();
    hhea.caretSlopeRise = p.parseShort();
    hhea.caretSlopeRun = p.parseShort();
    hhea.caretOffset = p.parseShort();
    p.relativeOffset += 8;
    hhea.metricDataFormat = p.parseShort();
    hhea.numberOfHMetrics = p.parseUShort();
    return hhea;
}

exports.parse = parseHheaTable;

},{"../parse":9}],17:[function(_dereq_,module,exports){
// The `hmtx` table contains the horizontal metrics for all glyphs.
// https://www.microsoft.com/typography/OTSPEC/hmtx.htm

'use strict';

var parse = _dereq_('../parse');

// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.
// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.
function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {
    var p, i, glyph, advanceWidth, leftSideBearing;
    p = new parse.Parser(data, start);
    for (i = 0; i < numGlyphs; i += 1) {
        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
        if (i < numMetrics) {
            advanceWidth = p.parseUShort();
            leftSideBearing = p.parseShort();
        }
        glyph = glyphs[i];
        glyph.advanceWidth = advanceWidth;
        glyph.leftSideBearing = leftSideBearing;
    }
}

exports.parse = parseHmtxTable;

},{"../parse":9}],18:[function(_dereq_,module,exports){
// The `kern` table contains kerning pairs.
// Note that some fonts use the GPOS OpenType layout table to specify kerning.
// https://www.microsoft.com/typography/OTSPEC/kern.htm

'use strict';

var check = _dereq_('../check');
var parse = _dereq_('../parse');

// Parse the `kern` table which contains kerning pairs.
function parseKernTable(data, start) {
    var pairs, p, tableVersion, nTables, subTableVersion, nPairs,
        i, leftIndex, rightIndex, value;
    pairs = {};
    p = new parse.Parser(data, start);
    tableVersion = p.parseUShort();
    check.argument(tableVersion === 0, 'Unsupported kern table version.');
    nTables = p.parseUShort();
    subTableVersion = p.parseUShort();
    check.argument(subTableVersion === 0, 'Unsupported kern sub-table version.');
    // Skip subTableLength, subTableCoverage
    p.skip('uShort', 2);
    nPairs = p.parseUShort();
    // Skip searchRange, entrySelector, rangeShift.
    p.skip('uShort', 3);
    for (i = 0; i < nPairs; i += 1) {
        leftIndex = p.parseUShort();
        rightIndex = p.parseUShort();
        value = p.parseShort();
        pairs[leftIndex + ',' + rightIndex] = value;
    }
    return pairs;
}

exports.parse = parseKernTable;

},{"../check":3,"../parse":9}],19:[function(_dereq_,module,exports){
// The `loca` table stores the offsets to the locations of the glyphs in the font.
// https://www.microsoft.com/typography/OTSPEC/loca.htm

'use strict';

var parse = _dereq_('../parse');

// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,
// relative to the beginning of the glyphData table.
// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)
// The loca table has two versions: a short version where offsets are stored as uShorts, and a long
// version where offsets are stored as uLongs. The `head` table specifies which version to use
// (under indexToLocFormat).
function parseLocaTable(data, start, numGlyphs, shortVersion) {
    var p, parseFn, glyphOffsets, glyphOffset, i;
    p = new parse.Parser(data, start);
    parseFn = shortVersion ? p.parseUShort : p.parseULong;
    // There is an extra entry after the last index element to compute the length of the last glyph.
    // That's why we use numGlyphs + 1.
    glyphOffsets = [];
    for (i = 0; i < numGlyphs + 1; i += 1) {
        glyphOffset = parseFn.call(p);
        if (shortVersion) {
            // The short table version stores the actual offset divided by 2.
            glyphOffset *= 2;
        }
        glyphOffsets.push(glyphOffset);
    }
    return glyphOffsets;
}

exports.parse = parseLocaTable;

},{"../parse":9}],20:[function(_dereq_,module,exports){
// The `maxp` table establishes the memory requirements for the font.
// We need it just to get the number of glyphs in the font.
// https://www.microsoft.com/typography/OTSPEC/maxp.htm

'use strict';

var parse = _dereq_('../parse');

// Parse the maximum profile `maxp` table.
function parseMaxpTable(data, start) {
    var maxp = {},
        p = new parse.Parser(data, start);
    maxp.version = p.parseVersion();
    maxp.numGlyphs = p.parseUShort();
    if (maxp.version === 1.0) {
        maxp.maxPoints = p.parseUShort();
        maxp.maxContours = p.parseUShort();
        maxp.maxCompositePoints = p.parseUShort();
        maxp.maxCompositeContours = p.parseUShort();
        maxp.maxZones = p.parseUShort();
        maxp.maxTwilightPoints = p.parseUShort();
        maxp.maxStorage = p.parseUShort();
        maxp.maxFunctionDefs = p.parseUShort();
        maxp.maxInstructionDefs = p.parseUShort();
        maxp.maxStackElements = p.parseUShort();
        maxp.maxSizeOfInstructions = p.parseUShort();
        maxp.maxComponentElements = p.parseUShort();
        maxp.maxComponentDepth = p.parseUShort();
    }
    return maxp;
}

exports.parse = parseMaxpTable;

},{"../parse":9}],21:[function(_dereq_,module,exports){
// The `name` naming table.
// https://www.microsoft.com/typography/OTSPEC/name.htm

'use strict';

var parse = _dereq_('../parse');

// NameIDs for the name table.
var nameTableNames = [
    'copyright',              // 0
    'fontFamily',             // 1
    'fontSubfamily',          // 2
    'uniqueID',               // 3
    'fullName',               // 4
    'version',                // 5
    'postScriptName',         // 6
    'trademark',              // 7
    'manufacturer',           // 8
    'designer',               // 9
    'description',            // 10
    'vendorURL',              // 11
    'designerURL',            // 12
    'licence',                // 13
    'licenceURL',             // 14
    'reserved',               // 15
    'preferredFamily',        // 16
    'preferredSubfamily',     // 17
    'compatibleFullName',     // 18
    'sampleText',             // 19
    'postScriptFindFontName', // 20
    'wwsFamily',              // 21
    'wwsSubfamily'            // 22
];

// Parse the naming `name` table
// Only Windows Unicode English names are supported.
// Format 1 additional fields are not supported
function parseNameTable(data, start) {
    var name = {},
        p = new parse.Parser(data, start);
    name.format = p.parseUShort();
    var count = p.parseUShort(),
        stringOffset = p.offset + p.parseUShort();
    var platformID, encodingID, languageID, nameID, property, byteLength,
        offset, str, i, j, codePoints;
    var unknownCount = 0;
    for(i = 0; i < count; i++) {
        platformID = p.parseUShort();
        encodingID = p.parseUShort();
        languageID = p.parseUShort();
        nameID = p.parseUShort();
        property = nameTableNames[nameID];
        byteLength = p.parseUShort();
        offset = p.parseUShort();
        // platformID - encodingID - languageID standard combinations :
        // 1 - 0 - 0 : Macintosh, Roman, English
        // 3 - 1 - 0x409 : Windows, Unicode BMP (UCS-2), en-US
        if (platformID === 3 && encodingID === 1 && languageID === 0x409) {
            codePoints = [];
            var length = byteLength/2;
            for(j = 0; j < length; j++, offset += 2) {
                codePoints[j] = parse.getShort(data, stringOffset+offset);
            }
            str = String.fromCharCode.apply(null, codePoints);
            if (property) {
                name[property] = str;
            }
            else {
                unknownCount++;
                name['unknown'+unknownCount] = str;
            }
        }

    }
    if (name.format === 1) {
        name.langTagCount = p.parseUShort();
    }
    return name;
}

exports.parse = parseNameTable;

},{"../parse":9}],22:[function(_dereq_,module,exports){
// The `OS/2` table contains metrics required in OpenType fonts.
// https://www.microsoft.com/typography/OTSPEC/os2.htm

'use strict';

var parse = _dereq_('../parse');

// Parse the OS/2 and Windows metrics `OS/2` table
function parseOS2Table(data, start) {
    var os2 = {},
        p = new parse.Parser(data, start);
    os2.version = p.parseUShort();
    os2.xAvgCharWidth = p.parseShort();
    os2.usWeightClass = p.parseUShort();
    os2.usWidthClass = p.parseUShort();
    os2.fsType = p.parseUShort();
    os2.ySubscriptXSize = p.parseShort();
    os2.ySubscriptYSize = p.parseShort();
    os2.ySubscriptXOffset = p.parseShort();
    os2.ySubscriptYOffset = p.parseShort();
    os2.ySuperscriptXSize = p.parseShort();
    os2.ySuperscriptYSize = p.parseShort();
    os2.ySuperscriptXOffset = p.parseShort();
    os2.ySuperscriptYOffset = p.parseShort();
    os2.yStrikeoutSize = p.parseShort();
    os2.yStrikeoutPosition = p.parseShort();
    os2.sFamilyClass = p.parseShort();
    os2.panose = [];
    for(var i = 0; i < 10; i++) {
        os2.panose[i] = p.parseByte();
    }
    os2.ulUnicodeRange1 = p.parseULong();
    os2.ulUnicodeRange2 = p.parseULong();
    os2.ulUnicodeRange3 = p.parseULong();
    os2.ulUnicodeRange4 = p.parseULong();
    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
    os2.fsSelection = p.parseUShort();
    os2.usFirstCharIndex = p.parseUShort();
    os2.usLastCharIndex = p.parseUShort();
    os2.sTypoAscender = p.parseShort();
    os2.sTypoDescender = p.parseShort();
    os2.sTypoLineGap = p.parseShort();
    os2.usWinAscent = p.parseUShort();
    os2.usWinDescent = p.parseUShort();
    if (os2.version >= 1) {
        os2.ulCodePageRange1 = p.parseULong();
        os2.ulCodePageRange2 = p.parseULong();
    }
    if (os2.version >= 2) {
        os2.sxHeight = p.parseShort();
        os2.sCapHeight = p.parseShort();
        os2.usDefaultChar = p.parseUShort();
        os2.usBreakChar = p.parseUShort();
        os2.usMaxContent = p.parseUShort();
    }
    return os2;
}

exports.parse = parseOS2Table;

},{"../parse":9}],23:[function(_dereq_,module,exports){
// The `post` table stores additional PostScript information, such as glyph names.
// https://www.microsoft.com/typography/OTSPEC/post.htm

'use strict';

var encoding = _dereq_('../encoding');
var parse = _dereq_('../parse');

// Parse the PostScript `post` table
function parsePostTable(data, start) {
    var post = {},
        p = new parse.Parser(data, start),
        i, nameLength;
    post.version = p.parseVersion();
    post.italicAngle = p.parseFixed();
    post.underlinePosition = p.parseShort();
    post.underlineThickness = p.parseShort();
    post.isFixedPitch = p.parseULong();
    post.minMemType42 = p.parseULong();
    post.maxMemType42 = p.parseULong();
    post.minMemType1 = p.parseULong();
    post.maxMemType1 = p.parseULong();
    switch (post.version) {
    case 1:
        post.names = encoding.standardNames.slice();
        break;
    case 2:
        post.numberOfGlyphs = p.parseUShort();
        post.glyphNameIndex = new Array(post.numberOfGlyphs);
        for (i = 0; i < post.numberOfGlyphs; i++) {
            post.glyphNameIndex[i] = p.parseUShort();
        }
        post.names = [];
        for (i = 0; i < post.numberOfGlyphs; i++) {
            if (post.glyphNameIndex[i] >= encoding.standardNames.length) {
                nameLength = p.parseChar();
                post.names.push(p.parseString(nameLength));
            }
        }
        break;
    case 2.5:
        post.numberOfGlyphs = p.parseUShort();
        post.offset = new Array(post.numberOfGlyphs);
        for (i = 0; i < post.numberOfGlyphs; i++) {
            post.offset[i] = p.parseChar();
        }
        break;
    }
    return post;
}

exports.parse = parsePostTable;

},{"../encoding":5,"../parse":9}]},{},[8])
(8)
});

// Script: FrancaUtility.js
// TODO: remove global vars

function Xorshift(x, y, z, w) {
    this.x = x != 0 ? x : 123456789;
    this.y = y != 0 ? y : 362436069;
    this.z = z != 0 ? z : 521288629;
    this.w = w != 0 ? w : 88675123;
}

Xorshift.prototype.next = function () {
    // to swap to uint use the following code:
    //var t = this.x ^ (this.x << 11);
    //this.x = this.y; this.y = this.z; this.z = this.w;
    //return this.w = (this.w ^ (this.w >>> 19) ^ t ^ (t >>> 8)) >>> 0;
    var t = this.x ^ (this.x << 11);
    this.x = this.y; this.y = this.z; this.z = this.w;
    return this.w = this.w ^ (this.w >> 19) ^ t ^ (t >> 8);
}

function FontOptions(kerning) {
    this.kerning = kerning;
}

JsEndian = {};
JsEndian.isLittleEndian = function () {
    var buffer = new ArrayBuffer(2);
    new DataView(buffer).setInt16(0, 256, true);
    return new Int16Array(buffer)[0] === 256;
}

FrancaGlobals = {};
FrancaGlobals.isWindowActive = true;
FrancaGlobals.onWindowActiveChanged = null;

(function () {
    var hidden = "hidden";

    // Standards:
    if (hidden in document)
        document.addEventListener("visibilitychange", onchange);
    else if ((hidden = "mozHidden") in document)
        document.addEventListener("mozvisibilitychange", onchange);
    else if ((hidden = "webkitHidden") in document)
        document.addEventListener("webkitvisibilitychange", onchange);
    else if ((hidden = "msHidden") in document)
        document.addEventListener("msvisibilitychange", onchange);
        // IE 9 and lower:
    else if ('onfocusin' in document)
        document.onfocusin = document.onfocusout = onchange;
        // All others:
    else
        window.onpageshow = window.onpagehide
            = window.onfocus = window.onblur = onchange;

    var v = 'visible', h = 'hidden',
        evtMap = {
            focus: v, focusin: v, pageshow: v, blur: h, focusout: h, pagehide: h
        };

    function onchange(evt) {
        evt = evt || window.event;
        if (evt.type in evtMap)
            FrancaGlobals.isWindowActive = evtMap[evt.type] == "visible";
        else
            FrancaGlobals.isWindowActive = !this[hidden];

        if (FrancaGlobals.onWindowActiveChanged) {
            FrancaGlobals.onWindowActiveChanged();
        }
    }
    // set the initial state
    onchange({ type: (document.visibilityState == "visible") ? "focus" : "blur" })
})();

FrancaGlobals.requestBackgroundFrame = function (callback, interval) {
    /*var now = (window.performance && window.performance.now) ?
              window.performance.now() :
              Date.now();
    // setTimeout can return early, make sure to target the next frame.
    if (this.lastTarget && now < this.lastTarget)
      now = this.lastTarget + 0.01; // Floating point errors may result in just too early.
    var delay = interval - now % interval;
    this.lastTarget = now + delay;
    window.setTimeout(callback, delay);*/
    window.setTimeout(callback, interval);
}

FrancaGlobals.objectToDict = function (obj) {
    var objDict = new (ss.makeGenericType(ss.Dictionary$2, [Object, Object]))();
    for (var key in obj) {
        objDict.set_item(key, obj[key])
        //if (obj.hasOwnProperty(key))
        //    keys.push(key);
    }
    return objDict;
}

FrancaGlobals.intervalAnimationFrame = function (callback) {
    FrancaGlobals.requestBackgroundFrame(callback, 1000 / 60);
}

FrancaGlobals.enumToInt = function (enumVal) {
    return enumVal;
}

FrancaGlobals.getMembersIgnoreCase = function (ignoreCase, type, memberTypes, bindingAttr, name, params) {
    if (ignoreCase) {
        bindingAttr = bindingAttr | 1024;
        name = name.toLowerCase();
    }
    return ss.getMembers(type, memberTypes, bindingAttr, name, params);
}

FrancaGlobals.getContext = function (element) {
    return element.getContext("webgl", { antialias: false, stencil: true }) || element.getContext("experimental-webgl", { antialias: false, stencil: true });
}

if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = (function () {
        return window.requestAnimationFrame ||
          window.webkitRequestAnimationFrame ||
          window.mozRequestAnimationFrame ||
          window.oRequestAnimationFrame ||
          window.msRequestAnimationFrame ||
          FrancaGlobals.intervalAnimationFrame;
    })();
}

if (typeof String.prototype.startsWith != 'function') {
    // see below for better implementation!
    String.prototype.startsWith = function (str) {
        return this.indexOf(str) == 0;
    };
}

if (!ArrayBuffer.prototype.slice) {
    ArrayBuffer.prototype.slice = function (start, end) {
        var that = new Uint8Array(this);
        if (end == undefined) end = that.length;
        var result = new ArrayBuffer(end - start);
        var resultArray = new Uint8Array(result);
        for (var i = 0; i < resultArray.length; i++)
            resultArray[i] = that[i + start];
        return result;
    }
}

// this makes uncaught exceptions display as something more useful than [Object object]
ss.Exception.prototype.toString = function ss_Exception_toString_Franca() {
    return this.get_message();
}

var gOldOnError = window.onerror;
// Override previous handler.
window.onerror = function myErrorHandler(msg, url, line, col, error) {
    function trimErrorMessage(m, type) {
        if (typeof m == 'string' || m instanceof String) {
            var rs = "uncaught: ";
            if (m.toLowerCase().startsWith(rs)) {
                m = m.substring(rs.length);
            }

            rs = "uncaught exception: ";
            if (m.toLowerCase().startsWith(rs)) {
                m = m.substring(rs.length);
            }

            rs = "uncaught ";
            if (m.toLowerCase().startsWith(rs)) {
                m = m.substring(rs.length);
            }

            if (type) {
                rs = type.toLowerCase() + ": ";
                if (m.toLowerCase().startsWith(rs)) {
                    m = m.substring(rs.length);
                }
            }
        }

        return m;
    }

    if (gOldOnError) {
        // Call previous handler.
        gOldOnError(msg, url, line, col, error);
    }

    if (error) {
        var type = ss.getTypeFullName(ss.getInstanceType(error));
        if (!type)
            type = error.toString();
        else if (type.startsWith("ss."))
            type = type.substring(3);

        var message;
        if (error.get_message)
            message = error.get_message();
        else
            message = msg;

        message = trimErrorMessage(message, type);

        var s = "Unhandled Exception: " + type + ": " + message

        if (error.get_innerException) {
            var inner = error.get_innerException();
            if (inner) {
                var innerType = ss.getTypeFullName(ss.getInstanceType(inner));
                if (!innerType)
                    type = error.toString();
                else if (innerType.startsWith("ss."))
                    innerType = innerType.substring(3);

                var innerMessage;
                if (inner.get_message)
                    innerMessage = inner.get_message();
                else
                    innerMessage = null;

                innerMessage = trimErrorMessage(innerMessage, innerType);

                s += " ---> " + innerType;
                if (innerMessage)
                    s += ": " + innerMessage;
            }
        }

        if (url && line) {
            s += "\n  at " + url + ":line " + line;
            if (col)
                s += ",col " + col;
        }

        window.alert(s);
    }
    else {
        msg = trimErrorMessage(msg);

        var s = "Unhandled Exception: " + msg;
        if (url && line) {
            s += "\n  at " + url + ":line " + line;
            if (col)
                s += ",col " + col;
        }
        window.alert(s);
    }

    return false;
}

FrancaGlobals.getBrowserString = function () {
    var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*([\d\.]+)/i) || [];
    if (/trident/i.test(M[1])) {
        tem = /\brv[ :]+(\d+(\.\d+)?)/g.exec(ua) || [];
        return 'IE ' + (tem[1] || '');
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
    if ((tem = ua.match(/version\/([\.\d]+)/i)) != null)
        M[2] = tem[1];
    return M.join(' ');
}

var webAudioSupported = true;
if (!window.AudioBufferSourceNode) {
    webAudioSupported = false;
}
else {
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    if (!AudioBufferSourceNode.prototype.start) {
        if (!AudioBufferSourceNode.prototype.noteOn || !AudioBufferSourceNode.prototype.noteGrainOn) {
            webAudioSupported = false;
        }
        else {
            AudioBufferSourceNode.prototype.start = function (delay, offset, duration) {
                if (typeof delay != 'undefined') {
                    if (typeof offset != 'undefined' || typeof duration != 'undefined') {
                        this.noteGrainOn(delay, offset, duration);
                        return;
                    }
                    this.noteOn(delay);
                    return;
                }
                this.noteOn();
            };
        }
    }
    if (!AudioBufferSourceNode.prototype.stop) {
        if (!AudioBufferSourceNode.prototype.noteOff) {
            webAudioSupported = false;
        }
        else {
            AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;
        }
    }
}
if (webAudioSupported) {
    webAudioSupported = (typeof (AudioContext) !== "undefined");
}

// set a bunch of stuff indicating support for required features
FrancaGlobals.supportedFeatures = [];
if (typeof (Worker) !== "undefined") { FrancaGlobals.supportedFeatures.push("WebWorkers"); }
if (typeof (Storage) !== "undefined") { FrancaGlobals.supportedFeatures.push("LocalStorage"); }
if (webAudioSupported) { FrancaGlobals.supportedFeatures.push("WebAudio"); }
if (typeof (navigator.getGamepads) !== "undefined") { FrancaGlobals.supportedFeatures.push("Gamepad"); }

// fix ss.cast so that it casts from Number to Int32
if (ss.cast) {
    ss.cast_old = ss.cast;
    ss.cast = function ss$cast(instance, type) {
        if (type === ss.Int32 && typeof instance === "number") {
            return ss.Int32.trunc(instance);
        }
        return ss.cast_old(instance, type);
    };
}

// fix ss.isAssignableFrom so Int32 and such can be assigned from Number
if (ss.Int32.isAssignableFrom) {
    ss.Int32.isAssignableFrom_old = ss.Int32.isAssignableFrom;
    ss.Int32.isAssignableFrom = function Int32$isAssignableFrom(t) {
        if (ss.Int32.isAssignableFrom_old(t)) {
            return true;
        }
        if (t && t.name) {
            return t.name === 'Number';
        }
        return false;
    };
}
else {
    ss.Int32.isAssignableFrom = function Int32$isAssignableFrom(t) {
        if (t && t.name) {
            return t.name === 'Number';
        }
        return false;
    };
}

FrancaGlobals.setScriptHostType = function setScriptHostType(name, itype) {
    window[name] = itype;
}

FrancaGlobals.construct = function construct(constructor, args) {
    function F() {
        return constructor.apply(this, args);
    }
    F.prototype = constructor.prototype;
    return new F();
}

FrancaGlobals.getType = function getType(qname) {
    var t = ss.getType(qname);
    if (t) {
        return t;
    }
    var cacheName = qname.slice(0, qname.lastIndexOf(",")).trim();
    var t = ss.__genericCache[cacheName];
    if (t) {
        return t;
    }
    throw new Error("Could not get type for assembly qualified name " + qname);
}

FrancaGlobals.invokeScriptOverload = function invokeScriptOverload(overloads, methods, args, inst, isConstructor, name) {
    for (var i = 0; i < overloads.count; i++) {
        var types = overloads.get(i);
        if (args.length != types.length) {
            continue;
        }

        var failed = false;
        for (var j = 0; j < types.length; j++) {
            var type = types[j];
            var arg = args[j];

            if (!ss.isValue(arg)) {
                if (ss.isValue(type.__class) && type.__class == false) {
                    failed = true;
                    break;
                }
            }
            else if (!ss.isInstanceOfType(arg, type) && !ss.isAssignableFrom(type, ss.getInstanceType(arg))) {
                failed = true;
                break;
            }
        }

        if (failed) {
            continue;
        }

        for (var k = 0; k < types.length; k++) {
            args[k] = ss.isValue(args[k]) ? ss.unbox(ss.cast(args[k], types[k])) : null;
        }

        if (!isConstructor) {
            return inst[methods.get(i)].apply(inst, args);
        }
        else {
            var name = methods.get(i);
            if (name === "$default") {
                return FrancaGlobals.construct(inst, args);
            }
            else {
                return FrancaGlobals.construct(inst[methods.get(i)], args);
            }
        }
    }
    throw new Error("No overload found for " + name);
}

FrancaGlobals.bufferToBase64 = function bufferToBase64(buf) {
    var binstr = Array.prototype.map.call(buf, function (ch) {
        return String.fromCharCode(ch);
    }).join('');
    return btoa(binstr);
}
FrancaGlobals.base64ToBuffer = function base64ToBuffer(base64) {
    var binstr = atob(base64);
    var buf = new Uint8Array(binstr.length);
    Array.prototype.forEach.call(binstr, function (ch, i) {
        buf[i] = ch.charCodeAt(0);
    });
    return buf;
}

FrancaGlobals.toDynamicMap = function (o) {
    Object.defineProperty(o, "__isDynamicMap__", {
        "value": true
    });
    Object.defineProperty(o, "delete", {
        "value": function (key) {
            return delete this[key];
        }
    });
}

FrancaGlobals.newDynamicMap = function () {
    var o = {};
    FrancaGlobals.toDynamicMap(o);
    return o;
}


// Script: FrancaCommon.js
(function() {
	'use strict';
	var $asm = {};
	global.Coroutines = global.Coroutines || {};
	global.Franca = global.Franca || {};
	global.Franca.Collections = global.Franca.Collections || {};
	global.Franca.Compression = global.Franca.Compression || {};
	global.Franca.Easing = global.Franca.Easing || {};
	global.Franca.Gui = global.Franca.Gui || {};
	global.Franca.Gui.Documentation = global.Franca.Gui.Documentation || {};
	global.Franca.IO = global.Franca.IO || {};
	global.Franca.JS = global.Franca.JS || {};
	global.Franca.Localization = global.Franca.Localization || {};
	global.Franca.Mathematics = global.Franca.Mathematics || {};
	global.Franca.Serialization = global.Franca.Serialization || {};
	global.Franca.Serialization.Streaming = global.Franca.Serialization.Streaming || {};
	global.Franca.Text = global.Franca.Text || {};
	global.Franca.Text.UnicodeExtensions = global.Franca.Text.UnicodeExtensions || {};
	global.Franca.Tweening = global.Franca.Tweening || {};
	global.Franca.Tweening.Tweenable = global.Franca.Tweening.Tweenable || {};
	global.System = global.System || {};
	global.System.Collections = global.System.Collections || {};
	global.System.Collections.Generic = global.System.Collections.Generic || {};
	global.System.IO = global.System.IO || {};
	global.System.Linq = global.System.Linq || {};
	global.System.Reflection = global.System.Reflection || {};
	global.System.Runtime = global.System.Runtime || {};
	global.System.Runtime.InteropServices = global.System.Runtime.InteropServices || {};
	global.UniPrep = global.UniPrep || {};
	ss.initAssembly($asm, 'FrancaCommon');
	////////////////////////////////////////////////////////////////////////////////
	// Coroutines.CoResult
	var $Coroutines_CoResult$1 = function(T) {
		var $type = function() {
			this.returnValue = ss.getDefaultValue(T);
			this.exception = null;
			this.status = 0;
		};
		$type.$ctor1 = function(returnValue, e, status) {
			this.returnValue = ss.getDefaultValue(T);
			this.exception = null;
			this.status = 0;
			this.returnValue = returnValue;
			this.exception = e;
			this.status = status;
		};
		$type.getDefaultValue = function() {
			return new $type();
		};
		$type.op_Implicit = function(ret) {
			return ret.status !== 3;
		};
		ss.registerGenericClassInstance($type, $Coroutines_CoResult$1, [T], {
			toString: function() {
				return (ss.isValue(this.exception) ? this.exception.toString() : (ss.isValue(this.returnValue) ? this.returnValue.toString() : ''));
			},
			equals: function(obj) {
				if (ss.isNullOrUndefined(obj)) {
					return false;
				}
				var b = ss.safeCast(obj, $type);
				if (ss.isNullOrUndefined(b)) {
					return false;
				}
				return this.equalsT(ss.unbox(b));
			},
			equalsT: function(b) {
				var excEqual, valEqual;
				if (!ss.referenceEquals(this.exception, null)) {
					if (!ss.referenceEquals(b.exception, null)) {
						excEqual = ss.referenceEquals(ss.getInstanceType(b.exception), ss.getInstanceType(this.exception));
					}
					excEqual = false;
				}
				else {
					excEqual = ss.referenceEquals(b.exception, null);
				}
				valEqual = ss.EqualityComparer.def.areEqual(this.returnValue, b.returnValue);
				// avoid boxing
				return excEqual && valEqual && b.status === this.status;
			},
			getHashCode: function() {
				return (ss.isValue(this.returnValue) ? ss.getHashCode(this.returnValue) : 0) ^ (ss.isValue(this.exception) ? ss.getHashCode(ss.getInstanceType(this.exception)) : 0) ^ ss.getHashCode(this.status);
			},
			get_succeeded: function() {
				return ss.isNullOrUndefined(this.exception);
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IEquatable];
		});
		$type.__class = false;
		return $type;
	};
	$Coroutines_CoResult$1.__typeName = 'Coroutines.CoResult$1';
	ss.initGenericClass($Coroutines_CoResult$1, $asm, 1);
	global.Coroutines.CoResult$1 = $Coroutines_CoResult$1;
	////////////////////////////////////////////////////////////////////////////////
	// Coroutines.Coroutine
	var $Coroutines_Coroutine = function() {
		this.status = 0;
		this.$disposed = false;
	};
	$Coroutines_Coroutine.__typeName = 'Coroutines.Coroutine';
	$Coroutines_Coroutine.get_$running = function() {
		if (ss.isValue($Coroutines_Coroutine.$_running)) {
			return $Coroutines_Coroutine.$_running;
		}
		$Coroutines_Coroutine.$_running = new Array();
		return $Coroutines_Coroutine.$_running;
	};
	$Coroutines_Coroutine.wrap = function(T) {
		return function(f, throwErrors) {
			var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [T]))(f);
			$t1.set_throwErrors(throwErrors);
			var co = $t1;
			var wrapped = function(args) {
				if (co.status === 3) {
					co.reset();
				}
				return co.resume(args);
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.create = function(T) {
		return function(f, throwErrors) {
			var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [T]))(f);
			$t1.set_throwErrors(throwErrors);
			return $t1;
		};
	};
	$Coroutines_Coroutine.makeSynchronous = function(TRet) {
		return function(f) {
			var wrapped = function() {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f());
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(null).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSyncWithArgs = function(TRet) {
		return function(f) {
			var wrapped = function(args) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f());
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(args).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.push = function(co) {
		$Coroutines_Coroutine.get_$running().push(co);
	};
	$Coroutines_Coroutine.pop = function() {
		$Coroutines_Coroutine.get_$running().pop();
	};
	$Coroutines_Coroutine.args$1 = function(TArgs) {
		return function(type, isDefaultValue) {
			var current = $Coroutines_Coroutine.get_current();
			if (ss.isNullOrUndefined(current)) {
				throw new $Coroutines_CoroutineException.$ctor1("Can't retrieve coroutine arguments, no coroutine currently running");
			}
			return current.getArgs$1(TArgs).call(current, type, isDefaultValue);
		};
	};
	$Coroutines_Coroutine.args = function(TArgs) {
		return function(args, keepValueIfNull) {
			var current = $Coroutines_Coroutine.get_current();
			if (ss.isNullOrUndefined(current)) {
				throw new $Coroutines_CoroutineException.$ctor1("Can't retrieve coroutine arguments, no coroutine currently running");
			}
			return current.getArgs(TArgs).call(current, args, keepValueIfNull);
		};
	};
	$Coroutines_Coroutine.waitFor = function(seconds) {
		$Coroutines_Coroutine.waitFor$1(new ss.TimeSpan(seconds * 10000000));
	};
	$Coroutines_Coroutine.waitFor$1 = function(duration) {
		var current = $Coroutines_Coroutine.get_current();
		if (ss.isNullOrUndefined(current)) {
			throw new $Coroutines_CoroutineException.$ctor1("Can't wait for duration, no coroutine currently running");
		}
		current.wait(duration);
	};
	$Coroutines_Coroutine.waitUntil = function(predicate) {
		var current = $Coroutines_Coroutine.get_current();
		if (ss.isNullOrUndefined(current)) {
			throw new $Coroutines_CoroutineException.$ctor1("Can't wait until predicate, no coroutine currently running");
		}
		current.wait$1(predicate, 2);
	};
	$Coroutines_Coroutine.waitWhile = function(predicate) {
		var current = $Coroutines_Coroutine.get_current();
		if (ss.isNullOrUndefined(current)) {
			throw new $Coroutines_CoroutineException.$ctor1("Can't wait while predicate, no coroutine currently running");
		}
		current.wait$1(predicate, 3);
	};
	$Coroutines_Coroutine.get_current = function() {
		return (($Coroutines_Coroutine.get_$running().length > 0) ? ss.arrayPeekBack($Coroutines_Coroutine.get_$running()) : null);
	};
	$Coroutines_Coroutine.resume = function(co, args) {
		co._Resume(args);
		return co.status !== 3;
	};
	$Coroutines_Coroutine.makeSynchronous$1 = function(TArg1, TRet) {
		return function(f) {
			var wrapped = function(v1) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(null).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSyncWithArgs$1 = function(TArg1, TRet) {
		return function(f) {
			var wrapped = function(args, v1) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(args).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSynchronous$2 = function(TArg1, TArg2, TRet) {
		return function(f) {
			var wrapped = function(v1, v2) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(null).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSyncWithArgs$2 = function(TArg1, TArg2, TRet) {
		return function(f) {
			var wrapped = function(args, v1, v2) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(args).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSynchronous$3 = function(TArg1, TArg2, TArg3, TRet) {
		return function(f) {
			var wrapped = function(v1, v2, v3) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2, v3));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(null).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSyncWithArgs$3 = function(TArg1, TArg2, TArg3, TRet) {
		return function(f) {
			var wrapped = function(args, v1, v2, v3) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2, v3));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(args).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSynchronous$4 = function(TArg1, TArg2, TArg3, TArg4, TRet) {
		return function(f) {
			var wrapped = function(v1, v2, v3, v4) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2, v3, v4));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(null).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSyncWithArgs$4 = function(TArg1, TArg2, TArg3, TArg4, TRet) {
		return function(f) {
			var wrapped = function(args, v1, v2, v3, v4) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2, v3, v4));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(args).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSynchronous$5 = function(TArg1, TArg2, TArg3, TArg4, TArg5, TRet) {
		return function(f) {
			var wrapped = function(v1, v2, v3, v4, v5) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2, v3, v4, v5));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(null).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSyncWithArgs$5 = function(TArg1, TArg2, TArg3, TArg4, TArg5, TRet) {
		return function(f) {
			var wrapped = function(args, v1, v2, v3, v4, v5) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2, v3, v4, v5));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(args).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSynchronous$6 = function(TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TRet) {
		return function(f) {
			var wrapped = function(v1, v2, v3, v4, v5, v6) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2, v3, v4, v5, v6));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(null).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSyncWithArgs$6 = function(TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TRet) {
		return function(f) {
			var wrapped = function(args, v1, v2, v3, v4, v5, v6) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2, v3, v4, v5, v6));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(args).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSynchronous$7 = function(TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TRet) {
		return function(f) {
			var wrapped = function(v1, v2, v3, v4, v5, v6, v7) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2, v3, v4, v5, v6, v7));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(null).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSyncWithArgs$7 = function(TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TRet) {
		return function(f) {
			var wrapped = function(args, v1, v2, v3, v4, v5, v6, v7) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2, v3, v4, v5, v6, v7));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(args).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	$Coroutines_Coroutine.makeSynchronous$8 = function(TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TRet) {
		return function(f) {
			var wrapped = function(v1, v2, v3, v4, v5, v6, v7, v8) {
				var $t1 = new (ss.makeGenericType($Coroutines_Coroutine$1, [TRet]))(f(v1, v2, v3, v4, v5, v6, v7, v8));
				$t1.set_throwErrors(true);
				var co = $t1;
				while (co.resume(null).status !== 3) {
				}
				return co.get_result().returnValue;
			};
			return wrapped;
		};
	};
	global.Coroutines.Coroutine = $Coroutines_Coroutine;
	////////////////////////////////////////////////////////////////////////////////
	// Coroutines.Coroutine
	var $Coroutines_Coroutine$1 = function(T) {
		var $type = function(f) {
			this.$f = null;
			this.$enumerator = null;
			this.$result = ss.getDefaultValue(ss.makeGenericType($Coroutines_CoResult$1, [T]));
			this.$args = null;
			this.$waitType = 0;
			this.$waitPredicate = null;
			this.$waitDuration = ss.getDefaultValue(ss.TimeSpan);
			this.$_timer = null;
			this.$disposed$1 = false;
			this.$2$ThrowErrorsField = false;
			$Coroutines_Coroutine.call(this);
			this.$f = f;
			this.status = 0;
		};
		$type.$ctor1 = function(del) {
			this.$f = null;
			this.$enumerator = null;
			this.$result = ss.getDefaultValue(ss.makeGenericType($Coroutines_CoResult$1, [T]));
			this.$args = null;
			this.$waitType = 0;
			this.$waitPredicate = null;
			this.$waitDuration = ss.getDefaultValue(ss.TimeSpan);
			this.$_timer = null;
			this.$disposed$1 = false;
			this.$2$ThrowErrorsField = false;
			$Coroutines_Coroutine.call(this);
			this.$f = del();
			this.status = 0;
		};
		ss.registerGenericClassInstance($type, $Coroutines_Coroutine$1, [T], {
			get_$timer: function() {
				if (ss.isValue(this.$_timer)) {
					return this.$_timer;
				}
				this.$_timer = new ss.Stopwatch();
				return this.$_timer;
			},
			$makeResult: function(value, e) {
				this.$result = new (ss.makeGenericType($Coroutines_CoResult$1, [T]).$ctor1)(value, e, this.status);
				return this.$result;
			},
			_Resume: function(args) {
				this.resume(args);
			},
			resume: function(args) {
				this.$args = args;
				if (this.status === 3) {
					if (this.get_throwErrors()) {
						var deadEx = new $Coroutines_CoroutineException.$ctor1('Cannot Resume dead Coroutine');
						this.$makeResult(ss.getDefaultValue(T), deadEx);
						throw deadEx;
					}
					return this.$makeResult(ss.getDefaultValue(T), new $Coroutines_CoroutineException.$ctor1('Cannot Resume dead Coroutine'));
				}
				if (this.$waitType !== 0) {
					switch (this.$waitType) {
						default: {
							throw new $Coroutines_CoroutineException.$ctor1('Invalid wait type in coroutine');
						}
						case 1: {
							if (this.get_$timer().timeSpan().ticks < this.$waitDuration.ticks) {
								this.status = 1;
								return this.$makeResult(ss.getDefaultValue(T), null);
							}
							break;
						}
						case 2:
						case 3: {
							var predicateResult = this.$waitPredicate();
							if (predicateResult && this.$waitType === 3 || !predicateResult && this.$waitType === 2) {
								this.status = 1;
								return this.$makeResult(ss.getDefaultValue(T), null);
							}
							break;
						}
					}
					this.$waitType = 0;
					this.$waitPredicate = null;
				}
				if (ss.isNullOrUndefined(this.$enumerator)) {
					this.$enumerator = ss.getEnumerator(this.$f);
				}
				this.status = 2;
				var running = false;
				var exception = null;
				$Coroutines_Coroutine.push(this);
				try {
					running = this.$enumerator.moveNext();
				}
				catch ($t1) {
					var e = ss.Exception.wrap($t1);
					if (this.get_throwErrors()) {
						this.status = 3;
						this.$makeResult(ss.getDefaultValue(T), exception);
						throw $t1;
					}
					else {
						exception = e;
					}
				}
				finally {
					$Coroutines_Coroutine.pop();
				}
				if (ss.isValue(exception)) {
					this.status = 3;
					return this.$makeResult(ss.getDefaultValue(T), exception);
				}
				else if (running) {
					this.status = 0;
					return this.$makeResult(this.$enumerator.current(), null);
				}
				else {
					this.status = 3;
					this.$makeResult(this.$enumerator.current(), null);
					this.$enumerator.dispose();
					this.$enumerator = null;
					return this.$result;
				}
			},
			reset: function() {
				if (ss.isValue(this.$enumerator)) {
					this.$enumerator.dispose();
					this.$enumerator = null;
				}
				this.status = 0;
			},
			getArgs$1: function(TArgs) {
				return function(type, isDefaultValue) {
					if (ss.isNullOrUndefined(this.$args) && isDefaultValue) {
						return type;
					}
					return ss.cast(this.$args, TArgs);
				};
			},
			getArgs: function(TArgs) {
				return function(args, keepValueIfNull) {
					if (ss.isNullOrUndefined(this.$args) && keepValueIfNull) {
						return args.$;
					}
					args.$ = ss.cast(this.$args, TArgs);
					return args.$;
				};
			},
			wait: function(duration) {
				this.get_$timer().restart();
				this.$waitDuration = duration;
				this.$waitType = 1;
			},
			wait$1: function(predicate, type) {
				if (type !== 2 && type !== 3) {
					throw new $Coroutines_CoroutineException.$ctor1('Invalid wait type for coroutine with predicate');
				}
				this.$waitPredicate = predicate;
				this.$waitType = type;
			},
			dispose$1: function(disposing) {
				$Coroutines_Coroutine.prototype.dispose$1.call(this, disposing);
				if (this.$disposed$1) {
					return;
				}
				if (disposing) {
					// Free any other managed objects here.
					if (ss.isValue(this.$enumerator)) {
						this.$enumerator.dispose();
						this.$enumerator = null;
					}
				}
				// Free any unmanaged objects here.
				this.$disposed$1 = true;
			},
			get_result: function() {
				return this.$result;
			},
			get_throwErrors: function() {
				return this.$2$ThrowErrorsField;
			},
			set_throwErrors: function(value) {
				this.$2$ThrowErrorsField = value;
			},
			get_returnValue: function() {
				return this.$result.returnValue;
			},
			get_exception: function() {
				return this.$result.exception;
			}
		}, function() {
			return $Coroutines_Coroutine;
		}, function() {
			return [ss.IDisposable];
		});
		$type.$ctor1.prototype = $type.prototype;
		return $type;
	};
	$Coroutines_Coroutine$1.__typeName = 'Coroutines.Coroutine$1';
	ss.initGenericClass($Coroutines_Coroutine$1, $asm, 1);
	global.Coroutines.Coroutine$1 = $Coroutines_Coroutine$1;
	////////////////////////////////////////////////////////////////////////////////
	// Coroutines.CoroutineException
	var $Coroutines_CoroutineException = function() {
		ss.Exception.call(this);
	};
	$Coroutines_CoroutineException.__typeName = 'Coroutines.CoroutineException';
	$Coroutines_CoroutineException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Coroutines_CoroutineException.$ctor2 = function(message, inner) {
		ss.Exception.call(this, message, inner);
	};
	global.Coroutines.CoroutineException = $Coroutines_CoroutineException;
	////////////////////////////////////////////////////////////////////////////////
	// Coroutines.CoroutinePool
	var $Coroutines_CoroutinePool = function() {
		this.$coroutines = null;
		this.$deadList = null;
		this.$addList = null;
		this.$remList = null;
		this.$iterating = false;
		this.$1$OnErrorField = null;
		this.$1$OnEndField = null;
		this.$disposed = false;
		this.$coroutines = new (ss.makeGenericType($System_Collections_Generic_HashSet$1, [$Coroutines_Coroutine]))();
		this.$deadList = [];
		this.$addList = [];
		this.$remList = [];
	};
	$Coroutines_CoroutinePool.__typeName = 'Coroutines.CoroutinePool';
	global.Coroutines.CoroutinePool = $Coroutines_CoroutinePool;
	////////////////////////////////////////////////////////////////////////////////
	// Coroutines.CoStatus
	var $Coroutines_CoStatus = function() {
	};
	$Coroutines_CoStatus.__typeName = 'Coroutines.CoStatus';
	global.Coroutines.CoStatus = $Coroutines_CoStatus;
	////////////////////////////////////////////////////////////////////////////////
	// Coroutines.CoWaitType
	var $Coroutines_CoWaitType = function() {
	};
	$Coroutines_CoWaitType.__typeName = 'Coroutines.CoWaitType';
	global.Coroutines.CoWaitType = $Coroutines_CoWaitType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IPlatformProvider
	var $Franca_$IPlatformProvider = function() {
	};
	$Franca_$IPlatformProvider.__typeName = 'Franca.$IPlatformProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JSPlatform
	var $Franca_$JSPlatform = function() {
		this.$protocolRegex = new $Franca_Text_Regex('\\w+:\\/\\/', 0);
		var $t1 = document.createElement('a');
		this.$anchor = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'A'));
		this.$pathSeparator = '/';
	};
	$Franca_$JSPlatform.__typeName = 'Franca.$JSPlatform';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.StringHelper.CaseInsensitiveStringComparer
	var $Franca_$StringHelper$CaseInsensitiveStringComparer = function() {
	};
	$Franca_$StringHelper$CaseInsensitiveStringComparer.__typeName = 'Franca.$StringHelper$CaseInsensitiveStringComparer';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Benchmark
	var $Franca_Benchmark = function() {
	};
	$Franca_Benchmark.__typeName = 'Franca.Benchmark';
	$Franca_Benchmark.$_Run = function(func, iterations) {
		$Franca_Benchmark.$watch.start();
		for (var i = 0; i < iterations; i++) {
			func();
		}
		var elapsed = $Franca_Benchmark.$watch.timeSpan();
		$Franca_Benchmark.$watch.stop();
		$Franca_Benchmark.$watch.reset();
		return elapsed.ticks / 10000 / iterations;
	};
	$Franca_Benchmark.run = function(func, iterations) {
		var delegateGuestimate = $Franca_Benchmark.$_Run(function() {
		}, iterations);
		var time = $Franca_Benchmark.$_Run(func, iterations) - delegateGuestimate;
		if (time <= 0) {
			//return Run(func, iterations * 1000);
			return Number.NaN;
		}
		return time;
	};
	global.Franca.Benchmark = $Franca_Benchmark;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BinaryData
	var $Franca_BinaryData = function() {
		this.$dataEndian = 0;
		this.$littleEndian = $Franca_BinConverter.get_isLittleEndian();
		this.length = 0;
		this.$location = 0;
		this.$buffer = null;
		this.$_view = null;
		this.$dataEndian = (this.$littleEndian ? 0 : 1);
	};
	$Franca_BinaryData.__typeName = 'Franca.BinaryData';
	$Franca_BinaryData.$ctor1 = function(data) {
		$Franca_BinaryData.call(this);
		this.$buffer = new Uint8Array(data.$buffer.buffer);
		this.length = this.$buffer.length;
	};
	$Franca_BinaryData.$ctor_fromArrayBuffer = function(buffer) {
		$Franca_BinaryData.call(this);
		this.$buffer = new Uint8Array(buffer);
		this.length = this.$buffer.length;
	};
	$Franca_BinaryData.$ctor4 = function(buffer) {
		$Franca_BinaryData.call(this);
		this.$buffer = new Uint8Array(buffer.buffer);
		this.length = this.$buffer.length;
	};
	$Franca_BinaryData.$ctor5 = function(length) {
		$Franca_BinaryData.call(this);
		this.length = length;
		this.$buffer = new Uint8Array(length);
	};
	$Franca_BinaryData.$ctor3 = function(bytes) {
		$Franca_BinaryData.call(this);
		this.length = bytes.length;
		this.$buffer = new Uint8Array(bytes);
	};
	$Franca_BinaryData.$ctor6 = function(bytes, index, count) {
		this.$dataEndian = 0;
		this.$littleEndian = $Franca_BinConverter.get_isLittleEndian();
		this.length = 0;
		this.$location = 0;
		this.$buffer = null;
		this.$_view = null;
		this.length = count;
		this.$buffer = new Uint8Array(bytes.slice(index, count));
	};
	$Franca_BinaryData.$ctor2 = function(reader) {
		$Franca_BinaryData.call(this);
		if (!reader.isArray() && !reader.isString() && !reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		if (reader.isString()) {
			var data = $Franca_Text_Base64.decode(reader.readString(false, 0, -1));
			this.$copyFrom(data);
		}
		else if (reader.isObject()) {
			var _requiredField_binary = false;
			var $t1 = reader.readObject().getEnumerator();
			try {
				while ($t1.moveNext()) {
					var _objIter1 = $t1.current();
					switch (_objIter1.key) {
						default: {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						case 'binary': {
							{
								_requiredField_binary = true;
								if (!reader.isString()) {
									throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
								}
								var data1 = $Franca_Text_Base64.decode(reader.readString(false, 0, -1));
								this.$copyFrom(data1);
							}
							break;
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
			if (!_requiredField_binary) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		}
		else {
			var data2 = reader.readBinary(0, -1);
			this.$copyFrom(data2);
		}
	};
	$Franca_BinaryData.blockCopy$1 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.$byteLength(src) || destOffset + count > $System_Buffer.byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcArr = src.get_uint8Array();
		var srcEnd = srcOffset + count;
		for (var i = srcOffset, j = destOffset; i < srcEnd; i++, j++) {
			dest[j] = srcArr[i];
		}
	};
	$Franca_BinaryData.blockCopy$2 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength(src) || destOffset + count > $System_Buffer.$byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		if (srcOffset === 0 && count === src.length) {
			dest.get_uint8Array().set(src, destOffset);
		}
		else {
			dest.get_uint8Array().set(new Uint8Array((new Uint8Array(src)).buffer, srcOffset, count), destOffset);
		}
	};
	$Franca_BinaryData.blockCopy = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.$byteLength(src) || destOffset + count > $System_Buffer.$byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		dest.get_uint8Array().set(new Uint8Array(src.get_uint8Array().buffer, srcOffset, count), destOffset);
	};
	$Franca_BinaryData.op_Explicit = function(data) {
		return data.$buffer;
	};
	global.Franca.BinaryData = $Franca_BinaryData;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BinaryStream
	var $Franca_BinaryStream = function() {
		$System_IO_MemoryStream.call(this);
	};
	$Franca_BinaryStream.__typeName = 'Franca.BinaryStream';
	$Franca_BinaryStream.$ctor2 = function(capacity) {
		$System_IO_MemoryStream.$ctor2.call(this, capacity);
	};
	$Franca_BinaryStream.$ctor1 = function(buffer) {
		$System_IO_MemoryStream.call(this);
		if (ss.isNullOrUndefined(buffer)) {
			throw new ss.ArgumentNullException('buffer');
		}
		this.internalConstructor(buffer, 0, buffer.get_length(), true, true);
	};
	$Franca_BinaryStream.$ctor3 = function(buffer, writable) {
		$System_IO_MemoryStream.call(this);
		if (ss.isNullOrUndefined(buffer)) {
			throw new ss.ArgumentNullException('buffer');
		}
		this.internalConstructor(buffer, 0, buffer.get_length(), writable, true);
	};
	$Franca_BinaryStream.$ctor4 = function(buffer, index, count) {
		$System_IO_MemoryStream.call(this);
		this.internalConstructor(buffer, index, count, true, true);
	};
	$Franca_BinaryStream.$ctor5 = function(buffer, index, count, writable) {
		$System_IO_MemoryStream.call(this);
		this.internalConstructor(buffer, index, count, writable, true);
	};
	$Franca_BinaryStream.$ctor6 = function(buffer, index, count, writable, publiclyVisible) {
		$System_IO_MemoryStream.call(this);
		this.internalConstructor(buffer, index, count, writable, publiclyVisible);
	};
	global.Franca.BinaryStream = $Franca_BinaryStream;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BinaryTextFormat
	var $Franca_BinaryTextFormat = function() {
	};
	$Franca_BinaryTextFormat.__typeName = 'Franca.BinaryTextFormat';
	global.Franca.BinaryTextFormat = $Franca_BinaryTextFormat;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BinConverter
	var $Franca_BinConverter = function() {
	};
	$Franca_BinConverter.__typeName = 'Franca.BinConverter';
	$Franca_BinConverter.get_isLittleEndian = function() {
		return $Franca_BinConverter.$isLittleEndian;
	};
	$Franca_BinConverter.get_systemEndian = function() {
		return ($Franca_BinConverter.$isLittleEndian ? 0 : 1);
	};
	$Franca_BinConverter.toUInt16$1 = function(data, startIndex, sourceEndian) {
		return $Franca_BinConverter.toUInt16(new $Franca_BinaryData.$ctor6(data, startIndex, 2), 0, sourceEndian);
	};
	$Franca_BinConverter.toUInt16 = function(data, startIndex, sourceEndian) {
		return data.readUInt16$3(startIndex, sourceEndian);
	};
	$Franca_BinConverter.toInt16$1 = function(data, startIndex, sourceEndian) {
		return $Franca_BinConverter.toInt16(new $Franca_BinaryData.$ctor6(data, startIndex, 2), 0, sourceEndian);
	};
	$Franca_BinConverter.toInt16 = function(data, startIndex, sourceEndian) {
		return data.readInt16$3(startIndex, sourceEndian);
	};
	$Franca_BinConverter.toUInt32$1 = function(data, startIndex, sourceEndian) {
		return $Franca_BinConverter.toUInt32(new $Franca_BinaryData.$ctor6(data, startIndex, 4), 0, sourceEndian);
	};
	$Franca_BinConverter.toUInt32 = function(data, startIndex, sourceEndian) {
		return data.readUInt32$3(startIndex, sourceEndian);
	};
	$Franca_BinConverter.toInt32$1 = function(data, startIndex, sourceEndian) {
		return $Franca_BinConverter.toInt32(new $Franca_BinaryData.$ctor6(data, startIndex, 4), 0, sourceEndian);
	};
	$Franca_BinConverter.toInt32 = function(data, startIndex, sourceEndian) {
		return data.readInt32$3(startIndex, sourceEndian);
	};
	$Franca_BinConverter.toSingle$1 = function(data, startIndex, sourceEndian) {
		return $Franca_BinConverter.toSingle(new $Franca_BinaryData.$ctor6(data, startIndex, 4), 0, sourceEndian);
	};
	$Franca_BinConverter.toSingle = function(data, startIndex, sourceEndian) {
		return data.readSingle$3(startIndex, sourceEndian);
	};
	$Franca_BinConverter.toDouble$1 = function(data, startIndex, sourceEndian) {
		return $Franca_BinConverter.toDouble(new $Franca_BinaryData.$ctor6(data, startIndex, 8), 0, sourceEndian);
	};
	$Franca_BinConverter.toDouble = function(data, startIndex, sourceEndian) {
		return data.readDouble$3(startIndex, sourceEndian);
	};
	$Franca_BinConverter.toBoolean$1 = function(data, startIndex) {
		return data[startIndex] !== 0;
	};
	$Franca_BinConverter.toBoolean = function(data, startIndex) {
		return data.get_item(startIndex) !== 0;
	};
	$Franca_BinConverter.writeBytes$1 = function(dest, index, value) {
		dest[index] = (value ? 1 : 0);
	};
	$Franca_BinConverter.writeBytes = function(dest, index, value) {
		dest.set_item(index, (value ? 1 : 0));
	};
	$Franca_BinConverter.$copyBytes = function(data, dest, destIndex, size) {
		for (var i = 0; i < size; i++) {
			dest[destIndex + i] = data.get_item(i);
		}
	};
	$Franca_BinConverter.writeBytes$9 = function(dest, index, value, targetEndian) {
		$Franca_BinConverter.$dataConverter.writeInt16$3(value, 0, targetEndian);
		$Franca_BinConverter.$copyBytes($Franca_BinConverter.$dataConverter, dest, index, 2);
	};
	$Franca_BinConverter.writeBytes$3 = function(dest, index, value, targetEndian) {
		dest.writeInt16$3(value, index, targetEndian);
	};
	$Franca_BinConverter.writeBytes$a = function(dest, index, value, targetEndian) {
		$Franca_BinConverter.$dataConverter.writeInt32$3(value, 0, targetEndian);
		$Franca_BinConverter.$copyBytes($Franca_BinConverter.$dataConverter, dest, index, 4);
	};
	$Franca_BinConverter.writeBytes$4 = function(dest, index, value, targetEndian) {
		dest.writeInt32$3(value, index, targetEndian);
	};
	$Franca_BinConverter.writeBytes$b = function(dest, index, value, targetEndian) {
		$Franca_BinConverter.$dataConverter.writeSingle$3(value, 0, targetEndian);
		$Franca_BinConverter.$copyBytes($Franca_BinConverter.$dataConverter, dest, index, 4);
	};
	$Franca_BinConverter.writeBytes$5 = function(dest, index, value, targetEndian) {
		dest.writeSingle$3(value, index, targetEndian);
	};
	$Franca_BinConverter.writeBytes$8 = function(dest, index, value, targetEndian) {
		$Franca_BinConverter.$dataConverter.writeDouble$3(value, 0, targetEndian);
		$Franca_BinConverter.$copyBytes($Franca_BinConverter.$dataConverter, dest, index, 8);
	};
	$Franca_BinConverter.writeBytes$2 = function(dest, index, value, targetEndian) {
		dest.writeDouble$3(value, index, targetEndian);
	};
	$Franca_BinConverter.writeBytes$c = function(dest, index, value, targetEndian) {
		$Franca_BinConverter.$dataConverter.writeUInt16$3(value, 0, targetEndian);
		$Franca_BinConverter.$copyBytes($Franca_BinConverter.$dataConverter, dest, index, 2);
	};
	$Franca_BinConverter.writeBytes$6 = function(dest, index, value, targetEndian) {
		dest.writeUInt16$3(value, index, targetEndian);
	};
	$Franca_BinConverter.writeBytes$d = function(dest, index, value, targetEndian) {
		$Franca_BinConverter.$dataConverter.writeUInt32$3(value, 0, targetEndian);
		$Franca_BinConverter.$copyBytes($Franca_BinConverter.$dataConverter, dest, index, 4);
	};
	$Franca_BinConverter.writeBytes$7 = function(dest, index, value, targetEndian) {
		dest.writeUInt32$3(value, index, targetEndian);
	};
	global.Franca.BinConverter = $Franca_BinConverter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BinDataReader
	var $Franca_BinDataReader = function(binStream, defaultEndian, leaveOpen) {
		this.$binStream = null;
		this.$buffer = null;
		this.$leaveOpen = false;
		this.$disposed = false;
		this.$binStream = binStream;
		var $t1 = new $Franca_BinaryData.$ctor5(16);
		$t1.set_endian(defaultEndian);
		this.$buffer = $t1;
		this.$leaveOpen = leaveOpen;
	};
	$Franca_BinDataReader.__typeName = 'Franca.BinDataReader';
	global.Franca.BinDataReader = $Franca_BinDataReader;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BinDataStreamReader
	var $Franca_BinDataStreamReader = function(stream, defaultEndian) {
		$Franca_BinDataStreamReader.$ctor1.call(this, stream, defaultEndian, false);
	};
	$Franca_BinDataStreamReader.__typeName = 'Franca.BinDataStreamReader';
	$Franca_BinDataStreamReader.$ctor1 = function(stream, defaultEndian, leaveOpen) {
		this.$leaveOpen = false;
		this.$stream = null;
		this.$binStream = null;
		this.$buffer = null;
		this.$bufferBytes = null;
		this.$disposed = false;
		this.$disposedValue = false;
		if (ss.isNullOrUndefined(stream)) {
			throw new ss.ArgumentNullException('Input is a null reference.');
		}
		this.$stream = stream;
		var $t1 = new $Franca_BinaryData.$ctor5(16);
		$t1.set_endian(defaultEndian);
		this.$buffer = $t1;
		this.$leaveOpen = leaveOpen;
		this.$binStream = ss.safeCast(this.$stream, $Franca_IBinaryStream);
		this.$bufferBytes = new Array(this.$buffer.get_length());
	};
	$Franca_BinDataStreamReader.get_$readTempBuffer = function() {
		return $Franca_BinDataStreamReader.$_readTempBuffer || ($Franca_BinDataStreamReader.$_readTempBuffer = new Array(4096));
	};
	global.Franca.BinDataStreamReader = $Franca_BinDataStreamReader;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BinDataStreamWriter
	var $Franca_BinDataStreamWriter = function(stream, defaultEndian) {
		$Franca_BinDataStreamWriter.$ctor1.call(this, stream, defaultEndian, false);
	};
	$Franca_BinDataStreamWriter.__typeName = 'Franca.BinDataStreamWriter';
	$Franca_BinDataStreamWriter.$ctor1 = function(stream, defaultEndian, leaveOpen) {
		this.$leaveOpen = false;
		this.$stream = null;
		this.$binStream = null;
		this.$buffer = null;
		this.$bufferBytes = null;
		this.$disposed = false;
		if (ss.isNullOrUndefined(stream)) {
			throw new ss.ArgumentNullException('Input is a null reference.');
		}
		this.$stream = stream;
		var $t1 = new $Franca_BinaryData.$ctor5(16);
		$t1.set_endian(defaultEndian);
		this.$buffer = $t1;
		this.$leaveOpen = leaveOpen;
		this.$binStream = ss.safeCast(this.$stream, $Franca_IBinaryStream);
		this.$bufferBytes = new Array(this.$buffer.get_length());
	};
	$Franca_BinDataStreamWriter.get_$tempBuffer = function() {
		return $Franca_BinDataStreamWriter.$_tempBuffer || ($Franca_BinDataStreamWriter.$_tempBuffer = new Array(4096));
	};
	global.Franca.BinDataStreamWriter = $Franca_BinDataStreamWriter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BinDataWriter
	var $Franca_BinDataWriter = function(binStream, defaultEndian, leaveOpen) {
		this.$binStream = null;
		this.$buffer = null;
		this.$leaveOpen = false;
		this.$binStream = binStream;
		var $t1 = new $Franca_BinaryData.$ctor5(16);
		$t1.set_endian(defaultEndian);
		this.$buffer = $t1;
		this.$leaveOpen = leaveOpen;
	};
	$Franca_BinDataWriter.__typeName = 'Franca.BinDataWriter';
	global.Franca.BinDataWriter = $Franca_BinDataWriter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ByteExtensions
	var $Franca_ByteExtensions = function() {
	};
	$Franca_ByteExtensions.__typeName = 'Franca.ByteExtensions';
	$Franca_ByteExtensions.toHex = function(b, lowerCase) {
		var first = (b & 240) >> 4;
		var second = b & 15;
		if (lowerCase) {
			return ss.formatString('{0}{1}', ((first < 10) ? String.fromCharCode(48 + first) : String.fromCharCode(87 + first)), ((second < 10) ? String.fromCharCode(48 + second) : String.fromCharCode(87 + second)));
		}
		else {
			return ss.formatString('{0}{1}', ((first < 10) ? String.fromCharCode(48 + first) : String.fromCharCode(55 + first)), ((second < 10) ? String.fromCharCode(48 + second) : String.fromCharCode(55 + second)));
		}
	};
	$Franca_ByteExtensions.toHex$1 = function(b, str, lowerCase) {
		var first = (b & 240) >> 4;
		var second = b & 15;
		if (lowerCase) {
			str.append(((first < 10) ? String.fromCharCode(48 + first) : String.fromCharCode(87 + first)));
			str.append(((second < 10) ? String.fromCharCode(48 + second) : String.fromCharCode(87 + second)));
		}
		else {
			str.append(((first < 10) ? String.fromCharCode(48 + first) : String.fromCharCode(55 + first)));
			str.append(((second < 10) ? String.fromCharCode(48 + second) : String.fromCharCode(55 + second)));
		}
	};
	global.Franca.ByteExtensions = $Franca_ByteExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Calc
	var $Franca_Calc = function() {
	};
	$Franca_Calc.__typeName = 'Franca.Calc';
	$Franca_Calc.center = function(parentWidth, childWidth, options) {
		var value = (parentWidth - childWidth) / 2;
		switch (options) {
			default:
			case 0: {
				return value;
			}
			case 1: {
				return ss.Int32.trunc(Math.floor(value));
			}
			case 2: {
				return ss.Int32.trunc(Math.ceil(value));
			}
			case 3: {
				return Math.round(value);
			}
			case 4: {
				return ss.Int32.trunc(value);
			}
		}
	};
	$Franca_Calc.wave = function(t) {
		return Math.sin(t) / 2 + 0.5;
	};
	$Franca_Calc.waveF = function(t) {
		return Math.sin(t) / 2 + 0.5;
	};
	$Franca_Calc.wave$1 = function(t, multiplier) {
		return Math.sin(t.ticks / 10000000 * multiplier) / 2 + 0.5;
	};
	$Franca_Calc.waveF$1 = function(t, multiplier) {
		return Math.sin(t.ticks / 10000000 * multiplier) / 2 + 0.5;
	};
	$Franca_Calc.smoothStep = function(edge0, edge1, x) {
		// Scale, bias and saturate x to 0..1 range
		x = $Franca_Calc.clamp$3((x - edge0) / (edge1 - edge0), 0, 1);
		// Evaluate polynomial
		return x * x * (3 - 2 * x);
	};
	$Franca_Calc.bilinear$1 = function(loc, topLeft, topRight, bottomLeft, bottomRight) {
		var x1 = $Franca_Calc.lerp$2(topLeft, topRight, loc.x);
		var x2 = $Franca_Calc.lerp$2(bottomLeft, bottomRight, loc.x);
		return $Franca_Calc.lerp$2(x1, x2, loc.y);
	};
	$Franca_Calc.bilinear = function(loc, values) {
		var x1 = $Franca_Calc.lerp$2(ss.arrayGet(values, 0, 0), ss.arrayGet(values, 1, 0), loc.x);
		var x2 = $Franca_Calc.lerp$2(ss.arrayGet(values, 0, 1), ss.arrayGet(values, 1, 1), loc.x);
		return $Franca_Calc.lerp$2(x1, x2, loc.y);
	};
	$Franca_Calc.mod$3 = function(a, n) {
		if (n === 0) {
			throw new ss.ArgumentOutOfRangeException('n', '(a mod 0) is undefined.');
		}
		//puts a in the [-n+1, n-1] range using the remainder operator
		var remainder = a % n;
		//if the remainder is less than zero, add n to put it in the [0, n-1] range if n is positive
		//if the remainder is greater than zero, add n to put it in the [n-1, 0] range if n is negative
		if (n > 0 && remainder < 0 || n < 0 && remainder > 0) {
			return remainder + n;
		}
		return remainder;
	};
	$Franca_Calc.mod$2 = function(a, n) {
		if (n === 0) {
			throw new ss.ArgumentOutOfRangeException('n', '(a mod 0) is undefined.');
		}
		//puts a in the [-n+1, n-1] range using the remainder operator
		var remainder = a % n;
		//if the remainder is less than zero, add n to put it in the [0, n-1] range if n is positive
		//if the remainder is greater than zero, add n to put it in the [n-1, 0] range if n is negative
		if (n > 0 && remainder < 0 || n < 0 && remainder > 0) {
			return remainder + n;
		}
		return remainder;
	};
	$Franca_Calc.clamp$3 = function(value, min, max) {
		if (value < min) {
			value = min;
		}
		else if (value > max) {
			value = max;
		}
		return value;
	};
	$Franca_Calc.clamp$2 = function(value, min, max) {
		if (value.$ < min) {
			value.$ = min;
		}
		else if (value.$ > max) {
			value.$ = max;
		}
	};
	$Franca_Calc.clamp$7 = function(value, min, max) {
		if (value < min) {
			value = min;
		}
		else if (value > max) {
			value = max;
		}
		return value;
	};
	$Franca_Calc.clamp$6 = function(value, min, max) {
		if (value.$ < min) {
			value.$ = min;
		}
		else if (value.$ > max) {
			value.$ = max;
		}
	};
	$Franca_Calc.clamp$5 = function(value, min, max) {
		if (value < min) {
			value = min;
		}
		else if (value > max) {
			value = max;
		}
		return value;
	};
	$Franca_Calc.clamp$4 = function(value, min, max) {
		if (value.$ < min) {
			value.$ = min;
		}
		else if (value.$ > max) {
			value.$ = max;
		}
	};
	$Franca_Calc.roundF = function(value, precision) {
		if (precision === 0) {
			return Math.round(value);
		}
		var multiplier = Math.pow(10, precision);
		return Math.round(value * multiplier) / multiplier;
	};
	$Franca_Calc.ceilingF = function(value, precision) {
		if (precision === 0) {
			return Math.ceil(value);
		}
		var multiplier = Math.pow(10, precision);
		return Math.ceil(value * multiplier) / multiplier;
	};
	$Franca_Calc.floorF = function(value, precision) {
		if (precision === 0) {
			return Math.ceil(value);
		}
		var multiplier = Math.pow(10, precision);
		return Math.floor(value * multiplier) / multiplier;
	};
	$Franca_Calc.wrap$2 = function(value, max) {
		if (max === 0) {
			return 0;
		}
		var wrapped = value % max;
		return ((wrapped < 0) ? ((wrapped + max) % max) : wrapped);
	};
	$Franca_Calc.wrap$6 = function(value, min, max) {
		return $Franca_Calc.wrap$2(value - min, max - min) + min;
	};
	$Franca_Calc.wrap$3 = function(value, max) {
		if (max === 0) {
			return 0;
		}
		var wrapped = value % max;
		return ((wrapped < 0) ? ((wrapped + max) % max) : wrapped);
	};
	$Franca_Calc.wrap$7 = function(value, min, max) {
		return $Franca_Calc.wrap$3(value - min, max - min) + min;
	};
	$Franca_Calc.wrap$1 = function(value, max) {
		if (max === 0) {
			return 0;
		}
		var wrapped = value % max;
		return ((wrapped < 0) ? ((wrapped + max) % max) : wrapped);
	};
	$Franca_Calc.wrap$5 = function(value, min, max) {
		return $Franca_Calc.wrap$1(value - min, max - min) + min;
	};
	$Franca_Calc.lerp$3 = function(value1, value2, amount) {
		return value1 + (value2 - value1) * amount;
	};
	$Franca_Calc.lerp$2 = function(value1, value2, amount) {
		return value1 + (value2 - value1) * amount;
	};
	$Franca_Calc.isPowerOfTwo = function(value) {
		return value > 0 && (value & value - 1) === 0;
	};
	$Franca_Calc.max$2 = function(args) {
		var max = 0;
		for (var i = 0; i < args.length; i++) {
			if (args[i] > max) {
				max = args[i];
			}
		}
		return max;
	};
	$Franca_Calc.max$1 = function(arg0) {
		return arg0;
	};
	$Franca_Calc.max$h = function(arg0, arg1) {
		return ((arg0 > arg1) ? arg0 : arg1);
	};
	$Franca_Calc.max$4 = function(args) {
		var max = -Number.MAX_VALUE;
		for (var i = 0; i < args.length; i++) {
			if (args[i] > max) {
				max = args[i];
			}
		}
		return max;
	};
	$Franca_Calc.max$3 = function(arg0) {
		return arg0;
	};
	$Franca_Calc.max$i = function(arg0, arg1) {
		return ((arg0 > arg1) ? arg0 : arg1);
	};
	$Franca_Calc.max$c = function(args) {
		var max = -3.40282346638529E+38;
		for (var i = 0; i < args.length; i++) {
			if (args[i] > max) {
				max = args[i];
			}
		}
		return max;
	};
	$Franca_Calc.max$b = function(arg0) {
		return arg0;
	};
	$Franca_Calc.max$m = function(arg0, arg1) {
		return ((arg0 > arg1) ? arg0 : arg1);
	};
	$Franca_Calc.max$8 = function(args) {
		var max = -2147483648;
		for (var i = 0; i < args.length; i++) {
			if (args[i] > max) {
				max = args[i];
			}
		}
		return max;
	};
	$Franca_Calc.max$7 = function(arg0) {
		return arg0;
	};
	$Franca_Calc.max$k = function(arg0, arg1) {
		return ((arg0 > arg1) ? arg0 : arg1);
	};
	$Franca_Calc.max$a = function(args) {
		var max = -128;
		for (var i = 0; i < args.length; i++) {
			if (args[i] > max) {
				max = args[i];
			}
		}
		return max;
	};
	$Franca_Calc.max$9 = function(arg0) {
		return arg0;
	};
	$Franca_Calc.max$l = function(arg0, arg1) {
		return ((arg0 > arg1) ? arg0 : arg1);
	};
	$Franca_Calc.max$6 = function(args) {
		var max = -32768;
		for (var i = 0; i < args.length; i++) {
			if (args[i] > max) {
				max = args[i];
			}
		}
		return max;
	};
	$Franca_Calc.max$5 = function(arg0) {
		return arg0;
	};
	$Franca_Calc.max$j = function(arg0, arg1) {
		return ((arg0 > arg1) ? arg0 : arg1);
	};
	$Franca_Calc.max$g = function(args) {
		var max = 0;
		for (var i = 0; i < args.length; i++) {
			if (args[i] > max) {
				max = args[i];
			}
		}
		return max;
	};
	$Franca_Calc.max$f = function(arg0) {
		return arg0;
	};
	$Franca_Calc.max$o = function(arg0, arg1) {
		return ((arg0 > arg1) ? arg0 : arg1);
	};
	$Franca_Calc.max$e = function(args) {
		var max = 0;
		for (var i = 0; i < args.length; i++) {
			if (args[i] > max) {
				max = args[i];
			}
		}
		return max;
	};
	$Franca_Calc.max$d = function(arg0) {
		return arg0;
	};
	$Franca_Calc.max$n = function(arg0, arg1) {
		return ((arg0 > arg1) ? arg0 : arg1);
	};
	$Franca_Calc.min$2 = function(args) {
		var min = 255;
		for (var i = 0; i < args.length; i++) {
			if (args[i] < min) {
				min = args[i];
			}
		}
		return min;
	};
	$Franca_Calc.min$1 = function(arg0) {
		return arg0;
	};
	$Franca_Calc.min$h = function(arg0, arg1) {
		return ((arg0 < arg1) ? arg0 : arg1);
	};
	$Franca_Calc.min$4 = function(args) {
		var min = Number.MAX_VALUE;
		for (var i = 0; i < args.length; i++) {
			if (args[i] < min) {
				min = args[i];
			}
		}
		return min;
	};
	$Franca_Calc.min$3 = function(arg0) {
		return arg0;
	};
	$Franca_Calc.min$i = function(arg0, arg1) {
		return ((arg0 < arg1) ? arg0 : arg1);
	};
	$Franca_Calc.min$c = function(args) {
		var min = 3.40282346638529E+38;
		for (var i = 0; i < args.length; i++) {
			if (args[i] < min) {
				min = args[i];
			}
		}
		return min;
	};
	$Franca_Calc.min$b = function(arg0) {
		return arg0;
	};
	$Franca_Calc.min$m = function(arg0, arg1) {
		return ((arg0 < arg1) ? arg0 : arg1);
	};
	$Franca_Calc.min$8 = function(args) {
		var min = 2147483647;
		for (var i = 0; i < args.length; i++) {
			if (args[i] < min) {
				min = args[i];
			}
		}
		return min;
	};
	$Franca_Calc.min$7 = function(arg0) {
		return arg0;
	};
	$Franca_Calc.min$k = function(arg0, arg1) {
		return ((arg0 < arg1) ? arg0 : arg1);
	};
	$Franca_Calc.min$a = function(args) {
		var min = 127;
		for (var i = 0; i < args.length; i++) {
			if (args[i] < min) {
				min = args[i];
			}
		}
		return min;
	};
	$Franca_Calc.min$9 = function(arg0) {
		return arg0;
	};
	$Franca_Calc.min$l = function(arg0, arg1) {
		return ((arg0 < arg1) ? arg0 : arg1);
	};
	$Franca_Calc.min$6 = function(args) {
		var min = 32767;
		for (var i = 0; i < args.length; i++) {
			if (args[i] < min) {
				min = args[i];
			}
		}
		return min;
	};
	$Franca_Calc.min$5 = function(arg0) {
		return arg0;
	};
	$Franca_Calc.min$j = function(arg0, arg1) {
		return ((arg0 < arg1) ? arg0 : arg1);
	};
	$Franca_Calc.min$g = function(args) {
		var min = 4294967295;
		for (var i = 0; i < args.length; i++) {
			if (args[i] < min) {
				min = args[i];
			}
		}
		return min;
	};
	$Franca_Calc.min$f = function(arg0) {
		return arg0;
	};
	$Franca_Calc.min$o = function(arg0, arg1) {
		return ((arg0 < arg1) ? arg0 : arg1);
	};
	$Franca_Calc.min$e = function(args) {
		var min = 65535;
		for (var i = 0; i < args.length; i++) {
			if (args[i] < min) {
				min = args[i];
			}
		}
		return min;
	};
	$Franca_Calc.min$d = function(arg0) {
		return arg0;
	};
	$Franca_Calc.min$n = function(arg0, arg1) {
		return ((arg0 < arg1) ? arg0 : arg1);
	};
	$Franca_Calc.pow$1 = function(number, exponent) {
		return ss.Int32.trunc(Math.pow(number, exponent));
	};
	$Franca_Calc.pow$2 = function(number, exponent) {
		return Math.pow(number, exponent);
	};
	$Franca_Calc.tryParseHex = function(hex, number) {
		if (hex.length < 1) {
			number.$ = 0;
			return false;
		}
		var valA = $Franca_Calc.$charHexToByte(hex, 0);
		if (valA > 15) {
			number.$ = 0;
			return false;
		}
		if (hex.length < 2) {
			number.$ = valA;
			return true;
		}
		var valB = $Franca_Calc.$charHexToByte(hex, 1);
		if (valB > 15) {
			number.$ = 0;
			return false;
		}
		number.$ = valA << 4 | valB;
		return true;
	};
	$Franca_Calc.tryParseHex$2 = function(str, offset, number, matchExactSize) {
		if (matchExactSize) {
			if (offset + 1 >= str.length) {
				number.$ = 0;
				return false;
			}
			var upper = $Franca_Calc.$charHexToByte(str, offset);
			if (upper > 15) {
				number.$ = 0;
				return false;
			}
			var lower = $Franca_Calc.$charHexToByte(str, offset + 1);
			if (lower > 15) {
				number.$ = 0;
				return false;
			}
			number.$ = upper << 4 | lower;
			return true;
		}
		else {
			if (offset >= str.length) {
				number.$ = 0;
				return false;
			}
			var valA = $Franca_Calc.$charHexToByte(str, offset);
			if (valA > 15) {
				number.$ = 0;
				return false;
			}
			if (offset + 1 >= str.length) {
				number.$ = 0;
				return false;
			}
			var valB = $Franca_Calc.$charHexToByte(str, offset + 1);
			if (valB > 15) {
				number.$ = valA;
				return true;
			}
			number.$ = valA << 4 | valB;
			return true;
		}
	};
	$Franca_Calc.get_$hexCharValues = function() {
		return $Franca_Calc.$_hexCharValues || ($Franca_Calc.$_hexCharValues = new Array(8));
	};
	$Franca_Calc.tryParseHex$3 = function(str, offset, number, matchExactSize, maxHexLength, endian) {
		if (endian === 2) {
			endian = ($Franca_Calc.$isLittleEndian ? 0 : 1);
		}
		if (maxHexLength > 8) {
			throw new ss.ArgumentOutOfRangeException('maxHexLength', "TryParseHex can't parse hexadecimal strings of length greater than 8.");
		}
		// get hex chars
		var hexOffset = offset;
		var hexLength = 0;
		var hexChars = $Franca_Calc.get_$hexCharValues();
		while (hexLength < maxHexLength && hexOffset < str.length) {
			var val = $Franca_Calc.$charHexToByte(str, hexOffset);
			if (val > 15) {
				break;
			}
			hexChars[hexLength] = val;
			hexLength++;
			hexOffset++;
		}
		if (hexLength === 0 || matchExactSize && hexLength < maxHexLength) {
			number.$ = 0;
			return false;
		}
		if (endian === 1) {
			var shift = 0;
			var n = 0;
			for (var i = hexLength - 1; i >= 0; i--) {
				n = n | hexChars[i] << shift;
				shift += 4;
			}
			number.$ = n;
			return true;
		}
		else {
			var n1 = 0;
			var shift1 = 24;
			for (var i1 = hexLength - 1; i1 >= 0; i1 -= 2) {
				var b;
				if (i1 - 1 < 0) {
					b = hexChars[i1];
				}
				else {
					b = hexChars[i1 - 1] << 4 | hexChars[i1];
				}
				n1 = n1 | b << shift1;
				shift1 -= 8;
			}
			number.$ = n1;
			return true;
		}
	};
	$Franca_Calc.tryParseHex$1 = function(hex, number, hexLength, endian) {
		return $Franca_Calc.tryParseHex$3(hex, 0, number, true, hexLength, endian);
	};
	$Franca_Calc.$charHexToByte = function(s, i) {
		switch (s.charCodeAt(i)) {
			default: {
				return 255;
			}
			case 48: {
				return 0;
			}
			case 49: {
				return 1;
			}
			case 50: {
				return 2;
			}
			case 51: {
				return 3;
			}
			case 52: {
				return 4;
			}
			case 53: {
				return 5;
			}
			case 54: {
				return 6;
			}
			case 55: {
				return 7;
			}
			case 56: {
				return 8;
			}
			case 57: {
				return 9;
			}
			case 97:
			case 65: {
				return 10;
			}
			case 98:
			case 66: {
				return 11;
			}
			case 99:
			case 67: {
				return 12;
			}
			case 100:
			case 68: {
				return 13;
			}
			case 101:
			case 69: {
				return 14;
			}
			case 102:
			case 70: {
				return 15;
			}
		}
	};
	$Franca_Calc.tryParseNumber = function(s, result) {
		var match = $Franca_Calc.$doubleRegex.exec(s);
		if (match.success) {
			result.$ = parseFloat($Franca_Text_Match.op_Implicit(match));
			return true;
		}
		else {
			result.$ = Number.NaN;
			return false;
		}
	};
	$Franca_Calc.parseNumber = function(s) {
		var match = $Franca_Calc.$doubleRegex.exec(s);
		if (match.success) {
			return parseFloat($Franca_Text_Match.op_Implicit(match));
		}
		else {
			return Number.NaN;
		}
	};
	$Franca_Calc.tryParseInt = function(s, result) {
		var match = $Franca_Calc.$intRegex.exec(s);
		if (match.success) {
			result.$ = parseInt($Franca_Text_Match.op_Implicit(match));
			return true;
		}
		else {
			result.$ = 0;
			return false;
		}
	};
	$Franca_Calc.parseInt = function(s) {
		var match = $Franca_Calc.$intRegex.exec(s);
		if (match.success) {
			return parseInt($Franca_Text_Match.op_Implicit(match));
		}
		else {
			throw new ss.FormatException("Could not convert value '" + s + "' to integer");
		}
	};
	$Franca_Calc.log2 = function(exposure) {
		return Math.log(exposure) / Math.log(2);
	};
	$Franca_Calc.abs = function(value) {
		return new $Franca_Fix53.$ctor3(((value.raw < 0) ? -value.raw : value.raw), true);
	};
	$Franca_Calc.floor = function(value) {
		if (value.raw < $Franca_Fix53.minIntegerRawValue) {
			throw new $System_OverflowException();
		}
		if (value.raw >= -2147483648 && value.raw <= 2147483647) {
			return new $Franca_Fix53.$ctor3(value.raw & -2097152, true);
		}
		else if (value.raw > 2147483647 && value.raw <= 4294967295) {
			// this should be equivalent to '(v & mask) >>> 0' in javascript
			return new $Franca_Fix53.$ctor3((value.raw & -2097152) >>> 0, true);
		}
		else {
			// using big integer
			//bigA._initNumber(value.Raw, 10, "be");
			//return new Fix53(bigA.AndInlineUnsigned(Fix53BigFloorMask).ToNumber(), true);
			var bigA = bigInt(value.raw);
			return new $Franca_Fix53.$ctor3(bigA.and(-2097152).valueOf(), true);
		}
	};
	$Franca_Calc.ceiling = function(value) {
		if (value.raw > $Franca_Fix53.maxIntegerRawValue) {
			throw new $System_OverflowException();
		}
		if (value.raw < $Franca_Fix53.minIntegerRawValue) {
			// special case where we can't floor and add 1 cause it overflows
			// we know this is a fraction so we add 1 then floor
			return $Franca_Calc.floor($Franca_Fix53.op_Addition(value, $Franca_Fix53.one));
		}
		else {
			var result = $Franca_Calc.floor(value);
			if (result.raw !== value.raw) {
				result = $Franca_Fix53.op_Increment(result);
			}
			return result;
		}
	};
	$Franca_Calc.divRem = function(x, y, result) {
		result.$ = $Franca_Fix53.op_Modulus(x, y);
		return $Franca_Calc.truncate($Franca_Fix53.op_Division(x, y));
	};
	$Franca_Calc.log = function(value) {
		return Math.log($Franca_Fix53.cast_Double(value));
	};
	$Franca_Calc.log10 = function(value) {
		return Math.log($Franca_Fix53.cast_Double(value)) / Math.log(10);
	};
	$Franca_Calc.log$1 = function(value, newbase) {
		return $Franca_Calc.log$2(value, $Franca_Fix53.cast_Double(newbase));
	};
	$Franca_Calc.log$2 = function(value, newbase) {
		if (newbase === 1) {
			throw new ss.ArgumentException('Base value cannot be 0.', 'newbase');
		}
		var result = $Franca_Calc.log(value) / Math.log(newbase);
		return ((result === 0) ? 0 : result);
	};
	$Franca_Calc.max = function(args) {
		var max = $Franca_Fix53.minValue;
		for (var i = 0; i < args.length; i++) {
			if (args[i].raw > max.raw) {
				max = args[i];
			}
		}
		return max;
	};
	$Franca_Calc.min = function(args) {
		var min = $Franca_Fix53.maxValue;
		for (var i = 0; i < args.length; i++) {
			if (args[i].raw < min.raw) {
				min = args[i];
			}
		}
		return min;
	};
	$Franca_Calc.round = function(value) {
		var fraction;
		if (value.raw >= -2147483648 && value.raw <= 2147483647) {
			fraction = value.raw & 2097151;
		}
		else if (value.raw > 2147483647 && value.raw <= 4294967295) {
			// this should be equivalent to '(v & mask) >>> 0' in javascript
			fraction = (value.raw & 2097151) >>> 0;
		}
		else {
			// using big integer
			//bigA._initNumber(value.Raw, 10, "be");
			//fraction = bigA.AndInline(Fix53BigFractionMask).ToNumber();
			var bigA = bigInt(value.raw);
			fraction = bigA.and(2097151).valueOf();
		}
		if (fraction > $Franca_Calc.$fix53FractionMaskHalved) {
			return $Franca_Calc.ceiling(value);
		}
		else {
			return $Franca_Calc.floor(value);
		}
	};
	$Franca_Calc.round$1 = function(value, digits) {
		return ((digits === 0) ? $Franca_Fix53.cast_Double($Franca_Calc.round(value)) : $Franca_Calc.roundF($Franca_Fix53.cast_Double(value), digits));
	};
	$Franca_Calc.truncate = function(value) {
		if (value.raw > 0) {
			return $Franca_Calc.floor(value);
		}
		else if (value.raw < 0) {
			return $Franca_Calc.ceiling(value);
		}
		return value;
	};
	$Franca_Calc.sign = function(value) {
		if (value.raw > 0) {
			return 1;
		}
		else if (value.raw < 0) {
			return -1;
		}
		return 0;
	};
	$Franca_Calc.signFix = function(value) {
		if (value.raw > 0) {
			return $Franca_Fix53.one;
		}
		else if (value.raw < 0) {
			return $Franca_Fix53.minusOne;
		}
		return $Franca_Fix53.zero;
	};
	$Franca_Calc.sin = function(value) {
		return Math.sin($Franca_Fix53.cast_Double(value));
	};
	$Franca_Calc.cos = function(value) {
		return Math.cos($Franca_Fix53.cast_Double(value));
	};
	$Franca_Calc.tan = function(value) {
		return Math.tan($Franca_Fix53.cast_Double(value));
	};
	$Franca_Calc.sinh = function(value) {
		var $t1 = $Franca_Fix53.cast_Double(value);
		return (Math.exp($t1) - Math.exp($t1 * -1)) / 2;
	};
	$Franca_Calc.cosh = function(value) {
		var $t1 = $Franca_Fix53.cast_Double(value);
		return (Math.exp($t1) + Math.exp($t1 * -1)) / 2;
	};
	$Franca_Calc.tanh = function(value) {
		var $t1 = $Franca_Fix53.cast_Double(value);
		return (Math.exp($t1) - Math.exp($t1 * -1)) / (Math.exp($t1) + Math.exp($t1 * -1));
	};
	$Franca_Calc.acos = function(value) {
		return Math.acos($Franca_Fix53.cast_Double(value));
	};
	$Franca_Calc.asin = function(value) {
		return Math.asin($Franca_Fix53.cast_Double(value));
	};
	$Franca_Calc.atan = function(value) {
		return Math.atan($Franca_Fix53.cast_Double(value));
	};
	$Franca_Calc.atan2$1 = function(y, x) {
		return Math.atan2($Franca_Fix53.cast_Double(y), x);
	};
	$Franca_Calc.atan2 = function(y, x) {
		return Math.atan2($Franca_Fix53.cast_Double(y), $Franca_Fix53.cast_Double(x));
	};
	$Franca_Calc.atan2$2 = function(y, x) {
		return Math.atan2(y, $Franca_Fix53.cast_Double(x));
	};
	$Franca_Calc.exp = function(value) {
		return Math.exp($Franca_Fix53.cast_Double(value));
	};
	$Franca_Calc.expFix = function(exponent) {
		return $Franca_Calc.powFix($Franca_Fix53.e, exponent);
	};
	$Franca_Calc.pow = function(value, exponent) {
		return Math.pow($Franca_Fix53.cast_Double(value), exponent);
	};
	$Franca_Calc.sqrt = function(value) {
		return Math.sqrt($Franca_Fix53.cast_Double(value));
	};
	$Franca_Calc.powFix = function(value, exponent) {
		if (value.raw === $Franca_Fix53.scalar) {
			// 1 to any power is 1
			return value;
		}
		else if (value.raw === $Franca_Fix53.minusOne.raw) {
			// -1 will always fit and work normally so
			return new $Franca_Fix53.$ctor3(Math.pow(-1, exponent), false);
		}
		switch (exponent) {
			case 0: {
				return $Franca_Fix53.one;
			}
			case 1: {
				return value;
			}
			case 2: {
				return $Franca_Fix53.op_Multiply(value, value);
			}
			default: {
				break;
			}
		}
		//bigA._initNumber(value.Raw, 10, "be");
		//bigB._initNumber(exponent, 10, "be");
		//bigC._initNumber(exponent - 1, 10, "be");
		//var lhs = bigA.Pow(bigB);
		//var rhs = bigScalar.Pow(bigC);
		//return new Fix53(lhs.Div(rhs).ToNumber(), true);
		var result = bigInt(value.raw).pow(exponent).divide(bigInt($Franca_Fix53.scalar).pow(exponent - 1));
		return new $Franca_Fix53.$ctor3(result.valueOf(), true);
	};
	$Franca_Calc.mod$1 = function(a, n) {
		return $Franca_Calc.mod(a, new $Franca_Fix53.$ctor3(n, false));
	};
	$Franca_Calc.mod = function(a, n) {
		if (n.raw === 0) {
			throw new ss.ArgumentOutOfRangeException('n', '(a mod 0) is undefined.');
		}
		//puts a in the [-n+1, n-1] range using the remainder operator
		var remainder = $Franca_Fix53.op_Modulus(a, n);
		//if the remainder is less than zero, add n to put it in the [0, n-1] range if n is positive
		//if the remainder is greater than zero, add n to put it in the [n-1, 0] range if n is negative
		if (n.raw > 0 && remainder.raw < 0 || n.raw < 0 && remainder.raw > 0) {
			return $Franca_Fix53.op_Addition(remainder, n);
		}
		return remainder;
	};
	$Franca_Calc.clamp$1 = function(value, min, max) {
		min = min || $Franca_Fix53.zero;
		max = max || $Franca_Fix53.one;
		if (ss.Nullable$1.liftcmp($Franca_Fix53.op_LessThan, value, min)) {
			value = ss.unbox(min);
		}
		else if (ss.Nullable$1.liftcmp($Franca_Fix53.op_GreaterThan, value, max)) {
			value = ss.unbox(max);
		}
		return value;
	};
	$Franca_Calc.clamp = function(value, min, max) {
		min = min || $Franca_Fix53.zero;
		max = max || $Franca_Fix53.one;
		if (ss.Nullable$1.liftcmp($Franca_Fix53.op_LessThan, value.$, min)) {
			value.$ = ss.unbox(min);
		}
		else if (ss.Nullable$1.liftcmp($Franca_Fix53.op_GreaterThan, value.$, max)) {
			value.$ = ss.unbox(max);
		}
	};
	$Franca_Calc.wrap = function(value, max) {
		if (max.raw === 0) {
			return $Franca_Fix53.zero;
		}
		var wrapped = $Franca_Fix53.op_Modulus(value, max);
		return ((wrapped.raw < 0) ? $Franca_Fix53.op_Modulus($Franca_Fix53.op_Addition(wrapped, max), max) : wrapped);
	};
	$Franca_Calc.wrap$4 = function(value, min, max) {
		return $Franca_Fix53.op_Addition($Franca_Calc.wrap($Franca_Fix53.op_Subtraction(value, min), $Franca_Fix53.op_Subtraction(max, min)), min);
	};
	$Franca_Calc.lerp$1 = function(value1, value2, amount) {
		var v1 = $Franca_Fix53.cast_Double(value1);
		return v1 + ($Franca_Fix53.cast_Double(value2) - v1) * amount;
	};
	$Franca_Calc.lerp = function(value1, value2, amount) {
		return $Franca_Fix53.op_Addition(value1, $Franca_Fix53.op_Multiply($Franca_Fix53.op_Subtraction(value2, value1), amount));
	};
	global.Franca.Calc = $Franca_Calc;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Cast
	var $Franca_Cast = function() {
	};
	$Franca_Cast.__typeName = 'Franca.Cast';
	$Franca_Cast.toSByte = function(value) {
		return (((value & 128) === 0) ? (value & 255) : ((value & 255) - 256));
	};
	$Franca_Cast.toSByte$5 = function(value) {
		return (((value & 128) === 0) ? (value & 255) : ((value & 255) - 256));
	};
	$Franca_Cast.toSByte$2 = function(value) {
		return (((value & 128) === 0) ? (value & 255) : ((value & 255) - 256));
	};
	$Franca_Cast.toSByte$7 = function(value) {
		return (((value & 128) === 0) ? (value & 255) : ((value & 255) - 256));
	};
	$Franca_Cast.toSByte$3 = function(value) {
		return (((value & 128) === 0) ? (value & 255) : ((value & 255) - 256));
	};
	$Franca_Cast.toSByte$8 = function(value) {
		return (((value & 128) === 0) ? (value & 255) : ((value & 255) - 256));
	};
	$Franca_Cast.toSByte$4 = function(value) {
		return (((value & 128) === 0) ? (value & 255) : ((value & 255) - 256));
	};
	$Franca_Cast.toSByte$9 = function(value) {
		return (((value & 128) === 0) ? (value & 255) : ((value & 255) - 256));
	};
	$Franca_Cast.toSByte$6 = function(value) {
		return (((value & 128) === 0) ? (value & 255) : ((value & 255) - 256));
	};
	$Franca_Cast.toSByte$1 = function(value) {
		return (((value & 128) === 0) ? (value & 255) : ((value & 255) - 256));
	};
	$Franca_Cast.toShort = function(value) {
		return (((value & 32768) === 0) ? (value & 65535) : ((value & 65535) - 65536));
	};
	$Franca_Cast.toShort$5 = function(value) {
		return (((value & 32768) === 0) ? (value & 65535) : ((value & 65535) - 65536));
	};
	$Franca_Cast.toShort$2 = function(value) {
		return (((value & 32768) === 0) ? (value & 65535) : ((value & 65535) - 65536));
	};
	$Franca_Cast.toShort$7 = function(value) {
		return (((value & 32768) === 0) ? (value & 65535) : ((value & 65535) - 65536));
	};
	$Franca_Cast.toShort$3 = function(value) {
		return (((value & 32768) === 0) ? (value & 65535) : ((value & 65535) - 65536));
	};
	$Franca_Cast.toShort$8 = function(value) {
		return (((value & 32768) === 0) ? (value & 65535) : ((value & 65535) - 65536));
	};
	$Franca_Cast.toShort$4 = function(value) {
		return (((value & 32768) === 0) ? (value & 65535) : ((value & 65535) - 65536));
	};
	$Franca_Cast.toShort$9 = function(value) {
		return (((value & 32768) === 0) ? (value & 65535) : ((value & 65535) - 65536));
	};
	$Franca_Cast.toShort$6 = function(value) {
		return (((value & 32768) === 0) ? (value & 65535) : ((value & 65535) - 65536));
	};
	$Franca_Cast.toShort$1 = function(value) {
		return (((value & 32768) === 0) ? (value & 65535) : ((value & 65535) - 65536));
	};
	$Franca_Cast.toLong$4 = function(value) {
		return ((value > 0) ? Math.floor(value) : Math.ceil(value));
	};
	$Franca_Cast.toLong$1 = function(value) {
		return ((value > 0) ? Math.floor(value) : Math.ceil(value));
	};
	$Franca_Cast.toLong$2 = function(value) {
		return ((value > 0) ? Math.floor(value) : Math.ceil(value));
	};
	$Franca_Cast.toLong$3 = function(value) {
		return ((value > 0) ? Math.floor(value) : Math.ceil(value));
	};
	$Franca_Cast.toLong$6 = function(value) {
		return Math.floor(value);
	};
	$Franca_Cast.toLong$5 = function(value) {
		return ((value > 0) ? Math.floor(value) : Math.ceil(value));
	};
	$Franca_Cast.toLong = function(value) {
		return ((value > 0) ? Math.floor(value) : Math.ceil(value));
	};
	$Franca_Cast.toULong = function(value) {
		throw new ss.NotImplementedException();
	};
	$Franca_Cast.toULong$5 = function(value) {
		throw new ss.NotImplementedException();
	};
	$Franca_Cast.toULong$2 = function(value) {
		throw new ss.NotImplementedException();
	};
	$Franca_Cast.toULong$7 = function(value) {
		throw new ss.NotImplementedException();
	};
	$Franca_Cast.toULong$3 = function(value) {
		throw new ss.NotImplementedException();
	};
	$Franca_Cast.toULong$8 = function(value) {
		throw new ss.NotImplementedException();
	};
	$Franca_Cast.toULong$4 = function(value) {
		throw new ss.NotImplementedException();
	};
	$Franca_Cast.toULong$9 = function(value) {
		throw new ss.NotImplementedException();
	};
	$Franca_Cast.toULong$6 = function(value) {
		throw new ss.NotImplementedException();
	};
	$Franca_Cast.toULong$1 = function(value) {
		throw new ss.NotImplementedException();
	};
	global.Franca.Cast = $Franca_Cast;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.CenterOptions
	var $Franca_CenterOptions = function() {
	};
	$Franca_CenterOptions.__typeName = 'Franca.CenterOptions';
	global.Franca.CenterOptions = $Franca_CenterOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Color
	var $Franca_Color = function() {
		this.$packed = 0;
	};
	$Franca_Color.__typeName = 'Franca.Color';
	$Franca_Color.$ctor2 = function(value, premultiplied) {
		this.$packed = 0;
		if (premultiplied) {
			this.$packed = value;
		}
		else {
			var r = value & 255;
			var g = value >> 8 & 255;
			var b = value >> 16 & 255;
			var a = (value >> 24 & 255) / 255;
			this.$packed = $Franca_Color.op_Multiply$1(new $Franca_Color.$ctor5(r, g, b, 255), a).get_packed();
		}
	};
	$Franca_Color.$ctor3 = function(value, premultiplied) {
		$Franca_Color.$ctor2.call(this, value, premultiplied);
	};
	$Franca_Color.$ctor5 = function(r, g, b, a) {
		this.$packed = 0;
		this.$packed = 0;
		this.$packed |= r;
		this.$packed |= g << 8 & 65280;
		this.$packed |= b << 16 & 16711680;
		this.$packed |= a << 24 & 4278190080;
	};
	$Franca_Color.$ctor6 = function(r, g, b, a) {
		$Franca_Color.$ctor5.call(this, ss.Int32.trunc($Franca_Calc.clamp$7(r, 0, 1) * 255), ss.Int32.trunc($Franca_Calc.clamp$7(g, 0, 1) * 255), ss.Int32.trunc($Franca_Calc.clamp$7(b, 0, 1) * 255), ss.Int32.trunc($Franca_Calc.clamp$7(a, 0, 1) * 255));
	};
	$Franca_Color.$ctor4 = function(r, g, b, a) {
		$Franca_Color.$ctor5.call(this, ss.Int32.trunc($Franca_Calc.clamp$3(r, 0, 1) * 255), ss.Int32.trunc($Franca_Calc.clamp$3(g, 0, 1) * 255), ss.Int32.trunc($Franca_Calc.clamp$3(b, 0, 1) * 255), ss.Int32.trunc($Franca_Calc.clamp$3(a, 0, 1) * 255));
	};
	$Franca_Color.$ctor1 = function(reader) {
		this.$packed = 0;
		this.$packed = 0;
		if (!reader.isInteger() && !reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		if (reader.isInteger()) {
			this.$packed = reader.readInt32(false);
		}
		else {
			var _requiredField_packedColor = false;
			var $t1 = reader.readObject().getEnumerator();
			try {
				while ($t1.moveNext()) {
					var _objIter1 = $t1.current();
					switch (_objIter1.key) {
						default: {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						case 'packedColor': {
							{
								_requiredField_packedColor = true;
								if (!reader.isInteger()) {
									throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
								}
								this.$packed = reader.readInt32(false);
							}
							break;
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
			if (!_requiredField_packedColor) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		}
	};
	$Franca_Color.getDefaultValue = function() {
		return new $Franca_Color();
	};
	$Franca_Color.op_Implicit$1 = function(value) {
		return new $Franca_Color.$ctor2(value, false);
	};
	$Franca_Color.op_Implicit$2 = function(value) {
		return new $Franca_Color.$ctor3(value, false);
	};
	$Franca_Color.op_Implicit = function(c) {
		return new $Franca_HdrColor.$ctor2(c.$packed, true);
	};
	$Franca_Color.op_Multiply$1 = function(col, num) {
		var c2 = $Franca_Color.op_Implicit(col);
		return new $Franca_Color.$ctor4(c2.r * num, c2.g * num, c2.b * num, c2.a * num);
	};
	$Franca_Color.op_Multiply$2 = function(num, col) {
		var c2 = $Franca_Color.op_Implicit(col);
		return new $Franca_Color.$ctor4(c2.r * num, c2.g * num, c2.b * num, c2.a * num);
	};
	$Franca_Color.op_Division$1 = function(col, num) {
		var c2 = $Franca_Color.op_Implicit(col);
		return new $Franca_Color.$ctor4(c2.r / num, c2.g / num, c2.b / num, c2.a / num);
	};
	$Franca_Color.op_Division = function(col1, col2) {
		var c1 = $Franca_Color.op_Implicit(col1);
		var c2 = $Franca_Color.op_Implicit(col2);
		return new $Franca_Color.$ctor6(c1.r / c2.r, c1.g / c2.g, c1.b / c2.b, c1.a / c2.a);
	};
	$Franca_Color.op_Multiply = function(col1, col2) {
		var c1 = $Franca_Color.op_Implicit(col1);
		var c2 = $Franca_Color.op_Implicit(col2);
		return new $Franca_Color.$ctor6(c1.r * c2.r, c1.g * c2.g, c1.b * c2.b, c1.a * c2.a);
	};
	$Franca_Color.op_Addition = function(col1, col2) {
		var c1 = $Franca_Color.op_Implicit(col1);
		var c2 = $Franca_Color.op_Implicit(col2);
		return new $Franca_Color.$ctor6(c1.r + c2.r, c1.g + c2.g, c1.b + c2.b, c1.a + c2.a);
	};
	$Franca_Color.op_Subtraction = function(col1, col2) {
		var c1 = $Franca_Color.op_Implicit(col1);
		var c2 = $Franca_Color.op_Implicit(col2);
		return new $Franca_Color.$ctor6(c1.r - c2.r, c1.g - c2.g, c1.b - c2.b, c1.a - c2.a);
	};
	$Franca_Color.lerp = function(col1, col2, alpha, premultiplied) {
		return $Franca_HdrColor.op_Explicit($Franca_HdrColor.lerp($Franca_Color.op_Implicit(col1), $Franca_Color.op_Implicit(col2), alpha, premultiplied));
	};
	$Franca_Color.lerp$1 = function(col1, col2, alpha, mode, premultiplied) {
		return $Franca_HdrColor.op_Explicit($Franca_HdrColor.lerp$1($Franca_Color.op_Implicit(col1), $Franca_Color.op_Implicit(col2), alpha, mode, premultiplied));
	};
	$Franca_Color.multiply = function(c, scalar, multiplyAlpha) {
		if (multiplyAlpha) {
			return $Franca_Color.op_Multiply$1(c, scalar);
		}
		else {
			var c2 = $Franca_Color.op_Implicit(c);
			return new $Franca_Color.$ctor4(c2.r * scalar, c2.g * scalar, c2.b * scalar, c2.a);
		}
	};
	$Franca_Color.premultiply = function(c) {
		var col = $Franca_Color.op_Implicit(c);
		return new $Franca_Color.$ctor6(col.r * col.a, col.g * col.a, col.b * col.a, col.a);
	};
	$Franca_Color.fromHex = function(hex, trimWhitespace) {
		var c = {};
		if ($Franca_Color.fromHex$1(hex, c, trimWhitespace)) {
			return c.$;
		}
		return $Franca_Color.black;
	};
	$Franca_Color.fromHex$1 = function(hex, color, trimWhitespace) {
		if (trimWhitespace) {
			hex = hex.trim();
		}
		if (ss.startsWithString(hex, '#')) {
			hex = hex.substring(1);
		}
		else if (ss.startsWithString(hex, '0x')) {
			hex = hex.substring(2);
		}
		return $Franca_Color.fromHex$2(hex, null, color, false);
	};
	$Franca_Color.fromHex$2 = function(hex, prefix, color, trimWhitespace) {
		if (trimWhitespace) {
			hex = hex.trim();
		}
		if (ss.isValue(prefix) && ss.startsWithString(hex, prefix)) {
			hex = hex.substring(prefix.length);
		}
		// shorthand conversion
		if (hex.length === 3) {
			hex = ss.stringFromChar(String.fromCharCode(hex.charCodeAt(0)), 2) + ss.stringFromChar(String.fromCharCode(hex.charCodeAt(1)), 2) + ss.stringFromChar(String.fromCharCode(hex.charCodeAt(2)), 2);
		}
		else if (hex.length === 4) {
			hex = ss.stringFromChar(String.fromCharCode(hex.charCodeAt(0)), 2) + ss.stringFromChar(String.fromCharCode(hex.charCodeAt(1)), 2) + ss.stringFromChar(String.fromCharCode(hex.charCodeAt(2)), 2) + ss.stringFromChar(String.fromCharCode(hex.charCodeAt(3)), 2);
		}
		// add alpha if missing
		if (hex.length < 7) {
			hex = hex + 'FF';
		}
		var number = {};
		var success = $Franca_Calc.tryParseHex$1(hex, number, 8, 0);
		if (!success) {
			color.$ = $Franca_Color.transparentBlack;
			return false;
		}
		else {
			color.$ = new $Franca_Color.$ctor2(number.$, true);
			return true;
		}
	};
	$Franca_Color.get_$hexBuilder = function() {
		return $Franca_Color.$_hexBuilder || ($Franca_Color.$_hexBuilder = new ss.StringBuilder());
	};
	$Franca_Color.op_Explicit = function(color) {
		return color.toVector3();
	};
	$Franca_Color.op_Explicit$1 = function(color) {
		return color.toVector4();
	};
	$Franca_Color.op_Equality = function(lhs, rhs) {
		return lhs.equals$1(rhs);
	};
	$Franca_Color.op_Inequality = function(lhs, rhs) {
		return !lhs.equals$1(rhs);
	};
	$Franca_Color.get_$randomizer = function() {
		if (ss.isValue($Franca_Color.$_randomizer)) {
			return $Franca_Color.$_randomizer;
		}
		$Franca_Color.$_randomizer = new $Franca_RNG.$ctor2(ss.getHashCode(ss.Guid.newGuid()) & 2147483647);
		return $Franca_Color.$_randomizer;
	};
	$Franca_Color.getRandomNamed = function(random) {
		if (ss.isNullOrUndefined(random)) {
			random = $Franca_Color.get_$randomizer();
		}
		return new $Franca_Color.$ctor3($Franca_Color.$colorValues[random.nextMax($Franca_Color.$colorValues.length)], true);
	};
	$Franca_Color.fromName = function(name) {
		var c = {};
		if ($Franca_Color.$namedColors.tryGetValue($System_StringExtensions.toLowerInvariant(name), c)) {
			return new $Franca_Color.$ctor3(c.$, true);
		}
		return null;
	};
	$Franca_Color.get_namedColors = function() {
		return new ss.IteratorBlockEnumerable(function() {
			return (function() {
				var $result, $state = 0, $t1, kvp;
				var $finally = function() {
					$t1.dispose();
				};
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								$t1 = $Franca_Color.$namedColors.getEnumerator();
								$state = 3;
								continue $sm1;
							}
							case 3: {
								$state = 1;
								if (!$t1.moveNext()) {
									$state = 2;
									continue $sm1;
								}
								kvp = $t1.current();
								$result = kvp;
								$state = 3;
								return true;
							}
							case 2: {
								$state = -1;
								$finally.call(this);
								$state = -1;
								break $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, function() {
					try {
						switch ($state) {
							case 1:
							case 2:
							case 3: {
								try {
									break;
								}
								finally {
									$finally.call(this);
								}
							}
						}
					}
					finally {
						$state = -1;
					}
				}, this);
			}).call(this);
		}, this);
	};
	global.Franca.Color = $Franca_Color;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ColorHelper
	var $Franca_ColorHelper = function() {
	};
	$Franca_ColorHelper.__typeName = 'Franca.ColorHelper';
	$Franca_ColorHelper.unmultiply$1 = function(color) {
		if (Math.abs(color.a) < $Franca_ColorHelper.$epsilon || color.a === 1) {
			return color;
		}
		var scale = 1 / color.a;
		return new $Franca_HdrColor.$ctor4(color.r * scale, color.g * scale, color.b * scale, 1);
	};
	$Franca_ColorHelper.unmultiply = function(color) {
		if (color.get_a() === 0 || color.get_a() === 255) {
			return color;
		}
		return $Franca_HdrColor.op_Explicit($Franca_ColorHelper.unmultiply$1($Franca_Color.op_Implicit(color)));
	};
	$Franca_ColorHelper.hslToColor$1 = function(hsla, premultiply) {
		if (Math.abs(hsla.z) < $Franca_ColorHelper.$epsilon && premultiply) {
			return new $Franca_HdrColor.$ctor4(0, 0, 0, 0);
		}
		var r, g, b, a;
		var h, s, l;
		h = hsla.x;
		s = hsla.y;
		l = hsla.z;
		a = hsla.w;
		if (s === 0) {
			//HSL from 0 to 1
			r = l;
			//RGB results from 0 to 255
			g = l;
			b = l;
		}
		else {
			var one, two;
			if (l < 0.5) {
				two = l * (1 + s);
			}
			else {
				two = l + s - s * l;
			}
			one = 2 * l - two;
			r = $Franca_ColorHelper.$hueToRgb(one, two, h + 0.333333333333333);
			g = $Franca_ColorHelper.$hueToRgb(one, two, h);
			b = $Franca_ColorHelper.$hueToRgb(one, two, h - 0.333333333333333);
		}
		return ((premultiply && a !== 1) ? (new $Franca_HdrColor.$ctor4(r, g, b, a)).premultiply() : new $Franca_HdrColor.$ctor4(r, g, b, a));
	};
	$Franca_ColorHelper.$hueToRgb = function(v1, v2, vH) {
		if (vH < 0) {
			vH += 1;
		}
		if (vH > 1) {
			vH -= 1;
		}
		if (6 * vH < 1) {
			return v1 + (v2 - v1) * 6 * vH;
		}
		if (2 * vH < 1) {
			return v2;
		}
		if (3 * vH < 2) {
			return v1 + (v2 - v1) * (0 - vH) * 6;
		}
		return v1;
	};
	$Franca_ColorHelper.hslToColor = function(hsv, premultiply) {
		return $Franca_ColorHelper.hsvToColor$1(new $Franca_Vector4.$ctor3(hsv, 1), premultiply);
	};
	$Franca_ColorHelper.toHsl = function(color, premultiplied) {
		if (Math.abs(color.a) < $Franca_ColorHelper.$epsilon && premultiplied) {
			return new $Franca_Vector4.$ctor5(0, 0, 0, 0);
		}
		var r, g, b, a, h, s, l;
		if (premultiplied && color.a !== 1) {
			var scale = 1 / color.a;
			r = color.r * scale;
			g = color.g * scale;
			b = color.b * scale;
		}
		else {
			r = color.r;
			g = color.g;
			b = color.b;
		}
		a = color.a;
		var min = $Franca_Calc.min$c([color.r, color.g, color.b]);
		//Min. value of RGB
		var max = $Franca_Calc.max$c([color.r, color.g, color.b]);
		//Max. value of RGB
		var deltaMax = max - min;
		//Delta RGB value
		l = (max + min) / 2;
		if (deltaMax === 0) {
			//This is a gray, no chroma...
			h = 0;
			//HSL results from 0 to 1
			s = 0;
		}
		else {
			//Chromatic data...
			var deltaR, deltaG, deltaB;
			if (l < 0.5) {
				s = deltaMax / (max + min);
			}
			else {
				s = deltaMax / (2 - max - min);
			}
			deltaR = ((max - r) / 6 + deltaMax / 2) / deltaMax;
			deltaG = ((max - g) / 6 + deltaMax / 2) / deltaMax;
			deltaB = ((max - b) / 6 + deltaMax / 2) / deltaMax;
			if (r === max) {
				h = deltaB - deltaG;
			}
			else if (g === max) {
				h = 0 + deltaR - deltaB;
			}
			else {
				h = 0 + deltaG - deltaR;
			}
			h = $Franca_Calc.wrap$1(h, 1);
		}
		return new $Franca_Vector4.$ctor5(h, s, l, a);
	};
	$Franca_ColorHelper.hsvToColor$1 = function(hsva, premultiply) {
		if (Math.abs(hsva.z) < $Franca_ColorHelper.$epsilon && premultiply) {
			return new $Franca_HdrColor.$ctor4(0, 0, 0, 0);
		}
		var r, g, b, a;
		var h, s, v;
		h = hsva.x;
		s = hsva.y;
		v = hsva.z;
		a = hsva.w;
		if (s === 0) {
			//HSV from 0 to 1
			r = v;
			g = v;
			b = v;
		}
		else {
			h = h * 6;
			if (h >= 6) {
				h -= 6;
			}
			var i = Math.floor(h);
			//Or ... var_i = floor( var_h )
			var one = v * (1 - s);
			var two = v * (1 - s * (h - i));
			var three = v * (1 - s * (1 - (h - i)));
			if (i === 0) {
				r = v;
				g = three;
				b = one;
			}
			else if (i === 1) {
				r = two;
				g = v;
				b = one;
			}
			else if (i === 2) {
				r = one;
				g = v;
				b = three;
			}
			else if (i === 3) {
				r = one;
				g = two;
				b = v;
			}
			else if (i === 4) {
				r = three;
				g = one;
				b = v;
			}
			else {
				r = v;
				g = one;
				b = two;
			}
		}
		return ((premultiply && a !== 1) ? (new $Franca_HdrColor.$ctor4(r, g, b, a)).premultiply() : new $Franca_HdrColor.$ctor4(r, g, b, a));
	};
	$Franca_ColorHelper.hsvToColor = function(hsv, premultiply) {
		return $Franca_ColorHelper.hsvToColor$1(new $Franca_Vector4.$ctor3(hsv, 1), premultiply);
	};
	$Franca_ColorHelper.toHsv = function(color, premultiplied) {
		if (Math.abs(color.a) < $Franca_ColorHelper.$epsilon && premultiplied) {
			return new $Franca_Vector4.$ctor5(0, 0, 0, 0);
		}
		var r, g, b, a, h, s, v;
		if (premultiplied && color.a !== 1) {
			var scale = 1 / color.a;
			r = color.r * scale;
			g = color.g * scale;
			b = color.b * scale;
		}
		else {
			r = color.r;
			g = color.g;
			b = color.b;
		}
		a = color.a;
		var min = $Franca_Calc.min$4([r, g, b]);
		//Min. value of RGB
		var max = $Franca_Calc.max$4([r, g, b]);
		//Max. value of RGB
		var deltaMax = max - min;
		//Delta RGB value
		v = max;
		if (deltaMax === 0) {
			//This is a gray, no chroma...
			h = 0;
			//HSV results from 0 to 1
			s = 0;
		}
		else {
			//Chromatic data...
			var deltaR, deltaG, deltaB;
			s = deltaMax / max;
			deltaR = ((max - r) / 6 + deltaMax / 2) / deltaMax;
			deltaG = ((max - g) / 6 + deltaMax / 2) / deltaMax;
			deltaB = ((max - b) / 6 + deltaMax / 2) / deltaMax;
			if (r === max) {
				h = deltaB - deltaG;
			}
			else if (g === max) {
				h = 0.333333333333333 + deltaR - deltaB;
			}
			else {
				h = 0.666666666666667 + deltaG - deltaR;
			}
			h = $Franca_Calc.wrap$1(h, 1);
		}
		return new $Franca_Vector4.$ctor5($Franca_Calc.clamp$3(h, 0, 1), $Franca_Calc.clamp$3(s, 0, 1), $Franca_Calc.clamp$3(v, 0, 1), a);
	};
	global.Franca.ColorHelper = $Franca_ColorHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ColorLerpMode
	var $Franca_ColorLerpMode = function() {
	};
	$Franca_ColorLerpMode.__typeName = 'Franca.ColorLerpMode';
	global.Franca.ColorLerpMode = $Franca_ColorLerpMode;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ColorSpace
	var $Franca_ColorSpace = function() {
	};
	$Franca_ColorSpace.__typeName = 'Franca.ColorSpace';
	$Franca_ColorSpace.expandGamma = function(val) {
		return $Franca_HdrColor.op_Explicit($Franca_ColorSpace.expandGamma$1($Franca_Color.op_Implicit(val)));
	};
	$Franca_ColorSpace.expandGamma$1 = function(val) {
		var expanded = $Franca_ColorSpace.expandGamma$3($Franca_HdrColor.op_Explicit$1(val));
		return new $Franca_HdrColor.$ctor4(expanded.x, expanded.y, expanded.z, val.a);
	};
	$Franca_ColorSpace.compressGamma = function(val) {
		return $Franca_HdrColor.op_Explicit($Franca_ColorSpace.compressGamma$1($Franca_Color.op_Implicit(val)));
	};
	$Franca_ColorSpace.compressGamma$1 = function(val) {
		var expanded = $Franca_ColorSpace.compressGamma$3($Franca_HdrColor.op_Explicit$1(val));
		return new $Franca_HdrColor.$ctor4(expanded.x, expanded.y, expanded.z, val.a);
	};
	$Franca_ColorSpace.expandSrgb = function(val) {
		return $Franca_HdrColor.op_Explicit($Franca_ColorSpace.expandSrgb$1($Franca_Color.op_Implicit(val)));
	};
	$Franca_ColorSpace.expandSrgb$1 = function(val) {
		var expanded = $Franca_ColorSpace.expandSrgb$3($Franca_HdrColor.op_Explicit$1(val));
		return new $Franca_HdrColor.$ctor4(expanded.x, expanded.y, expanded.z, val.a);
	};
	$Franca_ColorSpace.compressSrgb = function(val) {
		return $Franca_HdrColor.op_Explicit($Franca_ColorSpace.compressSrgb$1($Franca_Color.op_Implicit(val)));
	};
	$Franca_ColorSpace.compressSrgb$1 = function(val) {
		var expanded = $Franca_ColorSpace.compressSrgb$3($Franca_HdrColor.op_Explicit$1(val));
		return new $Franca_HdrColor.$ctor4(expanded.x, expanded.y, expanded.z, val.a);
	};
	$Franca_ColorSpace.expandGamma$4 = function(val) {
		return Math.pow(val, $Franca_ColorSpace.gamma);
	};
	$Franca_ColorSpace.expandGamma$2 = function(val) {
		return $Franca_Vector2.pow(val, $Franca_ColorSpace.$vec2Gamma);
	};
	$Franca_ColorSpace.expandGamma$3 = function(val) {
		return $Franca_Vector3.pow(val, $Franca_ColorSpace.$vec3Gamma);
	};
	$Franca_ColorSpace.compressGamma$4 = function(val) {
		return Math.pow(val, $Franca_ColorSpace.invGamma);
	};
	$Franca_ColorSpace.compressGamma$2 = function(val) {
		return $Franca_Vector2.pow(val, $Franca_ColorSpace.$vec2GammaInv);
	};
	$Franca_ColorSpace.compressGamma$3 = function(val) {
		return $Franca_Vector3.pow(val, $Franca_ColorSpace.$vec3GammaInv);
	};
	$Franca_ColorSpace.expandSrgb$4 = function(val) {
		return ((val < 0.04045) ? (val / 12.92) : Math.pow((val + 0.055) / 1.055, 2.4));
	};
	$Franca_ColorSpace.expandSrgb$2 = function(val) {
		return ($Franca_Vector2.op_LessThan(val, $Franca_ColorSpace.$vec2SrgbThreshold) ? $Franca_Vector2.op_Division$1(val, 12.92) : $Franca_Vector2.pow($Franca_Vector2.op_Division$1($Franca_Vector2.op_Addition$1(val, 0.055), 1.055), $Franca_ColorSpace.$vec2SrgbPow));
	};
	$Franca_ColorSpace.expandSrgb$3 = function(val) {
		return ($Franca_Vector3.op_LessThan(val, $Franca_ColorSpace.$vec3SrgbThreshold) ? $Franca_Vector3.op_Division$1(val, 12.92) : $Franca_Vector3.pow($Franca_Vector3.op_Division$1($Franca_Vector3.op_Addition$1(val, 0.055), 1.055), $Franca_ColorSpace.$vec3SrgbPow));
	};
	$Franca_ColorSpace.compressSrgb$4 = function(val) {
		return ((val < 0.0031308) ? (val * 12.92) : (1.055 * Math.pow(val, 0.416666666666667) - 0.055));
	};
	$Franca_ColorSpace.compressSrgb$2 = function(val) {
		return ($Franca_Vector2.op_LessThan(val, $Franca_ColorSpace.$vec2SrgbInvThreshold) ? $Franca_Vector2.op_Multiply$1(val, 12.92) : $Franca_Vector2.op_Subtraction$1($Franca_Vector2.op_Multiply$2(1.055, $Franca_Vector2.pow(val, $Franca_ColorSpace.$vec2SrgbInvPow)), 0.055));
	};
	$Franca_ColorSpace.compressSrgb$3 = function(val) {
		return ($Franca_Vector3.op_LessThan(val, $Franca_ColorSpace.$vec3SrgbInvThreshold) ? $Franca_Vector3.op_Multiply$1(val, 12.92) : $Franca_Vector3.op_Subtraction$1($Franca_Vector3.op_Multiply$2(1.055, $Franca_Vector3.pow(val, $Franca_ColorSpace.$vec3SrgbInvPow)), 0.055));
	};
	global.Franca.ColorSpace = $Franca_ColorSpace;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.CommandLineArguments
	var $Franca_CommandLineArguments = function() {
	};
	$Franca_CommandLineArguments.__typeName = 'Franca.CommandLineArguments';
	$Franca_CommandLineArguments.parse = function(arguments1) {
		return $Franca_CommandLineArguments.parse$1(false, arguments1);
	};
	$Franca_CommandLineArguments.parse$1 = function(allowEscapedDoubleQuotes, arguments1) {
		var regex;
		if (ss.isNullOrUndefined(arguments1)) {
			arguments1 = document.location.search;
			regex = new $Franca_Text_Regex('(?:args=)([^&]*)', 4);
			var match = regex.exec(arguments1);
			if (match.success && match.groups.length > 1) {
				arguments1 = decodeURI(match.groups[1]);
				console.log('args ' + arguments1);
			}
			else {
				arguments1 = '';
			}
		}
		var args = [];
		regex = new $Franca_Text_Regex((allowEscapedDoubleQuotes ? '"((\\\\"|[^"])*)"+|[^\\s]+' : '"([^"]*)"+|[^\\s]+'), 4);
		var $t1 = ss.getEnumerator(regex.match(arguments1));
		try {
			while ($t1.moveNext()) {
				var match1 = $t1.current();
				if (!$System_StringExtensions.isNullOrEmpty(match1.value, true)) {
					var s;
					if (!$System_StringExtensions.isNullOrEmpty(match1.groups[1], false)) {
						if (allowEscapedDoubleQuotes) {
							s = ss.replaceAllString(match1.groups[1], '\\"', '"');
						}
						else {
							s = match1.groups[1];
						}
					}
					else {
						s = match1.value.trim();
					}
					args.push(s);
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return args;
	};
	global.Franca.CommandLineArguments = $Franca_CommandLineArguments;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DelegateWrapper
	var $Franca_DelegateWrapper$1 = function(TDel) {
		var $type = function() {
			this.delegate = null;
			this.target = null;
		};
		$type.$ctor1 = function(del, target) {
			this.delegate = null;
			this.target = null;
			if (ss.referenceEquals(del, null)) {
				throw new ss.ArgumentNullException('del');
			}
			if (!ss.isAssignableFrom(Function, TDel)) {
				throw new ss.ArgumentException('Delegate wrapper TDel value must be a Delegate.', 'del');
			}
			this.delegate = del;
			this.target = target;
		};
		$type.getDefaultValue = function() {
			return new $type();
		};
		$type.op_Equality = function(lhs, rhs) {
			return lhs.equalsT(rhs);
		};
		$type.op_Inequality = function(lhs, rhs) {
			return !lhs.equalsT(rhs);
		};
		ss.registerGenericClassInstance($type, $Franca_DelegateWrapper$1, [TDel], {
			equals: function(obj) {
				if (ss.isNullOrUndefined(obj)) {
					return false;
				}
				var b = ss.safeCast(obj, $type);
				if (ss.isNullOrUndefined(b)) {
					return false;
				}
				return ss.referenceEquals(ss.unbox(b).delegate, this.delegate) && ss.referenceEquals(ss.unbox(b).target, this.target);
			},
			equalsT: function(other) {
				return ss.referenceEquals(this.delegate, other.delegate) && ss.referenceEquals(this.target, other.target);
			},
			getHashCode: function() {
				if (ss.referenceEquals(this.target, null)) {
					return ss.getHashCode(this.delegate);
				}
				else {
					return ss.getHashCode(this.delegate) ^ ss.getHashCode(this.target);
				}
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IEquatable];
		});
		$type.__class = false;
		return $type;
	};
	$Franca_DelegateWrapper$1.__typeName = 'Franca.DelegateWrapper$1';
	ss.initGenericClass($Franca_DelegateWrapper$1, $asm, 1);
	global.Franca.DelegateWrapper$1 = $Franca_DelegateWrapper$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DuplicateItemException
	var $Franca_DuplicateItemException = function() {
		ss.Exception.call(this);
	};
	$Franca_DuplicateItemException.__typeName = 'Franca.DuplicateItemException';
	$Franca_DuplicateItemException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_DuplicateItemException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.DuplicateItemException = $Franca_DuplicateItemException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ElementExtensions
	var $Franca_ElementExtensions = function() {
	};
	$Franca_ElementExtensions.__typeName = 'Franca.ElementExtensions';
	$Franca_ElementExtensions.containsChild = function(element, child) {
		for (var i = 0; i < element.children.length; i++) {
			if (ss.referenceEquals(element.children[i], child)) {
				return true;
			}
		}
		return false;
	};
	global.Franca.ElementExtensions = $Franca_ElementExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Endian
	var $Franca_Endian = function() {
	};
	$Franca_Endian.__typeName = 'Franca.Endian';
	global.Franca.Endian = $Franca_Endian;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.EnumHelper
	var $Franca_EnumHelper = function() {
	};
	$Franca_EnumHelper.__typeName = 'Franca.EnumHelper';
	$Franca_EnumHelper.parse = function(T) {
		return function(value, ignoreCase) {
			if (ss.isNullOrUndefined(value)) {
				throw new ss.ArgumentNullException('value');
			}
			if (!ss.isEnum(T) || $System_StringExtensions.isEmpty(value, true)) {
				throw new ss.ArgumentException('Generic type argument must be Enum type.');
			}
			var type = T;
			var values = Object.keys(type.prototype);
			var index = (ignoreCase ? Enumerable.from(values).indexOf(value, $Franca_StringHelper.get_caseInsensitiveComparer()) : ss.indexOf(values, value));
			if (index < 0) {
				var num = {};
				if ($Franca_Calc.tryParseInt(value, num)) {
					return ss.cast(num.$, T);
				}
				throw new ss.ArgumentException('value', ss.formatString('{0} is not an underlying value of the {1} enumeration.', value, ss.getTypeName(type)));
			}
			else {
				return ss.cast(ss.Enum.parse(type, values[index]), T);
			}
		};
	};
	$Franca_EnumHelper.getValues = function(T) {
		return function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, $t1, val;
					var $finally = function() {
						$t1.dispose();
					};
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									if (!ss.isEnum(T)) {
										throw new ss.ArgumentException('Generic type argument must be Enum type.');
									}
									$t1 = Enumerable.from(ss.Enum.getValues(T)).select(function(x) {
										return ss.cast(x, T);
									}).getEnumerator();
									$state = 3;
									continue $sm1;
								}
								case 3: {
									$state = 1;
									if (!$t1.moveNext()) {
										$state = 2;
										continue $sm1;
									}
									val = $t1.current();
									$result = val;
									$state = 3;
									return true;
								}
								case 2: {
									$state = -1;
									$finally.call(this);
									$state = -1;
									break $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, function() {
						try {
							switch ($state) {
								case 1:
								case 2:
								case 3: {
									try {
										break;
									}
									finally {
										$finally.call(this);
									}
								}
							}
						}
						finally {
							$state = -1;
						}
					}, this);
				}).call(this);
			}, this);
		};
	};
	$Franca_EnumHelper.isDefined = function(T) {
		return function(value) {
			if (!ss.isEnum(T)) {
				throw new ss.ArgumentException('Generic type argument must be Enum type.');
			}
			return Enumerable.from(ss.Enum.getValues(T)).select(function(x) {
				return ss.cast(x, ss.Int32);
			}).contains(value);
		};
	};
	$Franca_EnumHelper.tryCast = function(T) {
		return function(value, result) {
			if (!ss.isEnum(T)) {
				throw new ss.ArgumentException('Generic type argument must be Enum type.');
			}
			if ($Franca_EnumHelper.isDefined(T).call(null, value)) {
				result.$ = ss.cast(value, T);
				return true;
			}
			result.$ = ss.getDefaultValue(T);
			return false;
		};
	};
	$Franca_EnumHelper.random = function(T) {
		return function(random) {
			if (!ss.isEnum(T)) {
				throw new ss.ArgumentException('Generic type argument must be Enum type.');
			}
			if (ss.isNullOrUndefined(random)) {
				if (ss.isNullOrUndefined($Franca_EnumHelper.$randomRNG)) {
					$Franca_EnumHelper.$randomRNG = new $Franca_RNG();
				}
				random = $Franca_EnumHelper.$randomRNG;
			}
			var values = Enumerable.from($Franca_EnumHelper.getValues(T).call(null)).toArray();
			if (values.length > 0) {
				return values[random.nextMax(values.length)];
			}
			return ss.getDefaultValue(T);
		};
	};
	global.Franca.EnumHelper = $Franca_EnumHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.FileType
	var $Franca_FileType = function() {
	};
	$Franca_FileType.__typeName = 'Franca.FileType';
	global.Franca.FileType = $Franca_FileType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Fix53
	var $Franca_Fix53 = function() {
		this.raw = 0;
	};
	$Franca_Fix53.__typeName = 'Franca.Fix53';
	$Franca_Fix53.$ctor1 = function(value) {
		this.raw = 0;
		ss.shallowCopy(value, this);
	};
	$Franca_Fix53.$ctor3 = function(value, isRawValue) {
		this.raw = 0;
		if (isRawValue) {
			this.raw = Math.trunc(value);
		}
		else if (isNaN(value)) {
			throw new ss.ArgumentException('Fix53 value was not a number.');
		}
		else if ($Franca_FloatExtensions.isInfinite(value)) {
			throw new ss.ArgumentException('Fix53 value was not a number.');
		}
		else {
			this.raw = Math.round(value * $Franca_Fix53.scalar);
		}
		if (this.raw > $Franca_Fix53.maxRawValue || this.raw < $Franca_Fix53.minRawValue) {
			throw new $System_OverflowException.$ctor1('Fix53 was of a value greater than MaxValue or less than MinValue.');
		}
	};
	$Franca_Fix53.$ctor2 = function(reader) {
		this.raw = 0;
		this.raw = 0;
		if (!reader.isInteger() && !reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		if (reader.isInteger()) {
			this.raw = $Franca_Fix53.$deserializeValue(reader);
		}
		else {
			var _requiredField_fix53Value = false;
			var $t1 = reader.readObject().getEnumerator();
			try {
				while ($t1.moveNext()) {
					var _objIter1 = $t1.current();
					switch (_objIter1.key) {
						default: {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						case 'fix53Value': {
							{
								_requiredField_fix53Value = true;
								if (!reader.isInteger()) {
									throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
								}
								this.raw = $Franca_Fix53.$deserializeValue(reader);
							}
							break;
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
			if (!_requiredField_fix53Value) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		}
	};
	$Franca_Fix53.getDefaultValue = function() {
		return new $Franca_Fix53();
	};
	$Franca_Fix53.op_Addition = function(a, b) {
		return new $Franca_Fix53.$ctor3(a.raw + b.raw, true);
	};
	$Franca_Fix53.op_Subtraction = function(a, b) {
		return new $Franca_Fix53.$ctor3(a.raw - b.raw, true);
	};
	$Franca_Fix53.op_Multiply = function(a, b) {
		if (a.raw === 0 || b.raw === 0) {
			return new $Franca_Fix53.$ctor3(0, true);
		}
		var absA = Math.abs(a.raw);
		var absB = Math.abs(b.raw);
		var small = absA < 8388607 && absB < 255 || absA < 32767 && absB < 32767 || absA < 255 && absB < 8388607;
		if (small) {
			// multiplication fits in a regular int (64 bits for C#, 32 bits for JS)
			return new $Franca_Fix53.$ctor3(a.raw * b.raw >> $Franca_Fix53.fractionBits, true);
		}
		else {
			// use big int to hold and shift
			//bigA._initNumber(a.Raw, 10, "be");
			//bigB._initNumber(b.Raw, 10, "be");
			//bigA.MulInline(bigB).RShiftInlineUnsigned(FractionBits, 128);
			//return new Fix53(bigA.ToNumber(), true);
			var aBig = bigInt(a.raw);
			var bBig = bigInt(b.raw);
			var resultBig = aBig.multiply(bBig).shiftRight(21);
			if (resultBig.lesser($Franca_Fix53.minRawValue) || resultBig.greater($Franca_Fix53.maxRawValue)) {
				throw new $System_OverflowException.$ctor1('Fix53 was of a value greater than MaxValue or less than MinValue.');
			}
			else {
				return new $Franca_Fix53.$ctor3(resultBig.valueOf(), true);
			}
		}
	};
	$Franca_Fix53.op_Division = function(a, b) {
		if (b.raw === 0) {
			throw new ss.DivideByZeroException();
		}
		else if (a.raw === 0) {
			return new $Franca_Fix53.$ctor3(0, true);
		}
		// don't take chances; just use big integer's integer division
		var small = false;
		if (small) {
			// multiplication fits in a regular int (64 bits for C#, 53 bits for JS)
			return new $Franca_Fix53.$ctor3(Math.trunc(a.raw * $Franca_Fix53.scalar / b.raw), true);
		}
		else {
			// use big int to hold and shift
			//bigA._initNumber(a.Raw, 10, "be");
			//bigB._initNumber(b.Raw, 10, "be");
			//Console.WriteLine(new JsBigNumber(a.Raw).MulInline(Scalar).ToString());
			//Console.WriteLine(new JsBigNumber(a.Raw).MulInline(Scalar).Div(bigB).ToString());
			//return new Fix53(bigA.MulInline(Scalar).Div(bigB).ToNumber(), true);
			var aBig = bigInt(a.raw);
			var resultBig = aBig.multiply($Franca_Fix53.scalar).divide(b.raw);
			if (resultBig.lesser($Franca_Fix53.minRawValue) || resultBig.greater($Franca_Fix53.maxRawValue)) {
				throw new $System_OverflowException.$ctor1('Fix53 was of a value greater than MaxValue or less than MinValue.');
			}
			else {
				return new $Franca_Fix53.$ctor3(resultBig.valueOf(), true);
			}
		}
	};
	$Franca_Fix53.op_Modulus = function(a, b) {
		if (b.raw === 0) {
			throw new ss.DivideByZeroException();
		}
		return new $Franca_Fix53.$ctor3(a.raw % b.raw, true);
	};
	$Franca_Fix53.op_UnaryNegation = function(val) {
		return new $Franca_Fix53.$ctor3(-val.raw, true);
	};
	$Franca_Fix53.op_UnaryPlus = function(val) {
		return val;
	};
	$Franca_Fix53.op_Increment = function(val) {
		return new $Franca_Fix53.$ctor3(val.raw + $Franca_Fix53.scalar, true);
	};
	$Franca_Fix53.op_Decrement = function(val) {
		return new $Franca_Fix53.$ctor3(val.raw - $Franca_Fix53.scalar, true);
	};
	$Franca_Fix53.op_Addition$1 = function(a, b) {
		return $Franca_Fix53.op_Addition(a, new $Franca_Fix53.$ctor3(b, false));
	};
	$Franca_Fix53.op_Addition$2 = function(a, b) {
		return $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(a, false), b);
	};
	$Franca_Fix53.op_Subtraction$1 = function(a, b) {
		return $Franca_Fix53.op_Subtraction(a, new $Franca_Fix53.$ctor3(b, false));
	};
	$Franca_Fix53.op_Subtraction$2 = function(a, b) {
		return $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(a, false), b);
	};
	$Franca_Fix53.op_Multiply$1 = function(a, b) {
		return $Franca_Fix53.op_Multiply(a, new $Franca_Fix53.$ctor3(b, false));
	};
	$Franca_Fix53.op_Multiply$2 = function(a, b) {
		return $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(a, false), b);
	};
	$Franca_Fix53.op_Division$1 = function(a, b) {
		return $Franca_Fix53.op_Division(a, new $Franca_Fix53.$ctor3(b, false));
	};
	$Franca_Fix53.op_Division$2 = function(a, b) {
		return $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(a, false), b);
	};
	$Franca_Fix53.op_Modulus$1 = function(a, b) {
		if (b === 0) {
			throw new ss.DivideByZeroException();
		}
		return $Franca_Fix53.op_Modulus(a, new $Franca_Fix53.$ctor3(b, false));
	};
	$Franca_Fix53.op_Modulus$2 = function(a, b) {
		if (b.raw === 0) {
			throw new ss.DivideByZeroException();
		}
		return $Franca_Fix53.op_Modulus(new $Franca_Fix53.$ctor3(a, false), b);
	};
	$Franca_Fix53.cast_Double = function(val) {
		return val.raw / $Franca_Fix53.scalar;
	};
	$Franca_Fix53.cast_Float = function(val) {
		return val.raw / 2097152;
	};
	$Franca_Fix53.cast_DoubleToFix53 = function(val) {
		return new $Franca_Fix53.$ctor3(val, false);
	};
	$Franca_Fix53.cast_FloatToFix53 = function(val) {
		return new $Franca_Fix53.$ctor3(val, false);
	};
	$Franca_Fix53.cast_UInt32 = function(val) {
		$Franca_Fix53.uint32Converter[0] = $Franca_Fix53.cast_Double(val);
		return $Franca_Fix53.uint32Converter[0];
	};
	$Franca_Fix53.cast_Int32 = function(val) {
		$Franca_Fix53.int32Converter[0] = $Franca_Fix53.cast_Double(val);
		return $Franca_Fix53.int32Converter[0];
	};
	$Franca_Fix53.cast_UInt16 = function(val) {
		$Franca_Fix53.uint16Converter[0] = $Franca_Fix53.cast_Double(val);
		return $Franca_Fix53.uint16Converter[0];
	};
	$Franca_Fix53.cast_Int16 = function(val) {
		$Franca_Fix53.int16Converter[0] = $Franca_Fix53.cast_Double(val);
		return $Franca_Fix53.int16Converter[0];
	};
	$Franca_Fix53.cast_UInt8 = function(val) {
		$Franca_Fix53.uint8Converter[0] = $Franca_Fix53.cast_Double(val);
		return $Franca_Fix53.uint8Converter[0];
	};
	$Franca_Fix53.cast_Int8 = function(val) {
		$Franca_Fix53.int8Converter[0] = $Franca_Fix53.cast_Double(val);
		return $Franca_Fix53.int8Converter[0];
	};
	$Franca_Fix53.cast_Char = function(val) {
		return ss.Int32.trunc($Franca_Fix53.cast_Double(val));
	};
	$Franca_Fix53.cast_Bool = function(val) {
		return ((val.raw === 0) ? false : true);
	};
	$Franca_Fix53.cast_UInt64ToFix53 = function(val) {
		return new $Franca_Fix53.$ctor3(val, false);
	};
	$Franca_Fix53.cast_Int64ToFix53 = function(val) {
		return new $Franca_Fix53.$ctor3(val, false);
	};
	$Franca_Fix53.cast_UInt32ToFix53 = function(val) {
		return new $Franca_Fix53.$ctor3(val, false);
	};
	$Franca_Fix53.cast_Int32ToFix53 = function(val) {
		return new $Franca_Fix53.$ctor3(val, false);
	};
	$Franca_Fix53.cast_UInt16ToFix53 = function(val) {
		return new $Franca_Fix53.$ctor3(val, false);
	};
	$Franca_Fix53.cast_Int16ToFix53 = function(val) {
		return new $Franca_Fix53.$ctor3(val, false);
	};
	$Franca_Fix53.cast_UInt8ToFix53 = function(val) {
		return new $Franca_Fix53.$ctor3(val, false);
	};
	$Franca_Fix53.cast_Int8ToFix53 = function(val) {
		return new $Franca_Fix53.$ctor3(val, false);
	};
	$Franca_Fix53.cast_CharToFix53 = function(val) {
		return new $Franca_Fix53.$ctor3(val, false);
	};
	$Franca_Fix53.cast_BoolToFix53 = function(val) {
		return (val ? $Franca_Fix53.minusOne : $Franca_Fix53.zero);
	};
	$Franca_Fix53.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_Fix53.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	$Franca_Fix53.op_GreaterThan = function(lhs, rhs) {
		return lhs.raw > rhs.raw;
	};
	$Franca_Fix53.op_LessThan = function(lhs, rhs) {
		return lhs.raw < rhs.raw;
	};
	$Franca_Fix53.op_GreaterThanOrEqual = function(lhs, rhs) {
		return lhs.raw >= rhs.raw;
	};
	$Franca_Fix53.op_LessThanOrEqual = function(lhs, rhs) {
		return lhs.raw <= rhs.raw;
	};
	$Franca_Fix53.op_Equality$3 = function(lhs, rhs) {
		return ss.equalsT(lhs, $Franca_Fix53.cast_Double(rhs));
	};
	$Franca_Fix53.op_Equality$1 = function(lhs, rhs) {
		return ss.equalsT($Franca_Fix53.cast_Double(lhs), rhs);
	};
	$Franca_Fix53.op_Inequality$3 = function(lhs, rhs) {
		return !ss.equalsT(lhs, $Franca_Fix53.cast_Double(rhs));
	};
	$Franca_Fix53.op_Inequality$1 = function(lhs, rhs) {
		return !lhs.equals$1(rhs);
	};
	$Franca_Fix53.op_GreaterThan$3 = function(lhs, rhs) {
		return lhs > $Franca_Fix53.cast_Double(rhs);
	};
	$Franca_Fix53.op_GreaterThan$1 = function(lhs, rhs) {
		return $Franca_Fix53.cast_Double(lhs) > rhs;
	};
	$Franca_Fix53.op_LessThan$3 = function(lhs, rhs) {
		return lhs < $Franca_Fix53.cast_Double(rhs);
	};
	$Franca_Fix53.op_LessThan$1 = function(lhs, rhs) {
		return $Franca_Fix53.cast_Double(lhs) < rhs;
	};
	$Franca_Fix53.op_GreaterThanOrEqual$3 = function(lhs, rhs) {
		return lhs >= $Franca_Fix53.cast_Double(rhs);
	};
	$Franca_Fix53.op_GreaterThanOrEqual$1 = function(lhs, rhs) {
		return $Franca_Fix53.cast_Double(lhs) >= rhs;
	};
	$Franca_Fix53.op_LessThanOrEqual$3 = function(lhs, rhs) {
		return lhs <= $Franca_Fix53.cast_Double(rhs);
	};
	$Franca_Fix53.op_LessThanOrEqual$1 = function(lhs, rhs) {
		return $Franca_Fix53.cast_Double(lhs) <= rhs;
	};
	$Franca_Fix53.op_Equality$4 = function(lhs, rhs) {
		return ss.equalsT($Franca_Fix53.cast_Double(rhs), lhs);
	};
	$Franca_Fix53.op_Equality$2 = function(lhs, rhs) {
		return ss.equalsT($Franca_Fix53.cast_Double(lhs), rhs);
	};
	$Franca_Fix53.op_Inequality$4 = function(lhs, rhs) {
		return !ss.equalsT(lhs, $Franca_Fix53.cast_Double(rhs));
	};
	$Franca_Fix53.op_Inequality$2 = function(lhs, rhs) {
		return !lhs.equals$2(rhs);
	};
	$Franca_Fix53.op_GreaterThan$4 = function(lhs, rhs) {
		return lhs > $Franca_Fix53.cast_Double(rhs);
	};
	$Franca_Fix53.op_GreaterThan$2 = function(lhs, rhs) {
		return $Franca_Fix53.cast_Double(lhs) > rhs;
	};
	$Franca_Fix53.op_LessThan$4 = function(lhs, rhs) {
		return lhs < $Franca_Fix53.cast_Double(rhs);
	};
	$Franca_Fix53.op_LessThan$2 = function(lhs, rhs) {
		return $Franca_Fix53.cast_Double(lhs) < rhs;
	};
	$Franca_Fix53.op_GreaterThanOrEqual$4 = function(lhs, rhs) {
		return lhs >= $Franca_Fix53.cast_Double(rhs);
	};
	$Franca_Fix53.op_GreaterThanOrEqual$2 = function(lhs, rhs) {
		return $Franca_Fix53.cast_Double(lhs) >= rhs;
	};
	$Franca_Fix53.op_LessThanOrEqual$4 = function(lhs, rhs) {
		return lhs <= $Franca_Fix53.cast_Double(rhs);
	};
	$Franca_Fix53.op_LessThanOrEqual$2 = function(lhs, rhs) {
		return $Franca_Fix53.cast_Double(lhs) <= rhs;
	};
	$Franca_Fix53.$deserializeValue = function(reader) {
		return Math.trunc(reader.readNumber(false));
	};
	$Franca_Fix53.$parseFloat = function(dblStr) {
		return parseFloat(dblStr);
	};
	$Franca_Fix53.$parseInt = function(intStr) {
		return parseFloat(intStr);
	};
	$Franca_Fix53.test = function(throwExceptions) {
		$Franca_Fix53.$throwExceptions = throwExceptions;
		$Franca_Fix53.$failedTests = [];
		// NOTE: We use the ParseFloat function and strings because Saltarelle Compiler
		// mangles the value literals in the conversion to JS.
		// constants
		$Franca_Fix53.$assert(Number, Number).call(null, (new $Franca_Fix53.$ctor3(1, false)).raw, Math.pow(2, 21), 'constants', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.scalar, Math.pow(2, 21), 'constants', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.maxRawValue, Math.pow(2, 53) - 2, 'constants', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.minRawValue, -(Math.pow(2, 53) - 2), 'constants', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.maxValue, $Franca_Fix53.$parseFloat('4294967295.99999904632568359375'), 'constants', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.minValue, $Franca_Fix53.$parseFloat('-4294967295.99999904632568359375'), 'constants', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.maxIntegerValue, 4294967295, 'constants', 1E-09);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.minIntegerValue, -4294967295, 'constants', 1E-09);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division($Franca_Fix53.maxIntegerValue, new $Franca_Fix53.$ctor3($Franca_Fix53.scalar, false)).raw, 4294967295, 'constants', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division($Franca_Fix53.minIntegerValue, new $Franca_Fix53.$ctor3($Franca_Fix53.scalar, false)).raw, -4294967295, 'constants', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.epsilon, $Franca_Fix53.$parseFloat('0.000000476837158203125'), 'constants', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.one, 1, 'constants', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.zero, 0, 'constants', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.minusOne, -1, 'constants', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.e, $Franca_Fix53.$parseFloat('2.71828174591064453125'), 'constants', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.PI, $Franca_Fix53.$parseFloat('3.141592502593994140625'), 'constants', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.tau, $Franca_Fix53.$parseFloat('6.283185482025146484375'), 'constants', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.e, Math.E, 'constants', 0.0001);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.PI, Math.PI, 'constants', 0.0001);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.tau, 6.28318548202515, 'constants', 0.0001);
		// + operator
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition($Franca_Fix53.one, $Franca_Fix53.one), new $Franca_Fix53.$ctor3(2, false), '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition($Franca_Fix53.one, $Franca_Fix53.op_UnaryNegation($Franca_Fix53.one)), $Franca_Fix53.zero, '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition($Franca_Fix53.minusOne, $Franca_Fix53.minusOne), new $Franca_Fix53.$ctor3(-2, false), '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition($Franca_Fix53.zero, $Franca_Fix53.one), $Franca_Fix53.one, '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition($Franca_Fix53.zero, $Franca_Fix53.minusOne), $Franca_Fix53.minusOne, '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(1.5, false), new $Franca_Fix53.$ctor3(1.25, false)), new $Franca_Fix53.$ctor3(2.75, false), '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(2958, false), new $Franca_Fix53.$ctor3(923, false)), new $Franca_Fix53.$ctor3(3881, false), '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(-2958, false), new $Franca_Fix53.$ctor3(923, false)), new $Franca_Fix53.$ctor3(-2035, false), '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(2958, false), new $Franca_Fix53.$ctor3(-923, false)), new $Franca_Fix53.$ctor3(2035, false), '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(-2958, false), new $Franca_Fix53.$ctor3(-923, false)), new $Franca_Fix53.$ctor3(-3881, false), '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(67896.12345, false), new $Franca_Fix53.$ctor3(12345.98765, false)), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('80242.111099720001220703125'), false), '+ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(67896.12345, false), new $Franca_Fix53.$ctor3(12345.98765, false)).raw, 168279903777, '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(67896.12345, false), new $Franca_Fix53.$ctor3(12345.98765, false)), $Franca_Fix53.$parseFloat('80242.111099720001220703125'), '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('55550.135799884796142578125'), false), '+ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)).raw, 116497078393, '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Addition(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), $Franca_Fix53.$parseFloat('55550.135799884796142578125'), '+ operator', 0);
		$Franca_Fix53.$assertException(function() {
			var test = $Franca_Fix53.op_Addition($Franca_Fix53.minValue, $Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon));
		}, $System_OverflowException, '+ operator');
		$Franca_Fix53.$assertException(function() {
			var test1 = $Franca_Fix53.op_Addition($Franca_Fix53.maxValue, $Franca_Fix53.epsilon);
		}, $System_OverflowException, '+ operator');
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition$1($Franca_Fix53.one, 5), new $Franca_Fix53.$ctor3(6, false), '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, ss.Int32).call(null, $Franca_Fix53.op_Addition$2(5, $Franca_Fix53.one), 6, '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition$1(new $Franca_Fix53.$ctor3(9.5, false), 5), new $Franca_Fix53.$ctor3(14.5, false), '+ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Addition$2(5, new $Franca_Fix53.$ctor3(9.5, false)), new $Franca_Fix53.$ctor3(14.5, false), '+ operator', 0);
		// - operator
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction($Franca_Fix53.one, $Franca_Fix53.one), $Franca_Fix53.zero, '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction($Franca_Fix53.op_UnaryNegation($Franca_Fix53.one), $Franca_Fix53.op_UnaryNegation($Franca_Fix53.one)), $Franca_Fix53.zero, '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction($Franca_Fix53.minusOne, $Franca_Fix53.minusOne), $Franca_Fix53.zero, '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction($Franca_Fix53.zero, $Franca_Fix53.one), $Franca_Fix53.minusOne, '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction($Franca_Fix53.zero, $Franca_Fix53.minusOne), $Franca_Fix53.one, '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(1.5, false), new $Franca_Fix53.$ctor3(1.25, false)), new $Franca_Fix53.$ctor3(0.25, false), '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(2958, false), new $Franca_Fix53.$ctor3(923, false)), new $Franca_Fix53.$ctor3(2035, false), '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(-2958, false), new $Franca_Fix53.$ctor3(923, false)), new $Franca_Fix53.$ctor3(-3881, false), '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(2958, false), new $Franca_Fix53.$ctor3(-923, false)), new $Franca_Fix53.$ctor3(3881, false), '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(-2958, false), new $Franca_Fix53.$ctor3(-923, false)), new $Franca_Fix53.$ctor3(-2035, false), '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(67896.12345, false), new $Franca_Fix53.$ctor3(12345.98765, false)), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('55550.135799884796142578125'), false), '- operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(67896.12345, false), new $Franca_Fix53.$ctor3(12345.98765, false)).raw, 116497078393, '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(67896.12345, false), new $Franca_Fix53.$ctor3(12345.98765, false)), $Franca_Fix53.$parseFloat('55550.135799884796142578125'), '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('-55550.135799884796142578125'), false), '- operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)).raw, -116497078393, '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), $Franca_Fix53.$parseFloat('-55550.135799884796142578125'), '- operator', 0);
		$Franca_Fix53.$assertException(function() {
			var test2 = $Franca_Fix53.op_Subtraction($Franca_Fix53.minValue, $Franca_Fix53.epsilon);
		}, $System_OverflowException, '- operator');
		$Franca_Fix53.$assertException(function() {
			var test3 = $Franca_Fix53.op_Subtraction($Franca_Fix53.maxValue, $Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon));
		}, $System_OverflowException, '- operator');
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction$1($Franca_Fix53.one, 5), new $Franca_Fix53.$ctor3(-4, false), '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, ss.Int32).call(null, $Franca_Fix53.op_Subtraction$2(5, $Franca_Fix53.one), 4, '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction$1(new $Franca_Fix53.$ctor3(9.5, false), 5), new $Franca_Fix53.$ctor3(4.5, false), '- operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Subtraction$2(5, new $Franca_Fix53.$ctor3(9.5, false)), new $Franca_Fix53.$ctor3(-4.5, false), '- operator', 0);
		// * operator
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(10, false), new $Franca_Fix53.$ctor3(3, false)), new $Franca_Fix53.$ctor3(30, false), '* operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(0.5, false), new $Franca_Fix53.$ctor3(7.8, false)).raw, 8178893, '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(0.5, false), new $Franca_Fix53.$ctor3(7.8, false)), $Franca_Fix53.$parseFloat('3.900000095367431640625'), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('838244701.5885410308837890625'), false), '* operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)).raw, $Franca_Fix53.$parseInt('1757926552425812'), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), $Franca_Fix53.$parseFloat('838244701.5885410308837890625'), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('-838244701.588541507720947265625'), false), '* operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)).raw, $Franca_Fix53.$parseInt('-1757926552425813'), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), $Franca_Fix53.$parseFloat('-838244701.588541507720947265625'), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(-67896.12345, false)), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('838244701.5885410308837890625'), false), '* operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(-67896.12345, false)).raw, $Franca_Fix53.$parseInt('1757926552425812'), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(-67896.12345, false)), $Franca_Fix53.$parseFloat('838244701.5885410308837890625'), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-1, false), $Franca_Fix53.maxValue), $Franca_Fix53.minValue, '* operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-1, false), $Franca_Fix53.maxValue).raw, $Franca_Fix53.minRawValue, '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-1, false), $Franca_Fix53.maxValue), $Franca_Fix53.$parseFloat('-4294967295.99999904632568359375'), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-1, false), $Franca_Fix53.minValue), $Franca_Fix53.maxValue, '* operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-1, false), $Franca_Fix53.minValue).raw, $Franca_Fix53.maxRawValue, '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(-1, false), $Franca_Fix53.minValue), $Franca_Fix53.$parseFloat('4294967295.99999904632568359375'), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(0, false), new $Franca_Fix53.$ctor3(-67896.12345, false)), $Franca_Fix53.zero, '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(12345.98765, false), new $Franca_Fix53.$ctor3(0, false)), $Franca_Fix53.zero, '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(67896.12345, false), new $Franca_Fix53.$ctor3(0, false)), $Franca_Fix53.zero, '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(0, false), new $Franca_Fix53.$ctor3(-12345.98765, false)), $Franca_Fix53.zero, '* operator', 0);
		$Franca_Fix53.$assertException(function() {
			var test4 = $Franca_Fix53.op_Multiply($Franca_Fix53.maxValue, $Franca_Fix53.maxValue);
		}, $System_OverflowException, '* operator');
		$Franca_Fix53.$assertException(function() {
			var test5 = $Franca_Fix53.op_Multiply($Franca_Fix53.minValue, $Franca_Fix53.minValue);
		}, $System_OverflowException, '* operator');
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.one, $Franca_Fix53.epsilon), $Franca_Fix53.epsilon, '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.one, $Franca_Fix53.epsilon), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('0.000000476837158203125'), false), '* operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.one, $Franca_Fix53.epsilon).raw, 1, '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.one, $Franca_Fix53.epsilon), $Franca_Fix53.$parseFloat('0.000000476837158203125'), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.minusOne, $Franca_Fix53.epsilon), $Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.minusOne, $Franca_Fix53.epsilon), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('-0.000000476837158203125'), false), '* operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.minusOne, $Franca_Fix53.epsilon).raw, -1, '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.minusOne, $Franca_Fix53.epsilon), $Franca_Fix53.$parseFloat('-0.000000476837158203125'), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply$1($Franca_Fix53.one, 5), new $Franca_Fix53.$ctor3(5, false), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, ss.Int32).call(null, $Franca_Fix53.op_Multiply$2(5, $Franca_Fix53.one), 5, '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply$1(new $Franca_Fix53.$ctor3(9.5, false), 5), new $Franca_Fix53.$ctor3(47.5, false), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply$2(5, new $Franca_Fix53.$ctor3(9.5, false)), new $Franca_Fix53.$ctor3(47.5, false), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(8388607, true), new $Franca_Fix53.$ctor3(255, true)), new $Franca_Fix53.$ctor3(1019, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(32767, true), new $Franca_Fix53.$ctor3(32767, true)), new $Franca_Fix53.$ctor3(511, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(255, true), new $Franca_Fix53.$ctor3(8388607, true)), new $Franca_Fix53.$ctor3(1019, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(8388608, true), new $Franca_Fix53.$ctor3(256, true)), new $Franca_Fix53.$ctor3(1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(32768, true), new $Franca_Fix53.$ctor3(32768, true)), new $Franca_Fix53.$ctor3(512, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(256, true), new $Franca_Fix53.$ctor3(8388608, true)), new $Franca_Fix53.$ctor3(1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(8388607, true), new $Franca_Fix53.$ctor3(256, true)), new $Franca_Fix53.$ctor3(1023, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(32767, true), new $Franca_Fix53.$ctor3(32768, true)), new $Franca_Fix53.$ctor3(511, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(255, true), new $Franca_Fix53.$ctor3(8388608, true)), new $Franca_Fix53.$ctor3(1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(8388608, true), new $Franca_Fix53.$ctor3(255, true)), new $Franca_Fix53.$ctor3(1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(32768, true), new $Franca_Fix53.$ctor3(32767, true)), new $Franca_Fix53.$ctor3(511, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(256, true), new $Franca_Fix53.$ctor3(8388607, true)), new $Franca_Fix53.$ctor3(1023, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388607, true)), new $Franca_Fix53.$ctor3(255, true)), new $Franca_Fix53.$ctor3(-1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32767, true)), new $Franca_Fix53.$ctor3(32767, true)), new $Franca_Fix53.$ctor3(-512, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(255, true)), new $Franca_Fix53.$ctor3(8388607, true)), new $Franca_Fix53.$ctor3(-1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388608, true)), new $Franca_Fix53.$ctor3(256, true)), new $Franca_Fix53.$ctor3(-1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32768, true)), new $Franca_Fix53.$ctor3(32768, true)), new $Franca_Fix53.$ctor3(-512, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(256, true)), new $Franca_Fix53.$ctor3(8388608, true)), new $Franca_Fix53.$ctor3(-1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388607, true)), new $Franca_Fix53.$ctor3(256, true)), new $Franca_Fix53.$ctor3(-1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32767, true)), new $Franca_Fix53.$ctor3(32768, true)), new $Franca_Fix53.$ctor3(-512, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(255, true)), new $Franca_Fix53.$ctor3(8388608, true)), new $Franca_Fix53.$ctor3(-1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388608, true)), new $Franca_Fix53.$ctor3(255, true)), new $Franca_Fix53.$ctor3(-1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32768, true)), new $Franca_Fix53.$ctor3(32767, true)), new $Franca_Fix53.$ctor3(-512, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(256, true)), new $Franca_Fix53.$ctor3(8388607, true)), new $Franca_Fix53.$ctor3(-1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(8388607, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(255, true))), new $Franca_Fix53.$ctor3(-1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(32767, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32767, true))), new $Franca_Fix53.$ctor3(-512, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(255, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388607, true))), new $Franca_Fix53.$ctor3(-1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(8388608, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(256, true))), new $Franca_Fix53.$ctor3(-1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(32768, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32768, true))), new $Franca_Fix53.$ctor3(-512, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(256, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388608, true))), new $Franca_Fix53.$ctor3(-1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(8388607, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(256, true))), new $Franca_Fix53.$ctor3(-1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(32767, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32768, true))), new $Franca_Fix53.$ctor3(-512, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(255, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388608, true))), new $Franca_Fix53.$ctor3(-1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(8388608, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(255, true))), new $Franca_Fix53.$ctor3(-1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(32768, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32767, true))), new $Franca_Fix53.$ctor3(-512, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply(new $Franca_Fix53.$ctor3(256, true), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388607, true))), new $Franca_Fix53.$ctor3(-1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388607, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(255, true))), new $Franca_Fix53.$ctor3(1019, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32767, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32767, true))), new $Franca_Fix53.$ctor3(511, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(255, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388607, true))), new $Franca_Fix53.$ctor3(1019, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388608, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(256, true))), new $Franca_Fix53.$ctor3(1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32768, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32768, true))), new $Franca_Fix53.$ctor3(512, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(256, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388608, true))), new $Franca_Fix53.$ctor3(1024, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388607, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(256, true))), new $Franca_Fix53.$ctor3(1023, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32767, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32768, true))), new $Franca_Fix53.$ctor3(511, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(255, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388608, true))), new $Franca_Fix53.$ctor3(1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388608, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(255, true))), new $Franca_Fix53.$ctor3(1020, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32768, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(32767, true))), new $Franca_Fix53.$ctor3(511, true), '* operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Multiply($Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(256, true)), $Franca_Fix53.op_UnaryNegation(new $Franca_Fix53.$ctor3(8388607, true))), new $Franca_Fix53.$ctor3(1023, true), '* operator', 0);
		// / operator
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(20, false), new $Franca_Fix53.$ctor3(5, false)), new $Franca_Fix53.$ctor3(4, false), '/ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(0.5, false), new $Franca_Fix53.$ctor3(7.8, false)).raw, 134432, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(0.5, false), new $Franca_Fix53.$ctor3(7.8, false)), $Franca_Fix53.$parseFloat('0.0641021728515625'), '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('0.18183612823486328125'), false), '/ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)).raw, 381338, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), $Franca_Fix53.$parseFloat('0.18183612823486328125'), '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('-0.18183612823486328125'), false), '/ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)).raw, -381338, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(67896.12345, false)), $Franca_Fix53.$parseFloat('-0.18183612823486328125'), '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(-67896.12345, false)), new $Franca_Fix53.$ctor3($Franca_Fix53.$parseFloat('0.18183612823486328125'), false), '/ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(-67896.12345, false)).raw, 381338, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(-12345.98765, false), new $Franca_Fix53.$ctor3(-67896.12345, false)), $Franca_Fix53.$parseFloat('0.18183612823486328125'), '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division($Franca_Fix53.maxValue, new $Franca_Fix53.$ctor3(-1, false)), $Franca_Fix53.minValue, '/ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division($Franca_Fix53.maxValue, new $Franca_Fix53.$ctor3(-1, false)).raw, $Franca_Fix53.minRawValue, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Division($Franca_Fix53.maxValue, new $Franca_Fix53.$ctor3(-1, false)), $Franca_Fix53.$parseFloat('-4294967295.99999904632568359375'), '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division($Franca_Fix53.minValue, new $Franca_Fix53.$ctor3(-1, false)), $Franca_Fix53.maxValue, '/ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division($Franca_Fix53.minValue, new $Franca_Fix53.$ctor3(-1, false)).raw, $Franca_Fix53.maxRawValue, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Division($Franca_Fix53.minValue, new $Franca_Fix53.$ctor3(-1, false)), $Franca_Fix53.$parseFloat('4294967295.99999904632568359375'), '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division($Franca_Fix53.maxValue, new $Franca_Fix53.$ctor3(-1, false)), $Franca_Fix53.minValue, '/ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division($Franca_Fix53.maxValue, new $Franca_Fix53.$ctor3(-1, false)).raw, $Franca_Fix53.minRawValue, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Division($Franca_Fix53.maxValue, new $Franca_Fix53.$ctor3(-1, false)), $Franca_Fix53.$parseFloat('-4294967295.99999904632568359375'), '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division($Franca_Fix53.minValue, new $Franca_Fix53.$ctor3(-1, false)), $Franca_Fix53.maxValue, '/ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division($Franca_Fix53.minValue, new $Franca_Fix53.$ctor3(-1, false)).raw, $Franca_Fix53.maxRawValue, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Division($Franca_Fix53.minValue, new $Franca_Fix53.$ctor3(-1, false)), $Franca_Fix53.$parseFloat('4294967295.99999904632568359375'), '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(1, false), $Franca_Fix53.maxValue), $Franca_Fix53.zero, '/ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(1, false), $Franca_Fix53.maxValue).raw, 0, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(1, false), $Franca_Fix53.maxValue), 0, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(1, false), $Franca_Fix53.minValue), $Franca_Fix53.zero, '/ operator', 0);
		$Franca_Fix53.$assert(Number, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(1, false), $Franca_Fix53.minValue).raw, 0, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(1, false), $Franca_Fix53.minValue), 0, '/ operator', 0);
		$Franca_Fix53.$assertException(function() {
			var test6 = $Franca_Fix53.op_Division($Franca_Fix53.one, $Franca_Fix53.zero);
		}, ss.DivideByZeroException, '/ operator');
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(0, false), new $Franca_Fix53.$ctor3(-67896.12345, false)), $Franca_Fix53.zero, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(0, false), new $Franca_Fix53.$ctor3(67896.12345, false)), $Franca_Fix53.zero, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(0, false), new $Franca_Fix53.$ctor3(-67896.12345, false)), $Franca_Fix53.zero, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division(new $Franca_Fix53.$ctor3(0, false), new $Franca_Fix53.$ctor3(67896.12345, false)), $Franca_Fix53.zero, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division$1($Franca_Fix53.one, 5), new $Franca_Fix53.$ctor3(0.2, false), '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, ss.Int32).call(null, $Franca_Fix53.op_Division$2(5, $Franca_Fix53.one), 5, '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division$1(new $Franca_Fix53.$ctor3(12.5, false), 5), new $Franca_Fix53.$ctor3(2.5, false), '/ operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Division$2(5, new $Franca_Fix53.$ctor3(0.5, false)), new $Franca_Fix53.$ctor3(10, false), '/ operator', 0);
		// comparison operators
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThan($Franca_Fix53.epsilon, $Franca_Fix53.zero), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThan($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon), $Franca_Fix53.zero), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThanOrEqual($Franca_Fix53.epsilon, $Franca_Fix53.zero), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThanOrEqual($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon), $Franca_Fix53.zero), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThan($Franca_Fix53.maxValue, $Franca_Fix53.zero), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThan($Franca_Fix53.minValue, $Franca_Fix53.zero), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThanOrEqual($Franca_Fix53.maxValue, $Franca_Fix53.zero), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThanOrEqual($Franca_Fix53.minValue, $Franca_Fix53.zero), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality($Franca_Fix53.zero, $Franca_Fix53.op_UnaryNegation($Franca_Fix53.zero)), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Inequality($Franca_Fix53.zero, $Franca_Fix53.op_UnaryNegation($Franca_Fix53.zero)), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality($Franca_Fix53.zero, new $Franca_Fix53.$ctor3(0, false)), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Inequality($Franca_Fix53.one, $Franca_Fix53.op_UnaryNegation($Franca_Fix53.one)), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality($Franca_Fix53.one, $Franca_Fix53.op_UnaryNegation($Franca_Fix53.one)), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Inequality($Franca_Fix53.one, $Franca_Fix53.op_UnaryPlus($Franca_Fix53.one)), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality($Franca_Fix53.one, $Franca_Fix53.op_UnaryPlus($Franca_Fix53.one)), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThan$1($Franca_Fix53.epsilon, 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThan$1($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon), 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThanOrEqual$1($Franca_Fix53.epsilon, 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThanOrEqual$1($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon), 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThan$1($Franca_Fix53.maxValue, 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThan$1($Franca_Fix53.minValue, 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThanOrEqual$1($Franca_Fix53.maxValue, 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThanOrEqual$1($Franca_Fix53.minValue, 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality$1($Franca_Fix53.zero, 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Inequality$1($Franca_Fix53.zero, 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality$1($Franca_Fix53.zero, 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Inequality$1($Franca_Fix53.zero, 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Inequality$1($Franca_Fix53.one, -1), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality$1($Franca_Fix53.one, -1), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Inequality$1($Franca_Fix53.one, 1), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality$1($Franca_Fix53.one, 1), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThan$2($Franca_Fix53.epsilon, 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThan$2($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon), 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThanOrEqual$2($Franca_Fix53.epsilon, 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThanOrEqual$2($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon), 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThan$2($Franca_Fix53.maxValue, 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThan$2($Franca_Fix53.minValue, 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_LessThanOrEqual$2($Franca_Fix53.maxValue, 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_GreaterThanOrEqual$2($Franca_Fix53.minValue, 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality$2($Franca_Fix53.zero, 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Inequality$2($Franca_Fix53.zero, 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality$2($Franca_Fix53.zero, 0), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Inequality$2($Franca_Fix53.zero, 0), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Inequality$2($Franca_Fix53.one, -1), true, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality$2($Franca_Fix53.one, -1), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Inequality$2($Franca_Fix53.one, 1), false, 'comparison operators', 0);
		$Franca_Fix53.$assert(Boolean, Boolean).call(null, $Franca_Fix53.op_Equality$2($Franca_Fix53.one, 1), true, 'comparison operators', 0);
		// misc operators
		var miscResult;
		miscResult = $Franca_Fix53.zero;
		miscResult = $Franca_Fix53.op_Increment(miscResult);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, miscResult, $Franca_Fix53.one, 'increment operator', 0);
		miscResult = $Franca_Fix53.one;
		miscResult = $Franca_Fix53.op_Increment(miscResult);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, miscResult, new $Franca_Fix53.$ctor3(2, false), 'increment operator', 0);
		miscResult = $Franca_Fix53.minusOne;
		miscResult = $Franca_Fix53.op_Increment(miscResult);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, miscResult, $Franca_Fix53.zero, 'increment operator', 0);
		miscResult = new $Franca_Fix53.$ctor3(-2, false);
		miscResult = $Franca_Fix53.op_Increment(miscResult);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, miscResult, $Franca_Fix53.minusOne, 'increment operator', 0);
		miscResult = $Franca_Fix53.maxValue;
		$Franca_Fix53.$assertException(function() {
			var $t1 = miscResult;
			miscResult = $Franca_Fix53.op_Increment($t1);
			var test7 = $t1;
		}, $System_OverflowException, 'increment operator');
		miscResult = $Franca_Fix53.zero;
		miscResult = $Franca_Fix53.op_Decrement(miscResult);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, miscResult, $Franca_Fix53.minusOne, 'decrement operator', 0);
		miscResult = $Franca_Fix53.minusOne;
		miscResult = $Franca_Fix53.op_Decrement(miscResult);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, miscResult, new $Franca_Fix53.$ctor3(-2, false), 'decrement operator', 0);
		miscResult = $Franca_Fix53.one;
		miscResult = $Franca_Fix53.op_Decrement(miscResult);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, miscResult, $Franca_Fix53.zero, 'decrement operator', 0);
		miscResult = new $Franca_Fix53.$ctor3(2, false);
		miscResult = $Franca_Fix53.op_Decrement(miscResult);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, miscResult, $Franca_Fix53.one, 'decrement operator', 0);
		miscResult = $Franca_Fix53.minValue;
		$Franca_Fix53.$assertException(function() {
			var $t2 = miscResult;
			miscResult = $Franca_Fix53.op_Decrement($t2);
			var test8 = $t2;
		}, $System_OverflowException, 'decrement operator');
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Modulus(new $Franca_Fix53.$ctor3(185.2374, false), new $Franca_Fix53.$ctor3(100, false)), new $Franca_Fix53.$ctor3(85.2374, false), '% operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Fix53.op_Modulus(new $Franca_Fix53.$ctor3(-185.2374, false), new $Franca_Fix53.$ctor3(100, false)), new $Franca_Fix53.$ctor3(-85.2374, false), '% operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, ss.Int32).call(null, $Franca_Fix53.op_Modulus$1(new $Franca_Fix53.$ctor3(150, false), 100), 50, '% operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, ss.Int32).call(null, $Franca_Fix53.op_Modulus$1(new $Franca_Fix53.$ctor3(-150, false), 100), -50, '% operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, ss.Int32).call(null, $Franca_Fix53.op_Modulus$2(150, new $Franca_Fix53.$ctor3(100, false)), 50, '% operator', 0);
		$Franca_Fix53.$assert($Franca_Fix53, ss.Int32).call(null, $Franca_Fix53.op_Modulus$2(-150, new $Franca_Fix53.$ctor3(100, false)), -50, '% operator', 0);
		$Franca_Fix53.$assertException(function() {
			var test9 = $Franca_Fix53.op_Modulus(new $Franca_Fix53.$ctor3(150, false), $Franca_Fix53.zero);
		}, ss.DivideByZeroException, '% operator');
		$Franca_Fix53.$assertException(function() {
			var test10 = $Franca_Fix53.op_Modulus$2(150, $Franca_Fix53.zero);
		}, ss.DivideByZeroException, '% operator');
		$Franca_Fix53.$assertException(function() {
			var test11 = $Franca_Fix53.op_Modulus$1(new $Franca_Fix53.$ctor3(150, false), 0);
		}, ss.DivideByZeroException, '% operator');
		// cast to int / uint
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int32(new $Franca_Fix53.$ctor3(2894.438, false)), 2894, 'int/uint casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt32(new $Franca_Fix53.$ctor3(2894.438, false)), 2894, 'int/uint casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int32(new $Franca_Fix53.$ctor3(-2894.438, false)), -2894, 'int/uint casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt32(new $Franca_Fix53.$ctor3(-2894.438, false)), 4294964402, 'int/uint casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int32(new $Franca_Fix53.$ctor3(2147483647, false)), 2147483647, 'int/uint casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt32(new $Franca_Fix53.$ctor3(2147483647, false)), 2147483647, 'int/uint casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int32(new $Franca_Fix53.$ctor3(-2147483648, false)), -2147483648, 'int/uint casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt32(new $Franca_Fix53.$ctor3(-2147483648, false)), 2147483648, 'int/uint casting', 0);
		// casting a double to a value that is out of range of int/uint is undefined
		//Assert((int)Fix53.MaxValue, (int)-2147483648, "int/uint casting");
		//Assert((uint)Fix53.MaxValue, (uint)4294967295, "int/uint casting");
		//Assert((int)Fix53.MinValue, (int)-2147483648, "int/uint casting");
		//Assert((uint)Fix53.MinValue, (uint)1, "int/uint casting");
		// cast to short / ushort
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int16(new $Franca_Fix53.$ctor3(2894.438, false)), 2894, 'short/ushort casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt16(new $Franca_Fix53.$ctor3(2894.438, false)), 2894, 'short/ushort casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int16(new $Franca_Fix53.$ctor3(-2894.438, false)), -2894, 'short/ushort casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt16(new $Franca_Fix53.$ctor3(-2894.438, false)), 62642, 'short/ushort casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int16(new $Franca_Fix53.$ctor3(32767, false)), 32767, 'short/ushort casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt16(new $Franca_Fix53.$ctor3(32767, false)), 32767, 'short/ushort casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int16(new $Franca_Fix53.$ctor3(-32768, false)), -32768, 'short/ushort casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt16(new $Franca_Fix53.$ctor3(-32768, false)), 32768, 'short/ushort casting', 0);
		// casting a double to a value that is out of range of short/ushort is undefined
		//Assert((short)new Fix53(0xF0F0F0F0 + 0.5174), (short)0, "short/ushort casting");
		//Assert((ushort)new Fix53(0xF0F0F0F0), (ushort)0, "short/ushort casting");
		//Assert((short)new Fix53(Int32.MaxValue), (short)-1, "short/ushort casting");
		//Assert((ushort)new Fix53(Int32.MaxValue), (ushort)65535, "short/ushort casting");
		//Assert((short)new Fix53(Int32.MinValue), (short)0, "short/ushort casting");
		//Assert((ushort)new Fix53(Int32.MinValue), (ushort)0, "short/ushort casting");
		//Assert((short)Fix53.MaxValue, (short)0, "short/ushort casting");
		//Assert((ushort)Fix53.MaxValue, (ushort)0, "short/ushort casting");
		//Assert((short)Fix53.MinValue, (short)0, "short/ushort casting");
		//Assert((ushort)Fix53.MinValue, (ushort)0, "short/ushort casting");
		// cast to byte / sbyte
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int8(new $Franca_Fix53.$ctor3(125.438, false)), 125, 'byte/sbyte casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt8(new $Franca_Fix53.$ctor3(125.438, false)), 125, 'byte/sbyte casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int8(new $Franca_Fix53.$ctor3(-125.438, false)), -125, 'byte/sbyte casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt8(new $Franca_Fix53.$ctor3(-125.438, false)), 131, 'byte/sbyte casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int8(new $Franca_Fix53.$ctor3(127, false)), 127, 'short/ushort casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt8(new $Franca_Fix53.$ctor3(127, false)), 127, 'short/ushort casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_Int8(new $Franca_Fix53.$ctor3(-128, false)), -128, 'short/ushort casting', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Fix53.cast_UInt8(new $Franca_Fix53.$ctor3(-128, false)), 128, 'short/ushort casting', 0);
		// casting a double to a value that is out of range of byte/sbyte is undefined
		//Assert((byte)new Fix53(0xF0F0F0F0 + 0.5174), (byte)0, "byte/sbyte casting");
		//Assert((sbyte)new Fix53(0xF0F0F0F0), (sbyte)0, "byte/sbyte casting");
		//Assert((byte)new Fix53(2894.438), (byte)78, "byte/sbyte casting");
		//Assert((sbyte)new Fix53(2894.438), (sbyte)78, "byte/sbyte casting");
		//Assert((byte)new Fix53(-2894.438), (byte)178, "byte/sbyte casting");
		//Assert((sbyte)new Fix53(-2894.438), (sbyte)-78, "byte/sbyte casting");
		//Assert((byte)new Fix53(Int32.MaxValue), (byte)255, "byte/sbyte casting");
		//Assert((sbyte)new Fix53(Int32.MaxValue), (sbyte)-1, "byte/sbyte casting");
		//Assert((byte)new Fix53(Int32.MinValue), (byte)0, "byte/sbyte casting");
		//Assert((sbyte)new Fix53(Int32.MinValue), (sbyte)0, "byte/sbyte casting");
		//Assert((byte)Fix53.MaxValue, (byte)0, "byte/sbyte casting");
		//Assert((sbyte)Fix53.MaxValue, (sbyte)0, "byte/sbyte casting");
		//Assert((byte)Fix53.MinValue, (byte)0, "byte/sbyte casting");
		//Assert((sbyte)Fix53.MinValue, (sbyte)0, "byte/sbyte casting");
		// Calc methods
		// Abs
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.abs($Franca_Fix53.zero), $Franca_Fix53.zero, 'Calc.Abs', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.abs($Franca_Fix53.op_UnaryNegation($Franca_Fix53.zero)), $Franca_Fix53.zero, 'Calc.Abs', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.abs($Franca_Fix53.one), $Franca_Fix53.one, 'Calc.Abs', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.abs($Franca_Fix53.minusOne), $Franca_Fix53.one, 'Calc.Abs', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.abs($Franca_Fix53.minValue), $Franca_Fix53.maxValue, 'Calc.Abs', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.abs($Franca_Fix53.maxValue), $Franca_Fix53.maxValue, 'Calc.Abs', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.abs(new $Franca_Fix53.$ctor3(2.5, false)), new $Franca_Fix53.$ctor3(2.5, false), 'Calc.Abs', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.abs(new $Franca_Fix53.$ctor3(-2.5, false)), new $Franca_Fix53.$ctor3(2.5, false), 'Calc.Abs', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.abs(new $Franca_Fix53.$ctor3(3221225471.5, false)), new $Franca_Fix53.$ctor3(3221225471.5, false), 'Calc.Abs', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.abs(new $Franca_Fix53.$ctor3(-3221225471.5, false)), new $Franca_Fix53.$ctor3(3221225471.5, false), 'Calc.Abs', 0);
		// Floor
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.floor($Franca_Fix53.epsilon), $Franca_Fix53.zero, 'Calc.Floor', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.floor($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon)), $Franca_Fix53.minusOne, 'Calc.Floor', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.floor(new $Franca_Fix53.$ctor3(1.5, false)), $Franca_Fix53.one, 'Calc.Floor', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.floor(new $Franca_Fix53.$ctor3(-1.5, false)), new $Franca_Fix53.$ctor3(-2, false), 'Calc.Floor', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.floor($Franca_Fix53.maxValue), 4294967295, 'Calc.Floor', 0);
		$Franca_Fix53.$assertException(function() {
			$Franca_Calc.floor($Franca_Fix53.minValue);
		}, $System_OverflowException, 'Calc.Floor');
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.floor($Franca_Fix53.minIntegerValue), $Franca_Fix53.minIntegerValue, 'Calc.Floor', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.floor($Franca_Fix53.op_Addition($Franca_Fix53.minIntegerValue, $Franca_Fix53.epsilon)), $Franca_Fix53.minIntegerValue, 'Calc.Floor', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.floor(new $Franca_Fix53.$ctor3(-2147483648, true)), -1024, 'Calc.Floor', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.floor(new $Franca_Fix53.$ctor3(2147483647, true)), 1023, 'Calc.Floor', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.floor(new $Franca_Fix53.$ctor3(2147483648, true)), 1024, 'Calc.Floor', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.floor(new $Franca_Fix53.$ctor3(2147483703, true)), 1024, 'Calc.Floor', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.floor(new $Franca_Fix53.$ctor3(4294967295, true)), 2047, 'Calc.Floor', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.floor(new $Franca_Fix53.$ctor3(Math.floor(6442450942.5), true)), 3071, 'Calc.Floor', 0);
		// Ceiling
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.ceiling($Franca_Fix53.epsilon), $Franca_Fix53.one, 'Calc.Ceiling', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.ceiling($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon)), $Franca_Fix53.zero, 'Calc.Ceiling', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.ceiling(new $Franca_Fix53.$ctor3(1.5, false)), new $Franca_Fix53.$ctor3(2, false), 'Calc.Ceiling', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.ceiling(new $Franca_Fix53.$ctor3(-1.5, false)), $Franca_Fix53.minusOne, 'Calc.Ceiling', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.ceiling($Franca_Fix53.minValue), -4294967295, 'Calc.Ceiling', 0);
		$Franca_Fix53.$assertException(function() {
			$Franca_Calc.ceiling($Franca_Fix53.maxValue);
		}, $System_OverflowException, 'Calc.Ceiling');
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.ceiling($Franca_Fix53.maxIntegerValue), $Franca_Fix53.maxIntegerValue, 'Calc.Ceiling', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.ceiling($Franca_Fix53.op_Subtraction($Franca_Fix53.maxIntegerValue, $Franca_Fix53.epsilon)), $Franca_Fix53.maxIntegerValue, 'Calc.Ceiling', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.ceiling(new $Franca_Fix53.$ctor3(-2147483648, true)), -1024, 'Calc.Ceiling', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.ceiling(new $Franca_Fix53.$ctor3(2147483647, true)), 1024, 'Calc.Ceiling', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.ceiling(new $Franca_Fix53.$ctor3(2147483648, true)), 1024, 'Calc.Ceiling', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.ceiling(new $Franca_Fix53.$ctor3(2147483703, true)), 1025, 'Calc.Ceiling', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.ceiling(new $Franca_Fix53.$ctor3(4294967295, true)), 2048, 'Calc.Ceiling', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.ceiling(new $Franca_Fix53.$ctor3(Math.floor(6442450942.5), true)), 3072, 'Calc.Ceiling', 0);
		// Round
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.round($Franca_Fix53.epsilon), $Franca_Fix53.zero, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.round($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon)), $Franca_Fix53.zero, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(1.6, false)), new $Franca_Fix53.$ctor3(2, false), 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(1.5, false)), new $Franca_Fix53.$ctor3(2, false), 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(1.4, false)), $Franca_Fix53.one, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(-1.4, false)), $Franca_Fix53.minusOne, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(-1.5, false)), $Franca_Fix53.minusOne, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(-1.6, false)), new $Franca_Fix53.$ctor3(-2, false), 'Calc.Round', 0);
		$Franca_Fix53.$assertException(function() {
			$Franca_Calc.round($Franca_Fix53.minValue);
		}, $System_OverflowException, 'Calc.Round');
		$Franca_Fix53.$assertException(function() {
			$Franca_Calc.round($Franca_Fix53.maxValue);
		}, $System_OverflowException, 'Calc.Round');
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.round($Franca_Fix53.maxIntegerValue), $Franca_Fix53.maxIntegerValue, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.round($Franca_Fix53.op_Subtraction($Franca_Fix53.maxIntegerValue, $Franca_Fix53.epsilon)), $Franca_Fix53.maxIntegerValue, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(-2147483648, true)), -1024, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(2147483647, true)), 1024, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(2147483648, true)), 1024, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(2147483646, true)), 1024, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(2147483649, true)), 1024, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(4294967295, true)), 2048, 'Calc.Round', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.round(new $Franca_Fix53.$ctor3(Math.floor(6442450942.5), true)), 3072, 'Calc.Round', 0);
		// Truncate
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.truncate(new $Franca_Fix53.$ctor3(1.5, false)), new $Franca_Fix53.$ctor3(1, false), 'Calc.Truncate', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.truncate(new $Franca_Fix53.$ctor3(-1.5, false)), new $Franca_Fix53.$ctor3(-1, false), 'Calc.Truncate', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.truncate($Franca_Fix53.maxValue), 4294967295, 'Calc.Truncate', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.truncate($Franca_Fix53.minValue), -4294967295, 'Calc.Truncate', 0);
		// DivRem
		var divRemResult = {};
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.divRem(new $Franca_Fix53.$ctor3(15, false), new $Franca_Fix53.$ctor3(10, false), divRemResult), $Franca_Fix53.one, 'Calc.DivRem', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, divRemResult.$, new $Franca_Fix53.$ctor3(5, false), 'Calc.DivRem', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.divRem(new $Franca_Fix53.$ctor3(-15, false), new $Franca_Fix53.$ctor3(10, false), divRemResult), $Franca_Fix53.minusOne, 'Calc.DivRem', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, divRemResult.$, new $Franca_Fix53.$ctor3(-5, false), 'Calc.DivRem', 0);
		// Min / Max
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.min([$Franca_Fix53.one, $Franca_Fix53.zero, $Franca_Fix53.epsilon, $Franca_Fix53.minusOne]), $Franca_Fix53.minusOne, 'Calc.Min', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.max([$Franca_Fix53.one, $Franca_Fix53.zero, $Franca_Fix53.epsilon, $Franca_Fix53.minusOne]), $Franca_Fix53.one, 'Calc.Max', 0);
		// Sign / SignFix
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.signFix($Franca_Fix53.one), $Franca_Fix53.one, 'Calc.Sign', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.signFix($Franca_Fix53.maxValue), $Franca_Fix53.one, 'Calc.Sign', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.signFix($Franca_Fix53.epsilon), $Franca_Fix53.one, 'Calc.Sign', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.signFix($Franca_Fix53.minusOne), $Franca_Fix53.minusOne, 'Calc.Sign', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.signFix($Franca_Fix53.minValue), $Franca_Fix53.minusOne, 'Calc.Sign', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.signFix($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon)), $Franca_Fix53.minusOne, 'Calc.Sign', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.signFix($Franca_Fix53.zero), $Franca_Fix53.zero, 'Calc.Sign', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.signFix(new $Franca_Fix53.$ctor3(0, true)), $Franca_Fix53.zero, 'Calc.Sign', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Calc.sign($Franca_Fix53.one), 1, 'Calc.Sign', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Calc.sign($Franca_Fix53.maxValue), 1, 'Calc.Sign', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Calc.sign($Franca_Fix53.epsilon), 1, 'Calc.Sign', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Calc.sign($Franca_Fix53.minusOne), -1, 'Calc.Sign', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Calc.sign($Franca_Fix53.minValue), -1, 'Calc.Sign', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Calc.sign($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon)), -1, 'Calc.Sign', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Calc.sign($Franca_Fix53.zero), 0, 'Calc.Sign', 0);
		$Franca_Fix53.$assert(ss.Int32, ss.Int32).call(null, $Franca_Calc.sign(new $Franca_Fix53.$ctor3(0, true)), 0, 'Calc.Sign', 0);
		// PowFix
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.one, 37), $Franca_Fix53.one, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.one, 1), $Franca_Fix53.one, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.one, 2), $Franca_Fix53.one, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.one, 0), $Franca_Fix53.one, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.one, -1), $Franca_Fix53.one, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.one, -2), $Franca_Fix53.one, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.one, -37), $Franca_Fix53.one, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.minusOne, 37), $Franca_Fix53.minusOne, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.minusOne, 2), $Franca_Fix53.one, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.minusOne, 1), $Franca_Fix53.minusOne, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.minusOne, 0), $Franca_Fix53.one, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.minusOne, -1), $Franca_Fix53.minusOne, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.minusOne, -2), $Franca_Fix53.one, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.minusOne, -37), $Franca_Fix53.minusOne, 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(2, false), 2), new $Franca_Fix53.$ctor3(4, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(2, false), 3), new $Franca_Fix53.$ctor3(8, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(2, false), 4), new $Franca_Fix53.$ctor3(16, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(-2, false), 2), new $Franca_Fix53.$ctor3(4, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(-2, false), 3), new $Franca_Fix53.$ctor3(-8, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(-2, false), 4), new $Franca_Fix53.$ctor3(16, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(1.5, false), 2), new $Franca_Fix53.$ctor3(2.25, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(1.5, false), 3), new $Franca_Fix53.$ctor3(3.375, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(1.5, false), 4), new $Franca_Fix53.$ctor3(5.0625, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(-1.5, false), 2), new $Franca_Fix53.$ctor3(2.25, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(-1.5, false), 3), new $Franca_Fix53.$ctor3(-3.375, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(-1.5, false), 4), new $Franca_Fix53.$ctor3(5.0625, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(256, false), 2), new $Franca_Fix53.$ctor3(65536, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(65535, false), 2), new $Franca_Fix53.$ctor3(4294836225, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(-65535, false), 2), new $Franca_Fix53.$ctor3(4294836225, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assertException(function() {
			$Franca_Calc.powFix(new $Franca_Fix53.$ctor3(65536, false), 2);
		}, $System_OverflowException, 'Calc.PowFix');
		$Franca_Fix53.$assertException(function() {
			$Franca_Calc.powFix(new $Franca_Fix53.$ctor3(-65536, false), 2);
		}, $System_OverflowException, 'Calc.PowFix');
		$Franca_Fix53.$assertException(function() {
			$Franca_Calc.powFix(new $Franca_Fix53.$ctor3(65536, false), 3);
		}, $System_OverflowException, 'Calc.PowFix');
		$Franca_Fix53.$assertException(function() {
			$Franca_Calc.powFix(new $Franca_Fix53.$ctor3(-65536, false), 3);
		}, $System_OverflowException, 'Calc.PowFix');
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(255, false), 3), new $Franca_Fix53.$ctor3(16581375, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix(new $Franca_Fix53.$ctor3(-255, false), 3), new $Franca_Fix53.$ctor3(-16581375, false), 'Calc.PowFix', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.powFix($Franca_Fix53.epsilon, 2), $Franca_Fix53.zero, 'Calc.PowFix', 0);
		// ExpFix
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.expFix(3), new $Franca_Fix53.$ctor3(Math.exp(3), false), 'Calc.ExpFix', 1E-05);
		// Mod
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.mod(new $Franca_Fix53.$ctor3(1.25, false), new $Franca_Fix53.$ctor3(1, false)), 0.25, 'Calc.Mod', 0);
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.mod(new $Franca_Fix53.$ctor3(-1.25, false), new $Franca_Fix53.$ctor3(1, false)), 0.75, 'Calc.Mod', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.mod(new $Franca_Fix53.$ctor3(17, false), new $Franca_Fix53.$ctor3(10, false)), new $Franca_Fix53.$ctor3(7, false), 'Calc.Mod', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.mod(new $Franca_Fix53.$ctor3(-17, false), new $Franca_Fix53.$ctor3(10, false)), new $Franca_Fix53.$ctor3(3, false), 'Calc.Mod', 0);
		// Clamp
		var clampValue = {};
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.clamp$1(new $Franca_Fix53.$ctor3(2378.75, false), null, null), $Franca_Fix53.one, 'Calc.Clamp', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.clamp$1($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon), null, null), $Franca_Fix53.zero, 'Calc.Clamp', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.clamp$1($Franca_Fix53.epsilon, null, null), $Franca_Fix53.epsilon, 'Calc.Clamp', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.clamp$1(new $Franca_Fix53.$ctor3($Franca_Fix53.one.raw - 1, true), null, null), $Franca_Fix53.op_Subtraction($Franca_Fix53.one, $Franca_Fix53.epsilon), 'Calc.Clamp', 0);
		clampValue.$ = new $Franca_Fix53.$ctor3(2378.75, false);
		$Franca_Calc.clamp(clampValue, null, null);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, clampValue.$, $Franca_Fix53.one, 'Calc.Clamp', 0);
		clampValue.$ = $Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon);
		$Franca_Calc.clamp(clampValue, null, null);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, clampValue.$, $Franca_Fix53.zero, 'Calc.Clamp', 0);
		clampValue.$ = $Franca_Fix53.epsilon;
		$Franca_Calc.clamp(clampValue, null, null);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, clampValue.$, $Franca_Fix53.epsilon, 'Calc.Clamp', 0);
		clampValue.$ = new $Franca_Fix53.$ctor3($Franca_Fix53.one.raw - 1, true);
		$Franca_Calc.clamp(clampValue, null, null);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, clampValue.$, $Franca_Fix53.op_Subtraction($Franca_Fix53.one, $Franca_Fix53.epsilon), 'Calc.Clamp', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.clamp$1(new $Franca_Fix53.$ctor3(2378.75, false), new $Franca_Fix53.$ctor3(1000, false), new $Franca_Fix53.$ctor3(2000, false)), new $Franca_Fix53.$ctor3(2000, false), 'Calc.Clamp', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.clamp$1($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon), new $Franca_Fix53.$ctor3(1000, false), new $Franca_Fix53.$ctor3(2000, false)), new $Franca_Fix53.$ctor3(1000, false), 'Calc.Clamp', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.clamp$1($Franca_Fix53.epsilon, null, new $Franca_Fix53.$ctor3(0.5, false)), $Franca_Fix53.epsilon, 'Calc.Clamp', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.clamp$1(new $Franca_Fix53.$ctor3($Franca_Fix53.one.raw - 1, true), null, new $Franca_Fix53.$ctor3(0.5, false)), new $Franca_Fix53.$ctor3(0.5, false), 'Calc.Clamp', 0);
		clampValue.$ = new $Franca_Fix53.$ctor3(2378.75, false);
		$Franca_Calc.clamp(clampValue, new $Franca_Fix53.$ctor3(1000, false), new $Franca_Fix53.$ctor3(2000, false));
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, clampValue.$, new $Franca_Fix53.$ctor3(2000, false), 'Calc.Clamp', 0);
		clampValue.$ = $Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon);
		$Franca_Calc.clamp(clampValue, new $Franca_Fix53.$ctor3(1000, false), new $Franca_Fix53.$ctor3(2000, false));
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, clampValue.$, new $Franca_Fix53.$ctor3(1000, false), 'Calc.Clamp', 0);
		clampValue.$ = $Franca_Fix53.epsilon;
		$Franca_Calc.clamp(clampValue, null, new $Franca_Fix53.$ctor3(0.5, false));
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, clampValue.$, $Franca_Fix53.epsilon, 'Calc.Clamp', 0);
		clampValue.$ = new $Franca_Fix53.$ctor3($Franca_Fix53.one.raw - 1, true);
		$Franca_Calc.clamp(clampValue, null, new $Franca_Fix53.$ctor3(0.5, false));
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, clampValue.$, new $Franca_Fix53.$ctor3(0.5, false), 'Calc.Clamp', 0);
		// Wrap
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.wrap(new $Franca_Fix53.$ctor3(2378.75, false), $Franca_Fix53.one), new $Franca_Fix53.$ctor3(0.75, false), 'Calc.Wrap', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.wrap($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon), $Franca_Fix53.one), $Franca_Fix53.op_Subtraction($Franca_Fix53.one, $Franca_Fix53.epsilon), 'Calc.Wrap', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.wrap($Franca_Fix53.epsilon, $Franca_Fix53.one), $Franca_Fix53.epsilon, 'Calc.Wrap', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.wrap(new $Franca_Fix53.$ctor3($Franca_Fix53.one.raw - 1, true), $Franca_Fix53.one), $Franca_Fix53.op_Subtraction($Franca_Fix53.one, $Franca_Fix53.epsilon), 'Calc.Wrap', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.wrap$4(new $Franca_Fix53.$ctor3(2378.75, false), new $Franca_Fix53.$ctor3(1000, false), new $Franca_Fix53.$ctor3(2000, false)), new $Franca_Fix53.$ctor3(1378.75, false), 'Calc.Wrap', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.wrap$4($Franca_Fix53.op_UnaryNegation($Franca_Fix53.epsilon), new $Franca_Fix53.$ctor3(1000, false), new $Franca_Fix53.$ctor3(2000, false)), $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(2000, false), $Franca_Fix53.epsilon), 'Calc.Wrap', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.wrap$4($Franca_Fix53.epsilon, $Franca_Fix53.zero, new $Franca_Fix53.$ctor3(0.5, false)), $Franca_Fix53.epsilon, 'Calc.Wrap', 0);
		$Franca_Fix53.$assert($Franca_Fix53, $Franca_Fix53).call(null, $Franca_Calc.wrap$4(new $Franca_Fix53.$ctor3($Franca_Fix53.one.raw - 1, true), $Franca_Fix53.zero, new $Franca_Fix53.$ctor3(0.5, false)), $Franca_Fix53.op_Subtraction(new $Franca_Fix53.$ctor3(0.5, false), $Franca_Fix53.epsilon), 'Calc.Wrap', 0);
		// Lerp
		$Franca_Fix53.$assert($Franca_Fix53, Number).call(null, $Franca_Calc.lerp($Franca_Fix53.zero, $Franca_Fix53.one, new $Franca_Fix53.$ctor3(0.283494, false)), $Franca_Calc.lerp$2(0, 1, 0.283494), 'Calc.Lerp', 1E-05);
		// Finally
		if ($Franca_Fix53.$failedTests.length === 0) {
			console.log('All Fix53 unit tests passed');
		}
		else {
			var message = new ss.StringBuilder();
			message.appendLine(ss.formatString('{1}Fix53 unit tests failed ({0} total):', $Franca_Fix53.$failedTests.length, '\n'));
			for (var $t3 = 0; $t3 < $Franca_Fix53.$failedTests.length; $t3++) {
				var msg = $Franca_Fix53.$failedTests[$t3];
				message.appendLine(ss.formatString('  {0}', ss.replaceAllString(msg, 'Fix53 unit test failed: ', '')));
				if (message.length > 2048) {
					message.appendLine('...');
					break;
				}
			}
			throw new ss.Exception(message.toString());
		}
	};
	$Franca_Fix53.$assertException = function(op, exceptionType, type) {
		try {
			op();
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			if (!ss.referenceEquals(ss.getInstanceType(e), exceptionType)) {
				$Franca_Fix53.$throwAssertException(new ss.Exception(ss.formatString('Fix53 unit test failed: expected {0} and got {1} in {2} test', ss.getTypeName(exceptionType), ss.getTypeName(ss.getInstanceType(e)), type)));
			}
			return;
		}
		$Franca_Fix53.$throwAssertException(new ss.Exception(ss.formatString('Fix53 unit test failed: expected {0} and got no exception in {1} test', ss.getTypeName(exceptionType), type)));
	};
	$Franca_Fix53.$assert = function(T0, T1) {
		return function(a, b, type, error) {
			if (ss.isInstanceOfType(a, $Franca_Fix53) && ss.isInstanceOfType(b, Number)) {
				if (error === 0) {
					if (!($Franca_Fix53.cast_Double(ss.unbox(ss.cast(a, $Franca_Fix53))) === ss.unbox(ss.cast(b, Number)))) {
						$Franca_Fix53.$throwAssertException(new ss.Exception(ss.formatString('Fix53 unit test failed: expected {0} and got {1} in {2} test', b, a, type)));
					}
				}
				else if (Math.abs($Franca_Fix53.cast_Double(ss.unbox(ss.cast(a, $Franca_Fix53))) - ss.unbox(ss.cast(b, Number))) > error) {
					$Franca_Fix53.$throwAssertException(new ss.Exception(ss.formatString('Fix53 unit test failed: expected {0} and got {1} in {2} test', b, a, type)));
				}
			}
			else if (ss.isInstanceOfType(a, Number) && ss.isInstanceOfType(b, $Franca_Fix53)) {
				if (error === 0) {
					if (!(ss.unbox(ss.cast(a, Number)) === $Franca_Fix53.cast_Double(ss.unbox(ss.cast(b, $Franca_Fix53))))) {
						$Franca_Fix53.$throwAssertException(new ss.Exception(ss.formatString('Fix53 unit test failed: expected {0} and got {1} in {2} test', b, a, type)));
					}
				}
				else if (Math.abs(ss.unbox(ss.cast(a, Number)) - $Franca_Fix53.cast_Double(ss.unbox(ss.cast(b, $Franca_Fix53)))) > error) {
					$Franca_Fix53.$throwAssertException(new ss.Exception(ss.formatString('Fix53 unit test failed: expected {0} and got {1} in {2} test', b, a, type)));
				}
			}
			else if (ss.isInstanceOfType(a, $Franca_Fix53) && ss.isInstanceOfType(b, $Franca_Fix53)) {
				if (error === 0) {
					if (!ss.equals(a, b)) {
						$Franca_Fix53.$throwAssertException(new ss.Exception(ss.formatString('Fix53 unit test failed: expected {0} and got {1} in {2} test', b, a, type)));
					}
				}
				else if (Math.abs($Franca_Fix53.cast_Double(ss.unbox(ss.cast(a, $Franca_Fix53))) - $Franca_Fix53.cast_Double(ss.unbox(ss.cast(b, $Franca_Fix53)))) > error) {
					$Franca_Fix53.$throwAssertException(new ss.Exception(ss.formatString('Fix53 unit test failed: expected {0} and got {1} in {2} test', b, a, type)));
				}
			}
			else if (!ss.equals(a, b)) {
				$Franca_Fix53.$throwAssertException(new ss.Exception(ss.formatString('Fix53 unit test failed: expected {0} and got {1} in {2} test', b, a, type)));
			}
		};
	};
	$Franca_Fix53.$throwAssertException = function(e) {
		if ($Franca_Fix53.$throwExceptions) {
			throw e;
		}
		else {
			$Franca_Fix53.$failedTests.push(e.get_message());
		}
	};
	global.Franca.Fix53 = $Franca_Fix53;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.FlexibleList
	var $Franca_FlexibleList$1 = function(T) {
		var $type = function() {
			this.$values = null;
			this.$indices = null;
			this.$values = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, T]))();
			this.$indices = [];
		};
		$type.$ctor2 = function(capacity) {
			this.$values = null;
			this.$indices = null;
			this.$values = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, T]))();
			this.$indices = [];
		};
		$type.$ctor1 = function(source) {
			$type.call(this);
			var i = 0;
			var $t1 = ss.getEnumerator(source);
			try {
				while ($t1.moveNext()) {
					var v = $t1.current();
					this.$indices.push(i);
					this.$values.set_item(i, v);
					i++;
				}
			}
			finally {
				$t1.dispose();
			}
		};
		$type.op_Explicit$1 = function(list) {
			return new $type.$ctor1(list);
		};
		$type.op_Explicit = function(list) {
			return new $type.$ctor1(list);
		};
		ss.registerGenericClassInstance($type, $Franca_FlexibleList$1, [T], {
			insert: function(index, item) {
				if (index < 0) {
					throw new ss.ArgumentOutOfRangeException('FlexibleList cannot have items at indices less than 0.');
				}
				var start = this.$getInsertionIndex(index);
				if (start === -1) {
					this.set_item(index, item);
					return;
				}
				for (var i = this.$indices.length - 1; i >= start; i--) {
					var j = this.$indices[i];
					var v = this.$values.get_item(j);
					this.$values.remove(j);
					this.$values.set_item(j + 1, v);
					this.$indices[i]++;
				}
				ss.insert(this.$indices, start, index);
				this.$values.set_item(index, item);
			},
			$getInsertionIndex: function(index) {
				for (var i = 0; i < this.$indices.length; i++) {
					if (this.$indices[i] >= index) {
						return i;
					}
				}
				return -1;
			},
			indexOf: function(item) {
				for (var i = 0; i < this.$indices.length; i++) {
					if (ss.EqualityComparer.def.areEqual(this.$values.get_item(this.$indices[i]), item)) {
						return this.$indices[i];
					}
				}
				return -1;
			},
			removeAt: function(index) {
				if (index < 0) {
					throw new ss.ArgumentOutOfRangeException('FlexibleList cannot have items at indices less than 0.');
				}
				var start = this.$getInsertionIndex(index);
				if (start === -1) {
					return;
				}
				if (this.$values.containsKey(index)) {
					this.$values.remove(index);
					ss.removeAt(this.$indices, start);
				}
				for (var i = start; i < this.$indices.length; i++) {
					var j = this.$indices[i];
					var v = this.$values.get_item(j);
					this.$values.remove(j);
					this.$values.set_item(j - 1, v);
					this.$indices[i]--;
				}
			},
			tryGetValue: function(index, value) {
				if (this.$values.tryGetValue(index, value)) {
					return true;
				}
				return false;
			},
			get_item: function(index) {
				if (index < 0) {
					throw new ss.ArgumentOutOfRangeException('FlexibleList cannot have items at indices less than 0.');
				}
				var ret = {};
				if (this.$values.tryGetValue(index, ret)) {
					return ret.$;
				}
				throw new ss.ArgumentException('FlexibleList did not contain an item at index ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, index) + '.');
			},
			set_item: function(index, value) {
				if (index < 0) {
					throw new ss.ArgumentOutOfRangeException('FlexibleList cannot have items at indices less than 0.');
				}
				if (this.$values.containsKey(index)) {
					this.$values.set_item(index, value);
				}
				else {
					this.$values.set_item(index, value);
					for (var i = 0; i < this.$indices.length; i++) {
						if (this.$indices[i] > index) {
							ss.insert(this.$indices, i, index);
							return;
						}
					}
					this.$indices.push(index);
				}
			},
			containsIndex: function(index) {
				return ss.contains(this.$indices, index);
			},
			add: function(item) {
				var index;
				if (this.$indices.length === 0) {
					index = 0;
				}
				else {
					index = this.$indices[this.$indices.length - 1] + 1;
				}
				this.$indices.push(index);
				this.$values.set_item(index, item);
			},
			clear: function() {
				ss.clear(this.$indices);
				this.$values.clear();
			},
			contains: function(item) {
				return ss.contains(this.$values.get_values(), item);
			},
			copyTo: function(array, arrayIndex) {
				if (this.$indices.length === 0) {
					return;
				}
				for (var i = 0; i < this.$indices.length; i++) {
					array[arrayIndex + this.$indices[i]] = this.$values.get_item(this.$indices[i]);
				}
			},
			get_count: function() {
				return ((this.$indices.length > 0) ? (this.$indices[this.$indices.length - 1] + 1) : 0);
			},
			get_isReadOnly: function() {
				return false;
			},
			remove: function(item) {
				var index = this.indexOf(item);
				if (index >= 0) {
					this.removeAt(index);
					return true;
				}
				return false;
			},
			getEnumerator: function() {
				var $result, $state = 0, i;
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								i = 0;
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								if (!(i < this.$indices.length)) {
									$state = -1;
									break $sm1;
								}
								$result = this.$values.get_item(this.$indices[i]);
								$state = 2;
								return true;
							}
							case 2: {
								$state = -1;
								i++;
								$state = 1;
								continue $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, null, this);
			},
			get_pairs: function() {
				return new ss.IteratorBlockEnumerable(function() {
					return (function() {
						var $result, $state = 0, i, index;
						return new ss.IteratorBlockEnumerator(function() {
							$sm1:
							for (;;) {
								switch ($state) {
									case 0: {
										$state = -1;
										i = 0;
										$state = 1;
										continue $sm1;
									}
									case 1: {
										$state = -1;
										if (!(i < this.$indices.length)) {
											$state = -1;
											break $sm1;
										}
										index = this.$indices[i];
										$result = { key: index, value: this.$values.get_item(index) };
										$state = 2;
										return true;
									}
									case 2: {
										$state = -1;
										i++;
										$state = 1;
										continue $sm1;
									}
									default: {
										break $sm1;
									}
								}
							}
							return false;
						}, function() {
							return $result;
						}, null, this);
					}).call(this);
				}, this);
			},
			get_indices: function() {
				return this.$indices;
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IEnumerable, ss.IEnumerable, ss.ICollection, ss.IList];
		});
		$type.$ctor2.prototype = $type.$ctor1.prototype = $type.prototype;
		return $type;
	};
	$Franca_FlexibleList$1.__typeName = 'Franca.FlexibleList$1';
	ss.initGenericClass($Franca_FlexibleList$1, $asm, 1);
	global.Franca.FlexibleList$1 = $Franca_FlexibleList$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.FloatExtensions
	var $Franca_FloatExtensions = function() {
	};
	$Franca_FloatExtensions.__typeName = 'Franca.FloatExtensions';
	$Franca_FloatExtensions.isInfinite = function(value) {
		return !isFinite(value);
	};
	$Franca_FloatExtensions.isFinite = function(value) {
		return isFinite(value);
	};
	global.Franca.FloatExtensions = $Franca_FloatExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.HAlign
	var $Franca_HAlign = function() {
	};
	$Franca_HAlign.__typeName = 'Franca.HAlign';
	global.Franca.HAlign = $Franca_HAlign;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.HdrColor
	var $Franca_HdrColor = function() {
		this.r = 0;
		this.g = 0;
		this.b = 0;
		this.a = 0;
	};
	$Franca_HdrColor.__typeName = 'Franca.HdrColor';
	$Franca_HdrColor.$ctor2 = function(value, premultiplied) {
		this.r = 0;
		this.g = 0;
		this.b = 0;
		this.a = 0;
		this.r = (value & 255) / 255;
		this.g = (value >> 8 & 255) / 255;
		this.b = (value >> 16 & 255) / 255;
		this.a = (value >> 24 & 255) / 255;
		if (!premultiplied) {
			this.r *= this.a;
			this.g *= this.a;
			this.b *= this.a;
		}
	};
	$Franca_HdrColor.$ctor3 = function(value, premultiplied) {
		$Franca_HdrColor.$ctor2.call(this, value, premultiplied);
	};
	$Franca_HdrColor.$ctor5 = function(r, g, b, a) {
		this.r = 0;
		this.g = 0;
		this.b = 0;
		this.a = 0;
		this.r = r / 255;
		this.g = g / 255;
		this.b = b / 255;
		this.a = a / 255;
	};
	$Franca_HdrColor.$ctor6 = function(r, g, b, a) {
		this.r = 0;
		this.g = 0;
		this.b = 0;
		this.a = 0;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	};
	$Franca_HdrColor.$ctor4 = function(r, g, b, a) {
		this.r = 0;
		this.g = 0;
		this.b = 0;
		this.a = 0;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	};
	$Franca_HdrColor.$ctor1 = function(reader) {
		this.r = 0;
		this.g = 0;
		this.b = 0;
		this.a = 0;
		this.r = 0;
		this.g = 0;
		this.b = 0;
		this.a = 1;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'r': {
						{
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.r = reader.readSingle(false);
						}
						break;
					}
					case 'g': {
						{
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.g = reader.readSingle(false);
						}
						break;
					}
					case 'b': {
						{
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.b = reader.readSingle(false);
						}
						break;
					}
					case 'a': {
						{
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.a = reader.readSingle(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
	};
	$Franca_HdrColor.getDefaultValue = function() {
		return new $Franca_HdrColor();
	};
	$Franca_HdrColor.op_Implicit = function(value) {
		return $Franca_Color.op_Implicit(new $Franca_Color.$ctor2(value, false));
	};
	$Franca_HdrColor.op_Implicit$1 = function(value) {
		return $Franca_Color.op_Implicit(new $Franca_Color.$ctor3(value, false));
	};
	$Franca_HdrColor.op_Explicit = function(c) {
		return new $Franca_Color.$ctor6(c.r, c.g, c.b, c.a);
	};
	$Franca_HdrColor.op_Explicit$1 = function(color) {
		return color.toVector3();
	};
	$Franca_HdrColor.op_Explicit$2 = function(color) {
		return color.toVector4();
	};
	$Franca_HdrColor.op_Equality = function(lhs, rhs) {
		return lhs.equals$1(rhs);
	};
	$Franca_HdrColor.op_Inequality = function(lhs, rhs) {
		return !lhs.equals$1(rhs);
	};
	$Franca_HdrColor.op_Multiply$1 = function(c, num) {
		return new $Franca_HdrColor.$ctor4(c.r * num, c.g * num, c.b * num, c.a * num);
	};
	$Franca_HdrColor.op_Multiply$2 = function(num, c) {
		return new $Franca_HdrColor.$ctor4(c.r * num, c.g * num, c.b * num, c.a * num);
	};
	$Franca_HdrColor.op_Division$1 = function(c, num) {
		return new $Franca_HdrColor.$ctor4(c.r / num, c.g / num, c.b / num, c.a / num);
	};
	$Franca_HdrColor.op_Division = function(c1, c2) {
		return new $Franca_HdrColor.$ctor6(c1.r / c2.r, c1.g / c2.g, c1.b / c2.b, c1.a / c2.a);
	};
	$Franca_HdrColor.op_Multiply = function(c1, c2) {
		return new $Franca_HdrColor.$ctor6(c1.r * c2.r, c1.g * c2.g, c1.b * c2.b, c1.a * c2.a);
	};
	$Franca_HdrColor.op_Addition = function(c1, c2) {
		return new $Franca_HdrColor.$ctor6(c1.r + c2.r, c1.g + c2.g, c1.b + c2.b, c1.a + c2.a);
	};
	$Franca_HdrColor.op_Subtraction = function(c1, c2) {
		return new $Franca_HdrColor.$ctor6(c1.r - c2.r, c1.g - c2.g, c1.b - c2.b, c1.a - c2.a);
	};
	$Franca_HdrColor.lerp$1 = function(c1, c2, alpha, mode, premultiplied) {
		switch (mode) {
			default:
			case 0: {
				return $Franca_HdrColor.lerp(c1, c2, alpha, premultiplied);
			}
			case 1: {
				return $Franca_HdrColor.$lerpHsvHsl(c1, c2, true, alpha, premultiplied);
			}
			case 2: {
				return $Franca_HdrColor.$lerpHsvHsl(c1, c2, false, alpha, premultiplied);
			}
		}
	};
	$Franca_HdrColor.$lerpHsvHsl = function(c1, c2, hsv, alpha, premultiplied) {
		var hsx1, hsx2, lerped;
		if (hsv) {
			hsx1 = $Franca_ColorHelper.toHsv(c1, premultiplied);
			hsx2 = $Franca_ColorHelper.toHsv(c2, premultiplied);
		}
		else {
			hsx1 = $Franca_ColorHelper.toHsl(c1, premultiplied);
			hsx2 = $Franca_ColorHelper.toHsl(c2, premultiplied);
		}
		var dif = hsx2.x - hsx1.x;
		var oppositeDif = $Franca_Calc.wrap$1(hsx2.x + 0.5, 1) - $Franca_Calc.wrap$1(hsx1.x + 0.5, 1);
		if (Math.abs(dif) <= Math.abs(oppositeDif)) {
			lerped = new $Franca_Vector4.$ctor5($Franca_Calc.wrap$1($Franca_Calc.lerp$2(hsx1.x, hsx2.x, alpha), 1), $Franca_Calc.lerp$2(hsx1.y, hsx2.y, alpha), $Franca_Calc.lerp$2(hsx1.z, hsx2.z, alpha), $Franca_Calc.clamp$3($Franca_Calc.lerp$2(hsx1.w, hsx2.w, alpha), 0, 1));
		}
		else {
			lerped = new $Franca_Vector4.$ctor5($Franca_Calc.wrap$1($Franca_Calc.lerp$2(hsx1.x, hsx1.x + oppositeDif, alpha), 1), $Franca_Calc.lerp$2(hsx1.y, hsx2.y, alpha), $Franca_Calc.lerp$2(hsx1.z, hsx2.z, alpha), $Franca_Calc.clamp$3($Franca_Calc.lerp$2(hsx1.w, hsx2.w, alpha), 0, 1));
		}
		if (hsv) {
			return $Franca_ColorHelper.hsvToColor$1(lerped, premultiplied);
		}
		else {
			return $Franca_ColorHelper.hslToColor$1(lerped, premultiplied);
		}
	};
	$Franca_HdrColor.lerp = function(c1, c2, alpha, premultiplied) {
		return new $Franca_HdrColor.$ctor4($Franca_Calc.lerp$2(c1.r, c2.r, alpha), $Franca_Calc.lerp$2(c1.g, c2.g, alpha), $Franca_Calc.lerp$2(c1.b, c2.b, alpha), $Franca_Calc.lerp$2(c1.a, c2.a, alpha));
	};
	$Franca_HdrColor.multiply = function(c, scalar, multiplyAlpha) {
		if (multiplyAlpha) {
			return $Franca_HdrColor.op_Multiply$1(c, scalar);
		}
		else {
			return $Franca_Color.op_Implicit(new $Franca_Color.$ctor4(c.r * scalar, c.g * scalar, c.b * scalar, c.a));
		}
	};
	$Franca_HdrColor.premultiply = function(c) {
		return $Franca_Color.op_Implicit(new $Franca_Color.$ctor6(c.r * c.a, c.g * c.a, c.b * c.a, c.a));
	};
	$Franca_HdrColor.get_white = function() {
		return $Franca_HdrColor.$white;
	};
	$Franca_HdrColor.get_black = function() {
		return $Franca_HdrColor.$black;
	};
	$Franca_HdrColor.get_transparent = function() {
		return $Franca_HdrColor.$transparent;
	};
	global.Franca.HdrColor = $Franca_HdrColor;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IBinaryDataJS
	var $Franca_IBinaryDataJS = function() {
	};
	$Franca_IBinaryDataJS.__typeName = 'Franca.IBinaryDataJS';
	global.Franca.IBinaryDataJS = $Franca_IBinaryDataJS;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IBinaryReader
	var $Franca_IBinaryReader = function() {
	};
	$Franca_IBinaryReader.__typeName = 'Franca.IBinaryReader';
	global.Franca.IBinaryReader = $Franca_IBinaryReader;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IBinaryStream
	var $Franca_IBinaryStream = function() {
	};
	$Franca_IBinaryStream.__typeName = 'Franca.IBinaryStream';
	global.Franca.IBinaryStream = $Franca_IBinaryStream;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IBinaryWriter
	var $Franca_IBinaryWriter = function() {
	};
	$Franca_IBinaryWriter.__typeName = 'Franca.IBinaryWriter';
	global.Franca.IBinaryWriter = $Franca_IBinaryWriter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IDGenerator
	var $Franca_IDGenerator = function() {
		this.$curID = 0;
	};
	$Franca_IDGenerator.__typeName = 'Franca.IDGenerator';
	$Franca_IDGenerator.$ctor1 = function(minimumID) {
		this.$curID = 0;
		this.$curID = minimumID;
	};
	global.Franca.IDGenerator = $Franca_IDGenerator;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IFileResult
	var $Franca_IFileResult = function() {
	};
	$Franca_IFileResult.__typeName = 'Franca.IFileResult';
	global.Franca.IFileResult = $Franca_IFileResult;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IMappable
	var $Franca_IMappable = function() {
	};
	$Franca_IMappable.__typeName = 'Franca.IMappable';
	global.Franca.IMappable = $Franca_IMappable;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IMappable
	var $Franca_IMappable$1 = function(T) {
		var $type = function() {
		};
		ss.registerGenericInterfaceInstance($type, $Franca_IMappable$1, [T], { fromJson: null }, function() {
			return [$Franca_IMappable];
		});
		return $type;
	};
	$Franca_IMappable$1.__typeName = 'Franca.IMappable$1';
	ss.initGenericInterface($Franca_IMappable$1, $asm, 1);
	global.Franca.IMappable$1 = $Franca_IMappable$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IMappableExtensions
	var $Franca_IMappableExtensions = function() {
	};
	$Franca_IMappableExtensions.__typeName = 'Franca.IMappableExtensions';
	$Franca_IMappableExtensions.objectFromJson = function(mappable, map) {
		if (ss.referenceEquals(mappable, null)) {
			throw new ss.ArgumentNullException('mappable');
		}
		if (ss.referenceEquals(map, null)) {
			throw new ss.ArgumentNullException('map');
		}
		var type = ss.getInstanceType(mappable);
		var iMappableT = ss.makeGenericType($Franca_IMappable$1, [type]);
		// this code results in the same JS code as an SC compiled generic function
		// the only difference is that we're getting the type from the instance instead
		var mappableT = ss.safeCast(mappable, iMappableT);
		if (!ss.isValue(mappableT)) {
			throw new ss.InvalidCastException('Could not cast IMappable to IMappable<' + ss.getTypeName(type) + '>');
		}
		var dynMappable = mappableT;
		var ret = ss.cast(dynMappable.fromJson(map), type);
		return ret;
	};
	global.Franca.IMappableExtensions = $Franca_IMappableExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ImplicitEnum
	var $Franca_ImplicitEnum$1 = function(TEnum) {
		var $type = function() {
			this.value = ss.getDefaultValue(TEnum);
		};
		$type.$ctor1 = function(val) {
			this.value = ss.getDefaultValue(TEnum);
			if (!ss.isEnum(TEnum)) {
				throw new ss.InvalidCastException('ImplicitEnum<TEnum> type must be an Enum type');
			}
			this.value = val;
		};
		$type.getDefaultValue = function() {
			return new $type();
		};
		$type.op_Implicit$1 = function(value) {
			var type = TEnum;
			var values = Object.keys(type.prototype);
			return new $type.$ctor1((Enumerable.from(values).contains(value, $Franca_StringHelper.get_caseInsensitiveComparer()) ? $Franca_EnumHelper.parse(TEnum).call(null, value, true) : ss.getDefaultValue(TEnum)));
			//#if JS
			//            return new ImplicitEnum<TEnum>(values.Contains(value, StringHelper.CaseInsensitiveComparer) ? (TEnum)(object)Enum.Parse(type, values[values.IndexOf(value, StringHelper.CaseInsensitiveComparer)]) : default(TEnum));
			//#else
			//            return new ImplicitEnum<TEnum>(values.Contains(value, StringHelper.CaseInsensitiveComparer) ? (TEnum)(object)Enum.Parse(type, value, true) : default(TEnum));
			//#endif
		};
		$type.op_Implicit = function(value) {
			var type = TEnum;
			var attr = {};
			if (!$type.$boolAttrCache.tryGetValue(type, attr)) {
				attr.$ = $System_TypeExtensions.getAttribute$1($Franca_ImplicitFromBoolAttribute).call(null, type, false);
				if (ss.isNullOrUndefined(attr.$)) {
					throw new ss.InvalidCastException('Cannot implicit assign ImplicitEnum of type ' + ss.getTypeName(type) + ' from bool, no ImplicitFromBool attribute was found.');
				}
				$type.$boolAttrCache.set_item(type, attr.$);
			}
			return $type.op_Implicit$1((value ? attr.$.get_trueValue() : attr.$.get_falseValue()));
		};
		$type.op_Implicit$2 = function(value) {
			return new $type.$ctor1(value);
		};
		ss.registerGenericClassInstance($type, $Franca_ImplicitEnum$1, [TEnum], {
			getHashCode: function() {
				return ss.getHashCode(this.value) | 0;
			},
			equals: function(o) {
				if (!ss.isInstanceOfType(o, $type)) {
					return false;
				}
				return ss.equals(this.value, o.value);
			}
		}, function() {
			return null;
		}, function() {
			return [];
		});
		$type.__class = false;
		ss.setMetadata($type, { attr: [new $Franca_ParsableAttribute()] });
		$type.$boolAttrCache = new (ss.makeGenericType(ss.Dictionary$2, [Function, $Franca_ImplicitFromBoolAttribute]))();
		return $type;
	};
	$Franca_ImplicitEnum$1.__typeName = 'Franca.ImplicitEnum$1';
	ss.initGenericClass($Franca_ImplicitEnum$1, $asm, 1);
	global.Franca.ImplicitEnum$1 = $Franca_ImplicitEnum$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ImplicitFromBoolAttribute
	var $Franca_ImplicitFromBoolAttribute = function(falseValue, trueValue) {
		this.$2$FalseValueField = null;
		this.$2$TrueValueField = null;
		this.set_falseValue(falseValue);
		this.set_trueValue(trueValue);
	};
	$Franca_ImplicitFromBoolAttribute.__typeName = 'Franca.ImplicitFromBoolAttribute';
	global.Franca.ImplicitFromBoolAttribute = $Franca_ImplicitFromBoolAttribute;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IncrementalID
	var $Franca_IncrementalID = function() {
		this.value = 0;
	};
	$Franca_IncrementalID.__typeName = 'Franca.IncrementalID';
	$Franca_IncrementalID.$ctor2 = function(value) {
		this.value = 0;
		this.value = value;
	};
	$Franca_IncrementalID.$ctor1 = function(reader) {
		this.value = 0;
		if (!reader.isInteger()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		this.value = reader.readInteger(false);
	};
	$Franca_IncrementalID.getDefaultValue = function() {
		return new $Franca_IncrementalID();
	};
	$Franca_IncrementalID.op_Implicit = function(id) {
		return id.value;
	};
	$Franca_IncrementalID.op_Implicit$1 = function(id) {
		return new $Franca_IncrementalID.$ctor2(id);
	};
	$Franca_IncrementalID.op_Implicit$4 = function(id) {
		return new $Franca_IncrementalID.$ctor2(id);
	};
	$Franca_IncrementalID.op_Implicit$2 = function(id) {
		return new $Franca_IncrementalID.$ctor2(id);
	};
	$Franca_IncrementalID.op_Implicit$5 = function(id) {
		return new $Franca_IncrementalID.$ctor2(id);
	};
	$Franca_IncrementalID.op_Implicit$3 = function(id) {
		return new $Franca_IncrementalID.$ctor2(id);
	};
	$Franca_IncrementalID.op_Implicit$6 = function(id) {
		return new $Franca_IncrementalID.$ctor2(id);
	};
	$Franca_IncrementalID.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_IncrementalID.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	$Franca_IncrementalID.op_LessThan = function(lhs, rhs) {
		return lhs.value < rhs.value;
	};
	$Franca_IncrementalID.op_LessThanOrEqual = function(lhs, rhs) {
		return lhs.value <= rhs.value;
	};
	$Franca_IncrementalID.op_GreaterThan = function(lhs, rhs) {
		return lhs.value > rhs.value;
	};
	$Franca_IncrementalID.op_GreaterThanOrEqual = function(lhs, rhs) {
		return lhs.value >= rhs.value;
	};
	global.Franca.IncrementalID = $Franca_IncrementalID;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.InvalidFormatException
	var $Franca_InvalidFormatException = function() {
		ss.Exception.call(this);
	};
	$Franca_InvalidFormatException.__typeName = 'Franca.InvalidFormatException';
	$Franca_InvalidFormatException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_InvalidFormatException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.InvalidFormatException = $Franca_InvalidFormatException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IResumable
	var $Franca_IResumable = function() {
	};
	$Franca_IResumable.__typeName = 'Franca.IResumable';
	global.Franca.IResumable = $Franca_IResumable;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JArray
	var $Franca_JArray = function() {
		$Franca_JsonValue.$ctor3.call(this, new (ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))());
	};
	$Franca_JArray.__typeName = 'Franca.JArray';
	$Franca_JArray.$ctor3 = function(values) {
		$Franca_JsonValue.$ctor3.call(this, values);
	};
	$Franca_JArray.$ctor2 = function(array) {
		$Franca_JsonValue.$ctor1.call(this, array);
	};
	$Franca_JArray.$ctor1 = function(binary) {
		$Franca_JsonValue.call(this, binary);
	};
	global.Franca.JArray = $Franca_JArray;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JArrayType
	var $Franca_JArrayType = function() {
	};
	$Franca_JArrayType.__typeName = 'Franca.JArrayType';
	global.Franca.JArrayType = $Franca_JArrayType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JObject
	var $Franca_JObject = function() {
		$Franca_JsonValue.$ctor6.call(this, new (ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))());
	};
	$Franca_JObject.__typeName = 'Franca.JObject';
	$Franca_JObject.$ctor1 = function(dict) {
		$Franca_JsonValue.$ctor6.call(this, dict);
	};
	$Franca_JObject.$ctor2 = function(dict) {
		$Franca_JsonValue.$ctora.call(this, dict);
	};
	global.Franca.JObject = $Franca_JObject;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JsonIndexException
	var $Franca_JsonIndexException = function() {
		$Franca_JsonValueException.call(this);
	};
	$Franca_JsonIndexException.__typeName = 'Franca.JsonIndexException';
	$Franca_JsonIndexException.$ctor1 = function(message) {
		$Franca_JsonValueException.$ctor1.call(this, message);
	};
	$Franca_JsonIndexException.$ctor2 = function(message, innerException) {
		$Franca_JsonValueException.$ctor2.call(this, message, innerException);
	};
	global.Franca.JsonIndexException = $Franca_JsonIndexException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JsonType
	var $Franca_JsonType = function() {
	};
	$Franca_JsonType.__typeName = 'Franca.JsonType';
	global.Franca.JsonType = $Franca_JsonType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JsonTypeConversionException
	var $Franca_JsonTypeConversionException = function() {
		$Franca_JsonValueException.call(this);
	};
	$Franca_JsonTypeConversionException.__typeName = 'Franca.JsonTypeConversionException';
	$Franca_JsonTypeConversionException.$ctor1 = function(message) {
		$Franca_JsonValueException.$ctor1.call(this, message);
	};
	$Franca_JsonTypeConversionException.$ctor2 = function(message, innerException) {
		$Franca_JsonValueException.$ctor2.call(this, message, innerException);
	};
	global.Franca.JsonTypeConversionException = $Franca_JsonTypeConversionException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JsonValidationException
	var $Franca_JsonValidationException = function() {
		$Franca_JsonValueException.call(this);
	};
	$Franca_JsonValidationException.__typeName = 'Franca.JsonValidationException';
	$Franca_JsonValidationException.$ctor1 = function(message) {
		$Franca_JsonValueException.$ctor1.call(this, message);
	};
	$Franca_JsonValidationException.$ctor2 = function(message, innerException) {
		$Franca_JsonValueException.$ctor2.call(this, message, innerException);
	};
	global.Franca.JsonValidationException = $Franca_JsonValidationException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JsonValue
	var $Franca_JsonValue = function(binary) {
		this.value = null;
		if (!ss.referenceEquals(binary, null)) {
			this.value = $Franca_Collections_ByteArray.op_Explicit(binary);
		}
	};
	$Franca_JsonValue.__typeName = 'Franca.JsonValue';
	$Franca_JsonValue.$ctorc = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctorj = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctor9 = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctori = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctore = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctorl = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctorf = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctorm = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctorg = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctorn = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctor2 = function(value) {
		this.value = null;
		this.value = $Franca_Fix53.cast_Double(value);
	};
	$Franca_JsonValue.$ctork = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctor8 = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctord = function(value) {
		this.value = null;
		if (!ss.referenceEquals(value, null)) {
			this.value = $System_EnumExtensions.toInt32(value);
		}
	};
	$Franca_JsonValue.$ctor3 = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctor6 = function(value) {
		this.value = null;
		this.value = value;
	};
	$Franca_JsonValue.$ctor7 = function(value) {
		this.value = null;
		if (!ss.referenceEquals(value, null)) {
			this.value = ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]).op_Explicit(value);
		}
	};
	$Franca_JsonValue.$ctora = function(value) {
		this.value = null;
		if (!ss.referenceEquals(value, null)) {
			this.value = new (ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]).$ctor1)(value);
		}
	};
	$Franca_JsonValue.$ctorb = function(value) {
		this.value = null;
		if (!ss.referenceEquals(value, null)) {
			this.value = ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]).op_Explicit$1(value);
		}
	};
	$Franca_JsonValue.$ctor1 = function(array) {
		this.value = null;
		if (!ss.referenceEquals(array, null)) {
			this.value = array;
			if (this.get_arrayType() < 0) {
				throw new $Franca_JsonTypeConversionException.$ctor1('Only ByteArray, SByteArray, ShortArray, IntArray, FloatArray, and DoubleArray are valid TypedArrays for conversion to a JsonValue.');
			}
		}
	};
	$Franca_JsonValue.$ctor5 = function(value) {
		this.value = null;
		if (!ss.referenceEquals(value, null)) {
			this.value = value.value;
		}
	};
	$Franca_JsonValue.$ctor4 = function(value) {
		this.value = null;
		if (!ss.referenceEquals(value, null)) {
			var jVal = value.toJson();
			this.value = ($Franca_JsonValue.op_Equality(jVal, null) ? null : jVal.value);
		}
	};
	$Franca_JsonValue.$ctorh = function(value) {
		$Franca_JsonValue.$ctoro.call(this, value, true);
	};
	$Franca_JsonValue.$ctoro = function(value, convertValue) {
		this.value = null;
		if (!convertValue) {
			this.value = value;
		}
		else if (!ss.referenceEquals(value, null)) {
			var d1 = ss.safeCast(value, ss.makeGenericType(ss.Dictionary$2, [String, $Franca_JsonValue]));
			if (ss.isValue(d1)) {
				this.value = new (ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]).$ctor1)(d1);
				return;
			}
			var d2 = ss.safeCast(value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]));
			if (ss.isValue(d2)) {
				this.value = d2;
				return;
			}
			var l = ss.safeCast(value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]));
			if (ss.isValue(l)) {
				this.value = l;
				return;
			}
			var bin = ss.safeCast(value, $Franca_BinaryData);
			if (ss.isValue(bin)) {
				this.value = $Franca_Collections_ByteArray.op_Explicit(bin);
				return;
			}
			var ta = ss.safeCast(value, $Franca_Collections_TypedArray);
			if (ss.isValue(ta)) {
				this.value = ta;
				if (this.get_arrayType() < 0) {
					throw new $Franca_JsonTypeConversionException.$ctor1('Only ByteArray, SByteArray, ShortArray, IntArray, FloatArray, and DoubleArray are valid TypedArrays for conversion to a JsonValue.');
				}
				return;
			}
			var jsonVal = ss.safeCast(value, $Franca_JsonValue);
			if ($Franca_JsonValue.op_Inequality(jsonVal, null)) {
				this.value = jsonVal.value;
				return;
			}
			var mappable = ss.safeCast(value, $Franca_IMappable);
			if (ss.isValue(mappable)) {
				var jVal = mappable.toJson();
				this.value = ($Franca_JsonValue.op_Equality(jVal, null) ? null : jVal.value);
				return;
			}
			this.value = $Franca_JsonValue.convertValue(value, true);
		}
	};
	$Franca_JsonValue.op_Multiply$c = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs * ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$2 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) * rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '*' on JsonValue operands if either operand's reference is null.");
		}
		if (ss.isInstanceOfType(lhs.value, Number) && ss.isInstanceOfType(rhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) * ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '*' on JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on JsonValue operands of type '{0}' and type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs.value)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$h = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs * ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$7 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) * rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$b = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs * ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$1 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) * rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$g = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs * ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$6 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) * rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$d = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs * ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$3 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) * rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$i = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs * ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$8 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) * rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$e = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs * ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$4 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) * rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$j = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs * ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$9 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) * rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$f = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs * ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$5 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) * rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$k = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs * ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Multiply$a = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) * rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '*' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$c = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs / ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$2 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) / rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Division = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '/' on JsonValue operands if either operand's reference is null.");
		}
		if (ss.isInstanceOfType(lhs.value, Number) && ss.isInstanceOfType(rhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) / ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '/' on JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on JsonValue operands of type '{0}' and type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs.value)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$h = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs / ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$7 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) / rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$b = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs / ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$1 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) / rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$g = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs / ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$6 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) / rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$d = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs / ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$3 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) / rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$i = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs / ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$8 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) / rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$e = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs / ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$4 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) / rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$j = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs / ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$9 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) / rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$f = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs / ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$5 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) / rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$k = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs / ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Division$a = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) / rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '/' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$d = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs + ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$2 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) + rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '+' on JsonValue operands if either operand's reference is null.");
		}
		if (ss.isInstanceOfType(lhs.value, Number) && ss.isInstanceOfType(rhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) + ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.isInstanceOfType(lhs.value, String) && ss.isInstanceOfType(rhs.value, String)) {
			return ss.cast(rhs.value, String) + ss.cast(rhs.value, String);
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '+' on JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on JsonValue operands of type '{0}' and type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs.value)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$i = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs + ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$7 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) + rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$c = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs + ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$1 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) + rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$h = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs + ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$6 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) + rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$e = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs + ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$3 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) + rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$k = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs + ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$9 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) + rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$f = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs + ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$4 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) + rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$l = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs + ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$a = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) + rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$g = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs + ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$5 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) + rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$m = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs + ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$b = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) + rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$j = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, String)) {
			return lhs + ss.cast(rhs.value, String);
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Addition$8 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, String)) {
			return ss.cast(lhs.value, String) + rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '+' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$c = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs - ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$2 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) - rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '-' on JsonValue operands if either operand's reference is null.");
		}
		if (ss.isInstanceOfType(lhs.value, Number) && ss.isInstanceOfType(rhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) - ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '-' on JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on JsonValue operands of type '{0}' and type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs.value)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$h = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs - ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$7 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) - rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$b = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs - ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$1 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) - rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$g = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs - ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$6 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) - rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$d = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs - ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$3 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) - rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$i = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs - ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$8 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) - rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$e = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs - ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$4 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) - rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$j = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs - ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$9 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) - rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$f = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs - ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$5 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) - rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$k = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs - ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Subtraction$a = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) - rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '-' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$c = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs % ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$2 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) % rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '%' on JsonValue operands if either operand's reference is null.");
		}
		if (ss.isInstanceOfType(lhs.value, Number) && ss.isInstanceOfType(rhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) % ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '%' on JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on JsonValue operands of type '{0}' and type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs.value)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$h = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs % ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$7 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) % rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$b = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs % ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$1 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) % rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$g = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs % ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$6 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) % rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$d = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs % ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$3 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) % rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$i = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs % ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$8 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) % rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$e = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs % ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$4 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) % rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$j = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs % ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$9 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) % rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$f = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs % ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$5 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) % rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$k = function(lhs, rhs) {
		if (ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		if (ss.isInstanceOfType(rhs.value, Number)) {
			return lhs % ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(lhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(lhs)), ss.getTypeFullName(ss.getInstanceType(rhs.value))));
		}
	};
	$Franca_JsonValue.op_Modulus$a = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue reference.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) % rhs;
		}
		else if (ss.referenceEquals(lhs.value, null)) {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and null JsonValue.", ss.getTypeFullName(ss.getInstanceType(rhs))));
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '%' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_GreaterThan$1 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '>' involving JsonValue with null reference.");
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			var comparable = $Franca_JsonValue.$getComparable(rhs);
			if (ss.referenceEquals(comparable, null)) {
				if (ss.referenceEquals(rhs, null)) {
					throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '>' on null operand and JsonValue of type '{0}'.", ss.getTypeFullName(ss.getInstanceType(lhs.value))));
				}
				else {
					throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '>' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
				}
			}
			else {
				return ss.compare(comparable, ss.unbox(ss.cast(lhs.value, Number))) < 0;
			}
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '>' involving JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '>' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_LessThan$1 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '<' involving JsonValue with null reference.");
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			var comparable = $Franca_JsonValue.$getComparable(rhs);
			if (ss.referenceEquals(comparable, null)) {
				if (ss.referenceEquals(rhs, null)) {
					throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '<' on null operand and JsonValue of type '{0}'.", ss.getTypeFullName(ss.getInstanceType(lhs.value))));
				}
				else {
					throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '<' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
				}
			}
			else {
				return ss.compare(comparable, ss.unbox(ss.cast(lhs.value, Number))) > 0;
			}
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '>' involving JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '>' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_GreaterThanOrEqual$1 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '>=' involving JsonValue with null reference.");
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			var comparable = $Franca_JsonValue.$getComparable(rhs);
			if (ss.referenceEquals(comparable, null)) {
				if (ss.referenceEquals(rhs, null)) {
					throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '>=' on null operand and JsonValue of type '{0}'.", ss.getTypeFullName(ss.getInstanceType(lhs.value))));
				}
				else {
					throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '>=' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
				}
			}
			else {
				return ss.compare(comparable, ss.unbox(ss.cast(lhs.value, Number))) <= 0;
			}
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '>' involving JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '>' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_LessThanOrEqual$1 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '<=' involving JsonValue with null reference.");
		}
		if (ss.isInstanceOfType(lhs.value, Number)) {
			var comparable = $Franca_JsonValue.$getComparable(rhs);
			if (ss.referenceEquals(comparable, null)) {
				if (ss.referenceEquals(rhs, null)) {
					throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '<=' on null operand and JsonValue of type '{0}'.", ss.getTypeFullName(ss.getInstanceType(lhs.value))));
				}
				else {
					throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '<=' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
				}
			}
			else {
				return ss.compare(comparable, ss.unbox(ss.cast(lhs.value, Number))) >= 0;
			}
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '>' involving JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '>' on operands of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_GreaterThan = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '>' on JsonValue operands if either operand is null.");
		}
		if (ss.isInstanceOfType(lhs.value, Number) && ss.isInstanceOfType(rhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) > ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '>' on JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '>' on JsonValue of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs.value)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_LessThan = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '<' on JsonValue operands if either operand is null.");
		}
		if (ss.isInstanceOfType(lhs.value, Number) && ss.isInstanceOfType(rhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) < ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '<' on JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '<' on JsonValue of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs.value)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_GreaterThanOrEqual = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '>=' on JsonValue operands if either operand is null.");
		}
		if (ss.isInstanceOfType(lhs.value, Number) && ss.isInstanceOfType(rhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) >= ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '>=' on JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '>=' on JsonValue of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs.value)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_LessThanOrEqual = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null) || ss.referenceEquals(rhs, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '<=' on JsonValue operands if either operand is null.");
		}
		if (ss.isInstanceOfType(lhs.value, Number) && ss.isInstanceOfType(rhs.value, Number)) {
			return ss.unbox(ss.cast(lhs.value, Number)) <= ss.unbox(ss.cast(rhs.value, Number));
		}
		else if (ss.referenceEquals(lhs.value, null) || ss.referenceEquals(rhs.value, null)) {
			throw new ss.InvalidOperationException("Cannot perform operation '<=' on JsonValue operands if either operand is null.");
		}
		else {
			throw new ss.InvalidOperationException(ss.formatString("Cannot perform operation '<=' on JsonValue of type '{0}' and JsonValue of type '{1}'.", ss.getTypeFullName(ss.getInstanceType(rhs.value)), ss.getTypeFullName(ss.getInstanceType(lhs.value))));
		}
	};
	$Franca_JsonValue.op_Equality$1 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			return ss.referenceEquals(rhs, null);
		}
		return lhs.equals(rhs);
	};
	$Franca_JsonValue.op_Inequality$1 = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			return !ss.referenceEquals(rhs, null);
		}
		return !lhs.equals(rhs);
	};
	$Franca_JsonValue.op_Equality = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			return ss.referenceEquals(rhs, null);
		}
		return lhs.equals(rhs);
	};
	$Franca_JsonValue.op_Inequality = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			return !ss.referenceEquals(rhs, null);
		}
		return !lhs.equals(rhs);
	};
	$Franca_JsonValue.op_Implicit$3 = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to double.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null to double.');
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to double.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number));
	};
	$Franca_JsonValue.op_Implicit$j = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to float.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null to float.');
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to float.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number));
	};
	$Franca_JsonValue.op_Implicit$2 = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to byte.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null to byte.');
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to byte.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number)) & 255;
	};
	$Franca_JsonValue.op_Implicit$i = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to sbyte.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null to sbyte.');
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to sbyte.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return $Franca_Cast.toSByte$1(ss.unbox(ss.cast(v.value, Number)));
	};
	$Franca_JsonValue.op_Implicit$4 = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to short.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null to short.');
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to short.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return $Franca_Cast.toShort$1(ss.unbox(ss.cast(v.value, Number)));
	};
	$Franca_JsonValue.op_Implicit$l = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to ushort.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null to ushort.');
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to ushort.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number)) & 65535;
	};
	$Franca_JsonValue.op_Implicit$5 = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to int.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null to int.');
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to int.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number)) >> 0;
	};
	$Franca_JsonValue.op_Implicit$m = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to uint.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null to uint.');
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to uint.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number)) >>> 0;
	};
	$Franca_JsonValue.op_Implicit$6 = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to long.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null to long.');
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to long.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return $Franca_Cast.toLong(ss.unbox(ss.cast(v.value, Number)));
	};
	$Franca_JsonValue.op_Implicit$n = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to ulong.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null to ulong.');
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to ulong.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return $Franca_Cast.toULong$1(ss.unbox(ss.cast(v.value, Number)));
	};
	$Franca_JsonValue.op_Implicit$1 = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to bool.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null to bool.');
		}
		if (!ss.isInstanceOfType(v.value, Boolean)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to bool.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Boolean));
	};
	$Franca_JsonValue.op_Implicit$k = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (ss.isInstanceOfType(v.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue])) || ss.isInstanceOfType(v.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue])) || ss.isInstanceOfType(v.value, $Franca_Collections_TypedArray)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Cannot implicitly convert json value of type '{0}' to string.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return $System_ObjectExtensions.toStringInvariant(v.value);
	};
	$Franca_JsonValue.op_Explicit = function(v) {
		if (ss.referenceEquals(v, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to implicitly convert json value null reference to Fix53.');
		}
		if (ss.referenceEquals(v.value, null)) {
			throw new $Franca_JsonTypeConversionException.$ctor1('Tried to explicitly convert json value null to Fix53.');
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to explicitly convert json value of type '{0}' to Fix53.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return $Franca_Fix53.cast_DoubleToFix53(ss.unbox(ss.cast(v.value, Number)));
	};
	$Franca_JsonValue.op_Implicit$7 = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to double.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number));
	};
	$Franca_JsonValue.op_Implicit$8 = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to float.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number));
	};
	$Franca_JsonValue.op_Implicit$9 = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to byte.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number)) & 255;
	};
	$Franca_JsonValue.op_Implicit$a = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to sbyte.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return $Franca_Cast.toSByte$1(ss.unbox(ss.cast(v.value, Number)));
	};
	$Franca_JsonValue.op_Implicit$b = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to short.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return $Franca_Cast.toShort$1(ss.unbox(ss.cast(v.value, Number)));
	};
	$Franca_JsonValue.op_Implicit$c = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to ushort.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number)) & 65535;
	};
	$Franca_JsonValue.op_Implicit$d = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to int.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number)) >> 0;
	};
	$Franca_JsonValue.op_Implicit$e = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to uint.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Number)) >>> 0;
	};
	$Franca_JsonValue.op_Implicit$f = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to long.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return $Franca_Cast.toLong(ss.unbox(ss.cast(v.value, Number)));
	};
	$Franca_JsonValue.op_Implicit$g = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to ulong.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return $Franca_Cast.toULong$1(ss.unbox(ss.cast(v.value, Number)));
	};
	$Franca_JsonValue.op_Implicit$h = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Boolean)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to implicitly convert json value of type '{0}' to bool.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return ss.unbox(ss.cast(v.value, Boolean));
	};
	$Franca_JsonValue.op_Explicit$1 = function(v) {
		if (ss.referenceEquals(v, null) || ss.referenceEquals(v.value, null)) {
			return null;
		}
		if (!ss.isInstanceOfType(v.value, Number)) {
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Tried to explicitly convert json value of type '{0}' to Fix53.", ss.getTypeFullName(ss.getInstanceType(v.value))));
		}
		return $Franca_Fix53.cast_DoubleToFix53(ss.unbox(ss.cast(v.value, Number)));
	};
	$Franca_JsonValue.op_Implicit$q = function(v) {
		return new $Franca_JsonValue.$ctorc(v);
	};
	$Franca_JsonValue.op_Implicit$p = function(v) {
		return new $Franca_JsonValue.$ctor9(v);
	};
	$Franca_JsonValue.op_Implicit$F = function(v) {
		return new $Franca_JsonValue.$ctori(v);
	};
	$Franca_JsonValue.op_Implicit$r = function(v) {
		return new $Franca_JsonValue.$ctore(v);
	};
	$Franca_JsonValue.op_Implicit$H = function(v) {
		return new $Franca_JsonValue.$ctorl(v);
	};
	$Franca_JsonValue.op_Implicit$s = function(v) {
		return new $Franca_JsonValue.$ctorf(v);
	};
	$Franca_JsonValue.op_Implicit$I = function(v) {
		return new $Franca_JsonValue.$ctorm(v);
	};
	$Franca_JsonValue.op_Implicit$t = function(v) {
		return new $Franca_JsonValue.$ctorg(v);
	};
	$Franca_JsonValue.op_Implicit$J = function(v) {
		return new $Franca_JsonValue.$ctorn(v);
	};
	$Franca_JsonValue.op_Implicit$o = function(v) {
		return new $Franca_JsonValue.$ctor8(v);
	};
	$Franca_JsonValue.op_Implicit$G = function(v) {
		return new $Franca_JsonValue.$ctork(v);
	};
	$Franca_JsonValue.op_Implicit = function(v) {
		return new $Franca_JsonValue.$ctor2(v);
	};
	$Franca_JsonValue.op_Implicit$u = function(v) {
		if (ss.isValue(v)) {
			return new $Franca_JsonValue.$ctorc(ss.unbox(v));
		}
		else {
			return new $Franca_JsonValue.$ctorh(null);
		}
	};
	$Franca_JsonValue.op_Implicit$v = function(v) {
		if (ss.isValue(v)) {
			return new $Franca_JsonValue.$ctor9(ss.unbox(v));
		}
		else {
			return new $Franca_JsonValue.$ctorh(null);
		}
	};
	$Franca_JsonValue.op_Implicit$w = function(v) {
		if (ss.isValue(v)) {
			return new $Franca_JsonValue.$ctori(ss.unbox(v));
		}
		else {
			return new $Franca_JsonValue.$ctorh(null);
		}
	};
	$Franca_JsonValue.op_Implicit$x = function(v) {
		if (ss.isValue(v)) {
			return new $Franca_JsonValue.$ctore(ss.unbox(v));
		}
		else {
			return new $Franca_JsonValue.$ctorh(null);
		}
	};
	$Franca_JsonValue.op_Implicit$y = function(v) {
		if (ss.isValue(v)) {
			return new $Franca_JsonValue.$ctorl(ss.unbox(v));
		}
		else {
			return new $Franca_JsonValue.$ctorh(null);
		}
	};
	$Franca_JsonValue.op_Implicit$z = function(v) {
		if (ss.isValue(v)) {
			return new $Franca_JsonValue.$ctorf(ss.unbox(v));
		}
		else {
			return new $Franca_JsonValue.$ctorh(null);
		}
	};
	$Franca_JsonValue.op_Implicit$A = function(v) {
		if (ss.isValue(v)) {
			return new $Franca_JsonValue.$ctorm(ss.unbox(v));
		}
		else {
			return new $Franca_JsonValue.$ctorh(null);
		}
	};
	$Franca_JsonValue.op_Implicit$B = function(v) {
		if (ss.isValue(v)) {
			return new $Franca_JsonValue.$ctorg(ss.unbox(v));
		}
		else {
			return new $Franca_JsonValue.$ctorh(null);
		}
	};
	$Franca_JsonValue.op_Implicit$C = function(v) {
		if (ss.isValue(v)) {
			return new $Franca_JsonValue.$ctorn(ss.unbox(v));
		}
		else {
			return new $Franca_JsonValue.$ctorh(null);
		}
	};
	$Franca_JsonValue.op_Implicit$D = function(v) {
		if (ss.isValue(v)) {
			return new $Franca_JsonValue.$ctor8(ss.unbox(v));
		}
		else {
			return new $Franca_JsonValue.$ctorh(null);
		}
	};
	$Franca_JsonValue.op_Implicit$E = function(v) {
		if (ss.isValue(v)) {
			return new $Franca_JsonValue.$ctor2(ss.unbox(v));
		}
		else {
			return new $Franca_JsonValue.$ctorh(null);
		}
	};
	$Franca_JsonValue.$getComparable = function(v) {
		var dblObject = $Franca_JsonValue.convertValue(v, false);
		if (ss.isInstanceOfType(dblObject, Number)) {
			return ss.unbox(ss.cast(dblObject, Number));
		}
		return ss.safeCast(v, ss.IComparable);
	};
	$Franca_JsonValue.tryConvertValue = function(value, result) {
		if (ss.referenceEquals(value, null)) {
			result.$ = null;
			return true;
		}
		var t;
		if (ss.isInstanceOfType(value, ss.Enum)) {
			t = ss.Enum;
		}
		else {
			t = ss.getInstanceType(value);
		}
		var convertFunc = {};
		if ($Franca_JsonValue.conversionMap.tryGetValue(t, convertFunc)) {
			result.$ = convertFunc.$(value);
			return true;
		}
		result.$ = null;
		return false;
	};
	$Franca_JsonValue.convertValue = function(value, throwOnFail) {
		var result = {};
		if ($Franca_JsonValue.tryConvertValue(value, result)) {
			return result.$;
		}
		if (throwOnFail) {
			// this is safe because null values will always convert
			var t = ss.getInstanceType(value);
			throw new $Franca_JsonTypeConversionException.$ctor1(ss.formatString("Could not convert type '{0}' to json value, consider adding a conversion function to JsonValue.ConversionMap.", ss.getTypeFullName(t)));
		}
		else {
			return null;
		}
	};
	$Franca_JsonValue.create = function(T) {
		return function(json) {
			var inst = ss.cast(ss.createInstance(T), T);
			return ss.cast($Franca_IMappableExtensions.objectFromJson(inst, json), T);
		};
	};
	$Franca_JsonValue.get_dict = function() {
		return new $Franca_JObject();
	};
	$Franca_JsonValue.get_list = function() {
		return new $Franca_JArray();
	};
	$Franca_JsonValue.get_null = function() {
		return new $Franca_JsonValue.$ctoro(null, false);
	};
	$Franca_JsonValue.get_true = function() {
		return new $Franca_JsonValue.$ctor8(true);
	};
	$Franca_JsonValue.get_false = function() {
		return new $Franca_JsonValue.$ctor8(false);
	};
	$Franca_JsonValue.fromReader = function(reader) {
		var type = reader.get_currentType();
		switch (type) {
			default: {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			case 1: {
				var obj = new $Franca_JObject();
				var $t1 = reader.readObject().getEnumerator();
				try {
					while ($t1.moveNext()) {
						var v = $t1.current();
						obj.add$1(v.key, $Franca_JsonValue.fromReader(reader));
					}
				}
				finally {
					$t1.dispose();
				}
				return obj;
			}
			case 3: {
				var obj1 = new $Franca_JArray();
				var $t2 = reader.readArray(0, -1).getEnumerator();
				try {
					while ($t2.moveNext()) {
						var v1 = $t2.current();
						obj1.add($Franca_JsonValue.fromReader(reader));
					}
				}
				finally {
					$t2.dispose();
				}
				return obj1;
			}
			case 10:
			case 9: {
				return new $Franca_JsonValue.$ctor8(reader.readBool(true));
			}
			case 11: {
				reader.readNull(true);
				return $Franca_JsonValue.get_null();
			}
			case 8: {
				return new $Franca_JsonValue.$ctorc(reader.readNumber(true));
			}
			case 7: {
				return new $Franca_JsonValue.$ctork(reader.readString(true, 0, -1));
			}
		}
	};
	global.Franca.JsonValue = $Franca_JsonValue;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JsonValue.Validation
	var $Franca_JsonValue$Validation = function() {
		this.$keys = null;
		this.$indices = null;
		this.$keys = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_JsonType]))();
		this.$indices = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_JsonType]))();
	};
	$Franca_JsonValue$Validation.__typeName = 'Franca.JsonValue$Validation';
	global.Franca.JsonValue$Validation = $Franca_JsonValue$Validation;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JsonValueException
	var $Franca_JsonValueException = function() {
		ss.Exception.call(this);
	};
	$Franca_JsonValueException.__typeName = 'Franca.JsonValueException';
	$Franca_JsonValueException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_JsonValueException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.JsonValueException = $Franca_JsonValueException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JsonValueExtensions
	var $Franca_JsonValueExtensions = function() {
	};
	$Franca_JsonValueExtensions.__typeName = 'Franca.JsonValueExtensions';
	$Franca_JsonValueExtensions.nullCoalesce = function(lhs, rhs) {
		if (ss.referenceEquals(lhs, null)) {
			return rhs;
		}
		else {
			return (ss.referenceEquals(lhs.value, null) ? rhs : lhs);
		}
	};
	global.Franca.JsonValueExtensions = $Franca_JsonValueExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.LoadableFromAttribute
	var $Franca_LoadableFromAttribute = function(fileType) {
		this.fileType = 0;
		this.fileType = fileType;
	};
	$Franca_LoadableFromAttribute.__typeName = 'Franca.LoadableFromAttribute';
	global.Franca.LoadableFromAttribute = $Franca_LoadableFromAttribute;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.MathHelper
	var $Franca_MathHelper = function() {
	};
	$Franca_MathHelper.__typeName = 'Franca.MathHelper';
	$Franca_MathHelper.hermite = function(value1, tangent1, value2, tangent2, amount) {
		// All transformed to double not to lose precission
		// Otherwise, for high numbers of param:amount the result is NaN instead of Infinity
		var v1 = value1, v2 = value2, t1 = tangent1, t2 = tangent2, s = amount, result;
		var sCubed = s * s * s;
		var sSquared = s * s;
		if (amount === 0) {
			result = value1;
		}
		else if (amount === 1) {
			result = value2;
		}
		else {
			result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;
		}
		return result;
	};
	$Franca_MathHelper.smoothStep = function(value1, value2, amount) {
		// It is expected that 0 < amount < 1
		// If amount < 0, return value1
		// If amount > 1, return value2
		var result = $Franca_Calc.clamp$3(amount, 0, 1);
		result = $Franca_MathHelper.hermite(value1, 0, value2, 0, result);
		return result;
	};
	$Franca_MathHelper.barycentric = function(value1, value2, value3, amount1, amount2) {
		return value1 + (value2 - value1) * amount1 + (value3 - value1) * amount2;
	};
	$Franca_MathHelper.catmullRom = function(value1, value2, value3, value4, amount) {
		// Using formula from http://www.mvps.org/directx/articles/catmull/
		// Internally using doubles not to lose precission
		var amountSquared = amount * amount;
		var amountCubed = amountSquared * amount;
		return 0.5 * (2 * value2 + (value3 - value1) * amount + (2 * value1 - 5 * value2 + 4 * value3 - value4) * amountSquared + (3 * value2 - value1 - 3 * value3 + value4) * amountCubed);
	};
	$Franca_MathHelper.hermite$1 = function(value1, tangent1, value2, tangent2, amount) {
		return $Franca_MathHelper.hermite(value1, tangent1, value2, tangent2, amount);
	};
	$Franca_MathHelper.smoothStep$1 = function(value1, value2, amount) {
		return $Franca_MathHelper.smoothStep(value1, value2, amount);
	};
	$Franca_MathHelper.barycentric$1 = function(value1, value2, value3, amount1, amount2) {
		return $Franca_MathHelper.barycentric(value1, value2, value3, amount1, amount2);
	};
	$Franca_MathHelper.catmullRom$1 = function(value1, value2, value3, value4, amount) {
		return $Franca_MathHelper.catmullRom(value1, value2, value3, value4, amount);
	};
	global.Franca.MathHelper = $Franca_MathHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Matrix4
	var $Franca_Matrix4 = function() {
		this.row0 = ss.getDefaultValue($Franca_Vector4);
		this.row1 = ss.getDefaultValue($Franca_Vector4);
		this.row2 = ss.getDefaultValue($Franca_Vector4);
		this.row3 = ss.getDefaultValue($Franca_Vector4);
	};
	$Franca_Matrix4.__typeName = 'Franca.Matrix4';
	$Franca_Matrix4.$ctor2 = function(row0, row1, row2, row3) {
		this.row0 = ss.getDefaultValue($Franca_Vector4);
		this.row1 = ss.getDefaultValue($Franca_Vector4);
		this.row2 = ss.getDefaultValue($Franca_Vector4);
		this.row3 = ss.getDefaultValue($Franca_Vector4);
		this.row0 = row0;
		this.row1 = row1;
		this.row2 = row2;
		this.row3 = row3;
	};
	$Franca_Matrix4.$ctor3 = function(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
		this.row0 = ss.getDefaultValue($Franca_Vector4);
		this.row1 = ss.getDefaultValue($Franca_Vector4);
		this.row2 = ss.getDefaultValue($Franca_Vector4);
		this.row3 = ss.getDefaultValue($Franca_Vector4);
		this.row0 = new $Franca_Vector4.$ctor5(m11, m12, m13, m14);
		this.row1 = new $Franca_Vector4.$ctor5(m21, m22, m23, m24);
		this.row2 = new $Franca_Vector4.$ctor5(m31, m32, m33, m34);
		this.row3 = new $Franca_Vector4.$ctor5(m41, m42, m43, m44);
	};
	$Franca_Matrix4.$ctor1 = function(reader) {
		this.row0 = ss.getDefaultValue($Franca_Vector4);
		this.row1 = ss.getDefaultValue($Franca_Vector4);
		this.row2 = ss.getDefaultValue($Franca_Vector4);
		this.row3 = ss.getDefaultValue($Franca_Vector4);
		this.row0 = $Franca_Vector4.zero;
		this.row1 = $Franca_Vector4.zero;
		this.row2 = $Franca_Vector4.zero;
		this.row3 = $Franca_Vector4.zero;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var _requiredField_row0 = false;
		var _requiredField_row1 = false;
		var _requiredField_row2 = false;
		var _requiredField_row3 = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'row0': {
						{
							_requiredField_row0 = true;
							this.row0 = new $Franca_Vector4.$ctor1(reader);
						}
						break;
					}
					case 'row1': {
						{
							_requiredField_row1 = true;
							this.row1 = new $Franca_Vector4.$ctor1(reader);
						}
						break;
					}
					case 'row2': {
						{
							_requiredField_row2 = true;
							this.row2 = new $Franca_Vector4.$ctor1(reader);
						}
						break;
					}
					case 'row3': {
						{
							_requiredField_row3 = true;
							this.row3 = new $Franca_Vector4.$ctor1(reader);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_row0 || !_requiredField_row1 || !_requiredField_row2 || !_requiredField_row3) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
	};
	$Franca_Matrix4.getDefaultValue = function() {
		return new $Franca_Matrix4();
	};
	$Franca_Matrix4.op_Implicit = function(m) {
		return new Float32Array([m.row0.x, m.row0.y, m.row0.z, m.row0.w, m.row1.x, m.row1.y, m.row1.z, m.row1.w, m.row2.x, m.row2.y, m.row2.z, m.row2.w, m.row3.x, m.row3.y, m.row3.z, m.row3.w]);
	};
	$Franca_Matrix4.createFromAxisAngle$1 = function(axis, angle, result) {
		var cos = Math.cos(-angle);
		var sin = Math.sin(-angle);
		var t = 1 - cos;
		axis.normalize();
		result.$ = new $Franca_Matrix4.$ctor3(t * axis.x * axis.x + cos, t * axis.x * axis.y - sin * axis.z, t * axis.x * axis.z + sin * axis.y, 0, t * axis.x * axis.y + sin * axis.z, t * axis.y * axis.y + cos, t * axis.y * axis.z - sin * axis.x, 0, t * axis.x * axis.z - sin * axis.y, t * axis.y * axis.z + sin * axis.x, t * axis.z * axis.z + cos, 0, 0, 0, 0, 1);
	};
	$Franca_Matrix4.createFromAxisAngle = function(axis, angle) {
		var result = {};
		$Franca_Matrix4.createFromAxisAngle$1(axis, angle, result);
		return result.$;
	};
	$Franca_Matrix4.createTranslation$3 = function(x, y, z, result) {
		//result = Identity;
		//result.Row3 = new Vector4(x, y, z, 1);
		result.$ = new $Franca_Matrix4.$ctor2($Franca_Matrix4.identity.row0, $Franca_Matrix4.identity.row1, $Franca_Matrix4.identity.row2, new $Franca_Vector4.$ctor5(x, y, z, 1));
	};
	$Franca_Matrix4.createTranslation$1 = function(vector, result) {
		//result = Identity;
		//result.Row3 = new Vector4(vector.X, vector.Y, vector.Z, 1);
		result.$ = new $Franca_Matrix4.$ctor2($Franca_Matrix4.identity.row0, $Franca_Matrix4.identity.row1, $Franca_Matrix4.identity.row2, new $Franca_Vector4.$ctor5(vector.$.x, vector.$.y, vector.$.z, 1));
	};
	$Franca_Matrix4.createTranslation$2 = function(x, y, z) {
		var result = {};
		$Franca_Matrix4.createTranslation$3(x, y, z, result);
		return result.$;
	};
	$Franca_Matrix4.createTranslation = function(vector) {
		var result = {};
		$Franca_Matrix4.createTranslation$3(vector.x, vector.y, vector.z, result);
		return result.$;
	};
	$Franca_Matrix4.createOrthographic$1 = function(width, height, zNear, zFar, result) {
		$Franca_Matrix4.createOrthographicOffCenter$1(-width / 2, width / 2, -height / 2, height / 2, zNear, zFar, result);
	};
	$Franca_Matrix4.createOrthographic = function(width, height, zNear, zFar) {
		var result = {};
		$Franca_Matrix4.createOrthographicOffCenter$1(-width / 2, width / 2, -height / 2, height / 2, zNear, zFar, result);
		return result.$;
	};
	$Franca_Matrix4.createOrthographicOffCenter$1 = function(left, right, bottom, top, zNear, zFar, result) {
		//result = new Matrix4();
		var invRL = 1 / (right - left);
		var invTB = 1 / (top - bottom);
		var invFN = 1 / (zFar - zNear);
		//result.M11 = 2 * invRL;
		//result.M22 = 2 * invTB;
		//result.M33 = -2 * invFN;
		//
		//result.M41 = -(right + left) * invRL;
		//result.M42 = -(top + bottom) * invTB;
		//result.M43 = -(zFar + zNear) * invFN;
		//result.M44 = 1;
		var m11 = 2 * invRL;
		var m22 = 2 * invTB;
		var m33 = -2 * invFN;
		var m41 = -(right + left) * invRL;
		var m42 = -(top + bottom) * invTB;
		var m43 = -(zFar + zNear) * invFN;
		var m44 = 1;
		result.$ = new $Franca_Matrix4.$ctor3(m11, 0, 0, 0, 0, m22, 0, 0, 0, 0, m33, 0, m41, m42, m43, m44);
	};
	$Franca_Matrix4.createOrthographicOffCenter = function(left, right, bottom, top, zNear, zFar) {
		var result = {};
		$Franca_Matrix4.createOrthographicOffCenter$1(left, right, bottom, top, zNear, zFar, result);
		return result.$;
	};
	$Franca_Matrix4.createPerspectiveFieldOfView$1 = function(fovy, aspect, zNear, zFar, result) {
		if (fovy <= 0 || fovy > Math.PI) {
			throw new ss.ArgumentOutOfRangeException('fovy');
		}
		if (aspect <= 0) {
			throw new ss.ArgumentOutOfRangeException('aspect');
		}
		if (zNear <= 0) {
			throw new ss.ArgumentOutOfRangeException('zNear');
		}
		if (zFar <= 0) {
			throw new ss.ArgumentOutOfRangeException('zFar');
		}
		if (zNear >= zFar) {
			throw new ss.ArgumentOutOfRangeException('zNear');
		}
		var yMax = zNear * Math.tan(0.5 * fovy);
		var yMin = -yMax;
		var xMin = yMin * aspect;
		var xMax = yMax * aspect;
		$Franca_Matrix4.createPerspectiveOffCenter$1(xMin, xMax, yMin, yMax, zNear, zFar, result);
	};
	$Franca_Matrix4.createPerspectiveFieldOfView = function(fovy, aspect, zNear, zFar) {
		var result = {};
		$Franca_Matrix4.createPerspectiveFieldOfView$1(fovy, aspect, zNear, zFar, result);
		return result.$;
	};
	$Franca_Matrix4.createPerspectiveOffCenter$1 = function(left, right, bottom, top, zNear, zFar, result) {
		if (zNear <= 0) {
			throw new ss.ArgumentOutOfRangeException('zNear');
		}
		if (zFar <= 0) {
			throw new ss.ArgumentOutOfRangeException('zFar');
		}
		if (zNear >= zFar) {
			throw new ss.ArgumentOutOfRangeException('zNear');
		}
		var x = 2 * zNear / (right - left);
		var y = 2 * zNear / (top - bottom);
		var a = (right + left) / (right - left);
		var b = (top + bottom) / (top - bottom);
		var c = -(zFar + zNear) / (zFar - zNear);
		var d = -(2 * zFar * zNear) / (zFar - zNear);
		result.$ = new $Franca_Matrix4.$ctor3(x, 0, 0, 0, 0, y, 0, 0, a, b, c, -1, 0, 0, d, 0);
	};
	$Franca_Matrix4.createPerspectiveOffCenter = function(left, right, bottom, top, zNear, zFar) {
		var result = {};
		$Franca_Matrix4.createPerspectiveOffCenter$1(left, right, bottom, top, zNear, zFar, result);
		return result.$;
	};
	$Franca_Matrix4.scale$1 = function(scale) {
		return $Franca_Matrix4.scale$2(scale, scale, scale);
	};
	$Franca_Matrix4.scale = function(scale) {
		return $Franca_Matrix4.scale$2(scale.x, scale.y, scale.z);
	};
	$Franca_Matrix4.scale$2 = function(x, y, z) {
		//Matrix4 result;
		//result.Row0 = Vector4.UnitX * x;
		//result.Row1 = Vector4.UnitY * y;
		//result.Row2 = Vector4.UnitZ * z;
		//result.Row3 = Vector4.UnitW;
		//return result
		return new $Franca_Matrix4.$ctor2($Franca_Vector4.op_Multiply$1($Franca_Vector4.unitX, x), $Franca_Vector4.op_Multiply$1($Franca_Vector4.unitY, y), $Franca_Vector4.op_Multiply$1($Franca_Vector4.unitZ, z), $Franca_Vector4.unitW);
	};
	$Franca_Matrix4.createRotationX = function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		//Matrix4 result;
		//result.Row0 = Vector4.UnitX;
		//result.Row1 = new Vector4(0.0f, cos, sin, 0.0f);
		//result.Row2 = new Vector4(0.0f, -sin, cos, 0.0f);
		//result.Row3 = Vector4.UnitW;
		//return result;
		return new $Franca_Matrix4.$ctor2($Franca_Vector4.unitX, new $Franca_Vector4.$ctor5(0, cos, sin, 0), new $Franca_Vector4.$ctor5(0, -sin, cos, 0), $Franca_Vector4.unitW);
	};
	$Franca_Matrix4.createRotationY = function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		//Matrix4 result;
		//result.Row0 = new Vector4(cos, 0.0f, -sin, 0.0f);
		//result.Row1 = Vector4.UnitY;
		//result.Row2 = new Vector4(sin, 0.0f, cos, 0.0f);
		//result.Row3 = Vector4.UnitW;
		//return result;
		return new $Franca_Matrix4.$ctor2(new $Franca_Vector4.$ctor5(cos, 0, -sin, 0), $Franca_Vector4.unitY, new $Franca_Vector4.$ctor5(sin, 0, cos, 0), $Franca_Vector4.unitW);
	};
	$Franca_Matrix4.createRotationZ = function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		//Matrix4 result;
		//result.Row0 = new Vector4(cos, sin, 0.0f, 0.0f);
		//result.Row1 = new Vector4(-sin, cos, 0.0f, 0.0f);
		//result.Row2 = Vector4.UnitZ;
		//result.Row3 = Vector4.UnitW;
		//return result;
		return new $Franca_Matrix4.$ctor2(new $Franca_Vector4.$ctor5(cos, sin, 0, 0), new $Franca_Vector4.$ctor5(-sin, cos, 0, 0), $Franca_Vector4.unitZ, $Franca_Vector4.unitW);
	};
	$Franca_Matrix4.rotate = function(q) {
		throw new ss.NotImplementedException("Someone didn't read the obsolete warning");
		//Vector3 axis;
		//double angle;
		//q.ToAxisAngle(out axis, out angle);
		//return CreateFromAxisAngle(axis, angle);
	};
	$Franca_Matrix4.lookAt = function(eye, target, up) {
		var z = $Franca_Vector3.normalize($Franca_Vector3.op_Subtraction(eye, target));
		var x = $Franca_Vector3.normalize($Franca_Vector3.cross(up, z));
		var y = $Franca_Vector3.normalize($Franca_Vector3.cross(z, x));
		var rot = new $Franca_Matrix4.$ctor2(new $Franca_Vector4.$ctor5(x.x, y.x, z.x, 0), new $Franca_Vector4.$ctor5(x.y, y.y, z.y, 0), new $Franca_Vector4.$ctor5(x.z, y.z, z.z, 0), $Franca_Vector4.unitW);
		var trans = $Franca_Matrix4.createTranslation($Franca_Vector3.op_UnaryNegation(eye));
		return $Franca_Matrix4.op_Multiply(trans, rot);
	};
	$Franca_Matrix4.lookAt$1 = function(eyeX, eyeY, eyeZ, targetX, targetY, targetZ, upX, upY, upZ) {
		return $Franca_Matrix4.lookAt(new $Franca_Vector3.$ctor4(eyeX, eyeY, eyeZ), new $Franca_Vector3.$ctor4(targetX, targetY, targetZ), new $Franca_Vector3.$ctor4(upX, upY, upZ));
	};
	$Franca_Matrix4.frustum = function(left, right, bottom, top, near, far) {
		var invRL = 1 / (right - left);
		var invTB = 1 / (top - bottom);
		var invFN = 1 / (far - near);
		return new $Franca_Matrix4.$ctor2(new $Franca_Vector4.$ctor5(2 * near * invRL, 0, 0, 0), new $Franca_Vector4.$ctor5(0, 2 * near * invTB, 0, 0), new $Franca_Vector4.$ctor5((right + left) * invRL, (top + bottom) * invTB, -(far + near) * invFN, -1), new $Franca_Vector4.$ctor5(0, 0, -2 * far * near * invFN, 0));
	};
	$Franca_Matrix4.mult = function(left, right) {
		left = { $: left };
		right = { $: right };
		var result = {};
		$Franca_Matrix4.mult$1(left, right, result);
		return result.$;
	};
	$Franca_Matrix4.mult$1 = function(left, right, result) {
		result.$ = new $Franca_Matrix4.$ctor3(left.$.row0.x * right.$.row0.x + left.$.row0.y * right.$.row1.x + left.$.row0.z * right.$.row2.x + left.$.row0.w * right.$.row3.x, left.$.row0.x * right.$.row0.y + left.$.row0.y * right.$.row1.y + left.$.row0.z * right.$.row2.y + left.$.row0.w * right.$.row3.y, left.$.row0.x * right.$.row0.z + left.$.row0.y * right.$.row1.z + left.$.row0.z * right.$.row2.z + left.$.row0.w * right.$.row3.z, left.$.row0.x * right.$.row0.w + left.$.row0.y * right.$.row1.w + left.$.row0.z * right.$.row2.w + left.$.row0.w * right.$.row3.w, left.$.row1.x * right.$.row0.x + left.$.row1.y * right.$.row1.x + left.$.row1.z * right.$.row2.x + left.$.row1.w * right.$.row3.x, left.$.row1.x * right.$.row0.y + left.$.row1.y * right.$.row1.y + left.$.row1.z * right.$.row2.y + left.$.row1.w * right.$.row3.y, left.$.row1.x * right.$.row0.z + left.$.row1.y * right.$.row1.z + left.$.row1.z * right.$.row2.z + left.$.row1.w * right.$.row3.z, left.$.row1.x * right.$.row0.w + left.$.row1.y * right.$.row1.w + left.$.row1.z * right.$.row2.w + left.$.row1.w * right.$.row3.w, left.$.row2.x * right.$.row0.x + left.$.row2.y * right.$.row1.x + left.$.row2.z * right.$.row2.x + left.$.row2.w * right.$.row3.x, left.$.row2.x * right.$.row0.y + left.$.row2.y * right.$.row1.y + left.$.row2.z * right.$.row2.y + left.$.row2.w * right.$.row3.y, left.$.row2.x * right.$.row0.z + left.$.row2.y * right.$.row1.z + left.$.row2.z * right.$.row2.z + left.$.row2.w * right.$.row3.z, left.$.row2.x * right.$.row0.w + left.$.row2.y * right.$.row1.w + left.$.row2.z * right.$.row2.w + left.$.row2.w * right.$.row3.w, left.$.row3.x * right.$.row0.x + left.$.row3.y * right.$.row1.x + left.$.row3.z * right.$.row2.x + left.$.row3.w * right.$.row3.x, left.$.row3.x * right.$.row0.y + left.$.row3.y * right.$.row1.y + left.$.row3.z * right.$.row2.y + left.$.row3.w * right.$.row3.y, left.$.row3.x * right.$.row0.z + left.$.row3.y * right.$.row1.z + left.$.row3.z * right.$.row2.z + left.$.row3.w * right.$.row3.z, left.$.row3.x * right.$.row0.w + left.$.row3.y * right.$.row1.w + left.$.row3.z * right.$.row2.w + left.$.row3.w * right.$.row3.w);
	};
	$Franca_Matrix4.invert = function(mat) {
		var colIdx = [0, 0, 0, 0];
		var rowIdx = [0, 0, 0, 0];
		var pivotIdx = [-1, -1, -1, -1];
		// convert the matrix to an array for easy looping
		var $t1 = ss.multidimArray(0, 4, 4);
		ss.arraySet($t1, 0, 0, mat.row0.x);
		ss.arraySet($t1, 0, 1, mat.row0.y);
		ss.arraySet($t1, 0, 2, mat.row0.z);
		ss.arraySet($t1, 0, 3, mat.row0.w);
		ss.arraySet($t1, 1, 0, mat.row1.x);
		ss.arraySet($t1, 1, 1, mat.row1.y);
		ss.arraySet($t1, 1, 2, mat.row1.z);
		ss.arraySet($t1, 1, 3, mat.row1.w);
		ss.arraySet($t1, 2, 0, mat.row2.x);
		ss.arraySet($t1, 2, 1, mat.row2.y);
		ss.arraySet($t1, 2, 2, mat.row2.z);
		ss.arraySet($t1, 2, 3, mat.row2.w);
		ss.arraySet($t1, 3, 0, mat.row3.x);
		ss.arraySet($t1, 3, 1, mat.row3.y);
		ss.arraySet($t1, 3, 2, mat.row3.z);
		ss.arraySet($t1, 3, 3, mat.row3.w);
		var inverse = $t1;
		var icol = 0;
		var irow = 0;
		for (var i = 0; i < 4; i++) {
			// Find the largest pivot value
			var maxPivot = 0;
			for (var j = 0; j < 4; j++) {
				if (pivotIdx[j] !== 0) {
					for (var k = 0; k < 4; ++k) {
						if (pivotIdx[k] === -1) {
							var absVal = Math.abs(ss.arrayGet(inverse, j, k));
							if (absVal > maxPivot) {
								maxPivot = absVal;
								irow = j;
								icol = k;
							}
						}
						else if (pivotIdx[k] > 0) {
							return mat;
						}
					}
				}
			}
			++pivotIdx[icol];
			// Swap rows over so pivot is on diagonal
			if (irow !== icol) {
				for (var k1 = 0; k1 < 4; ++k1) {
					var f = ss.arrayGet(inverse, irow, k1);
					ss.arraySet(inverse, irow, k1, ss.arrayGet(inverse, icol, k1));
					ss.arraySet(inverse, icol, k1, f);
				}
			}
			rowIdx[i] = irow;
			colIdx[i] = icol;
			var pivot = ss.arrayGet(inverse, icol, icol);
			// check for singular matrix
			if (pivot === 0) {
				throw new ss.InvalidOperationException('Matrix is singular and cannot be inverted.');
				//return mat;
			}
			// Scale row so it has a unit diagonal
			var oneOverPivot = 1 / pivot;
			ss.arraySet(inverse, icol, icol, 1);
			for (var k2 = 0; k2 < 4; ++k2) {
				ss.arraySet(inverse, icol, k2, ss.arrayGet(inverse, icol, k2) * oneOverPivot);
			}
			// Do elimination of non-diagonal elements
			for (var j1 = 0; j1 < 4; ++j1) {
				// check this isn't on the diagonal
				if (icol !== j1) {
					var f1 = ss.arrayGet(inverse, j1, icol);
					ss.arraySet(inverse, j1, icol, 0);
					for (var k3 = 0; k3 < 4; ++k3) {
						ss.arraySet(inverse, j1, k3, ss.arrayGet(inverse, j1, k3) - ss.arrayGet(inverse, icol, k3) * f1);
					}
				}
			}
		}
		for (var j2 = 3; j2 >= 0; --j2) {
			var ir = rowIdx[j2];
			var ic = colIdx[j2];
			for (var k4 = 0; k4 < 4; ++k4) {
				var f2 = ss.arrayGet(inverse, k4, ir);
				ss.arraySet(inverse, k4, ir, ss.arrayGet(inverse, k4, ic));
				ss.arraySet(inverse, k4, ic, f2);
			}
		}
		return new $Franca_Matrix4.$ctor2(new $Franca_Vector4.$ctor5(ss.arrayGet(inverse, 0, 0), ss.arrayGet(inverse, 0, 1), ss.arrayGet(inverse, 0, 2), ss.arrayGet(inverse, 0, 3)), new $Franca_Vector4.$ctor5(ss.arrayGet(inverse, 1, 0), ss.arrayGet(inverse, 1, 1), ss.arrayGet(inverse, 1, 2), ss.arrayGet(inverse, 1, 3)), new $Franca_Vector4.$ctor5(ss.arrayGet(inverse, 2, 0), ss.arrayGet(inverse, 2, 1), ss.arrayGet(inverse, 2, 2), ss.arrayGet(inverse, 2, 3)), new $Franca_Vector4.$ctor5(ss.arrayGet(inverse, 3, 0), ss.arrayGet(inverse, 3, 1), ss.arrayGet(inverse, 3, 2), ss.arrayGet(inverse, 3, 3)));
	};
	$Franca_Matrix4.transpose = function(mat) {
		return new $Franca_Matrix4.$ctor2(mat.get_column0(), mat.get_column1(), mat.get_column2(), mat.get_column3());
	};
	$Franca_Matrix4.transpose$1 = function(mat, result) {
		result.$ = new $Franca_Matrix4.$ctor2(mat.$.get_column0(), mat.$.get_column1(), mat.$.get_column2(), mat.$.get_column3());
	};
	$Franca_Matrix4.op_Multiply = function(left, right) {
		return $Franca_Matrix4.mult(left, right);
	};
	$Franca_Matrix4.op_Equality = function(left, right) {
		return left.equalsT(right);
	};
	$Franca_Matrix4.op_Inequality = function(left, right) {
		return !left.equalsT(right);
	};
	$Franca_Matrix4.op_Multiply$1 = function(left, right) {
		return new $Franca_Vector4.$ctor5($Franca_Vector4.dot(left.row0, right), $Franca_Vector4.dot(left.row1, right), $Franca_Vector4.dot(left.row2, right), $Franca_Vector4.dot(left.row3, right));
	};
	global.Franca.Matrix4 = $Franca_Matrix4;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.NumberExtensions
	var $Franca_NumberExtensions = function() {
	};
	$Franca_NumberExtensions.__typeName = 'Franca.NumberExtensions';
	$Franca_NumberExtensions.toString$2 = function(v, periods, decimals) {
		if (periods) {
			return v.toLocaleString('en-US', { minimumFractionDigits: decimals, maximumFractionDigits: decimals });
		}
		else {
			return v.toFixed(decimals);
		}
	};
	$Franca_NumberExtensions.toString$7 = function(v, periods, decimals) {
		return $Franca_NumberExtensions.toString$2(v, periods, decimals);
	};
	$Franca_NumberExtensions.toString = function(v, periods, decimals) {
		return $Franca_NumberExtensions.toString$2($Franca_Fix53.cast_Double(v), periods, decimals);
	};
	$Franca_NumberExtensions.toString$1 = function(v, periods, decimals) {
		return $Franca_NumberExtensions.toString$2(v, periods, decimals);
	};
	$Franca_NumberExtensions.toString$6 = function(v, periods, decimals) {
		return $Franca_NumberExtensions.toString$2(v, periods, decimals);
	};
	$Franca_NumberExtensions.toString$3 = function(v, periods, decimals) {
		return $Franca_NumberExtensions.toString$2(v, periods, decimals);
	};
	$Franca_NumberExtensions.toString$8 = function(v, periods, decimals) {
		return $Franca_NumberExtensions.toString$2(v, periods, decimals);
	};
	$Franca_NumberExtensions.toString$4 = function(v, periods, decimals) {
		return $Franca_NumberExtensions.toString$2(v, periods, decimals);
	};
	$Franca_NumberExtensions.toString$9 = function(v, periods, decimals) {
		return $Franca_NumberExtensions.toString$2(v, periods, decimals);
	};
	$Franca_NumberExtensions.toString$5 = function(v, periods, decimals) {
		return $Franca_NumberExtensions.toString$2(v, periods, decimals);
	};
	$Franca_NumberExtensions.toString$a = function(v, periods, decimals) {
		return $Franca_NumberExtensions.toString$2(v, periods, decimals);
	};
	global.Franca.NumberExtensions = $Franca_NumberExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ParsableAttribute
	var $Franca_ParsableAttribute = function() {
	};
	$Franca_ParsableAttribute.__typeName = 'Franca.ParsableAttribute';
	global.Franca.ParsableAttribute = $Franca_ParsableAttribute;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Platform
	var $Franca_Platform = function() {
	};
	$Franca_Platform.__typeName = 'Franca.Platform';
	$Franca_Platform.get_$provider = function() {
		if (ss.isValue($Franca_Platform.$_provider)) {
			return $Franca_Platform.$_provider;
		}
		$Franca_Platform.init();
		return $Franca_Platform.$_provider;
	};
	$Franca_Platform.init = function() {
		if ($Franca_Platform.$initialized) {
			return;
		}
		$Franca_Platform.$stopwatch = new ss.Stopwatch();
		$Franca_Platform.$stopwatch.start();
		$Franca_Platform.$_provider = new $Franca_$JSPlatform();
		$Franca_Platform.$pathSeparator = $Franca_Platform.get_$provider().get_$pathSeparator();
		$Franca_Platform.$initialized = true;
	};
	$Franca_Platform.get_time = function() {
		return $Franca_Platform.$stopwatch.timeSpan();
	};
	$Franca_Platform.removeExtension = function(path) {
		var ext = $Franca_Platform.getExtension(path);
		if (ss.isNullOrUndefined(ext) || ext.length === 0) {
			return path;
		}
		return path.substr(0, path.length - (ext.length + 1));
	};
	$Franca_Platform.getFileNameWithoutExtension = function(path) {
		var filename = $Franca_Platform.getFileName(path);
		var tokens = Enumerable.from(filename.split(String.fromCharCode(46))).toArray();
		var extLength = 0;
		if (tokens.length > 1) {
			extLength = tokens[tokens.length - 1].length + 1;
		}
		return filename.substr(0, filename.length - extLength);
	};
	$Franca_Platform.getFileName = function(path) {
		if (ss.endsWithString(path, $Franca_Platform.$pathSeparator)) {
			return '';
		}
		var tokens = path.split(String.fromCharCode($Franca_Platform.$pathSeparator.charCodeAt(0)));
		return tokens[tokens.length - 1];
	};
	$Franca_Platform.getDirectory = function(path) {
		var fileName = $Franca_Platform.getFileName(path);
		if (!$System_StringExtensions.isNullOrEmpty(fileName, true)) {
			return path.substr(0, path.length - fileName.length);
		}
		return path;
	};
	$Franca_Platform.get_$combinePathsBuilder = function() {
		return $Franca_Platform.$_combinePathsBuilder || ($Franca_Platform.$_combinePathsBuilder = new ss.StringBuilder());
	};
	$Franca_Platform.combinePaths$1 = function(paths) {
		var str = $Franca_Platform.get_$combinePathsBuilder();
		try {
			for (var i = 0; i < paths.length; i++) {
				var p = paths[i];
				if (ss.isNullOrUndefined(p) || p.length === 0) {
					continue;
				}
				if (i < paths.length - 1) {
					if (ss.endsWithString(p, $Franca_Platform.get_pathSeparator())) {
						str.append(p);
					}
					else {
						str.append(p);
						str.append($Franca_Platform.get_pathSeparator());
					}
				}
				else {
					str.append(p);
				}
			}
			return str.toString();
		}
		finally {
			str.clear();
		}
	};
	$Franca_Platform.combinePaths = function(path) {
		return ss.coalesce(path, '');
	};
	$Franca_Platform.combinePaths$2 = function(path0, path1) {
		var str = $Franca_Platform.get_$combinePathsBuilder();
		try {
			if (ss.isValue(path0) && path0.length > 0) {
				str.append(path0);
				if (!ss.endsWithString(path0, $Franca_Platform.get_pathSeparator())) {
					str.append($Franca_Platform.get_pathSeparator());
				}
			}
			str.append(path1);
			return str.toString();
		}
		finally {
			str.clear();
		}
	};
	$Franca_Platform.combinePaths$3 = function(path0, path1, path2) {
		var str = $Franca_Platform.get_$combinePathsBuilder();
		try {
			if (ss.isValue(path0) && path0.length > 0) {
				str.append(path0);
				if (!ss.endsWithString(path0, $Franca_Platform.get_pathSeparator())) {
					str.append($Franca_Platform.get_pathSeparator());
				}
			}
			if (ss.isValue(path1) && path1.length > 0) {
				str.append(path1);
				if (!ss.endsWithString(path1, $Franca_Platform.get_pathSeparator())) {
					str.append($Franca_Platform.get_pathSeparator());
				}
			}
			str.append(path2);
			return str.toString();
		}
		finally {
			str.clear();
		}
	};
	$Franca_Platform.combinePaths$4 = function(path0, path1, path2, path3) {
		var str = $Franca_Platform.get_$combinePathsBuilder();
		try {
			if (ss.isValue(path0) && path0.length > 0) {
				str.append(path0);
				if (!ss.endsWithString(path0, $Franca_Platform.get_pathSeparator())) {
					str.append($Franca_Platform.get_pathSeparator());
				}
			}
			if (ss.isValue(path1) && path1.length > 0) {
				str.append(path1);
				if (!ss.endsWithString(path1, $Franca_Platform.get_pathSeparator())) {
					str.append($Franca_Platform.get_pathSeparator());
				}
			}
			if (ss.isValue(path2) && path2.length > 0) {
				str.append(path2);
				if (!ss.endsWithString(path2, $Franca_Platform.get_pathSeparator())) {
					str.append($Franca_Platform.get_pathSeparator());
				}
			}
			str.append(path3);
			return str.toString();
		}
		finally {
			str.clear();
		}
	};
	$Franca_Platform.getPath = function(path) {
		var filename = $Franca_Platform.getFileName(path);
		return path.substr(0, Math.max(0, path.length - filename.length - 1));
	};
	$Franca_Platform.getExtension = function(path) {
		var filename = $Franca_Platform.getFileName(path);
		var tokens = Enumerable.from(filename.split(String.fromCharCode(46))).toArray();
		if (tokens.length <= 1) {
			return '';
		}
		return tokens[tokens.length - 1];
	};
	$Franca_Platform.makeNonRelativePath = function(root, path, sep) {
		if (ss.isNullOrUndefined(sep)) {
			sep = $Franca_Platform.get_pathSeparator();
		}
		root = ss.coalesce(root, '');
		var stack = Enumerable.from(ss.replaceAllString(ss.replaceAllString(root, '/', sep), '\\', sep).split(sep)).toArray();
		var parts = Enumerable.from(ss.replaceAllString(ss.replaceAllString(path, '/', sep), '\\', sep).split(sep)).toArray();
		root = $Franca_Platform.normalizePath(root, sep);
		var protocol;
		if (ss.startsWithString(root, sep)) {
			// Linux, Mac OS X
			protocol = sep;
		}
		else {
			// Windows
			protocol = '';
			if (stack.length > 0 && ss.endsWithString(stack[0], ':')) {
				while (stack.length > 0 && (ss.endsWithString(stack[0], ':') || stack[0] === '')) {
					protocol += stack[0] + sep;
					ss.removeAt(stack, 0);
				}
			}
		}
		for (var i = stack.length - 1; i >= 0; i--) {
			if (stack[i] === '') {
				ss.removeAt(stack, i);
			}
		}
		for (var i1 = parts.length - 1; i1 >= 0; i1--) {
			if (parts[i1] === '') {
				ss.removeAt(parts, i1);
			}
		}
		// (omit if "root" is the current folder without trailing slash)
		for (var i2 = 0; i2 < parts.length; i2++) {
			if (parts[i2] === '.') {
				continue;
			}
			if (parts[i2] === '..') {
				if (stack.length === 0) {
					throw new ss.InvalidOperationException("Cannot make absolute path from root '" + root + "' and path '" + path + "', resulting path extends below root");
				}
				ss.removeAt(stack, stack.length - 1);
			}
			else {
				stack.push(parts[i2]);
			}
		}
		return protocol + ss.arrayFromEnumerable(stack).join(sep);
	};
	$Franca_Platform.get_pathSeparator = function() {
		return $Franca_Platform.$pathSeparator;
	};
	$Franca_Platform.get_type = function() {
		return $Franca_Platform.$type;
	};
	$Franca_Platform.$getPlatformType = function() {
		return $Franca_Platform.get_$provider().$getPlatformType();
	};
	$Franca_Platform.get_OS = function() {
		return $Franca_Platform.$os;
	};
	$Franca_Platform.normalizePath = function(path, sep) {
		var $t1 = sep;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = $Franca_Platform.$pathSeparator;
		}
		sep = $t1;
		if (sep === '\\') {
			return ss.replaceAllString(path, '/', sep);
		}
		else if (sep === '/') {
			return ss.replaceAllString(path, '\\', sep);
		}
		else {
			return ss.replaceAllString(ss.replaceAllString(path, '\\', sep), '/', sep);
		}
	};
	$Franca_Platform.openUrl = function(url, throwOnError) {
		try {
			return $Franca_Platform.get_$provider().$openUrl(url, throwOnError);
		}
		catch ($t1) {
			if (throwOnError) {
				throw $t1;
			}
			return false;
		}
	};
	$Franca_Platform.isPathRooted = function(path) {
		return $Franca_Platform.get_$provider().$isPathRooted(path);
	};
	$Franca_Platform.get_appContentPath = function() {
		return $Franca_Platform.get_$provider().$getAppContentPath();
	};
	$Franca_Platform.getFullPath = function(path) {
		return $Franca_Platform.get_$provider().$getFullPath(path);
	};
	global.Franca.Platform = $Franca_Platform;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.PlatformType
	var $Franca_PlatformType = function() {
	};
	$Franca_PlatformType.__typeName = 'Franca.PlatformType';
	global.Franca.PlatformType = $Franca_PlatformType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Point
	var $Franca_Point = function() {
		this.x = 0;
		this.y = 0;
	};
	$Franca_Point.__typeName = 'Franca.Point';
	$Franca_Point.$ctor2 = function(x, y) {
		this.x = 0;
		this.y = 0;
		this.x = x;
		this.y = y;
	};
	$Franca_Point.$ctor1 = function(reader) {
		this.x = 0;
		this.y = 0;
		this.x = 0;
		this.y = 0;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var _requiredField_x = false;
		var _requiredField_y = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'x': {
						{
							_requiredField_x = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.x = reader.readInt32(false);
						}
						break;
					}
					case 'y': {
						{
							_requiredField_y = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.y = reader.readInt32(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_x || !_requiredField_y) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
	};
	$Franca_Point.getDefaultValue = function() {
		return new $Franca_Point();
	};
	$Franca_Point.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_Point.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	$Franca_Point.op_Implicit = function(p) {
		return new $Franca_PointF.$ctor2(p.x, p.y);
	};
	global.Franca.Point = $Franca_Point;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.PointF
	var $Franca_PointF = function() {
		this.x = 0;
		this.y = 0;
	};
	$Franca_PointF.__typeName = 'Franca.PointF';
	$Franca_PointF.$ctor2 = function(x, y) {
		this.x = 0;
		this.y = 0;
		this.x = x;
		this.y = y;
	};
	$Franca_PointF.$ctor1 = function(reader) {
		this.x = 0;
		this.y = 0;
		this.x = 0;
		this.y = 0;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var _requiredField_x = false;
		var _requiredField_y = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'x': {
						{
							_requiredField_x = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.x = reader.readDouble(false);
						}
						break;
					}
					case 'y': {
						{
							_requiredField_y = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.y = reader.readDouble(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_x || !_requiredField_y) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
	};
	$Franca_PointF.getDefaultValue = function() {
		return new $Franca_PointF();
	};
	$Franca_PointF.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_PointF.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	$Franca_PointF.op_Explicit = function(p) {
		return new $Franca_Point.$ctor2(ss.Int32.trunc(p.x), ss.Int32.trunc(p.y));
	};
	global.Franca.PointF = $Franca_PointF;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.PreloaderInfoAttribute
	var $Franca_PreloaderInfoAttribute = function(contentFile) {
		this.$2$ContentFileField = null;
		this.set_contentFile(contentFile);
	};
	$Franca_PreloaderInfoAttribute.__typeName = 'Franca.PreloaderInfoAttribute';
	global.Franca.PreloaderInfoAttribute = $Franca_PreloaderInfoAttribute;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Quaternion
	var $Franca_Quaternion = function() {
		this.quat = null;
	};
	$Franca_Quaternion.__typeName = 'Franca.Quaternion';
	$Franca_Quaternion.$ctor3 = function(x, y, z, w) {
		this.quat = null;
	};
	$Franca_Quaternion.$ctor2 = function(v, w) {
		$Franca_Quaternion.$ctor3.call(this, v.x, v.y, v.z, w);
	};
	$Franca_Quaternion.$ctor1 = function(quat) {
		this.quat = null;
		this.quat = quat;
	};
	$Franca_Quaternion.inverse = function(quat1) {
		var res = new $Franca_Quaternion();
		quat.invert(res.quat, quat1.quat);
		return res;
	};
	$Franca_Quaternion.inverse$1 = function(quat1, result) {
		var res = new $Franca_Quaternion();
		quat.invert(res.quat, quat1.$.quat);
		result.$ = res;
	};
	$Franca_Quaternion.multiply = function(left, right) {
		var res = new $Franca_Quaternion();
		quat.multiply(res.quat, left.quat, right.quat);
		return res;
	};
	$Franca_Quaternion.multiply$1 = function(left, right, result) {
		var res = new $Franca_Quaternion();
		quat.multiply(res.quat, left.$.quat, right.$.quat);
		result.$ = res;
	};
	global.Franca.Quaternion = $Franca_Quaternion;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Rectangle
	var $Franca_Rectangle = function() {
		this.location = ss.getDefaultValue($Franca_Point);
		this.size = ss.getDefaultValue($Franca_Size);
	};
	$Franca_Rectangle.__typeName = 'Franca.Rectangle';
	$Franca_Rectangle.$ctor3 = function(x, y, width, height) {
		this.location = ss.getDefaultValue($Franca_Point);
		this.size = ss.getDefaultValue($Franca_Size);
		this.location = new $Franca_Point.$ctor2(x, y);
		this.size = new $Franca_Size.$ctor2(width, height);
	};
	$Franca_Rectangle.$ctor2 = function(location, size) {
		this.location = ss.getDefaultValue($Franca_Point);
		this.size = ss.getDefaultValue($Franca_Size);
		this.location = location;
		this.size = size;
	};
	$Franca_Rectangle.$ctor1 = function(reader) {
		this.location = ss.getDefaultValue($Franca_Point);
		this.size = ss.getDefaultValue($Franca_Size);
		var x = 0, y = 0, width = 0, height = 0;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var _requiredField_x = false;
		var _requiredField_y = false;
		var _requiredField_width = false;
		var _requiredField_height = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'x': {
						{
							_requiredField_x = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							x = reader.readInt32(false);
						}
						break;
					}
					case 'y': {
						{
							_requiredField_y = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							y = reader.readInt32(false);
						}
						break;
					}
					case 'width': {
						{
							_requiredField_width = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							width = reader.readInt32(false);
						}
						break;
					}
					case 'height': {
						{
							_requiredField_height = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							height = reader.readInt32(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_x || !_requiredField_y || !_requiredField_width || !_requiredField_height) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		this.location = new $Franca_Point.$ctor2(x, y);
		this.size = new $Franca_Size.$ctor2(width, height);
	};
	$Franca_Rectangle.getDefaultValue = function() {
		return new $Franca_Rectangle();
	};
	$Franca_Rectangle.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_Rectangle.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	$Franca_Rectangle.op_Implicit = function(r) {
		return new $Franca_RectangleF.$ctor2($Franca_Point.op_Implicit(r.location), $Franca_Size.op_Implicit(r.size));
	};
	$Franca_Rectangle.intersect = function(a, b) {
		if (!a.intersects(b)) {
			return $Franca_Rectangle.empty;
		}
		return $Franca_Rectangle.fromLTRB(Math.max(a.location.x, b.location.x), Math.max(a.location.y, b.location.y), Math.min(a.location.x + a.size.width, b.location.x + b.size.width), Math.min(a.location.y + a.size.height, b.location.y + b.size.height));
	};
	$Franca_Rectangle.intersect$1 = function(a, x, y, width, height) {
		if (!a.intersects$1(x, y, width, height)) {
			return $Franca_Rectangle.empty;
		}
		return $Franca_Rectangle.fromLTRB(Math.max(a.location.x, x), Math.max(a.location.y, y), Math.min(a.location.x + a.size.width, x + width), Math.min(a.location.y + a.size.height, y + height));
	};
	$Franca_Rectangle.fromLTRB = function(left, top, right, bottom) {
		return new $Franca_Rectangle.$ctor3(left, top, right - left, bottom - top);
	};
	global.Franca.Rectangle = $Franca_Rectangle;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.RectangleF
	var $Franca_RectangleF = function() {
		this.location = ss.getDefaultValue($Franca_PointF);
		this.size = ss.getDefaultValue($Franca_SizeF);
	};
	$Franca_RectangleF.__typeName = 'Franca.RectangleF';
	$Franca_RectangleF.$ctor3 = function(x, y, width, height) {
		this.location = ss.getDefaultValue($Franca_PointF);
		this.size = ss.getDefaultValue($Franca_SizeF);
		this.location = new $Franca_PointF.$ctor2(x, y);
		this.size = new $Franca_SizeF.$ctor2(width, height);
	};
	$Franca_RectangleF.$ctor2 = function(location, size) {
		this.location = ss.getDefaultValue($Franca_PointF);
		this.size = ss.getDefaultValue($Franca_SizeF);
		this.location = location;
		this.size = size;
	};
	$Franca_RectangleF.$ctor1 = function(reader) {
		this.location = ss.getDefaultValue($Franca_PointF);
		this.size = ss.getDefaultValue($Franca_SizeF);
		var x = 0, y = 0, width = 0, height = 0;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var _requiredField_x = false;
		var _requiredField_y = false;
		var _requiredField_width = false;
		var _requiredField_height = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'x': {
						{
							_requiredField_x = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							x = reader.readNumber(false);
						}
						break;
					}
					case 'y': {
						{
							_requiredField_y = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							y = reader.readNumber(false);
						}
						break;
					}
					case 'width': {
						{
							_requiredField_width = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							width = reader.readNumber(false);
						}
						break;
					}
					case 'height': {
						{
							_requiredField_height = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							height = reader.readNumber(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_x || !_requiredField_y || !_requiredField_width || !_requiredField_height) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		this.location = new $Franca_PointF.$ctor2(x, y);
		this.size = new $Franca_SizeF.$ctor2(width, height);
	};
	$Franca_RectangleF.getDefaultValue = function() {
		return new $Franca_RectangleF();
	};
	$Franca_RectangleF.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_RectangleF.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	$Franca_RectangleF.op_Explicit = function(r) {
		return new $Franca_Rectangle.$ctor2($Franca_PointF.op_Explicit(r.location), $Franca_SizeF.op_Explicit$4(r.size));
	};
	$Franca_RectangleF.intersect = function(a, b) {
		if (!a.intersects(b)) {
			return $Franca_RectangleF.empty;
		}
		return $Franca_RectangleF.fromLTRB(Math.max(a.location.x, b.location.x), Math.max(a.location.y, b.location.y), Math.min(a.location.x + a.size.width, b.location.x + b.size.width), Math.min(a.location.y + a.size.height, b.location.y + b.size.height));
	};
	$Franca_RectangleF.intersect$1 = function(a, x, y, width, height) {
		if (!a.intersects$1(x, y, width, height)) {
			return $Franca_RectangleF.empty;
		}
		return $Franca_RectangleF.fromLTRB(Math.max(a.location.x, x), Math.max(a.location.y, y), Math.min(a.location.x + a.size.width, x + width), Math.min(a.location.y + a.size.height, y + height));
	};
	$Franca_RectangleF.fromLTRB = function(left, top, right, bottom) {
		return new $Franca_RectangleF.$ctor3(left, top, right - left, bottom - top);
	};
	global.Franca.RectangleF = $Franca_RectangleF;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ReflectableDict
	var $Franca_ReflectableDict$2 = function(K, V) {
		var $type = function() {
			this.$dictionary = null;
			this.$dictionary = new (ss.makeGenericType(ss.Dictionary$2, [K, V]))();
		};
		$type.$ctor3 = function(capacity) {
			this.$dictionary = null;
			this.$dictionary = new (ss.makeGenericType(ss.Dictionary$2, [K, V]))();
		};
		$type.$ctor2 = function(comparer) {
			this.$dictionary = null;
			this.$dictionary = new (ss.makeGenericType(ss.Dictionary$2, [K, V]))({}, comparer);
		};
		$type.$ctor1 = function(dictionary) {
			this.$dictionary = null;
			dictionary = new (ss.makeGenericType(ss.Dictionary$2, [K, V]))(dictionary);
		};
		$type.$ctor5 = function(capacity, comparer) {
			this.$dictionary = null;
			this.$dictionary = new (ss.makeGenericType(ss.Dictionary$2, [K, V]))({}, comparer);
		};
		$type.$ctor4 = function(dictionary, comparer) {
			this.$dictionary = null;
			dictionary = new (ss.makeGenericType(ss.Dictionary$2, [K, V]))(dictionary, comparer);
		};
		ss.registerGenericClassInstance($type, $Franca_ReflectableDict$2, [K, V], {
			clear: function() {
				this.$dictionary.clear();
			},
			add: function(key, value) {
				this.$dictionary.add(key, value);
			},
			containsKey: function(key) {
				return this.$dictionary.containsKey(key);
			},
			get_count: function() {
				return this.$dictionary.get_count();
			},
			get_keys: function() {
				return this.$dictionary.get_keys();
			},
			remove: function(key) {
				return this.$dictionary.remove(key);
			},
			tryGetValue: function(key, value) {
				return this.$dictionary.tryGetValue(key, value);
			},
			get_values: function() {
				return this.$dictionary.get_values();
			},
			get_item: function(key) {
				return this.$dictionary.get_item(key);
			},
			set_item: function(key, value) {
				this.$dictionary.set_item(key, value);
			},
			getEnumerator: function() {
				return this.$dictionary.getEnumerator();
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IEnumerable, ss.IEnumerable, ss.IDictionary];
		});
		$type.$ctor3.prototype = $type.$ctor2.prototype = $type.$ctor1.prototype = $type.$ctor5.prototype = $type.$ctor4.prototype = $type.prototype;
		ss.setMetadata($type, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [ss.IDictionary], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [ss.IEqualityComparer], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [ss.Int32], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [ss.IDictionary, ss.IEqualityComparer], sname: '$ctor4' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.IEqualityComparer], sname: '$ctor5' }, { name: 'Add', type: 8, sname: 'add', returnType: Object, params: [K, V] }, { name: 'ContainsKey', type: 8, sname: 'containsKey', returnType: Boolean, params: [K] }, { name: 'Remove', type: 8, sname: 'remove', returnType: Boolean, params: [K] }, { name: 'Count', type: 16, returnType: ss.Int32, getter: { name: 'get_Count', type: 8, sname: 'get_count', returnType: ss.Int32, params: [] } }, { name: 'Item', type: 16, returnType: V, params: [K], getter: { name: 'get_Item', type: 8, sname: 'get_item', returnType: V, params: [K] }, setter: { name: 'set_Item', type: 8, sname: 'set_item', returnType: Object, params: [K, V] } }, { name: 'Keys', type: 16, returnType: ss.ICollection, getter: { name: 'get_Keys', type: 8, sname: 'get_keys', returnType: ss.ICollection, params: [] } }, { name: 'Values', type: 16, returnType: ss.ICollection, getter: { name: 'get_Values', type: 8, sname: 'get_values', returnType: ss.ICollection, params: [] } }, { name: 'dictionary', type: 4, returnType: ss.makeGenericType(ss.Dictionary$2, [K, V]), sname: '$dictionary' }] });
		return $type;
	};
	$Franca_ReflectableDict$2.__typeName = 'Franca.ReflectableDict$2';
	ss.initGenericClass($Franca_ReflectableDict$2, $asm, 2);
	global.Franca.ReflectableDict$2 = $Franca_ReflectableDict$2;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ReflectableList
	var $Franca_ReflectableList$1 = function(T) {
		var $type = function() {
			this.$list = null;
			this.$list = [];
		};
		$type.$ctor3 = function(capacity) {
			this.$list = null;
			this.$list = [];
		};
		$type.$ctor4 = function(items) {
			this.$list = null;
			this.$list = ss.arrayClone(items);
		};
		$type.$ctor1 = function(items) {
			this.$list = null;
			this.$list = ss.arrayFromEnumerable(items);
		};
		$type.$ctor2 = function(items) {
			this.$list = null;
			this.$list = ss.arrayClone(items);
		};
		$type.op_Explicit = function(list) {
			return list.$list;
		};
		$type.op_Explicit$1 = function(list) {
			var l = new $type();
			l.$list = list;
			return l;
		};
		ss.registerGenericClassInstance($type, $Franca_ReflectableList$1, [T], {
			indexOf: function(item) {
				return ss.indexOf(this.$list, item);
			},
			insert: function(index, item) {
				ss.insert(this.$list, index, item);
			},
			removeAt: function(index) {
				ss.removeAt(this.$list, index);
			},
			get_item: function(index) {
				return this.$list[index];
			},
			set_item: function(index, value) {
				this.$list[index] = value;
			},
			add: function(item) {
				this.$list.push(item);
			},
			clear: function() {
				ss.clear(this.$list);
			},
			contains: function(item) {
				return ss.contains(this.$list, item);
			},
			get_count: function() {
				return this.$list.length;
			},
			remove: function(item) {
				return ss.remove(this.$list, item);
			},
			getEnumerator: function() {
				return ss.getEnumerator(this.$list);
			},
			add$1: function(value) {
				if (ss.isInstanceOfType(value, T) || ss.isAssignableFrom(T, ss.getInstanceType(value))) {
					try {
						var index = this.$list.length;
						this.$list.push(ss.cast(value, T));
						return index;
					}
					catch ($t1) {
					}
				}
				return -1;
			},
			contains$1: function(value) {
				if (ss.isInstanceOfType(value, T) || ss.isAssignableFrom(T, ss.getInstanceType(value))) {
					try {
						return ss.contains(this.$list, ss.cast(value, T));
					}
					catch ($t1) {
					}
				}
				return false;
			},
			indexOf$1: function(value) {
				if (ss.isInstanceOfType(value, T) || ss.isAssignableFrom(T, ss.getInstanceType(value))) {
					try {
						return ss.indexOf(this.$list, ss.cast(value, T));
					}
					catch ($t1) {
					}
				}
				return -1;
			},
			insert$1: function(index, value) {
				if (ss.isInstanceOfType(value, T) || ss.isAssignableFrom(T, ss.getInstanceType(value))) {
					try {
						ss.insert(this.$list, index, ss.cast(value, T));
					}
					catch ($t1) {
					}
				}
			},
			get_isFixedSize: function() {
				return false;
			},
			get_isReadOnly: function() {
				return false;
			},
			remove$1: function(value) {
				if (ss.isInstanceOfType(value, T) || ss.isAssignableFrom(T, ss.getInstanceType(value))) {
					try {
						ss.remove(this.$list, ss.cast(value, T));
					}
					catch ($t1) {
					}
				}
			},
			get_isSynchronized: function() {
				return false;
			},
			get_syncRoot: function() {
				return this;
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IEnumerable, ss.IEnumerable, ss.ICollection, ss.IList];
		});
		$type.$ctor3.prototype = $type.$ctor4.prototype = $type.$ctor1.prototype = $type.$ctor2.prototype = $type.prototype;
		ss.setMetadata($type, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [ss.IEnumerable], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [Array], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [ss.Int32], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [Array], sname: '$ctor4' }, { name: 'Add', type: 8, sname: 'add', returnType: Object, params: [T] }, { name: 'Clear', type: 8, sname: 'clear', returnType: Object, params: [] }, { name: 'Contains', type: 8, sname: 'contains', returnType: Boolean, params: [T] }, { name: 'IndexOf', type: 8, sname: 'indexOf', returnType: ss.Int32, params: [T] }, { name: 'Insert', type: 8, sname: 'insert', returnType: Object, params: [ss.Int32, T] }, { name: 'Remove', type: 8, sname: 'remove', returnType: Boolean, params: [T] }, { name: 'RemoveAt', type: 8, sname: 'removeAt', returnType: Object, params: [ss.Int32] }, { name: 'Count', type: 16, returnType: ss.Int32, getter: { name: 'get_Count', type: 8, sname: 'get_count', returnType: ss.Int32, params: [] } }, { name: 'Item', type: 16, returnType: T, params: [ss.Int32], getter: { name: 'get_Item', type: 8, sname: 'get_item', returnType: T, params: [ss.Int32] }, setter: { name: 'set_Item', type: 8, sname: 'set_item', returnType: Object, params: [ss.Int32, T] } }] });
		return $type;
	};
	$Franca_ReflectableList$1.__typeName = 'Franca.ReflectableList$1';
	ss.initGenericClass($Franca_ReflectableList$1, $asm, 1);
	global.Franca.ReflectableList$1 = $Franca_ReflectableList$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ResourceString
	var $Franca_ResourceString = function() {
	};
	$Franca_ResourceString.__typeName = 'Franca.ResourceString';
	$Franca_ResourceString.get = function(name) {
		return $Franca_ResourceString.get$1(name, null);
	};
	$Franca_ResourceString.get$1 = function(name, args) {
		if (!ss.staticEquals($Franca_ResourceString.$withoutArgs, null) && !ss.staticEquals($Franca_ResourceString.$withArgs, null)) {
			try {
				if (ss.isNullOrUndefined(args) || args.length === 0) {
					return $Franca_ResourceString.$withoutArgs(name);
				}
				else {
					return $Franca_ResourceString.$withArgs(name, args);
				}
			}
			catch ($t1) {
			}
		}
		var message = {};
		if ($Franca_ResourceString.defaultMessages.tryGetValue(name, message)) {
			return message.$;
		}
		return name;
	};
	global.Franca.ResourceString = $Franca_ResourceString;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Resumable
	var $Franca_Resumable = function() {
	};
	$Franca_Resumable.__typeName = 'Franca.Resumable';
	global.Franca.Resumable = $Franca_Resumable;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Resumable
	var $Franca_Resumable$1 = function(T) {
		var $type = function(value) {
			this.$child = ss.getDefaultValue(T);
			this.$process = null;
			this.$paused = false;
			this.$done = false;
			this.$disposed = false;
			this.$2$OnFinishField = null;
			$Franca_Resumable.call(this);
			this.$child = value;
		};
		ss.registerGenericClassInstance($type, $Franca_Resumable$1, [T], {
			add_onFinish: function(value) {
				this.$2$OnFinishField = ss.delegateCombine(this.$2$OnFinishField, value);
			},
			remove_onFinish: function(value) {
				this.$2$OnFinishField = ss.delegateRemove(this.$2$OnFinishField, value);
			},
			run: function(del) {
				this.runUntil(new ss.TimeSpan(0), del);
			},
			runUntil: function(timeLimit, del) {
				this.$paused = false;
				var stopwatch = null;
				if (timeLimit.ticks > (new ss.TimeSpan(0)).ticks) {
					stopwatch = new ss.Stopwatch();
					stopwatch.start();
				}
				while (!this.$paused && this.tick() && (ss.isNullOrUndefined(stopwatch) || stopwatch.ticks() < timeLimit.ticks)) {
					if (!ss.staticEquals(del, null)) {
						del(this);
					}
				}
			},
			tick: function() {
				if (ss.isNullOrUndefined(this.$process)) {
					this.$getProcess();
				}
				var running = this.$process.moveNext();
				if (!running) {
					this.dispose();
					this.$done = true;
					var onFinish = this.$2$OnFinishField;
					if (!ss.staticEquals(onFinish, null)) {
						onFinish(this);
					}
				}
				return running;
			},
			pause: function() {
				this.$paused = true;
			},
			reset: function() {
				this.dispose();
				this.$done = false;
			},
			$getProcess: function() {
				this.$process = ss.getEnumerator(this.$child.start());
				return this.$process;
			},
			dispose: function() {
				this.dispose$1(true);
				$System_GC.suppressFinalize(this);
			},
			dispose$1: function(disposing) {
				if (this.$disposed) {
					return;
				}
				if (disposing) {
					// Free any other managed objects here.
					try {
						if (ss.isValue(this.$process)) {
							this.$process.dispose();
						}
					}
					catch ($t1) {
					}
				}
				// Free any unmanaged objects here.
				this.$disposed = true;
			},
			get_value: function() {
				return this.$child;
			},
			set_value: function(value) {
				this.$child = value;
			},
			get_done: function() {
				return this.$done;
			}
		}, function() {
			return $Franca_Resumable;
		}, function() {
			return [ss.IDisposable];
		});
		return $type;
	};
	$Franca_Resumable$1.__typeName = 'Franca.Resumable$1';
	ss.initGenericClass($Franca_Resumable$1, $asm, 1);
	global.Franca.Resumable$1 = $Franca_Resumable$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.RNG
	var $Franca_RNG = function() {
		$Franca_RNG.$ctor2.call(this, ss.Int32.trunc($Franca_Platform.get_time().ticks / 10000 % 214748 * 10000));
	};
	$Franca_RNG.__typeName = 'Franca.RNG';
	$Franca_RNG.$ctor2 = function(seed) {
		this.$seed = 0;
		this.$xor = null;
		ss.Random.call(this);
		this.$seed = seed;
		// parameterization passes the Diehard Battery of Tests of Randomness:
		// 1234567891, 1623606227, 1746532126, 1357923565
		this.$xor = $Franca_RNG.$makeXor(seed, 1623606227, 1746532126, 1357923565);
	};
	$Franca_RNG.$ctor3 = function(seed, x, y, z, w) {
		this.$seed = 0;
		this.$xor = null;
		ss.Random.call(this);
		this.$seed = seed;
		this.$xor = $Franca_RNG.$makeXor(x, y, z, w);
	};
	$Franca_RNG.$ctor1 = function(reader) {
		this.$seed = 0;
		this.$xor = null;
		ss.Random.call(this);
		var x = 0, y = 0, z = 0, w = 0;
		this.$seed = 0;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var _requiredField_seed = false;
		var _requiredField_x = false;
		var _requiredField_y = false;
		var _requiredField_z = false;
		var _requiredField_w = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'seed': {
						{
							_requiredField_seed = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.$seed = reader.readInt32(false);
						}
						break;
					}
					case 'x': {
						{
							_requiredField_x = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							x = reader.readInt32(false);
						}
						break;
					}
					case 'y': {
						{
							_requiredField_y = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							y = reader.readInt32(false);
						}
						break;
					}
					case 'z': {
						{
							_requiredField_z = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							z = reader.readInt32(false);
						}
						break;
					}
					case 'w': {
						{
							_requiredField_w = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							w = reader.readInt32(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_seed || !_requiredField_x || !_requiredField_y || !_requiredField_z || !_requiredField_w) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		this.$xor = $Franca_RNG.$makeXor(x, y, z, w);
	};
	$Franca_RNG.$makeXor = function(x, y, z, w) {
		return new Xorshift(x, y, z, w);
	};
	global.Franca.RNG = $Franca_RNG;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.RotationOrigin
	var $Franca_RotationOrigin = function() {
	};
	$Franca_RotationOrigin.__typeName = 'Franca.RotationOrigin';
	global.Franca.RotationOrigin = $Franca_RotationOrigin;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.RoundingStyle
	var $Franca_RoundingStyle = function() {
	};
	$Franca_RoundingStyle.__typeName = 'Franca.RoundingStyle';
	global.Franca.RoundingStyle = $Franca_RoundingStyle;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SeekException
	var $Franca_SeekException = function() {
		ss.Exception.call(this, 'An exception occurred while seeking.');
	};
	$Franca_SeekException.__typeName = 'Franca.SeekException';
	$Franca_SeekException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_SeekException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.SeekException = $Franca_SeekException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SeekOrigin
	var $Franca_SeekOrigin = function() {
	};
	$Franca_SeekOrigin.__typeName = 'Franca.SeekOrigin';
	global.Franca.SeekOrigin = $Franca_SeekOrigin;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ShuffleExtension
	var $Franca_ShuffleExtension = function() {
	};
	$Franca_ShuffleExtension.__typeName = 'Franca.ShuffleExtension';
	$Franca_ShuffleExtension.shuffle$2 = function(T) {
		return function(list, rng) {
			var n = ss.count(list);
			while (n > 1) {
				n--;
				var k = rng.nextMax(n + 1);
				var value = ss.getItem(list, k);
				ss.setItem(list, k, ss.getItem(list, n));
				ss.setItem(list, n, value);
			}
		};
	};
	$Franca_ShuffleExtension.shuffle$1 = function(T) {
		return function(list, seed) {
			$Franca_ShuffleExtension.shuffle$2(T).call(null, list, new $Franca_RNG.$ctor2(seed));
		};
	};
	$Franca_ShuffleExtension.shuffle = function(T) {
		return function(list) {
			$Franca_ShuffleExtension.shuffle$2(T).call(null, list, new $Franca_RNG());
		};
	};
	global.Franca.ShuffleExtension = $Franca_ShuffleExtension;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Size
	var $Franca_Size = function() {
		this.width = 0;
		this.height = 0;
	};
	$Franca_Size.__typeName = 'Franca.Size';
	$Franca_Size.$ctor2 = function(width, height) {
		this.width = 0;
		this.height = 0;
		this.width = width;
		this.height = height;
	};
	$Franca_Size.$ctor1 = function(reader) {
		this.width = 0;
		this.height = 0;
		this.width = 0;
		this.height = 0;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var _requiredField_width = false;
		var _requiredField_height = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'width': {
						{
							_requiredField_width = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.width = reader.readInt32(false);
						}
						break;
					}
					case 'height': {
						{
							_requiredField_height = true;
							if (!reader.isInteger()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.height = reader.readInt32(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_width || !_requiredField_height) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
	};
	$Franca_Size.getDefaultValue = function() {
		return new $Franca_Size();
	};
	$Franca_Size.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_Size.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	$Franca_Size.op_Implicit = function(p) {
		return new $Franca_SizeF.$ctor2(p.width, p.height);
	};
	$Franca_Size.op_Explicit = function(p) {
		return new $Franca_Size.$ctor2(p.x, p.y);
	};
	$Franca_Size.op_Explicit$1 = function(p) {
		return new $Franca_Size.$ctor2(ss.Int32.trunc(p.x), ss.Int32.trunc(p.y));
	};
	$Franca_Size.op_Explicit$2 = function(s) {
		return new $Franca_Point.$ctor2(s.width, s.height);
	};
	$Franca_Size.op_Explicit$3 = function(s) {
		return new $Franca_PointF.$ctor2(s.width, s.height);
	};
	global.Franca.Size = $Franca_Size;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SizeF
	var $Franca_SizeF = function() {
		this.width = 0;
		this.height = 0;
	};
	$Franca_SizeF.__typeName = 'Franca.SizeF';
	$Franca_SizeF.$ctor2 = function(width, height) {
		this.width = 0;
		this.height = 0;
		this.width = width;
		this.height = height;
	};
	$Franca_SizeF.$ctor1 = function(reader) {
		this.width = 0;
		this.height = 0;
		this.width = 0;
		this.height = 0;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var _requiredField_width = false;
		var _requiredField_height = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'width': {
						{
							_requiredField_width = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.width = reader.readDouble(false);
						}
						break;
					}
					case 'height': {
						{
							_requiredField_height = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.height = reader.readDouble(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_width || !_requiredField_height) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
	};
	$Franca_SizeF.getDefaultValue = function() {
		return new $Franca_SizeF();
	};
	$Franca_SizeF.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_SizeF.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	$Franca_SizeF.op_Explicit$4 = function(p) {
		return new $Franca_Size.$ctor2(ss.Int32.trunc(p.width), ss.Int32.trunc(p.height));
	};
	$Franca_SizeF.op_Explicit = function(p) {
		return new $Franca_SizeF.$ctor2(p.x, p.y);
	};
	$Franca_SizeF.op_Explicit$1 = function(p) {
		return new $Franca_SizeF.$ctor2(p.x, p.y);
	};
	$Franca_SizeF.op_Explicit$2 = function(s) {
		return new $Franca_Point.$ctor2(ss.Int32.trunc(s.width), ss.Int32.trunc(s.height));
	};
	$Franca_SizeF.op_Explicit$3 = function(s) {
		return new $Franca_PointF.$ctor2(s.width, s.height);
	};
	global.Franca.SizeF = $Franca_SizeF;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.StreamExtensions
	var $Franca_StreamExtensions = function() {
	};
	$Franca_StreamExtensions.__typeName = 'Franca.StreamExtensions';
	$Franca_StreamExtensions.writeBinaryData = function(stream, writeFunc) {
		var binStream = ss.safeCast(stream, $Franca_IBinaryStream);
		if (ss.isValue(binStream)) {
			writeFunc(binStream);
		}
		else {
			{
				var srcStream = new $Franca_BinaryStream();
				try {
					writeFunc(srcStream);
					var arr = srcStream.toArray();
					stream.write(arr, 0, arr.length);
				}
				finally {
					if (ss.isValue(srcStream)) {
						srcStream.dispose();
					}
				}
			}
		}
	};
	$Franca_StreamExtensions.toBinaryData = function(stream) {
		var binStream = ss.safeCast(stream, $Franca_IBinaryStream);
		var memStream = ss.safeCast(stream, $System_IO_MemoryStream);
		if (ss.isValue(binStream)) {
			// try to avoid a full copy operation by getting the buffer directly and
			// creating a BinaryData object from it without copying for best perf
			var buffer;
			try {
				buffer = binStream.getBuffer();
				if (buffer.get_length() !== binStream.get_sizeBytes()) {
					buffer = null;
				}
			}
			catch ($t1) {
				$t1 = ss.Exception.wrap($t1);
				if (ss.isInstanceOfType($t1, $System_UnauthorizedAccessException)) {
					// MemoryStream can throw this exception if it is created without
					// the publiclyVisible argument set to true.
					buffer = null;
				}
				else {
					throw $t1;
				}
			}
			if (ss.isValue(buffer)) {
				return buffer;
			}
			else {
				return binStream.toBinary();
			}
		}
		else if (ss.isValue(memStream)) {
			// try to avoid a full copy operation by getting the buffer directly and
			// creating a BinaryData object from it without copying for best perf
			// but only on .NET. JS shouldn't get here because on JS MemoryStream is
			// already an IBinaryStream.
			var buffer1;
			buffer1 = new $Franca_BinaryData.$ctor3(memStream.toArray());
			return buffer1;
		}
		else {
			return new $Franca_BinaryData.$ctor3($Franca_StreamExtensions.$readFully(stream));
		}
	};
	$Franca_StreamExtensions.$readFully = function(input) {
		var buffer = new Array(16384);
		{
			var ms = new $System_IO_MemoryStream();
			try {
				var read;
				while ((read = input.read(buffer, 0, buffer.length)) > 0) {
					ms.write(buffer, 0, read);
				}
				return ms.toArray();
			}
			finally {
				if (ss.isValue(ms)) {
					ms.dispose();
				}
			}
		}
	};
	global.Franca.StreamExtensions = $Franca_StreamExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.StringBuilderExtensions
	var $Franca_StringBuilderExtensions = function() {
	};
	$Franca_StringBuilderExtensions.__typeName = 'Franca.StringBuilderExtensions';
	$Franca_StringBuilderExtensions.appendHex = function(str, value) {
		var chars = $Franca_StringBuilderExtensions.$chr2;
		switch (value & 240) {
			default:
			case 0: {
				chars[0] = 48;
				break;
			}
			case 16: {
				chars[0] = 49;
				break;
			}
			case 32: {
				chars[0] = 50;
				break;
			}
			case 48: {
				chars[0] = 51;
				break;
			}
			case 64: {
				chars[0] = 52;
				break;
			}
			case 80: {
				chars[0] = 53;
				break;
			}
			case 96: {
				chars[0] = 54;
				break;
			}
			case 112: {
				chars[0] = 55;
				break;
			}
			case 128: {
				chars[0] = 56;
				break;
			}
			case 144: {
				chars[0] = 57;
				break;
			}
			case 160: {
				chars[0] = 65;
				break;
			}
			case 176: {
				chars[0] = 66;
				break;
			}
			case 192: {
				chars[0] = 67;
				break;
			}
			case 208: {
				chars[0] = 68;
				break;
			}
			case 224: {
				chars[0] = 69;
				break;
			}
			case 240: {
				chars[0] = 70;
				break;
			}
		}
		switch (value & 15) {
			default:
			case 0: {
				chars[1] = 48;
				break;
			}
			case 1: {
				chars[1] = 49;
				break;
			}
			case 2: {
				chars[1] = 50;
				break;
			}
			case 3: {
				chars[1] = 51;
				break;
			}
			case 4: {
				chars[1] = 52;
				break;
			}
			case 5: {
				chars[1] = 53;
				break;
			}
			case 6: {
				chars[1] = 54;
				break;
			}
			case 7: {
				chars[1] = 55;
				break;
			}
			case 8: {
				chars[1] = 56;
				break;
			}
			case 9: {
				chars[1] = 57;
				break;
			}
			case 10: {
				chars[1] = 65;
				break;
			}
			case 11: {
				chars[1] = 66;
				break;
			}
			case 12: {
				chars[1] = 67;
				break;
			}
			case 13: {
				chars[1] = 68;
				break;
			}
			case 14: {
				chars[1] = 69;
				break;
			}
			case 15: {
				chars[1] = 70;
				break;
			}
		}
		$Franca_StringBuilderExtensions.appendChars(str, chars);
	};
	$Franca_StringBuilderExtensions.$copyChunk = function(str, bin, offset, chars) {
		var len = chars.length;
		for (var j = 0; j < len; j += 2, offset++) {
			var value = bin.get_item(offset);
			switch (value & 240) {
				default:
				case 0: {
					chars[j] = 48;
					break;
				}
				case 16: {
					chars[j] = 49;
					break;
				}
				case 32: {
					chars[j] = 50;
					break;
				}
				case 48: {
					chars[j] = 51;
					break;
				}
				case 64: {
					chars[j] = 52;
					break;
				}
				case 80: {
					chars[j] = 53;
					break;
				}
				case 96: {
					chars[j] = 54;
					break;
				}
				case 112: {
					chars[j] = 55;
					break;
				}
				case 128: {
					chars[j] = 56;
					break;
				}
				case 144: {
					chars[j] = 57;
					break;
				}
				case 160: {
					chars[j] = 65;
					break;
				}
				case 176: {
					chars[j] = 66;
					break;
				}
				case 192: {
					chars[j] = 67;
					break;
				}
				case 208: {
					chars[j] = 68;
					break;
				}
				case 224: {
					chars[j] = 69;
					break;
				}
				case 240: {
					chars[j] = 70;
					break;
				}
			}
			switch (value & 15) {
				default:
				case 0: {
					chars[j + 1] = 48;
					break;
				}
				case 1: {
					chars[j + 1] = 49;
					break;
				}
				case 2: {
					chars[j + 1] = 50;
					break;
				}
				case 3: {
					chars[j + 1] = 51;
					break;
				}
				case 4: {
					chars[j + 1] = 52;
					break;
				}
				case 5: {
					chars[j + 1] = 53;
					break;
				}
				case 6: {
					chars[j + 1] = 54;
					break;
				}
				case 7: {
					chars[j + 1] = 55;
					break;
				}
				case 8: {
					chars[j + 1] = 56;
					break;
				}
				case 9: {
					chars[j + 1] = 57;
					break;
				}
				case 10: {
					chars[j + 1] = 65;
					break;
				}
				case 11: {
					chars[j + 1] = 66;
					break;
				}
				case 12: {
					chars[j + 1] = 67;
					break;
				}
				case 13: {
					chars[j + 1] = 68;
					break;
				}
				case 14: {
					chars[j + 1] = 69;
					break;
				}
				case 15: {
					chars[j + 1] = 70;
					break;
				}
			}
		}
	};
	$Franca_StringBuilderExtensions.appendHex$1 = function(str, bin, offset, count) {
		if (count <= 0) {
			return;
		}
		if (offset >= bin.get_length()) {
			throw new ss.ArgumentOutOfRangeException('offset');
		}
		var end = offset + count;
		if (end > bin.get_length()) {
			throw new ss.ArgumentOutOfRangeException('count');
		}
		// is this a stupid way to avoid an array copy? probably yes
		// we do this because String.fromCharCode.apply cannot take index/count args, just a full array
		while (count >= 512) {
			$Franca_StringBuilderExtensions.$copyChunk(str, bin, offset, $Franca_StringBuilderExtensions.$chr1024);
			count -= 512;
			offset += 512;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr1024);
		}
		while (count >= 256) {
			$Franca_StringBuilderExtensions.$copyChunk(str, bin, offset, $Franca_StringBuilderExtensions.$chr512);
			count -= 256;
			offset += 256;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr512);
		}
		while (count >= 128) {
			$Franca_StringBuilderExtensions.$copyChunk(str, bin, offset, $Franca_StringBuilderExtensions.$chr256);
			count -= 128;
			offset += 128;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr256);
		}
		while (count >= 64) {
			$Franca_StringBuilderExtensions.$copyChunk(str, bin, offset, $Franca_StringBuilderExtensions.$chr128);
			count -= 64;
			offset += 64;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr128);
		}
		while (count >= 32) {
			$Franca_StringBuilderExtensions.$copyChunk(str, bin, offset, $Franca_StringBuilderExtensions.$chr64);
			count -= 32;
			offset += 32;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr64);
		}
		while (count >= 16) {
			$Franca_StringBuilderExtensions.$copyChunk(str, bin, offset, $Franca_StringBuilderExtensions.$chr32);
			count -= 16;
			offset += 16;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr32);
		}
		while (count >= 8) {
			$Franca_StringBuilderExtensions.$copyChunk(str, bin, offset, $Franca_StringBuilderExtensions.$chr16);
			count -= 8;
			offset += 8;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr16);
		}
		while (count >= 4) {
			$Franca_StringBuilderExtensions.$copyChunk(str, bin, offset, $Franca_StringBuilderExtensions.$chr8);
			count -= 4;
			offset += 4;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr8);
		}
		while (count >= 2) {
			$Franca_StringBuilderExtensions.$copyChunk(str, bin, offset, $Franca_StringBuilderExtensions.$chr4);
			count -= 2;
			offset += 2;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr4);
		}
		while (count >= 1) {
			$Franca_StringBuilderExtensions.$copyChunk(str, bin, offset, $Franca_StringBuilderExtensions.$chr2);
			count -= 1;
			offset += 1;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr2);
		}
	};
	$Franca_StringBuilderExtensions.$copyChunk$2 = function(str, bin, offset, chars) {
		var len = chars.length;
		for (var j = 0; j < len; j += 2, offset++) {
			var value = bin[offset];
			switch (value & 240) {
				default:
				case 0: {
					chars[j] = 48;
					break;
				}
				case 16: {
					chars[j] = 49;
					break;
				}
				case 32: {
					chars[j] = 50;
					break;
				}
				case 48: {
					chars[j] = 51;
					break;
				}
				case 64: {
					chars[j] = 52;
					break;
				}
				case 80: {
					chars[j] = 53;
					break;
				}
				case 96: {
					chars[j] = 54;
					break;
				}
				case 112: {
					chars[j] = 55;
					break;
				}
				case 128: {
					chars[j] = 56;
					break;
				}
				case 144: {
					chars[j] = 57;
					break;
				}
				case 160: {
					chars[j] = 65;
					break;
				}
				case 176: {
					chars[j] = 66;
					break;
				}
				case 192: {
					chars[j] = 67;
					break;
				}
				case 208: {
					chars[j] = 68;
					break;
				}
				case 224: {
					chars[j] = 69;
					break;
				}
				case 240: {
					chars[j] = 70;
					break;
				}
			}
			switch (value & 15) {
				default:
				case 0: {
					chars[j + 1] = 48;
					break;
				}
				case 1: {
					chars[j + 1] = 49;
					break;
				}
				case 2: {
					chars[j + 1] = 50;
					break;
				}
				case 3: {
					chars[j + 1] = 51;
					break;
				}
				case 4: {
					chars[j + 1] = 52;
					break;
				}
				case 5: {
					chars[j + 1] = 53;
					break;
				}
				case 6: {
					chars[j + 1] = 54;
					break;
				}
				case 7: {
					chars[j + 1] = 55;
					break;
				}
				case 8: {
					chars[j + 1] = 56;
					break;
				}
				case 9: {
					chars[j + 1] = 57;
					break;
				}
				case 10: {
					chars[j + 1] = 65;
					break;
				}
				case 11: {
					chars[j + 1] = 66;
					break;
				}
				case 12: {
					chars[j + 1] = 67;
					break;
				}
				case 13: {
					chars[j + 1] = 68;
					break;
				}
				case 14: {
					chars[j + 1] = 69;
					break;
				}
				case 15: {
					chars[j + 1] = 70;
					break;
				}
			}
		}
	};
	$Franca_StringBuilderExtensions.appendHex$3 = function(str, bin, offset, count) {
		if (count <= 0) {
			return;
		}
		if (offset >= bin.length) {
			throw new ss.ArgumentOutOfRangeException('offset');
		}
		var end = offset + count;
		if (end > bin.length) {
			throw new ss.ArgumentOutOfRangeException('count');
		}
		// is this a stupid way to avoid an array copy? probably yes
		// we do this because String.fromCharCode.apply cannot take index/count args, just a full array
		while (count >= 512) {
			$Franca_StringBuilderExtensions.$copyChunk$2(str, bin, offset, $Franca_StringBuilderExtensions.$chr1024);
			count -= 512;
			offset += 512;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr1024);
		}
		while (count >= 256) {
			$Franca_StringBuilderExtensions.$copyChunk$2(str, bin, offset, $Franca_StringBuilderExtensions.$chr512);
			count -= 256;
			offset += 256;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr512);
		}
		while (count >= 128) {
			$Franca_StringBuilderExtensions.$copyChunk$2(str, bin, offset, $Franca_StringBuilderExtensions.$chr256);
			count -= 128;
			offset += 128;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr256);
		}
		while (count >= 64) {
			$Franca_StringBuilderExtensions.$copyChunk$2(str, bin, offset, $Franca_StringBuilderExtensions.$chr128);
			count -= 64;
			offset += 64;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr128);
		}
		while (count >= 32) {
			$Franca_StringBuilderExtensions.$copyChunk$2(str, bin, offset, $Franca_StringBuilderExtensions.$chr64);
			count -= 32;
			offset += 32;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr64);
		}
		while (count >= 16) {
			$Franca_StringBuilderExtensions.$copyChunk$2(str, bin, offset, $Franca_StringBuilderExtensions.$chr32);
			count -= 16;
			offset += 16;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr32);
		}
		while (count >= 8) {
			$Franca_StringBuilderExtensions.$copyChunk$2(str, bin, offset, $Franca_StringBuilderExtensions.$chr16);
			count -= 8;
			offset += 8;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr16);
		}
		while (count >= 4) {
			$Franca_StringBuilderExtensions.$copyChunk$2(str, bin, offset, $Franca_StringBuilderExtensions.$chr8);
			count -= 4;
			offset += 4;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr8);
		}
		while (count >= 2) {
			$Franca_StringBuilderExtensions.$copyChunk$2(str, bin, offset, $Franca_StringBuilderExtensions.$chr4);
			count -= 2;
			offset += 2;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr4);
		}
		while (count >= 1) {
			$Franca_StringBuilderExtensions.$copyChunk$2(str, bin, offset, $Franca_StringBuilderExtensions.$chr2);
			count -= 1;
			offset += 1;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr2);
		}
	};
	$Franca_StringBuilderExtensions.$copyChunk$1 = function(str, bin, offset, chars) {
		var len = chars.length;
		for (var j = 0; j < len; j += 2, offset++) {
			var value = bin.get_item(offset);
			switch (value & 240) {
				default:
				case 0: {
					chars[j] = 48;
					break;
				}
				case 16: {
					chars[j] = 49;
					break;
				}
				case 32: {
					chars[j] = 50;
					break;
				}
				case 48: {
					chars[j] = 51;
					break;
				}
				case 64: {
					chars[j] = 52;
					break;
				}
				case 80: {
					chars[j] = 53;
					break;
				}
				case 96: {
					chars[j] = 54;
					break;
				}
				case 112: {
					chars[j] = 55;
					break;
				}
				case 128: {
					chars[j] = 56;
					break;
				}
				case 144: {
					chars[j] = 57;
					break;
				}
				case 160: {
					chars[j] = 65;
					break;
				}
				case 176: {
					chars[j] = 66;
					break;
				}
				case 192: {
					chars[j] = 67;
					break;
				}
				case 208: {
					chars[j] = 68;
					break;
				}
				case 224: {
					chars[j] = 69;
					break;
				}
				case 240: {
					chars[j] = 70;
					break;
				}
			}
			switch (value & 15) {
				default:
				case 0: {
					chars[j + 1] = 48;
					break;
				}
				case 1: {
					chars[j + 1] = 49;
					break;
				}
				case 2: {
					chars[j + 1] = 50;
					break;
				}
				case 3: {
					chars[j + 1] = 51;
					break;
				}
				case 4: {
					chars[j + 1] = 52;
					break;
				}
				case 5: {
					chars[j + 1] = 53;
					break;
				}
				case 6: {
					chars[j + 1] = 54;
					break;
				}
				case 7: {
					chars[j + 1] = 55;
					break;
				}
				case 8: {
					chars[j + 1] = 56;
					break;
				}
				case 9: {
					chars[j + 1] = 57;
					break;
				}
				case 10: {
					chars[j + 1] = 65;
					break;
				}
				case 11: {
					chars[j + 1] = 66;
					break;
				}
				case 12: {
					chars[j + 1] = 67;
					break;
				}
				case 13: {
					chars[j + 1] = 68;
					break;
				}
				case 14: {
					chars[j + 1] = 69;
					break;
				}
				case 15: {
					chars[j + 1] = 70;
					break;
				}
			}
		}
	};
	$Franca_StringBuilderExtensions.appendHex$2 = function(str, bin, offset, count) {
		if (count <= 0) {
			return;
		}
		if (offset >= bin.get_length()) {
			throw new ss.ArgumentOutOfRangeException('offset');
		}
		var end = offset + count;
		if (end > bin.get_length()) {
			throw new ss.ArgumentOutOfRangeException('count');
		}
		// is this a stupid way to avoid an array copy? probably yes
		// we do this because String.fromCharCode.apply cannot take index/count args, just a full array
		while (count >= 512) {
			$Franca_StringBuilderExtensions.$copyChunk$1(str, bin, offset, $Franca_StringBuilderExtensions.$chr1024);
			count -= 512;
			offset += 512;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr1024);
		}
		while (count >= 256) {
			$Franca_StringBuilderExtensions.$copyChunk$1(str, bin, offset, $Franca_StringBuilderExtensions.$chr512);
			count -= 256;
			offset += 256;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr512);
		}
		while (count >= 128) {
			$Franca_StringBuilderExtensions.$copyChunk$1(str, bin, offset, $Franca_StringBuilderExtensions.$chr256);
			count -= 128;
			offset += 128;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr256);
		}
		while (count >= 64) {
			$Franca_StringBuilderExtensions.$copyChunk$1(str, bin, offset, $Franca_StringBuilderExtensions.$chr128);
			count -= 64;
			offset += 64;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr128);
		}
		while (count >= 32) {
			$Franca_StringBuilderExtensions.$copyChunk$1(str, bin, offset, $Franca_StringBuilderExtensions.$chr64);
			count -= 32;
			offset += 32;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr64);
		}
		while (count >= 16) {
			$Franca_StringBuilderExtensions.$copyChunk$1(str, bin, offset, $Franca_StringBuilderExtensions.$chr32);
			count -= 16;
			offset += 16;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr32);
		}
		while (count >= 8) {
			$Franca_StringBuilderExtensions.$copyChunk$1(str, bin, offset, $Franca_StringBuilderExtensions.$chr16);
			count -= 8;
			offset += 8;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr16);
		}
		while (count >= 4) {
			$Franca_StringBuilderExtensions.$copyChunk$1(str, bin, offset, $Franca_StringBuilderExtensions.$chr8);
			count -= 4;
			offset += 4;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr8);
		}
		while (count >= 2) {
			$Franca_StringBuilderExtensions.$copyChunk$1(str, bin, offset, $Franca_StringBuilderExtensions.$chr4);
			count -= 2;
			offset += 2;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr4);
		}
		while (count >= 1) {
			$Franca_StringBuilderExtensions.$copyChunk$1(str, bin, offset, $Franca_StringBuilderExtensions.$chr2);
			count -= 1;
			offset += 1;
			$Franca_StringBuilderExtensions.appendChars(str, $Franca_StringBuilderExtensions.$chr2);
		}
	};
	$Franca_StringBuilderExtensions.appendChars = function(str, chars) {
		str.append(String.fromCharCode.apply(null, chars));
	};
	$Franca_StringBuilderExtensions.appendChars$1 = function(str, chars, offset, count) {
		if (count <= 0) {
			return;
		}
		if (offset >= chars.length) {
			throw new ss.ArgumentOutOfRangeException('offset');
		}
		if (offset + count > chars.length) {
			throw new ss.ArgumentOutOfRangeException('count');
		}
		if (offset === 0 && count === chars.length) {
			$Franca_StringBuilderExtensions.appendChars(str, chars);
			return;
		}
		str.append(String.fromCharCode.apply(null, chars.slice(offset, offset + count)));
	};
	global.Franca.StringBuilderExtensions = $Franca_StringBuilderExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.StringHelper
	var $Franca_StringHelper = function() {
	};
	$Franca_StringHelper.__typeName = 'Franca.StringHelper';
	$Franca_StringHelper.get_caseInsensitiveComparer = function() {
		return $Franca_StringHelper.$caseInsensitiveComparer;
	};
	$Franca_StringHelper.hasByteOrderMark = function(str) {
		if (ss.isNullOrUndefined(str)) {
			return false;
		}
		return str.length >= 3 && str.charCodeAt(0) === 239 && str.charCodeAt(1) === 187 && str.charCodeAt(2) === 191;
	};
	$Franca_StringHelper.stripByteOrderMark = function(str) {
		if (!$Franca_StringHelper.hasByteOrderMark(str)) {
			return str;
		}
		return str.substring(3);
	};
	$Franca_StringHelper.wrapLength = function(str, maxLen) {
		var lines = ss.netSplit(str, $Franca_StringHelper.$newLines, null, 0);
		var wrapped = [];
		for (var i = 0; i < lines.length; i++) {
			var line = lines[i];
			while (line.length > maxLen) {
				var chunk = null;
				for (var j = maxLen - 1; j >= 0; j--) {
					if (line.charCodeAt(j) === 32) {
						chunk = line.substr(0, j);
						line = line.substring(j + 1);
						break;
					}
				}
				if (ss.isNullOrUndefined(chunk)) {
					chunk = line.substr(0, maxLen);
					line = line.substring(maxLen);
				}
				wrapped.push(chunk);
			}
			wrapped.push(line);
		}
		return ss.arrayFromEnumerable(wrapped).join('\n');
	};
	$Franca_StringHelper.get_$bmpCodePointStrings = function() {
		return $Franca_StringHelper.$_bmpCodePointStrings || ($Franca_StringHelper.$_bmpCodePointStrings = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, String]))());
	};
	$Franca_StringHelper.get_$surrogatePairArray = function() {
		return $Franca_StringHelper.$_surrogatePairArray || ($Franca_StringHelper.$_surrogatePairArray = new Array(2));
	};
	$Franca_StringHelper.fromCodePoint = function(cp) {
		if (cp > $Franca_StringHelper.maxUnicodeCodePoint) {
			throw new ss.ArgumentOutOfRangeException('cp', 'Invalid code point: ' + ss.formatNumber(cp, 'x'));
		}
		if (cp <= 65535) {
			// BMP code point
			if (cp < 8192 || cp >= 12288 && cp < 19968) {
				var bmpStrings = $Franca_StringHelper.get_$bmpCodePointStrings();
				var cpLow = cp;
				// avoid TryGetValue because it's an extra allocation on JS
				var dict = bmpStrings;
				var s = dict._get(cpLow);
				if (!!(s === undefined)) {
					s = String.fromCharCode(cp);
					bmpStrings.set_item(cpLow, ss.cast(s, String));
				}
				return ss.cast(s, String);
			}
			else {
				return String.fromCharCode(cp);
			}
		}
		else {
			// Astral code point; split in surrogate halves
			// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
			cp -= 65536;
			var high = (cp >>> 10) + 55296;
			// highSurrogate
			var low = cp % 1024 + 56320;
			// lowSurrogate
			return String.fromCharCode(high, low);
		}
	};
	$Franca_StringHelper.$getCodePointVarArgs = function(len) {
		if (ss.isNullOrUndefined($Franca_StringHelper.$cpVarArgs)) {
			$Franca_StringHelper.$cpVarArgs = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, Array]))();
		}
		// avoid TryGetValue because it's an extra allocation on JS
		var dict = $Franca_StringHelper.$cpVarArgs;
		var args = dict._get(len);
		if (!!(args === undefined)) {
			args = new Array(len);
			$Franca_StringHelper.$cpVarArgs.set_item(len, ss.cast(args, Array));
		}
		return ss.cast(args, Array);
	};
	$Franca_StringHelper.fromCodePoint$2 = function(cp0, cp1) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(2);
		args[0] = cp0;
		args[1] = cp1;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$3 = function(cp0, cp1, cp2) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(3);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$5 = function(cp0, cp1, cp2, cp3) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(4);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$6 = function(cp0, cp1, cp2, cp3, cp4) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(5);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$7 = function(cp0, cp1, cp2, cp3, cp4, cp5) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(6);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		args[5] = cp5;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$8 = function(cp0, cp1, cp2, cp3, cp4, cp5, cp6) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(7);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		args[5] = cp5;
		args[6] = cp6;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$9 = function(cp0, cp1, cp2, cp3, cp4, cp5, cp6, cp7) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(8);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		args[5] = cp5;
		args[6] = cp6;
		args[7] = cp7;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$a = function(cp0, cp1, cp2, cp3, cp4, cp5, cp6, cp7, cp8) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(9);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		args[5] = cp5;
		args[6] = cp6;
		args[7] = cp7;
		args[8] = cp8;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$b = function(cp0, cp1, cp2, cp3, cp4, cp5, cp6, cp7, cp8, cp9) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(10);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		args[5] = cp5;
		args[6] = cp6;
		args[7] = cp7;
		args[8] = cp8;
		args[9] = cp9;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$c = function(cp0, cp1, cp2, cp3, cp4, cp5, cp6, cp7, cp8, cp9, cp10) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(11);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		args[5] = cp5;
		args[6] = cp6;
		args[7] = cp7;
		args[8] = cp8;
		args[9] = cp9;
		args[10] = cp10;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$d = function(cp0, cp1, cp2, cp3, cp4, cp5, cp6, cp7, cp8, cp9, cp10, cp11) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(12);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		args[5] = cp5;
		args[6] = cp6;
		args[7] = cp7;
		args[8] = cp8;
		args[9] = cp9;
		args[10] = cp10;
		args[11] = cp11;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$e = function(cp0, cp1, cp2, cp3, cp4, cp5, cp6, cp7, cp8, cp9, cp10, cp11, cp12) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(13);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		args[5] = cp5;
		args[6] = cp6;
		args[7] = cp7;
		args[8] = cp8;
		args[9] = cp9;
		args[10] = cp10;
		args[11] = cp11;
		args[12] = cp12;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$f = function(cp0, cp1, cp2, cp3, cp4, cp5, cp6, cp7, cp8, cp9, cp10, cp11, cp12, cp13) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(14);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		args[5] = cp5;
		args[6] = cp6;
		args[7] = cp7;
		args[8] = cp8;
		args[9] = cp9;
		args[10] = cp10;
		args[11] = cp11;
		args[12] = cp12;
		args[13] = cp13;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$g = function(cp0, cp1, cp2, cp3, cp4, cp5, cp6, cp7, cp8, cp9, cp10, cp11, cp12, cp13, cp14) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(15);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		args[5] = cp5;
		args[6] = cp6;
		args[7] = cp7;
		args[8] = cp8;
		args[9] = cp9;
		args[10] = cp10;
		args[11] = cp11;
		args[12] = cp12;
		args[13] = cp13;
		args[14] = cp14;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.fromCodePoint$h = function(cp0, cp1, cp2, cp3, cp4, cp5, cp6, cp7, cp8, cp9, cp10, cp11, cp12, cp13, cp14, cp15) {
		var args = $Franca_StringHelper.$getCodePointVarArgs(16);
		args[0] = cp0;
		args[1] = cp1;
		args[2] = cp2;
		args[3] = cp3;
		args[4] = cp4;
		args[5] = cp5;
		args[6] = cp6;
		args[7] = cp7;
		args[8] = cp8;
		args[9] = cp9;
		args[10] = cp10;
		args[11] = cp11;
		args[12] = cp12;
		args[13] = cp13;
		args[14] = cp14;
		args[15] = cp15;
		return $Franca_StringHelper.fromCodePoint$4(args, 0, args.length);
	};
	$Franca_StringHelper.get_$fromCodePointBuilder = function() {
		return $Franca_StringHelper.$_fromCodePointBuilder || ($Franca_StringHelper.$_fromCodePointBuilder = new ss.StringBuilder());
	};
	$Franca_StringHelper.fromCodePoint$1 = function(codePoints) {
		return $Franca_StringHelper.fromCodePoint$4(codePoints, 0, codePoints.length);
	};
	$Franca_StringHelper.fromCodePoint$4 = function(codePoints, index, count) {
		// unfortunately JS turns the new string(units, 0, len) into
		// String.fromCharCode.apply(null, units.slice(0, 0 + len)) which
		// does a copy of the array, which we definitely do not want
		// so all this nastyness is to optimize the javascript side of this
		var units = [];
		var fromCharCode = String.fromCharCode;
		var len = 0;
		var result = $Franca_StringHelper.get_$fromCodePointBuilder();
		//new StringBuilder();
		try {
			var end = index + count;
			if (end > codePoints.length) {
				throw new ss.ArgumentOutOfRangeException('count');
			}
			for (var i = index; i < end; i++) {
				var cp = codePoints[i];
				if (cp > $Franca_StringHelper.maxUnicodeCodePoint) {
					throw new ss.ArgumentOutOfRangeException('codePoints', 'Invalid code point: ' + ss.formatNumber(cp, 'x'));
				}
				if (cp <= 65535) {
					// BMP code point
					len = units.push(cp);
				}
				else {
					// Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					cp -= 65536;
					var high = (cp >>> 10) + 55296;
					// highSurrogate
					var low = cp % 1024 + 56320;
					// lowSurrogate
					len = units.push(high, low);
				}
				if (!!(len >= 16383)) {
					result.append(ss.cast(fromCharCode.apply(null, units), String));
					units.length = 0;
					len = 0;
				}
			}
			if (!!(len > 0)) {
				result.append(ss.cast(fromCharCode.apply(null, units), String));
			}
			return result.toString();
		}
		finally {
			result.clear();
		}
	};
	$Franca_StringHelper.isSurrogatePair$1 = function(str, index, reversed) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str');
		}
		if (index < 0 || index >= str.length) {
			throw new ss.ArgumentOutOfRangeException('index');
		}
		if (reversed) {
			if (index - 1 < 0) {
				return false;
			}
			return $Franca_StringHelper.isSurrogatePair(str.charCodeAt(index - 1), str.charCodeAt(index));
		}
		else {
			if (index + 1 >= str.length) {
				return false;
			}
			return $Franca_StringHelper.isSurrogatePair(str.charCodeAt(index), str.charCodeAt(index + 1));
		}
	};
	$Franca_StringHelper.isSurrogatePair = function(c, next) {
		return c >= 55296 && c <= 56319 && next >= 56320 && next <= 57343;
	};
	$Franca_StringHelper.getCodePointAt = function(str, index, reversed) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str');
		}
		if (index < 0 || index >= str.length) {
			throw new ss.ArgumentOutOfRangeException('index');
		}
		return $Franca_StringHelper.$_GetCodePointAt(str, index, reversed);
	};
	$Franca_StringHelper.$_GetCodePointAt = function(str, index, reversed) {
		var first, second;
		if (reversed) {
			second = str.charCodeAt(index);
			if (index - 1 < 0) {
				return second;
			}
			if (second < 56320 || second > 57343) {
				return second;
			}
			first = str.charCodeAt(index - 1);
			if (first < 55296 || first > 56319) {
				return second;
			}
		}
		else {
			first = str.charCodeAt(index);
			if (index + 1 >= str.length) {
				return first;
			}
			if (first < 55296 || first > 56319) {
				return first;
			}
			second = str.charCodeAt(index + 1);
			if (second < 56320 || second > 57343) {
				return first;
			}
		}
		// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
		return (first - 55296) * 1024 + second - 56320 + 65536;
	};
	$Franca_StringHelper.getCodePoint = function(c, next) {
		if (c < 55296 || c > 56319 && next < 56320 || next > 57343) {
		}
		return (c - 55296) * 1024 + next - 56320 + 65536;
	};
	$Franca_StringHelper.codePoints = function(str, start, end, reversed) {
		if (end < 0) {
			end = str.length + end + 1;
		}
		if (start < 0) {
			throw new ss.ArgumentOutOfRangeException('start');
		}
		if (end > str.length) {
			throw new ss.ArgumentOutOfRangeException('end');
		}
		return new $Franca_StringHelper$CodePointEnumerator.$ctor1(str, start, end, reversed);
	};
	global.Franca.StringHelper = $Franca_StringHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.StringHelper.CodePointEnumerator
	var $Franca_StringHelper$CodePointEnumerator = function() {
		this.$s = null;
		this.$start = 0;
		this.$end = 0;
		this.$reversed = false;
	};
	$Franca_StringHelper$CodePointEnumerator.__typeName = 'Franca.StringHelper$CodePointEnumerator';
	$Franca_StringHelper$CodePointEnumerator.$ctor1 = function(s, start, end, reversed) {
		this.$s = null;
		this.$start = 0;
		this.$end = 0;
		this.$reversed = false;
		this.$s = s;
		this.$start = start;
		this.$end = end;
		this.$reversed = reversed;
	};
	$Franca_StringHelper$CodePointEnumerator.getDefaultValue = function() {
		return new $Franca_StringHelper$CodePointEnumerator();
	};
	global.Franca.StringHelper$CodePointEnumerator = $Franca_StringHelper$CodePointEnumerator;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.StringHelper.CodePointEnumerator.Enumerator
	var $Franca_StringHelper$CodePointEnumerator$Enumerator = function(s, start, end, reversed) {
		this.$s = null;
		this.$index = 0;
		this.$lastIndex = 0;
		this.$current = 0;
		this.$next = 0;
		this.$prev = 0;
		this.$start = 0;
		this.$end = 0;
		this.$reversed = false;
		this.$s = s;
		this.$start = start;
		this.$end = end;
		this.$reversed = reversed;
		this.$index = this.$lastIndex = 0;
		this.$current = this.$next = this.$prev = 0;
		this.$reset();
	};
	$Franca_StringHelper$CodePointEnumerator$Enumerator.__typeName = 'Franca.StringHelper$CodePointEnumerator$Enumerator';
	global.Franca.StringHelper$CodePointEnumerator$Enumerator = $Franca_StringHelper$CodePointEnumerator$Enumerator;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.TextAlign
	var $Franca_TextAlign = function(horizontal, vertical) {
		this.$1$HorizontalField = 0;
		this.$1$VerticalField = 0;
		this.set_horizontal(horizontal);
		this.set_vertical(vertical);
	};
	$Franca_TextAlign.__typeName = 'Franca.TextAlign';
	$Franca_TextAlign.op_Implicit = function(value) {
		return $Franca_TextAlign.parse(value);
	};
	$Franca_TextAlign.parse = function(value) {
		var tokens = value.split(String.fromCharCode(44));
		if (tokens.length === 1) {
			switch ($System_StringExtensions.toLowerInvariant(tokens[0].trim())) {
				case 'left': {
					return new $Franca_TextAlign(0, 0);
				}
				case 'top': {
					return new $Franca_TextAlign(0, 0);
				}
				case 'right': {
					return new $Franca_TextAlign(2, 0);
				}
				case 'bottom': {
					return new $Franca_TextAlign(0, 2);
				}
				case 'center': {
					return new $Franca_TextAlign(1, 1);
				}
			}
		}
		else if (tokens.length === 2) {
			var align = new $Franca_TextAlign(0, 0);
			switch ($System_StringExtensions.toLowerInvariant(tokens[0].trim())) {
				case 'left': {
					align.set_horizontal(0);
					break;
				}
				case 'right': {
					align.set_horizontal(2);
					break;
				}
				case 'center': {
					align.set_horizontal(1);
					break;
				}
			}
			switch ($System_StringExtensions.toLowerInvariant(tokens[1].trim())) {
				case 'top': {
					align.set_vertical(0);
					break;
				}
				case 'bottom': {
					align.set_vertical(2);
					break;
				}
				case 'center': {
					align.set_vertical(1);
					break;
				}
			}
			return align;
		}
		return new $Franca_TextAlign(0, 0);
	};
	$Franca_TextAlign.get_topLeft = function() {
		return new $Franca_TextAlign(0, 0);
	};
	$Franca_TextAlign.get_topRight = function() {
		return new $Franca_TextAlign(2, 0);
	};
	$Franca_TextAlign.get_bottomLeft = function() {
		return new $Franca_TextAlign(0, 2);
	};
	$Franca_TextAlign.get_bottomRight = function() {
		return new $Franca_TextAlign(2, 2);
	};
	$Franca_TextAlign.get_center = function() {
		return new $Franca_TextAlign(1, 1);
	};
	global.Franca.TextAlign = $Franca_TextAlign;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.TypeHelper
	var $Franca_TypeHelper = function() {
	};
	$Franca_TypeHelper.__typeName = 'Franca.TypeHelper';
	$Franca_TypeHelper.convert = function(T) {
		return function(o) {
			var dyn = o;
			return ss.cast(dyn, T);
		};
	};
	global.Franca.TypeHelper = $Franca_TypeHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.TypeReflectionException
	var $Franca_TypeReflectionException = function() {
		ss.Exception.call(this);
	};
	$Franca_TypeReflectionException.__typeName = 'Franca.TypeReflectionException';
	$Franca_TypeReflectionException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_TypeReflectionException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.TypeReflectionException = $Franca_TypeReflectionException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.UnknownPlatformException
	var $Franca_UnknownPlatformException = function() {
		ss.Exception.call(this);
	};
	$Franca_UnknownPlatformException.__typeName = 'Franca.UnknownPlatformException';
	$Franca_UnknownPlatformException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_UnknownPlatformException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.UnknownPlatformException = $Franca_UnknownPlatformException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.UtcDate
	var $Franca_UtcDate = function() {
		this.$value = 0;
	};
	$Franca_UtcDate.__typeName = 'Franca.UtcDate';
	$Franca_UtcDate.$ctor2 = function(milliseconds) {
		this.$value = 0;
		this.$value = milliseconds;
	};
	$Franca_UtcDate.$ctor3 = function(year, month, day, hours, minutes, seconds, milliseconds) {
		this.$value = 0;
		this.$value = Date.UTC(year, month - 1, day, hours, minutes, seconds, milliseconds) + $Franca_UtcDate.msToUnixEpoch;
	};
	$Franca_UtcDate.$ctor1 = function(reader) {
		this.$value = 0;
		this.$value = 0;
		if (!reader.isString() && !reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		if (reader.isString()) {
			this.$value = $Franca_UtcDate.$parseValue(reader.readString(false, 0, -1));
		}
		else {
			var _requiredField_date = false;
			var $t1 = reader.readObject().getEnumerator();
			try {
				while ($t1.moveNext()) {
					var _objIter1 = $t1.current();
					switch (_objIter1.key) {
						default: {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						case 'date': {
							{
								_requiredField_date = true;
								if (!reader.isString()) {
									throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
								}
								this.$value = $Franca_UtcDate.$parseValue(reader.readString(false, 0, -1));
							}
							break;
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
			if (!_requiredField_date) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		}
	};
	$Franca_UtcDate.getDefaultValue = function() {
		return new $Franca_UtcDate();
	};
	$Franca_UtcDate.get_dayNames = function() {
		return $Franca_UtcDate.$dayNames;
	};
	$Franca_UtcDate.set_dayNames = function(value) {
		$Franca_UtcDate.$dayNames = value;
	};
	$Franca_UtcDate.get_abbreviatedDayNames = function() {
		return $Franca_UtcDate.$abbreviatedDayNames;
	};
	$Franca_UtcDate.set_abbreviatedDayNames = function(value) {
		$Franca_UtcDate.$abbreviatedDayNames = value;
	};
	$Franca_UtcDate.get_monthNames = function() {
		return $Franca_UtcDate.$monthNames;
	};
	$Franca_UtcDate.set_monthNames = function(value) {
		$Franca_UtcDate.$monthNames = value;
	};
	$Franca_UtcDate.get_abbreviatedMonthNames = function() {
		return $Franca_UtcDate.$abbreviatedMonthNames;
	};
	$Franca_UtcDate.set_abbreviatedMonthNames = function(value) {
		$Franca_UtcDate.$abbreviatedMonthNames = value;
	};
	$Franca_UtcDate.fromTicks = function(ticks) {
		return new $Franca_UtcDate.$ctor2(ticks / $Franca_UtcDate.ticksPerMillisecond);
	};
	$Franca_UtcDate.$parseValue = function(dateStr) {
		var d = Date.parse(dateStr);
		if (!!isNaN(ss.unbox(ss.cast(d, Number)))) {
			throw new ss.FormatException('The string was not recognized as a valid UtcDate.');
		}
		return ss.unbox(ss.cast(d + $Franca_UtcDate.msToUnixEpoch, Number));
	};
	$Franca_UtcDate.parse = function(dateStr) {
		var d = Date.parse(dateStr);
		if (!!isNaN(ss.unbox(ss.cast(d, Number)))) {
			throw new ss.FormatException('The string was not recognized as a valid UtcDate.');
		}
		return new $Franca_UtcDate.$ctor2(ss.unbox(ss.cast(d, Number)) + $Franca_UtcDate.msToUnixEpoch);
	};
	$Franca_UtcDate.tryParse = function(dateStr, date) {
		var d = Date.parse(dateStr);
		if (!!isNaN(ss.unbox(ss.cast(d, Number)))) {
			date.$ = new $Franca_UtcDate.$ctor2(0);
			return false;
		}
		date.$ = new $Franca_UtcDate.$ctor2(ss.unbox(ss.cast(d, Number)) + $Franca_UtcDate.msToUnixEpoch);
		return true;
	};
	$Franca_UtcDate.get_now = function() {
		return new $Franca_UtcDate.$ctor2(Date.now() + $Franca_UtcDate.msToUnixEpoch);
	};
	$Franca_UtcDate.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_UtcDate.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	$Franca_UtcDate.op_LessThan = function(lhs, rhs) {
		return lhs.$value < rhs.$value;
	};
	$Franca_UtcDate.op_LessThanOrEqual = function(lhs, rhs) {
		return lhs.$value <= rhs.$value;
	};
	$Franca_UtcDate.op_GreaterThan = function(lhs, rhs) {
		return lhs.$value > rhs.$value;
	};
	$Franca_UtcDate.op_GreaterThanOrEqual = function(lhs, rhs) {
		return lhs.$value >= rhs.$value;
	};
	$Franca_UtcDate.op_Subtraction = function(a, b) {
		return new ss.TimeSpan((a.get_totalMilliseconds() - b.get_totalMilliseconds()) * 10000);
	};
	$Franca_UtcDate.op_Addition = function(a, b) {
		return new $Franca_UtcDate.$ctor2(a.get_totalMilliseconds() + b.get_totalMilliseconds());
	};
	$Franca_UtcDate.op_Subtraction$1 = function(a, b) {
		return new $Franca_UtcDate.$ctor2(a.get_totalMilliseconds() - b.ticks / 10000);
	};
	$Franca_UtcDate.op_Addition$1 = function(a, b) {
		return new $Franca_UtcDate.$ctor2(a.get_totalMilliseconds() + b.ticks / 10000);
	};
	global.Franca.UtcDate = $Franca_UtcDate;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.VAlign
	var $Franca_VAlign = function() {
	};
	$Franca_VAlign.__typeName = 'Franca.VAlign';
	global.Franca.VAlign = $Franca_VAlign;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Vector2
	var $Franca_Vector2 = function() {
		this.x = 0;
		this.y = 0;
	};
	$Franca_Vector2.__typeName = 'Franca.Vector2';
	$Franca_Vector2.$ctor3 = function(x, y) {
		this.x = 0;
		this.y = 0;
		this.x = x;
		this.y = y;
	};
	$Franca_Vector2.$ctor2 = function(value) {
		this.x = 0;
		this.y = 0;
		this.x = value;
		this.y = value;
	};
	$Franca_Vector2.$ctor1 = function(reader) {
		this.x = 0;
		this.y = 0;
		this.x = 0;
		this.y = 0;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var _requiredField_x = false;
		var _requiredField_y = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'x': {
						{
							_requiredField_x = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.x = reader.readDouble(false);
						}
						break;
					}
					case 'y': {
						{
							_requiredField_y = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.y = reader.readDouble(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_x || !_requiredField_y) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
	};
	$Franca_Vector2.getDefaultValue = function() {
		return new $Franca_Vector2();
	};
	$Franca_Vector2.get_$seedGenerator = function() {
		if (ss.isValue($Franca_Vector2.$_seedGenerator)) {
			return $Franca_Vector2.$_seedGenerator;
		}
		$Franca_Vector2.$_seedGenerator = new $Franca_RNG();
		return $Franca_Vector2.$_seedGenerator;
	};
	$Franca_Vector2.pow = function(value, pow) {
		return new $Franca_Vector2.$ctor3(Math.pow(value.x, pow.x), Math.pow(value.y, pow.y));
	};
	$Franca_Vector2.add = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(value1.x + value2.x, value1.y + value2.y);
	};
	$Franca_Vector2.add$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector2.$ctor3(value1.$.x + value2.$.x, value1.$.y + value2.$.y);
	};
	$Franca_Vector2.barycentric = function(value1, value2, value3, amount1, amount2) {
		return new $Franca_Vector2.$ctor3($Franca_MathHelper.barycentric(value1.x, value2.x, value3.x, amount1, amount2), $Franca_MathHelper.barycentric(value1.y, value2.y, value3.y, amount1, amount2));
	};
	$Franca_Vector2.barycentric$1 = function(value1, value2, value3, amount1, amount2, result) {
		result.$ = new $Franca_Vector2.$ctor3($Franca_MathHelper.barycentric(value1.$.x, value2.$.x, value3.$.x, amount1, amount2), $Franca_MathHelper.barycentric(value1.$.y, value2.$.y, value3.$.y, amount1, amount2));
	};
	$Franca_Vector2.catmullRom = function(value1, value2, value3, value4, amount) {
		return new $Franca_Vector2.$ctor3($Franca_MathHelper.catmullRom(value1.x, value2.x, value3.x, value4.x, amount), $Franca_MathHelper.catmullRom(value1.y, value2.y, value3.y, value4.y, amount));
	};
	$Franca_Vector2.catmullRom$1 = function(value1, value2, value3, value4, amount, result) {
		result.$ = new $Franca_Vector2.$ctor3($Franca_MathHelper.catmullRom(value1.$.x, value2.$.x, value3.$.x, value4.$.x, amount), $Franca_MathHelper.catmullRom(value1.$.y, value2.$.y, value3.$.y, value4.$.y, amount));
	};
	$Franca_Vector2.clamp = function(value1, min, max) {
		return new $Franca_Vector2.$ctor3($Franca_Calc.clamp$3(value1.x, min.x, max.x), $Franca_Calc.clamp$3(value1.y, min.y, max.y));
	};
	$Franca_Vector2.clamp$1 = function(value1, min, max, result) {
		result.$ = new $Franca_Vector2.$ctor3($Franca_Calc.clamp$3(value1.$.x, min.$.x, max.$.x), $Franca_Calc.clamp$3(value1.$.y, min.$.y, max.$.y));
	};
	$Franca_Vector2.distance = function(value1, value2) {
		var v1 = value1.x - value2.x, v2 = value1.y - value2.y;
		return Math.sqrt(v1 * v1 + v2 * v2);
	};
	$Franca_Vector2.distance$1 = function(value1, value2, result) {
		var v1 = value1.$.x - value2.$.x, v2 = value1.$.y - value2.$.y;
		result.$ = Math.sqrt(v1 * v1 + v2 * v2);
	};
	$Franca_Vector2.distanceSquared = function(value1, value2) {
		var v1 = value1.x - value2.x, v2 = value1.y - value2.y;
		return v1 * v1 + v2 * v2;
	};
	$Franca_Vector2.distanceSquared$1 = function(value1, value2, result) {
		var v1 = value1.$.x - value2.$.x, v2 = value1.$.y - value2.$.y;
		result.$ = v1 * v1 + v2 * v2;
	};
	$Franca_Vector2.divide = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(value1.x / value2.x, value1.y / value2.y);
	};
	$Franca_Vector2.divide$2 = function(value1, value2, result) {
		result.$ = new $Franca_Vector2.$ctor3(value1.$.x / value2.$.x, value1.$.y / value2.$.y);
	};
	$Franca_Vector2.divide$1 = function(value1, divider) {
		return new $Franca_Vector2.$ctor3(value1.x / divider, value1.y / divider);
	};
	$Franca_Vector2.divide$3 = function(value1, divider, result) {
		result.$ = new $Franca_Vector2.$ctor3(value1.$.x / divider, value1.$.y / divider);
	};
	$Franca_Vector2.dot = function(value1, value2) {
		return value1.x * value2.x + value1.y * value2.y;
	};
	$Franca_Vector2.dot$1 = function(value1, value2, result) {
		result.$ = value1.$.x * value2.$.x + value1.$.y * value2.$.y;
	};
	$Franca_Vector2.reflect = function(vector, normal) {
		var val = 2 * (vector.x * normal.x + vector.y * normal.y);
		var result = new $Franca_Vector2.$ctor3(vector.x - normal.x * val, vector.y - normal.y * val);
		return result;
	};
	$Franca_Vector2.reflect$1 = function(vector, normal, result) {
		var val = 2 * (vector.$.x * normal.$.x + vector.$.y * normal.$.y);
		result.$ = new $Franca_Vector2.$ctor3(vector.$.x - normal.$.x * val, vector.$.y - normal.$.y * val);
	};
	$Franca_Vector2.hermite = function(value1, tangent1, value2, tangent2, amount) {
		value1 = { $: value1 };
		tangent1 = { $: tangent1 };
		value2 = { $: value2 };
		tangent2 = { $: tangent2 };
		var result = { $: new $Franca_Vector2() };
		$Franca_Vector2.hermite$1(value1, tangent1, value2, tangent2, amount, result);
		return result.$;
	};
	$Franca_Vector2.hermite$1 = function(value1, tangent1, value2, tangent2, amount, result) {
		result.$ = new $Franca_Vector2.$ctor3($Franca_MathHelper.hermite(value1.$.x, tangent1.$.x, value2.$.x, tangent2.$.x, amount), $Franca_MathHelper.hermite(value1.$.y, tangent1.$.y, value2.$.y, tangent2.$.y, amount));
	};
	$Franca_Vector2.lerp = function(value1, value2, amount) {
		return new $Franca_Vector2.$ctor3($Franca_Calc.lerp$2(value1.x, value2.x, amount), $Franca_Calc.lerp$2(value1.y, value2.y, amount));
	};
	$Franca_Vector2.lerp$1 = function(value1, value2, amount, result) {
		result.$ = new $Franca_Vector2.$ctor3($Franca_Calc.lerp$2(value1.$.x, value2.$.x, amount), $Franca_Calc.lerp$2(value1.$.y, value2.$.y, amount));
	};
	$Franca_Vector2.max = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(((value1.x > value2.x) ? value1.x : value2.x), ((value1.y > value2.y) ? value1.y : value2.y));
	};
	$Franca_Vector2.max$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector2.$ctor3(((value1.$.x > value2.$.x) ? value1.$.x : value2.$.x), ((value1.$.y > value2.$.y) ? value1.$.y : value2.$.y));
	};
	$Franca_Vector2.min = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(((value1.x < value2.x) ? value1.x : value2.x), ((value1.y < value2.y) ? value1.y : value2.y));
	};
	$Franca_Vector2.min$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector2.$ctor3(((value1.$.x < value2.$.x) ? value1.$.x : value2.$.x), ((value1.$.y < value2.$.y) ? value1.$.y : value2.$.y));
	};
	$Franca_Vector2.multiply = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(value1.x * value2.x, value1.y * value2.y);
	};
	$Franca_Vector2.multiply$1 = function(value1, scaleFactor) {
		return new $Franca_Vector2.$ctor3(value1.x * scaleFactor, value1.y * scaleFactor);
	};
	$Franca_Vector2.multiply$3 = function(value1, scaleFactor, result) {
		result.$ = new $Franca_Vector2.$ctor3(value1.$.x * scaleFactor, value1.$.y * scaleFactor);
	};
	$Franca_Vector2.multiply$2 = function(value1, value2, result) {
		result.$ = new $Franca_Vector2.$ctor3(value1.$.x * value2.$.x, value1.$.y * value2.$.y);
	};
	$Franca_Vector2.negate = function(value) {
		return new $Franca_Vector2.$ctor3(-value.x, -value.y);
	};
	$Franca_Vector2.negate$1 = function(value, result) {
		result.$ = new $Franca_Vector2.$ctor3(-value.$.x, -value.$.y);
	};
	$Franca_Vector2.normalize = function(value) {
		var val = 1 / Math.sqrt(value.x * value.x + value.y * value.y);
		return new $Franca_Vector2.$ctor3(value.x * val, value.y * val);
	};
	$Franca_Vector2.normalize$1 = function(value, result) {
		var val = 1 / Math.sqrt(value.$.x * value.$.x + value.$.y * value.$.y);
		result.$ = new $Franca_Vector2.$ctor3(value.$.x * val, value.$.y * val);
	};
	$Franca_Vector2.smoothStep = function(value1, value2, amount) {
		return new $Franca_Vector2.$ctor3($Franca_MathHelper.smoothStep(value1.x, value2.x, amount), $Franca_MathHelper.smoothStep(value1.y, value2.y, amount));
	};
	$Franca_Vector2.smoothStep$1 = function(value1, value2, amount, result) {
		result.$ = new $Franca_Vector2.$ctor3($Franca_MathHelper.smoothStep(value1.$.x, value2.$.x, amount), $Franca_MathHelper.smoothStep(value1.$.y, value2.$.y, amount));
	};
	$Franca_Vector2.subtract = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(value1.x - value2.x, value1.y - value2.y);
	};
	$Franca_Vector2.subtract$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector2.$ctor3(value1.$.x - value2.$.x, value1.$.y - value2.$.y);
	};
	$Franca_Vector2.transform = function(position, matrix) {
		return new $Franca_Vector2.$ctor3(position.x * matrix.row0.x + position.y * matrix.row1.x + matrix.row3.x, position.x * matrix.row0.y + position.y * matrix.row1.y + matrix.row3.y);
	};
	$Franca_Vector2.transform$2 = function(position, matrix, result) {
		result.$ = new $Franca_Vector2.$ctor3(position.$.x * matrix.row0.x + position.$.y * matrix.row1.x + matrix.row3.x, position.$.x * matrix.row0.y + position.$.y * matrix.row1.y + matrix.row3.y);
	};
	$Franca_Vector2.transform$1 = function(position, quat) {
		position = { $: position };
		quat = { $: quat };
		$Franca_Vector2.transform$3(position, quat, position);
		return position.$;
	};
	$Franca_Vector2.transform$3 = function(position, quat, result) {
		var v = { $: new $Franca_Quaternion.$ctor3(position.$.x, position.$.y, 0, 0) }, i = {}, t = {};
		$Franca_Quaternion.inverse$1(quat, i);
		$Franca_Quaternion.multiply$1(quat, v, t);
		$Franca_Quaternion.multiply$1(t, i, v);
		result.$ = new $Franca_Vector2.$ctor3(v.$.quat[0], v.$.quat[1]);
	};
	$Franca_Vector2.transform$4 = function(sourceArray, matrix, destinationArray) {
		$Franca_Vector2.transform$5(sourceArray, 0, matrix, destinationArray, 0, sourceArray.length);
	};
	$Franca_Vector2.transform$5 = function(sourceArray, sourceIndex, matrix, destinationArray, destinationIndex, length) {
		for (var x = 0; x < length; x++) {
			var position = sourceArray[sourceIndex + x];
			var destination = destinationArray[destinationIndex + x];
			destination = new $Franca_Vector2.$ctor3(position.x * matrix.$.row0.x + position.y * matrix.$.row1.x + matrix.$.row3.x, position.x * matrix.$.row0.y + position.y * matrix.$.row1.y + matrix.$.row3.y);
			destinationArray[destinationIndex + x] = destination;
		}
	};
	$Franca_Vector2.transformNormal = function(normal, matrix) {
		normal = { $: normal };
		matrix = { $: matrix };
		$Franca_Vector2.transformNormal$1(normal, matrix, normal);
		return normal.$;
	};
	$Franca_Vector2.transformNormal$1 = function(normal, matrix, result) {
		result.$ = new $Franca_Vector2.$ctor3(normal.$.x * matrix.$.row0.x + normal.$.y * matrix.$.row1.x, normal.$.x * matrix.$.row0.y + normal.$.y * matrix.$.row1.y);
	};
	$Franca_Vector2.op_UnaryNegation = function(value) {
		return new $Franca_Vector2.$ctor3(-value.x, -value.y);
	};
	$Franca_Vector2.op_Equality = function(value1, value2) {
		return value1.x === value2.x && value1.y === value2.y;
	};
	$Franca_Vector2.op_Inequality = function(value1, value2) {
		return value1.x !== value2.x || value1.y !== value2.y;
	};
	$Franca_Vector2.op_Addition = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(value1.x + value2.x, value1.y + value2.y);
	};
	$Franca_Vector2.op_Subtraction = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(value1.x - value2.x, value1.y - value2.y);
	};
	$Franca_Vector2.op_Multiply = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(value1.x * value2.x, value1.y * value2.y);
	};
	$Franca_Vector2.op_Multiply$1 = function(value, scaleFactor) {
		return new $Franca_Vector2.$ctor3(value.x * scaleFactor, value.y * scaleFactor);
	};
	$Franca_Vector2.op_Multiply$2 = function(scaleFactor, value) {
		return new $Franca_Vector2.$ctor3(value.x * scaleFactor, value.y * scaleFactor);
	};
	$Franca_Vector2.op_Division = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(value1.x / value2.x, value1.y / value2.y);
	};
	$Franca_Vector2.op_Division$1 = function(value, divider) {
		return new $Franca_Vector2.$ctor3(value.x / divider, value.y / divider);
	};
	$Franca_Vector2.op_LessThan = function(value1, value2) {
		return value1.x < value2.x && value1.y < value2.y;
	};
	$Franca_Vector2.op_GreaterThan = function(value1, value2) {
		return value1.x > value2.x && value1.y > value2.y;
	};
	$Franca_Vector2.op_LessThanOrEqual = function(value1, value2) {
		return value1.x <= value2.x && value1.y <= value2.y;
	};
	$Franca_Vector2.op_GreaterThanOrEqual = function(value1, value2) {
		return value1.x >= value2.x && value1.y >= value2.y;
	};
	$Franca_Vector2.op_Addition$1 = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(value1.x + value2, value1.y + value2);
	};
	$Franca_Vector2.op_Subtraction$1 = function(value1, value2) {
		return new $Franca_Vector2.$ctor3(value1.x - value2, value1.y - value2);
	};
	$Franca_Vector2.op_Explicit = function(p) {
		return new $Franca_Vector2.$ctor3(p.x, p.y);
	};
	$Franca_Vector2.op_Explicit$2 = function(v) {
		return new $Franca_Point.$ctor2(ss.Int32.trunc(v.x), ss.Int32.trunc(v.y));
	};
	$Franca_Vector2.op_Explicit$1 = function(p) {
		return new $Franca_Vector2.$ctor3(p.x, p.y);
	};
	$Franca_Vector2.op_Explicit$3 = function(v) {
		return new $Franca_PointF.$ctor2(v.x, v.y);
	};
	$Franca_Vector2.floor = function(value) {
		return new $Franca_Vector2.$ctor3(Math.floor(value.x), Math.floor(value.y));
	};
	$Franca_Vector2.round = function(value) {
		return new $Franca_Vector2.$ctor3(Math.round(value.x), Math.round(value.y));
	};
	$Franca_Vector2.ceiling = function(value) {
		return new $Franca_Vector2.$ctor3(Math.ceil(value.x), Math.ceil(value.y));
	};
	$Franca_Vector2.abs = function(value) {
		return new $Franca_Vector2.$ctor3(Math.abs(value.x), Math.abs(value.y));
	};
	$Franca_Vector2.random = function(random) {
		random = random || new $Franca_RNG.$ctor2($Franca_Vector2.get_$seedGenerator().next());
		var angle = random.nextDouble() * 6.28318548202515;
		return new $Franca_Vector2.$ctor3(Math.cos(angle), Math.sin(angle));
	};
	global.Franca.Vector2 = $Franca_Vector2;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Vector3
	var $Franca_Vector3 = function() {
		this.x = 0;
		this.y = 0;
		this.z = 0;
	};
	$Franca_Vector3.__typeName = 'Franca.Vector3';
	$Franca_Vector3.$ctor4 = function(x, y, z) {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.x = x;
		this.y = y;
		this.z = z;
	};
	$Franca_Vector3.$ctor2 = function(value) {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.x = value;
		this.y = value;
		this.z = value;
	};
	$Franca_Vector3.$ctor3 = function(value, z) {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.x = value.x;
		this.y = value.y;
		this.z = z;
	};
	$Franca_Vector3.$ctor1 = function(reader) {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.x = 0;
		this.y = 0;
		this.z = 0;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var _requiredField_x = false;
		var _requiredField_y = false;
		var _requiredField_z = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'x': {
						{
							_requiredField_x = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.x = reader.readDouble(false);
						}
						break;
					}
					case 'y': {
						{
							_requiredField_y = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.y = reader.readDouble(false);
						}
						break;
					}
					case 'z': {
						{
							_requiredField_z = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.z = reader.readDouble(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_x || !_requiredField_y || !_requiredField_z) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
	};
	$Franca_Vector3.getDefaultValue = function() {
		return new $Franca_Vector3();
	};
	$Franca_Vector3.get_$seedGenerator = function() {
		if (ss.isValue($Franca_Vector3.$_seedGenerator)) {
			return $Franca_Vector3.$_seedGenerator;
		}
		$Franca_Vector3.$_seedGenerator = new $Franca_RNG();
		return $Franca_Vector3.$_seedGenerator;
	};
	$Franca_Vector3.pow = function(value, pow) {
		return new $Franca_Vector3.$ctor4(Math.pow(value.x, pow.x), Math.pow(value.y, pow.y), Math.pow(value.z, pow.z));
	};
	$Franca_Vector3.add = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(value1.x + value2.x, value1.y + value2.y, value1.z + value2.z);
	};
	$Franca_Vector3.add$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector3.$ctor4(value1.$.x + value2.$.x, value1.$.y + value2.$.y, value1.$.z + value2.$.z);
	};
	$Franca_Vector3.barycentric = function(value1, value2, value3, amount1, amount2) {
		return new $Franca_Vector3.$ctor4($Franca_MathHelper.barycentric(value1.x, value2.x, value3.x, amount1, amount2), $Franca_MathHelper.barycentric(value1.y, value2.y, value3.y, amount1, amount2), $Franca_MathHelper.barycentric(value1.z, value2.z, value3.z, amount1, amount2));
	};
	$Franca_Vector3.barycentric$1 = function(value1, value2, value3, amount1, amount2, result) {
		result.$ = new $Franca_Vector3.$ctor4($Franca_MathHelper.barycentric(value1.$.x, value2.$.x, value3.$.x, amount1, amount2), $Franca_MathHelper.barycentric(value1.$.y, value2.$.y, value3.$.y, amount1, amount2), $Franca_MathHelper.barycentric(value1.$.z, value2.$.z, value3.$.z, amount1, amount2));
	};
	$Franca_Vector3.catmullRom = function(value1, value2, value3, value4, amount) {
		return new $Franca_Vector3.$ctor4($Franca_MathHelper.catmullRom(value1.x, value2.x, value3.x, value4.x, amount), $Franca_MathHelper.catmullRom(value1.y, value2.y, value3.y, value4.y, amount), $Franca_MathHelper.catmullRom(value1.z, value2.z, value3.z, value4.z, amount));
	};
	$Franca_Vector3.catmullRom$1 = function(value1, value2, value3, value4, amount, result) {
		result.$ = new $Franca_Vector3.$ctor4($Franca_MathHelper.catmullRom(value1.$.x, value2.$.x, value3.$.x, value4.$.x, amount), $Franca_MathHelper.catmullRom(value1.$.y, value2.$.y, value3.$.y, value4.$.y, amount), $Franca_MathHelper.catmullRom(value1.$.z, value2.$.z, value3.$.z, value4.$.z, amount));
	};
	$Franca_Vector3.clamp = function(value1, min, max) {
		return new $Franca_Vector3.$ctor4($Franca_Calc.clamp$3(value1.x, min.x, max.x), $Franca_Calc.clamp$3(value1.y, min.y, max.y), $Franca_Calc.clamp$3(value1.z, min.z, max.z));
	};
	$Franca_Vector3.clamp$1 = function(value1, min, max, result) {
		result.$ = new $Franca_Vector3.$ctor4($Franca_Calc.clamp$3(value1.$.x, min.$.x, max.$.x), $Franca_Calc.clamp$3(value1.$.y, min.$.y, max.$.y), $Franca_Calc.clamp$3(value1.$.z, min.$.z, max.$.z));
	};
	$Franca_Vector3.cross = function(vector1, vector2) {
		vector1 = { $: vector1 };
		vector2 = { $: vector2 };
		$Franca_Vector3.cross$1(vector1, vector2, vector1);
		return vector1.$;
	};
	$Franca_Vector3.cross$1 = function(vector1, vector2, result) {
		result.$ = new $Franca_Vector3.$ctor4(vector1.$.y * vector2.$.z - vector2.$.y * vector1.$.z, -(vector1.$.x * vector2.$.z - vector2.$.x * vector1.$.z), vector1.$.x * vector2.$.y - vector2.$.x * vector1.$.y);
	};
	$Franca_Vector3.distance = function(vector1, vector2) {
		vector1 = { $: vector1 };
		vector2 = { $: vector2 };
		var result = {};
		$Franca_Vector3.distanceSquared$1(vector1, vector2, result);
		return Math.sqrt(result.$);
	};
	$Franca_Vector3.distance$1 = function(value1, value2, result) {
		$Franca_Vector3.distanceSquared$1(value1, value2, result);
		result.$ = Math.sqrt(result.$);
	};
	$Franca_Vector3.distanceSquared = function(value1, value2) {
		value1 = { $: value1 };
		value2 = { $: value2 };
		var result = {};
		$Franca_Vector3.distanceSquared$1(value1, value2, result);
		return result.$;
	};
	$Franca_Vector3.distanceSquared$1 = function(value1, value2, result) {
		result.$ = (value1.$.x - value2.$.x) * (value1.$.x - value2.$.x) + (value1.$.y - value2.$.y) * (value1.$.y - value2.$.y) + (value1.$.z - value2.$.z) * (value1.$.z - value2.$.z);
	};
	$Franca_Vector3.divide = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(value1.x / value2.x, value1.y / value2.y, value1.z / value2.z);
	};
	$Franca_Vector3.divide$1 = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(value1.x / value2, value1.y / value2, value1.z / value2);
	};
	$Franca_Vector3.divide$3 = function(value1, divisor, result) {
		result.$ = new $Franca_Vector3.$ctor4(value1.$.x / divisor, value1.$.y / divisor, value1.$.z / divisor);
	};
	$Franca_Vector3.divide$2 = function(value1, value2, result) {
		result.$ = new $Franca_Vector3.$ctor4(value1.$.x / value2.$.x, value1.$.y / value2.$.y, value1.$.z / value2.$.z);
	};
	$Franca_Vector3.dot = function(vector1, vector2) {
		return vector1.x * vector2.x + vector1.y * vector2.y + vector1.z * vector2.z;
	};
	$Franca_Vector3.dot$1 = function(vector1, vector2, result) {
		result.$ = vector1.$.x * vector2.$.x + vector1.$.y * vector2.$.y + vector1.$.z * vector2.$.z;
	};
	$Franca_Vector3.hermite = function(value1, tangent1, value2, tangent2, amount) {
		value1 = { $: value1 };
		tangent1 = { $: tangent1 };
		value2 = { $: value2 };
		tangent2 = { $: tangent2 };
		var result = { $: new $Franca_Vector3() };
		$Franca_Vector3.hermite$1(value1, tangent1, value2, tangent2, amount, result);
		return result.$;
	};
	$Franca_Vector3.hermite$1 = function(value1, tangent1, value2, tangent2, amount, result) {
		result.$ = new $Franca_Vector3.$ctor4($Franca_MathHelper.hermite(value1.$.x, tangent1.$.x, value2.$.x, tangent2.$.x, amount), $Franca_MathHelper.hermite(value1.$.y, tangent1.$.y, value2.$.y, tangent2.$.y, amount), $Franca_MathHelper.hermite(value1.$.z, tangent1.$.z, value2.$.z, tangent2.$.z, amount));
	};
	$Franca_Vector3.lerp = function(value1, value2, amount) {
		return new $Franca_Vector3.$ctor4($Franca_Calc.lerp$2(value1.x, value2.x, amount), $Franca_Calc.lerp$2(value1.y, value2.y, amount), $Franca_Calc.lerp$2(value1.z, value2.z, amount));
	};
	$Franca_Vector3.lerp$1 = function(value1, value2, amount, result) {
		result.$ = new $Franca_Vector3.$ctor4($Franca_Calc.lerp$2(value1.$.x, value2.$.x, amount), $Franca_Calc.lerp$2(value1.$.y, value2.$.y, amount), $Franca_Calc.lerp$2(value1.$.z, value2.$.z, amount));
	};
	$Franca_Vector3.max = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(Math.max(value1.x, value2.x), Math.max(value1.y, value2.y), Math.max(value1.z, value2.z));
	};
	$Franca_Vector3.max$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector3.$ctor4(Math.max(value1.$.x, value2.$.x), Math.max(value1.$.y, value2.$.y), Math.max(value1.$.z, value2.$.z));
	};
	$Franca_Vector3.min = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(Math.min(value1.x, value2.x), Math.min(value1.y, value2.y), Math.min(value1.z, value2.z));
	};
	$Franca_Vector3.min$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector3.$ctor4(Math.min(value1.$.x, value2.$.x), Math.min(value1.$.y, value2.$.y), Math.min(value1.$.z, value2.$.z));
	};
	$Franca_Vector3.multiply = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(value1.x * value2.x, value1.y * value2.y, value1.z * value2.z);
	};
	$Franca_Vector3.multiply$1 = function(value1, scaleFactor) {
		return new $Franca_Vector3.$ctor4(value1.x * scaleFactor, value1.y * scaleFactor, value1.z * scaleFactor);
	};
	$Franca_Vector3.multiply$3 = function(value1, scaleFactor, result) {
		result.$ = new $Franca_Vector3.$ctor4(value1.$.x * scaleFactor, value1.$.y * scaleFactor, value1.$.z * scaleFactor);
	};
	$Franca_Vector3.multiply$2 = function(value1, value2, result) {
		result.$ = new $Franca_Vector3.$ctor4(value1.$.x * value2.$.x, value1.$.y * value2.$.y, value1.$.z * value2.$.z);
	};
	$Franca_Vector3.negate = function(value) {
		value = new $Franca_Vector3.$ctor4(-value.x, -value.y, -value.z);
		return value;
	};
	$Franca_Vector3.negate$1 = function(value, result) {
		result.$ = new $Franca_Vector3.$ctor4(-value.$.x, -value.$.y, -value.$.z);
	};
	$Franca_Vector3.normalize = function(vector) {
		var factor = $Franca_Vector3.distance(vector, $Franca_Vector3.$zero);
		factor = 1 / factor;
		return new $Franca_Vector3.$ctor4(vector.x * factor, vector.y * factor, vector.z * factor);
	};
	$Franca_Vector3.normalize$1 = function(value, result) {
		var factor = $Franca_Vector3.distance(value.$, $Franca_Vector3.$zero);
		factor = 1 / factor;
		result.$ = new $Franca_Vector3.$ctor4(value.$.x * factor, value.$.y * factor, value.$.z * factor);
	};
	$Franca_Vector3.reflect = function(vector, normal) {
		// I is the original array
		// N is the normal of the incident plane
		// R = I - (2 * N * ( DotProduct[ I,N] ))
		// inline the dotProduct here instead of calling method
		var dotProduct = vector.x * normal.x + vector.y * normal.y + vector.z * normal.z;
		var reflectedVector = new $Franca_Vector3.$ctor4(vector.x - 2 * normal.x * dotProduct, vector.y - 2 * normal.y * dotProduct, vector.z - 2 * normal.z * dotProduct);
		return reflectedVector;
	};
	$Franca_Vector3.reflect$1 = function(vector, normal, result) {
		// I is the original array
		// N is the normal of the incident plane
		// R = I - (2 * N * ( DotProduct[ I,N] ))
		// inline the dotProduct here instead of calling method
		var dotProduct = vector.$.x * normal.$.x + vector.$.y * normal.$.y + vector.$.z * normal.$.z;
		result.$ = new $Franca_Vector3.$ctor4(vector.$.x - 2 * normal.$.x * dotProduct, vector.$.y - 2 * normal.$.y * dotProduct, vector.$.z - 2 * normal.$.z * dotProduct);
	};
	$Franca_Vector3.smoothStep = function(value1, value2, amount) {
		return new $Franca_Vector3.$ctor4($Franca_MathHelper.smoothStep(value1.x, value2.x, amount), $Franca_MathHelper.smoothStep(value1.y, value2.y, amount), $Franca_MathHelper.smoothStep(value1.z, value2.z, amount));
	};
	$Franca_Vector3.smoothStep$1 = function(value1, value2, amount, result) {
		result.$ = new $Franca_Vector3.$ctor4($Franca_MathHelper.smoothStep(value1.$.x, value2.$.x, amount), $Franca_MathHelper.smoothStep(value1.$.y, value2.$.y, amount), $Franca_MathHelper.smoothStep(value1.$.z, value2.$.z, amount));
	};
	$Franca_Vector3.subtract = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(value1.x - value2.x, value1.y - value2.y, value1.z - value2.z);
	};
	$Franca_Vector3.subtract$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector3.$ctor4(value1.$.x - value2.$.x, value1.$.y - value2.$.y, value1.$.z - value2.$.z);
	};
	$Franca_Vector3.get_$toStringBuilder = function() {
		return $Franca_Vector3.$_toStringBuilder || ($Franca_Vector3.$_toStringBuilder = new ss.StringBuilder());
	};
	$Franca_Vector3.op_Equality = function(value1, value2) {
		return value1.x === value2.x && value1.y === value2.y && value1.z === value2.z;
	};
	$Franca_Vector3.op_Inequality = function(value1, value2) {
		return !$Franca_Vector3.op_Equality(value1, value2);
	};
	$Franca_Vector3.op_Addition = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(value1.x + value2.x, value1.y + value2.y, value1.z + value2.z);
	};
	$Franca_Vector3.op_UnaryNegation = function(value) {
		value = new $Franca_Vector3.$ctor4(-value.x, -value.y, -value.z);
		return value;
	};
	$Franca_Vector3.op_Subtraction = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(value1.x - value2.x, value1.y - value2.y, value1.z - value2.z);
	};
	$Franca_Vector3.op_Multiply = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(value1.x * value2.x, value1.y * value2.y, value1.z * value2.z);
	};
	$Franca_Vector3.op_Multiply$1 = function(value, scaleFactor) {
		return new $Franca_Vector3.$ctor4(value.x * scaleFactor, value.y * scaleFactor, value.z * scaleFactor);
	};
	$Franca_Vector3.op_Multiply$2 = function(scaleFactor, value) {
		return new $Franca_Vector3.$ctor4(value.x * scaleFactor, value.y * scaleFactor, value.z * scaleFactor);
	};
	$Franca_Vector3.op_Division = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(value1.x / value2.x, value1.y / value2.y, value1.z / value2.z);
	};
	$Franca_Vector3.op_Division$1 = function(value, divider) {
		return new $Franca_Vector3.$ctor4(value.x / divider, value.y / divider, value.z / divider);
	};
	$Franca_Vector3.op_LessThan = function(value1, value2) {
		return value1.x < value2.x && value1.y < value2.y && value1.z < value2.z;
	};
	$Franca_Vector3.op_GreaterThan = function(value1, value2) {
		return value1.x > value2.x && value1.y > value2.y && value1.z > value2.z;
	};
	$Franca_Vector3.op_LessThanOrEqual = function(value1, value2) {
		return value1.x <= value2.x && value1.y <= value2.y && value1.z <= value2.z;
	};
	$Franca_Vector3.op_GreaterThanOrEqual = function(value1, value2) {
		return value1.x >= value2.x && value1.y >= value2.y && value1.z >= value2.z;
	};
	$Franca_Vector3.op_Addition$1 = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(value1.x + value2, value1.y + value2, value1.z + value2);
	};
	$Franca_Vector3.op_Subtraction$1 = function(value1, value2) {
		return new $Franca_Vector3.$ctor4(value1.x - value2, value1.y - value2, value1.z - value2);
	};
	$Franca_Vector3.floor = function(value) {
		return new $Franca_Vector3.$ctor4(Math.floor(value.x), Math.floor(value.y), Math.floor(value.z));
	};
	$Franca_Vector3.round = function(value) {
		return new $Franca_Vector3.$ctor4(Math.round(value.x), Math.round(value.y), Math.round(value.z));
	};
	$Franca_Vector3.ceiling = function(value) {
		return new $Franca_Vector3.$ctor4(Math.ceil(value.x), Math.ceil(value.y), Math.ceil(value.z));
	};
	$Franca_Vector3.abs = function(value) {
		return new $Franca_Vector3.$ctor4(Math.abs(value.x), Math.abs(value.y), Math.abs(value.z));
	};
	$Franca_Vector3.random = function(random) {
		random = random || new $Franca_RNG.$ctor2($Franca_Vector3.get_$seedGenerator().next());
		var vec = new $Franca_Vector3.$ctor4(random.nextDouble() - 0.5, random.nextDouble() - 0.5, random.nextDouble() - 0.5);
		return vec.normalize();
	};
	global.Franca.Vector3 = $Franca_Vector3;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Vector4
	var $Franca_Vector4 = function() {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.w = 0;
	};
	$Franca_Vector4.__typeName = 'Franca.Vector4';
	$Franca_Vector4.$ctor5 = function(x, y, z, w) {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.w = 0;
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	};
	$Franca_Vector4.$ctor2 = function(value) {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.w = 0;
		this.x = value;
		this.y = value;
		this.z = value;
		this.w = value;
	};
	$Franca_Vector4.$ctor4 = function(value, z, w) {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.w = 0;
		this.x = value.x;
		this.y = value.y;
		this.z = z;
		this.w = w;
	};
	$Franca_Vector4.$ctor3 = function(value, w) {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.w = 0;
		this.x = value.x;
		this.y = value.y;
		this.z = value.z;
		this.w = w;
	};
	$Franca_Vector4.$ctor1 = function(reader) {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.w = 0;
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.w = 0;
		if (!reader.isObject()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		var _requiredField_x = false;
		var _requiredField_y = false;
		var _requiredField_z = false;
		var _requiredField_w = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					case 'x': {
						{
							_requiredField_x = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.x = reader.readDouble(false);
						}
						break;
					}
					case 'y': {
						{
							_requiredField_y = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.y = reader.readDouble(false);
						}
						break;
					}
					case 'z': {
						{
							_requiredField_z = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.z = reader.readDouble(false);
						}
						break;
					}
					case 'w': {
						{
							_requiredField_w = true;
							if (!reader.isNumber()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.w = reader.readDouble(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_x || !_requiredField_y || !_requiredField_z || !_requiredField_w) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
	};
	$Franca_Vector4.getDefaultValue = function() {
		return new $Franca_Vector4();
	};
	$Franca_Vector4.get_$seedGenerator = function() {
		if (ss.isValue($Franca_Vector4.$_seedGenerator)) {
			return $Franca_Vector4.$_seedGenerator;
		}
		$Franca_Vector4.$_seedGenerator = new $Franca_RNG();
		return $Franca_Vector4.$_seedGenerator;
	};
	$Franca_Vector4.pow = function(value, pow) {
		return new $Franca_Vector4.$ctor5(Math.pow(value.x, pow.x), Math.pow(value.y, pow.y), Math.pow(value.z, pow.z), Math.pow(value.w, pow.w));
	};
	$Franca_Vector4.add = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(value1.x + value2.x, value1.y + value2.y, value1.z + value2.z, value1.w + value2.w);
	};
	$Franca_Vector4.add$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector4.$ctor5(value1.$.x + value2.$.x, value1.$.y + value2.$.y, value1.$.z + value2.$.z, value1.$.w + value2.$.w);
	};
	$Franca_Vector4.clamp = function(value1, min, max) {
		return new $Franca_Vector4.$ctor5($Franca_Calc.clamp$3(value1.x, min.x, max.x), $Franca_Calc.clamp$3(value1.y, min.y, max.y), $Franca_Calc.clamp$3(value1.z, min.z, max.z), $Franca_Calc.clamp$3(value1.w, min.w, max.w));
	};
	$Franca_Vector4.clamp$1 = function(value1, min, max, result) {
		result.$ = new $Franca_Vector4.$ctor5($Franca_Calc.clamp$3(value1.$.x, min.$.x, max.$.x), $Franca_Calc.clamp$3(value1.$.y, min.$.y, max.$.y), $Franca_Calc.clamp$3(value1.$.z, min.$.z, max.$.z), $Franca_Calc.clamp$3(value1.$.w, min.$.w, max.$.w));
	};
	$Franca_Vector4.divide = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(value1.x / value2.x, value1.y / value2.y, value1.z / value2.z, value1.w / value2.w);
	};
	$Franca_Vector4.divide$1 = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(value1.x / value2, value1.y / value2, value1.z / value2, value1.w / value2);
	};
	$Franca_Vector4.divide$3 = function(value1, divisor, result) {
		result.$ = new $Franca_Vector4.$ctor5(value1.$.x / divisor, value1.$.y / divisor, value1.$.z / divisor, value1.$.w / divisor);
	};
	$Franca_Vector4.divide$2 = function(value1, value2, result) {
		result.$ = new $Franca_Vector4.$ctor5(value1.$.x / value2.$.x, value1.$.y / value2.$.y, value1.$.z / value2.$.z, value1.$.w / value2.$.w);
	};
	$Franca_Vector4.dot = function(vector1, vector2) {
		return vector1.x * vector2.x + vector1.y * vector2.y + vector1.z * vector2.z + vector1.w * vector2.w;
	};
	$Franca_Vector4.dot$1 = function(vector1, vector2, result) {
		result.$ = vector1.$.x * vector2.$.x + vector1.$.y * vector2.$.y + vector1.$.z * vector2.$.z + vector1.$.w * vector2.$.w;
	};
	$Franca_Vector4.lerp = function(value1, value2, amount) {
		return new $Franca_Vector4.$ctor5($Franca_Calc.lerp$2(value1.x, value2.x, amount), $Franca_Calc.lerp$2(value1.y, value2.y, amount), $Franca_Calc.lerp$2(value1.z, value2.z, amount), $Franca_Calc.lerp$2(value1.w, value2.w, amount));
	};
	$Franca_Vector4.lerp$1 = function(value1, value2, amount, result) {
		result.$ = new $Franca_Vector4.$ctor5($Franca_Calc.lerp$2(value1.$.x, value2.$.x, amount), $Franca_Calc.lerp$2(value1.$.y, value2.$.y, amount), $Franca_Calc.lerp$2(value1.$.z, value2.$.z, amount), $Franca_Calc.lerp$2(value1.$.w, value2.$.w, amount));
	};
	$Franca_Vector4.max = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(Math.max(value1.x, value2.x), Math.max(value1.y, value2.y), Math.max(value1.z, value2.z), Math.max(value1.w, value2.w));
	};
	$Franca_Vector4.max$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector4.$ctor5(Math.max(value1.$.x, value2.$.x), Math.max(value1.$.y, value2.$.y), Math.max(value1.$.z, value2.$.z), Math.max(value1.$.w, value2.$.w));
	};
	$Franca_Vector4.min = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(Math.min(value1.x, value2.x), Math.min(value1.y, value2.y), Math.min(value1.z, value2.z), Math.min(value1.w, value2.w));
	};
	$Franca_Vector4.min$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector4.$ctor5(Math.min(value1.$.x, value2.$.x), Math.min(value1.$.y, value2.$.y), Math.min(value1.$.z, value2.$.z), Math.min(value1.$.w, value2.$.w));
	};
	$Franca_Vector4.multiply = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(value1.x * value2.x, value1.y * value2.y, value1.z * value2.z, value1.w * value2.w);
	};
	$Franca_Vector4.multiply$1 = function(value1, scaleFactor) {
		return new $Franca_Vector4.$ctor5(value1.x * scaleFactor, value1.y * scaleFactor, value1.z * scaleFactor, value1.w * scaleFactor);
	};
	$Franca_Vector4.multiply$3 = function(value1, scaleFactor, result) {
		result.$ = new $Franca_Vector4.$ctor5(value1.$.x * scaleFactor, value1.$.y * scaleFactor, value1.$.z * scaleFactor, value1.$.w * scaleFactor);
	};
	$Franca_Vector4.multiply$2 = function(value1, value2, result) {
		result.$ = new $Franca_Vector4.$ctor5(value1.$.x * value2.$.x, value1.$.y * value2.$.y, value1.$.z * value2.$.z, value1.$.w * value2.$.w);
	};
	$Franca_Vector4.negate = function(value) {
		value = new $Franca_Vector4.$ctor5(-value.x, -value.y, -value.z, -value.w);
		return value;
	};
	$Franca_Vector4.negate$1 = function(value, result) {
		result.$ = new $Franca_Vector4.$ctor5(-value.$.x, -value.$.y, -value.$.z, -value.$.w);
	};
	$Franca_Vector4.subtract = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(value1.x - value2.x, value1.y - value2.y, value1.z - value2.z, value1.w - value2.w);
	};
	$Franca_Vector4.subtract$1 = function(value1, value2, result) {
		result.$ = new $Franca_Vector4.$ctor5(value1.$.x - value2.$.x, value1.$.y - value2.$.y, value1.$.z - value2.$.z, value1.$.w - value2.$.w);
	};
	$Franca_Vector4.get_$toStringBuilder = function() {
		return $Franca_Vector4.$_toStringBuilder || ($Franca_Vector4.$_toStringBuilder = new ss.StringBuilder());
	};
	$Franca_Vector4.op_Equality = function(value1, value2) {
		return value1.x === value2.x && value1.y === value2.y && value1.z === value2.z && value1.w === value2.w;
	};
	$Franca_Vector4.op_Inequality = function(value1, value2) {
		return !$Franca_Vector4.op_Equality(value1, value2);
	};
	$Franca_Vector4.op_Addition = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(value1.x + value2.x, value1.y + value2.y, value1.z + value2.z, value1.w + value2.w);
	};
	$Franca_Vector4.op_UnaryNegation = function(value) {
		value = new $Franca_Vector4.$ctor5(-value.x, -value.y, -value.z, -value.w);
		return value;
	};
	$Franca_Vector4.op_Subtraction = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(value1.x - value2.x, value1.y - value2.y, value1.z - value2.z, value1.w - value2.w);
	};
	$Franca_Vector4.op_Multiply = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(value1.x * value2.x, value1.y * value2.y, value1.z * value2.z, value1.w * value2.w);
	};
	$Franca_Vector4.op_Multiply$1 = function(value, scaleFactor) {
		return new $Franca_Vector4.$ctor5(value.x * scaleFactor, value.y * scaleFactor, value.z * scaleFactor, value.w * scaleFactor);
	};
	$Franca_Vector4.op_Multiply$2 = function(scaleFactor, value) {
		return new $Franca_Vector4.$ctor5(value.x * scaleFactor, value.y * scaleFactor, value.z * scaleFactor, value.w * scaleFactor);
	};
	$Franca_Vector4.op_Division = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(value1.x / value2.x, value1.y / value2.y, value1.z / value2.z, value1.w / value2.w);
	};
	$Franca_Vector4.op_Division$1 = function(value, divider) {
		return new $Franca_Vector4.$ctor5(value.x / divider, value.y / divider, value.z / divider, value.w / divider);
	};
	$Franca_Vector4.op_LessThan = function(value1, value2) {
		return value1.x < value2.x && value1.y < value2.y && value1.z < value2.z && value1.w < value2.w;
	};
	$Franca_Vector4.op_GreaterThan = function(value1, value2) {
		return value1.x > value2.x && value1.y > value2.y && value1.z > value2.z && value1.w > value2.w;
	};
	$Franca_Vector4.op_LessThanOrEqual = function(value1, value2) {
		return value1.x <= value2.x && value1.y <= value2.y && value1.z <= value2.z && value1.w <= value2.w;
	};
	$Franca_Vector4.op_GreaterThanOrEqual = function(value1, value2) {
		return value1.x >= value2.x && value1.y >= value2.y && value1.z >= value2.z && value1.w >= value2.w;
	};
	$Franca_Vector4.op_Addition$1 = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(value1.x + value2, value1.y + value2, value1.z + value2, value1.w + value2);
	};
	$Franca_Vector4.op_Subtraction$1 = function(value1, value2) {
		return new $Franca_Vector4.$ctor5(value1.x - value2, value1.y - value2, value1.z - value2, value1.w - value2);
	};
	$Franca_Vector4.floor = function(value) {
		return new $Franca_Vector4.$ctor5(Math.floor(value.x), Math.floor(value.y), Math.floor(value.z), Math.floor(value.w));
	};
	$Franca_Vector4.round = function(value) {
		return new $Franca_Vector4.$ctor5(Math.round(value.x), Math.round(value.y), Math.round(value.z), Math.round(value.w));
	};
	$Franca_Vector4.ceiling = function(value) {
		return new $Franca_Vector4.$ctor5(Math.ceil(value.x), Math.ceil(value.y), Math.ceil(value.z), Math.ceil(value.w));
	};
	$Franca_Vector4.abs = function(value) {
		return new $Franca_Vector4.$ctor5(Math.abs(value.x), Math.abs(value.y), Math.abs(value.z), Math.abs(value.w));
	};
	$Franca_Vector4.normalize = function(vector) {
		var factor = $Franca_Vector4.distance(vector, $Franca_Vector4.zero);
		factor = 1 / factor;
		return new $Franca_Vector4.$ctor5(vector.x * factor, vector.y * factor, vector.z * factor, vector.w * factor);
	};
	$Franca_Vector4.normalize$1 = function(value, result) {
		var factor = $Franca_Vector4.distance(value.$, $Franca_Vector4.zero);
		factor = 1 / factor;
		result.$ = new $Franca_Vector4.$ctor5(value.$.x * factor, value.$.y * factor, value.$.z * factor, value.$.w * factor);
	};
	$Franca_Vector4.distance = function(vector1, vector2) {
		vector1 = { $: vector1 };
		vector2 = { $: vector2 };
		var result = {};
		$Franca_Vector4.distanceSquared$1(vector1, vector2, result);
		return Math.sqrt(result.$);
	};
	$Franca_Vector4.distance$1 = function(value1, value2, result) {
		$Franca_Vector4.distanceSquared$1(value1, value2, result);
		result.$ = Math.sqrt(result.$);
	};
	$Franca_Vector4.distanceSquared = function(value1, value2) {
		value1 = { $: value1 };
		value2 = { $: value2 };
		var result = {};
		$Franca_Vector4.distanceSquared$1(value1, value2, result);
		return result.$;
	};
	$Franca_Vector4.distanceSquared$1 = function(value1, value2, result) {
		result.$ = (value1.$.x - value2.$.x) * (value1.$.x - value2.$.x) + (value1.$.y - value2.$.y) * (value1.$.y - value2.$.y) + (value1.$.z - value2.$.z) * (value1.$.z - value2.$.z) + (value1.$.w - value2.$.w) * (value1.$.w - value2.$.w);
	};
	$Franca_Vector4.random = function(random) {
		random = random || new $Franca_RNG.$ctor2($Franca_Vector4.get_$seedGenerator().next());
		var vec = new $Franca_Vector4.$ctor5(random.nextDouble() - 0.5, random.nextDouble() - 0.5, random.nextDouble() - 0.5, random.nextDouble() - 0.5);
		return vec.normalize();
	};
	global.Franca.Vector4 = $Franca_Vector4;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.VectorMath
	var $Franca_VectorMath = function() {
	};
	$Franca_VectorMath.__typeName = 'Franca.VectorMath';
	$Franca_VectorMath.getRotation = function(vector, origin) {
		switch (origin) {
			case 0:
			default: {
				return Math.atan2(vector.y, vector.x);
			}
			case 3: {
				return $Franca_Calc.wrap$5(Math.atan2(vector.y, vector.x) + $Franca_VectorMath.$ninetyDegrees, -Math.PI, Math.PI);
			}
			case 1: {
				return $Franca_Calc.wrap$5(Math.atan2(vector.y, vector.x) + $Franca_VectorMath.$oneEightyDegrees, -Math.PI, Math.PI);
			}
			case 2: {
				return $Franca_Calc.wrap$5(Math.atan2(vector.y, vector.x) + $Franca_VectorMath.$twoSeventyDegrees, -Math.PI, Math.PI);
			}
		}
	};
	$Franca_VectorMath.rotateVector = function(vector, angle) {
		return $Franca_Vector2.transform(vector, $Franca_Matrix4.createRotationZ(angle));
	};
	$Franca_VectorMath.absAngleBetween = function(v1, v2) {
		return Math.acos($Franca_Vector2.dot(v1, v2) / (v1.length() * v2.length()));
	};
	$Franca_VectorMath.absAngleBetweenUnit = function(v1, v2) {
		return Math.acos($Franca_Vector2.dot(v1, v2));
	};
	$Franca_VectorMath.angleBetween = function(v1, v2) {
		var angle1 = v1.getRotation(0);
		var angle2 = v2.getRotation(0);
		return $Franca_Calc.wrap$5(angle1 - angle2, -$Franca_VectorMath.$piFloat, $Franca_VectorMath.$piFloat);
	};
	$Franca_VectorMath.matrixFromVector = function(vector, up) {
		var axis;
		var angle;
		if ($Franca_Vector3.op_Inequality(vector, $Franca_Vector3.op_UnaryNegation(up))) {
			axis = $Franca_Vector3.cross(up, vector);
			angle = Math.acos($Franca_Vector3.dot(up, vector));
		}
		else {
			axis = $Franca_Vector3.cross($Franca_Vector3.op_UnaryNegation(up), vector);
			angle = Math.acos($Franca_Vector3.dot($Franca_Vector3.op_UnaryNegation(up), vector));
		}
		return $Franca_Matrix4.createFromAxisAngle(axis, angle);
	};
	global.Franca.VectorMath = $Franca_VectorMath;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Compression.Deflate.Huffman
	var $Franca_$Compression_Deflate$Huffman = function(count, symbol) {
		this.$count = null;
		this.$symbol = null;
		this.$count = count;
		this.$symbol = symbol;
	};
	$Franca_$Compression_Deflate$Huffman.__typeName = 'Franca.$Compression.Deflate$Huffman';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Compression.Deflate.State
	var $Franca_$Compression_Deflate$State = function() {
		this.$out = null;
		this.$outStart = 0;
		this.$in = null;
		this.$bitBuf = 0;
		this.$bitCount = 0;
	};
	$Franca_$Compression_Deflate$State.__typeName = 'Franca.$Compression.Deflate$State';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.Base32.Base32Mask
	var $Franca_$Text_Base32$Base32Mask = function(mask, shift) {
		this.$maskA = -1;
		this.$maskB = -1;
		this.$shiftA = 0;
		this.$shiftB = 0;
		this.$maskA = mask;
		this.$shiftA = shift;
	};
	$Franca_$Text_Base32$Base32Mask.__typeName = 'Franca.$Text.Base32$Base32Mask';
	$Franca_$Text_Base32$Base32Mask.$ctor1 = function(maskA, shiftA, maskB, shiftB) {
		this.$maskA = -1;
		this.$maskB = -1;
		this.$shiftA = 0;
		this.$shiftB = 0;
		this.$maskA = maskA;
		this.$shiftA = shiftA;
		this.$maskB = maskB;
		this.$shiftB = shiftB;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.Markup.LocalizableHtmlToMarkupConverter
	var $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter = function() {
	};
	$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.__typeName = 'Franca.$Text.Markup$LocalizableHtmlToMarkupConverter';
	$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$fromHtml = function(html) {
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$tags = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$tags || [];
		ss.clear($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$tags);
		var cpy = new ss.StringBuilder();
		var inTag = false;
		var last = { $: 0 };
		for (var i = 0; i < html.length; i++) {
			var chr = html.charCodeAt(i);
			var htmlEntity;
			if (!inTag && chr === 38 && ss.isValue(htmlEntity = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$readEntity(html, i))) {
				var substitute = null;
				var skipLength = 0;
				switch (htmlEntity) {
					case '&lt;': {
						substitute = '<';
						skipLength = 4;
						break;
					}
					case '&gt;': {
						substitute = '>';
						skipLength = 4;
						break;
					}
					case '&amp;': {
						substitute = '&';
						skipLength = 5;
						break;
					}
				}
				if (ss.isValue(substitute)) {
					if (i - last.$ > 0) {
						$System_StringBuilderFixes.append(cpy, html, last.$, i - last.$);
					}
					last.$ = i + skipLength;
					cpy.append(substitute);
				}
			}
			else if (!inTag && chr === 94) {
				if (i - last.$ > 0) {
					$System_StringBuilderFixes.append(cpy, html, last.$, i - last.$);
				}
				last.$ = i + 1;
				cpy.append('^^');
			}
			else if (chr === 60 && !inTag) {
				if (i - last.$ > 0) {
					$System_StringBuilderFixes.append(cpy, html, last.$, i - last.$);
				}
				last.$ = i;
				inTag = true;
			}
			else if (chr === 62 && inTag) {
				var tagStr = html.substr(last.$, i - last.$ + 1);
				var tagMatch = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$tagRegex.exec(tagStr);
				var tagIndex = cpy.length;
				if (ss.isValue($Franca_Text_Match.op_Implicit(tagMatch)) && tagMatch.success) {
					var isClosing = tagMatch.groups[1] === '/';
					var tagName = tagMatch.groups[2];
					var style = ((tagMatch.groups.length > 2) ? tagMatch.groups[3] : null);
					var tag = null;
					var sizeString = null;
					var colorHex = null;
					if (!isClosing) {
						if (!$System_StringExtensions.isNullOrEmpty(style, true)) {
							var $t1 = ss.getEnumerator($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$styleKvpRegex.match(style));
							try {
								while ($t1.moveNext()) {
									var match = $t1.current();
									var key = $System_StringExtensions.toLowerInvariant(match.groups[1]);
									var value = match.groups[2];
									if (key === 'font-size') {
										var size = {};
										var splitIndex = $System_StringExtensions.indexOfAny$1(value, $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$measurementUnits);
										if (splitIndex > 0) {
											var number = value.substr(0, splitIndex).trim();
											var unit = $System_StringExtensions.toLowerInvariant(value.substring(splitIndex).trim());
											if ($Franca_Calc.tryParseNumber(number, size)) {
												switch (unit) {
													default:
													case 'pt': {
														sizeString = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag.$formatSize(size.$);
														break;
													}
													case 'em':
													case 'px': {
														// invalid, probably?
														break;
													}
													case '%': {
														// TODO: implement
														break;
													}
												}
											}
										}
										else if ($Franca_Calc.tryParseNumber(value.trim(), size)) {
											sizeString = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag.$formatSize(size.$);
										}
									}
									else if (key === 'color') {
										var color = {};
										if ($Franca_Color.fromHex$2(value, '#', color, true)) {
											colorHex = color.$.toRGBAHex(null);
										}
									}
								}
							}
							finally {
								$t1.dispose();
							}
						}
					}
					tagName = $System_StringExtensions.toLowerInvariant(tagName);
					switch (tagName) {
						case 'b':
						case 'strong': {
							tag = new $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag(tagName, 1, isClosing, tagIndex, sizeString, colorHex);
							break;
						}
						case 'i':
						case 'em': {
							tag = new $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag(tagName, 2, isClosing, tagIndex, sizeString, colorHex);
							break;
						}
						case 'u': {
							tag = new $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag(tagName, 4, isClosing, tagIndex, sizeString, colorHex);
							break;
						}
						case 'span':
						case 'font': {
							tag = new $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag(tagName, 0, isClosing, tagIndex, sizeString, colorHex);
							break;
						}
					}
					if (ss.isValue(tag)) {
						$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$tags.push(tag);
					}
				}
				inTag = false;
				last.$ = i + 1;
			}
		}
		var filtered;
		if (last.$ === 0) {
			filtered = html;
		}
		else {
			if (html.length - last.$ > 0) {
				$System_StringBuilderFixes.append(cpy, html, last.$, html.length - last.$);
			}
			filtered = cpy.toString();
		}
		var boldDepth = 0;
		var italicDepth = 0;
		var underlineDepth = 0;
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$bTags = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$bTags || new Array();
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$iTags = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$iTags || new Array();
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$uTags = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$uTags || new Array();
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$emTags = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$emTags || new Array();
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$strongTags = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$strongTags || new Array();
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$spanTags = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$spanTags || new Array();
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$fontTags = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$fontTags || new Array();
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors || [];
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes || [];
		ss.clear($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$bTags);
		ss.clear($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$iTags);
		ss.clear($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$uTags);
		ss.clear($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$emTags);
		ss.clear($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$strongTags);
		ss.clear($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$spanTags);
		ss.clear($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$fontTags);
		ss.clear($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors);
		ss.clear($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes);
		cpy = new ss.StringBuilder();
		last.$ = 0;
		for (var i1 = 0; i1 < $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$tags.length; i1++) {
			var tag1 = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$tags[i1];
			var closed = null;
			if (tag1.$isClosing) {
				switch (tag1.$tagName) {
					case 'b': {
						boldDepth--;
						if (boldDepth < 0) {
							boldDepth = 0;
						}
						closed = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$popTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$bTags, tag1, filtered, cpy, last);
						if (boldDepth === 0) {
							cpy.append('^mB');
						}
						break;
					}
					case 'strong': {
						boldDepth--;
						if (boldDepth < 0) {
							boldDepth = 0;
						}
						closed = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$popTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$strongTags, tag1, filtered, cpy, last);
						if (boldDepth === 0) {
							cpy.append('^mB');
						}
						break;
					}
					case 'i': {
						italicDepth--;
						if (italicDepth < 0) {
							italicDepth = 0;
						}
						closed = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$popTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$iTags, tag1, filtered, cpy, last);
						if (italicDepth === 0) {
							cpy.append('^mI');
						}
						break;
					}
					case 'em': {
						italicDepth--;
						if (italicDepth < 0) {
							italicDepth = 0;
						}
						closed = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$popTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$emTags, tag1, filtered, cpy, last);
						if (italicDepth === 0) {
							cpy.append('^mI');
						}
						break;
					}
					case 'u': {
						underlineDepth--;
						if (underlineDepth < 0) {
							underlineDepth = 0;
						}
						closed = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$popTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$uTags, tag1, filtered, cpy, last);
						if (underlineDepth === 0) {
							cpy.append('^mU');
						}
						break;
					}
					case 'span': {
						closed = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$popTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$spanTags, tag1, filtered, cpy, last);
						break;
					}
					case 'font': {
						closed = $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$popTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$fontTags, tag1, filtered, cpy, last);
						break;
					}
				}
				if (ss.isValue(closed)) {
					if ($System_EnumExtensions.hasFlag(closed.$type, 16)) {
						var closedIndex = ss.indexOf($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes, closed);
						if (closedIndex === $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes.length - 1) {
							ss.removeAt($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes, closedIndex);
							if ($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes.length > 0) {
								cpy.append('^ms' + $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes[$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes.length - 1].$sizeString);
							}
							else {
								cpy.append('^mS');
							}
						}
						else {
							ss.removeAt($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes, closedIndex);
						}
					}
					if ($System_EnumExtensions.hasFlag(closed.$type, 8)) {
						var closedIndex1 = ss.indexOf($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors, closed);
						if (closedIndex1 === $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors.length - 1) {
							ss.removeAt($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors, closedIndex1);
							if ($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors.length > 0) {
								cpy.append('^mc' + $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors[$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors.length - 1].$colorHex);
							}
							else {
								cpy.append('^mC');
							}
						}
						else {
							ss.removeAt($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors, closedIndex1);
						}
					}
				}
			}
			else {
				switch (tag1.$tagName) {
					case 'b': {
						boldDepth++;
						$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$pushTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$bTags, tag1, filtered, cpy, last);
						if (boldDepth === 1) {
							cpy.append('^mb');
						}
						break;
					}
					case 'strong': {
						boldDepth++;
						$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$pushTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$strongTags, tag1, filtered, cpy, last);
						if (boldDepth === 1) {
							cpy.append('^mb');
						}
						break;
					}
					case 'i': {
						italicDepth++;
						$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$pushTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$iTags, tag1, filtered, cpy, last);
						if (italicDepth === 1) {
							cpy.append('^mi');
						}
						break;
					}
					case 'em': {
						italicDepth++;
						$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$pushTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$emTags, tag1, filtered, cpy, last);
						if (italicDepth === 1) {
							cpy.append('^mi');
						}
						break;
					}
					case 'u': {
						underlineDepth++;
						$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$pushTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$uTags, tag1, filtered, cpy, last);
						if (underlineDepth === 1) {
							cpy.append('^mu');
						}
						break;
					}
					case 'span': {
						$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$pushTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$spanTags, tag1, filtered, cpy, last);
						break;
					}
					case 'font': {
						$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$pushTag($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$fontTags, tag1, filtered, cpy, last);
						break;
					}
				}
				if ($System_EnumExtensions.hasFlag(tag1.$type, 16)) {
					cpy.append('^ms' + tag1.$sizeString);
					$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes.push(tag1);
				}
				if ($System_EnumExtensions.hasFlag(tag1.$type, 8)) {
					cpy.append('^mc' + tag1.$colorHex);
					$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors.push(tag1);
				}
			}
		}
		if (filtered.length - last.$ > 0) {
			$System_StringBuilderFixes.append(cpy, filtered, last.$, filtered.length - last.$);
		}
		return cpy.toString();
	};
	$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$readEntity = function(html, i) {
		if (html.charCodeAt(i) !== 38 || i + 3 >= html.length) {
			return null;
		}
		if ($System_StringExtensions.toLowerInvariant(html.substr(i + 1, 3)) === 'lt;') {
			return '&lt;';
		}
		else if ($System_StringExtensions.toLowerInvariant(html.substr(i + 1, 3)) === 'gt;') {
			return '&gt;';
		}
		else if (i + 4 < html.length && $System_StringExtensions.toLowerInvariant(html.substr(i + 1, 4)) === 'amp;') {
			return '&amp;';
		}
		return null;
	};
	$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$pushTag = function(stack, tag, filtered, cpy, last) {
		stack.push(tag);
		if (tag.$offset - last.$ > 0) {
			$System_StringBuilderFixes.append(cpy, filtered, last.$, tag.$offset - last.$);
		}
		last.$ = tag.$offset;
	};
	$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$popTag = function(stack, tag, filtered, cpy, last) {
		var ret = ((stack.length > 0) ? stack.pop() : null);
		if (tag.$offset - last.$ > 0) {
			$System_StringBuilderFixes.append(cpy, filtered, last.$, tag.$offset - last.$);
		}
		last.$ = tag.$offset;
		return ret;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.Markup.LocalizableHtmlToMarkupConverter.Tag
	var $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag = function(tagName, type, isClosing, offset, sizeString, colorHex) {
		this.$type = 0;
		this.$isClosing = false;
		this.$offset = 0;
		this.$tagName = null;
		this.$sizeString = null;
		this.$colorHex = null;
		this.$tagName = tagName;
		this.$type = type;
		this.$isClosing = isClosing;
		this.$offset = offset;
		this.$sizeString = sizeString;
		this.$colorHex = colorHex;
		if (ss.isValue(sizeString)) {
			this.$type = this.$type | 16;
		}
		if (ss.isValue(colorHex)) {
			this.$type = this.$type | 8;
		}
	};
	$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag.__typeName = 'Franca.$Text.Markup$LocalizableHtmlToMarkupConverter$Tag';
	$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag.$formatSize = function(size) {
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag.$sizeTag.set_size(size);
		return $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag.$sizeTag.toText().substring(3);
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.Markup.LocalizableHtmlToMarkupConverter.TagType
	var $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$TagType = function() {
	};
	$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$TagType.__typeName = 'Franca.$Text.Markup$LocalizableHtmlToMarkupConverter$TagType';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.Buffer
	var $Franca_Collections_Buffer$1 = function(T) {
		var $type = function(capacity) {
			this.$buffer = null;
			this.$offset = 0;
			this.$count = 0;
			this.$syncRoot = new Object();
			this.$_version = 0;
			this.$buffer = new Array(capacity);
			this.$offset = 0;
			this.$count = 0;
		};
		ss.registerGenericClassInstance($type, $Franca_Collections_Buffer$1, [T], {
			add: function(item) {
				this.$offset--;
				if (this.$offset === -1) {
					this.$offset = this.get_capacity() - 1;
				}
				this.$buffer[this.$offset] = item;
				if (this.$count < this.get_capacity()) {
					this.$count++;
				}
				this.$_version = this.$_version + 1;
			},
			copyTo: function(array, destIndex) {
				var dest = array;
				if (ss.isNullOrUndefined(dest)) {
					throw new ss.ArgumentException(ss.formatString('Array not of type {0}.', T.toString()));
				}
				if (destIndex + this.get_count() >= dest.length) {
					throw new ss.ArgumentOutOfRangeException('The number of elements in the source Buffer is greater than the available number of elements from index to the end of the destination array.');
				}
				for (var i = 0; i < this.get_count(); i++) {
					dest[destIndex + i] = this.get_item(i);
				}
			},
			get_count: function() {
				return this.$count;
			},
			get_isSynchronized: function() {
				return false;
			},
			get_syncRoot: function() {
				return this.$syncRoot;
			},
			get_capacity: function() {
				return this.$buffer.length;
			},
			get_item: function(index) {
				if (index >= this.$count) {
					throw new ss.ArgumentOutOfRangeException('Index out of range.', 'index');
				}
				return this.$buffer[$Franca_Calc.wrap$2(index + this.$offset, this.get_capacity())];
			},
			set_item: function(index, value) {
				this.$buffer[$Franca_Calc.wrap$2(index + this.$offset, this.get_capacity())] = value;
				this.$_version = this.$_version + 1;
			},
			clear: function() {
				this.$offset = 0;
				this.$count = 0;
				for (var i = 0; i < this.$buffer.length; i++) {
					this.$buffer[i] = ss.getDefaultValue(T);
				}
				this.$_version = this.$_version + 1;
			},
			contains: function(item) {
				return ss.contains(this.$buffer, item);
			},
			remove: function(item) {
				throw new ss.InvalidOperationException('Cannot remove items from Buffers');
			},
			copyTo$1: function(array, destIndex) {
				if (ss.isNullOrUndefined(array)) {
					throw new ss.ArgumentException(ss.formatString('Array was null.', T.toString()));
				}
				if (destIndex + this.get_count() >= array.length) {
					throw new ss.ArgumentOutOfRangeException('The number of elements in the source Buffer is greater than the available number of elements from index to the end of the destination array.');
				}
				for (var i = 0; i < this.get_count(); i++) {
					array[destIndex + i] = this.get_item(i);
				}
			},
			get_isReadOnly: function() {
				return false;
			},
			getEnumerator: function() {
				var $result, $state = 0, version, curIndex, i;
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								version = this.$_version;
								curIndex = this.$offset;
								i = 0;
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								if (!(i < this.$count)) {
									$state = -1;
									break $sm1;
								}
								if (curIndex === this.get_capacity()) {
									curIndex = 0;
								}
								if (version !== this.$_version) {
									throw new ss.InvalidOperationException('Collection was modified; enumeration operation may not execute.');
								}
								$result = this.$buffer[curIndex];
								$state = 2;
								return true;
							}
							case 2: {
								$state = -1;
								i++, curIndex++;
								$state = 1;
								continue $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, null, this);
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IEnumerable, ss.IEnumerable, ss.ICollection];
		});
		return $type;
	};
	$Franca_Collections_Buffer$1.__typeName = 'Franca.Collections.Buffer$1';
	ss.initGenericClass($Franca_Collections_Buffer$1, $asm, 1);
	global.Franca.Collections.Buffer$1 = $Franca_Collections_Buffer$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.ByteArray
	var $Franca_Collections_ByteArray = function() {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
	};
	$Franca_Collections_ByteArray.__typeName = 'Franca.Collections.ByteArray';
	$Franca_Collections_ByteArray.$ctor1 = function(array) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = array;
	};
	$Franca_Collections_ByteArray.$ctor2 = function(length) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = new Uint8Array(length);
	};
	$Franca_Collections_ByteArray.op_Explicit$1 = function(source) {
		return new $Franca_BinaryData.$ctor4(source.$arr);
	};
	$Franca_Collections_ByteArray.op_Explicit = function(source) {
		return new $Franca_Collections_ByteArray.$ctor1(source.get_uint8Array());
	};
	global.Franca.Collections.ByteArray = $Franca_Collections_ByteArray;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.DoubleArray
	var $Franca_Collections_DoubleArray = function() {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [Number]).call(this);
	};
	$Franca_Collections_DoubleArray.__typeName = 'Franca.Collections.DoubleArray';
	$Franca_Collections_DoubleArray.$ctor2 = function(length) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [Number]).call(this);
		this.$arr = new Float64Array(length);
	};
	$Franca_Collections_DoubleArray.$ctor1 = function(array) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [Number]).call(this);
		this.$arr = array;
	};
	global.Franca.Collections.DoubleArray = $Franca_Collections_DoubleArray;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.FloatArray
	var $Franca_Collections_FloatArray = function() {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [Number]).call(this);
	};
	$Franca_Collections_FloatArray.__typeName = 'Franca.Collections.FloatArray';
	$Franca_Collections_FloatArray.$ctor1 = function(array) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [Number]).call(this);
		this.$arr = array;
	};
	$Franca_Collections_FloatArray.$ctor2 = function(length) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [Number]).call(this);
		this.$arr = new Float32Array(length);
	};
	global.Franca.Collections.FloatArray = $Franca_Collections_FloatArray;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.IntArray
	var $Franca_Collections_IntArray = function() {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
	};
	$Franca_Collections_IntArray.__typeName = 'Franca.Collections.IntArray';
	$Franca_Collections_IntArray.$ctor1 = function(array) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = array;
	};
	$Franca_Collections_IntArray.$ctor2 = function(length) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = new Int32Array(length);
	};
	global.Franca.Collections.IntArray = $Franca_Collections_IntArray;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.SByteArray
	var $Franca_Collections_SByteArray = function() {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
	};
	$Franca_Collections_SByteArray.__typeName = 'Franca.Collections.SByteArray';
	$Franca_Collections_SByteArray.$ctor1 = function(array) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = array;
	};
	$Franca_Collections_SByteArray.$ctor2 = function(length) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = new Int8Array(length);
	};
	global.Franca.Collections.SByteArray = $Franca_Collections_SByteArray;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.ShortArray
	var $Franca_Collections_ShortArray = function() {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
	};
	$Franca_Collections_ShortArray.__typeName = 'Franca.Collections.ShortArray';
	$Franca_Collections_ShortArray.$ctor1 = function(array) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = array;
	};
	$Franca_Collections_ShortArray.$ctor2 = function(length) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = new Int16Array(length);
	};
	global.Franca.Collections.ShortArray = $Franca_Collections_ShortArray;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.TypedArray
	var $Franca_Collections_TypedArray = function() {
	};
	$Franca_Collections_TypedArray.__typeName = 'Franca.Collections.TypedArray';
	$Franca_Collections_TypedArray.createTypedArray = function(T) {
		return function() {
			if (ss.referenceEquals(T, Number)) {
				return ss.safeCast(new $Franca_Collections_FloatArray(), ss.makeGenericType($Franca_Collections_TypedArray$1, [T]));
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return ss.safeCast(new $Franca_Collections_UShortArray(), ss.makeGenericType($Franca_Collections_TypedArray$1, [T]));
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return ss.safeCast(new $Franca_Collections_ByteArray(), ss.makeGenericType($Franca_Collections_TypedArray$1, [T]));
			}
			else if (ss.referenceEquals(T, Number)) {
				return ss.safeCast(new $Franca_Collections_DoubleArray(), ss.makeGenericType($Franca_Collections_TypedArray$1, [T]));
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return ss.safeCast(new $Franca_Collections_IntArray(), ss.makeGenericType($Franca_Collections_TypedArray$1, [T]));
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return ss.safeCast(new $Franca_Collections_UIntArray(), ss.makeGenericType($Franca_Collections_TypedArray$1, [T]));
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return ss.safeCast(new $Franca_Collections_ShortArray(), ss.makeGenericType($Franca_Collections_TypedArray$1, [T]));
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return ss.safeCast(new $Franca_Collections_SByteArray(), ss.makeGenericType($Franca_Collections_TypedArray$1, [T]));
			}
			throw new ss.ArgumentException('Cannot create TypedArray of type ' + ss.getTypeName(T));
		};
	};
	global.Franca.Collections.TypedArray = $Franca_Collections_TypedArray;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.TypedArray
	var $Franca_Collections_TypedArray$1 = function(T) {
		var $type = function() {
			$Franca_Collections_TypedArray.call(this);
		};
		ss.registerGenericClassInstance($type, $Franca_Collections_TypedArray$1, [T], {
			set$2: function(array) {
				this.set$3(array, 0);
			},
			set$3: null,
			get_type: function() {
				return T;
			},
			get_item: null,
			set_item: null
		}, function() {
			return $Franca_Collections_TypedArray;
		}, function() {
			return [ss.IEnumerable, ss.IEnumerable];
		});
		return $type;
	};
	$Franca_Collections_TypedArray$1.__typeName = 'Franca.Collections.TypedArray$1';
	ss.initGenericClass($Franca_Collections_TypedArray$1, $asm, 1);
	global.Franca.Collections.TypedArray$1 = $Franca_Collections_TypedArray$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.UIntArray
	var $Franca_Collections_UIntArray = function() {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
	};
	$Franca_Collections_UIntArray.__typeName = 'Franca.Collections.UIntArray';
	$Franca_Collections_UIntArray.$ctor1 = function(array) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = array;
	};
	$Franca_Collections_UIntArray.$ctor2 = function(length) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = new Uint32Array(length);
	};
	global.Franca.Collections.UIntArray = $Franca_Collections_UIntArray;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.UShortArray
	var $Franca_Collections_UShortArray = function() {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
	};
	$Franca_Collections_UShortArray.__typeName = 'Franca.Collections.UShortArray';
	$Franca_Collections_UShortArray.$ctor1 = function(array) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = array;
	};
	$Franca_Collections_UShortArray.$ctor2 = function(length) {
		this.$arr = null;
		ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]).call(this);
		this.$arr = new Uint16Array(length);
	};
	global.Franca.Collections.UShortArray = $Franca_Collections_UShortArray;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Compression.Deflate
	var $Franca_Compression_Deflate = function() {
	};
	$Franca_Compression_Deflate.__typeName = 'Franca.Compression.Deflate';
	$Franca_Compression_Deflate.inflate = function(source, type) {
		var sourceStream = new $Franca_BinaryStream.$ctor1(source);
		try {
			{
				var destStream = new $Franca_BinaryStream();
				try {
					$Franca_Compression_Deflate.inflate$1(sourceStream, destStream, type);
					destStream.flush();
					return destStream.toBinary();
				}
				finally {
					if (ss.isValue(destStream)) {
						destStream.dispose();
					}
				}
			}
		}
		finally {
			if (ss.isValue(sourceStream)) {
				sourceStream.dispose();
			}
		}
	};
	$Franca_Compression_Deflate.inflate$1 = function(source, dest, type) {
		var ret;
		if (type === 1) {
			// skip header
			var flg;
			if (source.readByte() < 0 || (flg = source.readByte()) < 0) {
				throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: available inflate data did not terminate');
			}
			var fdict = (flg & $Franca_Compression_Deflate.$fdictFlag) === $Franca_Compression_Deflate.$fdictFlag;
			if (fdict) {
				// skip dictionary id
				for (var i = 0; i < 4; i++) {
					if (source.readByte() < 0) {
						throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: available inflate data did not terminate');
					}
				}
			}
		}
		if (dest.get_canRead() && dest.get_canSeek()) {
			{
				var reader = new $Franca_BinDataStreamReader.$ctor1(source, 2, true);
				try {
					{
						var writer = new $Franca_BinDataStreamWriter.$ctor1(dest, 2, true);
						try {
							ret = $Franca_Compression_Deflate.$puff(writer, reader);
						}
						finally {
							if (ss.isValue(writer)) {
								writer.dispose();
							}
						}
					}
				}
				finally {
					if (ss.isValue(reader)) {
						reader.dispose();
					}
				}
			}
		}
		else {
			// output stream must be able to read and seek, if it can't
			// create our own output stream and write result to dest
			{
				var seekRead = new $Franca_BinDataStreamWriter(new $Franca_BinaryStream(), 2);
				try {
					{
						var reader1 = new $Franca_BinDataStreamReader.$ctor1(source, 2, true);
						try {
							ret = $Franca_Compression_Deflate.$puff(seekRead, reader1);
							if (ret === 0) {
								seekRead.get_stream().flush();
								var data = ss.cast(seekRead.get_stream(), $Franca_BinaryStream).toBinary();
								{
									var writer1 = new $Franca_BinDataStreamWriter.$ctor1(dest, 2, true);
									try {
										writer1.write(data);
									}
									finally {
										if (ss.isValue(writer1)) {
											writer1.dispose();
										}
									}
								}
							}
						}
						finally {
							if (ss.isValue(reader1)) {
								reader1.dispose();
							}
						}
					}
				}
				finally {
					if (ss.isValue(seekRead)) {
						seekRead.dispose();
					}
				}
			}
		}
		if (ret !== 0) {
			switch (ret) {
				case 2: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: available inflate data did not terminate');
				}
				case 1: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: output space exhausted before completing inflate');
				}
				case 0: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: successful inflate');
				}
				case -1: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: invalid block type (type == 3)');
				}
				case -2: {
					throw new $Franca_Compression_DeflateException.$ctor1("Inflate failed: stored block length did not match one's complement");
				}
				case -3: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: dynamic block code description: too many length or distance codes');
				}
				case -4: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: dynamic block code description: code lengths codes incomplete');
				}
				case -5: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: dynamic block code description: repeat lengths with no first length');
				}
				case -6: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: dynamic block code description: repeat more than specified lengths');
				}
				case -7: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: dynamic block code description: invalid literal/length code lengths');
				}
				case -8: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: dynamic block code description: invalid distance code lengths');
				}
				case -9: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: dynamic block code description: missing end-of-block code');
				}
				case -10: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: invalid literal/length or distance code in fixed or dynamic block');
				}
				case -11: {
					throw new $Franca_Compression_DeflateException.$ctor1('Inflate failed: distance is too far back in fixed or dynamic block');
				}
			}
		}
		if (type === 1) {
			// skip ADLER-32 checksum
			for (var i1 = 0; i1 < 4; i1++) {
				if (source.readByte() < 0) {
					// if we encounter end of stream, it doesn't matter since we're not trying
					// to actually use the checksum value anyhow, so just return
					return;
				}
			}
		}
	};
	$Franca_Compression_Deflate.$bits = function(state, need) {
		var val;
		// bit accumulator (can use up to 20 bits)
		// load at least need bits into val
		val = state.$bitBuf;
		while (state.$bitCount < need) {
			var b = state.$in.get_stream().readByte();
			if (b < 0) {
				throw new $Franca_InvalidFormatException.$ctor1('Unexpected end of data stream in inflate');
			}
			val |= (b & 255) << state.$bitCount;
			// load eight bits 
			state.$bitCount += 8;
		}
		// drop need bits and update buffer, always zero to seven bits left 
		state.$bitBuf = val >> need;
		state.$bitCount -= need;
		// return need bits, zeroing the bits above that 
		return val & (1 << need) - 1;
	};
	$Franca_Compression_Deflate.$stored = function(state) {
		var len;
		// length of stored block 
		// discard leftover bits from current byte (assumes s->bitcnt < 8) 
		state.$bitBuf = 0;
		state.$bitCount = 0;
		// get length and check against its one's complement 
		// this is convoluted because C# streams have annoying EOF
		var b0 = state.$in.get_stream().readByte();
		var b1 = state.$in.get_stream().readByte();
		var b2 = state.$in.get_stream().readByte();
		var b3 = state.$in.get_stream().readByte();
		if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0) {
			return 2;
			// not enough input
		}
		len = b0 & 255;
		len |= (b1 & 255) << 8;
		if ((b2 & 255) !== (~len & 255) || (b3 & 255) !== (~len >>> 8 & 255)) {
			return -2;
			// didn't match complement!
		}
		if (ss.isValue(state.$out)) {
			// simplified 
			var data = state.$in.readData(len);
			if (data.get_length() < len) {
				return 2;
				// not enough input
			}
			state.$out.write(data);
		}
		else if (state.$in.get_stream().get_canSeek()) {
			state.$in.get_stream().seek(len, 1);
		}
		else {
			var data1 = state.$in.readData(len);
			if (data1.get_length() < len) {
				return 2;
				// not enough input
			}
		}
		// done with a valid stored block
		return 0;
	};
	$Franca_Compression_Deflate.$decode = function(state, h) {
		var len;
		// current number of bits in code
		var code;
		// len bits being decoded
		var first;
		// first code of length len
		var count;
		// number of codes of length len
		var index;
		// index of first code of length len in symbol table
		var bitbuf;
		// bits from stream
		var left;
		// bits left in next or left to process
		var next;
		// index of next number of codes
		bitbuf = state.$bitBuf;
		left = state.$bitCount;
		code = first = index = 0;
		len = 1;
		next = 1;
		while (true) {
			while (left > 0) {
				left--;
				code |= bitbuf & 1;
				bitbuf >>= 1;
				count = h.$count[next++];
				if (code - count < first) {
					// if length len, return symbol
					state.$bitBuf = bitbuf;
					state.$bitCount = state.$bitCount - len & 7;
					return h.$symbol[index + (code - first)];
				}
				index += count;
				// else update for next length
				first += count;
				first <<= 1;
				code <<= 1;
				len++;
			}
			left = 16 - len;
			if (left === 0) {
				break;
			}
			var b = state.$in.get_stream().readByte();
			if (b < 0) {
				throw new $Franca_InvalidFormatException.$ctor1('Unexpected end of data stream in inflate');
			}
			bitbuf = b & 255;
			if (left > 8) {
				left = 8;
			}
		}
		return -10;
		// ran out of codes
	};
	$Franca_Compression_Deflate.$construct = function(h, length, lengthOffset, n) {
		// puff.c calls this with a pointer for length, and in one instance doesn't pass in
		// the start of the array, but a later position, so the lengthOffset argument takes
		// up the role of indexing further into the array pointer, since we're not using a
		// pointer here
		var symbol;
		// current symbol when stepping through length[]
		var len;
		// current length when stepping through h->count[]
		var left;
		// number of possible codes left of current length
		var offs = new Array(16);
		// offsets in symbol table for each length
		// count number of codes of each length
		for (len = 0; len <= $Franca_Compression_Deflate.maxBits; len++) {
			h.$count[len] = 0;
		}
		for (symbol = 0; symbol < n; symbol++) {
			h.$count[length[lengthOffset + symbol]]++;
			// assumes lengths are within bounds
		}
		if (h.$count[0] === n) {
			// no codes!
			return 0;
			// complete, but decode() will fail
		}
		// check for an over-subscribed or incomplete set of lengths
		left = 1;
		// one possible code of zero length
		for (len = 1; len <= $Franca_Compression_Deflate.maxBits; len++) {
			left <<= 1;
			// one more bit, double codes left
			left -= h.$count[len];
			// deduct count from possible codes
			if (left < 0) {
				return left;
				// over-subscribed--return negative
			}
		}
		// left > 0 means incomplete
		// generate offsets into symbol table for each length for sorting
		offs[1] = 0;
		for (len = 1; len < $Franca_Compression_Deflate.maxBits; len++) {
			offs[len + 1] = offs[len] + h.$count[len];
		}
		// put symbols in table sorted by length, by symbol order within each length
		for (symbol = 0; symbol < n; symbol++) {
			if (length[lengthOffset + symbol] !== 0) {
				h.$symbol[offs[length[lengthOffset + symbol]]++] = symbol;
			}
		}
		// return zero for complete set, positive for incomplete set
		return left;
	};
	$Franca_Compression_Deflate.$codes = function(state, lencode, distcode) {
		var symbol;
		// decoded symbol
		var len;
		// length for copy
		var dist;
		// distance for copy
		// decode literals and length/distance pairs
		do {
			symbol = $Franca_Compression_Deflate.$decode(state, lencode);
			if (symbol < 0) {
				return symbol;
				// invalid symbol
			}
			if (symbol < 256) {
				// literal: symbol is the byte
				// write out the literal
				if (ss.isValue(state.$out)) {
					state.$out.writeByte(symbol);
				}
			}
			else if (symbol > 256) {
				// length
				// get and compute length
				symbol -= 257;
				if (symbol >= 29) {
					return -10;
					// invalid fixed code
				}
				len = $Franca_Compression_Deflate.$lens[symbol] + $Franca_Compression_Deflate.$bits(state, $Franca_Compression_Deflate.$lext[symbol]);
				// get and check distance
				symbol = $Franca_Compression_Deflate.$decode(state, distcode);
				if (symbol < 0) {
					return symbol;
					// invalid symbol
				}
				dist = $Franca_Compression_Deflate.$dists[symbol] + $Franca_Compression_Deflate.$bits(state, $Franca_Compression_Deflate.$dext[symbol]);
				if (dist > state.$out.get_stream().get_position() - state.$outStart) {
					return -11;
					// distance too far back
				}
				// copy length bytes from distance bytes back
				if (ss.isValue(state.$out)) {
					while (len > 0) {
						len--;
						state.$out.get_stream().seek(-dist, 1);
						var b = state.$out.get_stream().readByte();
						state.$out.get_stream().seek(dist - 1, 1);
						state.$out.writeByte(b & 255);
					}
				}
			}
		} while (symbol !== 256);
		// end of block symbol
		// done with a valid fixed or dynamic block
		return 0;
	};
	$Franca_Compression_Deflate.$fixed = function(state) {
		// decode data until end-of-block code
		return $Franca_Compression_Deflate.$codes(state, $Franca_Compression_Deflate.$lencode, $Franca_Compression_Deflate.$distcode);
	};
	$Franca_Compression_Deflate.$dynamic = function(state) {
		var nlen, ndist, ncode;
		// number of lengths in descriptor
		var index;
		// index of lengths[]
		var err;
		// construct() return value
		var lengths = new Array($Franca_Compression_Deflate.maxCodes);
		// descriptor code lengths
		var lencnt = new Array(16);
		// lencode memory
		var lensym = new Array($Franca_Compression_Deflate.maxLCodes);
		// lencode memory
		var distcnt = new Array(16);
		// distcode memory
		var distsym = new Array($Franca_Compression_Deflate.maxDCodes);
		// distcode memory
		var lencode, distcode;
		// length and distance codes
		// construct lencode and distcode
		lencode = new $Franca_$Compression_Deflate$Huffman(lencnt, lensym);
		distcode = new $Franca_$Compression_Deflate$Huffman(distcnt, distsym);
		// get number of lengths in each table, check lengths
		nlen = $Franca_Compression_Deflate.$bits(state, 5) + 257;
		ndist = $Franca_Compression_Deflate.$bits(state, 5) + 1;
		ncode = $Franca_Compression_Deflate.$bits(state, 4) + 4;
		if (nlen > $Franca_Compression_Deflate.maxLCodes || ndist > $Franca_Compression_Deflate.maxDCodes) {
			return -3;
			// bad counts
		}
		// read code length code lengths (really), missing lengths are zero
		for (index = 0; index < ncode; index++) {
			lengths[$Franca_Compression_Deflate.$order[index]] = $Franca_Compression_Deflate.$bits(state, 3);
		}
		for (; index < 19; index++) {
			lengths[$Franca_Compression_Deflate.$order[index]] = 0;
		}
		// build huffman table for code lengths codes (use lencode temporarily)
		err = $Franca_Compression_Deflate.$construct(lencode, lengths, 0, 19);
		if (err !== 0) {
			// require complete code set here
			return -4;
		}
		// read length/literal and distance code length tables
		index = 0;
		while (index < nlen + ndist) {
			var symbol;
			// decoded value
			var len;
			// last length to repeat
			symbol = $Franca_Compression_Deflate.$decode(state, lencode);
			if (symbol < 0) {
				return symbol;
				// invalid symbol
			}
			if (symbol < 16) {
				// length in 0..15
				lengths[index++] = symbol;
			}
			else {
				// repeat instruction
				len = 0;
				// assume repeating zeros
				if (symbol === 16) {
					// repeat last length 3..6 times
					if (index === 0) {
						return -5;
						// no last length!
					}
					len = lengths[index - 1];
					// last length
					symbol = 3 + $Franca_Compression_Deflate.$bits(state, 2);
				}
				else if (symbol === 17) {
					// repeat zero 3..10 times
					symbol = 3 + $Franca_Compression_Deflate.$bits(state, 3);
				}
				else {
					// == 18, repeat zero 11..138 times
					symbol = 11 + $Franca_Compression_Deflate.$bits(state, 7);
				}
				if (index + symbol > nlen + ndist) {
					return -6;
					// too many lengths!
				}
				while (symbol > 0) {
					// repeat last or zero symbol times
					symbol--;
					lengths[index++] = len;
				}
			}
		}
		// check for end-of-block code -- there better be one!
		if (lengths[256] === 0) {
			return -9;
		}
		// build huffman table for literal/length codes
		err = $Franca_Compression_Deflate.$construct(lencode, lengths, 0, nlen);
		if (err !== 0 && (err < 0 || nlen !== lencode.$count[0] + lencode.$count[1])) {
			return -7;
			// incomplete code ok only for single length 1 code
		}
		// build huffman table for distance codes
		err = $Franca_Compression_Deflate.$construct(distcode, lengths, nlen, ndist);
		if (err !== 0 && (err < 0 || ndist !== distcode.$count[0] + distcode.$count[1])) {
			return -8;
			// incomplete code ok only for single length 1 code
		}
		// decode data until end-of-block code
		return $Franca_Compression_Deflate.$codes(state, lencode, distcode);
	};
	$Franca_Compression_Deflate.$puff = function(dest, source) {
		var state = new $Franca_$Compression_Deflate$State();
		// input/output state
		var last, type;
		// block information
		var err = 0;
		// return value
		// initialize input and output state
		state.$out = dest;
		state.$outStart = dest.get_stream().get_position();
		state.$in = source;
		try {
			// process blocks until last block or error
			do {
				last = $Franca_Compression_Deflate.$bits(state, 1);
				// one if last block
				type = $Franca_Compression_Deflate.$bits(state, 2);
				// block type 0..3
				if (type === 0) {
					err = $Franca_Compression_Deflate.$stored(state);
				}
				else if (type === 1) {
					err = $Franca_Compression_Deflate.$fixed(state);
				}
				else if (type === 2) {
					err = $Franca_Compression_Deflate.$dynamic(state);
				}
				else {
					err = -1;
					// type == 3, invalid
				}
				if (err !== 0) {
					break;
					// return with error
				}
			} while (last === 0);
		}
		catch ($t1) {
			$t1 = ss.Exception.wrap($t1);
			if (ss.isInstanceOfType($t1, $Franca_InvalidFormatException)) {
				// if bits() or decode() tries to read past available input
				err = 2;
				// available inflate data did not terminate
			}
			else if (ss.isInstanceOfType($t1, $System_IO_IOException)) {
				// if bits() or decode() tries to read past available input
				err = 2;
				// available inflate data did not terminate
			}
			else {
				var e = $t1;
				throw new $Franca_Compression_DeflateException.$ctor2('Unexpected error in ZlibInflate.Puff: ' + e.get_message(), e);
			}
		}
		return err;
	};
	global.Franca.Compression.Deflate = $Franca_Compression_Deflate;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Compression.DeflateException
	var $Franca_Compression_DeflateException = function() {
		ss.Exception.call(this);
	};
	$Franca_Compression_DeflateException.__typeName = 'Franca.Compression.DeflateException';
	$Franca_Compression_DeflateException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_Compression_DeflateException.$ctor2 = function(message, inner) {
		ss.Exception.call(this, message, inner);
	};
	global.Franca.Compression.DeflateException = $Franca_Compression_DeflateException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Compression.DeflateType
	var $Franca_Compression_DeflateType = function() {
	};
	$Franca_Compression_DeflateType.__typeName = 'Franca.Compression.DeflateType';
	global.Franca.Compression.DeflateType = $Franca_Compression_DeflateType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Compression.GZip
	var $Franca_Compression_GZip = function(op, data, offset, length) {
		this.Compression = 3;
		this.$data = null;
		this.$result = null;
		this.$op = 0;
		this.$offset = 0;
		this.$length = 0;
		this.$chunkCount = 0;
		this.$end = 0;
		this.$chunksProcessed = 0;
		this.$progress = 0;
		this.$gzip = null;
		this.$binData = null;
		this.$data = data;
		this.$op = op;
		this.$offset = offset;
		this.$length = ((length > 0) ? length : data.get_length());
	};
	$Franca_Compression_GZip.__typeName = 'Franca.Compression.GZip';
	$Franca_Compression_GZip.beginInflate = function(data, offset, length) {
		return new (ss.makeGenericType($Franca_Resumable$1, [$Franca_Compression_GZip]))(new $Franca_Compression_GZip(1, data, offset, length));
	};
	$Franca_Compression_GZip.beginDeflate = function(data, compression, offset, length) {
		var $t2 = ss.makeGenericType($Franca_Resumable$1, [$Franca_Compression_GZip]);
		var $t1 = new $Franca_Compression_GZip(0, data, offset, length);
		$t1.Compression = compression;
		return new $t2($t1);
	};
	$Franca_Compression_GZip.inflate = function(data, offset, length) {
		var resumable = $Franca_Compression_GZip.beginInflate(data, offset, length);
		resumable.run(null);
		return resumable.get_value().get_result();
	};
	$Franca_Compression_GZip.deflate = function(data, compression, offset, length) {
		var resumable = $Franca_Compression_GZip.beginDeflate(data, compression, offset, length);
		resumable.run(null);
		return resumable.get_value().get_result();
	};
	$Franca_Compression_GZip.isGZip = function(data, offset) {
		return data.get_item(offset) === 31 && data.get_item(offset + 1) === 139 && data.get_item(offset + 2) === 8;
	};
	$Franca_Compression_GZip.getUncompressedLength = function(data, offset, length) {
		if ($Franca_Compression_GZip.isGZip(data, offset)) {
			return $Franca_BinConverter.toInt32(data, offset + length - 4, 0);
		}
		else {
			return -1;
		}
	};
	global.Franca.Compression.GZip = $Franca_Compression_GZip;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Compression.GZip.CompressionLevel
	var $Franca_Compression_GZip$CompressionLevel = function() {
	};
	$Franca_Compression_GZip$CompressionLevel.__typeName = 'Franca.Compression.GZip$CompressionLevel';
	global.Franca.Compression.GZip$CompressionLevel = $Franca_Compression_GZip$CompressionLevel;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Compression.GZip.Operation
	var $Franca_Compression_GZip$Operation = function() {
	};
	$Franca_Compression_GZip$Operation.__typeName = 'Franca.Compression.GZip$Operation';
	global.Franca.Compression.GZip$Operation = $Franca_Compression_GZip$Operation;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Compression.LZString
	var $Franca_Compression_LZString = function() {
	};
	$Franca_Compression_LZString.__typeName = 'Franca.Compression.LZString';
	$Franca_Compression_LZString.compress = function(str) {
		return LZString.compress(str);
	};
	$Franca_Compression_LZString.decompress = function(str) {
		return LZString.decompress(str);
	};
	$Franca_Compression_LZString.compressToUTF16 = function(str) {
		return LZString.compressToUTF16(str);
	};
	$Franca_Compression_LZString.decompressFromUTF16 = function(str) {
		return LZString.decompressFromUTF16(str);
	};
	$Franca_Compression_LZString.compressToBase64 = function(str) {
		return LZString.compressToBase64(str);
	};
	$Franca_Compression_LZString.decompressFromBase64 = function(str) {
		return LZString.decompressFromBase64(str);
	};
	$Franca_Compression_LZString.compressToEncodedURIComponent = function(str) {
		return LZString.compressToEncodedURIComponent(str);
	};
	$Franca_Compression_LZString.decompressFromEncodedURIComponent = function(str) {
		return LZString.decompressFromEncodedURIComponent(str);
	};
	$Franca_Compression_LZString.compressToBinary = function(str) {
		return new $Franca_BinaryData.$ctor4(LZString.compressToUint8Array(str));
	};
	$Franca_Compression_LZString.decompressFromBinary = function(data) {
		return LZString.decompressFromUint8Array(data.get_uint8Array());
	};
	global.Franca.Compression.LZString = $Franca_Compression_LZString;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Compression.RectanglePacker
	var $Franca_Compression_RectanglePacker = function(rectangle, items) {
		this.$source = ss.getDefaultValue($Franca_Rectangle);
		this.$items = null;
		this.$items = ss.arrayClone(items);
		this.$source = rectangle;
	};
	$Franca_Compression_RectanglePacker.__typeName = 'Franca.Compression.RectanglePacker';
	$Franca_Compression_RectanglePacker.$ctor1 = function(width, height) {
		this.$source = ss.getDefaultValue($Franca_Rectangle);
		this.$items = null;
		this.$initialize();
		this.$source = new $Franca_Rectangle.$ctor3(0, 0, width, height);
	};
	$Franca_Compression_RectanglePacker.$ctor2 = function(width, height, items) {
		this.$source = ss.getDefaultValue($Franca_Rectangle);
		this.$items = null;
		this.$items = ss.arrayClone(items);
		this.$source = new $Franca_Rectangle.$ctor3(0, 0, width, height);
	};
	$Franca_Compression_RectanglePacker.fitLowestPowerOf2 = function(items) {
		var packerX = $Franca_Compression_RectanglePacker.$fitLowestPowerOf2(items, true);
		var packerY = $Franca_Compression_RectanglePacker.$fitLowestPowerOf2(items, false);
		return ((packerY.get_size().width * packerY.get_size().height < packerX.get_size().width * packerX.get_size().height) ? packerY : packerX);
	};
	$Franca_Compression_RectanglePacker.$fitLowestPowerOf2 = function(items, xFirst) {
		var xSize = 1;
		var ySize = 1;
		var minimumArea = 0;
		for (var $t1 = 0; $t1 < items.length; $t1++) {
			var rect = items[$t1];
			minimumArea += rect.size.width * rect.size.height;
		}
		// find first viable size
		var doX = xFirst;
		while (Math.pow(2, xSize) * Math.pow(2, ySize) < minimumArea) {
			if (doX) {
				xSize++;
			}
			else {
				ySize++;
			}
			doX = !doX;
		}
		var packer = null;
		while (ss.isNullOrUndefined(packer)) {
			var candidate = new $Franca_Compression_RectanglePacker.$ctor2(ss.Int32.trunc(Math.pow(2, xSize)), ss.Int32.trunc(Math.pow(2, ySize)), items);
			try {
				if (ss.isValue(candidate.pack())) {
					packer = candidate;
				}
			}
			catch ($t2) {
				$t2 = ss.Exception.wrap($t2);
				if (ss.isInstanceOfType($t2, $Franca_Compression_RectanglePackerException)) {
				}
				else {
					throw $t2;
				}
			}
			if (doX) {
				xSize++;
			}
			else {
				ySize++;
			}
			doX = !doX;
		}
		return packer;
	};
	$Franca_Compression_RectanglePacker.$tryFit = function(a, b, c) {
		var newRect = new $Franca_Rectangle.$ctor3(b.location.x, b.location.y, a.size.width, a.size.height);
		c.$ = newRect;
		return b.contains$1(newRect);
	};
	global.Franca.Compression.RectanglePacker = $Franca_Compression_RectanglePacker;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Compression.RectanglePackerException
	var $Franca_Compression_RectanglePackerException = function(source, dest) {
		ss.Exception.call(this, ss.formatString('Rectangle with dimensions ({0}, {1}) cannot fit into destination rectangle with dimensions ({2}, {3}).', source.size.width, source.size.height, dest.size.width, dest.size.height));
	};
	$Franca_Compression_RectanglePackerException.__typeName = 'Franca.Compression.RectanglePackerException';
	global.Franca.Compression.RectanglePackerException = $Franca_Compression_RectanglePackerException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.BackEase
	var $Franca_Easing_BackEase = function(amplitude, mode) {
		this.$a = 0;
		$Franca_Easing_EasingFormula.call(this, mode);
		this.$a = amplitude;
	};
	$Franca_Easing_BackEase.__typeName = 'Franca.Easing.BackEase';
	$Franca_Easing_BackEase.default$1 = function(mode) {
		switch (mode) {
			default:
			case 1: {
				return $Franca_Easing_BackEase.$defaultIn;
			}
			case 0: {
				return $Franca_Easing_BackEase.$defaultOut;
			}
			case 2: {
				return $Franca_Easing_BackEase.$defaultInOut;
			}
			case 3: {
				return $Franca_Easing_BackEase.$defaultOutIn;
			}
		}
	};
	$Franca_Easing_BackEase.get_in = function() {
		return $Franca_Easing_BackEase.$defaultIn;
	};
	$Franca_Easing_BackEase.get_out = function() {
		return $Franca_Easing_BackEase.$defaultOut;
	};
	$Franca_Easing_BackEase.get_inOut = function() {
		return $Franca_Easing_BackEase.$defaultInOut;
	};
	$Franca_Easing_BackEase.get_outIn = function() {
		return $Franca_Easing_BackEase.$defaultOutIn;
	};
	global.Franca.Easing.BackEase = $Franca_Easing_BackEase;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.BounceEase
	var $Franca_Easing_BounceEase = function(bounces, bounciness, mode) {
		this.$bounces = 0;
		this.$bounciness = 0;
		this.$baseAmp = 0;
		this.$baseLen = 0;
		$Franca_Easing_EasingFormula.call(this, mode);
		this.$bounces = bounces;
		this.$bounciness = bounciness;
		this.$baseAmp = 1 / Math.pow(this.$bounciness, this.$bounces);
		if (this.$bounces > 1) {
			this.$baseLen = 1 / (Math.pow(2, this.$bounces + 1.5) - 1);
		}
		else if (this.$bounces === 1) {
			this.$baseLen = 0.6;
		}
		else {
			this.$baseLen = 1;
		}
	};
	$Franca_Easing_BounceEase.__typeName = 'Franca.Easing.BounceEase';
	$Franca_Easing_BounceEase.default$1 = function(mode) {
		switch (mode) {
			default:
			case 1: {
				return $Franca_Easing_BounceEase.$defaultIn;
			}
			case 0: {
				return $Franca_Easing_BounceEase.$defaultOut;
			}
			case 2: {
				return $Franca_Easing_BounceEase.$defaultInOut;
			}
			case 3: {
				return $Franca_Easing_BounceEase.$defaultOutIn;
			}
		}
	};
	$Franca_Easing_BounceEase.get_in = function() {
		return $Franca_Easing_BounceEase.$defaultIn;
	};
	$Franca_Easing_BounceEase.get_out = function() {
		return $Franca_Easing_BounceEase.$defaultOut;
	};
	$Franca_Easing_BounceEase.get_inOut = function() {
		return $Franca_Easing_BounceEase.$defaultInOut;
	};
	$Franca_Easing_BounceEase.get_outIn = function() {
		return $Franca_Easing_BounceEase.$defaultOutIn;
	};
	global.Franca.Easing.BounceEase = $Franca_Easing_BounceEase;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.CircleEase
	var $Franca_Easing_CircleEase = function(mode) {
		$Franca_Easing_EasingFormula.call(this, mode);
	};
	$Franca_Easing_CircleEase.__typeName = 'Franca.Easing.CircleEase';
	$Franca_Easing_CircleEase.get_in = function() {
		return $Franca_Easing_CircleEase.$defaultIn;
	};
	$Franca_Easing_CircleEase.get_out = function() {
		return $Franca_Easing_CircleEase.$defaultOut;
	};
	$Franca_Easing_CircleEase.get_inOut = function() {
		return $Franca_Easing_CircleEase.$defaultInOut;
	};
	$Franca_Easing_CircleEase.get_outIn = function() {
		return $Franca_Easing_CircleEase.$defaultOutIn;
	};
	global.Franca.Easing.CircleEase = $Franca_Easing_CircleEase;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.CubicEase
	var $Franca_Easing_CubicEase = function(mode) {
		$Franca_Easing_PowerEase.$ctor1.call(this, 3, mode);
	};
	$Franca_Easing_CubicEase.__typeName = 'Franca.Easing.CubicEase';
	$Franca_Easing_CubicEase.get_in = function() {
		return $Franca_Easing_CubicEase.$defaultIn;
	};
	$Franca_Easing_CubicEase.get_out = function() {
		return $Franca_Easing_CubicEase.$defaultOut;
	};
	$Franca_Easing_CubicEase.get_inOut = function() {
		return $Franca_Easing_CubicEase.$defaultInOut;
	};
	$Franca_Easing_CubicEase.get_outIn = function() {
		return $Franca_Easing_CubicEase.$defaultOutIn;
	};
	global.Franca.Easing.CubicEase = $Franca_Easing_CubicEase;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.EaseMode
	var $Franca_Easing_EaseMode = function() {
	};
	$Franca_Easing_EaseMode.__typeName = 'Franca.Easing.EaseMode';
	global.Franca.Easing.EaseMode = $Franca_Easing_EaseMode;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.EasingFormula
	var $Franca_Easing_EasingFormula = function(mode) {
		this.$mode = 0;
		if (ss.isValue(mode)) {
			this.$mode = ss.unbox(mode);
		}
		else {
			this.$mode = 2;
		}
	};
	$Franca_Easing_EasingFormula.__typeName = 'Franca.Easing.EasingFormula';
	global.Franca.Easing.EasingFormula = $Franca_Easing_EasingFormula;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.ElasticEase
	var $Franca_Easing_ElasticEase = function(oscillations, springiness, mode) {
		this.$n = 0;
		this.$s = 0;
		$Franca_Easing_EasingFormula.call(this, mode);
		this.$n = oscillations;
		this.$s = springiness;
	};
	$Franca_Easing_ElasticEase.__typeName = 'Franca.Easing.ElasticEase';
	$Franca_Easing_ElasticEase.default$1 = function(mode) {
		switch (mode) {
			default:
			case 1: {
				return $Franca_Easing_ElasticEase.$defaultIn;
			}
			case 0: {
				return $Franca_Easing_ElasticEase.$defaultOut;
			}
			case 2: {
				return $Franca_Easing_ElasticEase.$defaultInOut;
			}
			case 3: {
				return $Franca_Easing_ElasticEase.$defaultOutIn;
			}
		}
	};
	$Franca_Easing_ElasticEase.get_in = function() {
		return $Franca_Easing_ElasticEase.$defaultIn;
	};
	$Franca_Easing_ElasticEase.get_out = function() {
		return $Franca_Easing_ElasticEase.$defaultOut;
	};
	$Franca_Easing_ElasticEase.get_inOut = function() {
		return $Franca_Easing_ElasticEase.$defaultInOut;
	};
	$Franca_Easing_ElasticEase.get_outIn = function() {
		return $Franca_Easing_ElasticEase.$defaultOutIn;
	};
	global.Franca.Easing.ElasticEase = $Franca_Easing_ElasticEase;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.ExponentialEase
	var $Franca_Easing_ExponentialEase = function(exponent, mode) {
		this.$a = 0;
		$Franca_Easing_EasingFormula.call(this, mode);
		this.$a = exponent;
	};
	$Franca_Easing_ExponentialEase.__typeName = 'Franca.Easing.ExponentialEase';
	$Franca_Easing_ExponentialEase.default$1 = function(mode) {
		switch (mode) {
			default:
			case 1: {
				return $Franca_Easing_ExponentialEase.$defaultIn;
			}
			case 0: {
				return $Franca_Easing_ExponentialEase.$defaultOut;
			}
			case 2: {
				return $Franca_Easing_ExponentialEase.$defaultInOut;
			}
			case 3: {
				return $Franca_Easing_ExponentialEase.$defaultOutIn;
			}
		}
	};
	$Franca_Easing_ExponentialEase.get_in = function() {
		return $Franca_Easing_ExponentialEase.$defaultIn;
	};
	$Franca_Easing_ExponentialEase.get_out = function() {
		return $Franca_Easing_ExponentialEase.$defaultOut;
	};
	$Franca_Easing_ExponentialEase.get_inOut = function() {
		return $Franca_Easing_ExponentialEase.$defaultInOut;
	};
	$Franca_Easing_ExponentialEase.get_outIn = function() {
		return $Franca_Easing_ExponentialEase.$defaultOutIn;
	};
	global.Franca.Easing.ExponentialEase = $Franca_Easing_ExponentialEase;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.IEasing
	var $Franca_Easing_IEasing = function() {
	};
	$Franca_Easing_IEasing.__typeName = 'Franca.Easing.IEasing';
	global.Franca.Easing.IEasing = $Franca_Easing_IEasing;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.PowerEase
	var $Franca_Easing_PowerEase = function(mode) {
		this.p = 0;
		$Franca_Easing_EasingFormula.call(this, mode);
		this.p = 2;
	};
	$Franca_Easing_PowerEase.__typeName = 'Franca.Easing.PowerEase';
	$Franca_Easing_PowerEase.$ctor1 = function(power, mode) {
		this.p = 0;
		$Franca_Easing_EasingFormula.call(this, mode);
		this.p = power;
	};
	$Franca_Easing_PowerEase.default$1 = function(mode) {
		switch (mode) {
			default:
			case 1: {
				return $Franca_Easing_PowerEase.$defaultIn;
			}
			case 0: {
				return $Franca_Easing_PowerEase.$defaultOut;
			}
			case 2: {
				return $Franca_Easing_PowerEase.$defaultInOut;
			}
			case 3: {
				return $Franca_Easing_PowerEase.$defaultOutIn;
			}
		}
	};
	$Franca_Easing_PowerEase.get_in = function() {
		return $Franca_Easing_PowerEase.$defaultIn;
	};
	$Franca_Easing_PowerEase.get_out = function() {
		return $Franca_Easing_PowerEase.$defaultOut;
	};
	$Franca_Easing_PowerEase.get_inOut = function() {
		return $Franca_Easing_PowerEase.$defaultInOut;
	};
	$Franca_Easing_PowerEase.get_outIn = function() {
		return $Franca_Easing_PowerEase.$defaultOutIn;
	};
	global.Franca.Easing.PowerEase = $Franca_Easing_PowerEase;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.QuadraticEase
	var $Franca_Easing_QuadraticEase = function(mode) {
		$Franca_Easing_PowerEase.$ctor1.call(this, 2, mode);
	};
	$Franca_Easing_QuadraticEase.__typeName = 'Franca.Easing.QuadraticEase';
	$Franca_Easing_QuadraticEase.get_in = function() {
		return $Franca_Easing_QuadraticEase.$defaultIn;
	};
	$Franca_Easing_QuadraticEase.get_out = function() {
		return $Franca_Easing_QuadraticEase.$defaultOut;
	};
	$Franca_Easing_QuadraticEase.get_inOut = function() {
		return $Franca_Easing_QuadraticEase.$defaultInOut;
	};
	$Franca_Easing_QuadraticEase.get_outIn = function() {
		return $Franca_Easing_QuadraticEase.$defaultOutIn;
	};
	global.Franca.Easing.QuadraticEase = $Franca_Easing_QuadraticEase;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Easing.SineEase
	var $Franca_Easing_SineEase = function(mode) {
		$Franca_Easing_EasingFormula.call(this, mode);
	};
	$Franca_Easing_SineEase.__typeName = 'Franca.Easing.SineEase';
	$Franca_Easing_SineEase.get_in = function() {
		return $Franca_Easing_SineEase.$defaultIn;
	};
	$Franca_Easing_SineEase.get_out = function() {
		return $Franca_Easing_SineEase.$defaultOut;
	};
	$Franca_Easing_SineEase.get_inOut = function() {
		return $Franca_Easing_SineEase.$defaultInOut;
	};
	$Franca_Easing_SineEase.get_outIn = function() {
		return $Franca_Easing_SineEase.$defaultOutIn;
	};
	global.Franca.Easing.SineEase = $Franca_Easing_SineEase;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.Formatting
	var $Franca_Gui_Formatting = function(size, bold, italic, underline, kerning, color) {
		this.size = 0;
		this.bold = false;
		this.italic = false;
		this.underline = false;
		this.kerning = false;
		this.color = null;
		this.baseSize = 0;
		this.baseBold = false;
		this.baseItalic = false;
		this.baseUnderline = false;
		this.baseKerning = false;
		this.baseColor = null;
		this.baseSize = size;
		this.baseBold = bold;
		this.baseItalic = italic;
		this.baseUnderline = underline;
		this.baseKerning = kerning;
		this.baseColor = color;
		this.reset();
	};
	$Franca_Gui_Formatting.__typeName = 'Franca.Gui.Formatting';
	global.Franca.Gui.Formatting = $Franca_Gui_Formatting;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.GuiCompilationException
	var $Franca_Gui_GuiCompilationException = function(errorsText, errors) {
		this.$errors = null;
		ss.Exception.call(this, errorsText);
		this.$errors = errors;
	};
	$Franca_Gui_GuiCompilationException.__typeName = 'Franca.Gui.GuiCompilationException';
	global.Franca.Gui.GuiCompilationException = $Franca_Gui_GuiCompilationException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.GuiCompilationException.CompilerError
	var $Franca_Gui_GuiCompilationException$CompilerError = function(isWarning, errorNumber, errorText) {
		this.column = 0;
		this.errorNumber = null;
		this.errorText = null;
		this.fileName = null;
		this.isWarning = false;
		this.line = 0;
		this.isWarning = isWarning;
		this.errorNumber = errorNumber;
		this.errorText = errorText;
	};
	$Franca_Gui_GuiCompilationException$CompilerError.__typeName = 'Franca.Gui.GuiCompilationException$CompilerError';
	$Franca_Gui_GuiCompilationException$CompilerError.$ctor1 = function(isWarning, errorNumber, errorText, fileName, line, column) {
		$Franca_Gui_GuiCompilationException$CompilerError.call(this, isWarning, errorNumber, errorText);
		this.fileName = fileName;
		this.line = line;
		this.column = column;
	};
	global.Franca.Gui.GuiCompilationException$CompilerError = $Franca_Gui_GuiCompilationException$CompilerError;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.Documentation.GenerateDocsAttribute
	var $Franca_Gui_Documentation_GenerateDocsAttribute = function() {
	};
	$Franca_Gui_Documentation_GenerateDocsAttribute.__typeName = 'Franca.Gui.Documentation.GenerateDocsAttribute';
	global.Franca.Gui.Documentation.GenerateDocsAttribute = $Franca_Gui_Documentation_GenerateDocsAttribute;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.Documentation.GuiSupportAttribute
	var $Franca_Gui_Documentation_GuiSupportAttribute = function() {
	};
	$Franca_Gui_Documentation_GuiSupportAttribute.__typeName = 'Franca.Gui.Documentation.GuiSupportAttribute';
	global.Franca.Gui.Documentation.GuiSupportAttribute = $Franca_Gui_Documentation_GuiSupportAttribute;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IO.LocalStorage
	var $Franca_IO_LocalStorage = function() {
	};
	$Franca_IO_LocalStorage.__typeName = 'Franca.IO.LocalStorage';
	$Franca_IO_LocalStorage.compressUTF16 = function(str) {
		return $Franca_Compression_LZString.compressToUTF16(str);
	};
	$Franca_IO_LocalStorage.decompressUTF16 = function(str) {
		// we shouldn't get here if DISABLE_STORAGE_UTF16 is defined, because nothign will be stored with that encoding
		return $Franca_Compression_LZString.decompressFromUTF16(str);
	};
	$Franca_IO_LocalStorage.inspect = function() {
		return $Franca_IO_LocalStorage.inspect$1('');
	};
	$Franca_IO_LocalStorage.inspect$1 = function(searchPath) {
		if (!$Franca_IO_LocalStorage.available) {
			return 'LocalStorage unavailable';
		}
		searchPath = $Franca_IO_LocalStorage.getAbsolutePath(searchPath);
		var str = new ss.StringBuilder(ss.formatString('LocalStorage contents:{0}{1}', (!$System_StringExtensions.isNullOrEmpty(searchPath, false) ? (' (' + searchPath + ')') : ''), '\n'));
		var type = {};
		var encoding = {};
		var $t1 = ss.getEnumerator($Franca_IO_LocalStorage.getPaths(searchPath));
		try {
			while ($t1.moveNext()) {
				var path = $t1.current();
				var value = { $: $Franca_IO_LocalStorage.readRaw(path) };
				try {
					$Franca_IO_LocalStorage.$readHeader(value, type, encoding);
					switch (type.$) {
						default: {
							break;
						}
						case 0: {
							value.$ = '"' + $Franca_IO_LocalStorage.decodeText(value.$, encoding.$, false) + '"';
							break;
						}
						case 1: {
							value.$ = $Franca_Text_Base64.decode($Franca_IO_LocalStorage.decodeText(value.$, encoding.$, false)).toString$1(0, true, false, true);
							break;
						}
						case 2: {
							value.$ = $Franca_IO_LocalStorage.decodeText(value.$, encoding.$, false);
							break;
						}
					}
					$System_StringBuilderFixes.appendFormat(str, '  {0}: {3} ({1}/{2}){4}', [path, $System_EnumExtensions.getName($Franca_IO_StorageType).call(null, type.$), $System_EnumExtensions.getName($Franca_IO_StorageEncoding).call(null, encoding.$), value.$, '\n']);
				}
				catch ($t2) {
					var e = ss.Exception.wrap($t2);
					$System_StringBuilderFixes.appendFormat(str, '  {0}: {3} (raw, {1}: {2}){4}', [path, ss.getTypeName(ss.getInstanceType(e)), e.get_message(), value.$, '\n']);
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return str.toString();
	};
	$Franca_IO_LocalStorage.clear = function() {
		if (!$Franca_IO_LocalStorage.available) {
			return;
		}
		$Franca_IO_LocalStorage.storage.clear();
	};
	$Franca_IO_LocalStorage.getAbsolutePath = function(searchPath) {
		return $Franca_Platform.makeNonRelativePath('', searchPath, $Franca_IO_LocalStorage.pathSeparator);
	};
	$Franca_IO_LocalStorage.getPaths = function(searchPath) {
		return new ss.IteratorBlockEnumerable(function() {
			return (function(searchPath) {
				var $result, $state = 0, $t1, path, $t2, path1;
				var $finally = function() {
					$t1.dispose();
				};
				var $finally1 = function() {
					$t2.dispose();
				};
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								if (!$Franca_IO_LocalStorage.available) {
									$state = -1;
									break $sm1;
								}
								searchPath = $Franca_IO_LocalStorage.getAbsolutePath(searchPath);
								if ($System_StringExtensions.isNullOrEmpty(searchPath, false)) {
									$t1 = ss.getEnumerator($Franca_IO_LocalStorage.get_paths());
									$state = 5;
									continue $sm1;
								}
								$state = 1;
								continue $sm1;
							}
							case 5: {
								$state = 3;
								if (!$t1.moveNext()) {
									$state = 4;
									continue $sm1;
								}
								path = $t1.current();
								$result = path;
								$state = 5;
								return true;
							}
							case 4: {
								$state = -1;
								$finally.call(this);
								$state = 2;
								continue $sm1;
							}
							case 2: {
								$state = -1;
								break $sm1;
							}
							case 1: {
								$state = -1;
								$t2 = ss.getEnumerator($Franca_IO_LocalStorage.get_paths());
								$state = 8;
								continue $sm1;
							}
							case 8: {
								$state = 6;
								if (!$t2.moveNext()) {
									$state = 7;
									continue $sm1;
								}
								path1 = $t2.current();
								if (ss.startsWithString(path1, searchPath)) {
									$result = path1;
									$state = 8;
									return true;
								}
								$state = 8;
								continue $sm1;
							}
							case 7: {
								$state = -1;
								$finally1.call(this);
								$state = -1;
								break $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, function() {
					try {
						switch ($state) {
							case 3:
							case 4:
							case 5: {
								try {
									break;
								}
								finally {
									$finally.call(this);
								}
							}
							case 6:
							case 7:
							case 8: {
								try {
									break;
								}
								finally {
									$finally1.call(this);
								}
							}
						}
					}
					finally {
						$state = -1;
					}
				}, this);
			}).call(this, searchPath);
		}, this);
	};
	$Franca_IO_LocalStorage.get_paths = function() {
		return new ss.IteratorBlockEnumerable(function() {
			return (function() {
				var $result, $state = 0, i, key;
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								if (!$Franca_IO_LocalStorage.available) {
									$state = -1;
									break $sm1;
								}
								i = 0;
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								if (!(i < $Franca_IO_LocalStorage.storage.length)) {
									$state = -1;
									break $sm1;
								}
								key = $Franca_IO_LocalStorage.storage.key(i);
								if (!(key == null)) {
									$result = key;
									$state = 2;
									return true;
								}
								$state = 2;
								continue $sm1;
							}
							case 2: {
								$state = -1;
								i++;
								$state = 1;
								continue $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, null, this);
			}).call(this);
		}, this);
	};
	$Franca_IO_LocalStorage.contains = function(path) {
		return $Franca_IO_LocalStorage.$contains(path, false);
	};
	$Franca_IO_LocalStorage.containsRaw = function(path) {
		return $Franca_IO_LocalStorage.$contains(path, true);
	};
	$Franca_IO_LocalStorage.$contains = function(path, raw) {
		if (!$Franca_IO_LocalStorage.available) {
			return false;
		}
		if (!raw) {
			path = $Franca_IO_LocalStorage.getAbsolutePath(path);
		}
		return Enumerable.from($Franca_IO_LocalStorage.get_paths()).contains(path);
	};
	$Franca_IO_LocalStorage.remove = function(path) {
		return $Franca_IO_LocalStorage.$remove(path, false);
	};
	$Franca_IO_LocalStorage.removeRaw = function(path) {
		return $Franca_IO_LocalStorage.$remove(path, true);
	};
	$Franca_IO_LocalStorage.$remove = function(path, raw) {
		if (!$Franca_IO_LocalStorage.available) {
			return false;
		}
		if (!raw) {
			path = $Franca_IO_LocalStorage.getAbsolutePath(path);
		}
		var contains = $Franca_IO_LocalStorage.$contains(path, raw);
		$Franca_IO_LocalStorage.storage.removeItem(path);
		return contains;
	};
	$Franca_IO_LocalStorage.writeRaw = function(path, value) {
		if (!$Franca_IO_LocalStorage.available) {
			return;
		}
		try {
			$Franca_IO_LocalStorage.storage[path] = value;
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			throw new $Franca_IO_StorageException.$ctor1("Exception while trying to set value '" + path + "': " + e.get_message());
		}
	};
	$Franca_IO_LocalStorage.readRaw = function(path) {
		if (!$Franca_IO_LocalStorage.available) {
			throw new ss.InvalidOperationException($Franca_IO_LocalStorage.$unavailableMessage);
		}
		var value;
		try {
			value = $Franca_IO_LocalStorage.storage[path];
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			throw new $Franca_IO_StorageException.$ctor1("Exception while trying to read value '" + path + "': " + e.get_message());
		}
		return value;
	};
	$Franca_IO_LocalStorage.write$1 = function(path, value) {
		if (!$Franca_IO_LocalStorage.available) {
			throw new ss.InvalidOperationException($Franca_IO_LocalStorage.$unavailableMessage);
		}
		path = $Franca_IO_LocalStorage.getAbsolutePath(path);
		$Franca_IO_LocalStorage.write$2(path, value, 1);
	};
	$Franca_IO_LocalStorage.write$2 = function(path, value, encoding) {
		if (!$Franca_IO_LocalStorage.available) {
			throw new ss.InvalidOperationException($Franca_IO_LocalStorage.$unavailableMessage);
		}
		path = $Franca_IO_LocalStorage.getAbsolutePath(path);
		value = $Franca_IO_LocalStorage.$createHeader(0, encoding) + $Franca_IO_LocalStorage.encodeText(value, encoding);
		try {
			$Franca_IO_LocalStorage.storage[path] = value;
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			throw new $Franca_IO_StorageException.$ctor1("Exception while trying to set value '" + path + "': " + e.get_message());
		}
	};
	$Franca_IO_LocalStorage.encodeText = function(text, encoding) {
		var compressed;
		switch (encoding) {
			default: {
				compressed = text;
				break;
			}
			case 1: {
				// disable the warning on CompressUTF16 since with DISABLE_STORAGE_UTF16 
				// we're legit never supposed to get here
				compressed = $Franca_IO_LocalStorage.compressUTF16(text);
				break;
			}
			case 2: {
				compressed = $Franca_Compression_LZString.compressToBase64(text);
				break;
			}
			case 3: {
				compressed = $Franca_Compression_LZString.compressToEncodedURIComponent(text);
				break;
			}
		}
		return compressed;
	};
	$Franca_IO_LocalStorage.readText = function(path) {
		if (!$Franca_IO_LocalStorage.available) {
			throw new ss.InvalidOperationException($Franca_IO_LocalStorage.$unavailableMessage);
		}
		path = $Franca_IO_LocalStorage.getAbsolutePath(path);
		if (!$Franca_IO_LocalStorage.contains(path)) {
			throw new $Franca_IO_StorageException.$ctor1("Storage path '" + path + "' not found");
		}
		var type = {};
		var encoding = {};
		var value = {};
		try {
			value.$ = $Franca_IO_LocalStorage.storage[path];
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			throw new $Franca_IO_StorageException.$ctor1("Exception while trying to read value '" + path + "': " + e.get_message());
		}
		$Franca_IO_LocalStorage.$readHeader(value, type, encoding);
		if (type.$ !== 0) {
			throw new $Franca_IO_StorageException.$ctor1("Exception while trying to read text value '" + path + "': type was incorrect (" + $System_EnumExtensions.getName($Franca_IO_StorageType).call(null, type.$) + ')');
		}
		return $Franca_IO_LocalStorage.decodeText(value.$, encoding.$, true);
	};
	$Franca_IO_LocalStorage.decodeText = function(encodedText, encoding, errorIfUnknown) {
		switch (encoding) {
			default: {
				if (errorIfUnknown) {
					throw new $Franca_IO_StorageException.$ctor1('Exception while trying to decode text value: unknown encoding ' + $System_EnumExtensions.getName($Franca_IO_StorageEncoding).call(null, encoding));
				}
				return encodedText;
			}
			case 0: {
				return encodedText;
			}
			case 1: {
				return $Franca_IO_LocalStorage.decompressUTF16(encodedText);
			}
			case 2: {
				return $Franca_Compression_LZString.decompressFromBase64(encodedText);
			}
			case 3: {
				return $Franca_Compression_LZString.decompressFromEncodedURIComponent(encodedText);
			}
		}
	};
	$Franca_IO_LocalStorage.write = function(path, data) {
		if (!$Franca_IO_LocalStorage.available) {
			throw new ss.InvalidOperationException($Franca_IO_LocalStorage.$unavailableMessage);
		}
		path = $Franca_IO_LocalStorage.getAbsolutePath(path);
		var encoding = 1;
		var value = $Franca_IO_LocalStorage.$createHeader(1, encoding) + $Franca_IO_LocalStorage.encodeText($Franca_Text_Base64.encode(data), encoding);
		try {
			$Franca_IO_LocalStorage.storage[path] = value;
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			throw new $Franca_IO_StorageException.$ctor1("Exception while trying to set value '" + path + "': " + e.get_message());
		}
	};
	$Franca_IO_LocalStorage.readBinary = function(path) {
		if (!$Franca_IO_LocalStorage.available) {
			throw new ss.InvalidOperationException($Franca_IO_LocalStorage.$unavailableMessage);
		}
		path = $Franca_IO_LocalStorage.getAbsolutePath(path);
		if (!$Franca_IO_LocalStorage.contains(path)) {
			throw new $Franca_IO_StorageException.$ctor1("Storage path '" + path + "' not found");
		}
		var type = {};
		var encoding = {};
		var value = {};
		try {
			value.$ = $Franca_IO_LocalStorage.storage[path];
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			throw new $Franca_IO_StorageException.$ctor1("Exception while trying to read value '" + path + "': " + e.get_message());
		}
		$Franca_IO_LocalStorage.$readHeader(value, type, encoding);
		if (type.$ !== 1) {
			throw new $Franca_IO_StorageException.$ctor1("Exception while trying to read binary value '" + path + "': type was incorrect (" + $System_EnumExtensions.getName($Franca_IO_StorageType).call(null, type.$) + ')');
		}
		return $Franca_Text_Base64.decode($Franca_IO_LocalStorage.decodeText(value.$, encoding.$, true));
	};
	$Franca_IO_LocalStorage.writeObject = function(T) {
		return function(path, obj) {
			if (!$Franca_IO_LocalStorage.available) {
				throw new ss.InvalidOperationException($Franca_IO_LocalStorage.$unavailableMessage);
			}
			path = $Franca_IO_LocalStorage.getAbsolutePath(path);
			var encoding = 1;
			var value = $Franca_IO_LocalStorage.$createHeader(2, encoding) + $Franca_IO_LocalStorage.encodeText($Franca_Serialization_Json.stringify(obj.toJson(), 0), encoding);
			try {
				$Franca_IO_LocalStorage.storage[path] = value;
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				throw new $Franca_IO_StorageException.$ctor1("Exception while trying to set value '" + path + "': " + e.get_message());
			}
		};
	};
	$Franca_IO_LocalStorage.readObjectProp = function(T) {
		return function(path, propertyGet, propertySet) {
			var dest = { $: propertyGet() };
			$Franca_IO_LocalStorage.readObject$1(T).call(null, path, dest);
			propertySet(dest.$);
		};
	};
	$Franca_IO_LocalStorage.readObject = function(T) {
		return function(path) {
			if (!$Franca_IO_LocalStorage.available) {
				throw new ss.InvalidOperationException($Franca_IO_LocalStorage.$unavailableMessage);
			}
			path = $Franca_IO_LocalStorage.getAbsolutePath(path);
			if (!$Franca_IO_LocalStorage.contains(path)) {
				throw new $Franca_IO_StorageException.$ctor1("Storage path '" + path + "' not found");
			}
			var type = {};
			var encoding = {};
			var value = {};
			try {
				value.$ = $Franca_IO_LocalStorage.storage[path];
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				throw new $Franca_IO_StorageException.$ctor1("Exception while trying to read value '" + path + "': " + e.get_message());
			}
			$Franca_IO_LocalStorage.$readHeader(value, type, encoding);
			if (type.$ !== 2) {
				throw new $Franca_IO_StorageException.$ctor1("Exception while trying to read object value '" + path + "': type was incorrect (" + $System_EnumExtensions.getName($Franca_IO_StorageType).call(null, type.$) + ')');
			}
			var json = $Franca_Serialization_Json.parse($Franca_IO_LocalStorage.decodeText(value.$, encoding.$, true));
			return $Franca_JsonValue.create(T).call(null, json);
		};
	};
	$Franca_IO_LocalStorage.readObject$1 = function(T) {
		return function(path, dest) {
			if (!$Franca_IO_LocalStorage.available) {
				throw new ss.InvalidOperationException($Franca_IO_LocalStorage.$unavailableMessage);
			}
			path = $Franca_IO_LocalStorage.getAbsolutePath(path);
			if (!$Franca_IO_LocalStorage.contains(path)) {
				throw new $Franca_IO_StorageException.$ctor1("Storage path '" + path + "' not found");
			}
			var type = {};
			var encoding = {};
			var value = {};
			try {
				value.$ = $Franca_IO_LocalStorage.storage[path];
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				throw new $Franca_IO_StorageException.$ctor1("Exception while trying to read value '" + path + "': " + e.get_message());
			}
			$Franca_IO_LocalStorage.$readHeader(value, type, encoding);
			if (type.$ !== 2) {
				throw new $Franca_IO_StorageException.$ctor1("Exception while trying to read object value '" + path + "': type was incorrect (" + $System_EnumExtensions.getName($Franca_IO_StorageType).call(null, type.$) + ')');
			}
			var json = $Franca_Serialization_Json.parse($Franca_IO_LocalStorage.decodeText(value.$, encoding.$, true));
			dest.$ = ss.cast($Franca_IMappableExtensions.objectFromJson(dest.$, json), T);
		};
	};
	$Franca_IO_LocalStorage.$createHeader = function(type, encoding) {
		switch (type) {
			case 15: {
				throw new ss.NotImplementedException('Invalid storage type ' + $System_EnumExtensions.getName($Franca_IO_StorageType).call(null, type));
			}
			default: {
				switch (encoding) {
					default: {
						throw new ss.ArgumentException('Invalid encoding type ' + $System_EnumExtensions.getName($Franca_IO_StorageEncoding).call(null, encoding));
					}
					case 0:
					case 1:
					case 3:
					case 2: {
						return ss.formatNumber(type & 15, 'X1') + ss.formatNumber(encoding & 15, 'X1');
					}
				}
			}
		}
	};
	$Franca_IO_LocalStorage.$readHeader = function(value, type, encoding) {
		var typeVal = {};
		if (!$Franca_Calc.tryParseHex$3(value.$, 0, typeVal, true, 1, 1)) {
			throw new $Franca_IO_StorageException.$ctor1('Invalid value in storage, could not parse header type');
		}
		if (!$Franca_EnumHelper.tryCast($Franca_IO_StorageType).call(null, typeVal.$, type)) {
			throw new $Franca_IO_StorageException.$ctor1('Invalid value in storage, could not parse header type');
		}
		if (type.$ !== 15) {
			var encodeVal = {};
			if (!$Franca_Calc.tryParseHex$3(value.$, 1, encodeVal, true, 1, 1)) {
				throw new $Franca_IO_StorageException.$ctor1('Invalid text value in storage, could not parse encoding type');
			}
			if (!$Franca_EnumHelper.tryCast($Franca_IO_StorageEncoding).call(null, encodeVal.$, encoding)) {
				throw new $Franca_IO_StorageException.$ctor1('Invalid text value in storage, could not parse encoding type');
			}
			value.$ = value.$.substring(2);
		}
		else {
			throw new $Franca_IO_StorageException.$ctor1('Invalid value in storage, unknown or reserved header type');
		}
	};
	global.Franca.IO.LocalStorage = $Franca_IO_LocalStorage;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IO.Storage
	var $Franca_IO_Storage = function(root) {
		this.$parent = null;
		this.$root = null;
		if ($System_StringExtensions.isNullOrEmpty(root, false)) {
			throw new ss.ArgumentException('LocalStorage instance root cannot be empty');
		}
		if (ss.startsWithString(root, $Franca_IO_LocalStorage.pathSeparator)) {
			root = root.substring(1);
		}
		if (!ss.endsWithString(root, $Franca_IO_LocalStorage.pathSeparator)) {
			root += $Franca_IO_LocalStorage.pathSeparator;
		}
		this.$root = root;
	};
	$Franca_IO_Storage.__typeName = 'Franca.IO.Storage';
	$Franca_IO_Storage.$ctor1 = function(parent, root) {
		$Franca_IO_Storage.call(this, root);
		this.$parent = parent;
	};
	global.Franca.IO.Storage = $Franca_IO_Storage;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IO.StorageEncoding
	var $Franca_IO_StorageEncoding = function() {
	};
	$Franca_IO_StorageEncoding.__typeName = 'Franca.IO.StorageEncoding';
	global.Franca.IO.StorageEncoding = $Franca_IO_StorageEncoding;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IO.StorageException
	var $Franca_IO_StorageException = function() {
		ss.Exception.call(this);
	};
	$Franca_IO_StorageException.__typeName = 'Franca.IO.StorageException';
	$Franca_IO_StorageException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_IO_StorageException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.IO.StorageException = $Franca_IO_StorageException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IO.StorageType
	var $Franca_IO_StorageType = function() {
	};
	$Franca_IO_StorageType.__typeName = 'Franca.IO.StorageType';
	global.Franca.IO.StorageType = $Franca_IO_StorageType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.IBaseStream
	var $Franca_JS_IBaseStream = function() {
	};
	$Franca_JS_IBaseStream.__typeName = 'Franca.JS.IBaseStream';
	global.Franca.JS.IBaseStream = $Franca_JS_IBaseStream;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.IBinaryStreamJS
	var $Franca_JS_IBinaryStreamJS = function() {
	};
	$Franca_JS_IBinaryStreamJS.__typeName = 'Franca.JS.IBinaryStreamJS';
	global.Franca.JS.IBinaryStreamJS = $Franca_JS_IBinaryStreamJS;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.JsColor
	var $Franca_JS_JsColor = function() {
		this.$code = null;
		this.$alpha = 0;
	};
	$Franca_JS_JsColor.__typeName = 'Franca.JS.JsColor';
	$Franca_JS_JsColor.$ctor1 = function(color) {
		this.$code = null;
		this.$alpha = 0;
		this.$code = '#' + ss.formatNumber(color.get_r(), 'X2') + ss.formatNumber(color.get_g(), 'X2') + ss.formatNumber(color.get_b(), 'X2');
		this.$alpha = color.get_a() / 255;
	};
	$Franca_JS_JsColor.getDefaultValue = function() {
		return new $Franca_JS_JsColor();
	};
	$Franca_JS_JsColor.op_Implicit = function(c) {
		return new $Franca_JS_JsColor.$ctor1(c);
	};
	global.Franca.JS.JsColor = $Franca_JS_JsColor;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.JsHelper
	var $Franca_JS_JsHelper = function() {
	};
	$Franca_JS_JsHelper.__typeName = 'Franca.JS.JsHelper';
	global.Franca.JS.JsHelper = $Franca_JS_JsHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.UTF8Encoding
	var $Franca_JS_UTF8Encoding = function() {
	};
	$Franca_JS_UTF8Encoding.__typeName = 'Franca.JS.UTF8Encoding';
	$Franca_JS_UTF8Encoding.getChars = function(bytes) {
		var byteIndex = 0;
		var byteEnd = bytes.get_length();
		var ch;
		var leftBits = 0;
		var leftSoFar = 0;
		var leftSize = 0;
		var str = new ss.StringBuilder();
		for (; byteIndex < byteEnd; byteIndex++) {
			// fetch next character from buffer
			ch = bytes.get_item(byteIndex);
			if (leftSize === 0) {
				// process utf8 char
				if (ch < 128) {
					// single byte char
					str.append(String.fromCharCode(ch));
				}
				else if ((ch & 224) === 192) {
					// Double-byte UTF-8 character.
					leftBits = ch & 31;
					leftSoFar = 1;
					leftSize = 2;
				}
				else if ((ch & 240) === 224) {
					// Three-byte UTF-8 character.
					leftBits = ch & 15;
					leftSoFar = 1;
					leftSize = 3;
				}
				else if ((ch & 248) === 240) {
					// Four-byte UTF-8 character.
					leftBits = ch & 7;
					leftSoFar = 1;
					leftSize = 4;
				}
				else if ((ch & 252) === 248) {
					// Five-byte UTF-8 character.
					leftBits = ch & 3;
					leftSoFar = 1;
					leftSize = 5;
				}
				else if ((ch & 254) === 252) {
					// Six-byte UTF-8 character.
					leftBits = ch & 3;
					leftSoFar = 1;
					leftSize = 6;
				}
				else {
					// Invalid UTF-8 start character.
					str.append('�');
					leftBits = 0;
					leftSize = 0;
					leftSoFar = 0;
				}
			}
			else {
				// Process an extra byte in a multi-byte sequence.
				if ((ch & 192) === 128) {
					leftBits = leftBits << 6 >>> 0 | ch & 63;
					if (++leftSoFar >= leftSize) {
						// We have a complete character now.
						if (leftBits < 65536) {
							// is it an overlong ?
							var overlong = false;
							switch (leftSize) {
								case 2: {
									overlong = leftBits <= 127;
									break;
								}
								case 3: {
									overlong = leftBits <= 2047;
									break;
								}
								case 4: {
									overlong = leftBits <= 65535;
									break;
								}
								case 5: {
									overlong = leftBits <= 2097151;
									break;
								}
								case 6: {
									overlong = leftBits <= 67108863;
									break;
								}
							}
							if (overlong) {
								str.append('�');
								leftBits = 0;
								leftSize = 0;
								leftSoFar = 0;
							}
							else if ((leftBits & 63488) === 55296) {
								// UTF-8 doesn't use surrogate characters
								str.append('�');
								leftBits = 0;
								leftSize = 0;
								leftSoFar = 0;
							}
							else {
								str.append(String.fromCharCode(leftBits));
							}
						}
						else if (leftBits < 1114112) {
							leftBits -= 65536;
							str.append(String.fromCharCode((leftBits >>> 10) + 55296));
							str.append(String.fromCharCode((leftBits & 1023) + 56320));
						}
						else {
							str.append('�');
							leftBits = 0;
							leftSize = 0;
							leftSoFar = 0;
						}
						leftSize = 0;
					}
				}
				else {
					// Invalid UTF-8 sequence: clear and restart.
					str.append('�');
					leftBits = 0;
					leftSize = 0;
					leftSoFar = 0;
					--byteIndex;
				}
			}
		}
		if (leftSize !== 0) {
			str.append('�');
			leftBits = 0;
			leftSize = 0;
			leftSoFar = 0;
		}
		return str.toString();
	};
	$Franca_JS_UTF8Encoding.getBytes = function(s) {
		var stream = new $Franca_BinaryStream.$ctor2(s.length);
		try {
			{
				var streamWriter = new $System_IO_BinaryWriter.$ctor1(stream);
				try {
					var index = 0;
					var end = s.length;
					var leftOver = 0;
					while (index < end) {
						if (leftOver === 0) {
							for (; index < end; index++) {
								var ch = s.charCodeAt(index);
								if (ch < 128) {
									stream.writeByte(ch & 255);
								}
								else if (ch < 2048) {
									stream.writeByte((192 | ch >> 6) & 255);
									stream.writeByte((128 | ch & 63) & 255);
								}
								else if (ch < 55296 || ch > 57343) {
									stream.writeByte((224 | ch >> 12) & 255);
									stream.writeByte((128 | ch >> 6 & 63) & 255);
									stream.writeByte((128 | ch & 63) & 255);
								}
								else if (ch <= 56319) {
									// This is a surrogate char, exit the inner loop.
									leftOver = s.charCodeAt(index);
									index++;
									break;
								}
								else {
									// We have a surrogate tail without 
									// leading surrogate.
									leftOver = 0;
									// \uFFFD
									stream.writeByte(239 & 255);
									stream.writeByte(191 & 255);
									stream.writeByte(189 & 255);
								}
							}
						}
						else {
							var curChar = s.charCodeAt(index);
							if (curChar >= 56320 && curChar <= 57343) {
								// We have a correct surrogate pair.
								var ch1 = 65536 + curChar - 56320 + (leftOver - 55296 << 10 >> 0);
								stream.writeByte((240 | ch1 >> 18) & 255);
								stream.writeByte((128 | ch1 >> 12 & 63) & 255);
								stream.writeByte((128 | ch1 >> 6 & 63) & 255);
								stream.writeByte((128 | ch1 & 63) & 255);
								index++;
							}
							else {
								// We have a surrogate start followed by a
								// regular character.  Technically, this is
								// invalid, but we have to do something.
								// We write out the surrogate start and then
								// re-visit the current character again.
								leftOver = 0;
								// \uFFFD
								stream.writeByte(239 & 255);
								stream.writeByte(191 & 255);
								stream.writeByte(189 & 255);
							}
							leftOver = 0;
						}
					}
					//if (leftOver != 0) {
					//    int ch = leftOver;
					//    WriteByte(stream, 0xE0 | (ch >> 12));
					//    WriteByte(stream, 0x80 | ((ch >> 6) & 0x3F));
					//    WriteByte(stream, 0x80 | (ch & 0x3F));
					//    leftOver = '\0';
					//}
					return stream.toBinary();
				}
				finally {
					if (ss.isValue(streamWriter)) {
						streamWriter.dispose();
					}
				}
			}
		}
		finally {
			if (ss.isValue(stream)) {
				stream.dispose();
			}
		}
	};
	global.Franca.JS.UTF8Encoding = $Franca_JS_UTF8Encoding;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Localization.LocalizableAttribute
	var $Franca_Localization_LocalizableAttribute = function(allowMarkup, description) {
		this.$2$DescriptionField = null;
		this.$2$AllowMarkupField = false;
		this.set_description(description);
		this.set_allowMarkup(allowMarkup);
	};
	$Franca_Localization_LocalizableAttribute.__typeName = 'Franca.Localization.LocalizableAttribute';
	global.Franca.Localization.LocalizableAttribute = $Franca_Localization_LocalizableAttribute;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Localization.LocalizableFormat
	var $Franca_Localization_LocalizableFormat = function() {
	};
	$Franca_Localization_LocalizableFormat.__typeName = 'Franca.Localization.LocalizableFormat';
	global.Franca.Localization.LocalizableFormat = $Franca_Localization_LocalizableFormat;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mathematics.Histogram
	var $Franca_Mathematics_Histogram = function(bucketCount) {
		this.total = 0;
		this.buckets = null;
		this.$1$MinField = 0;
		this.$1$MaxField = 0;
		this.buckets = new Array(bucketCount);
		for (var i = 0; i < bucketCount; i++) {
			this.buckets[i] = new $Franca_Mathematics_HistogramBucket();
		}
	};
	$Franca_Mathematics_Histogram.__typeName = 'Franca.Mathematics.Histogram';
	global.Franca.Mathematics.Histogram = $Franca_Mathematics_Histogram;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mathematics.HistogramBucket
	var $Franca_Mathematics_HistogramBucket = function() {
		this.min = 0;
		this.max = 0;
		this.frequency = 0;
	};
	$Franca_Mathematics_HistogramBucket.__typeName = 'Franca.Mathematics.HistogramBucket';
	$Franca_Mathematics_HistogramBucket.$ctor1 = function(min, max) {
		this.min = 0;
		this.max = 0;
		this.frequency = 0;
		this.min = min;
		this.max = max;
	};
	global.Franca.Mathematics.HistogramBucket = $Franca_Mathematics_HistogramBucket;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.InvalidJsonException
	var $Franca_Serialization_InvalidJsonException = function() {
		this.$2$PositionField = 0;
		ss.Exception.call(this);
		this.set_position(-1);
	};
	$Franca_Serialization_InvalidJsonException.__typeName = 'Franca.Serialization.InvalidJsonException';
	$Franca_Serialization_InvalidJsonException.$ctor2 = function(message) {
		this.$2$PositionField = 0;
		ss.Exception.call(this, message);
		this.set_position(-1);
	};
	$Franca_Serialization_InvalidJsonException.$ctor4 = function(message, innerException) {
		this.$2$PositionField = 0;
		ss.Exception.call(this, message, innerException);
		this.set_position(-1);
	};
	$Franca_Serialization_InvalidJsonException.$ctor1 = function(pos) {
		this.$2$PositionField = 0;
		ss.Exception.call(this);
		this.set_position(pos);
	};
	$Franca_Serialization_InvalidJsonException.$ctor3 = function(pos, message) {
		this.$2$PositionField = 0;
		ss.Exception.call(this, message);
		this.set_position(pos);
	};
	$Franca_Serialization_InvalidJsonException.$ctor5 = function(pos, message, innerException) {
		this.$2$PositionField = 0;
		ss.Exception.call(this, message, innerException);
		this.set_position(pos);
	};
	global.Franca.Serialization.InvalidJsonException = $Franca_Serialization_InvalidJsonException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Json
	var $Franca_Serialization_Json = function() {
	};
	$Franca_Serialization_Json.__typeName = 'Franca.Serialization.Json';
	$Franca_Serialization_Json.parse = function(json) {
		if ($System_StringExtensions.isNullOrEmpty(json, true)) {
			return null;
		}
		var jsObject = JSON.parse(json);
		var root;
		var arr = ss.safeCast(jsObject, Array);
		if (ss.isValue(arr)) {
			root = arr;
			return $Franca_Serialization_Json.$convertList(arr);
		}
		else {
			var dict = new (ss.makeGenericType(ss.Dictionary$2, [String, Object]))();
			var $t1 = FrancaGlobals.objectToDict(jsObject).getEnumerator();
			try {
				while ($t1.moveNext()) {
					var kvp = $t1.current();
					var name = ss.safeCast(kvp.key, String);
					if (ss.isValue(name)) {
						dict.set_item(name, kvp.value);
					}
				}
			}
			finally {
				$t1.dispose();
			}
			return $Franca_Serialization_Json.$convertDict(dict);
		}
	};
	$Franca_Serialization_Json.$convertList = function(list) {
		var ret = $Franca_JsonValue.get_list();
		for (var i = 0; i < list.length; i++) {
			var obj = list[i];
			if (!ss.isInstanceOfType(obj, Number) && !ss.isInstanceOfType(obj, String) && !ss.isInstanceOfType(obj, Boolean) && ss.isValue(obj)) {
				var arr = ss.safeCast(obj, Array);
				if (ss.isValue(arr)) {
					ret.set_item$1(i, $Franca_Serialization_Json.$convertList(arr));
				}
				else {
					var dict = new (ss.makeGenericType(ss.Dictionary$2, [String, Object]))();
					var $t1 = FrancaGlobals.objectToDict(obj).getEnumerator();
					try {
						while ($t1.moveNext()) {
							var kvp = $t1.current();
							var name = ss.safeCast(kvp.key, String);
							if (ss.isValue(name)) {
								dict.set_item(name, kvp.value);
							}
						}
					}
					finally {
						$t1.dispose();
					}
					ret.set_item$1(i, $Franca_Serialization_Json.$convertDict(dict));
				}
			}
			else {
				ret.set_item$1(i, new $Franca_JsonValue.$ctorh(obj));
			}
		}
		return ret;
	};
	$Franca_Serialization_Json.$convertDict = function(col) {
		var ret = $Franca_JsonValue.get_dict();
		var $t1 = Enumerable.from(col.get_keys()).toArray();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			var obj = col.get_item(key);
			if (!ss.isInstanceOfType(obj, Number) && !ss.isInstanceOfType(obj, String) && !ss.isInstanceOfType(obj, Boolean) && ss.isValue(obj)) {
				var arr = ss.safeCast(obj, Array);
				if (ss.isValue(arr)) {
					ret.set_item(key, $Franca_Serialization_Json.$convertList(arr));
				}
				else {
					var dict = new (ss.makeGenericType(ss.Dictionary$2, [String, Object]))();
					var $t3 = FrancaGlobals.objectToDict(obj).getEnumerator();
					try {
						while ($t3.moveNext()) {
							var kvp = $t3.current();
							var name = ss.safeCast(kvp.key, String);
							if (ss.isValue(name)) {
								dict.set_item(name, kvp.value);
							}
						}
					}
					finally {
						$t3.dispose();
					}
					ret.set_item(key, $Franca_Serialization_Json.$convertDict(dict));
				}
			}
			else {
				ret.set_item(key, new $Franca_JsonValue.$ctorh(obj));
			}
		}
		return ret;
	};
	$Franca_Serialization_Json.convert = function(T) {
		return function(jsNode) {
			var dict = ss.safeCast(jsNode.toRawValue(), ss.makeGenericType(ss.Dictionary$2, [String, Object]));
			if (ss.isValue(dict)) {
				return ss.safeCast($Franca_Serialization_Json.convertObject(dict, T), T);
			}
			return null;
		};
	};
	$Franca_Serialization_Json.convertArray = function(jsNode, type, itemType) {
		var inst = ss.createInstance(type);
		var canNew = $System_Reflection_ReflectionExtensions.hasDefaultConstructor(itemType);
		var addMethod = $System_Reflection_ReflectionExtensions.getInstanceMethod(type, 'Add', false);
		for (var i = 0; i < jsNode.length; i++) {
			var item = jsNode[i];
			var arr = ss.safeCast(item, Array);
			var dict = ss.safeCast(item, ss.makeGenericType(ss.Dictionary$2, [String, Object]));
			if (ss.isValue(arr) || ss.isValue(dict)) {
				if (!canNew) {
					throw new $Franca_Serialization_InvalidJsonException.$ctor2("Can't create new instance of type " + ss.getTypeName(type) + ' in ConvertArray');
				}
				if (ss.isValue(arr)) {
					var arrayType = itemType;
					var itemItemType = ss.getGenericArguments(itemType)[0];
					ss.midel(addMethod, inst)($Franca_Serialization_Json.convertArray(ss.safeCast(item, Array), arrayType, itemItemType));
				}
				else {
					var dictType = itemType;
					if ($System_Reflection_ReflectionExtensions.isGenericDictionary(dictType)) {
						var genericArgs = ss.getGenericArguments(dictType);
						if (ss.referenceEquals(genericArgs[0], String)) {
							ss.midel(addMethod, inst)($Franca_Serialization_Json.convertDictionary(ss.safeCast(item, ss.makeGenericType(ss.Dictionary$2, [String, Object])), dictType, genericArgs[1]));
						}
					}
					else {
						ss.midel(addMethod, inst)($Franca_Serialization_Json.convertObject(ss.safeCast(item, ss.makeGenericType(ss.Dictionary$2, [String, Object])), dictType));
					}
				}
			}
			else {
				ss.midel(addMethod, inst)($Franca_Serialization_Json.changeType(item, $System_Reflection_ReflectionExtensions.getParameterTypes(addMethod)[0]));
			}
		}
		return inst;
	};
	$Franca_Serialization_Json.convertObject = function(jsNode, type) {
		var inst = ss.createInstance(type);
		var $t1 = jsNode.getEnumerator();
		try {
			while ($t1.moveNext()) {
				var kvp = $t1.current();
				var prop = $System_Reflection_ReflectionExtensions.getInstanceProperty(type, kvp.key, true);
				if (ss.isValue(prop)) {
					var arr = ss.safeCast(kvp.value, Array);
					var dict = ss.safeCast(kvp.value, ss.makeGenericType(ss.Dictionary$2, [String, Object]));
					if (ss.isValue(arr) || ss.isValue(dict)) {
						if (ss.isValue(arr)) {
							var genericArgs = ss.getGenericArguments(prop.returnType);
							if (genericArgs.length === 0) {
								throw new $Franca_Serialization_InvalidJsonException.$ctor2('Non-generic list detected in ConvertObject');
							}
							var arrayType = prop.returnType;
							var itemType = genericArgs[0];
							ss.midel(prop.setter, inst)($Franca_Serialization_Json.convertArray(ss.safeCast(kvp.value, Array), arrayType, itemType));
						}
						else {
							var dictType = prop.returnType;
							if ($System_Reflection_ReflectionExtensions.isGenericDictionary(dictType)) {
								var genericArgs1 = ss.getGenericArguments(dictType);
								if (ss.referenceEquals(genericArgs1[0], String)) {
									ss.midel(prop.setter, inst)($Franca_Serialization_Json.convertDictionary(ss.safeCast(kvp.value, ss.makeGenericType(ss.Dictionary$2, [String, Object])), dictType, genericArgs1[1]));
								}
							}
							else {
								ss.midel(prop.setter, inst)($Franca_Serialization_Json.convertObject(ss.safeCast(kvp.value, ss.makeGenericType(ss.Dictionary$2, [String, Object])), dictType));
							}
						}
					}
					else {
						ss.midel(prop.setter, inst)($Franca_Serialization_Json.changeType(kvp.value, prop.returnType));
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return inst;
	};
	$Franca_Serialization_Json.convertDictionary = function(jsNode, type, itemType) {
		var inst = ss.createInstance(type);
		var canNew = $System_Reflection_ReflectionExtensions.hasDefaultConstructor(itemType);
		var addMethod = $System_Reflection_ReflectionExtensions.getInstanceMethod(type, 'Add', false);
		var $t1 = jsNode.getEnumerator();
		try {
			while ($t1.moveNext()) {
				var kvp = $t1.current();
				var key = kvp.key;
				var item = kvp.value;
				var arr = ss.safeCast(item, Array);
				var dict = ss.safeCast(item, ss.makeGenericType(ss.Dictionary$2, [String, Object]));
				if (ss.isValue(arr) || ss.isValue(dict)) {
					if (!canNew) {
						throw new $Franca_Serialization_InvalidJsonException.$ctor2("Can't create new instance of type " + ss.getTypeName(type) + ' in ConvertDictionary');
					}
					if (ss.isValue(arr)) {
						var arrayType = itemType;
						if (ss.referenceEquals(itemType, Object)) {
							var types = $System_Reflection_ReflectionExtensions.getParameterTypes(addMethod);
							ss.midel(addMethod, inst)($Franca_Serialization_Json.changeType(key, types[0]), item);
						}
						else {
							var types1 = $System_Reflection_ReflectionExtensions.getParameterTypes(addMethod);
							var itemItemType = ss.getGenericArguments(itemType)[0];
							ss.midel(addMethod, inst)($Franca_Serialization_Json.changeType(key, types1[0]), $Franca_Serialization_Json.convertArray(ss.safeCast(item, Array), arrayType, itemItemType));
						}
					}
					else {
						var dictType = itemType;
						var types2 = $System_Reflection_ReflectionExtensions.getParameterTypes(addMethod);
						if ($System_Reflection_ReflectionExtensions.isGenericDictionary(dictType)) {
							var genericArgs = ss.getGenericArguments(dictType);
							if (ss.referenceEquals(genericArgs[0], String)) {
								ss.midel(addMethod, inst)($Franca_Serialization_Json.changeType(key, types2[0]), $Franca_Serialization_Json.convertDictionary(ss.safeCast(item, ss.makeGenericType(ss.Dictionary$2, [String, Object])), dictType, genericArgs[1]));
							}
						}
						else {
							ss.midel(addMethod, inst)($Franca_Serialization_Json.changeType(key, types2[0]), $Franca_Serialization_Json.convertObject(ss.safeCast(item, ss.makeGenericType(ss.Dictionary$2, [String, Object])), dictType));
						}
					}
				}
				else {
					var types3 = $System_Reflection_ReflectionExtensions.getParameterTypes(addMethod);
					ss.midel(addMethod, inst)($Franca_Serialization_Json.changeType(key, types3[0]), $Franca_Serialization_Json.changeType(item, types3[1]));
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return inst;
	};
	$Franca_Serialization_Json.changeType = function(o, t) {
		return o;
	};
	$Franca_Serialization_Json.jsonToString = function(jsonObj, space) {
		return $Franca_Serialization_Json.stringify(jsonObj, space);
	};
	$Franca_Serialization_Json.stringify = function(jsonObj, space) {
		space = Math.min(10, space);
		var indent = { $: 0 };
		var str = new ss.StringBuilder();
		var arr = (jsonObj.get_isArray() ? jsonObj : null);
		if ($Franca_JsonValue.op_Inequality(arr, null)) {
			$Franca_Serialization_Json.$jsonArrayToString(str, arr, indent, space);
		}
		else {
			var dict = (jsonObj.get_isObject() ? jsonObj : null);
			if ($Franca_JsonValue.op_Inequality(dict, null)) {
				$Franca_Serialization_Json.$jsonDictToString(str, dict, indent, space);
			}
		}
		return str.toString();
	};
	$Franca_Serialization_Json.$indent = function(str, indent, space) {
		if (space <= 0 || indent <= 0) {
			return;
		}
		str.append(ss.stringFromChar(String.fromCharCode(32), space * indent));
	};
	$Franca_Serialization_Json.$jsonValueToString = function(str, val, indent, space) {
		if (val.get_isValue()) {
			str.append(val.toString$1(true, false));
			return;
		}
		var arr = (val.get_isArray() ? val : null);
		if ($Franca_JsonValue.op_Inequality(arr, null)) {
			$Franca_Serialization_Json.$jsonArrayToString(str, arr, indent, space);
			return;
		}
		var dict = (val.get_isObject() ? val : null);
		if ($Franca_JsonValue.op_Inequality(dict, null)) {
			$Franca_Serialization_Json.$jsonDictToString(str, dict, indent, space);
			return;
		}
	};
	$Franca_Serialization_Json.$jsonArrayToString = function(str, list, indent, space) {
		if (space > 0) {
			str.appendLine('[');
		}
		else {
			str.append('[');
		}
		indent.$++;
		var first = true;
		var $t1 = ss.getEnumerator(list.get_values());
		try {
			while ($t1.moveNext()) {
				var item = $t1.current();
				if (!first) {
					if (space > 0) {
						str.appendLine(',');
					}
					else {
						str.append(',');
					}
				}
				$Franca_Serialization_Json.$indent(str, indent.$, space);
				$Franca_Serialization_Json.$jsonValueToString(str, item, indent, space);
				if (first) {
					first = false;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (space > 0) {
			str.appendLine('');
		}
		;
		indent.$--;
		$Franca_Serialization_Json.$indent(str, indent.$, space);
		str.append(']');
	};
	$Franca_Serialization_Json.$jsonDictToString = function(str, dict, indent, space) {
		if (space > 0) {
			str.appendLine('{');
		}
		else {
			str.append('{');
		}
		indent.$++;
		var first = true;
		var $t1 = ss.getEnumerator(dict.get_pairs());
		try {
			while ($t1.moveNext()) {
				var kvp = $t1.current();
				if (!first) {
					if (space > 0) {
						str.appendLine(',');
					}
					else {
						str.append(',');
					}
				}
				$Franca_Serialization_Json.$indent(str, indent.$, space);
				str.append('"');
				str.append(kvp.key);
				str.append('"');
				str.append(((space > 0) ? ': ' : ':'));
				$Franca_Serialization_Json.$jsonValueToString(str, kvp.value, indent, space);
				if (first) {
					first = false;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (space > 0) {
			str.appendLine('');
		}
		indent.$--;
		$Franca_Serialization_Json.$indent(str, indent.$, space);
		str.append('}');
	};
	global.Franca.Serialization.Json = $Franca_Serialization_Json;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.JsonHexDouble
	var $Franca_Serialization_JsonHexDouble = function() {
		this.value = 0;
	};
	$Franca_Serialization_JsonHexDouble.__typeName = 'Franca.Serialization.JsonHexDouble';
	$Franca_Serialization_JsonHexDouble.$ctor1 = function(reader) {
		this.value = 0;
		if (!reader.isString()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		this.value = $Franca_Serialization_JsonHexDouble.parse(reader.readString(false, 16, 16));
	};
	$Franca_Serialization_JsonHexDouble.$ctor2 = function(value) {
		this.value = 0;
		this.value = value;
	};
	$Franca_Serialization_JsonHexDouble.getDefaultValue = function() {
		return new $Franca_Serialization_JsonHexDouble();
	};
	$Franca_Serialization_JsonHexDouble.get_$bytes = function() {
		return $Franca_Serialization_JsonHexDouble.$_bytes || ($Franca_Serialization_JsonHexDouble.$_bytes = new $Franca_BinaryData.$ctor5($Franca_Serialization_JsonHexDouble.$numBytes));
	};
	$Franca_Serialization_JsonHexDouble.get_$hex = function() {
		return $Franca_Serialization_JsonHexDouble.$_hex || ($Franca_Serialization_JsonHexDouble.$_hex = new ss.StringBuilder());
	};
	$Franca_Serialization_JsonHexDouble.parse = function(str) {
		if (ss.isNullOrUndefined(str) || str.length !== $Franca_Serialization_JsonHexDouble.$hexChars) {
			throw new $Franca_JsonValidationException.$ctor1('Invalid length in JsonHexDouble value.');
		}
		var bin = $Franca_Serialization_JsonHexDouble.get_$bytes();
		for (var i = 0, j = 0; i < $Franca_Serialization_JsonHexDouble.$hexChars; i += 2, j++) {
			var b = {};
			if (!$Franca_Calc.tryParseHex$2(str, i, b, true)) {
				throw new $Franca_JsonValidationException.$ctor1('Invalid hex in JsonHexDouble value.');
			}
			bin.set_item(j, b.$);
		}
		return bin.readDouble$3(0, 0);
	};
	$Franca_Serialization_JsonHexDouble.toHex = function(value) {
		var bin = $Franca_Serialization_JsonHexDouble.get_$bytes();
		bin.writeDouble$3(value, 0, 0);
		var str = $Franca_Serialization_JsonHexDouble.get_$hex();
		str.clear();
		$Franca_StringBuilderExtensions.appendHex$1(str, bin, 0, $Franca_Serialization_JsonHexDouble.$numBytes);
		return str.toString();
	};
	$Franca_Serialization_JsonHexDouble.op_Implicit = function(v) {
		return v.value;
	};
	$Franca_Serialization_JsonHexDouble.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_Serialization_JsonHexDouble.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.Serialization.JsonHexDouble = $Franca_Serialization_JsonHexDouble;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.JsonHexFloat
	var $Franca_Serialization_JsonHexFloat = function() {
		this.value = 0;
	};
	$Franca_Serialization_JsonHexFloat.__typeName = 'Franca.Serialization.JsonHexFloat';
	$Franca_Serialization_JsonHexFloat.$ctor2 = function(value) {
		this.value = 0;
		this.value = value;
	};
	$Franca_Serialization_JsonHexFloat.$ctor1 = function(reader) {
		this.value = 0;
		if (!reader.isString()) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		this.value = $Franca_Serialization_JsonHexFloat.parse(reader.readString(false, 8, 8));
	};
	$Franca_Serialization_JsonHexFloat.getDefaultValue = function() {
		return new $Franca_Serialization_JsonHexFloat();
	};
	$Franca_Serialization_JsonHexFloat.get_$bytes = function() {
		return $Franca_Serialization_JsonHexFloat.$_bytes || ($Franca_Serialization_JsonHexFloat.$_bytes = new $Franca_BinaryData.$ctor5($Franca_Serialization_JsonHexFloat.$numBytes));
	};
	$Franca_Serialization_JsonHexFloat.get_$hex = function() {
		return $Franca_Serialization_JsonHexFloat.$_hex || ($Franca_Serialization_JsonHexFloat.$_hex = new ss.StringBuilder());
	};
	$Franca_Serialization_JsonHexFloat.parse = function(str) {
		if (ss.isNullOrUndefined(str) || str.length !== $Franca_Serialization_JsonHexFloat.$hexChars) {
			throw new $Franca_JsonValidationException.$ctor1('Invalid length in JsonHexFloat value.');
		}
		var bin = $Franca_Serialization_JsonHexFloat.get_$bytes();
		for (var i = 0, j = 0; i < $Franca_Serialization_JsonHexFloat.$hexChars; i += 2, j++) {
			var b = {};
			if (!$Franca_Calc.tryParseHex$2(str, i, b, true)) {
				throw new $Franca_JsonValidationException.$ctor1('Invalid hex in JsonHexFloat value.');
			}
			bin.set_item(j, b.$);
		}
		return bin.readSingle$3(0, 0);
	};
	$Franca_Serialization_JsonHexFloat.toHex = function(value) {
		var bin = $Franca_Serialization_JsonHexFloat.get_$bytes();
		bin.writeSingle$3(value, 0, 0);
		var str = $Franca_Serialization_JsonHexFloat.get_$hex();
		str.clear();
		$Franca_StringBuilderExtensions.appendHex$1(str, bin, 0, $Franca_Serialization_JsonHexFloat.$numBytes);
		return str.toString();
	};
	$Franca_Serialization_JsonHexFloat.op_Implicit = function(v) {
		return v.value;
	};
	$Franca_Serialization_JsonHexFloat.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_Serialization_JsonHexFloat.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.Serialization.JsonHexFloat = $Franca_Serialization_JsonHexFloat;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.UBJSettings
	var $Franca_Serialization_UBJSettings = function() {
		this.maxArrayOptimizedFormatEmptyBodyCount = 256;
		this.endian = 1;
		this.float32Bit = false;
	};
	$Franca_Serialization_UBJSettings.__typeName = 'Franca.Serialization.UBJSettings';
	$Franca_Serialization_UBJSettings.setDefault = function(settings) {
		$Franca_Serialization_UBJSettings.$_default = settings.clone$1();
	};
	$Franca_Serialization_UBJSettings.get_default = function() {
		return $Franca_Serialization_UBJSettings.$_default.clone$1();
	};
	global.Franca.Serialization.UBJSettings = $Franca_Serialization_UBJSettings;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.UBJson
	var $Franca_Serialization_UBJson = function() {
	};
	$Franca_Serialization_UBJson.__typeName = 'Franca.Serialization.UBJson';
	$Franca_Serialization_UBJson.parse = function(binary, settings) {
		settings = settings || $Franca_Serialization_UBJSettings.get_default();
		{
			var reader = new $Franca_BinDataStreamReader(new $Franca_BinaryStream.$ctor1(binary), settings.endian);
			try {
				return $Franca_Serialization_UBJson.parse$1(reader, settings);
			}
			finally {
				if (ss.isValue(reader)) {
					reader.dispose();
				}
			}
		}
	};
	$Franca_Serialization_UBJson.parse$1 = function(reader, settings) {
		return $Franca_Serialization_UBJson.$readValue(reader, settings || $Franca_Serialization_UBJSettings.get_default());
	};
	$Franca_Serialization_UBJson.$readInteger = function(reader, settings, intType) {
		var $t1 = intType;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = reader.readByte();
		}
		var type = $t1;
		var validateInt = false;
		switch (type) {
			default: {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Unexpected ubjson type ' + $System_EnumExtensions.getName($Franca_Serialization_UBJType).call(null, type) + ', expected integer.');
			}
			case 105:
			case 85:
			case 73:
			case 108:
			case 76: {
				break;
			}
			case 100:
			case 68:
			case 72: {
				validateInt = true;
				break;
			}
		}
		if (validateInt) {
			var valueJson = $Franca_Serialization_UBJson.$readValue$1(reader, settings, type);
			var value = ss.unbox(ss.cast(valueJson.value, Number));
			if (Math.trunc(value) !== value) {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Unexpected ubjson value ' + $System_ObjectExtensions.toStringInvariant$1(Number).call(null, value) + ', expected integer.');
			}
			return valueJson;
		}
		else {
			return $Franca_Serialization_UBJson.$readValue$1(reader, settings, type);
		}
	};
	$Franca_Serialization_UBJson.$readObjectEntry = function(reader, settings, keyLenType, isOptimized, valueType) {
		if (keyLenType === 78) {
			if (isOptimized) {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Invalid noop in ubjson optimized format object: key length type cannot be a noop.');
			}
			else {
				return null;
			}
		}
		// if noop this will throw an exception
		var key = $Franca_Serialization_UBJson.$readString(reader, settings, keyLenType);
		var $t1 = valueType;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = reader.readByte();
		}
		var type = $t1;
		if (type === 78) {
			return { item1: key, item2: null };
		}
		switch (type) {
			default: {
				break;
			}
			case 78:
			case 36:
			case 35:
			case 125:
			case 93: {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Unexpected ubjson type ' + $System_EnumExtensions.getName($Franca_Serialization_UBJType).call(null, type) + " for key '" + key + "', expected Null, True, False, integer, float, HighPrecision, Char, String, ArrayOpen, or ObjectOpen.");
			}
		}
		var value = $Franca_Serialization_UBJson.$readValue$1(reader, settings, type);
		return { item1: key, item2: value };
	};
	$Franca_Serialization_UBJson.$readArrayEntry = function(reader, settings, type, isOptimized) {
		if (type === 78) {
			if (isOptimized) {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Invalid noop in ubjson optimized format array: value cannot be a noop.');
			}
			else {
				return null;
			}
		}
		switch (type) {
			default: {
				break;
			}
			case 36:
			case 35:
			case 125:
			case 93: {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Unexpected ubjson type ' + $System_EnumExtensions.getName($Franca_Serialization_UBJType).call(null, type) + ', expected Null, True, False, integer, float, HighPrecision, Char, String, ArrayOpen, or ObjectOpen.');
			}
		}
		// if noop this will throw an exception
		return $Franca_Serialization_UBJson.$readValue$1(reader, settings, type);
	};
	$Franca_Serialization_UBJson.$readValue = function(reader, settings) {
		var type = reader.readByte();
		switch (type) {
			default: {
				break;
			}
			case 78:
			case 36:
			case 35:
			case 125:
			case 93: {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Unexpected ubjson type ' + $System_EnumExtensions.getName($Franca_Serialization_UBJType).call(null, type) + ', expected Null, True, False, integer, float, HighPrecision, Char, String, ArrayOpen, or ObjectOpen.');
			}
		}
		return $Franca_Serialization_UBJson.$readValue$1(reader, settings, type);
	};
	$Franca_Serialization_UBJson.$readValue$1 = function(reader, settings, type) {
		switch (type) {
			default: {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Unexpected ubjson type ' + $System_EnumExtensions.getName($Franca_Serialization_UBJType).call(null, type) + '.');
			}
			case 90: {
				return $Franca_JsonValue.get_null();
			}
			case 84: {
				return $Franca_JsonValue.get_true();
			}
			case 70: {
				return $Franca_JsonValue.get_false();
			}
			case 105: {
				return new $Franca_JsonValue.$ctori(reader.readSByte());
			}
			case 85: {
				return new $Franca_JsonValue.$ctor9(reader.readByte());
			}
			case 73: {
				return new $Franca_JsonValue.$ctore(reader.readInt16$1(settings.endian));
			}
			case 108: {
				return new $Franca_JsonValue.$ctorf(reader.readInt32$1(settings.endian));
			}
			case 76: {
				throw new ss.NotImplementedException('Cannot convert json value to int64 in JS platform');
			}
			case 100: {
				return new $Franca_JsonValue.$ctorj(reader.readSingle$1(settings.endian));
			}
			case 68: {
				return new $Franca_JsonValue.$ctorc(reader.readDouble$1(settings.endian));
			}
			case 72: {
				var hpStr = $Franca_Serialization_UBJson.$readString(reader, settings, null);
				if (hpStr === '') {
					return new $Franca_JsonValue.$ctorc(0);
				}
				var hpResult = {};
				if (!$Franca_Calc.tryParseNumber(hpStr, hpResult)) {
					throw new $Franca_Serialization_InvalidJsonException.$ctor2("Invalid ubjson high precision string value '" + hpStr + "', could not parse to number");
				}
				return new $Franca_JsonValue.$ctorc(hpResult.$);
			}
			case 67: {
				var chrByte = reader.readByte();
				if (chrByte > 127) {
					throw new $Franca_Serialization_InvalidJsonException.$ctor2('Invalid ubjson char value ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, chrByte) + ', char values must be between 0 and 127');
				}
				return new $Franca_JsonValue.$ctork($System_CharExtensions.toStringInvariant(chrByte));
			}
			case 83: {
				return new $Franca_JsonValue.$ctork($Franca_Serialization_UBJson.$readString(reader, settings, null));
			}
			case 91: {
				return $Franca_Serialization_UBJson.$readArray(reader, settings);
			}
			case 123: {
				return $Franca_Serialization_UBJson.$readObject(reader, settings);
			}
		}
	};
	$Franca_Serialization_UBJson.$readArray = function(reader, settings) {
		var marker = reader.readByte();
		if (marker === 36) {
			var type = reader.readByte();
			switch (type) {
				default: {
					break;
				}
				case 93:
				case 125:
				case 36:
				case 35: {
					throw new $Franca_Serialization_InvalidJsonException.$ctor2('Unexpected ubjson type ' + $System_EnumExtensions.getName($Franca_Serialization_UBJType).call(null, type) + ', expected Null, True, False, integer, float, HighPrecision, Char, String, ArrayOpen, or ObjectOpen.');
				}
			}
			marker = reader.readByte();
			if (marker !== 35) {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Unexpected ubjson type ' + $System_EnumExtensions.getName($Franca_Serialization_UBJType).call(null, type) + ', expected Count.');
			}
			var countJson = $Franca_Serialization_UBJson.$readInteger(reader, settings, null);
			var count = ss.Int32.trunc(Math.trunc(ss.unbox(ss.cast(countJson.value, Number))));
			if (count === 0) {
				return new $Franca_JArray();
			}
			else if (count < 0) {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Invalid ubjson array container count ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, count) + ', must be zero or greater.');
			}
			if (type === 78) {
				return new $Franca_JArray();
			}
			else if (type === 90) {
				if (count > settings.maxArrayOptimizedFormatEmptyBodyCount) {
					throw new $Franca_Serialization_InvalidJsonException.$ctor2('Cannot create ubjson array using optimized container format containing ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, count) + ' null values: count exceeds MaxArrayOptimizedFormatEmptyBodyCount.');
				}
				return new $Franca_JArray.$ctor3(new (ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]).$ctor1)(Enumerable.repeat($Franca_JsonValue.get_null(), count)));
			}
			else if (type === 70) {
				if (count > settings.maxArrayOptimizedFormatEmptyBodyCount) {
					throw new $Franca_Serialization_InvalidJsonException.$ctor2('Cannot create ubjson array using optimized container format containing ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, count) + ' false values: count exceeds MaxArrayOptimizedFormatEmptyBodyCount.');
				}
				return new $Franca_JArray.$ctor3(new (ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]).$ctor1)(Enumerable.repeat($Franca_JsonValue.get_false(), count)));
			}
			else if (type === 84) {
				if (count > settings.maxArrayOptimizedFormatEmptyBodyCount) {
					throw new $Franca_Serialization_InvalidJsonException.$ctor2('Cannot create ubjson array using optimized container format containing ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, count) + ' true values: count exceeds MaxArrayOptimizedFormatEmptyBodyCount.');
				}
				return new $Franca_JArray.$ctor3(new (ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]).$ctor1)(Enumerable.repeat($Franca_JsonValue.get_true(), count)));
			}
			var jArray;
			if (type === 85) {
				// optimize reading binary byte data
				var array = new $Franca_BinaryData.$ctor5(count);
				var bytesRead = 0;
				while (bytesRead < count) {
					bytesRead = reader.read(array, bytesRead, count - bytesRead);
					if (bytesRead <= 0) {
						throw new $System_IO_EndOfStreamException.$ctor1(ss.formatString('Unexpected end of stream while reading ubjson array, expected {0} byte values.', $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, count)));
					}
				}
				jArray = new $Franca_JArray.$ctor1(array);
			}
			else if (type === 105) {
				var array1 = new $Franca_Collections_SByteArray.$ctor2(count);
				for (var i = 0; i < count; i++) {
					array1.set_item(i, $Franca_JsonValue.op_Implicit$i($Franca_Serialization_UBJson.$readArrayEntry(reader, settings, type, true)));
				}
				jArray = new $Franca_JArray.$ctor2(array1);
			}
			else if (type === 73) {
				var array2 = new $Franca_Collections_ShortArray.$ctor2(count);
				for (var i1 = 0; i1 < count; i1++) {
					array2.set_item(i1, $Franca_JsonValue.op_Implicit$4($Franca_Serialization_UBJson.$readArrayEntry(reader, settings, type, true)));
				}
				jArray = new $Franca_JArray.$ctor2(array2);
			}
			else if (type === 108) {
				var array3 = new $Franca_Collections_IntArray.$ctor2(count);
				for (var i2 = 0; i2 < count; i2++) {
					array3.set_item(i2, $Franca_JsonValue.op_Implicit$5($Franca_Serialization_UBJson.$readArrayEntry(reader, settings, type, true)));
				}
				jArray = new $Franca_JArray.$ctor2(array3);
			}
			else if (type === 100) {
				var array4 = new $Franca_Collections_FloatArray.$ctor2(count);
				for (var i3 = 0; i3 < count; i3++) {
					array4.set_item(i3, $Franca_JsonValue.op_Implicit$j($Franca_Serialization_UBJson.$readArrayEntry(reader, settings, type, true)));
				}
				jArray = new $Franca_JArray.$ctor2(array4);
			}
			else if (type === 68) {
				var array5 = new $Franca_Collections_DoubleArray.$ctor2(count);
				for (var i4 = 0; i4 < count; i4++) {
					array5.set_item(i4, $Franca_JsonValue.op_Implicit$3($Franca_Serialization_UBJson.$readArrayEntry(reader, settings, type, true)));
				}
				jArray = new $Franca_JArray.$ctor2(array5);
			}
			else {
				var array6 = new (ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]).$ctor2)(count);
				for (var i5 = 0; i5 < count; i5++) {
					array6.add($Franca_Serialization_UBJson.$readArrayEntry(reader, settings, type, true));
				}
				jArray = new $Franca_JArray.$ctor3(array6);
			}
			return jArray;
		}
		else if (marker === 35) {
			var countJson1 = $Franca_Serialization_UBJson.$readInteger(reader, settings, null);
			var count1 = ss.Int32.trunc(Math.trunc(ss.unbox(ss.cast(countJson1.value, Number))));
			if (count1 === 0) {
				return new $Franca_JArray();
			}
			else if (count1 < 0) {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Invalid ubjson array container count ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, count1) + ', must be zero or greater.');
			}
			var array7 = new (ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]).$ctor2)(count1);
			for (var i6 = 0; i6 < count1; i6++) {
				var type1 = reader.readByte();
				array7.add($Franca_Serialization_UBJson.$readArrayEntry(reader, settings, type1, true));
			}
			return new $Franca_JArray.$ctor3(array7);
		}
		else if (marker === 93) {
			return new $Franca_JArray();
		}
		else {
			var array8 = new (ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))();
			var type2 = marker;
			while (type2 !== 93) {
				var val = $Franca_Serialization_UBJson.$readArrayEntry(reader, settings, type2, false);
				if (!ss.referenceEquals(val, null)) {
					// null indicates a noop value, so skip
					array8.add(val);
				}
				type2 = reader.readByte();
			}
			return new $Franca_JArray.$ctor3(array8);
		}
	};
	$Franca_Serialization_UBJson.$readObject = function(reader, settings) {
		var marker = reader.readByte();
		if (marker === 36) {
			var type = reader.readByte();
			switch (type) {
				default: {
					break;
				}
				case 93:
				case 125:
				case 36:
				case 35: {
					throw new $Franca_Serialization_InvalidJsonException.$ctor2('Unexpected ubjson type ' + $System_EnumExtensions.getName($Franca_Serialization_UBJType).call(null, type) + ', expected Null, True, False, integer, float, HighPrecision, Char, String, ArrayOpen, or ObjectOpen.');
				}
			}
			marker = reader.readByte();
			if (marker !== 35) {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Unexpected ubjson type ' + $System_EnumExtensions.getName($Franca_Serialization_UBJType).call(null, type) + ', expected Count.');
			}
			var countJson = $Franca_Serialization_UBJson.$readInteger(reader, settings, null);
			var count = ss.Int32.trunc(Math.trunc(ss.unbox(ss.cast(countJson.value, Number))));
			if (count === 0) {
				return new $Franca_JObject();
			}
			else if (count < 0) {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Invalid ubjson object container count ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, count) + ', must be zero or greater.');
			}
			var dict = new (ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]).$ctor3)(count);
			for (var i = 0; i < count; i++) {
				var keyLenType = reader.readByte();
				var tup = $Franca_Serialization_UBJson.$readObjectEntry(reader, settings, keyLenType, true, type);
				// if the key is noop this would be null, but that isn't possible when we pass a type
				// so we only check if the value is a noop (null kvp value instead of JsonValue)
				if (!ss.referenceEquals(tup.item2, null)) {
					dict.set_item(tup.item1, tup.item2);
				}
			}
			return new $Franca_JObject.$ctor1(dict);
		}
		else if (marker === 35) {
			var countJson1 = $Franca_Serialization_UBJson.$readInteger(reader, settings, null);
			var count1 = ss.Int32.trunc(Math.trunc(ss.unbox(ss.cast(countJson1.value, Number))));
			if (count1 === 0) {
				return new $Franca_JObject();
			}
			else if (count1 < 0) {
				throw new $Franca_Serialization_InvalidJsonException.$ctor2('Invalid ubjson object container count ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, count1) + ', must be zero or greater.');
			}
			var dict1 = new (ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]).$ctor3)(count1);
			for (var i1 = 0; i1 < count1; i1++) {
				var keyLenType1 = reader.readByte();
				var tup1 = $Franca_Serialization_UBJson.$readObjectEntry(reader, settings, keyLenType1, true, null);
				// skip if the value is a noop (null kvp value instead of JsonValue)
				if (!ss.referenceEquals(tup1.item2, null)) {
					dict1.set_item(tup1.item1, tup1.item2);
				}
			}
			return new $Franca_JObject.$ctor1(dict1);
		}
		else if (marker === 125) {
			return new $Franca_JObject();
		}
		else {
			var dict2 = new (ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))();
			var keyLenType2 = marker;
			while (keyLenType2 !== 125) {
				var tup2 = $Franca_Serialization_UBJson.$readObjectEntry(reader, settings, keyLenType2, false, null);
				// if the key is noop this'll be null and if the value is noop the kvp value will be null instead of JsonValue, so skip
				if (!ss.referenceEquals(tup2, null) && !ss.referenceEquals(tup2.item2, null)) {
					dict2.set_item(tup2.item1, tup2.item2);
				}
				keyLenType2 = reader.readByte();
			}
			return new $Franca_JObject.$ctor1(dict2);
		}
	};
	$Franca_Serialization_UBJson.$readString = function(reader, settings, type) {
		var lengthJson = $Franca_Serialization_UBJson.$readInteger(reader, settings, type);
		var byteLen = ss.Int32.trunc(Math.trunc(ss.unbox(ss.cast(lengthJson.value, Number))));
		if (byteLen <= 0) {
			return '';
		}
		var bytes = new $Franca_BinaryData.$ctor5(byteLen);
		var bytesRead = 0;
		while (bytesRead < byteLen) {
			bytesRead = reader.read(bytes, bytesRead, byteLen - bytesRead);
			if (bytesRead <= 0) {
				throw new $System_IO_EndOfStreamException.$ctor1(ss.formatString('Unexpected end of stream while reading ubjson string, expected {0} bytes.', $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, byteLen)));
			}
		}
		return $Franca_Text_UTF8.fromBinaryData(bytes, false);
	};
	$Franca_Serialization_UBJson.toBinary = function(json, settings) {
		settings = settings || $Franca_Serialization_UBJSettings.get_default();
		{
			var writer = new $Franca_BinDataStreamWriter(new $Franca_BinaryStream(), settings.endian);
			try {
				$Franca_Serialization_UBJson.toBinary$3(json, writer, settings);
				return ss.cast(writer.get_stream(), $Franca_BinaryStream).toBinary();
			}
			finally {
				if (ss.isValue(writer)) {
					writer.dispose();
				}
			}
		}
	};
	$Franca_Serialization_UBJson.toBinary$4 = function(json, stream, settings) {
		var writer = new $Franca_BinDataStreamWriter.$ctor1(stream, settings.endian, true);
		try {
			$Franca_Serialization_UBJson.toBinary$3(json, writer, settings);
		}
		finally {
			if (ss.isValue(writer)) {
				writer.dispose();
			}
		}
	};
	$Franca_Serialization_UBJson.toBinary$1 = function(json, stream, settings) {
		$Franca_Serialization_UBJson.toBinary$2(json, stream, settings);
	};
	$Franca_Serialization_UBJson.toBinary$2 = function(json, stream, settings) {
		settings = settings || $Franca_Serialization_UBJSettings.get_default();
		{
			var binWriter = new $Franca_BinDataStreamWriter.$ctor1(ss.cast(stream, $Franca_BinaryStream), settings.endian, true);
			try {
				$Franca_Serialization_UBJson.toBinary$3(json, binWriter, settings);
			}
			finally {
				if (ss.isValue(binWriter)) {
					binWriter.dispose();
				}
			}
		}
	};
	$Franca_Serialization_UBJson.toBinary$3 = function(json, writer, settings) {
		$Franca_Serialization_UBJson.$writeValue(json, writer, settings || $Franca_Serialization_UBJSettings.get_default());
	};
	$Franca_Serialization_UBJson.$writeValue = function(value, writer, settings) {
		if (value.get_isByte()) {
			writer.writeByte(85);
			writer.writeByte($Franca_JsonValue.op_Implicit$2(value));
		}
		else if (value.get_isSByte()) {
			writer.writeByte(105);
			writer.writeSByte($Franca_JsonValue.op_Implicit$i(value));
		}
		else if (value.get_isShort()) {
			writer.writeByte(73);
			writer.writeInt16$1($Franca_JsonValue.op_Implicit$4(value), settings.endian);
		}
		else if (value.get_isInt()) {
			writer.writeByte(108);
			writer.writeInt32$1($Franca_JsonValue.op_Implicit$5(value), settings.endian);
		}
		else if (value.get_isDouble()) {
			if (settings.float32Bit) {
				writer.writeByte(100);
				writer.writeSingle$1($Franca_JsonValue.op_Implicit$j(value), settings.endian);
			}
			else {
				writer.writeByte(68);
				writer.writeDouble$1($Franca_JsonValue.op_Implicit$3(value), settings.endian);
			}
		}
		else if (value.get_isBool()) {
			if ($Franca_JsonValue.op_Implicit$1(value)) {
				writer.writeByte(84);
			}
			else {
				writer.writeByte(70);
			}
		}
		else if (value.get_isNull()) {
			writer.writeByte(90);
		}
		else if (value.get_isString()) {
			var utf8Data = $Franca_Text_UTF8.toBinaryData(ss.cast(value.value, String));
			writer.writeByte(83);
			$Franca_Serialization_UBJson.$writeValue(new $Franca_JsonValue.$ctorf(utf8Data.get_length()), writer, settings);
			writer.write(utf8Data);
		}
		else if (value.get_isArray()) {
			writer.writeByte(91);
			if (value.get_isUInt8Array()) {
				writer.writeByte(36);
				writer.writeByte(85);
				writer.writeByte(35);
				$Franca_Serialization_UBJson.$writeValue(new $Franca_JsonValue.$ctorf(value.get_count()), writer, settings);
				var binary = $Franca_Collections_ByteArray.op_Explicit$1(ss.cast(value.value, $Franca_Collections_ByteArray));
				writer.write(binary);
			}
			else if (value.get_isInt8Array()) {
				writer.writeByte(36);
				writer.writeByte(105);
				writer.writeByte(35);
				$Franca_Serialization_UBJson.$writeValue(new $Franca_JsonValue.$ctorf(value.get_count()), writer, settings);
				var arr = ss.cast(value.value, $Franca_Collections_SByteArray);
				for (var i = 0; i < arr.get_length(); i++) {
					writer.writeSByte(arr.get_item(i));
				}
			}
			else if (value.get_isInt16Array()) {
				writer.writeByte(36);
				writer.writeByte(73);
				writer.writeByte(35);
				$Franca_Serialization_UBJson.$writeValue(new $Franca_JsonValue.$ctorf(value.get_count()), writer, settings);
				var arr1 = ss.cast(value.value, $Franca_Collections_ShortArray);
				for (var i1 = 0; i1 < arr1.get_length(); i1++) {
					writer.writeInt16$1(arr1.get_item(i1), settings.endian);
				}
			}
			else if (value.get_isInt32Array()) {
				writer.writeByte(36);
				writer.writeByte(108);
				writer.writeByte(35);
				$Franca_Serialization_UBJson.$writeValue(new $Franca_JsonValue.$ctorf(value.get_count()), writer, settings);
				var arr2 = ss.cast(value.value, $Franca_Collections_IntArray);
				for (var i2 = 0; i2 < arr2.get_length(); i2++) {
					writer.writeInt32$1(arr2.get_item(i2), settings.endian);
				}
			}
			else if (value.get_isFloat32Array()) {
				writer.writeByte(36);
				writer.writeByte(100);
				writer.writeByte(35);
				$Franca_Serialization_UBJson.$writeValue(new $Franca_JsonValue.$ctorf(value.get_count()), writer, settings);
				var arr3 = ss.cast(value.value, $Franca_Collections_FloatArray);
				for (var i3 = 0; i3 < arr3.get_length(); i3++) {
					writer.writeSingle$1(arr3.get_item(i3), settings.endian);
				}
			}
			else if (value.get_isFloat64Array()) {
				writer.writeByte(36);
				writer.writeByte(68);
				writer.writeByte(35);
				$Franca_Serialization_UBJson.$writeValue(new $Franca_JsonValue.$ctorf(value.get_count()), writer, settings);
				var arr4 = ss.cast(value.value, $Franca_Collections_DoubleArray);
				for (var i4 = 0; i4 < arr4.get_length(); i4++) {
					writer.writeDouble$1(arr4.get_item(i4), settings.endian);
				}
			}
			else {
				for (var i5 = 0; i5 < value.get_count(); i5++) {
					$Franca_Serialization_UBJson.$writeValue(value.get_item$1(i5), writer, settings);
				}
				writer.writeByte(93);
			}
		}
		else if (value.get_isObject()) {
			var dict = ss.cast(value.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]));
			writer.writeByte(123);
			var $t1 = dict.getEnumerator();
			try {
				while ($t1.moveNext()) {
					var kvp = $t1.current();
					var keyData = $Franca_Text_UTF8.toBinaryData(kvp.key);
					$Franca_Serialization_UBJson.$writeValue(new $Franca_JsonValue.$ctorf(keyData.get_length()), writer, settings);
					writer.write(keyData);
					$Franca_Serialization_UBJson.$writeValue(kvp.value, writer, settings);
				}
			}
			finally {
				$t1.dispose();
			}
			writer.writeByte(125);
		}
		else {
			throw new $Franca_Serialization_InvalidJsonException.$ctor2(ss.formatString('Invalid json type, was not number, bool, null, string, array, or object ({0}).', (ss.isValue(value.value) ? ss.getTypeFullName(ss.getInstanceType(value.value)) : '<null>')));
		}
	};
	global.Franca.Serialization.UBJson = $Franca_Serialization_UBJson;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.UBJType
	var $Franca_Serialization_UBJType = function() {
	};
	$Franca_Serialization_UBJType.__typeName = 'Franca.Serialization.UBJType';
	global.Franca.Serialization.UBJType = $Franca_Serialization_UBJType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.BinJsonFixedArray
	var $Franca_Serialization_Streaming_BinJsonFixedArray = function() {
	};
	$Franca_Serialization_Streaming_BinJsonFixedArray.__typeName = 'Franca.Serialization.Streaming.BinJsonFixedArray';
	global.Franca.Serialization.Streaming.BinJsonFixedArray = $Franca_Serialization_Streaming_BinJsonFixedArray;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.BinJsonToken
	var $Franca_Serialization_Streaming_BinJsonToken = function() {
	};
	$Franca_Serialization_Streaming_BinJsonToken.__typeName = 'Franca.Serialization.Streaming.BinJsonToken';
	global.Franca.Serialization.Streaming.BinJsonToken = $Franca_Serialization_Streaming_BinJsonToken;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.IJsonContainerFinalizer
	var $Franca_Serialization_Streaming_IJsonContainerFinalizer = function() {
	};
	$Franca_Serialization_Streaming_IJsonContainerFinalizer.__typeName = 'Franca.Serialization.Streaming.IJsonContainerFinalizer';
	global.Franca.Serialization.Streaming.IJsonContainerFinalizer = $Franca_Serialization_Streaming_IJsonContainerFinalizer;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.IJsonReader
	var $Franca_Serialization_Streaming_IJsonReader = function() {
	};
	$Franca_Serialization_Streaming_IJsonReader.__typeName = 'Franca.Serialization.Streaming.IJsonReader';
	global.Franca.Serialization.Streaming.IJsonReader = $Franca_Serialization_Streaming_IJsonReader;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.IJsonStreamWriter
	var $Franca_Serialization_Streaming_IJsonStreamWriter = function() {
	};
	$Franca_Serialization_Streaming_IJsonStreamWriter.__typeName = 'Franca.Serialization.Streaming.IJsonStreamWriter';
	global.Franca.Serialization.Streaming.IJsonStreamWriter = $Franca_Serialization_Streaming_IJsonStreamWriter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.IJsonWriter
	var $Franca_Serialization_Streaming_IJsonWriter = function() {
	};
	$Franca_Serialization_Streaming_IJsonWriter.__typeName = 'Franca.Serialization.Streaming.IJsonWriter';
	global.Franca.Serialization.Streaming.IJsonWriter = $Franca_Serialization_Streaming_IJsonWriter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.IJsonWriterExtensions
	var $Franca_Serialization_Streaming_IJsonWriterExtensions = function() {
	};
	$Franca_Serialization_Streaming_IJsonWriterExtensions.__typeName = 'Franca.Serialization.Streaming.IJsonWriterExtensions';
	$Franca_Serialization_Streaming_IJsonWriterExtensions.write = function(writer, value, key) {
		if (ss.isNullOrUndefined(value)) {
			writer.writeNull(key);
			return;
		}
		var del = {};
		if (!$Franca_Serialization_Streaming_IJsonWriterExtensions.$delegates.tryGetValue(ss.getInstanceType(value), del)) {
			throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
		}
		del.$(writer, value, key);
	};
	$Franca_Serialization_Streaming_IJsonWriterExtensions.$writeByteArray = function(writer, value, key) {
		writer.write$a(ss.cast(value, $Franca_Collections_ByteArray), key, true, 0, -1);
	};
	$Franca_Serialization_Streaming_IJsonWriterExtensions.$writeSByteArray = function(writer, value, key) {
		writer.write$e(ss.cast(value, $Franca_Collections_SByteArray), key, true, 0, -1);
	};
	$Franca_Serialization_Streaming_IJsonWriterExtensions.$writeShortArray = function(writer, value, key) {
		writer.write$f(ss.cast(value, $Franca_Collections_ShortArray), key, true, 0, -1);
	};
	$Franca_Serialization_Streaming_IJsonWriterExtensions.$writeUShortArray = function(writer, value, key) {
		writer.write$h(ss.cast(value, $Franca_Collections_UShortArray), key, true, 0, -1);
	};
	$Franca_Serialization_Streaming_IJsonWriterExtensions.$writeIntArray = function(writer, value, key) {
		writer.write$d(ss.cast(value, $Franca_Collections_IntArray), key, true, 0, -1);
	};
	$Franca_Serialization_Streaming_IJsonWriterExtensions.$writeUIntArray = function(writer, value, key) {
		writer.write$g(ss.cast(value, $Franca_Collections_UIntArray), key, true, 0, -1);
	};
	$Franca_Serialization_Streaming_IJsonWriterExtensions.$writeFloatArray = function(writer, value, key) {
		writer.write$c(ss.cast(value, $Franca_Collections_FloatArray), key, true, 0, -1);
	};
	$Franca_Serialization_Streaming_IJsonWriterExtensions.$writeDoubleArray = function(writer, value, key) {
		writer.write$b(ss.cast(value, $Franca_Collections_DoubleArray), key, true, 0, -1);
	};
	global.Franca.Serialization.Streaming.IJsonWriterExtensions = $Franca_Serialization_Streaming_IJsonWriterExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonArrayReader
	var $Franca_Serialization_Streaming_JsonArrayReader = function() {
		this.$isFixedArray = false;
		this.reader = null;
		this.minLength = 0;
		this.maxLength = 0;
		this.$length = 0;
		this.onEnd = null;
	};
	$Franca_Serialization_Streaming_JsonArrayReader.__typeName = 'Franca.Serialization.Streaming.JsonArrayReader';
	$Franca_Serialization_Streaming_JsonArrayReader.$ctor1 = function(reader, minLength, maxLength) {
		this.$isFixedArray = false;
		this.reader = null;
		this.minLength = 0;
		this.maxLength = 0;
		this.$length = 0;
		this.onEnd = null;
		this.$isFixedArray = false;
		this.reader = reader;
		this.minLength = minLength;
		this.maxLength = maxLength;
		this.$length = 0;
		this.onEnd = null;
	};
	$Franca_Serialization_Streaming_JsonArrayReader.$ctor2 = function(reader, length, onEnd, minLength, maxLength) {
		this.$isFixedArray = false;
		this.reader = null;
		this.minLength = 0;
		this.maxLength = 0;
		this.$length = 0;
		this.onEnd = null;
		this.$isFixedArray = true;
		this.reader = reader;
		this.$length = length;
		this.onEnd = onEnd;
		this.minLength = minLength;
		this.maxLength = maxLength;
	};
	$Franca_Serialization_Streaming_JsonArrayReader.getDefaultValue = function() {
		return new $Franca_Serialization_Streaming_JsonArrayReader();
	};
	global.Franca.Serialization.Streaming.JsonArrayReader = $Franca_Serialization_Streaming_JsonArrayReader;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonBinaryReader
	var $Franca_Serialization_Streaming_JsonBinaryReader = function(reader, requireHeader) {
		this.$json = null;
		this.$tokenType = 0;
		this.$typedArrayType = 0;
		this.$typedArrayLength = 0;
		this.$eof = false;
		this.$depth = 0;
		this.$skipStack = null;
		this.$disposedValue = false;
		this.$json = reader;
		this.$skipStack = new Array();
		if (requireHeader) {
			this.$readFileHeader();
		}
		this.$readFirstToken();
	};
	$Franca_Serialization_Streaming_JsonBinaryReader.__typeName = 'Franca.Serialization.Streaming.JsonBinaryReader';
	global.Franca.Serialization.Streaming.JsonBinaryReader = $Franca_Serialization_Streaming_JsonBinaryReader;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonBinaryWriter
	var $Franca_Serialization_Streaming_JsonBinaryWriter = function(writer, writeHeader) {
		this.$json = null;
		this.$disposedValue = false;
		this.$json = writer;
		if (writeHeader) {
			this.$writeHeader();
		}
	};
	$Franca_Serialization_Streaming_JsonBinaryWriter.__typeName = 'Franca.Serialization.Streaming.JsonBinaryWriter';
	global.Franca.Serialization.Streaming.JsonBinaryWriter = $Franca_Serialization_Streaming_JsonBinaryWriter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonContainerType
	var $Franca_Serialization_Streaming_JsonContainerType = function() {
	};
	$Franca_Serialization_Streaming_JsonContainerType.__typeName = 'Franca.Serialization.Streaming.JsonContainerType';
	global.Franca.Serialization.Streaming.JsonContainerType = $Franca_Serialization_Streaming_JsonContainerType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonContainerWriter
	var $Franca_Serialization_Streaming_JsonContainerWriter = function() {
		this.parent = null;
		this.type = 0;
	};
	$Franca_Serialization_Streaming_JsonContainerWriter.__typeName = 'Franca.Serialization.Streaming.JsonContainerWriter';
	$Franca_Serialization_Streaming_JsonContainerWriter.$ctor1 = function(parent, type) {
		this.parent = null;
		this.type = 0;
		this.parent = parent;
		this.type = type;
	};
	$Franca_Serialization_Streaming_JsonContainerWriter.getDefaultValue = function() {
		return new $Franca_Serialization_Streaming_JsonContainerWriter();
	};
	global.Franca.Serialization.Streaming.JsonContainerWriter = $Franca_Serialization_Streaming_JsonContainerWriter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonFixedArrayWriter
	var $Franca_Serialization_Streaming_JsonFixedArrayWriter = function() {
		this.parent = null;
		this.isNullArray = false;
	};
	$Franca_Serialization_Streaming_JsonFixedArrayWriter.__typeName = 'Franca.Serialization.Streaming.JsonFixedArrayWriter';
	$Franca_Serialization_Streaming_JsonFixedArrayWriter.$ctor1 = function(parent, nullArray) {
		this.parent = null;
		this.isNullArray = false;
		this.parent = parent;
		this.isNullArray = nullArray;
	};
	$Franca_Serialization_Streaming_JsonFixedArrayWriter.getDefaultValue = function() {
		return new $Franca_Serialization_Streaming_JsonFixedArrayWriter();
	};
	global.Franca.Serialization.Streaming.JsonFixedArrayWriter = $Franca_Serialization_Streaming_JsonFixedArrayWriter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonObjectReader
	var $Franca_Serialization_Streaming_JsonObjectReader = function() {
		this.parent = null;
	};
	$Franca_Serialization_Streaming_JsonObjectReader.__typeName = 'Franca.Serialization.Streaming.JsonObjectReader';
	$Franca_Serialization_Streaming_JsonObjectReader.$ctor1 = function(parent) {
		this.parent = null;
		this.parent = parent;
	};
	$Franca_Serialization_Streaming_JsonObjectReader.getDefaultValue = function() {
		return new $Franca_Serialization_Streaming_JsonObjectReader();
	};
	global.Franca.Serialization.Streaming.JsonObjectReader = $Franca_Serialization_Streaming_JsonObjectReader;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonObjectValue
	var $Franca_Serialization_Streaming_JsonObjectValue = function() {
		this.key = null;
		this.type = 0;
	};
	$Franca_Serialization_Streaming_JsonObjectValue.__typeName = 'Franca.Serialization.Streaming.JsonObjectValue';
	$Franca_Serialization_Streaming_JsonObjectValue.$ctor1 = function(key, type) {
		this.key = null;
		this.type = 0;
		this.key = key;
		this.type = type;
	};
	$Franca_Serialization_Streaming_JsonObjectValue.getDefaultValue = function() {
		return new $Franca_Serialization_Streaming_JsonObjectValue();
	};
	$Franca_Serialization_Streaming_JsonObjectValue.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_Serialization_Streaming_JsonObjectValue.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.Serialization.Streaming.JsonObjectValue = $Franca_Serialization_Streaming_JsonObjectValue;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonStringReader
	var $Franca_Serialization_Streaming_JsonStringReader = function(json) {
		this.$str = null;
		this.$json = null;
		this.$index = 0;
		this.$firstValueStack = null;
		this.$skipStack = null;
		this.$valueToken = ss.getDefaultValue($Franca_Serialization_Streaming_JsonToken);
		this.$numberExponent = 0;
		this.$json = json;
		this.$str = new ss.StringBuilder();
		this.$firstValueStack = [];
		this.$skipStack = new Array();
		this.$readFirstToken();
	};
	$Franca_Serialization_Streaming_JsonStringReader.__typeName = 'Franca.Serialization.Streaming.JsonStringReader';
	$Franca_Serialization_Streaming_JsonStringReader.$startsWith = function(source, value) {
		if (source.length < value.length) {
			return false;
		}
		for (var i = 0; i < value.length; i++) {
			if (source.charCodeAt(i) !== value.charCodeAt(i)) {
				return false;
			}
		}
		return true;
	};
	$Franca_Serialization_Streaming_JsonStringReader.$endsWith = function(source, value) {
		if (source.length < value.length) {
			return false;
		}
		for (var i = source.length - 1, j = value.length - 1; j >= 0; i--, j--) {
			if (source.charCodeAt(i) !== value.charCodeAt(j)) {
				return false;
			}
		}
		return true;
	};
	$Franca_Serialization_Streaming_JsonStringReader.$endReadFixedArray = function(reader) {
		reader.endReadArray();
	};
	$Franca_Serialization_Streaming_JsonStringReader.get_$endReadFixedArrayDelegate = function() {
		return $Franca_Serialization_Streaming_JsonStringReader.$_endReadFixedArrayDelegate || ($Franca_Serialization_Streaming_JsonStringReader.$_endReadFixedArrayDelegate = $Franca_Serialization_Streaming_JsonStringReader.$endReadFixedArray);
	};
	$Franca_Serialization_Streaming_JsonStringReader.$isWhitespace = function(c) {
		return c === 32 || c === 9 || c === 10 || c === 13;
	};
	$Franca_Serialization_Streaming_JsonStringReader.$pop = function(stack) {
		if (stack.length > 0) {
			ss.removeAt(stack, stack.length - 1);
		}
	};
	$Franca_Serialization_Streaming_JsonStringReader.$push = function(stack, value) {
		stack.push(value);
	};
	global.Franca.Serialization.Streaming.JsonStringReader = $Franca_Serialization_Streaming_JsonStringReader;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonStringWriter
	var $Franca_Serialization_Streaming_JsonStringWriter = function(indent) {
		this.$json = null;
		this.$firstValueStack = null;
		this.$indentSize = 0;
		this.$indent = 0;
		this.$isArrayStack = null;
		this.$json = new ss.StringBuilder();
		this.$firstValueStack = [];
		this.$isArrayStack = new Array();
		this.$indentSize = indent;
	};
	$Franca_Serialization_Streaming_JsonStringWriter.__typeName = 'Franca.Serialization.Streaming.JsonStringWriter';
	$Franca_Serialization_Streaming_JsonStringWriter.$indentString = function(indent) {
		if (ss.isValue($Franca_Serialization_Streaming_JsonStringWriter.$indentStrings)) {
			var s = {};
			if (!$Franca_Serialization_Streaming_JsonStringWriter.$indentStrings.tryGetValue(indent, s)) {
				s.$ = ss.stringFromChar(String.fromCharCode(32), indent);
				$Franca_Serialization_Streaming_JsonStringWriter.$indentStrings.set_item(indent, s.$);
			}
			return s.$;
		}
		$Franca_Serialization_Streaming_JsonStringWriter.$indentStrings = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, String]))();
		return $Franca_Serialization_Streaming_JsonStringWriter.$indentString(indent);
	};
	$Franca_Serialization_Streaming_JsonStringWriter.$pop = function(stack) {
		if (stack.length > 0) {
			ss.removeAt(stack, stack.length - 1);
		}
	};
	$Franca_Serialization_Streaming_JsonStringWriter.$push = function(stack, value) {
		stack.push(value);
	};
	global.Franca.Serialization.Streaming.JsonStringWriter = $Franca_Serialization_Streaming_JsonStringWriter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonToken
	var $Franca_Serialization_Streaming_JsonToken = function() {
		this.value = null;
		this.type = 0;
	};
	$Franca_Serialization_Streaming_JsonToken.__typeName = 'Franca.Serialization.Streaming.JsonToken';
	$Franca_Serialization_Streaming_JsonToken.$ctor1 = function(value, type) {
		this.value = null;
		this.type = 0;
		this.value = value;
		this.type = type;
	};
	$Franca_Serialization_Streaming_JsonToken.getDefaultValue = function() {
		return new $Franca_Serialization_Streaming_JsonToken();
	};
	global.Franca.Serialization.Streaming.JsonToken = $Franca_Serialization_Streaming_JsonToken;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonTokenType
	var $Franca_Serialization_Streaming_JsonTokenType = function() {
	};
	$Franca_Serialization_Streaming_JsonTokenType.__typeName = 'Franca.Serialization.Streaming.JsonTokenType';
	global.Franca.Serialization.Streaming.JsonTokenType = $Franca_Serialization_Streaming_JsonTokenType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.JsonValueType
	var $Franca_Serialization_Streaming_JsonValueType = function() {
	};
	$Franca_Serialization_Streaming_JsonValueType.__typeName = 'Franca.Serialization.Streaming.JsonValueType';
	global.Franca.Serialization.Streaming.JsonValueType = $Franca_Serialization_Streaming_JsonValueType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.Streaming.StreamingJsonTempException
	var $Franca_Serialization_Streaming_StreamingJsonTempException = function() {
		ss.Exception.call(this);
	};
	$Franca_Serialization_Streaming_StreamingJsonTempException.__typeName = 'Franca.Serialization.Streaming.StreamingJsonTempException';
	$Franca_Serialization_Streaming_StreamingJsonTempException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_Serialization_Streaming_StreamingJsonTempException.$ctor2 = function(message, inner) {
		ss.Exception.call(this, message, inner);
	};
	global.Franca.Serialization.Streaming.StreamingJsonTempException = $Franca_Serialization_Streaming_StreamingJsonTempException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.ASCII
	var $Franca_Text_ASCII = function() {
	};
	$Franca_Text_ASCII.__typeName = 'Franca.Text.ASCII';
	$Franca_Text_ASCII.toBinaryData = function(str, offset, length, removeExtended) {
		if (length < 0) {
			length = str.length - offset;
		}
		var bin = new $Franca_BinaryData.$ctor5(length);
		var data = bin.get_uint8Array();
		var j = offset;
		for (var i = 0; i < length; i++, j++) {
			var c = str.charCodeAt(j) & 255;
			if (c > 127) {
				if (removeExtended) {
					i--;
					continue;
				}
				c = 63;
				// question mark
			}
			data[i] = c;
		}
		return bin;
	};
	$Franca_Text_ASCII.fromBinaryData = function(data, offset, length, removeExtended) {
		if (length < 0) {
			length = data.get_length() - offset;
		}
		var arr = data.get_uint8Array();
		var buffer = new Array(length);
		var j = offset;
		for (var i = 0; i < length; i++, j++) {
			var c = arr[j];
			if (c < 128) {
				// direct access for speed
				buffer[i] = c;
			}
			else if (removeExtended) {
				i--;
			}
			else {
				buffer[i] = 63;
			}
		}
		return String.fromCharCode.apply(null, buffer);
	};
	global.Franca.Text.ASCII = $Franca_Text_ASCII;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.Base32
	var $Franca_Text_Base32 = function() {
	};
	$Franca_Text_Base32.__typeName = 'Franca.Text.Base32';
	$Franca_Text_Base32.get_$encodeBuilder = function() {
		return $Franca_Text_Base32.$_encodeBuilder || ($Franca_Text_Base32.$_encodeBuilder = new ss.StringBuilder());
	};
	$Franca_Text_Base32.encode = function(data, pad) {
		if (ss.isNullOrUndefined(data)) {
			throw new ss.ArgumentNullException('data');
		}
		var outLength = ss.Int32.trunc(Math.ceil(data.get_length() / 5 * 8));
		//int capacity =
		//    pad ?
		//    (int)Math.Ceiling(data.Length / 5.0) * 8 :
		//    outLength;
		var str = $Franca_Text_Base32.get_$encodeBuilder();
		try {
			var srcIndex = { $: 0 };
			for (var outIndex = 0; outIndex < outLength; outIndex++) {
				var mask = outIndex % 8;
				var val = $Franca_Text_Base32.$getValue(data, srcIndex, mask);
				str.append($Franca_Text_Base32.$encodeSymbols[val]);
			}
			if (pad) {
				while (str.length % 8 !== 0) {
					str.append('=');
				}
			}
			return str.toString();
		}
		finally {
			str.clear();
		}
	};
	$Franca_Text_Base32.$getValue = function(data, srcIndex, maskIndex) {
		var mask = $Franca_Text_Base32.$encodeMasks[maskIndex];
		if (mask.$maskB >= 0) {
			var v0 = (data.get_item(srcIndex.$) & mask.$maskA) >> mask.$shiftA;
			srcIndex.$++;
			var v1;
			if (srcIndex.$ < data.get_length()) {
				v1 = (data.get_item(srcIndex.$) & mask.$maskB) << mask.$shiftB;
			}
			else {
				v1 = 0;
			}
			return v0 | v1;
		}
		else {
			var v = (data.get_item(srcIndex.$) & mask.$maskA) >> mask.$shiftA;
			if (maskIndex === 7) {
				srcIndex.$++;
			}
			return v;
		}
	};
	$Franca_Text_Base32.decode = function(base32, strict) {
		if (ss.isNullOrUndefined(base32)) {
			throw new ss.ArgumentNullException('base32');
		}
		var padding = false;
		var partIndex = 0;
		var parts = [];
		base32 = base32.trim();
		for (var i = 0; i < base32.length; i++) {
			if (!$Franca_Text_Base32.$acceptedSymbols.contains(base32.charCodeAt(i))) {
				if (base32.charCodeAt(i) === 45) {
					throw new $Franca_InvalidFormatException.$ctor1("Malformed base32 string, illegal character '" + $System_CharExtensions.toStringInvariant(base32.charCodeAt(i)) + "' detected. Use Base32.RemoveHyphens before calling Decode");
				}
				else {
					throw new $Franca_InvalidFormatException.$ctor1("Malformed base32 string, illegal character '" + $System_CharExtensions.toStringInvariant(base32.charCodeAt(i)) + "' detected");
				}
			}
		}
		for (var i1 = 0; i1 < base32.length; i1++) {
			if (base32.charCodeAt(i1) === 61) {
				padding = true;
			}
			else if (padding) {
				padding = false;
				parts.push($Franca_Text_Base32.$decodePart(base32.substr(partIndex, i1 - partIndex), strict));
				partIndex = i1;
			}
		}
		if (base32.length - partIndex > 0) {
			parts.push($Franca_Text_Base32.$decodePart(base32.substr(partIndex, base32.length - partIndex), strict));
		}
		if (parts.length === 1) {
			return parts[0];
		}
		var totalLength = 0;
		for (var i2 = 0; i2 < parts.length; i2++) {
			totalLength += parts[i2].get_length();
		}
		var concatenated = new $Franca_BinaryData.$ctor5(totalLength);
		var concatIndex = 0;
		for (var i3 = 0; i3 < parts.length; i3++) {
			$Franca_BinaryData.blockCopy(parts[i3], 0, concatenated, concatIndex, parts[i3].get_length());
			concatIndex += parts[i3].get_length();
		}
		return concatenated;
	};
	$Franca_Text_Base32.$decodePart = function(base32, strict) {
		var padding = 0;
		for (var i = base32.length - 1; i >= 0; i--) {
			if (base32.charCodeAt(i) === 61) {
				padding++;
			}
			else {
				break;
			}
		}
		var trimmedLength = base32.length - padding;
		var remaining = trimmedLength % 8;
		var outLength = ss.Int32.div(trimmedLength, 8) * 5;
		switch (remaining) {
			case 1: {
				if (strict) {
					throw new $Franca_InvalidFormatException.$ctor1($Franca_Text_Base32.$strictException);
				}
				else {
					outLength += 1;
				}
				break;
			}
			case 2: {
				outLength += 1;
				break;
			}
			case 3: {
				if (strict) {
					throw new $Franca_InvalidFormatException.$ctor1($Franca_Text_Base32.$strictException);
				}
				else {
					outLength += 2;
				}
				break;
			}
			case 4: {
				outLength += 2;
				break;
			}
			case 5: {
				outLength += 3;
				break;
			}
			case 6: {
				if (strict) {
					throw new $Franca_InvalidFormatException.$ctor1($Franca_Text_Base32.$strictException);
				}
				else {
					outLength += 4;
				}
				break;
			}
			case 7: {
				outLength += 4;
				break;
			}
		}
		var data = new $Franca_BinaryData.$ctor5(outLength);
		var chunkLength = 5;
		var chunk = new $Franca_BinaryData.$ctor5(chunkLength);
		var outIndex = 0;
		for (var srcIndex = 0; srcIndex < trimmedLength; srcIndex += 8) {
			$Franca_Text_Base32.$fillChunk(chunk, base32, srcIndex);
			for (var i1 = 0; i1 < chunkLength; i1++) {
				if (outIndex < data.get_length()) {
					data.set_item(outIndex, chunk.get_item(i1));
				}
				else {
					break;
				}
				outIndex++;
			}
		}
		if (outIndex < data.get_length()) {
			throw new $Franca_InvalidFormatException.$ctor1('Malformed base32 string, expected data length was ' + data.get_length() + ', filled only ' + outIndex);
		}
		return data;
	};
	$Franca_Text_Base32.$fillChunk = function(chunk, base32, srcIndex) {
		var v;
		v = $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex)) | $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex + 1)) << $Franca_Text_Base32.$encodeMasks[1].$shiftA;
		chunk.set_item(0, v & 255);
		if (srcIndex + 3 < base32.length) {
			v = $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex + 1)) >> $Franca_Text_Base32.$encodeMasks[1].$shiftB | $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex + 2)) << $Franca_Text_Base32.$encodeMasks[2].$shiftA | $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex + 3)) << $Franca_Text_Base32.$encodeMasks[3].$shiftA;
			chunk.set_item(1, v & 255);
		}
		if (srcIndex + 4 < base32.length) {
			v = $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex + 3)) >> $Franca_Text_Base32.$encodeMasks[3].$shiftB | $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex + 4)) << $Franca_Text_Base32.$encodeMasks[4].$shiftA;
			chunk.set_item(2, v & 255);
		}
		if (srcIndex + 6 < base32.length) {
			v = $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex + 4)) >> $Franca_Text_Base32.$encodeMasks[4].$shiftB | $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex + 5)) << $Franca_Text_Base32.$encodeMasks[5].$shiftA | $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex + 6)) << $Franca_Text_Base32.$encodeMasks[6].$shiftA;
			chunk.set_item(3, v & 255);
		}
		if (srcIndex + 7 < base32.length) {
			v = $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex + 6)) >> $Franca_Text_Base32.$encodeMasks[6].$shiftB | $Franca_Text_Base32.$decodeSymbols.get_item(base32.charCodeAt(srcIndex + 7)) << $Franca_Text_Base32.$encodeMasks[7].$shiftA;
			chunk.set_item(4, v & 255);
		}
	};
	$Franca_Text_Base32.remap = function(base32, ignoreNonBase32) {
		if (ss.isNullOrUndefined(base32)) {
			return null;
		}
		var str = $Franca_Text_Base32.get_$encodeBuilder();
		try {
			for (var i = 0; i < base32.length; i++) {
				if (!$Franca_Text_Base32.$acceptedSymbols.contains(base32.charCodeAt(i))) {
					if (!ignoreNonBase32) {
						if (base32.charCodeAt(i) === 45) {
							throw new $Franca_InvalidFormatException.$ctor1("Malformed base32 string, illegal character '" + $System_CharExtensions.toStringInvariant(base32.charCodeAt(i)) + "' detected. Use Base32.RemoveHyphens before calling Remap or set ignoreNonBase32=true");
						}
						else {
							throw new $Franca_InvalidFormatException.$ctor1("Malformed base32 string, illegal character '" + $System_CharExtensions.toStringInvariant(base32.charCodeAt(i)) + "' detected");
						}
					}
					str.appendChar(base32.charCodeAt(i));
				}
				else {
					var c = base32.charCodeAt(i);
					if (c === 76 || c === 108 || c === 73 || c === 105) {
						str.append('1');
					}
					else if (c === 79 || c === 111) {
						str.append('0');
					}
					else {
						str.append($System_StringExtensions.toUpperInvariant($System_CharExtensions.toStringInvariant(c)));
					}
				}
			}
			return str.toString();
		}
		finally {
			str.clear();
		}
	};
	$Franca_Text_Base32.removeHyphens = function(base32) {
		if (ss.isNullOrUndefined(base32)) {
			return null;
		}
		var str = $Franca_Text_Base32.get_$encodeBuilder();
		try {
			for (var i = 0; i < base32.length; i++) {
				var c = base32.charCodeAt(i);
				if (c !== 45) {
					str.appendChar(c);
				}
			}
			return str.toString();
		}
		finally {
			str.clear();
		}
	};
	global.Franca.Text.Base32 = $Franca_Text_Base32;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.Base64
	var $Franca_Text_Base64 = function() {
	};
	$Franca_Text_Base64.__typeName = 'Franca.Text.Base64';
	$Franca_Text_Base64.encode = function(data) {
		return FrancaGlobals.bufferToBase64(data.get_$uint8Array());
	};
	$Franca_Text_Base64.decode = function(base64) {
		return new $Franca_BinaryData.$ctor4(FrancaGlobals.base64ToBuffer(base64));
	};
	$Franca_Text_Base64.removeHeader = function(base64) {
		var base64Index = ss.indexOfString(base64, ';base64,', 0, 255);
		if (base64Index < 0) {
			return base64;
		}
		else {
			return base64.substring(base64Index + 8);
		}
	};
	global.Franca.Text.Base64 = $Franca_Text_Base64;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.ControlChar
	var $Franca_Text_ControlChar = function() {
	};
	$Franca_Text_ControlChar.__typeName = 'Franca.Text.ControlChar';
	global.Franca.Text.ControlChar = $Franca_Text_ControlChar;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.Markup
	var $Franca_Text_Markup = function() {
	};
	$Franca_Text_Markup.__typeName = 'Franca.Text.Markup';
	$Franca_Text_Markup.write = function(type) {
		switch (type) {
			case 8:
			case 16: {
				console.log('Invalid markup detected in Markup.Write: ' + type + ', no parameters specified');
				return '';
			}
		}
		return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, type]);
	};
	$Franca_Text_Markup.color = function(color) {
		if (ss.isValue(color)) {
			return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 8, $Franca_Text_Markup.colorChannelToChar(ss.unbox(color).get_r()), $Franca_Text_Markup.colorChannelToChar(ss.unbox(color).get_g()), $Franca_Text_Markup.colorChannelToChar(ss.unbox(color).get_b()), $Franca_Text_Markup.colorChannelToChar(ss.unbox(color).get_a())]);
		}
		else {
			return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 72]);
		}
	};
	$Franca_Text_Markup.color$1 = function(r, g, b, a) {
		return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 8, $Franca_Text_Markup.colorChannelToChar(r), $Franca_Text_Markup.colorChannelToChar(g), $Franca_Text_Markup.colorChannelToChar(b), $Franca_Text_Markup.colorChannelToChar(a)]);
	};
	$Franca_Text_Markup.size = function(size) {
		if (size > 0) {
			var first;
			var second;
			if (size >= 128) {
				var intVal = Math.round(size) & 8191;
				// 0x1FFF == 8191 or 13 bits
				first = intVal & 127;
				// 0x7F == 127 or 7 bits
				second = (intVal & 8064) >> 7;
				// 0x1F80 == 1111110000000
			}
			else {
				first = ss.Int32.trunc(size) & 127;
				// 0x7F == 127 or 7 bits
				// 0x3F == 63 or 6 bits, 0x40 sets bit 7 to indicate small number
				second = ss.Int32.trunc(size % 1 / 0.015625) & 63 | 64;
			}
			return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 16, first, second]);
		}
		else {
			return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 80]);
		}
	};
	$Franca_Text_Markup.bold = function(reset) {
		if (reset) {
			return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 65]);
		}
		else {
			return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 1]);
		}
	};
	$Franca_Text_Markup.italic = function(reset) {
		if (reset) {
			return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 66]);
		}
		else {
			return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 2]);
		}
	};
	$Franca_Text_Markup.underline = function(reset) {
		if (reset) {
			return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 68]);
		}
		else {
			return String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 4]);
		}
	};
	$Franca_Text_Markup.isMarkup = function(str, index, tag) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.IsMarkup can't be null");
		}
		for (var i = Math.max(0, index - 5); i < index + 1; i++) {
			if (str.charCodeAt(i) === 6) {
				var markup = $Franca_Text_Markup.read$1(str, i);
				if (ss.isValue(markup) && i + markup.get_length() >= index) {
					tag.$ = markup;
					return true;
				}
			}
		}
		tag.$ = null;
		return false;
	};
	$Franca_Text_Markup.readAll = function(str) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.ReadAll can't be null");
		}
		return $Franca_Text_Markup.readAll$1(str, 0, str.length);
	};
	$Franca_Text_Markup.readAll$1 = function(str, index, length) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.ReadAll can't be null");
		}
		var list = [];
		var end = index + length;
		for (var i = index; i < end; i++) {
			if (str.charCodeAt(i) === 6) {
				var tag;
				if (ss.isValue(tag = $Franca_Text_Markup.read$1(str, i))) {
					list.push(tag);
				}
			}
		}
		return list;
	};
	$Franca_Text_Markup.read = function(str) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.Read can't be null");
		}
		return $Franca_Text_Markup.read$1(str, 0);
	};
	$Franca_Text_Markup.read$1 = function(str, index) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.Read can't be null");
		}
		if (index + 1 >= str.length || str.charCodeAt(index) !== 6) {
			return null;
		}
		var opcode = str.charCodeAt(index + 1);
		var type = opcode;
		if (type === 0) {
			return new $Franca_Text_MarkupTag(0, null, 0, index);
		}
		else {
			var baseType = type;
			var reset = $System_EnumExtensions.hasFlag(type, 64);
			if (reset) {
				baseType = type &= -65;
			}
			switch (baseType) {
				case 0:
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				case 7: {
					return new $Franca_Text_MarkupTag(((reset && baseType !== 0) ? (baseType | 64) : baseType), null, 0, index);
				}
				case 8: {
					if (reset) {
						return new $Franca_Text_MarkupTag(72, null, 0, index);
					}
					else {
						if (index + $Franca_Text_Markup.colorLength >= str.length) {
							console.log('Invalid markup detected in Markup.Read: opcode = ' + opcode + ', insufficient characters for color value');
							return null;
						}
						return new $Franca_Text_MarkupTag(8, new $Franca_Color.$ctor5($Franca_Text_Markup.colorCharToChannel(str.charCodeAt(index + 2)), $Franca_Text_Markup.colorCharToChannel(str.charCodeAt(index + 3)), $Franca_Text_Markup.colorCharToChannel(str.charCodeAt(index + 4)), $Franca_Text_Markup.colorCharToChannel(str.charCodeAt(index + 5))), 0, index);
					}
				}
				case 16: {
					if (reset) {
						return new $Franca_Text_MarkupTag(80, null, 0, index);
					}
					else {
						if (index + $Franca_Text_Markup.sizeLength >= str.length) {
							console.log('Invalid markup detected in Markup.Read: opcode = ' + opcode + ', insufficient characters for size value');
							return null;
						}
						// get values (clamped to 7 bit)
						var first = str.charCodeAt(index + 2) & 127;
						var second = str.charCodeAt(index + 3) & 127;
						var bigNumber = (second & 64) === 0;
						// if bit 7 is not set this is a big number
						second &= -65;
						// unset bit 7
						if (bigNumber) {
							var size = second << 7 | first;
							return new $Franca_Text_MarkupTag(16, null, size, index);
						}
						else {
							return new $Franca_Text_MarkupTag(16, null, first + second / 64, index);
						}
					}
				}
			}
			console.log('Invalid markup detected in Markup.Read: opcode = ' + opcode);
			return null;
		}
	};
	$Franca_Text_Markup.$markupToCode = function(str, cpy, i, last, code) {
		if (i.$ - last.$ > 0) {
			$System_StringBuilderFixes.append(cpy, str, last.$, i.$ - last.$);
		}
		cpy.append(code);
		i.$ += 2;
		last.$ = i.$ + 1;
	};
	$Franca_Text_Markup.$colorToCode = function(str, cpy, i, last, offset) {
		if (i.$ + offset + 8 < str.length) {
			//i+10
			var r = $Franca_Text_Markup.$getHexValue(str, i.$ + offset + 1);
			if (ss.isValue(r)) {
				var g = $Franca_Text_Markup.$getHexValue(str, i.$ + offset + 3);
				if (ss.isValue(g)) {
					var b = $Franca_Text_Markup.$getHexValue(str, i.$ + offset + 5);
					if (ss.isValue(b)) {
						var a = $Franca_Text_Markup.$getHexValue(str, i.$ + offset + 7);
						if (ss.isValue(a)) {
							if (i.$ - last.$ > 0) {
								$System_StringBuilderFixes.append(cpy, str, last.$, i.$ - last.$);
							}
							cpy.append($Franca_Text_Markup.color$1(ss.unbox(r), ss.unbox(g), ss.unbox(b), ss.unbox(a)));
							i.$ += offset + 8;
							last.$ = i.$ + 1;
						}
					}
				}
			}
		}
	};
	$Franca_Text_Markup.$sizeToCode = function(str, cpy, i, last, offset, maxSize) {
		if (i.$ + offset + 4 < str.length) {
			var number = $Franca_Text_Markup.$getNumberValue(str, i.$ + offset + 1);
			if (ss.isValue(number)) {
				var size = ((maxSize > 0) ? Math.min(maxSize, ss.unbox(number)) : ss.unbox(number));
				if (i.$ - last.$ > 0) {
					$System_StringBuilderFixes.append(cpy, str, last.$, i.$ - last.$);
				}
				cpy.append($Franca_Text_Markup.size(size));
				i.$ += offset + 4;
				last.$ = i.$ + 1;
			}
		}
	};
	$Franca_Text_Markup.toCode = function(str, maxSize) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.ToCode can't be null");
		}
		return $Franca_Text_Markup.toCode$1(str, 0, str.length, maxSize);
	};
	$Franca_Text_Markup.get_$strBuilder = function() {
		return $Franca_Text_Markup.$_strBuilder || ($Franca_Text_Markup.$_strBuilder = new ss.StringBuilder());
	};
	$Franca_Text_Markup.toCode$1 = function(str, index, length, maxSize) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.ToCode can't be null");
		}
		var cpy = $Franca_Text_Markup.get_$strBuilder();
		try {
			var last = { $: index };
			var end = index + length;
			for (var i = { $: index }; i.$ < end; i.$++) {
				if (str.charCodeAt(i.$) === 94 && i.$ + 2 < str.length) {
					// TODO: Make it so that only ^ right in front of a valid markup need to be escaped
					if (str.charCodeAt(i.$ + 1) === 94) {
						if (i.$ - last.$ > 0) {
							$System_StringBuilderFixes.append(cpy, str, last.$, i.$ - last.$);
						}
						// escape markup
						cpy.appendChar(94);
						i.$++;
						// skip to the next ^, loop will skip over it
						last.$ = i.$ + 1;
					}
					else if (str.charCodeAt(i.$ + 1) === 109) {
						var cmd = str.charCodeAt(i.$ + 2);
						switch (cmd) {
							case 88:
							case 120: {
								if (i.$ + 4 < str.length) {
									var opcode = $Franca_Text_Markup.$getHexValue(str, i.$ + 3);
									if (ss.isValue(opcode)) {
										if (ss.unbox(opcode) === 8) {
											$Franca_Text_Markup.$colorToCode(str, cpy, i, last, 4);
										}
										else if (ss.unbox(opcode) === 16) {
											$Franca_Text_Markup.$sizeToCode(str, cpy, i, last, 4, maxSize);
										}
										else if (ss.unbox(opcode) >= 0 && ss.unbox(opcode) <= 7 || (ss.unbox(opcode) >= 64 || ss.unbox(opcode) <= 73)) {
											$Franca_Text_Markup.$markupToCode(str, cpy, i, last, $Franca_Text_Markup.write(ss.unbox(opcode)));
										}
										else {
											console.log('Invalid markup detected in Markup.ToCode: opcode = ' + ss.unbox(opcode));
										}
									}
								}
								break;
							}
							case 82:
							case 114: {
								$Franca_Text_Markup.$markupToCode(str, cpy, i, last, $Franca_Text_Markup.reset);
								break;
							}
							case 98: {
								$Franca_Text_Markup.$markupToCode(str, cpy, i, last, $Franca_Text_Markup.bold(false));
								break;
							}
							case 105: {
								$Franca_Text_Markup.$markupToCode(str, cpy, i, last, $Franca_Text_Markup.italic(false));
								break;
							}
							case 117: {
								$Franca_Text_Markup.$markupToCode(str, cpy, i, last, $Franca_Text_Markup.underline(false));
								break;
							}
							case 99: {
								$Franca_Text_Markup.$colorToCode(str, cpy, i, last, 2);
								break;
							}
							case 115: {
								$Franca_Text_Markup.$sizeToCode(str, cpy, i, last, 2, maxSize);
								break;
							}
							case 66: {
								$Franca_Text_Markup.$markupToCode(str, cpy, i, last, $Franca_Text_Markup.bold(true));
								break;
							}
							case 73: {
								$Franca_Text_Markup.$markupToCode(str, cpy, i, last, $Franca_Text_Markup.italic(true));
								break;
							}
							case 85: {
								$Franca_Text_Markup.$markupToCode(str, cpy, i, last, $Franca_Text_Markup.underline(true));
								break;
							}
							case 67: {
								$Franca_Text_Markup.$markupToCode(str, cpy, i, last, $Franca_Text_Markup.color(null));
								break;
							}
							case 83: {
								$Franca_Text_Markup.$markupToCode(str, cpy, i, last, $Franca_Text_Markup.size(0));
								break;
							}
						}
					}
				}
			}
			if (last.$ === 0 && length === str.length) {
				return str;
				// don't copy cause we don't have to
			}
			else {
				if (end - last.$ > 0) {
					$System_StringBuilderFixes.append(cpy, str, last.$, end - last.$);
				}
				return cpy.toString();
			}
		}
		finally {
			cpy.clear();
		}
	};
	$Franca_Text_Markup.$getNumberValue = function(str, index) {
		for (var i = 0; i < 4; i++) {
			var chr = str.charCodeAt(index + i);
			if ((chr < 48 || chr >= 58) && chr !== 46) {
				return null;
			}
		}
		var num = $Franca_Calc.parseNumber(str.substr(index, 4));
		if (isNaN(num)) {
			return null;
		}
		return num;
	};
	$Franca_Text_Markup.$getHexValue = function(str, index) {
		var first = str.charCodeAt(index);
		var second = str.charCodeAt(index + 1);
		var firstVal, scndVal;
		if (first >= 48 && first < 58) {
			firstVal = first - 48;
		}
		else if (first >= 65 && first < 71) {
			firstVal = first - 55;
			// - 65 + 10
		}
		else if (first >= 97 && first < 103) {
			firstVal = first - 87;
			// - 97 + 10
		}
		else {
			return null;
		}
		if (second >= 48 && second < 58) {
			scndVal = second - 48;
		}
		else if (second >= 65 && second < 71) {
			scndVal = second - 55;
			// - 65 + 10
		}
		else if (second >= 97 && second < 103) {
			scndVal = second - 87;
			// - 97 + 10
		}
		else {
			return null;
		}
		return firstVal << 4 | scndVal;
	};
	$Franca_Text_Markup.toText = function(str) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.ToText can't be null");
		}
		return $Franca_Text_Markup.toText$1(str, 0, str.length);
	};
	$Franca_Text_Markup.toText$1 = function(str, index, length) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.ToText can't be null");
		}
		var cpy = $Franca_Text_Markup.get_$strBuilder();
		try {
			var last = index;
			var end = index + length;
			var $t1 = $Franca_Text_Markup.readAll$1(str, index, length);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var markup = $t1[$t2];
				if (markup.get_index() - last > 0) {
					$System_StringBuilderFixes.append(cpy, str, last, markup.get_index() - last);
				}
				cpy.append(markup.toText());
				last = markup.get_index() + markup.get_length();
			}
			if (last === 0 && length === str.length) {
				return str;
				// don't copy cause we don't have to
			}
			else {
				if (end - last > 0) {
					$System_StringBuilderFixes.append(cpy, str, last, end - last);
				}
				return cpy.toString();
			}
		}
		finally {
			cpy.clear();
		}
	};
	$Franca_Text_Markup.toRtf = function(str, formatting, align) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.ToRtf can't be null");
		}
		return $Franca_Text_Markup.toRtf$1(str, 0, str.length, formatting, align);
	};
	$Franca_Text_Markup.toRtf$1 = function(str, index, length, formatting, align) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.ToRtf can't be null");
		}
		var converter = new $Franca_Text_MarkupRtfConverter();
		return converter.convert$1(str, index, length, formatting, align);
	};
	$Franca_Text_Markup.toHtml = function(str, formatting, align) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.ToHtml can't be null");
		}
		return $Franca_Text_Markup.toHtml$1(str, 0, str.length, formatting, align);
	};
	$Franca_Text_Markup.toHtml$1 = function(str, index, length, formatting, align) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.ToHtml can't be null");
		}
		var converter = new $Franca_Text_MarkupHtmlConverter();
		return converter.convert$1(str, index, length, formatting, align);
	};
	$Franca_Text_Markup.toLocalizableHtml = function(str) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.ToLocalizableHtml can't be null");
		}
		var $t1 = new $Franca_Text_MarkupHtmlConverter();
		$t1.convertNewlines = false;
		var converter = $t1;
		return converter.convert(str, null, null);
	};
	$Franca_Text_Markup.remove = function(str) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.Remove can't be null");
		}
		return $Franca_Text_Markup.remove$1(str, 0, str.length);
	};
	$Franca_Text_Markup.remove$1 = function(str, index, length) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.Remove can't be null");
		}
		var cpy = $Franca_Text_Markup.get_$strBuilder();
		try {
			var last = index;
			var end = index + length;
			for (var i = index; i < end; i++) {
				if (str.charCodeAt(i) === 6) {
					var markup = $Franca_Text_Markup.read$1(str, i);
					if (ss.isValue(markup)) {
						if (i - last > 0) {
							cpy.append(str.substr(last, i - last));
						}
						i += markup.get_length() - 1;
						last = i + 1;
					}
				}
			}
			if (last === 0 && length === str.length) {
				return str;
				// don't copy cause we don't have to
			}
			else {
				if (end - last > 0) {
					cpy.append(str.substr(last, end - last));
				}
				return cpy.toString();
			}
		}
		finally {
			cpy.clear();
		}
	};
	$Franca_Text_Markup.colorChannelToChar = function(value) {
		return ss.Int32.trunc(value / 255 * 127) & 127;
	};
	$Franca_Text_Markup.colorCharToChannel = function(value) {
		return Math.round((value & 127) / 127 * 255);
	};
	$Franca_Text_Markup.noMarkupLength = function(str) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.NoMarkupLength can't be null");
		}
		return $Franca_Text_Markup.noMarkupLength$1(str, 0, str.length);
	};
	$Franca_Text_Markup.noMarkupLength$1 = function(str, index, length) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.NoMarkupLength can't be null");
		}
		// this is a copy of the Remove function with the string builder appends removed and replaced
		// with an increment of the len variable
		var last = index;
		var end = index + length;
		var len = 0;
		for (var i = index; i < end; i++) {
			if (str.charCodeAt(i) === 6) {
				var markup = $Franca_Text_Markup.read$1(str, i);
				if (ss.isValue(markup)) {
					if (i - last > 0) {
						len += i - last;
					}
					i += markup.get_length() - 1;
					last = i + 1;
				}
			}
		}
		if (end - last > 0) {
			len += end - last;
		}
		return len;
	};
	$Franca_Text_Markup.characterToIndex = function(str, charPos) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.CharacterToIndex can't be null");
		}
		if (charPos < 0) {
			throw new ss.ArgumentOutOfRangeException('charPos', ss.formatString('Character position {0} in Markup.CharacterToIndex out of range: must be zero or greater', $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, charPos)));
		}
		var pos = 0;
		for (var i = 0; i < str.length; i++) {
			if (pos === charPos) {
				return i;
			}
			if (str.charCodeAt(i) === 6) {
				var markup = $Franca_Text_Markup.read$1(str, i);
				if (ss.isValue(markup)) {
					i += markup.get_length() - 1;
				}
				else {
					pos++;
				}
			}
			else {
				pos++;
			}
		}
		return str.length;
	};
	$Franca_Text_Markup.indexToCharacter = function(str, index) {
		if (ss.referenceEquals(str, null)) {
			throw new ss.ArgumentNullException('str', "String provided to Markup.IndexToCharacter can't be null");
		}
		if (index < 0) {
			throw new ss.ArgumentOutOfRangeException('index', ss.formatString('Character position {0} in Markup.IndexToCharacter out of range: must be zero or greater', $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, index)));
		}
		index = Math.min(index, str.length - 1);
		var pos = -1;
		for (var i = 0; i <= index; i++) {
			if (str.charCodeAt(i) === 6) {
				var markup = $Franca_Text_Markup.read$1(str, i);
				if (ss.isValue(markup)) {
					i += markup.get_length() - 1;
				}
				else {
					pos++;
				}
			}
			else {
				pos++;
			}
		}
		return pos;
	};
	$Franca_Text_Markup.fromLocalizableHtml = function(html) {
		if (ss.referenceEquals(html, null)) {
			throw new ss.ArgumentNullException('html', "String provided to Markup.FromLocalizableHtml can't be null");
		}
		return $Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$fromHtml(html);
	};
	global.Franca.Text.Markup = $Franca_Text_Markup;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.MarkupConverter
	var $Franca_Text_MarkupConverter = function() {
	};
	$Franca_Text_MarkupConverter.__typeName = 'Franca.Text.MarkupConverter';
	global.Franca.Text.MarkupConverter = $Franca_Text_MarkupConverter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.MarkupHtmlConverter
	var $Franca_Text_MarkupHtmlConverter = function() {
		this.$boldOpen = false;
		this.$italicOpen = false;
		this.$underlineOpen = false;
		this.$size = null;
		this.$color = null;
		this.convertNewlines = true;
		this.nonBRNewlineStyle = '\r\n';
		$Franca_Text_MarkupConverter.call(this);
	};
	$Franca_Text_MarkupHtmlConverter.__typeName = 'Franca.Text.MarkupHtmlConverter';
	global.Franca.Text.MarkupHtmlConverter = $Franca_Text_MarkupHtmlConverter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.MarkupRtfConverter
	var $Franca_Text_MarkupRtfConverter = function() {
		$Franca_Text_MarkupConverter.call(this);
	};
	$Franca_Text_MarkupRtfConverter.__typeName = 'Franca.Text.MarkupRtfConverter';
	global.Franca.Text.MarkupRtfConverter = $Franca_Text_MarkupRtfConverter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.MarkupTag
	var $Franca_Text_MarkupTag = function(type, color, size, index) {
		this.$1$TypeField = 0;
		this.$1$ColorField = null;
		this.$1$SizeField = 0;
		this.$1$IndexField = 0;
		this.set_type(type);
		this.set_color(color);
		this.set_size(size);
		this.set_index(index);
	};
	$Franca_Text_MarkupTag.__typeName = 'Franca.Text.MarkupTag';
	global.Franca.Text.MarkupTag = $Franca_Text_MarkupTag;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.MarkupType
	var $Franca_Text_MarkupType = function() {
	};
	$Franca_Text_MarkupType.__typeName = 'Franca.Text.MarkupType';
	global.Franca.Text.MarkupType = $Franca_Text_MarkupType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.Match
	var $Franca_Text_Match = function(index, results) {
		this.success = false;
		this.value = null;
		this.groups = null;
		this.index = 0;
		this.length = 0;
		if (ss.isNullOrUndefined(results) || results.length === 0) {
			this.success = false;
			this.groups = [];
			this.index = -1;
			this.length = 0;
			return;
		}
		this.value = results[0];
		this.index = index;
		this.length = this.value.length;
		this.groups = results;
		this.success = true;
	};
	$Franca_Text_Match.__typeName = 'Franca.Text.Match';
	$Franca_Text_Match.op_Implicit = function(match) {
		return match.value;
	};
	global.Franca.Text.Match = $Franca_Text_Match;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.MD5
	var $Franca_Text_MD5 = function() {
	};
	$Franca_Text_MD5.__typeName = 'Franca.Text.MD5';
	$Franca_Text_MD5.hash$1 = function(str) {
		var utf8 = $Franca_Text_UTF8.toBinaryData(str);
		var data = utf8.get_uint8Array();
		return md5.hex(data);
	};
	$Franca_Text_MD5.hash = function(data) {
		var array = data.get_uint8Array();
		return md5.hex(array);
	};
	$Franca_Text_MD5.getBinary$1 = function(str) {
		var utf8 = $Franca_Text_UTF8.toBinaryData(str);
		var data = utf8.get_uint8Array();
		return new $Franca_BinaryData.$ctor_fromArrayBuffer(md5.arrayBuffer(data));
	};
	$Franca_Text_MD5.getBinary = function(data) {
		var array = data.get_uint8Array();
		return new $Franca_BinaryData.$ctor_fromArrayBuffer(md5.arrayBuffer(array));
	};
	$Franca_Text_MD5.get_$hexBuilder = function() {
		return $Franca_Text_MD5.$_hexBuilder || ($Franca_Text_MD5.$_hexBuilder = new ss.StringBuilder());
	};
	global.Franca.Text.MD5 = $Franca_Text_MD5;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.Regex
	var $Franca_Text_Regex = function(pattern, flags) {
		this.$regex = null;
		this.$flags = null;
		this.$flags = '' + ($System_EnumExtensions.hasFlag(flags, 1) ? 'i' : '') + ($System_EnumExtensions.hasFlag(flags, 2) ? 'm' : '') + ($System_EnumExtensions.hasFlag(flags, 4) ? 'g' : '');
		this.$regex = new RegExp(pattern, this.$flags);
	};
	$Franca_Text_Regex.__typeName = 'Franca.Text.Regex';
	global.Franca.Text.Regex = $Franca_Text_Regex;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.RegexFlags
	var $Franca_Text_RegexFlags = function() {
	};
	$Franca_Text_RegexFlags.__typeName = 'Franca.Text.RegexFlags';
	global.Franca.Text.RegexFlags = $Franca_Text_RegexFlags;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.UTF8
	var $Franca_Text_UTF8 = function() {
	};
	$Franca_Text_UTF8.__typeName = 'Franca.Text.UTF8';
	$Franca_Text_UTF8.toBinaryData = function(str) {
		return $Franca_Text_UTF8.toBinaryData$1(str, 0, str.length);
	};
	$Franca_Text_UTF8.toBinaryData$1 = function(str, offset, length) {
		if (offset === 0 && length === str.length) {
			//return new BinaryData(Franca.JS.FrancaGlobals.Utf8Encode(str));
			return $Franca_JS_UTF8Encoding.getBytes(str);
		}
		else {
			//return new BinaryData(Franca.JS.FrancaGlobals.Utf8Encode(str.Substring(offset, length)));
			return $Franca_JS_UTF8Encoding.getBytes(str.substr(offset, length));
		}
	};
	$Franca_Text_UTF8.fromBinaryData = function(data, stripByteOrderMark) {
		return $Franca_Text_UTF8.fromBinaryData$1(data, 0, data.get_length(), stripByteOrderMark);
	};
	$Franca_Text_UTF8.fromBinaryData$1 = function(data, offset, length, stripByteOrderMark) {
		if (stripByteOrderMark && data.get_length() >= offset + 3 && data.get_item(offset) === 239 && data.get_item(offset + 1) === 187 && data.get_item(offset + 2) === 191) {
			offset += 3;
			length = Math.max(0, length - 3);
		}
		if (offset >= data.get_length()) {
			return '';
		}
		if (offset === 0 && length === data.get_length()) {
			//return Franca.JS.FrancaGlobals.Utf8Decode(((IBinaryDataJS)data).Uint8Array);
			return $Franca_JS_UTF8Encoding.getChars(data);
		}
		else {
			//return Franca.JS.FrancaGlobals.Utf8Decode(((IBinaryDataJS)data.Slice(offset, length)).Uint8Array);
			return $Franca_JS_UTF8Encoding.getChars(data.slice(offset, length));
		}
	};
	global.Franca.Text.UTF8 = $Franca_Text_UTF8;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.Word
	var $Franca_Text_Word = function() {
		this.text = null;
		this.index = 0;
		this.length = 0;
		this.type = 0;
	};
	$Franca_Text_Word.__typeName = 'Franca.Text.Word';
	$Franca_Text_Word.$ctor1 = function(text, index, length, type) {
		this.text = null;
		this.index = 0;
		this.length = 0;
		this.type = 0;
		this.text = text;
		this.index = index;
		this.length = length;
		this.type = type;
	};
	$Franca_Text_Word.getDefaultValue = function() {
		return new $Franca_Text_Word();
	};
	global.Franca.Text.Word = $Franca_Text_Word;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.Words
	var $Franca_Text_Words = function() {
	};
	$Franca_Text_Words.__typeName = 'Franca.Text.Words';
	$Franca_Text_Words.split = function(text, allowMarkup) {
		var list = [];
		if (ss.isNullOrUndefined(text)) {
			return list;
		}
		// This matches:
		//   One or more characters that aren't: \n, \r, \t, space or dash
		//   OR a \r\n style newline character combo
		//   OR a single \n, \r, \t, space or dash character
		var index = 0;
		var $t1 = $Franca_Text_Words.$getMatches(text, allowMarkup);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var len = $t1[$t2];
			if (text.charCodeAt(index) === 10 || text.charCodeAt(index) === 13) {
				list.push(new $Franca_Text_Word.$ctor1(text, index, len, 0));
			}
			else if (text.charCodeAt(index) === 32 || text.charCodeAt(index) === 9) {
				list.push(new $Franca_Text_Word.$ctor1(text, index, 1, 1));
			}
			else {
				list.push(new $Franca_Text_Word.$ctor1(text, index, len, 2));
			}
			index += len;
		}
		return list;
	};
	$Franca_Text_Words.$getMatches = function(text, allowMarkup) {
		var list = [];
		var last = 0;
		for (var i = 0; i < text.length; i++) {
			var chr = text.charCodeAt(i);
			if (allowMarkup && chr === 6) {
				var markup = $Franca_Text_Markup.read$1(text, i);
				if (ss.isValue(markup)) {
					i += markup.get_length() - 1;
					continue;
				}
			}
			switch (chr) {
				case 13: {
					if (i - last > 0) {
						list.push(i - last);
					}
					if (i + 1 < text.length && text.charCodeAt(i + 1) === 10) {
						list.push(2);
						i++;
					}
					else {
						list.push(1);
					}
					last = i + 1;
					break;
				}
				case 10:
				case 9:
				case 32:
				case 45: {
					if (i - last > 0) {
						list.push(i - last);
					}
					list.push(1);
					last = i + 1;
					break;
				}
			}
		}
		if (text.length - last > 0) {
			list.push(text.length - last);
		}
		return list;
	};
	global.Franca.Text.Words = $Franca_Text_Words;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.WordType
	var $Franca_Text_WordType = function() {
	};
	$Franca_Text_WordType.__typeName = 'Franca.Text.WordType';
	global.Franca.Text.WordType = $Franca_Text_WordType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.UnicodeExtensions.UintCharExtensions
	var $Franca_Text_UnicodeExtensions_UintCharExtensions = function() {
	};
	$Franca_Text_UnicodeExtensions_UintCharExtensions.__typeName = 'Franca.Text.UnicodeExtensions.UintCharExtensions';
	$Franca_Text_UnicodeExtensions_UintCharExtensions.isMarkup = function(chr) {
		return chr === 6;
	};
	$Franca_Text_UnicodeExtensions_UintCharExtensions.isControl = function(c) {
		return c >= 0 && c <= 31 || c >= 128 && c <= 159 || c === 127;
	};
	$Franca_Text_UnicodeExtensions_UintCharExtensions.isNonPrintableControl = function(c) {
		return c >= 0 && c <= 8 || c === 11 || c === 12 || c >= 14 && c <= 31 || c === 127;
	};
	$Franca_Text_UnicodeExtensions_UintCharExtensions.isPrintableAscii = function(c) {
		return c > 31 && c < 127;
	};
	$Franca_Text_UnicodeExtensions_UintCharExtensions.isDigit = function(c) {
		return c >= 48 && c <= 57;
	};
	$Franca_Text_UnicodeExtensions_UintCharExtensions.isAsciiLetter = function(c, allowUpper, allowLower) {
		return c >= 65 && c <= 90 && allowUpper || c >= 97 && c <= 122 && allowLower;
	};
	$Franca_Text_UnicodeExtensions_UintCharExtensions.isNewLine = function(c) {
		return c === 10;
	};
	$Franca_Text_UnicodeExtensions_UintCharExtensions.isWhiteSpace = function(c) {
		return c === 32 || c === 10 || c === 9 || c === 13;
	};
	global.Franca.Text.UnicodeExtensions.UintCharExtensions = $Franca_Text_UnicodeExtensions_UintCharExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.BaseTween
	var $Franca_Tweening_BaseTween = function() {
	};
	$Franca_Tweening_BaseTween.__typeName = 'Franca.Tweening.BaseTween';
	global.Franca.Tweening.BaseTween = $Franca_Tweening_BaseTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.BaseTween
	var $Franca_Tweening_BaseTween$1 = function(T) {
		var $type = function(manager) {
			this.fromSet = false;
			this.hasFrom = false;
			this.$from = ss.getDefaultValue(T);
			this.$to = ss.getDefaultValue(T);
			this.$duration = 0;
			this.$2$finishField = null;
			this.$2$startField = null;
			this.started = false;
			this.$2$tickField = null;
			this.$easing = null;
			this.$delay = 0;
			this.$manager = null;
			this.$fixedManager = false;
			this.$lastTime = 0;
			this.$state = 0;
			this.$progress = 0;
			this.$2$StartTimeField = 0;
			$Franca_Tweening_BaseTween.call(this);
			this.$manager = manager;
		};
		ss.registerGenericClassInstance($type, $Franca_Tweening_BaseTween$1, [T], {
			get_value: null,
			set_value: null,
			lerp: null,
			add_$finish: function(value) {
				this.$2$finishField = ss.delegateCombine(this.$2$finishField, value);
			},
			remove_$finish: function(value) {
				this.$2$finishField = ss.delegateRemove(this.$2$finishField, value);
			},
			add_$start: function(value) {
				this.$2$startField = ss.delegateCombine(this.$2$startField, value);
			},
			remove_$start: function(value) {
				this.$2$startField = ss.delegateRemove(this.$2$startField, value);
			},
			add_$tick: function(value) {
				this.$2$tickField = ss.delegateCombine(this.$2$tickField, value);
			},
			remove_$tick: function(value) {
				this.$2$tickField = ss.delegateRemove(this.$2$tickField, value);
			},
			tick: function(elapsedSeconds) {
				this.$lastTime = elapsedSeconds;
				if (elapsedSeconds < this.$delay) {
					return false;
				}
				if (!this.started) {
					this.started = true;
					if (!ss.staticEquals(this.$2$startField, null)) {
						this.$2$startField();
					}
				}
				if (!this.hasFrom && !this.fromSet) {
					this.fromSet = true;
					this.$from = this.get_value();
				}
				var alpha = $Franca_Calc.clamp$3((elapsedSeconds - this.$delay) / this.$duration, 0, 1);
				var val = this.lerp(this.$from, this.$to, (ss.isNullOrUndefined(this.$easing) ? alpha : this.$easing.ease(alpha)));
				this.set_value(val);
				this.$progress = alpha;
				if (!ss.staticEquals(this.$2$tickField, null)) {
					this.$2$tickField(val);
				}
				var done = alpha >= 1;
				if (done) {
					this.$state = 0;
				}
				if (done && !ss.staticEquals(this.$2$finishField, null)) {
					this.$2$finishField();
				}
				return done;
			},
			from: function(val) {
				this.$from = val;
				this.hasFrom = true;
				return this;
			},
			to: function(val) {
				this.$to = val;
				return this;
			},
			duration$2: function(val) {
				this.$duration = val.ticks / 10000000;
				return this;
			},
			duration$1: function(seconds) {
				this.$duration = seconds;
				return this;
			},
			ease$1: function(formula) {
				this.$easing = formula;
				return this;
			},
			onFinish$1: function(callback) {
				this.add_$finish(callback);
				return this;
			},
			onStart$1: function(callback) {
				this.add_$start(callback);
				return this;
			},
			onTick: function(callback) {
				this.add_$tick(callback);
				return this;
			},
			delay$2: function(duration) {
				this.$delay = duration.ticks / 10000000;
				return this;
			},
			delay$1: function(seconds) {
				this.$delay = seconds;
				return this;
			},
			start$1: function() {
				this.started = false;
				this.$lastTime = 0;
				this.fromSet = false;
				(this.$manager || $Franca_Tweening_Tween.realTime).add(this);
				this.$state = 1;
				this.tick(0);
				return this;
			},
			cancel: function() {
				(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
				this.$state = 0;
			},
			pause: function() {
				(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
				this.$state = 2;
			},
			resume: function() {
				(this.$manager || $Franca_Tweening_Tween.realTime).resume(this, this.$lastTime);
				this.$state = 1;
			},
			finish: function() {
				if (this.$state === 0) {
					this.start$1();
				}
				if (!this.tick(this.$duration + this.$delay)) {
					throw new ss.InvalidOperationException('Tried to finish tween of type ' + ss.getTypeName(ss.getInstanceType(this)) + " but 'Tick(duration + delay)' returned false");
				}
				(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
				this.$state = 0;
			},
			validate: function() {
			},
			managedBy$1: function(manager) {
				if (this.$fixedManager) {
					throw new ss.InvalidOperationException("Cannot call ManagedBy on Tween '" + this + "', FixedManager was set to true");
				}
				this.$manager = manager;
				return this;
			},
			get_startTime: function() {
				return this.$2$StartTimeField;
			},
			set_startTime: function(value) {
				this.$2$StartTimeField = value;
			},
			get_manager: function() {
				return this.$manager;
			},
			get_fixedManager: function() {
				return this.$fixedManager;
			},
			set_fixedManager: function(value) {
				this.$fixedManager = value;
			},
			get_state: function() {
				return this.$state;
			},
			get_progress: function() {
				return this.$progress;
			},
			onFinish: function(callback) {
				return this.onFinish$1(callback);
			},
			onStart: function(callback) {
				return this.onStart$1(callback);
			},
			start: function() {
				return this.start$1();
			},
			managedBy: function(manager) {
				return this.managedBy$1(manager);
			},
			duration: function(seconds) {
				return this.duration$1(seconds);
			},
			ease: function(formula) {
				return this.ease$1(formula);
			},
			delay: function(seconds) {
				return this.delay$1(seconds);
			}
		}, function() {
			return $Franca_Tweening_BaseTween;
		}, function() {
			return [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween];
		});
		return $type;
	};
	$Franca_Tweening_BaseTween$1.__typeName = 'Franca.Tweening.BaseTween$1';
	ss.initGenericClass($Franca_Tweening_BaseTween$1, $asm, 1);
	global.Franca.Tweening.BaseTween$1 = $Franca_Tweening_BaseTween$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.IBaseTween
	var $Franca_Tweening_IBaseTween = function() {
	};
	$Franca_Tweening_IBaseTween.__typeName = 'Franca.Tweening.IBaseTween';
	global.Franca.Tweening.IBaseTween = $Franca_Tweening_IBaseTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.InvalidTweenSequenceException
	var $Franca_Tweening_InvalidTweenSequenceException = function() {
		ss.Exception.call(this);
	};
	$Franca_Tweening_InvalidTweenSequenceException.__typeName = 'Franca.Tweening.InvalidTweenSequenceException';
	$Franca_Tweening_InvalidTweenSequenceException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_Tweening_InvalidTweenSequenceException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.Tweening.InvalidTweenSequenceException = $Franca_Tweening_InvalidTweenSequenceException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITween
	var $Franca_Tweening_ITween = function() {
	};
	$Franca_Tweening_ITween.__typeName = 'Franca.Tweening.ITween';
	global.Franca.Tweening.ITween = $Franca_Tweening_ITween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenable
	var $Franca_Tweening_ITweenable = function() {
	};
	$Franca_Tweening_ITweenable.__typeName = 'Franca.Tweening.ITweenable';
	global.Franca.Tweening.ITweenable = $Franca_Tweening_ITweenable;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenableColor
	var $Franca_Tweening_ITweenableColor = function() {
	};
	$Franca_Tweening_ITweenableColor.__typeName = 'Franca.Tweening.ITweenableColor';
	global.Franca.Tweening.ITweenableColor = $Franca_Tweening_ITweenableColor;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenableOpacity
	var $Franca_Tweening_ITweenableOpacity = function() {
	};
	$Franca_Tweening_ITweenableOpacity.__typeName = 'Franca.Tweening.ITweenableOpacity';
	global.Franca.Tweening.ITweenableOpacity = $Franca_Tweening_ITweenableOpacity;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenablePosition
	var $Franca_Tweening_ITweenablePosition = function() {
	};
	$Franca_Tweening_ITweenablePosition.__typeName = 'Franca.Tweening.ITweenablePosition';
	global.Franca.Tweening.ITweenablePosition = $Franca_Tweening_ITweenablePosition;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenablePosition3D
	var $Franca_Tweening_ITweenablePosition3D = function() {
	};
	$Franca_Tweening_ITweenablePosition3D.__typeName = 'Franca.Tweening.ITweenablePosition3D';
	global.Franca.Tweening.ITweenablePosition3D = $Franca_Tweening_ITweenablePosition3D;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenableRotation
	var $Franca_Tweening_ITweenableRotation = function() {
	};
	$Franca_Tweening_ITweenableRotation.__typeName = 'Franca.Tweening.ITweenableRotation';
	global.Franca.Tweening.ITweenableRotation = $Franca_Tweening_ITweenableRotation;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenableScale
	var $Franca_Tweening_ITweenableScale = function() {
	};
	$Franca_Tweening_ITweenableScale.__typeName = 'Franca.Tweening.ITweenableScale';
	global.Franca.Tweening.ITweenableScale = $Franca_Tweening_ITweenableScale;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenableScale3D
	var $Franca_Tweening_ITweenableScale3D = function() {
	};
	$Franca_Tweening_ITweenableScale3D.__typeName = 'Franca.Tweening.ITweenableScale3D';
	global.Franca.Tweening.ITweenableScale3D = $Franca_Tweening_ITweenableScale3D;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenableScaleXY
	var $Franca_Tweening_ITweenableScaleXY = function() {
	};
	$Franca_Tweening_ITweenableScaleXY.__typeName = 'Franca.Tweening.ITweenableScaleXY';
	global.Franca.Tweening.ITweenableScaleXY = $Franca_Tweening_ITweenableScaleXY;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenableScaleXYZ
	var $Franca_Tweening_ITweenableScaleXYZ = function() {
	};
	$Franca_Tweening_ITweenableScaleXYZ.__typeName = 'Franca.Tweening.ITweenableScaleXYZ';
	global.Franca.Tweening.ITweenableScaleXYZ = $Franca_Tweening_ITweenableScaleXYZ;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenableSize
	var $Franca_Tweening_ITweenableSize = function() {
	};
	$Franca_Tweening_ITweenableSize.__typeName = 'Franca.Tweening.ITweenableSize';
	global.Franca.Tweening.ITweenableSize = $Franca_Tweening_ITweenableSize;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenableXY
	var $Franca_Tweening_ITweenableXY = function() {
	};
	$Franca_Tweening_ITweenableXY.__typeName = 'Franca.Tweening.ITweenableXY';
	global.Franca.Tweening.ITweenableXY = $Franca_Tweening_ITweenableXY;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenableXYZ
	var $Franca_Tweening_ITweenableXYZ = function() {
	};
	$Franca_Tweening_ITweenableXYZ.__typeName = 'Franca.Tweening.ITweenableXYZ';
	global.Franca.Tweening.ITweenableXYZ = $Franca_Tweening_ITweenableXYZ;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.ITweenManager
	var $Franca_Tweening_ITweenManager = function() {
	};
	$Franca_Tweening_ITweenManager.__typeName = 'Franca.Tweening.ITweenManager';
	global.Franca.Tweening.ITweenManager = $Franca_Tweening_ITweenManager;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tween
	var $Franca_Tweening_Tween = function(source, manager) {
		this.$source = null;
		this.$current = null;
		this.$1$tickField = null;
		this.$1$finishField = null;
		this.$1$startField = null;
		this.started = false;
		this.$delay = 0;
		this.$manager = null;
		this.$defaultDuration = 0;
		this.$defaultEase = null;
		this.$thisManager = null;
		this.$tweens = null;
		this.$lastTime = 0;
		this.$state = 0;
		this.$1$StartTimeField = 0;
		this.$source = source;
		this.$manager = manager;
		this.$thisManager = new $Franca_Tweening_TweenManager();
		this.$tweens = [];
	};
	$Franca_Tweening_Tween.__typeName = 'Franca.Tweening.Tween';
	$Franca_Tweening_Tween.update = function(gameTime, realTime) {
		$Franca_Tweening_Tween.gameTime.update(gameTime.ticks / 10000000);
		$Franca_Tweening_Tween.realTime.update(realTime.ticks / 10000000);
	};
	$Franca_Tweening_Tween.parallel = function(tweens) {
		return $Franca_Tweening_Tween.parallel$1(null, tweens);
	};
	$Franca_Tweening_Tween.parallel$1 = function(manager, tweens) {
		var par = new $Franca_Tweening_TweenParallel(manager);
		for (var $t1 = 0; $t1 < tweens.length; $t1++) {
			var tween = tweens[$t1];
			par.add(tween);
		}
		return par;
	};
	$Franca_Tweening_Tween.sequence = function(tweens) {
		return $Franca_Tweening_Tween.sequence$1(null, tweens);
	};
	$Franca_Tweening_Tween.sequence$1 = function(manager, tweens) {
		var par = new $Franca_Tweening_TweenSequence(manager);
		for (var $t1 = 0; $t1 < tweens.length; $t1++) {
			var tween = tweens[$t1];
			par.add(tween);
		}
		return par;
	};
	$Franca_Tweening_Tween.pause$1 = function(duration, manager) {
		return $Franca_Tweening_Tween.pause(duration.ticks / 10000000, manager);
	};
	$Franca_Tweening_Tween.pause = function(seconds, manager) {
		return new $Franca_Tweening_TweenPause(seconds, manager);
	};
	$Franca_Tweening_Tween.waitUntil = function(callback, manager) {
		return new $Franca_Tweening_TweenWaitUntil(callback, manager);
	};
	$Franca_Tweening_Tween.double$1 = function(manager) {
		return new $Franca_Tweening_TweenDouble(manager);
	};
	$Franca_Tweening_Tween.generic = function(T) {
		return function(set, lerp, manager) {
			return new (ss.makeGenericType($Franca_Tweening_Tween$1, [T]))(set, lerp, manager);
		};
	};
	$Franca_Tweening_Tween.generic$1 = function(T) {
		return function(get, set, lerp, manager) {
			return new (ss.makeGenericType($Franca_Tweening_Tween$1, [T]).$ctor1)(get, set, lerp, manager);
		};
	};
	$Franca_Tweening_Tween.set$1 = function(T) {
		return function(set, value, manager) {
			return new (ss.makeGenericType($Franca_Tweening_Tween$1, [T]).$ctor1)(function() {
				return value;
			}, set, function(f, t, alpha) {
				return value;
			}, manager);
		};
	};
	$Franca_Tweening_Tween.set = function(T) {
		return function(valueSetter, manager) {
			return new (ss.makeGenericType($Franca_Tweening_Tween$1, [T]).$ctor1)(function() {
				return ss.getDefaultValue(T);
			}, function(v) {
				valueSetter();
			}, function(f, t, alpha) {
				return ss.getDefaultValue(T);
			}, manager);
		};
	};
	$Franca_Tweening_Tween.target = function(tweenable, manager) {
		return $Franca_Tweening_TweenExtensions.tween(tweenable, manager);
	};
	$Franca_Tweening_Tween.setPos = function(tweenable, pos, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setPos(pos);
		return tween;
	};
	$Franca_Tweening_Tween.setPos$2 = function(tweenable, x, y, manager) {
		return $Franca_Tweening_Tween.setPos(tweenable, new $Franca_Vector2.$ctor3(x, y), manager);
	};
	$Franca_Tweening_Tween.setPos$1 = function(tweenable, pos, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setPos$1(pos);
		return tween;
	};
	$Franca_Tweening_Tween.setPos$3 = function(tweenable, x, y, z, manager) {
		return $Franca_Tweening_Tween.setPos(tweenable, new $Franca_Vector2.$ctor3(x, y), manager);
	};
	$Franca_Tweening_Tween.setX = function(tweenable, x, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setX(x);
		return tween;
	};
	$Franca_Tweening_Tween.setY = function(tweenable, y, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setY(y);
		return tween;
	};
	$Franca_Tweening_Tween.setZ = function(tweenable, z, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setZ(z);
		return tween;
	};
	$Franca_Tweening_Tween.setScale = function(tweenable, scale, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setScale(scale);
		return tween;
	};
	$Franca_Tweening_Tween.setScale$1 = function(tweenable, scale, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setScale$1(scale);
		return tween;
	};
	$Franca_Tweening_Tween.setScale$3 = function(tweenable, x, y, manager) {
		return $Franca_Tweening_Tween.setScale(tweenable, new $Franca_Vector2.$ctor3(x, y), manager);
	};
	$Franca_Tweening_Tween.setScale$4 = function(tweenable, x, y, z, manager) {
		return $Franca_Tweening_Tween.setScale$1(tweenable, new $Franca_Vector3.$ctor4(x, y, z), manager);
	};
	$Franca_Tweening_Tween.setScale$2 = function(tweenable, scale, manager) {
		return $Franca_Tweening_Tween.setScale$1(tweenable, new $Franca_Vector3.$ctor4(scale, scale, scale), manager);
	};
	$Franca_Tweening_Tween.setScaleX = function(tweenable, x, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setScaleX(x);
		return tween;
	};
	$Franca_Tweening_Tween.setScaleY = function(tweenable, y, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setScaleY(y);
		return tween;
	};
	$Franca_Tweening_Tween.setScaleZ = function(tweenable, z, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setScaleZ(z);
		return tween;
	};
	$Franca_Tweening_Tween.setSize = function(tweenable, size, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setSize(size);
		return tween;
	};
	$Franca_Tweening_Tween.setSize$2 = function(tweenable, width, height, manager) {
		return $Franca_Tweening_Tween.setSize(tweenable, new $Franca_SizeF.$ctor2(width, height), manager);
	};
	$Franca_Tweening_Tween.setSize$1 = function(tweenable, size, manager) {
		return $Franca_Tweening_Tween.setSize(tweenable, new $Franca_SizeF.$ctor2(size, size), manager);
	};
	$Franca_Tweening_Tween.setWidth = function(tweenable, width, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setWidth(width);
		return tween;
	};
	$Franca_Tweening_Tween.setHeight = function(tweenable, height, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setHeight(height);
		return tween;
	};
	$Franca_Tweening_Tween.setRot = function(tweenable, value, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setRot(value);
		return tween;
	};
	$Franca_Tweening_Tween.setColor = function(tweenable, color, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setColor(color);
		return tween;
	};
	$Franca_Tweening_Tween.setOpacity = function(tweenable, opacity, manager) {
		var tween = $Franca_Tweening_Tween.target(tweenable, manager);
		tween.setOpacity(opacity);
		return tween;
	};
	global.Franca.Tweening.Tween = $Franca_Tweening_Tween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tween
	var $Franca_Tweening_Tween$1 = function(T) {
		var $type = function(set, lerp, manager) {
			$type.$ctor1.call(this, null, set, lerp, manager);
		};
		$type.$ctor1 = function(get, set, lerp, manager) {
			this.$get = null;
			this.$set = null;
			this.$lerp = null;
			ss.makeGenericType($Franca_Tweening_BaseTween$1, [T]).call(this, manager);
			this.$get = get;
			this.$set = set;
			this.$lerp = lerp;
		};
		ss.registerGenericClassInstance($type, $Franca_Tweening_Tween$1, [T], {
			start$1: function() {
				this.validate();
				return ss.makeGenericType($Franca_Tweening_BaseTween$1, [T]).prototype.start$1.call(this);
			},
			start: function() {
				return this.start$1();
			},
			validate: function() {
				ss.makeGenericType($Franca_Tweening_BaseTween$1, [T]).prototype.validate.call(this);
				if (!this.hasFrom && ss.staticEquals(this.$get, null)) {
					throw new ss.ArgumentException('Tween<T> did not have a getter function or a From value.');
				}
			},
			lerp: function(from, to, alpha) {
				return this.$lerp(from, to, alpha);
			},
			get_value: function() {
				return this.$get();
			},
			set_value: function(value) {
				this.$set(value);
			}
		}, function() {
			return ss.makeGenericType($Franca_Tweening_BaseTween$1, [T]);
		}, function() {
			return [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween];
		});
		$type.$ctor1.prototype = $type.prototype;
		return $type;
	};
	$Franca_Tweening_Tween$1.__typeName = 'Franca.Tweening.Tween$1';
	ss.initGenericClass($Franca_Tweening_Tween$1, $asm, 1);
	global.Franca.Tweening.Tween$1 = $Franca_Tweening_Tween$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.TweenDouble
	var $Franca_Tweening_TweenDouble = function(manager) {
		this.$value = 0;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]).call(this, manager);
	};
	$Franca_Tweening_TweenDouble.__typeName = 'Franca.Tweening.TweenDouble';
	global.Franca.Tweening.TweenDouble = $Franca_Tweening_TweenDouble;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.TweenExtensions
	var $Franca_Tweening_TweenExtensions = function() {
	};
	$Franca_Tweening_TweenExtensions.__typeName = 'Franca.Tweening.TweenExtensions';
	$Franca_Tweening_TweenExtensions.tween = function(source, manager) {
		return new $Franca_Tweening_Tween(source, manager);
	};
	global.Franca.Tweening.TweenExtensions = $Franca_Tweening_TweenExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.TweenManager
	var $Franca_Tweening_TweenManager = function() {
		this.$lastTime = 0;
		this.tweens = null;
		this.tweens = new (ss.makeGenericType($System_Collections_Generic_LinkedList$1, [$Franca_Tweening_IBaseTween]))();
	};
	$Franca_Tweening_TweenManager.__typeName = 'Franca.Tweening.TweenManager';
	global.Franca.Tweening.TweenManager = $Franca_Tweening_TweenManager;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.TweenParallel
	var $Franca_Tweening_TweenParallel = function(manager) {
		this.$finishedCount = 0;
		$Franca_Tweening_TweenSequence.call(this, manager);
	};
	$Franca_Tweening_TweenParallel.__typeName = 'Franca.Tweening.TweenParallel';
	global.Franca.Tweening.TweenParallel = $Franca_Tweening_TweenParallel;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.TweenPause
	var $Franca_Tweening_TweenPause = function(duration, manager) {
		this.$duration = 0;
		this.$delay = 0;
		this.$1$finishField = null;
		this.$1$startField = null;
		this.started = false;
		this.$manager = null;
		this.$lastTime = 0;
		this.$state = 0;
		this.$progress = 0;
		this.$1$StartTimeField = 0;
		this.$duration = duration;
		this.$manager = manager;
	};
	$Franca_Tweening_TweenPause.__typeName = 'Franca.Tweening.TweenPause';
	$Franca_Tweening_TweenPause.$ctor1 = function(duration, manager) {
		$Franca_Tweening_TweenPause.call(this, duration.ticks / 10000000, manager);
	};
	global.Franca.Tweening.TweenPause = $Franca_Tweening_TweenPause;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.TweenSequence
	var $Franca_Tweening_TweenSequence = function(manager) {
		this.tweens = null;
		this.$manager = null;
		this.$1$finishField = null;
		this.$1$startField = null;
		this.started = false;
		this.$sequenceIndex = 0;
		this.repeats = 0;
		this.repeatCount = 0;
		this.$loops = false;
		this.lastTime = 0;
		this.state = 0;
		this.$1$StartTimeField = 0;
		this.$manager = manager;
		this.tweens = [];
	};
	$Franca_Tweening_TweenSequence.__typeName = 'Franca.Tweening.TweenSequence';
	global.Franca.Tweening.TweenSequence = $Franca_Tweening_TweenSequence;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.TweenState
	var $Franca_Tweening_TweenState = function() {
	};
	$Franca_Tweening_TweenState.__typeName = 'Franca.Tweening.TweenState';
	global.Franca.Tweening.TweenState = $Franca_Tweening_TweenState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.TweenWaitUntil
	var $Franca_Tweening_TweenWaitUntil = function(callback, manager) {
		this.$callback = null;
		this.$manager = null;
		this.$delay = 0;
		this.started = false;
		this.$state = 0;
		this.$lastTime = 0;
		this.$1$finishField = null;
		this.$1$startField = null;
		this.$1$StartTimeField = 0;
		this.$callback = callback;
		this.$manager = manager;
	};
	$Franca_Tweening_TweenWaitUntil.__typeName = 'Franca.Tweening.TweenWaitUntil';
	global.Franca.Tweening.TweenWaitUntil = $Franca_Tweening_TweenWaitUntil;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.ColorTween
	var $Franca_Tweening_Tweenable_ColorTween = function(source, manager) {
		this.$source = null;
		this.$mode = 0;
		this.$premultiplied = false;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_HdrColor]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_ColorTween.__typeName = 'Franca.Tweening.Tweenable.ColorTween';
	global.Franca.Tweening.Tweenable.ColorTween = $Franca_Tweening_Tweenable_ColorTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.HeightTween
	var $Franca_Tweening_Tweenable_HeightTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_HeightTween.__typeName = 'Franca.Tweening.Tweenable.HeightTween';
	global.Franca.Tweening.Tweenable.HeightTween = $Franca_Tweening_Tweenable_HeightTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.OpacityTween
	var $Franca_Tweening_Tweenable_OpacityTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_OpacityTween.__typeName = 'Franca.Tweening.Tweenable.OpacityTween';
	global.Franca.Tweening.Tweenable.OpacityTween = $Franca_Tweening_Tweenable_OpacityTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.Position3DTween
	var $Franca_Tweening_Tweenable_Position3DTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_Vector3]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_Position3DTween.__typeName = 'Franca.Tweening.Tweenable.Position3DTween';
	global.Franca.Tweening.Tweenable.Position3DTween = $Franca_Tweening_Tweenable_Position3DTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.PositionTween
	var $Franca_Tweening_Tweenable_PositionTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_Vector2]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_PositionTween.__typeName = 'Franca.Tweening.Tweenable.PositionTween';
	global.Franca.Tweening.Tweenable.PositionTween = $Franca_Tweening_Tweenable_PositionTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.RotationTween
	var $Franca_Tweening_Tweenable_RotationTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_RotationTween.__typeName = 'Franca.Tweening.Tweenable.RotationTween';
	global.Franca.Tweening.Tweenable.RotationTween = $Franca_Tweening_Tweenable_RotationTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.Scale3DTween
	var $Franca_Tweening_Tweenable_Scale3DTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_Vector3]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_Scale3DTween.__typeName = 'Franca.Tweening.Tweenable.Scale3DTween';
	global.Franca.Tweening.Tweenable.Scale3DTween = $Franca_Tweening_Tweenable_Scale3DTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.ScaleTween
	var $Franca_Tweening_Tweenable_ScaleTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_Vector2]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_ScaleTween.__typeName = 'Franca.Tweening.Tweenable.ScaleTween';
	global.Franca.Tweening.Tweenable.ScaleTween = $Franca_Tweening_Tweenable_ScaleTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.ScaleXTween
	var $Franca_Tweening_Tweenable_ScaleXTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_ScaleXTween.__typeName = 'Franca.Tweening.Tweenable.ScaleXTween';
	global.Franca.Tweening.Tweenable.ScaleXTween = $Franca_Tweening_Tweenable_ScaleXTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.ScaleYTween
	var $Franca_Tweening_Tweenable_ScaleYTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_ScaleYTween.__typeName = 'Franca.Tweening.Tweenable.ScaleYTween';
	global.Franca.Tweening.Tweenable.ScaleYTween = $Franca_Tweening_Tweenable_ScaleYTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.ScaleZTween
	var $Franca_Tweening_Tweenable_ScaleZTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_ScaleZTween.__typeName = 'Franca.Tweening.Tweenable.ScaleZTween';
	global.Franca.Tweening.Tweenable.ScaleZTween = $Franca_Tweening_Tweenable_ScaleZTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.SizeTween
	var $Franca_Tweening_Tweenable_SizeTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_SizeF]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_SizeTween.__typeName = 'Franca.Tweening.Tweenable.SizeTween';
	global.Franca.Tweening.Tweenable.SizeTween = $Franca_Tweening_Tweenable_SizeTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.WidthTween
	var $Franca_Tweening_Tweenable_WidthTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_WidthTween.__typeName = 'Franca.Tweening.Tweenable.WidthTween';
	global.Franca.Tweening.Tweenable.WidthTween = $Franca_Tweening_Tweenable_WidthTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.XTween
	var $Franca_Tweening_Tweenable_XTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_XTween.__typeName = 'Franca.Tweening.Tweenable.XTween';
	global.Franca.Tweening.Tweenable.XTween = $Franca_Tweening_Tweenable_XTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.YTween
	var $Franca_Tweening_Tweenable_YTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_YTween.__typeName = 'Franca.Tweening.Tweenable.YTween';
	global.Franca.Tweening.Tweenable.YTween = $Franca_Tweening_Tweenable_YTween;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Tweening.Tweenable.ZTween
	var $Franca_Tweening_Tweenable_ZTween = function(source, manager) {
		this.$source = null;
		ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]).call(this, manager);
		this.$source = source;
	};
	$Franca_Tweening_Tweenable_ZTween.__typeName = 'Franca.Tweening.Tweenable.ZTween';
	global.Franca.Tweening.Tweenable.ZTween = $Franca_Tweening_Tweenable_ZTween;
	////////////////////////////////////////////////////////////////////////////////
	// System.ArithmeticException
	var $System_ArithmeticException = function() {
		$System_SystemException.$ctor1.call(this, 'Overflow or underflow in the arithmetic operation.');
		this.set_hResult($System_ArithmeticException.$result);
	};
	$System_ArithmeticException.__typeName = 'System.ArithmeticException';
	$System_ArithmeticException.$ctor1 = function(message) {
		$System_SystemException.$ctor1.call(this, message);
		this.set_hResult($System_ArithmeticException.$result);
	};
	$System_ArithmeticException.$ctor2 = function(message, innerException) {
		$System_SystemException.$ctor2.call(this, message, innerException);
		this.set_hResult($System_ArithmeticException.$result);
	};
	global.System.ArithmeticException = $System_ArithmeticException;
	////////////////////////////////////////////////////////////////////////////////
	// System.Buffer
	var $System_Buffer = function() {
	};
	$System_Buffer.__typeName = 'System.Buffer';
	$System_Buffer.byteLength$5 = function(array) {
		if (ss.isNullOrUndefined(array)) {
			throw new ss.ArgumentNullException('array');
		}
		return array.length;
	};
	$System_Buffer.byteLength = function(array) {
		if (ss.isNullOrUndefined(array)) {
			throw new ss.ArgumentNullException('array');
		}
		return array.length;
	};
	$System_Buffer.byteLength$2 = function(array) {
		if (ss.isNullOrUndefined(array)) {
			throw new ss.ArgumentNullException('array');
		}
		return array.length * 2;
	};
	$System_Buffer.byteLength$7 = function(array) {
		if (ss.isNullOrUndefined(array)) {
			throw new ss.ArgumentNullException('array');
		}
		return array.length * 2;
	};
	$System_Buffer.byteLength$3 = function(array) {
		if (ss.isNullOrUndefined(array)) {
			throw new ss.ArgumentNullException('array');
		}
		return array.length * 4;
	};
	$System_Buffer.byteLength$8 = function(array) {
		if (ss.isNullOrUndefined(array)) {
			throw new ss.ArgumentNullException('array');
		}
		return array.length * 4;
	};
	$System_Buffer.byteLength$4 = function(array) {
		if (ss.isNullOrUndefined(array)) {
			throw new ss.ArgumentNullException('array');
		}
		return array.length * 8;
	};
	$System_Buffer.byteLength$9 = function(array) {
		if (ss.isNullOrUndefined(array)) {
			throw new ss.ArgumentNullException('array');
		}
		return array.length * 8;
	};
	$System_Buffer.byteLength$6 = function(array) {
		if (ss.isNullOrUndefined(array)) {
			throw new ss.ArgumentNullException('array');
		}
		return array.length * 4;
	};
	$System_Buffer.byteLength$1 = function(array) {
		if (ss.isNullOrUndefined(array)) {
			throw new ss.ArgumentNullException('array');
		}
		return array.length * 8;
	};
	$System_Buffer.$byteLength = function(array) {
		if (ss.isNullOrUndefined(array)) {
			throw new ss.ArgumentNullException('array');
		}
		return array.get_length();
	};
	$System_Buffer.blockCopy$D = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$5(src) || destOffset + count > $System_Buffer.byteLength$5(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		if (!ss.referenceEquals(src, dest) || srcOffset > destOffset || destOffset >= srcOffset + count || srcOffset === destOffset) {
			var destEnd = destOffset + count;
			for (var i = destOffset, j = srcOffset; i < destEnd; i++, j++) {
				dest[i] = src[j];
			}
		}
		else {
			var tmp = new Array(count);
			var srcEnd = srcOffset + count;
			for (var i1 = srcOffset, j1 = 0; i1 < srcEnd; i1++, j1++) {
				tmp[j1] = src[i1];
			}
			var destEnd1 = destOffset + count;
			for (var i2 = destOffset, j2 = 0; i2 < destEnd1; i2++, j2++) {
				dest[i2] = tmp[j2];
			}
		}
	};
	$System_Buffer.blockCopy$A = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$5(src) || destOffset + count > $System_Buffer.byteLength$1(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 8);
		var destEnd = Math.ceil((destOffset + count) / 8);
		var destArr = new Float64Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 8, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$c = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$1(src) || destOffset + count > $System_Buffer.byteLength$1(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float64Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 8);
		var destEnd = Math.ceil((destOffset + count) / 8);
		var destArr = new Float64Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 8, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$f = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$1(src) || destOffset + count > $System_Buffer.byteLength$5(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Int8Array((new Float64Array(src)).buffer, srcOffset, count);
		var destEnd = destOffset + count;
		for (var i = destOffset, j = srcOffset; i < destEnd; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$E = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$5(src) || destOffset + count > $System_Buffer.byteLength$6(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Float32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$M = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$6(src) || destOffset + count > $System_Buffer.byteLength$6(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Float32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$g = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$1(src) || destOffset + count > $System_Buffer.byteLength$6(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float64Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Float32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$L = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$6(src) || destOffset + count > $System_Buffer.byteLength$5(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Int8Array((new Float32Array(src)).buffer, srcOffset, count);
		var destEnd = destOffset + count;
		for (var i = destOffset, j = srcOffset; i < destEnd; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$I = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$6(src) || destOffset + count > $System_Buffer.byteLength$1(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 8);
		var destEnd = Math.ceil((destOffset + count) / 8);
		var destArr = new Float64Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 8, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$F = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$5(src) || destOffset + count > $System_Buffer.byteLength$7(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Uint16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$V = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$7(src) || destOffset + count > $System_Buffer.byteLength$7(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Uint16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$N = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$6(src) || destOffset + count > $System_Buffer.byteLength$7(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Uint16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$h = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$1(src) || destOffset + count > $System_Buffer.byteLength$7(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float64Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Uint16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$T = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$7(src) || destOffset + count > $System_Buffer.byteLength$5(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Int8Array((new Uint16Array(src)).buffer, srcOffset, count);
		var destEnd = destOffset + count;
		for (var i = destOffset, j = srcOffset; i < destEnd; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$U = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$7(src) || destOffset + count > $System_Buffer.byteLength$6(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Float32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$Q = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$7(src) || destOffset + count > $System_Buffer.byteLength$1(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 8);
		var destEnd = Math.ceil((destOffset + count) / 8);
		var destArr = new Float64Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 8, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$B = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$5(src) || destOffset + count > $System_Buffer.byteLength$2(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Int16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$l = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$2(src) || destOffset + count > $System_Buffer.byteLength$2(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Int16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$R = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$7(src) || destOffset + count > $System_Buffer.byteLength$2(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Int16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$J = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$6(src) || destOffset + count > $System_Buffer.byteLength$2(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Int16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$d = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$1(src) || destOffset + count > $System_Buffer.byteLength$2(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float64Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Int16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$n = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$2(src) || destOffset + count > $System_Buffer.byteLength$5(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Int8Array((new Int16Array(src)).buffer, srcOffset, count);
		var destEnd = destOffset + count;
		for (var i = destOffset, j = srcOffset; i < destEnd; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$p = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$2(src) || destOffset + count > $System_Buffer.byteLength$7(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Uint16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$o = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$2(src) || destOffset + count > $System_Buffer.byteLength$6(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Float32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$k = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$2(src) || destOffset + count > $System_Buffer.byteLength$1(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 8);
		var destEnd = Math.ceil((destOffset + count) / 8);
		var destArr = new Float64Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 8, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$G = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$5(src) || destOffset + count > $System_Buffer.byteLength$8(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Uint32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$14 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$8(src) || destOffset + count > $System_Buffer.byteLength$8(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Uint32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$q = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$2(src) || destOffset + count > $System_Buffer.byteLength$8(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Uint32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$W = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$7(src) || destOffset + count > $System_Buffer.byteLength$8(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Uint32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$O = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$6(src) || destOffset + count > $System_Buffer.byteLength$8(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Uint32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$i = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$1(src) || destOffset + count > $System_Buffer.byteLength$8(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float64Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Uint32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$11 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$8(src) || destOffset + count > $System_Buffer.byteLength$5(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Int8Array((new Uint32Array(src)).buffer, srcOffset, count);
		var destEnd = destOffset + count;
		for (var i = destOffset, j = srcOffset; i < destEnd; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$Z = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$8(src) || destOffset + count > $System_Buffer.byteLength$2(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Int16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$13 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$8(src) || destOffset + count > $System_Buffer.byteLength$7(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Uint16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$12 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$8(src) || destOffset + count > $System_Buffer.byteLength$6(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Float32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$Y = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$8(src) || destOffset + count > $System_Buffer.byteLength$1(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 8);
		var destEnd = Math.ceil((destOffset + count) / 8);
		var destArr = new Float64Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 8, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$C = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$5(src) || destOffset + count > $System_Buffer.byteLength$3(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Int32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$10 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$8(src) || destOffset + count > $System_Buffer.byteLength$3(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Int32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$m = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$2(src) || destOffset + count > $System_Buffer.byteLength$3(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Int32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$S = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$7(src) || destOffset + count > $System_Buffer.byteLength$3(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint16Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Int32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$K = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$6(src) || destOffset + count > $System_Buffer.byteLength$3(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Int32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$e = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$1(src) || destOffset + count > $System_Buffer.byteLength$3(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float64Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Int32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$v = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$3(src) || destOffset + count > $System_Buffer.byteLength$5(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Int8Array((new Int32Array(src)).buffer, srcOffset, count);
		var destEnd = destOffset + count;
		for (var i = destOffset, j = srcOffset; i < destEnd; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$u = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$3(src) || destOffset + count > $System_Buffer.byteLength$3(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Int32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$y = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$3(src) || destOffset + count > $System_Buffer.byteLength$8(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Uint32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$t = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$3(src) || destOffset + count > $System_Buffer.byteLength$2(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Int16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$x = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$3(src) || destOffset + count > $System_Buffer.byteLength$7(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Uint16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$w = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$3(src) || destOffset + count > $System_Buffer.byteLength$6(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Float32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$s = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$3(src) || destOffset + count > $System_Buffer.byteLength$1(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int32Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 8);
		var destEnd = Math.ceil((destOffset + count) / 8);
		var destArr = new Float64Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 8, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$z = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$5(src) || destOffset + count > $System_Buffer.byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var end = destOffset + count;
		for (var i = destOffset, j = srcOffset; i < end; i++, j++) {
			dest[i] = src[j] & 255;
		}
	};
	$System_Buffer.blockCopy$r = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$3(src) || destOffset + count > $System_Buffer.byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int32Array(src)).buffer, srcOffset, count);
		var end = destOffset + count;
		for (var i = destOffset, j = 0; i < end; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$X = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$8(src) || destOffset + count > $System_Buffer.byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint32Array(src)).buffer, srcOffset, count);
		var end = destOffset + count;
		for (var i = destOffset, j = 0; i < end; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$j = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$2(src) || destOffset + count > $System_Buffer.byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Int16Array(src)).buffer, srcOffset, count);
		var end = destOffset + count;
		for (var i = destOffset, j = 0; i < end; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$P = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$7(src) || destOffset + count > $System_Buffer.byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint16Array(src)).buffer, srcOffset, count);
		var end = destOffset + count;
		for (var i = destOffset, j = 0; i < end; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$H = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$6(src) || destOffset + count > $System_Buffer.byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float32Array(src)).buffer, srcOffset, count);
		var end = destOffset + count;
		for (var i = destOffset, j = 0; i < end; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$b = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength$1(src) || destOffset + count > $System_Buffer.byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Float64Array(src)).buffer, srcOffset, count);
		var end = destOffset + count;
		for (var i = destOffset, j = 0; i < end; i++, j++) {
			dest[i] = srcBytes[j];
		}
	};
	$System_Buffer.blockCopy$7 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength(src) || destOffset + count > $System_Buffer.byteLength$5(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var end = destOffset + count;
		for (var i = destOffset, j = srcOffset; i < end; i++, j++) {
			dest[i] = $Franca_Cast.toSByte(src[j]);
		}
	};
	$System_Buffer.blockCopy$6 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength(src) || destOffset + count > $System_Buffer.byteLength$3(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Int32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$a = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength(src) || destOffset + count > $System_Buffer.byteLength$8(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Uint32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$5 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength(src) || destOffset + count > $System_Buffer.byteLength$2(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Int16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$9 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength(src) || destOffset + count > $System_Buffer.byteLength$7(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 2);
		var destEnd = Math.ceil((destOffset + count) / 2);
		var destArr = new Uint16Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 2, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$8 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength(src) || destOffset + count > $System_Buffer.byteLength$6(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 4);
		var destEnd = Math.ceil((destOffset + count) / 4);
		var destArr = new Float32Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 4, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$4 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength(src) || destOffset + count > $System_Buffer.byteLength$1(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcBytes = new Uint8Array((new Uint8Array(src)).buffer, srcOffset, count);
		var destStart = ss.Int32.div(destOffset, 8);
		var destEnd = Math.ceil((destOffset + count) / 8);
		var destArr = new Float64Array(destEnd - destStart);
		destArr[0] = dest[destStart];
		destArr[destArr.length - 1] = dest[destEnd - 1];
		var destBytes = new Uint8Array(destArr.buffer, destOffset % 8, count);
		destBytes.set(srcBytes, 0);
		for (var i = destStart, j = 0; i < destEnd; i++, j++) {
			dest[i] = destArr[j];
		}
	};
	$System_Buffer.blockCopy$3 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength(src) || destOffset + count > $System_Buffer.byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		if (!ss.referenceEquals(src, dest) || srcOffset > destOffset || destOffset >= srcOffset + count || srcOffset === destOffset) {
			var destEnd = destOffset + count;
			for (var i = destOffset, j = srcOffset; i < destEnd; i++, j++) {
				dest[i] = src[j];
			}
		}
		else {
			var tmp = new Array(count);
			var srcEnd = srcOffset + count;
			for (var i1 = srcOffset, j1 = 0; i1 < srcEnd; i1++, j1++) {
				tmp[j1] = src[i1];
			}
			var destEnd1 = destOffset + count;
			for (var i2 = destOffset, j2 = 0; i2 < destEnd1; i2++, j2++) {
				dest[i2] = tmp[j2];
			}
		}
	};
	$System_Buffer.blockCopy$1 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.$byteLength(src) || destOffset + count > $System_Buffer.byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		var srcArr = src.get_uint8Array();
		var srcEnd = srcOffset + count;
		for (var i = srcOffset, j = destOffset; i < srcEnd; i++, j++) {
			dest[j] = srcArr[i];
		}
	};
	$System_Buffer.blockCopy$2 = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.byteLength(src) || destOffset + count > $System_Buffer.$byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		if (srcOffset === 0 && count === src.length) {
			dest.get_uint8Array().set(src, destOffset);
		}
		else {
			dest.get_uint8Array().set(new Uint8Array((new Uint8Array(src)).buffer, srcOffset, count), destOffset);
		}
	};
	$System_Buffer.blockCopy = function(src, srcOffset, dest, destOffset, count) {
		if (count === 0) {
			return;
		}
		if (ss.isNullOrUndefined(src)) {
			throw new ss.ArgumentNullException('src');
		}
		if (ss.isNullOrUndefined(dest)) {
			throw new ss.ArgumentNullException('dst');
		}
		if (srcOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('srcOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (destOffset < 0) {
			throw new ss.ArgumentOutOfRangeException('dstOffset', $System_Buffer.$negativeValueErrorText);
		}
		if (count < 0) {
			throw new ss.ArgumentOutOfRangeException('count', $System_Buffer.$negativeValueErrorText);
		}
		if (srcOffset + count > $System_Buffer.$byteLength(src) || destOffset + count > $System_Buffer.$byteLength(dest)) {
			throw new ss.ArgumentException($System_Buffer.$outOfRangeErrorText);
		}
		dest.get_uint8Array().set(new Uint8Array(src.get_uint8Array().buffer, srcOffset, count), destOffset);
	};
	global.System.Buffer = $System_Buffer;
	////////////////////////////////////////////////////////////////////////////////
	// System.CharExtensions
	var $System_CharExtensions = function() {
	};
	$System_CharExtensions.__typeName = 'System.CharExtensions';
	$System_CharExtensions.toStringInvariant = function(c) {
		return String.fromCharCode(c);
	};
	$System_CharExtensions.isMarkup = function(chr) {
		return chr === 6;
	};
	$System_CharExtensions.isControl = function(c) {
		return c >= 0 && c <= 31 || c >= 128 && c <= 159 || c === 127;
	};
	$System_CharExtensions.isNonPrintableControl = function(c) {
		return c >= 0 && c <= 8 || c === 11 || c === 12 || c >= 14 && c <= 31 || c === 127;
	};
	$System_CharExtensions.isPrintableAscii = function(c) {
		return c > 31 && c < 127;
	};
	$System_CharExtensions.isDigit = function(c) {
		return c >= 48 && c <= 57;
	};
	$System_CharExtensions.isAsciiLetter = function(c, allowUpper, allowLower) {
		return c >= 65 && c <= 90 && allowUpper || c >= 97 && c <= 122 && allowLower;
	};
	$System_CharExtensions.isNewLine = function(c) {
		return c === 10;
	};
	$System_CharExtensions.isWhiteSpace = function(c) {
		return c === 32 || c === 10 || c === 9 || c === 13;
	};
	global.System.CharExtensions = $System_CharExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// System.EnumExtensions
	var $System_EnumExtensions = function() {
	};
	$System_EnumExtensions.__typeName = 'System.EnumExtensions';
	$System_EnumExtensions.getName = function(T) {
		return function(val) {
			// this is like ss_Enum.toString in mscorlib.js except it falls back
			// to returning the number value instead of throwing exceptions
			var type = T;
			var value = $System_EnumExtensions.toInt32(val);
			var values = type.prototype;
			var keys = ss.cast(Object.keys(values), Array);
			if (!ss.isFlags(type) || value === 0) {
				for (var index = 0; index < keys.length; index++) {
					var i = keys[index];
					if (!!ss.referenceEquals(values[i], value)) {
						return i;
					}
				}
			}
			else {
				var parts = [];
				for (var index1 = 0; index1 < keys.length; index1++) {
					var i1 = keys[index1];
					if (!!!ss.referenceEquals(values[i1] & value, 0)) {
						parts.push(i1);
					}
				}
				if (parts.length > 0) {
					return parts.join(' | ');
				}
			}
			return $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, value);
		};
	};
	$System_EnumExtensions.toInt32 = function(val) {
		return FrancaGlobals.enumToInt(val);
	};
	$System_EnumExtensions.hasFlag = function(val, flag) {
		// check if from the same type.
		if (!ss.referenceEquals(ss.getInstanceType(val), ss.getInstanceType(flag))) {
			throw new ss.ArgumentException('The checked flag is not from the same type as the checked variable.');
		}
		var flagVal = $System_EnumExtensions.toInt32(flag);
		var enumVal = $System_EnumExtensions.toInt32(val);
		return (enumVal & flagVal) === flagVal;
	};
	global.System.EnumExtensions = $System_EnumExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// System.GC
	var $System_GC = function() {
	};
	$System_GC.__typeName = 'System.GC';
	$System_GC.suppressFinalize = function(obj) {
	};
	global.System.GC = $System_GC;
	////////////////////////////////////////////////////////////////////////////////
	// System.ICloneable
	var $System_ICloneable = function() {
	};
	$System_ICloneable.__typeName = 'System.ICloneable';
	global.System.ICloneable = $System_ICloneable;
	////////////////////////////////////////////////////////////////////////////////
	// System.IEnumerableExtensions
	var $System_IEnumerableExtensions = function() {
	};
	$System_IEnumerableExtensions.__typeName = 'System.IEnumerableExtensions';
	$System_IEnumerableExtensions.reversed = function(T) {
		return function(enumerable) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(enumerable) {
					var $result, $state = 0, count, i;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									// using Count and ElementAt is fine because Linq is optimized for anything
									// that implements IList<T>, like lists, arrays, etc
									count = Enumerable.from(enumerable).count();
									i = count - 1;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!(i >= 0)) {
										$state = -1;
										break $sm1;
									}
									$result = Enumerable.from(enumerable).elementAt(i);
									$state = 2;
									return true;
								}
								case 2: {
									$state = -1;
									i--;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, enumerable);
			}, this);
		};
	};
	$System_IEnumerableExtensions.safeEnumerate = function(T) {
		return function(e) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(e) {
					var $result, $state = 0, count, t, array, cached, arrayObj, i, $t1, item;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									count = Enumerable.from(e).count();
									if (count === 0) {
										$state = -1;
										break $sm1;
									}
									if (ss.isNullOrUndefined($System_IEnumerableExtensions.$cachedArrays)) {
										$System_IEnumerableExtensions.$cachedArrays = new (ss.makeGenericType(ss.Dictionary$2, [Function, Object]))();
									}
									if (ss.isNullOrUndefined($System_IEnumerableExtensions.$cacheInUse)) {
										$System_IEnumerableExtensions.$cacheInUse = new (ss.makeGenericType($System_Collections_Generic_HashSet$1, [Function]))();
									}
									t = T;
									if ($System_IEnumerableExtensions.$cacheInUse.contains(t)) {
										// cache is in use, create a new array
										array = new Array(count);
										cached = false;
									}
									else {
										arrayObj = {};
										// cache is not in use, used cached array
										if (!$System_IEnumerableExtensions.$cachedArrays.tryGetValue(t, arrayObj)) {
											array = new Array(count);
											$System_IEnumerableExtensions.$cachedArrays.set_item(t, array);
										}
										else {
											array = ss.cast(arrayObj.$, Array);
										}
										if (array.length < count) {
											array = new Array(count);
											$System_IEnumerableExtensions.$cachedArrays.set_item(t, array);
										}
										$System_IEnumerableExtensions.$cacheInUse.add(t);
										cached = true;
									}
									i = 0;
									$t1 = ss.getEnumerator(e);
									try {
										while ($t1.moveNext()) {
											item = $t1.current();
											array[i] = item;
											i++;
										}
									}
									finally {
										$t1.dispose();
									}
									count = i;
									i = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!(i < count)) {
										$state = 3;
										continue $sm1;
									}
									$result = array[i];
									$state = 2;
									return true;
								}
								case 2: {
									$state = -1;
									i++;
									$state = 1;
									continue $sm1;
								}
								case 3: {
									$state = -1;
									if (cached) {
										$System_IEnumerableExtensions.$cacheInUse.remove(t);
									}
									$state = -1;
									break $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, e);
			}, this);
		};
	};
	global.System.IEnumerableExtensions = $System_IEnumerableExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// System.IndexOutOfRangeException
	var $System_IndexOutOfRangeException = function() {
		ss.Exception.call(this, 'Array index is out of range.');
	};
	$System_IndexOutOfRangeException.__typeName = 'System.IndexOutOfRangeException';
	$System_IndexOutOfRangeException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$System_IndexOutOfRangeException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.System.IndexOutOfRangeException = $System_IndexOutOfRangeException;
	////////////////////////////////////////////////////////////////////////////////
	// System.JsIntegerExtensions
	var $System_JsIntegerExtensions = function() {
	};
	$System_JsIntegerExtensions.__typeName = 'System.JsIntegerExtensions';
	$System_JsIntegerExtensions.toString = function(i, formatProvider) {
		return i.toString();
	};
	$System_JsIntegerExtensions.toString$1 = function(i, format, formatProvider) {
		return ss.formatNumber(i, format);
	};
	global.System.JsIntegerExtensions = $System_JsIntegerExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// System.NewlineInfo
	var $System_NewlineInfo = function() {
		this.startIndex = 0;
		this.length = 0;
	};
	$System_NewlineInfo.__typeName = 'System.NewlineInfo';
	$System_NewlineInfo.$ctor1 = function(start, length) {
		this.startIndex = 0;
		this.length = 0;
		this.startIndex = start;
		this.length = length;
	};
	$System_NewlineInfo.getDefaultValue = function() {
		return new $System_NewlineInfo();
	};
	global.System.NewlineInfo = $System_NewlineInfo;
	////////////////////////////////////////////////////////////////////////////////
	// System.ObjectDisposedException
	var $System_ObjectDisposedException = function(objectName) {
		this.$obj_name = null;
		this.$msg = null;
		ss.InvalidOperationException.call(this, 'The object was used after being disposed.');
		this.$obj_name = objectName;
		this.$msg = 'The object was used after being disposed.';
	};
	$System_ObjectDisposedException.__typeName = 'System.ObjectDisposedException';
	$System_ObjectDisposedException.$ctor2 = function(objectName, message) {
		this.$obj_name = null;
		this.$msg = null;
		ss.InvalidOperationException.call(this, message);
		this.$obj_name = objectName;
		this.$msg = message;
	};
	$System_ObjectDisposedException.$ctor1 = function(message, innerException) {
		this.$obj_name = null;
		this.$msg = null;
		ss.InvalidOperationException.call(this, message, innerException);
	};
	global.System.ObjectDisposedException = $System_ObjectDisposedException;
	////////////////////////////////////////////////////////////////////////////////
	// System.ObjectExtensions
	var $System_ObjectExtensions = function() {
	};
	$System_ObjectExtensions.__typeName = 'System.ObjectExtensions';
	$System_ObjectExtensions.toStringInvariant$1 = function(T) {
		return function(obj) {
			if (ss.referenceEquals(obj, null)) {
				return '';
			}
			return obj.toString();
		};
	};
	$System_ObjectExtensions.toStringInvariant = function(obj) {
		if (ss.referenceEquals(obj, null)) {
			return '';
		}
		return obj.toString();
	};
	global.System.ObjectExtensions = $System_ObjectExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// System.OverflowException
	var $System_OverflowException = function() {
		$System_ArithmeticException.$ctor1.call(this, 'Number overflow.');
		this.set_hResult($System_OverflowException.$result);
	};
	$System_OverflowException.__typeName = 'System.OverflowException';
	$System_OverflowException.$ctor1 = function(message) {
		$System_ArithmeticException.$ctor1.call(this, message);
		this.set_hResult($System_OverflowException.$result);
	};
	$System_OverflowException.$ctor2 = function(message, innerException) {
		$System_ArithmeticException.$ctor2.call(this, message, innerException);
		this.set_hResult($System_OverflowException.$result);
	};
	global.System.OverflowException = $System_OverflowException;
	////////////////////////////////////////////////////////////////////////////////
	// System.STAThreadAttribute
	var $System_STAThreadAttribute = function() {
	};
	$System_STAThreadAttribute.__typeName = 'System.STAThreadAttribute';
	global.System.STAThreadAttribute = $System_STAThreadAttribute;
	////////////////////////////////////////////////////////////////////////////////
	// System.StringBuilderFixes
	var $System_StringBuilderFixes = function() {
	};
	$System_StringBuilderFixes.__typeName = 'System.StringBuilderFixes';
	$System_StringBuilderFixes.appendFormat = function(str, format, args) {
		str.append(ss.formatString.apply(null, [format].concat(args)));
	};
	$System_StringBuilderFixes.append = function(str, value, startIndex, count) {
		str.append(value.substr(startIndex, count));
	};
	$System_StringBuilderFixes.toString = function(str, startIndex, length) {
		return str.toString().substr(startIndex, length);
	};
	global.System.StringBuilderFixes = $System_StringBuilderFixes;
	////////////////////////////////////////////////////////////////////////////////
	// System.StringEscapeStyle
	var $System_StringEscapeStyle = function() {
	};
	$System_StringEscapeStyle.__typeName = 'System.StringEscapeStyle';
	global.System.StringEscapeStyle = $System_StringEscapeStyle;
	////////////////////////////////////////////////////////////////////////////////
	// System.StringExtensions
	var $System_StringExtensions = function() {
	};
	$System_StringExtensions.__typeName = 'System.StringExtensions';
	$System_StringExtensions.count = function(str, c) {
		return $System_StringExtensions.count$2(str, c, 0, str.length);
	};
	$System_StringExtensions.count$1 = function(str, c, index) {
		return $System_StringExtensions.count$2(str, c, index, str.length - index);
	};
	$System_StringExtensions.count$2 = function(str, c, index, length) {
		var count = 0;
		for (var i = index; i < length; i++) {
			if (str.charCodeAt(i) === c) {
				count++;
			}
		}
		return count;
	};
	$System_StringExtensions.removeNewlines = function(str) {
		return $System_StringExtensions.removeNewlines$1(str, 0, str.length);
	};
	$System_StringExtensions.get_$stringCopyBuilder = function() {
		return $System_StringExtensions.$_stringCopyBuilder || ($System_StringExtensions.$_stringCopyBuilder = new ss.StringBuilder());
	};
	$System_StringExtensions.removeNewlines$1 = function(str, index, length) {
		var cpy = $System_StringExtensions.get_$stringCopyBuilder();
		try {
			var last = index;
			var end = index + length;
			for (var i = index; i < end; i++) {
				var chr = str.charCodeAt(i);
				if (chr === 13) {
					if (i - last > 0) {
						$System_StringBuilderFixes.append(cpy, str, last, i - last);
					}
					if (i + 1 < end && str.charCodeAt(i + 1) === 10) {
						i++;
					}
					last = i + 1;
				}
				else if (chr === 10) {
					if (i - last > 0) {
						$System_StringBuilderFixes.append(cpy, str, last, i - last);
					}
					last = i + 1;
				}
			}
			if (last === 0 && length === str.length) {
				return str;
				// don't make a copy
			}
			else {
				if (end - last > 0) {
					$System_StringBuilderFixes.append(cpy, str, last, end - last);
				}
				return cpy.toString();
			}
		}
		finally {
			cpy.clear();
		}
	};
	$System_StringExtensions.escape = function(str, target) {
		return $System_StringExtensions.escape$1(str, 0, str.length, target);
	};
	$System_StringExtensions.escape$1 = function(str, index, length, target) {
		var cpy = $System_StringExtensions.get_$stringCopyBuilder();
		try {
			var escapeApostrophe = $System_EnumExtensions.hasFlag(target, 128);
			var escapeQuestion = $System_EnumExtensions.hasFlag(target, 256);
			var escapeSlash = $System_EnumExtensions.hasFlag(target, 512);
			target &= -129;
			target &= -257;
			target &= -513;
			var last = index;
			var end = index + length;
			for (var i = index; i < end; i++) {
				var c = str.charCodeAt(i);
				if ($System_CharExtensions.isControl(c) || c === 92 || c === 34 || escapeApostrophe && c === 39 || escapeQuestion && c === 63 || escapeSlash && c === 47) {
					if (i - last > 0) {
						$System_StringBuilderFixes.append(cpy, str, last, i - last);
					}
					last = i + 1;
					if (target === 1) {
						switch (c) {
							default: {
								cpy.append('\\x');
								$Franca_ByteExtensions.toHex$1(c, cpy, false);
								break;
							}
							case 8: {
								cpy.append('\\b');
								break;
							}
							case 12: {
								cpy.append('\\f');
								break;
							}
							case 10: {
								cpy.append('\\n');
								break;
							}
							case 13: {
								cpy.append('\\r');
								break;
							}
							case 9: {
								cpy.append('\\t');
								break;
							}
							case 11: {
								cpy.append('\\v');
								break;
							}
							case 39: {
								cpy.append("\\'");
								break;
							}
							case 34: {
								cpy.append('\\"');
								break;
							}
							case 92: {
								cpy.append('\\\\');
								break;
							}
							case 63: {
								cpy.append('\\?');
								break;
							}
							case 47: {
								cpy.append('\\/');
								break;
							}
						}
					}
					else if (target === 2) {
						switch (c) {
							default: {
								cpy.append('\\u00');
								$Franca_ByteExtensions.toHex$1(c, cpy, false);
								break;
							}
							case 34: {
								cpy.append('\\"');
								break;
							}
							case 92: {
								cpy.append('\\\\');
								break;
							}
							case 47: {
								cpy.append('\\/');
								break;
							}
							case 8: {
								cpy.append('\\b');
								break;
							}
							case 12: {
								cpy.append('\\f');
								break;
							}
							case 10: {
								cpy.append('\\n');
								break;
							}
							case 13: {
								cpy.append('\\r');
								break;
							}
							case 9: {
								cpy.append('\\t');
								break;
							}
						}
					}
					else {
						// DotNet
						switch (c) {
							default: {
								cpy.append('\\x');
								$Franca_ByteExtensions.toHex$1(c, cpy, false);
								break;
							}
							case 7: {
								cpy.append('\\a');
								break;
							}
							case 8: {
								cpy.append('\\b');
								break;
							}
							case 12: {
								cpy.append('\\f');
								break;
							}
							case 10: {
								cpy.append('\\n');
								break;
							}
							case 13: {
								cpy.append('\\r');
								break;
							}
							case 9: {
								cpy.append('\\t');
								break;
							}
							case 11: {
								cpy.append('\\v');
								break;
							}
							case 39: {
								cpy.append("\\'");
								break;
							}
							case 34: {
								cpy.append('\\"');
								break;
							}
							case 92: {
								cpy.append('\\\\');
								break;
							}
							case 63: {
								cpy.append('\\?');
								break;
							}
						}
					}
				}
			}
			if (last === 0 && length === str.length) {
				return str;
				// don't make a copy
			}
			else {
				if (end - last > 0) {
					$System_StringBuilderFixes.append(cpy, str, last, end - last);
				}
				return cpy.toString();
			}
		}
		finally {
			cpy.clear();
		}
	};
	$System_StringExtensions.isNewline = function(s, index, newline) {
		if (index < 0 || index >= s.length) {
			newline.$ = new $System_NewlineInfo();
			return false;
		}
		if (s.charCodeAt(index) === 13) {
			if (index + 1 < s.length && s.charCodeAt(index + 1) === 10) {
				newline.$ = new $System_NewlineInfo.$ctor1(index, 2);
				return true;
			}
			else {
				newline.$ = new $System_NewlineInfo.$ctor1(index, 1);
				return true;
			}
		}
		else if (s.charCodeAt(index) === 10) {
			if (index - 1 >= 0 && s.charCodeAt(index - 1) === 13) {
				newline.$ = new $System_NewlineInfo.$ctor1(index - 1, 2);
				return true;
			}
			else {
				newline.$ = new $System_NewlineInfo.$ctor1(index, 1);
				return true;
			}
		}
		newline.$ = new $System_NewlineInfo();
		return false;
	};
	$System_StringExtensions.isEmpty = function(s, trimWhiteSpace) {
		if (trimWhiteSpace && ss.isValue(s)) {
			s = s.trim();
		}
		return s === '';
	};
	$System_StringExtensions.isNullOrEmpty = function(s, trimWhiteSpace) {
		if (trimWhiteSpace && ss.isValue(s)) {
			s = s.trim();
		}
		return ss.isNullOrUndefined(s) || s === '';
	};
	$System_StringExtensions.hasValue = function(s, trimWhiteSpace) {
		if (trimWhiteSpace && ss.isValue(s)) {
			s = s.trim();
		}
		return ss.isValue(s) && s !== '';
	};
	$System_StringExtensions.toLowerInvariant = function(str) {
		return str.toLowerCase();
	};
	$System_StringExtensions.toUpperInvariant = function(str) {
		return str.toUpperCase();
	};
	$System_StringExtensions.indexOfAny$1 = function(str, searchStrings) {
		var lowest = -1;
		for (var i = 0; i < searchStrings.length; i++) {
			var index = str.indexOf(searchStrings[i]);
			if (index > -1) {
				if (lowest > -1) {
					lowest = Math.min(lowest, index);
				}
				else {
					lowest = index;
				}
			}
		}
		return lowest;
	};
	$System_StringExtensions.indexOfAny = function(str, searchStrings) {
		var lowest = -1;
		var $t1 = ss.getEnumerator(searchStrings);
		try {
			while ($t1.moveNext()) {
				var searchStr = $t1.current();
				var index = str.indexOf(searchStr);
				if (index > -1) {
					if (lowest > -1) {
						lowest = Math.min(lowest, index);
					}
					else {
						lowest = index;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return lowest;
	};
	$System_StringExtensions.getUniqueHash = function(text, version) {
		switch (version) {
			default: {
				return $System_StringExtensions.$getUniqueHashV0(text);
			}
			case 0: {
				return $System_StringExtensions.$getUniqueHashV0(text);
			}
		}
	};
	$System_StringExtensions.$rotl = function(value, bits) {
		if (bits === 0) {
			return value;
		}
		return value << bits | value >> 32 - bits;
	};
	$System_StringExtensions.$getUniqueHashV0 = function(text) {
		var number = 0;
		var shift = 0;
		for (var i = 0; i < text.length; i++) {
			var c = text.charCodeAt(i);
			var v = $System_StringExtensions.$rotl(c & 65535, shift);
			number ^= v;
			shift = (shift + 8) % 32;
		}
		return number;
	};
	global.System.StringExtensions = $System_StringExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// System.SystemException
	var $System_SystemException = function() {
		this.$2$HResultField = 0;
		ss.Exception.call(this, 'A system exception has occurred.');
		this.set_hResult($System_SystemException.$result);
	};
	$System_SystemException.__typeName = 'System.SystemException';
	$System_SystemException.$ctor1 = function(message) {
		this.$2$HResultField = 0;
		ss.Exception.call(this, message);
		this.set_hResult($System_SystemException.$result);
	};
	$System_SystemException.$ctor2 = function(message, innerException) {
		this.$2$HResultField = 0;
		ss.Exception.call(this, message, innerException);
		this.set_hResult($System_SystemException.$result);
	};
	global.System.SystemException = $System_SystemException;
	////////////////////////////////////////////////////////////////////////////////
	// System.ThreadStaticAttribute
	var $System_ThreadStaticAttribute = function() {
	};
	$System_ThreadStaticAttribute.__typeName = 'System.ThreadStaticAttribute';
	$System_ThreadStaticAttribute.createInstance = function() {
		return $System_ThreadStaticAttribute.$ctor();
	};
	$System_ThreadStaticAttribute.$ctor = function() {
		var $this = {};
		return $this;
	};
	$System_ThreadStaticAttribute.isInstanceOfType = function() {
		return true;
	};
	global.System.ThreadStaticAttribute = $System_ThreadStaticAttribute;
	////////////////////////////////////////////////////////////////////////////////
	// System.TimeSpanExtensions
	var $System_TimeSpanExtensions = function() {
	};
	$System_TimeSpanExtensions.__typeName = 'System.TimeSpanExtensions';
	$System_TimeSpanExtensions.divide$1 = function(time, divTime) {
		if (divTime.ticks === 0) {
			throw new ss.DivideByZeroException();
		}
		return time.ticks / divTime.ticks;
	};
	$System_TimeSpanExtensions.divide = function(time, divideBy) {
		if (divideBy === 0) {
			throw new ss.DivideByZeroException();
		}
		return new ss.TimeSpan(Math.trunc(time.ticks * (1 / divideBy)));
	};
	$System_TimeSpanExtensions.mod = function(time, value) {
		return new ss.TimeSpan(time.ticks % value.ticks);
	};
	global.System.TimeSpanExtensions = $System_TimeSpanExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// System.TypeExtensions
	var $System_TypeExtensions = function() {
	};
	$System_TypeExtensions.__typeName = 'System.TypeExtensions';
	$System_TypeExtensions.getAttribute = function(T) {
		return function(obj, inherit) {
			return $System_TypeExtensions.getAttribute$1(T).call(null, ss.getInstanceType(obj), false);
		};
	};
	$System_TypeExtensions.getAttribute$1 = function(T) {
		return function(type, inherit) {
			return ss.safeCast(Enumerable.from(ss.getAttributes(type, T, inherit)).firstOrDefault(null, ss.getDefaultValue(Object)), T);
		};
	};
	$System_TypeExtensions._IsValueType = function(type) {
		return !ss.isClass(type) && !ss.isInterface(type) && !(type === Array);
	};
	$System_TypeExtensions._IsGenericType = function(type) {
		return ss.isGenericTypeDefinition(type);
	};
	$System_TypeExtensions.getFriendlyName = function(type, full) {
		//if (type == typeof(int))
		//return "int";
		//else if (type == typeof(short))
		//return "short";
		//else if (type == typeof(byte))
		//return "byte";
		//else if (type == typeof(bool))
		//return "bool";
		//else if (type == typeof(long))
		//return "long";
		//else if (type == typeof(float))
		//return "float";
		//else if (type == typeof(double))
		//return "double";
		//else if (type == typeof(decimal))
		//return "decimal";
		//else if (type == typeof(string))
		//return "string";
		//else
		if ($System_TypeExtensions._IsGenericType(type)) {
			return (full ? ss.getTypeFullName(type) : ss.getTypeName(type)).split(String.fromCharCode(96))[0] + '<' + ss.arrayFromEnumerable(Enumerable.from(ss.getGenericArguments(type)).select(function(x) {
				return $System_TypeExtensions.getFriendlyName(x, false);
			})).join(', ') + '>';
		}
		else {
			return (full ? ss.getTypeFullName(type) : ss.getTypeName(type));
		}
	};
	global.System.TypeExtensions = $System_TypeExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// System.UnauthorizedAccessException
	var $System_UnauthorizedAccessException = function() {
		$System_SystemException.$ctor1.call(this, 'Access to the requested resource is not authorized.');
		this.set_hResult($System_UnauthorizedAccessException.$result);
	};
	$System_UnauthorizedAccessException.__typeName = 'System.UnauthorizedAccessException';
	$System_UnauthorizedAccessException.$ctor1 = function(message) {
		$System_SystemException.$ctor1.call(this, message);
		this.set_hResult($System_UnauthorizedAccessException.$result);
	};
	$System_UnauthorizedAccessException.$ctor2 = function(message, inner) {
		$System_SystemException.$ctor2.call(this, message, inner);
		this.set_hResult($System_UnauthorizedAccessException.$result);
	};
	global.System.UnauthorizedAccessException = $System_UnauthorizedAccessException;
	////////////////////////////////////////////////////////////////////////////////
	// System.UniqueStringHash
	var $System_UniqueStringHash = function() {
	};
	$System_UniqueStringHash.__typeName = 'System.UniqueStringHash';
	global.System.UniqueStringHash = $System_UniqueStringHash;
	////////////////////////////////////////////////////////////////////////////////
	// System.Collections.Generic.HashSet
	var $System_Collections_Generic_HashSet$1 = function(T) {
		var $type = function() {
			this.$jsSet = null;
			this.$comparer = null;
			this.$jsSet = new HashSet(function(o) {
				return (ss.isValue(o) ? ss.getHashCode(o) : 0);
			}, function(a, b) {
				return ss.staticEquals(a, b);
			});
		};
		$type.$ctor1 = function(col) {
			$type.call(this);
			var $t1 = ss.getEnumerator(col);
			try {
				while ($t1.moveNext()) {
					var item = $t1.current();
					this.$jsSet.add(item);
				}
			}
			finally {
				$t1.dispose();
			}
		};
		$type.$ctor2 = function(comp) {
			this.$jsSet = null;
			this.$comparer = null;
			this.$jsSet = new HashSet(function(o) {
				return comp.getObjectHashCode(ss.cast(o, T));
			}, function(a, b) {
				return comp.areEqual(ss.cast(a, T), ss.cast(b, T));
			});
			this.$comparer = comp;
		};
		$type.$ctor3 = function(col, comp) {
			$type.$ctor2.call(this, comp);
			var $t1 = ss.getEnumerator(col);
			try {
				while ($t1.moveNext()) {
					var item = $t1.current();
					this.$jsSet.add(item);
				}
			}
			finally {
				$t1.dispose();
			}
		};
		ss.registerGenericClassInstance($type, $System_Collections_Generic_HashSet$1, [T], {
			get_comparer: function() {
				return this.$comparer;
			},
			add: function(item) {
				this.$jsSet.add(item);
			},
			clear: function() {
				this.$jsSet.clear();
			},
			contains: function(item) {
				return this.$jsSet.contains(item);
			},
			get_count: function() {
				return this.$jsSet.size();
			},
			remove: function(item) {
				return ss.isValue(this.$jsSet.remove(item));
			},
			getEnumerator: function() {
				var $result, $state = 0, values, i;
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								values = this.$jsSet.values();
								i = 0;
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								if (!(i < values.length)) {
									$state = -1;
									break $sm1;
								}
								$result = ss.cast(values[i], T);
								$state = 2;
								return true;
							}
							case 2: {
								$state = -1;
								i++;
								$state = 1;
								continue $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, null, this);
			},
			isSubsetOf: function(other) {
				return this.$jsSet.isSubsetOf(other.$jsSet);
			},
			isProperSubsetOf: function(other) {
				if (this.$jsSet.isEmpty()) {
					if (other.$jsSet.isEmpty()) {
						return false;
					}
					return true;
				}
				return this.$jsSet.isSubsetOf(other.$jsSet);
			},
			isSupersetOf: function(other) {
				return other.$jsSet.isSubsetOf(this.$jsSet);
			},
			isProperSupersetOf: function(other) {
				if (other.$jsSet.isEmpty()) {
					if (this.$jsSet.isEmpty()) {
						return false;
					}
					return true;
				}
				return other.$jsSet.isSubsetOf(this.$jsSet);
			},
			overlaps: function(other) {
				var $t1 = other.getEnumerator();
				try {
					while ($t1.moveNext()) {
						var item = $t1.current();
						if (this.$jsSet.contains(item)) {
							return true;
						}
					}
				}
				finally {
					$t1.dispose();
				}
				return false;
			},
			exceptWith: function(other) {
				var $t1 = ss.getEnumerator(other);
				try {
					while ($t1.moveNext()) {
						var item = $t1.current();
						this.remove(item);
					}
				}
				finally {
					$t1.dispose();
				}
			},
			symmetricExceptWith: function(other) {
				var $t1 = ss.getEnumerator(other);
				try {
					while ($t1.moveNext()) {
						var item = $t1.current();
						if (this.contains(item)) {
							this.remove(item);
						}
						else {
							this.add(item);
						}
					}
				}
				finally {
					$t1.dispose();
				}
			},
			intersectWith: function(other) {
				this.$jsSet = this.$jsSet.intersection(other.$jsSet);
			},
			intersectWith$1: function(other) {
				var newSet = this.$jsSet.cloneEmpty();
				var $t1 = ss.getEnumerator(other);
				try {
					while ($t1.moveNext()) {
						var item = $t1.current();
						if (this.contains(item)) {
							newSet.add(item);
						}
					}
				}
				finally {
					$t1.dispose();
				}
				this.$jsSet = newSet;
			},
			unionWith: function(other) {
				this.$jsSet = this.$jsSet.union(other.$jsSet);
			},
			unionWith$1: function(other) {
				var $t1 = ss.getEnumerator(other);
				try {
					while ($t1.moveNext()) {
						var item = $t1.current();
						this.add(item);
					}
				}
				finally {
					$t1.dispose();
				}
			},
			trimExcess: function() {
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IEnumerable, ss.IEnumerable, ss.ICollection];
		});
		$type.$ctor1.prototype = $type.$ctor2.prototype = $type.$ctor3.prototype = $type.prototype;
		return $type;
	};
	$System_Collections_Generic_HashSet$1.__typeName = 'System.Collections.Generic.HashSet$1';
	ss.initGenericClass($System_Collections_Generic_HashSet$1, $asm, 1);
	global.System.Collections.Generic.HashSet$1 = $System_Collections_Generic_HashSet$1;
	////////////////////////////////////////////////////////////////////////////////
	// System.Collections.Generic.LinkedList
	var $System_Collections_Generic_LinkedList$1 = function(T) {
		var $type = function() {
			this.$count = 0;
			this.$version = 0;
			this.$first = null;
		};
		$type.$ctor1 = function(collection) {
			this.$count = 0;
			this.$version = 0;
			this.$first = null;
			var $t1 = ss.getEnumerator(collection);
			try {
				while ($t1.moveNext()) {
					var item = $t1.current();
					this.addLast$1(item);
				}
			}
			finally {
				$t1.dispose();
			}
		};
		$type.$verifyBlankNode = function(newNode) {
			if (ss.isNullOrUndefined(newNode)) {
				throw new ss.ArgumentNullException('newNode');
			}
			if (ss.isValue(newNode.get_list())) {
				throw new ss.InvalidOperationException();
			}
		};
		ss.registerGenericClassInstance($type, $System_Collections_Generic_LinkedList$1, [T], {
			$verifyReferencedNode: function(node) {
				if (ss.isNullOrUndefined(node)) {
					throw new ss.ArgumentNullException('node');
				}
				if (!ss.referenceEquals(node.get_list(), this)) {
					throw new ss.InvalidOperationException();
				}
			},
			addAfter$1: function(node, value) {
				this.$verifyReferencedNode(node);
				var newNode = new (ss.makeGenericType($System_Collections_Generic_LinkedListNode$1, [T]).$ctor2)(this, value, node, node.$forward);
				this.$count++;
				this.$version++;
				return newNode;
			},
			addAfter: function(node, newNode) {
				this.$verifyReferencedNode(node);
				$type.$verifyBlankNode(newNode);
				newNode.$insertBetween(node, node.$forward, this);
				this.$count++;
				this.$version++;
			},
			addBefore$1: function(node, value) {
				this.$verifyReferencedNode(node);
				var newNode = new (ss.makeGenericType($System_Collections_Generic_LinkedListNode$1, [T]).$ctor2)(this, value, node.$back, node);
				this.$count++;
				this.$version++;
				if (ss.referenceEquals(node, this.$first)) {
					this.$first = newNode;
				}
				return newNode;
			},
			addBefore: function(node, newNode) {
				this.$verifyReferencedNode(node);
				$type.$verifyBlankNode(newNode);
				newNode.$insertBetween(node.$back, node, this);
				this.$count++;
				this.$version++;
				if (ss.referenceEquals(node, this.$first)) {
					this.$first = newNode;
				}
			},
			addFirst: function(node) {
				$type.$verifyBlankNode(node);
				if (ss.isNullOrUndefined(this.$first)) {
					node.$selfReference(this);
				}
				else {
					node.$insertBetween(this.$first.$back, this.$first, this);
				}
				this.$count++;
				this.$version++;
				this.$first = node;
			},
			addFirst$1: function(value) {
				var newNode;
				if (ss.isNullOrUndefined(this.$first)) {
					newNode = new (ss.makeGenericType($System_Collections_Generic_LinkedListNode$1, [T]).$ctor1)(this, value);
				}
				else {
					newNode = new (ss.makeGenericType($System_Collections_Generic_LinkedListNode$1, [T]).$ctor2)(this, value, this.$first.$back, this.$first);
				}
				this.$count++;
				this.$version++;
				this.$first = newNode;
				return newNode;
			},
			addLast$1: function(value) {
				var newNode;
				if (ss.isNullOrUndefined(this.$first)) {
					newNode = new (ss.makeGenericType($System_Collections_Generic_LinkedListNode$1, [T]).$ctor1)(this, value);
					this.$first = newNode;
				}
				else {
					newNode = new (ss.makeGenericType($System_Collections_Generic_LinkedListNode$1, [T]).$ctor2)(this, value, this.$first.$back, this.$first);
				}
				this.$count++;
				this.$version++;
				return newNode;
			},
			addLast: function(node) {
				$type.$verifyBlankNode(node);
				if (ss.isNullOrUndefined(this.$first)) {
					node.$selfReference(this);
					this.$first = node;
				}
				else {
					node.$insertBetween(this.$first.$back, this.$first, this);
				}
				this.$count++;
				this.$version++;
			},
			clear: function() {
				this.$count = 0;
				this.$first = null;
				this.$version++;
			},
			contains: function(value) {
				var node = this.$first;
				if (ss.isNullOrUndefined(node)) {
					return false;
				}
				do {
					if (ss.equals(value, node.get_value())) {
						return true;
					}
					node = node.$forward;
				} while (!ss.referenceEquals(node, this.$first));
				return false;
			},
			copyTo: function(array, index) {
				if (ss.isNullOrUndefined(array)) {
					throw new ss.ArgumentNullException('array');
				}
				if (index < 0) {
					throw new ss.ArgumentOutOfRangeException('index');
				}
				if (ss.arrayRank(array) !== 1) {
					throw new ss.ArgumentException('array', 'Array is multidimensional');
				}
				if (array.length - index + 0 < this.$count) {
					throw new ss.ArgumentException('number of items exceeds capacity');
				}
				var node = this.$first;
				if (ss.isNullOrUndefined(this.$first)) {
					return;
				}
				do {
					array[index] = node.get_value();
					index++;
					node = node.$forward;
				} while (!ss.referenceEquals(node, this.$first));
			},
			find: function(value) {
				var node = this.$first;
				if (ss.isNullOrUndefined(node)) {
					return null;
				}
				do {
					if (ss.isNullOrUndefined(value) && ss.isNullOrUndefined(node.get_value()) || ss.isValue(value) && ss.equals(value, node.get_value())) {
						return node;
					}
					node = node.$forward;
				} while (!ss.referenceEquals(node, this.$first));
				return null;
			},
			findLast: function(value) {
				var node = this.$first;
				if (ss.isNullOrUndefined(node)) {
					return null;
				}
				do {
					node = node.$back;
					if (ss.equals(value, node.get_value())) {
						return node;
					}
				} while (!ss.referenceEquals(node, this.$first));
				return null;
			},
			getEnumerator$1: function() {
				return new (ss.makeGenericType($System_Collections_Generic_LinkedList$1$Enumerator, [T]))(this);
			},
			remove: function(value) {
				var node = this.find(value);
				if (ss.isNullOrUndefined(node)) {
					return false;
				}
				this.remove$1(node);
				return true;
			},
			remove$1: function(node) {
				this.$verifyReferencedNode(node);
				this.$count--;
				if (this.$count === 0) {
					this.$first = null;
				}
				if (ss.referenceEquals(node, this.$first)) {
					this.$first = this.$first.$forward;
				}
				this.$version++;
				node.$detach();
			},
			removeFirst: function() {
				if (ss.isValue(this.$first)) {
					this.remove$1(this.$first);
				}
			},
			removeLast: function() {
				if (ss.isValue(this.$first)) {
					this.remove$1(this.$first.$back);
				}
			},
			add: function(value) {
				this.addLast$1(value);
			},
			getEnumerator: function() {
				return this.getEnumerator$1();
			},
			get_count: function() {
				return this.$count;
			},
			get_first: function() {
				return this.$first;
			},
			get_last: function() {
				return (ss.isValue(this.$first) ? this.$first.$back : null);
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IEnumerable, ss.IEnumerable, ss.ICollection];
		});
		$type.$ctor1.prototype = $type.prototype;
		$type.$dataArrayKey = 'DataArray';
		$type.$versionKey = 'version';
		return $type;
	};
	$System_Collections_Generic_LinkedList$1.__typeName = 'System.Collections.Generic.LinkedList$1';
	ss.initGenericClass($System_Collections_Generic_LinkedList$1, $asm, 1);
	global.System.Collections.Generic.LinkedList$1 = $System_Collections_Generic_LinkedList$1;
	////////////////////////////////////////////////////////////////////////////////
	// System.Collections.Generic.LinkedList.Enumerator
	var $System_Collections_Generic_LinkedList$1$Enumerator = function(T) {
		var $type = function(parent) {
			this.$list = null;
			this.$current = null;
			this.$index = 0;
			this.$version = 0;
			this.$list = parent;
			this.$current = null;
			this.$index = -1;
			this.$version = parent.$version;
		};
		ss.registerGenericClassInstance($type, $System_Collections_Generic_LinkedList$1$Enumerator, [T], {
			current: function() {
				if (ss.isNullOrUndefined(this.$list)) {
					throw new $System_ObjectDisposedException(null);
				}
				if (ss.isNullOrUndefined(this.$current)) {
					throw new ss.InvalidOperationException();
				}
				return this.$current.get_value();
			},
			moveNext: function() {
				if (ss.isNullOrUndefined(this.$list)) {
					throw new $System_ObjectDisposedException(null);
				}
				if (this.$version !== this.$list.$version) {
					throw new ss.InvalidOperationException('list modified');
				}
				if (ss.isNullOrUndefined(this.$current)) {
					this.$current = this.$list.$first;
				}
				else {
					this.$current = this.$current.$forward;
					if (ss.referenceEquals(this.$current, this.$list.$first)) {
						this.$current = null;
					}
				}
				if (ss.isNullOrUndefined(this.$current)) {
					this.$index = -1;
					return false;
				}
				++this.$index;
				return true;
			},
			dispose: function() {
				if (ss.isNullOrUndefined(this.$list)) {
					throw new $System_ObjectDisposedException(null);
				}
				this.$current = null;
				this.$list = null;
			},
			reset: function() {
				if (ss.isNullOrUndefined(this.$list)) {
					throw new $System_ObjectDisposedException(null);
				}
				if (this.$version !== this.$list.$version) {
					throw new ss.InvalidOperationException('list modified');
				}
				this.$current = null;
				this.$index = -1;
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IDisposable, ss.IEnumerator, ss.IEnumerator];
		});
		$type.$versionKey = 'version';
		$type.$indexKey = 'index';
		$type.$listKey = 'list';
		return $type;
	};
	$System_Collections_Generic_LinkedList$1$Enumerator.__typeName = 'System.Collections.Generic.LinkedList$1$Enumerator';
	ss.initGenericClass($System_Collections_Generic_LinkedList$1$Enumerator, $asm, 1);
	global.System.Collections.Generic.LinkedList$1$Enumerator = $System_Collections_Generic_LinkedList$1$Enumerator;
	////////////////////////////////////////////////////////////////////////////////
	// System.Collections.Generic.LinkedListNode
	var $System_Collections_Generic_LinkedListNode$1 = function(T) {
		var $type = function(value) {
			this.$item = ss.getDefaultValue(T);
			this.$container = null;
			this.$forward = null;
			this.$back = null;
			this.$item = value;
		};
		$type.$ctor1 = function(list, value) {
			this.$item = ss.getDefaultValue(T);
			this.$container = null;
			this.$forward = null;
			this.$back = null;
			this.$container = list;
			this.$item = value;
			this.$back = this.$forward = this;
		};
		$type.$ctor2 = function(list, value, previousNode, nextNode) {
			this.$item = ss.getDefaultValue(T);
			this.$container = null;
			this.$forward = null;
			this.$back = null;
			this.$container = list;
			this.$item = value;
			this.$back = previousNode;
			this.$forward = nextNode;
			previousNode.$forward = this;
			nextNode.$back = this;
		};
		ss.registerGenericClassInstance($type, $System_Collections_Generic_LinkedListNode$1, [T], {
			$detach: function() {
				this.$back.$forward = this.$forward;
				this.$forward.$back = this.$back;
				this.$forward = this.$back = null;
				this.$container = null;
			},
			$selfReference: function(list) {
				this.$forward = this;
				this.$back = this;
				this.$container = list;
			},
			$insertBetween: function(previousNode, nextNode, list) {
				previousNode.$forward = this;
				nextNode.$back = this;
				this.$forward = nextNode;
				this.$back = previousNode;
				this.$container = list;
			},
			get_list: function() {
				return this.$container;
			},
			get_next: function() {
				return ((ss.isValue(this.$container) && !ss.referenceEquals(this.$forward, this.$container.$first)) ? this.$forward : null);
			},
			get_previous: function() {
				return ((ss.isValue(this.$container) && !ss.referenceEquals(this, this.$container.$first)) ? this.$back : null);
			},
			get_value: function() {
				return this.$item;
			},
			set_value: function(value) {
				this.$item = value;
			}
		}, function() {
			return null;
		}, function() {
			return [];
		});
		$type.$ctor1.prototype = $type.$ctor2.prototype = $type.prototype;
		return $type;
	};
	$System_Collections_Generic_LinkedListNode$1.__typeName = 'System.Collections.Generic.LinkedListNode$1';
	ss.initGenericClass($System_Collections_Generic_LinkedListNode$1, $asm, 1);
	global.System.Collections.Generic.LinkedListNode$1 = $System_Collections_Generic_LinkedListNode$1;
	////////////////////////////////////////////////////////////////////////////////
	// System.IO.NullStream
	var $System_IO_$NullStream = function() {
		$System_IO_Stream.call(this);
	};
	$System_IO_$NullStream.__typeName = 'System.IO.$NullStream';
	////////////////////////////////////////////////////////////////////////////////
	// System.IO.BinaryReader
	var $System_IO_BinaryReader = function(stream) {
		this.$stream = null;
		this.$buffer = null;
		this.$leaveOpen = false;
		this.$disposed = false;
		if (ss.isNullOrUndefined(stream)) {
			throw new ss.ArgumentNullException('Input is a null reference.');
		}
		this.$stream = stream;
		this.$buffer = new $Franca_BinaryData.$ctor5(32);
	};
	$System_IO_BinaryReader.__typeName = 'System.IO.BinaryReader';
	$System_IO_BinaryReader.$ctor1 = function(stream, encoding) {
		$System_IO_BinaryReader.call(this, stream);
	};
	$System_IO_BinaryReader.$ctor2 = function(stream, encoding, leaveOpen) {
		$System_IO_BinaryReader.call(this, stream);
		this.$leaveOpen = leaveOpen;
	};
	global.System.IO.BinaryReader = $System_IO_BinaryReader;
	////////////////////////////////////////////////////////////////////////////////
	// System.IO.BinaryWriter
	var $System_IO_BinaryWriter = function() {
		$System_IO_BinaryWriter.$ctor2.call(this, $System_IO_Stream.null$1, null);
		// Encoding.UTF8UnmarkedUnsafe) {
	};
	$System_IO_BinaryWriter.__typeName = 'System.IO.BinaryWriter';
	$System_IO_BinaryWriter.$ctor1 = function(stream) {
		this.outStream = null;
		this.$leaveOpen = false;
		this.$disposed = false;
		this.$buffer = null;
		this.$stringBuffer = null;
		this.$maxCharsPerRound = 0;
		if (ss.isNullOrUndefined(stream)) {
			throw new ss.ArgumentNullException('output');
		}
		if (!stream.get_canWrite()) {
			throw new ss.ArgumentException('Stream does not support writing or already closed.');
		}
		this.outStream = stream;
		this.$buffer = new $Franca_BinaryData.$ctor5(16);
	};
	$System_IO_BinaryWriter.$ctor2 = function(stream, encoding) {
		$System_IO_BinaryWriter.$ctor1.call(this, stream);
	};
	$System_IO_BinaryWriter.$ctor3 = function(stream, encoding, leaveOpen) {
		$System_IO_BinaryWriter.$ctor1.call(this, stream);
		this.$leaveOpen = leaveOpen;
	};
	global.System.IO.BinaryWriter = $System_IO_BinaryWriter;
	////////////////////////////////////////////////////////////////////////////////
	// System.IO.EndOfStreamException
	var $System_IO_EndOfStreamException = function() {
		$System_IO_IOException.$ctor1.call(this, 'Attempted to read past the end of the stream.');
	};
	$System_IO_EndOfStreamException.__typeName = 'System.IO.EndOfStreamException';
	$System_IO_EndOfStreamException.$ctor1 = function(message) {
		$System_IO_IOException.$ctor1.call(this, message);
	};
	$System_IO_EndOfStreamException.$ctor2 = function(message, innerException) {
		$System_IO_IOException.$ctor2.call(this, message, innerException);
	};
	global.System.IO.EndOfStreamException = $System_IO_EndOfStreamException;
	////////////////////////////////////////////////////////////////////////////////
	// System.IO.InvalidDataException
	var $System_IO_InvalidDataException = function() {
		$System_SystemException.$ctor1.call(this, 'Found invalid data while decoding.');
	};
	$System_IO_InvalidDataException.__typeName = 'System.IO.InvalidDataException';
	$System_IO_InvalidDataException.$ctor1 = function(message) {
		$System_SystemException.$ctor1.call(this, message);
	};
	$System_IO_InvalidDataException.$ctor2 = function(message, innerException) {
		$System_SystemException.$ctor2.call(this, message, innerException);
	};
	global.System.IO.InvalidDataException = $System_IO_InvalidDataException;
	////////////////////////////////////////////////////////////////////////////////
	// System.IO.IOException
	var $System_IO_IOException = function() {
		$System_SystemException.$ctor1.call(this, 'I/O Error');
	};
	$System_IO_IOException.__typeName = 'System.IO.IOException';
	$System_IO_IOException.$ctor1 = function(message) {
		$System_SystemException.$ctor1.call(this, message);
	};
	$System_IO_IOException.$ctor2 = function(message, innerException) {
		$System_SystemException.$ctor2.call(this, message, innerException);
	};
	$System_IO_IOException.$ctor3 = function(message, hresult) {
		$System_SystemException.$ctor1.call(this, message);
		this.set_hResult(hresult);
	};
	global.System.IO.IOException = $System_IO_IOException;
	////////////////////////////////////////////////////////////////////////////////
	// System.IO.MemoryStream
	var $System_IO_MemoryStream = function() {
		$System_IO_MemoryStream.$ctor2.call(this, 0);
	};
	$System_IO_MemoryStream.__typeName = 'System.IO.MemoryStream';
	$System_IO_MemoryStream.$ctor2 = function(capacity) {
		this.$canWrite = false;
		this.$allowGetBuffer = false;
		this.$capacity = 0;
		this.length = 0;
		this.internalBuffer = null;
		this.initialIndex = 0;
		this.$expandable = false;
		this.$streamClosed = false;
		this.$position = 0;
		this.$dirty_bytes = 0;
		$System_IO_Stream.call(this);
		if (capacity < 0) {
			throw new ss.ArgumentOutOfRangeException('capacity');
		}
		this.$canWrite = true;
		this.$capacity = capacity;
		this.internalBuffer = new $Franca_BinaryData.$ctor5(capacity);
		this.$expandable = true;
		this.$allowGetBuffer = true;
	};
	$System_IO_MemoryStream.$ctor1 = function(buffer) {
		this.$canWrite = false;
		this.$allowGetBuffer = false;
		this.$capacity = 0;
		this.length = 0;
		this.internalBuffer = null;
		this.initialIndex = 0;
		this.$expandable = false;
		this.$streamClosed = false;
		this.$position = 0;
		this.$dirty_bytes = 0;
		$System_IO_Stream.call(this);
		if (ss.isNullOrUndefined(buffer)) {
			throw new ss.ArgumentNullException('buffer');
		}
		this.$internalConstructor(buffer, 0, buffer.length, true, false);
	};
	$System_IO_MemoryStream.$ctor3 = function(buffer, writable) {
		this.$canWrite = false;
		this.$allowGetBuffer = false;
		this.$capacity = 0;
		this.length = 0;
		this.internalBuffer = null;
		this.initialIndex = 0;
		this.$expandable = false;
		this.$streamClosed = false;
		this.$position = 0;
		this.$dirty_bytes = 0;
		$System_IO_Stream.call(this);
		if (ss.isNullOrUndefined(buffer)) {
			throw new ss.ArgumentNullException('buffer');
		}
		this.$internalConstructor(buffer, 0, buffer.length, writable, false);
	};
	$System_IO_MemoryStream.$ctor4 = function(buffer, index, count) {
		this.$canWrite = false;
		this.$allowGetBuffer = false;
		this.$capacity = 0;
		this.length = 0;
		this.internalBuffer = null;
		this.initialIndex = 0;
		this.$expandable = false;
		this.$streamClosed = false;
		this.$position = 0;
		this.$dirty_bytes = 0;
		$System_IO_Stream.call(this);
		this.$internalConstructor(buffer, index, count, true, false);
	};
	$System_IO_MemoryStream.$ctor5 = function(buffer, index, count, writable) {
		this.$canWrite = false;
		this.$allowGetBuffer = false;
		this.$capacity = 0;
		this.length = 0;
		this.internalBuffer = null;
		this.initialIndex = 0;
		this.$expandable = false;
		this.$streamClosed = false;
		this.$position = 0;
		this.$dirty_bytes = 0;
		$System_IO_Stream.call(this);
		this.$internalConstructor(buffer, index, count, writable, false);
	};
	$System_IO_MemoryStream.$ctor6 = function(buffer, index, count, writable, publiclyVisible) {
		this.$canWrite = false;
		this.$allowGetBuffer = false;
		this.$capacity = 0;
		this.length = 0;
		this.internalBuffer = null;
		this.initialIndex = 0;
		this.$expandable = false;
		this.$streamClosed = false;
		this.$position = 0;
		this.$dirty_bytes = 0;
		$System_IO_Stream.call(this);
		this.$internalConstructor(buffer, index, count, writable, publiclyVisible);
	};
	global.System.IO.MemoryStream = $System_IO_MemoryStream;
	////////////////////////////////////////////////////////////////////////////////
	// System.IO.SeekOrigin
	var $System_IO_SeekOrigin = function() {
	};
	$System_IO_SeekOrigin.__typeName = 'System.IO.SeekOrigin';
	global.System.IO.SeekOrigin = $System_IO_SeekOrigin;
	////////////////////////////////////////////////////////////////////////////////
	// System.IO.Stream
	var $System_IO_Stream = function() {
	};
	$System_IO_Stream.__typeName = 'System.IO.Stream';
	global.System.IO.Stream = $System_IO_Stream;
	////////////////////////////////////////////////////////////////////////////////
	// System.Linq.LinqExtensions
	var $System_Linq_LinqExtensions = function() {
	};
	$System_Linq_LinqExtensions.__typeName = 'System.Linq.LinqExtensions';
	$System_Linq_LinqExtensions.findIndex = function(T) {
		return function(items, predicate) {
			if (ss.isNullOrUndefined(items)) {
				throw new ss.ArgumentNullException('items');
			}
			if (ss.staticEquals(predicate, null)) {
				throw new ss.ArgumentNullException('predicate');
			}
			var retVal = 0;
			var $t1 = ss.getEnumerator(items);
			try {
				while ($t1.moveNext()) {
					var item = $t1.current();
					if (predicate(item)) {
						return retVal;
					}
					retVal++;
				}
			}
			finally {
				$t1.dispose();
			}
			return -1;
		};
	};
	$System_Linq_LinqExtensions.indexOf = function(T) {
		return function(items, item) {
			return $System_Linq_LinqExtensions.findIndex(T).call(null, items, function(i) {
				return ss.EqualityComparer.def.areEqual(item, i);
			});
		};
	};
	global.System.Linq.LinqExtensions = $System_Linq_LinqExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// System.Reflection.ParameterInfo
	var $System_Reflection_ParameterInfo = function(pType) {
		this.name = null;
		this.parameterType = null;
		this.parameterType = pType;
	};
	$System_Reflection_ParameterInfo.__typeName = 'System.Reflection.ParameterInfo';
	global.System.Reflection.ParameterInfo = $System_Reflection_ParameterInfo;
	////////////////////////////////////////////////////////////////////////////////
	// System.Reflection.ReflectionExtensions
	var $System_Reflection_ReflectionExtensions = function() {
	};
	$System_Reflection_ReflectionExtensions.__typeName = 'System.Reflection.ReflectionExtensions';
	$System_Reflection_ReflectionExtensions.definedTypes = function(a) {
		return new ss.IteratorBlockEnumerable(function() {
			return (function(a) {
				var $result, $state = 0, $t1, $t2, t;
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								$t1 = ss.getAssemblyTypes(a);
								$t2 = 0;
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								if (!($t2 < $t1.length)) {
									$state = -1;
									break $sm1;
								}
								t = $t1[$t2];
								$result = t;
								$state = 2;
								return true;
							}
							case 2: {
								$state = -1;
								$t2++;
								$state = 1;
								continue $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, null, this);
			}).call(this, a);
		}, this);
	};
	$System_Reflection_ReflectionExtensions.getParameters = function(m) {
		return Enumerable.from(m.params).select(function(t) {
			return new $System_Reflection_ParameterInfo(t);
		}).toArray();
	};
	$System_Reflection_ReflectionExtensions.getIndexParameters = function(p) {
		return Enumerable.from(p.params || []).select(function(t) {
			return new $System_Reflection_ParameterInfo(t);
		}).toArray();
	};
	$System_Reflection_ReflectionExtensions.getCustomAttributes$2 = function(T) {
		return function(m) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(m) {
					var $result, $state = 0, attrs, $t1, attr, cAttr;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									attrs = (m.attr || []).filter(function(a) {
										return ss.isInstanceOfType(a, T);
									});
									$t1 = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!($t1 < attrs.length)) {
										$state = -1;
										break $sm1;
									}
									attr = attrs[$t1];
									cAttr = ss.safeCast(attr, T);
									if (ss.isValue(cAttr)) {
										$result = cAttr;
										$state = 2;
										return true;
									}
									$state = 2;
									continue $sm1;
								}
								case 2: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, m);
			}, this);
		};
	};
	$System_Reflection_ReflectionExtensions.getCustomAttributes$6 = function(T) {
		return function(m, inherit) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(m, inherit) {
					var $result, $state = 0, attrs, $t1, attr, cAttr;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									attrs = (m.attr || []).filter(function(a) {
										return ss.isInstanceOfType(a, T);
									});
									$t1 = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!($t1 < attrs.length)) {
										$state = -1;
										break $sm1;
									}
									attr = attrs[$t1];
									cAttr = ss.safeCast(attr, T);
									if (ss.isValue(cAttr)) {
										$result = cAttr;
										$state = 2;
										return true;
									}
									$state = 2;
									continue $sm1;
								}
								case 2: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, m, inherit);
			}, this);
		};
	};
	$System_Reflection_ReflectionExtensions.getCustomAttributes = function(T) {
		return function(m) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(m) {
					var $result, $state = 0, attrs, $t1, attr, cAttr;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									attrs = (m.attr || []).filter(function(a) {
										return ss.isInstanceOfType(a, T);
									});
									$t1 = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!($t1 < attrs.length)) {
										$state = -1;
										break $sm1;
									}
									attr = attrs[$t1];
									cAttr = ss.safeCast(attr, T);
									if (ss.isValue(cAttr)) {
										$result = cAttr;
										$state = 2;
										return true;
									}
									$state = 2;
									continue $sm1;
								}
								case 2: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, m);
			}, this);
		};
	};
	$System_Reflection_ReflectionExtensions.getCustomAttributes$4 = function(T) {
		return function(m, inherit) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(m, inherit) {
					var $result, $state = 0, attrs, $t1, attr, cAttr;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									attrs = (m.attr || []).filter(function(a) {
										return ss.isInstanceOfType(a, T);
									});
									$t1 = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!($t1 < attrs.length)) {
										$state = -1;
										break $sm1;
									}
									attr = attrs[$t1];
									cAttr = ss.safeCast(attr, T);
									if (ss.isValue(cAttr)) {
										$result = cAttr;
										$state = 2;
										return true;
									}
									$state = 2;
									continue $sm1;
								}
								case 2: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, m, inherit);
			}, this);
		};
	};
	$System_Reflection_ReflectionExtensions.getCustomAttributes$1 = function(T) {
		return function(m) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(m) {
					var $result, $state = 0, attrs, $t1, attr, cAttr;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									attrs = (m.attr || []).filter(function(a) {
										return ss.isInstanceOfType(a, T);
									});
									$t1 = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!($t1 < attrs.length)) {
										$state = -1;
										break $sm1;
									}
									attr = attrs[$t1];
									cAttr = ss.safeCast(attr, T);
									if (ss.isValue(cAttr)) {
										$result = cAttr;
										$state = 2;
										return true;
									}
									$state = 2;
									continue $sm1;
								}
								case 2: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, m);
			}, this);
		};
	};
	$System_Reflection_ReflectionExtensions.getCustomAttributes$5 = function(T) {
		return function(m, inherit) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(m, inherit) {
					var $result, $state = 0, attrs, $t1, attr, cAttr;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									attrs = (m.attr || []).filter(function(a) {
										return ss.isInstanceOfType(a, T);
									});
									$t1 = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!($t1 < attrs.length)) {
										$state = -1;
										break $sm1;
									}
									attr = attrs[$t1];
									cAttr = ss.safeCast(attr, T);
									if (ss.isValue(cAttr)) {
										$result = cAttr;
										$state = 2;
										return true;
									}
									$state = 2;
									continue $sm1;
								}
								case 2: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, m, inherit);
			}, this);
		};
	};
	$System_Reflection_ReflectionExtensions.getCustomAttributes$3 = function(T) {
		return function(m) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(m) {
					var $result, $state = 0, attrs, $t1, attr, cAttr;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									attrs = (m.attr || []).filter(function(a) {
										return ss.isInstanceOfType(a, T);
									});
									$t1 = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!($t1 < attrs.length)) {
										$state = -1;
										break $sm1;
									}
									attr = attrs[$t1];
									cAttr = ss.safeCast(attr, T);
									if (ss.isValue(cAttr)) {
										$result = cAttr;
										$state = 2;
										return true;
									}
									$state = 2;
									continue $sm1;
								}
								case 2: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, m);
			}, this);
		};
	};
	$System_Reflection_ReflectionExtensions.getCustomAttributes$7 = function(T) {
		return function(m, inherit) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(m, inherit) {
					var $result, $state = 0, attrs, $t1, attr, cAttr;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									attrs = (m.attr || []).filter(function(a) {
										return ss.isInstanceOfType(a, T);
									});
									$t1 = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!($t1 < attrs.length)) {
										$state = -1;
										break $sm1;
									}
									attr = attrs[$t1];
									cAttr = ss.safeCast(attr, T);
									if (ss.isValue(cAttr)) {
										$result = cAttr;
										$state = 2;
										return true;
									}
									$state = 2;
									continue $sm1;
								}
								case 2: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, m, inherit);
			}, this);
		};
	};
	$System_Reflection_ReflectionExtensions.getCustomAttributes$8 = function(T) {
		return function(m, inherit) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(m, inherit) {
					var $result, $state = 0, attrs, $t1, attr, cAttr;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									attrs = ss.getAttributes(m, T, inherit);
									$t1 = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!($t1 < attrs.length)) {
										$state = -1;
										break $sm1;
									}
									attr = attrs[$t1];
									cAttr = ss.safeCast(attr, T);
									if (ss.isValue(cAttr)) {
										$result = cAttr;
										$state = 2;
										return true;
									}
									$state = 2;
									continue $sm1;
								}
								case 2: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, m, inherit);
			}, this);
		};
	};
	$System_Reflection_ReflectionExtensions.getCustomAttribute = function(T) {
		return function(m, inherit) {
			var attrs = Enumerable.from(ss.getAttributes(m, T, inherit)).where(function(a) {
				return ss.isInstanceOfType(a, T);
			});
			if (attrs.count() > 1) {
				throw new $Franca_TypeReflectionException.$ctor1('Ambiguous attribute of type ' + ss.getTypeName(T));
			}
			var $t1 = attrs.getEnumerator();
			try {
				while ($t1.moveNext()) {
					var attr = $t1.current();
					var cAttr = ss.safeCast(attr, T);
					if (ss.isValue(cAttr)) {
						return cAttr;
					}
				}
			}
			finally {
				$t1.dispose();
			}
			return null;
		};
	};
	$System_Reflection_ReflectionExtensions.getConstructors = function(t, binding) {
		return ss.getMembers(t, 1, 28);
	};
	$System_Reflection_ReflectionExtensions.invoke = function(m, target, arguments1) {
		var method = ss.safeCast(m, ss.isValue(m) && m.type === 8);
		if (ss.isValue(method)) {
			return ss.midel(method, target).apply(null, arguments1);
		}
		throw new ss.NotImplementedException('Cannot call Invoke on non-MethodInfo type MethodBase');
	};
	$System_Reflection_ReflectionExtensions.getIndexParameterTypes = function(p) {
		return p.params || [];
	};
	$System_Reflection_ReflectionExtensions.getParameterTypes = function(p) {
		return p.params;
	};
	$System_Reflection_ReflectionExtensions.isIndexer = function(prop) {
		return $System_Reflection_ReflectionExtensions.getIndexParameterTypes(prop).length > 0;
	};
	$System_Reflection_ReflectionExtensions.getIndexer = function(type) {
		var $t1 = ss.getMembers(type, 16, 28);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var propInfo = $t1[$t2];
			var indexTypes = $System_Reflection_ReflectionExtensions.getIndexParameterTypes(propInfo);
			if (indexTypes.length > 0) {
				return propInfo;
			}
		}
		return null;
	};
	$System_Reflection_ReflectionExtensions.getIndexer$1 = function(type, argumentType) {
		var $t1 = ss.getMembers(type, 16, 28);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var propInfo = $t1[$t2];
			var indexTypes = $System_Reflection_ReflectionExtensions.getIndexParameterTypes(propInfo);
			if (indexTypes.length === 1 && ss.referenceEquals(indexTypes[0], argumentType)) {
				return propInfo;
			}
		}
		return null;
	};
	$System_Reflection_ReflectionExtensions.hasDefaultConstructor = function(type) {
		return ss.isValue(ss.getMembers(type, 1, 284, null, []));
	};
	$System_Reflection_ReflectionExtensions.getInstanceProperty = function(type, name, ignoreCase) {
		var flags = 20;
		return $System_Reflection_ReflectionExtensions.getProperty(type, name, flags, ignoreCase);
	};
	$System_Reflection_ReflectionExtensions.getInstanceMethod = function(type, name, ignoreCase) {
		var flags = 20;
		return $System_Reflection_ReflectionExtensions.getMethod$1(type, name, flags, ignoreCase);
	};
	$System_Reflection_ReflectionExtensions.getMethod = function(type, name, ignoreCase) {
		var $t1 = FrancaGlobals.getMembersIgnoreCase(ignoreCase, type, 8, 284, name, null);
		return ss.safeCast($t1, ss.isValue($t1) && $t1.type === 8);
	};
	$System_Reflection_ReflectionExtensions.getMethod$1 = function(type, name, bindingAttr, ignoreCase) {
		if (ignoreCase) {
			name = $System_StringExtensions.toLowerInvariant(name);
		}
		var get = function() {
			return ss.safeCast(FrancaGlobals.getMembersIgnoreCase(ignoreCase, type, 8, bindingAttr, name, null), Array);
		};
		var $t1 = get();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var method = $t1[$t2];
			if ((ignoreCase ? ss.referenceEquals($System_StringExtensions.toLowerInvariant(method.name), name) : (ss.referenceEquals(method.name, name) && ss.referenceEquals(method.typeDef, type)))) {
				return method;
			}
		}
		return null;
	};
	$System_Reflection_ReflectionExtensions.getProperty = function(type, name, bindingAttr, ignoreCase) {
		if (ignoreCase) {
			name = $System_StringExtensions.toLowerInvariant(name);
		}
		var get = function() {
			return ss.safeCast(FrancaGlobals.getMembersIgnoreCase(ignoreCase, type, 16, bindingAttr, name, null), Array);
		};
		var $t1 = get();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var prop = $t1[$t2];
			if ((ignoreCase ? ss.referenceEquals($System_StringExtensions.toLowerInvariant(prop.name), name) : (ss.referenceEquals(prop.name, name) && ss.referenceEquals(prop.typeDef, type)))) {
				return prop;
			}
		}
		return null;
	};
	$System_Reflection_ReflectionExtensions.isGenericDictionary = function(type) {
		if (ss.getGenericParameterCount(type) !== 2) {
			return false;
		}
		var $t1 = ss.getInterfaces(type);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var i = $t1[$t2];
			if (ss.getTypeFullName(i) === 'ss.IDictionary') {
				return true;
			}
		}
		return false;
	};
	$System_Reflection_ReflectionExtensions.isGenericList = function(type) {
		if (ss.getGenericParameterCount(type) !== 1) {
			return false;
		}
		var $t1 = ss.getInterfaces(type);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var i = $t1[$t2];
			if (ss.getTypeFullName(i) === 'ss.IList') {
				return true;
			}
		}
		return false;
	};
	global.System.Reflection.ReflectionExtensions = $System_Reflection_ReflectionExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// System.Runtime.InteropServices.Marshal
	var $System_Runtime_InteropServices_Marshal = function() {
	};
	$System_Runtime_InteropServices_Marshal.__typeName = 'System.Runtime.InteropServices.Marshal';
	global.System.Runtime.InteropServices.Marshal = $System_Runtime_InteropServices_Marshal;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.BinType
	var $UniPrep_BinType = function() {
	};
	$UniPrep_BinType.__typeName = 'UniPrep.BinType';
	global.UniPrep.BinType = $UniPrep_BinType;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.BlockChunk
	var $UniPrep_BlockChunk = function() {
		this.chunks = null;
		$UniPrep_Chunk.call(this);
		this.chunks = [];
	};
	$UniPrep_BlockChunk.__typeName = 'UniPrep.BlockChunk';
	global.UniPrep.BlockChunk = $UniPrep_BlockChunk;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.Chunk
	var $UniPrep_Chunk = function() {
	};
	$UniPrep_Chunk.__typeName = 'UniPrep.Chunk';
	global.UniPrep.Chunk = $UniPrep_Chunk;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.CommentChunk
	var $UniPrep_CommentChunk = function() {
		this.comment = null;
		$UniPrep_Chunk.call(this);
	};
	$UniPrep_CommentChunk.__typeName = 'UniPrep.CommentChunk';
	global.UniPrep.CommentChunk = $UniPrep_CommentChunk;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.CompileArgs
	var $UniPrep_CompileArgs = function() {
		this.defines = null;
		this.macros = null;
		this.keepLines = false;
		this.prefix = null;
		this.disableIf = false;
		this.disableInclude = false;
		this.disableDefine = false;
		this.disableComment = false;
		this.disableTool = false;
		this.files = null;
		this.currentFile = -1;
		this.currentLine = null;
		this.$1$OnBeginIncludeField = null;
		this.$1$OnEndIncludeField = null;
		this.onResolveInclude = null;
		this.onMakeRelative = null;
		var $t1 = [];
		$t1.push($UniPrep_DelimiterPair.op_Implicit(34));
		$t1.push(new $UniPrep_DelimiterPair.$ctor1(60, 62));
		this.allowedIncludeDelimiters = $t1;
		this.defaultFileResolver = null;
		this.defaultFileRelativizer = null;
		this.defines = [];
		this.macros = new (ss.makeGenericType(ss.Dictionary$2, [String, $UniPrep_MacroParser]))();
		this.files = [];
		this.currentLine = new Array();
		this.setDefaultFileResolver();
	};
	$UniPrep_CompileArgs.__typeName = 'UniPrep.CompileArgs';
	$UniPrep_CompileArgs.$ctor1 = function(defines) {
		this.defines = null;
		this.macros = null;
		this.keepLines = false;
		this.prefix = null;
		this.disableIf = false;
		this.disableInclude = false;
		this.disableDefine = false;
		this.disableComment = false;
		this.disableTool = false;
		this.files = null;
		this.currentFile = -1;
		this.currentLine = null;
		this.$1$OnBeginIncludeField = null;
		this.$1$OnEndIncludeField = null;
		this.onResolveInclude = null;
		this.onMakeRelative = null;
		var $t1 = [];
		$t1.push($UniPrep_DelimiterPair.op_Implicit(34));
		$t1.push(new $UniPrep_DelimiterPair.$ctor1(60, 62));
		this.allowedIncludeDelimiters = $t1;
		this.defaultFileResolver = null;
		this.defaultFileRelativizer = null;
		this.defines = [];
		this.macros = new (ss.makeGenericType(ss.Dictionary$2, [String, $UniPrep_MacroParser]))();
		if (ss.isValue(defines)) {
			for (var $t1 = 0; $t1 < defines.length; $t1++) {
				var def = defines[$t1];
				var tokens = def.split(String.fromCharCode(61));
				if (tokens.length <= 1) {
					var macro = new $UniPrep_MacroParser(def);
					macro.parse(false);
					if (macro.isDefine) {
						if (!ss.contains(this.defines, macro.symbol)) {
							this.defines.push(macro.symbol);
						}
					}
					else {
						this.macros.set_item(macro.symbol, macro);
					}
				}
				else {
					var macro1 = new $UniPrep_MacroParser(tokens.join(' '));
					macro1.parse($UniPrep_StringExtensions.isNullOrWhiteSpace(tokens[1]));
					if (macro1.isDefine) {
						if (!ss.contains(this.defines, macro1.symbol)) {
							this.defines.push(macro1.symbol);
						}
					}
					else {
						this.macros.set_item(macro1.symbol, macro1);
					}
				}
			}
		}
		this.files = [];
		this.currentLine = new Array();
		this.setDefaultFileResolver();
	};
	global.UniPrep.CompileArgs = $UniPrep_CompileArgs;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.DefineChunk
	var $UniPrep_DefineChunk = function(type) {
		this.expression = null;
		this.macro = null;
		this.type = 0;
		$UniPrep_Chunk.call(this);
		this.type = type;
	};
	$UniPrep_DefineChunk.__typeName = 'UniPrep.DefineChunk';
	global.UniPrep.DefineChunk = $UniPrep_DefineChunk;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.DelimiterPair
	var $UniPrep_DelimiterPair = function() {
		this.left = 0;
		this.right = 0;
	};
	$UniPrep_DelimiterPair.__typeName = 'UniPrep.DelimiterPair';
	$UniPrep_DelimiterPair.$ctor1 = function(left, right) {
		this.left = 0;
		this.right = 0;
		this.left = left;
		this.right = right;
	};
	$UniPrep_DelimiterPair.getDefaultValue = function() {
		return new $UniPrep_DelimiterPair();
	};
	$UniPrep_DelimiterPair.op_Implicit = function(c) {
		return new $UniPrep_DelimiterPair.$ctor1(c, c);
	};
	global.UniPrep.DelimiterPair = $UniPrep_DelimiterPair;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.DirectiveType
	var $UniPrep_DirectiveType = function() {
	};
	$UniPrep_DirectiveType.__typeName = 'UniPrep.DirectiveType';
	global.UniPrep.DirectiveType = $UniPrep_DirectiveType;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.IfChunk
	var $UniPrep_IfChunk = function(type) {
		this.ifCondition = null;
		this.ifBlock = null;
		this.elseBlock = null;
		this.type = 0;
		this.tokenIndex = 0;
		this.tokens = null;
		$UniPrep_Chunk.call(this);
		this.type = type;
	};
	$UniPrep_IfChunk.__typeName = 'UniPrep.IfChunk';
	global.UniPrep.IfChunk = $UniPrep_IfChunk;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.IncludeChunk
	var $UniPrep_IncludeChunk = function(preprocess) {
		this.preprocess = false;
		this.source = null;
		this.line = 0;
		this.$delimitersRemoved = false;
		$UniPrep_Chunk.call(this);
		this.preprocess = preprocess;
	};
	$UniPrep_IncludeChunk.__typeName = 'UniPrep.IncludeChunk';
	global.UniPrep.IncludeChunk = $UniPrep_IncludeChunk;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.Lexer
	var $UniPrep_Lexer = function(source, prefix) {
		this.lines = null;
		this.tokens = null;
		this.prefix = null;
		this.prefix = prefix;
		this.lines = ss.netSplit(source, ['\r\n', '\n'], null, 0);
	};
	$UniPrep_Lexer.__typeName = 'UniPrep.Lexer';
	global.UniPrep.Lexer = $UniPrep_Lexer;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.LineChunk
	var $UniPrep_LineChunk = function() {
		this.value = null;
		this.final$1 = null;
		$UniPrep_Chunk.call(this);
	};
	$UniPrep_LineChunk.__typeName = 'UniPrep.LineChunk';
	global.UniPrep.LineChunk = $UniPrep_LineChunk;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.MacroParser
	var $UniPrep_MacroParser = function(source) {
		this.source = null;
		this.$lexIndex = 0;
		this.$tokens = null;
		this.$tokenIndex = 0;
		this.symbol = null;
		this.$arguments = null;
		this.$expressionStart = 0;
		this.$regex = null;
		this.$macroValue = null;
		this.isFunc = false;
		this.isDefine = false;
		this.source = source;
	};
	$UniPrep_MacroParser.__typeName = 'UniPrep.MacroParser';
	global.UniPrep.MacroParser = $UniPrep_MacroParser;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.MacroParser.MacroToken
	var $UniPrep_MacroParser$MacroToken = function(value, identifier, index) {
		this.isIdentifier = false;
		this.value = null;
		this.index = 0;
		this.value = value;
		this.isIdentifier = identifier;
		this.index = index;
	};
	$UniPrep_MacroParser$MacroToken.__typeName = 'UniPrep.MacroParser$MacroToken';
	global.UniPrep.MacroParser$MacroToken = $UniPrep_MacroParser$MacroToken;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.ObjectExtensions
	var $UniPrep_ObjectExtensions = function() {
	};
	$UniPrep_ObjectExtensions.__typeName = 'UniPrep.ObjectExtensions';
	$UniPrep_ObjectExtensions.toStringInvariant$1 = function(obj) {
		return $System_ObjectExtensions.toStringInvariant(obj);
	};
	$UniPrep_ObjectExtensions.toStringInvariant = function(c) {
		return $System_CharExtensions.toStringInvariant(c);
	};
	global.UniPrep.ObjectExtensions = $UniPrep_ObjectExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.OpBinary
	var $UniPrep_OpBinary = function(lhs, rhs, type) {
		this.lhs = null;
		this.rhs = null;
		this.type = 0;
		$UniPrep_Operator.call(this);
		this.lhs = lhs;
		this.rhs = rhs;
		this.type = type;
	};
	$UniPrep_OpBinary.__typeName = 'UniPrep.OpBinary';
	global.UniPrep.OpBinary = $UniPrep_OpBinary;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.Operator
	var $UniPrep_Operator = function() {
	};
	$UniPrep_Operator.__typeName = 'UniPrep.Operator';
	global.UniPrep.Operator = $UniPrep_Operator;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.OpGroup
	var $UniPrep_OpGroup = function(op) {
		this.op = null;
		$UniPrep_Operator.call(this);
		this.op = op;
	};
	$UniPrep_OpGroup.__typeName = 'UniPrep.OpGroup';
	global.UniPrep.OpGroup = $UniPrep_OpGroup;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.OpName
	var $UniPrep_OpName = function(name) {
		this.name = null;
		$UniPrep_Operator.call(this);
		this.name = name;
	};
	$UniPrep_OpName.__typeName = 'UniPrep.OpName';
	global.UniPrep.OpName = $UniPrep_OpName;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.OpNegate
	var $UniPrep_OpNegate = function(op) {
		this.op = null;
		$UniPrep_Operator.call(this);
		this.op = op;
	};
	$UniPrep_OpNegate.__typeName = 'UniPrep.OpNegate';
	global.UniPrep.OpNegate = $UniPrep_OpNegate;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.Parser
	var $UniPrep_Parser = function(tokens) {
		this.macros = null;
		this.tokens = null;
		this.index = 0;
		this.tokens = tokens;
	};
	$UniPrep_Parser.__typeName = 'UniPrep.Parser';
	global.UniPrep.Parser = $UniPrep_Parser;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.Preprocessor
	var $UniPrep_Preprocessor = function() {
	};
	$UniPrep_Preprocessor.__typeName = 'UniPrep.Preprocessor';
	$UniPrep_Preprocessor.preprocessString = function(source, args) {
		var lexer = new $UniPrep_Lexer(source, args.prefix);
		lexer.lex(args);
		var parser = new $UniPrep_Parser(lexer.tokens);
		var chunk = parser.parse();
		//Console.WriteLine(chunk.ToString());
		var str = new ss.StringBuilder();
		chunk.compile(str, args);
		return str.toString();
	};
	global.UniPrep.Preprocessor = $UniPrep_Preprocessor;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.StringExtensions
	var $UniPrep_StringExtensions = function() {
	};
	$UniPrep_StringExtensions.__typeName = 'UniPrep.StringExtensions';
	$UniPrep_StringExtensions.isNullOrWhiteSpace = function(str) {
		return $System_StringExtensions.isNullOrEmpty(str, true);
	};
	global.UniPrep.StringExtensions = $UniPrep_StringExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.Token
	var $UniPrep_Token = function(type, value, lineNumber) {
		this.value = null;
		this.type = 0;
		this.line = 0;
		this.type = type;
		this.value = value;
		this.line = lineNumber;
	};
	$UniPrep_Token.__typeName = 'UniPrep.Token';
	global.UniPrep.Token = $UniPrep_Token;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.ToolChunk
	var $UniPrep_ToolChunk = function() {
		$UniPrep_Chunk.call(this);
		throw new ss.NotImplementedException('Tool directives not available in JS');
	};
	$UniPrep_ToolChunk.__typeName = 'UniPrep.ToolChunk';
	global.UniPrep.ToolChunk = $UniPrep_ToolChunk;
	////////////////////////////////////////////////////////////////////////////////
	// UniPrep.UndefChunk
	var $UniPrep_UndefChunk = function() {
		this.name = null;
		$UniPrep_Chunk.call(this);
	};
	$UniPrep_UndefChunk.__typeName = 'UniPrep.UndefChunk';
	global.UniPrep.UndefChunk = $UniPrep_UndefChunk;
	ss.initClass($Coroutines_Coroutine, $asm, {
		get_status: function() {
			return this.status;
		},
		getArgs$1: null,
		getArgs: null,
		wait: null,
		wait$1: null,
		reset: null,
		get_returnValue: null,
		get_exception: null,
		_Resume: null,
		dispose: function() {
			this.dispose$1(true);
			$System_GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		}
	}, null, [ss.IDisposable]);
	ss.initClass($Coroutines_CoroutineException, $asm, {}, ss.Exception);
	$Coroutines_CoroutineException.$ctor1.prototype = $Coroutines_CoroutineException.$ctor2.prototype = $Coroutines_CoroutineException.prototype;
	ss.initClass($Coroutines_CoroutinePool, $asm, {
		add_onError: function(value) {
			this.$1$OnErrorField = ss.delegateCombine(this.$1$OnErrorField, value);
		},
		remove_onError: function(value) {
			this.$1$OnErrorField = ss.delegateRemove(this.$1$OnErrorField, value);
		},
		add_onEnd: function(value) {
			this.$1$OnEndField = ss.delegateCombine(this.$1$OnEndField, value);
		},
		remove_onEnd: function(value) {
			this.$1$OnEndField = ss.delegateRemove(this.$1$OnEndField, value);
		},
		add: function(co) {
			if (ss.isNullOrUndefined(co)) {
				throw new ss.ArgumentNullException('co', 'Coroutine added to CoroutinePool must not be null');
			}
			if (this.$iterating) {
				if (!ss.contains(this.$addList, co)) {
					this.$addList.push(co);
				}
				if (ss.contains(this.$remList, co)) {
					ss.remove(this.$remList, co);
				}
			}
			else {
				this.$coroutines.add(co);
			}
		},
		remove: function(co) {
			if (ss.isNullOrUndefined(co)) {
				return;
			}
			if (this.$iterating) {
				if (ss.contains(this.$addList, co)) {
					ss.remove(this.$addList, co);
				}
				if (!ss.contains(this.$remList, co)) {
					this.$remList.push(co);
				}
			}
			else {
				this.$coroutines.remove(co);
				co.dispose();
			}
		},
		resumeAll: function() {
			if (this.$iterating) {
				throw new $Coroutines_CoroutineException.$ctor1('Cannot call ResumeAll on CoroutinePool recursively');
			}
			ss.clear(this.$deadList);
			ss.clear(this.$addList);
			ss.clear(this.$remList);
			this.$iterating = true;
			var $t1 = this.$coroutines.getEnumerator();
			try {
				while ($t1.moveNext()) {
					var co = $t1.current();
					if (!$Coroutines_Coroutine.resume(co, null)) {
						if (ss.isValue(co.get_exception())) {
							var onError = this.$1$OnErrorField;
							if (!ss.staticEquals(onError, null)) {
								onError(co);
							}
						}
						var onEnd = this.$1$OnEndField;
						if (!ss.staticEquals(onEnd, null)) {
							onEnd(co);
						}
						// if user resets the coroutine in an event don't remove it
						if (co.get_status() === 3) {
							this.$deadList.push(co);
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
			this.$iterating = false;
			for (var i = 0; i < this.$deadList.length; i++) {
				var co1 = this.$deadList[i];
				if (!ss.contains(this.$addList, co1)) {
					this.$coroutines.remove(co1);
					co1.dispose();
				}
			}
			for (var i1 = 0; i1 < this.$remList.length; i1++) {
				this.$coroutines.remove(this.$remList[i1]);
			}
			for (var i2 = 0; i2 < this.$addList.length; i2++) {
				this.$coroutines.remove(this.$addList[i2]);
			}
		},
		getEnumerator: function() {
			return this.$coroutines.getEnumerator();
		},
		clear: function() {
			var $t1 = this.$coroutines.getEnumerator();
			try {
				while ($t1.moveNext()) {
					var co = $t1.current();
					co.dispose();
				}
			}
			finally {
				$t1.dispose();
			}
			this.$coroutines.clear();
		},
		dispose: function() {
			this.dispose$1(true);
			$System_GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				this.clear();
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_isEmpty: function() {
			return this.$coroutines.get_count() === 0;
		}
	}, null, [ss.IEnumerable, ss.IEnumerable, ss.IDisposable]);
	ss.initEnum($Coroutines_CoStatus, $asm, { suspended: 0, waiting: 1, running: 2, dead: 3 });
	ss.initEnum($Coroutines_CoWaitType, $asm, { none: 0, time: 1, until: 2, while$1: 3 });
	ss.initInterface($Franca_$IPlatformProvider, $asm, { $getPlatformType: null, $getOS: null, get_$pathSeparator: null, $openUrl: null, $isPathRooted: null, $getFullPath: null, $getAppContentPath: null });
	ss.initClass($Franca_$JSPlatform, $asm, {
		$getPlatformType: function() {
			var browser = FrancaGlobals.getBrowserString();
			switch ($System_StringExtensions.toLowerInvariant(browser).split(String.fromCharCode(32))[0]) {
				case 'ie':
				case 'internetexplorer': {
					return 2;
				}
				case 'firefox': {
					return 1;
				}
				case 'chrome': {
					return 3;
				}
				case 'safari': {
					return 4;
				}
				case 'opera': {
					return 5;
				}
				default: {
					return 6;
				}
			}
		},
		get_$pathSeparator: function() {
			return this.$pathSeparator;
		},
		$getOS: function() {
			var os = $System_StringExtensions.toLowerInvariant(ss.coalesce(navigator.oscpu, ''));
			if (os.indexOf('windows') !== -1) {
				return 'Windows';
			}
			if (os.indexOf('mac os x') !== -1) {
				return 'Mac OS X';
			}
			if (os.indexOf('linux') !== -1) {
				return 'Linux';
			}
			var agent = $System_StringExtensions.toLowerInvariant(ss.coalesce(navigator.userAgent || navigator.vendor || window.opera, ''));
			if (agent.indexOf('windows phone') !== -1) {
				return 'Windows Phone';
			}
			if (agent.indexOf('android') !== -1) {
				return 'Android';
			}
			if (agent.indexOf('ipad') !== -1 || agent.indexOf('ipad') !== -1 || agent.indexOf('ipad') !== -1 && !!window.MSStream) {
				return 'iOS';
			}
			return 'Unknown OS';
		},
		$openUrl: function(url, throwOnError) {
			return ss.isValue(window.open(url));
		},
		$isPathRooted: function(path) {
			if (ss.isNullOrUndefined(path) || path.length === 0) {
				return false;
			}
			path = $Franca_Platform.normalizePath(path, null);
			var c = path.charCodeAt(0);
			var sep = this.$pathSeparator.charCodeAt(0);
			if (c === sep) {
				return true;
			}
			return this.$protocolRegex.exec(path).success;
		},
		$getFullPath: function(path) {
			this.$anchor.href = path;
			return this.$anchor.href;
		},
		$getAppContentPath: function() {
			return this.$getFullPath('');
		}
	}, null, [$Franca_$IPlatformProvider]);
	ss.initClass($Franca_$StringHelper$CaseInsensitiveStringComparer, $asm, {
		areEqual: function(x, y) {
			return ss.compareStrings(x, y, true) === 0;
		},
		getObjectHashCode: function(obj) {
			return ss.getHashCode($System_StringExtensions.toLowerInvariant(obj));
		},
		$equals: function(x, y) {
			var xs = ss.safeCast(x, String);
			var ys = ss.safeCast(y, String);
			if (ss.isNullOrUndefined(xs) || ss.isNullOrUndefined(ys)) {
				return ss.isNullOrUndefined(xs) && ss.isNullOrUndefined(ys);
			}
			return this.areEqual(xs, ys);
		},
		$getHashCode: function(obj) {
			if (ss.isInstanceOfType(obj, String)) {
				return this.getObjectHashCode(ss.cast(obj, String));
			}
			return ss.getHashCode($System_StringExtensions.toLowerInvariant($System_ObjectExtensions.toStringInvariant(obj)));
		}
	}, null, [ss.IEqualityComparer, ss.IEqualityComparer]);
	ss.initClass($Franca_Benchmark, $asm, {});
	ss.initInterface($Franca_IFileResult, $asm, {});
	ss.initInterface($Franca_IMappable, $asm, { toJson: null });
	ss.initInterface($Franca_IBinaryDataJS, $asm, { get_uint8Array: null, toBlob: null, toUrl: null });
	ss.initInterface($Franca_Serialization_Streaming_IJsonStreamWriter, $asm, { writeJson: null });
	ss.initClass($Franca_BinaryData, $asm, {
		$copyFrom: function(data) {
			this.$dataEndian = data.$dataEndian;
			this.$littleEndian = data.$littleEndian;
			this.length = data.length;
			this.$location = data.$location;
			this.$_CopyFrom(data);
		},
		fromJson: function(json) {
			if (json.get_isArray()) {
				// we probably shouldn't get here but just in case...
				if (json.get_isUInt8Array()) {
					return $Franca_Collections_ByteArray.op_Explicit$1(ss.cast(json.value, $Franca_Collections_ByteArray));
				}
				else {
					var count = json.get_count();
					var binary = new $Franca_BinaryData.$ctor5(count);
					for (var i = 0; i < count; i++) {
						binary.set_item(i, $Franca_JsonValue.op_Implicit$2(json.get_item$1(i)));
					}
					return binary;
				}
			}
			else if (json.get_isObject()) {
				// backwards compatibility
				return $Franca_Text_Base64.decode($Franca_JsonValue.op_Implicit$k(json.get_item('binary')));
			}
			else {
				return $Franca_Text_Base64.decode($Franca_JsonValue.op_Implicit$k(json));
			}
		},
		toJson: function() {
			//var json = new JObject();
			//json["binary"] = Base64.Encode(this);
			//return json;
			return new $Franca_JsonValue.$ctork($Franca_Text_Base64.encode(this));
		},
		seek: function(offset) {
			this.$location += offset;
			this.validateOffset();
		},
		seek$1: function(offset, origin) {
			switch (origin) {
				case 0: {
					this.$location = offset;
					break;
				}
				case 2: {
					this.$location = this.length - offset;
					break;
				}
				case 1:
				default: {
					this.$location += offset;
					break;
				}
			}
			this.validateOffset();
		},
		validateOffset: function() {
			if (this.$location < 0) {
				throw new $Franca_SeekException.$ctor1('Seeked past start of data, location: ' + this.$location + '.');
			}
			if (this.$location > this.length) {
				throw new $Franca_SeekException.$ctor1('Seeked past end of data, location: ' + this.$location + ', length: ' + this.length);
			}
		},
		slice: function(location, length) {
			if (location + length < 0 || location + length > this.length) {
				throw new ss.ArgumentOutOfRangeException();
			}
			return this.$copyBytes(location, length);
		},
		writeData: function(data) {
			this.writeData$5(this.$location, data, 0, data.length);
			this.seek(data.get_length());
		},
		writeData$1: function(data, srcIndex) {
			var length = data.length - srcIndex;
			this.writeData$5(this.$location, data, srcIndex, length);
			this.seek(length);
		},
		writeData$3: function(data, srcIndex, length) {
			this.writeData$5(this.$location, data, srcIndex, length);
			this.seek(length);
		},
		writeData$2: function(location, data) {
			this.writeData$5(location, data, 0, data.length);
		},
		writeData$4: function(location, data, srcIndex) {
			this.writeData$5(location, data, srcIndex, data.length - srcIndex);
		},
		readBool$1: function(location) {
			return this.get_item(location) !== 0;
		},
		readBool: function() {
			var ret = this.readBool$1(this.$location);
			this.seek(1);
			return ret;
		},
		readByte$1: function(location) {
			var ret = this.get_item(location);
			return ret;
		},
		readByte: function() {
			var ret = this.readByte$1(this.$location);
			this.seek(1);
			return ret;
		},
		readSByte: function() {
			var ret = this.readSByte$1(this.$location);
			this.seek(1);
			return ret;
		},
		readInt16: function() {
			var ret = this.readInt16$2(this.$location);
			this.seek(2);
			return ret;
		},
		readUInt16: function() {
			var ret = this.readUInt16$2(this.$location);
			this.seek(2);
			return ret;
		},
		readInt32: function() {
			var ret = this.readInt32$2(this.$location);
			this.seek(4);
			return ret;
		},
		readUInt32: function() {
			var ret = this.readUInt32$2(this.$location);
			this.seek(4);
			return ret;
		},
		readSingle: function() {
			var ret = this.readSingle$2(this.$location);
			this.seek(4);
			return ret;
		},
		readDouble: function() {
			var ret = this.readDouble$2(this.$location);
			this.seek(8);
			return ret;
		},
		readInt16$1: function(endian) {
			var ret = this.readInt16$3(this.$location, endian);
			this.seek(2);
			return ret;
		},
		readUInt16$1: function(endian) {
			var ret = this.readUInt16$3(this.$location, endian);
			this.seek(2);
			return ret;
		},
		readInt32$1: function(endian) {
			var ret = this.readInt32$3(this.$location, endian);
			this.seek(4);
			return ret;
		},
		readUInt32$1: function(endian) {
			var ret = this.readUInt32$3(this.$location, endian);
			this.seek(4);
			return ret;
		},
		readSingle$1: function(endian) {
			var ret = this.readSingle$3(this.$location, endian);
			this.seek(4);
			return ret;
		},
		readDouble$1: function(endian) {
			var ret = this.readDouble$3(this.$location, endian);
			this.seek(8);
			return ret;
		},
		writeBool$1: function(value, location) {
			this.set_item(location, (value ? 1 : 0));
		},
		writeBool: function(value) {
			this.writeBool$1(value, this.$location);
			this.seek(1);
		},
		writeByte$1: function(value, location) {
			this.set_item(location, value);
		},
		writeByte: function(value) {
			this.writeByte$1(value, this.$location);
			this.seek(1);
		},
		writeSByte: function(value) {
			this.writeSByte$1(value, this.$location);
			this.seek(1);
		},
		writeInt16: function(value) {
			this.writeInt16$2(value, this.$location);
			this.seek(2);
		},
		writeUInt16: function(value) {
			this.writeUInt16$2(value, this.$location);
			this.seek(2);
		},
		writeInt32: function(value) {
			this.writeInt32$2(value, this.$location);
			this.seek(4);
		},
		writeUInt32: function(value) {
			this.writeUInt32$2(value, this.$location);
			this.seek(4);
		},
		writeSingle: function(value) {
			this.writeSingle$2(value, this.$location);
			this.seek(4);
		},
		writeDouble: function(value) {
			this.writeDouble$2(value, this.$location);
			this.seek(8);
		},
		writeInt16$1: function(value, endian) {
			this.writeInt16$3(value, this.$location, endian);
			this.seek(2);
		},
		writeUInt16$1: function(value, endian) {
			this.writeUInt16$3(value, this.$location, endian);
			this.seek(2);
		},
		writeInt32$1: function(value, endian) {
			this.writeInt32$3(value, this.$location, endian);
			this.seek(4);
		},
		writeUInt32$1: function(value, endian) {
			this.writeUInt32$3(value, this.$location, endian);
			this.seek(4);
		},
		writeSingle$1: function(value, endian) {
			this.writeSingle$3(value, this.$location, endian);
			this.seek(4);
		},
		writeDouble$1: function(value, endian) {
			this.writeDouble$3(value, this.$location, endian);
			this.seek(8);
		},
		$getLittleEndian: function(endian) {
			switch (endian) {
				case 0: {
					return true;
				}
				case 1: {
					return false;
				}
				case 2:
				default: {
					return $Franca_BinConverter.get_isLittleEndian();
				}
			}
		},
		toString: function() {
			return this.toString$1(0, true, true, true);
		},
		toString$1: function(format, partial, includeClassName, enclose) {
			return this.toString$2(format, 0, this.length, partial, includeClassName, enclose);
		},
		toString$2: function(format, startIndex, byteCount, partial, includeClassName, enclose) {
			var str = new ss.StringBuilder();
			if (includeClassName) {
				str.append(ss.getTypeName(ss.getInstanceType(this)) + ' ');
			}
			if (enclose) {
				switch (format) {
					default:
					case 0: {
						str.append('[');
						break;
					}
					case 1:
					case 2: {
						str.append('"');
						break;
					}
				}
			}
			var end = Math.min(this.length, startIndex + byteCount);
			if (end - startIndex > 16 && partial) {
				this.$buildString(str, format, startIndex, 8);
				switch (format) {
					default:
					case 0: {
						str.append(', ..., ');
						break;
					}
					case 1:
					case 2: {
						str.append('...');
						break;
					}
				}
				this.$buildString(str, format, end - 8, 8);
			}
			else {
				this.$buildString(str, format, startIndex, byteCount);
			}
			if (enclose) {
				switch (format) {
					default:
					case 0: {
						str.append(']');
						break;
					}
					case 1:
					case 2: {
						str.append('"');
						break;
					}
				}
			}
			return str.toString();
		},
		$buildString: function(str, format, start, length) {
			var end = start + length;
			if (format === 0) {
				for (var i = start; i < end; i++) {
					if (i > start) {
						str.append(', ');
					}
					str.append(this.get_item(i));
				}
			}
			else if (format === 1 || format === 2) {
				var lowerCase = format === 2;
				for (var i1 = start; i1 < end; i1++) {
					$Franca_ByteExtensions.toHex$1(this.get_item(i1), str, lowerCase);
				}
			}
		},
		get_endian: function() {
			return this.$dataEndian;
		},
		set_endian: function(value) {
			if (value === 0) {
				this.$littleEndian = true;
				this.$dataEndian = 0;
			}
			else if (value === 1) {
				this.$littleEndian = false;
				this.$dataEndian = 1;
			}
			else {
				this.$littleEndian = $Franca_BinConverter.get_isLittleEndian();
				if (this.$littleEndian) {
					this.$dataEndian = 0;
				}
				else {
					this.$dataEndian = 1;
				}
			}
		},
		get_location: function() {
			return this.$location;
		},
		set_location: function(value) {
			this.$location = value;
		},
		get_length: function() {
			return this.length;
		},
		set_length: function(value) {
			this.length = value;
		},
		get_item: function(index) {
			return this.$buffer[index];
		},
		set_item: function(index, value) {
			this.$buffer[index] = value;
		},
		$_CopyFrom: function(data) {
			this.$buffer = data.$buffer;
			this.$_view = data.$_view;
		},
		$initBuffer: function() {
			return new Uint8Array(this.length);
		},
		writeData$5: function(location, data, srcIndex, length) {
			if (location + length > this.length) {
				throw new ss.ArgumentOutOfRangeException('Overflow writing data to destination buffer: required length was ' + (location + length) + ' but actual length was only ' + this.length);
			}
			else if (srcIndex + length > data.$buffer.length) {
				throw new ss.ArgumentOutOfRangeException('Overflow writing data from source buffer: required length was ' + (srcIndex + length) + ' but actual length was only ' + data.$buffer.length);
			}
			this.$buffer.set(new Uint8Array(data.$buffer.buffer, srcIndex, length), location);
		},
		$copyBytes: function(location, length) {
			return new $Franca_BinaryData.$ctor_fromArrayBuffer(this.$buffer.buffer.slice(location, location + length));
		},
		readSByte$1: function(location) {
			return this.get_view().getInt8(location);
		},
		readInt16$2: function(location) {
			return this.get_view().getInt16(location, this.$littleEndian);
		},
		readUInt16$2: function(location) {
			return this.get_view().getUint16(location, this.$littleEndian);
		},
		readInt32$2: function(location) {
			return this.get_view().getInt32(location, this.$littleEndian);
		},
		readUInt32$2: function(location) {
			return this.get_view().getUint32(location, this.$littleEndian);
		},
		readSingle$2: function(location) {
			return this.get_view().getFloat32(location, this.$littleEndian);
		},
		readDouble$2: function(location) {
			return this.get_view().getFloat64(location, this.$littleEndian);
		},
		readInt16$3: function(location, endian) {
			return this.get_view().getInt16(location, this.$getLittleEndian(endian));
		},
		readUInt16$3: function(location, endian) {
			return this.get_view().getUint16(location, this.$getLittleEndian(endian));
		},
		readInt32$3: function(location, endian) {
			return this.get_view().getInt32(location, this.$getLittleEndian(endian));
		},
		readUInt32$3: function(location, endian) {
			return this.get_view().getUint32(location, this.$getLittleEndian(endian));
		},
		readSingle$3: function(location, endian) {
			return this.get_view().getFloat32(location, this.$getLittleEndian(endian));
		},
		readDouble$3: function(location, endian) {
			return this.get_view().getFloat64(location, this.$getLittleEndian(endian));
		},
		writeSByte$1: function(value, location) {
			this.get_view().setInt8(location, value);
		},
		writeInt16$2: function(value, location) {
			this.get_view().setInt16(location, value, this.$littleEndian);
		},
		writeUInt16$2: function(value, location) {
			// TODO: create own binding for this to avoid the ulong cast
			this.get_view().setUint16(location, value, this.$littleEndian);
		},
		writeInt32$2: function(value, location) {
			this.get_view().setInt32(location, value, this.$littleEndian);
		},
		writeUInt32$2: function(value, location) {
			// TODO: create own binding for this to avoid the ulong cast
			this.get_view().setUint32(location, value, this.$littleEndian);
		},
		writeSingle$2: function(value, location) {
			this.get_view().setFloat32(location, value, this.$littleEndian);
		},
		writeDouble$2: function(value, location) {
			this.get_view().setFloat64(location, value, this.$littleEndian);
		},
		writeInt16$3: function(value, location, endian) {
			this.get_view().setInt16(location, value, this.$getLittleEndian(endian));
		},
		writeUInt16$3: function(value, location, endian) {
			// TODO: create own binding for this to avoid the ulong cast
			this.get_view().setUint16(location, value, this.$getLittleEndian(endian));
		},
		writeInt32$3: function(value, location, endian) {
			this.get_view().setInt32(location, value, this.$getLittleEndian(endian));
		},
		writeUInt32$3: function(value, location, endian) {
			// TODO: create own binding for this to avoid the ulong cast
			this.get_view().setUint32(location, value, this.$getLittleEndian(endian));
		},
		writeSingle$3: function(value, location, endian) {
			this.get_view().setFloat32(location, value, this.$getLittleEndian(endian));
		},
		writeDouble$3: function(value, location, endian) {
			this.get_view().setFloat64(location, value, this.$getLittleEndian(endian));
		},
		get_view: function() {
			if (ss.isValue(this.$_view)) {
				return this.$_view;
			}
			this.$_view = new DataView(this.$buffer.buffer);
			return this.$_view;
		},
		get_$uint8Array: function() {
			return this.$buffer;
		},
		get_uint8Array: function() {
			return this.$buffer;
		},
		toBlob: function(mimeType) {
			var blobData = [this.$buffer];
			var blobProps = { type: mimeType };
			return new Blob(blobData, blobProps);
		},
		toUrl: function(mimeType) {
			return URL.createObjectURL(this.toBlob(mimeType));
		},
		writeJson: function(writer) {
			writer.writeBinary(this, null, false, 0, -1);
		}
	}, null, [$Franca_IFileResult, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_BinaryData]), $Franca_IBinaryDataJS, $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_BinaryData.$ctor1.prototype = $Franca_BinaryData.$ctor_fromArrayBuffer.prototype = $Franca_BinaryData.$ctor4.prototype = $Franca_BinaryData.$ctor5.prototype = $Franca_BinaryData.$ctor3.prototype = $Franca_BinaryData.$ctor6.prototype = $Franca_BinaryData.$ctor2.prototype = $Franca_BinaryData.prototype;
	ss.initInterface($Franca_JS_IBaseStream, $asm, { flush: null, close: null });
	ss.initClass($System_IO_Stream, $asm, {
		get_canRead: null,
		get_canSeek: null,
		get_canWrite: null,
		get_canTimeout: function() {
			return false;
		},
		get_length: null,
		get_position: null,
		set_position: null,
		dispose: function() {
			this.close();
		},
		dispose$1: function(disposing) {
			// nothing.
		},
		close: function() {
			this.dispose$1(true);
			$System_GC.suppressFinalize(this);
		},
		get_readTimeout: function() {
			throw new ss.InvalidOperationException('Timeouts are not supported on this stream.');
		},
		set_readTimeout: function(value) {
			throw new ss.InvalidOperationException('Timeouts are not supported on this stream.');
		},
		get_writeTimeout: function() {
			throw new ss.InvalidOperationException('Timeouts are not supported on this stream.');
		},
		set_writeTimeout: function(value) {
			throw new ss.InvalidOperationException('Timeouts are not supported on this stream.');
		},
		flush: null,
		read: null,
		$_Read: function(buffer, offset, count) {
			var bytes = new Array(count);
			var bytesRead = this.read(bytes, 0, count);
			$Franca_BinaryData.blockCopy$2(bytes, 0, buffer, offset, bytesRead);
			return bytesRead;
		},
		readByte: function() {
			var buffer = new Array(1);
			if (this.read(buffer, 0, 1) === 1) {
				return buffer[0];
			}
			return -1;
		},
		seek: null,
		setLength: null,
		write: null,
		$_Write: function(data, offset, count) {
			var bytes = new Array(count);
			$Franca_BinaryData.blockCopy$1(data, offset, bytes, 0, count);
			this.write(bytes, 0, count);
		},
		writeByte: function(value) {
			var buffer = new Array(1);
			buffer[0] = value & 255;
			this.write(buffer, 0, 1);
		},
		copyTo: function(destination) {
			this.copyTo$1(destination, 16384);
		},
		copyTo$1: function(destination, bufferSize) {
			if (ss.isNullOrUndefined(destination)) {
				throw new ss.ArgumentNullException('destination');
			}
			if (!this.get_canRead()) {
				throw new ss.NotSupportedException('This stream does not support reading');
			}
			if (!destination.get_canWrite()) {
				throw new ss.NotSupportedException('This destination stream does not support writing');
			}
			if (bufferSize <= 0) {
				throw new ss.ArgumentOutOfRangeException('bufferSize');
			}
			var buffer = new Array(bufferSize);
			var nread;
			while ((nread = this.read(buffer, 0, bufferSize)) !== 0) {
				destination.write(buffer, 0, nread);
			}
		},
		objectInvariant: function() {
		}
	}, null, [ss.IDisposable, $Franca_JS_IBaseStream]);
	ss.initInterface($Franca_IBinaryStream, $asm, { toBinary: null, readBinary: null, writeBinary: null, seekTo: null, getBuffer: null, get_location: null, get_sizeBytes: null }, [ss.IDisposable, $Franca_JS_IBaseStream]);
	ss.initInterface($Franca_JS_IBinaryStreamJS, $asm, { get_internalBuffer: null });
	ss.initClass($System_IO_MemoryStream, $asm, {
		$internalConstructor: function(buffer, index, count, writable, publicallyVisible) {
			if (ss.isNullOrUndefined(buffer)) {
				throw new ss.ArgumentNullException('buffer');
			}
			if (index < 0 || count < 0) {
				throw new ss.ArgumentOutOfRangeException('index or count is less than 0.');
			}
			if (buffer.length - index < count) {
				throw new ss.ArgumentException('index+count', 'The size of the buffer is less than index + count.');
			}
			this.$canWrite = writable;
			this.internalBuffer = new $Franca_BinaryData.$ctor3(buffer);
			this.$capacity = count + index;
			this.length = this.$capacity;
			this.$position = index;
			this.initialIndex = index;
			this.$allowGetBuffer = publicallyVisible;
			this.$expandable = false;
		},
		internalConstructor: function(buffer, index, count, writable, publicallyVisible) {
			if (ss.isNullOrUndefined(buffer)) {
				throw new ss.ArgumentNullException('buffer');
			}
			if (index < 0 || count < 0) {
				throw new ss.ArgumentOutOfRangeException('index or count is less than 0.');
			}
			if (buffer.get_length() - index < count) {
				throw new ss.ArgumentException('index+count', 'The size of the buffer is less than index + count.');
			}
			this.$canWrite = writable;
			this.internalBuffer = buffer;
			this.$capacity = count + index;
			this.length = this.$capacity;
			this.$position = index;
			this.initialIndex = index;
			this.$allowGetBuffer = publicallyVisible;
			this.$expandable = false;
		},
		toBinary: function() {
			var l = this.length - this.initialIndex;
			var outBuffer = new $Franca_BinaryData.$ctor5(l);
			if (ss.isValue(this.internalBuffer)) {
				$Franca_BinaryData.blockCopy(this.internalBuffer, this.initialIndex, outBuffer, 0, l);
			}
			return outBuffer;
		},
		$checkIfClosedThrowDisposed: function() {
			if (this.$streamClosed) {
				throw new $System_ObjectDisposedException('MemoryStream');
			}
		},
		get_canRead: function() {
			return !this.$streamClosed;
		},
		get_canSeek: function() {
			return !this.$streamClosed;
		},
		get_canWrite: function() {
			return !this.$streamClosed && this.$canWrite;
		},
		get_capacity: function() {
			this.$checkIfClosedThrowDisposed();
			return this.$capacity - this.initialIndex;
		},
		set_capacity: function(value) {
			this.$checkIfClosedThrowDisposed();
			if (value === this.$capacity) {
				return;
			}
			// LAMENESS: see MemoryStreamTest.ConstructorFive
			if (!this.$expandable) {
				throw new ss.NotSupportedException('Cannot expand this MemoryStream');
			}
			if (value < 0 || value < this.length) {
				throw new ss.ArgumentOutOfRangeException('value', 'New capacity cannot be negative or less than the current capacity ' + value + ' ' + this.$capacity);
			}
			if (value === this.internalBuffer.get_length()) {
				return;
			}
			var newBuffer = null;
			if (value !== 0) {
				newBuffer = new $Franca_BinaryData.$ctor5(value);
				$Franca_BinaryData.blockCopy(this.internalBuffer, 0, newBuffer, 0, this.length);
			}
			this.$dirty_bytes = 0;
			// discard any dirty area beyond previous length
			this.internalBuffer = newBuffer;
			// It's null when capacity is set to 0
			this.$capacity = value;
		},
		get_length: function() {
			// LAMESPEC: The spec says to throw an IOException if the
			// stream is closed and an ObjectDisposedException if
			// "methods were called after the stream was closed".  What
			// is the difference?
			this.$checkIfClosedThrowDisposed();
			// This is ok for MemoryStreamTest.ConstructorFive
			return this.length - this.initialIndex;
		},
		get_position: function() {
			this.$checkIfClosedThrowDisposed();
			return this.$position - this.initialIndex;
		},
		set_position: function(value) {
			this.$checkIfClosedThrowDisposed();
			if (value < 0) {
				throw new ss.ArgumentOutOfRangeException('value', 'Position cannot be negative');
			}
			if (value > 2147483647) {
				throw new ss.ArgumentOutOfRangeException('value', 'Position must be non-negative and less than 2^31 - 1 - origin');
			}
			this.$position = this.initialIndex + value;
		},
		dispose$1: function(disposing) {
			this.$streamClosed = true;
			this.$expandable = false;
		},
		flush: function() {
			// Do nothing
		},
		getBuffer: function() {
			if (!this.$allowGetBuffer) {
				throw new $System_UnauthorizedAccessException.$ctor1('Unauthorized access exception');
			}
			return this.internalBuffer;
		},
		read: function(buffer, offset, count) {
			this.$checkIfClosedThrowDisposed();
			if (ss.isNullOrUndefined(buffer)) {
				throw new ss.ArgumentNullException('buffer');
			}
			if (offset < 0 || count < 0) {
				throw new ss.ArgumentOutOfRangeException('offset or count less than zero.');
			}
			if (buffer.length - offset < count) {
				throw new ss.ArgumentException('offset+count', 'The size of the buffer is less than offset + count.');
			}
			if (this.$position >= this.length || count === 0) {
				return 0;
			}
			if (this.$position > this.length - count) {
				count = this.length - this.$position;
			}
			$Franca_BinaryData.blockCopy$1(this.internalBuffer, this.$position, buffer, offset, count);
			this.$position += count;
			return count;
		},
		$_Read: function(buffer, offset, count) {
			this.$checkIfClosedThrowDisposed();
			if (ss.isNullOrUndefined(buffer)) {
				throw new ss.ArgumentNullException('buffer');
			}
			if (offset < 0 || count < 0) {
				throw new ss.ArgumentOutOfRangeException('offset or count less than zero.');
			}
			if (buffer.get_length() - offset < count) {
				throw new ss.ArgumentException('offset+count', 'The size of the buffer is less than offset + count.');
			}
			if (this.$position >= this.length || count === 0) {
				return 0;
			}
			if (this.$position > this.length - count) {
				count = this.length - this.$position;
			}
			$Franca_BinaryData.blockCopy(this.internalBuffer, this.$position, buffer, offset, count);
			this.$position += count;
			return count;
		},
		readByte: function() {
			this.$checkIfClosedThrowDisposed();
			if (this.$position >= this.length) {
				return -1;
			}
			return this.internalBuffer.get_item(this.$position++);
		},
		seek: function(offset, loc) {
			this.$checkIfClosedThrowDisposed();
			// It's funny that they don't throw this exception for < Int32.MinValue
			if (offset > 2147483647) {
				throw new ss.ArgumentOutOfRangeException('Offset out of range. ' + offset);
			}
			var refPoint;
			switch (loc) {
				case 0: {
					if (offset < 0) {
						throw new $System_IO_IOException.$ctor1('Attempted to seek before start of MemoryStream.');
					}
					refPoint = this.initialIndex;
					break;
				}
				case 1: {
					refPoint = this.$position;
					break;
				}
				case 2: {
					refPoint = this.length;
					break;
				}
				default: {
					throw new ss.ArgumentException('loc', 'Invalid SeekOrigin');
				}
			}
			// LAMESPEC: My goodness, how may LAMESPECs are there in this
			// class! :)  In the spec for the Position property it's stated
			// "The position must not be more than one byte beyond the end of the stream."
			// In the spec for seek it says "Seeking to any location beyond the length of the 
			// stream is supported."  That's a contradiction i'd say.
			// I guess seek can go anywhere but if you use position it may get moved back.
			refPoint += offset;
			if (refPoint < this.initialIndex) {
				throw new $System_IO_IOException.$ctor1('Attempted to seek before start of MemoryStream.');
			}
			this.$position = refPoint;
			return this.$position;
		},
		$calculateNewCapacity: function(minimum) {
			if (minimum < 256) {
				minimum = 256;
			}
			// See GetBufferTwo test
			if (minimum < this.$capacity * 2) {
				minimum = this.$capacity * 2;
			}
			return minimum;
		},
		$expand: function(newSize) {
			// We don't need to take into account the dirty bytes when incrementing the
			// Capacity, as changing it will only preserve the valid clear region.
			if (newSize > this.$capacity) {
				this.set_capacity(this.$calculateNewCapacity(newSize));
			}
			else if (this.$dirty_bytes > 0) {
				//Array.Clear(internalBuffer, length, dirty_bytes);
				var end = this.length + this.$dirty_bytes;
				for (var i = this.length; i < end; i++) {
					this.internalBuffer.set_item(i, 0);
				}
				this.$dirty_bytes = 0;
			}
		},
		setLength: function(value) {
			if (!this.$expandable && value > this.$capacity) {
				throw new ss.NotSupportedException('Expanding this MemoryStream is not supported');
			}
			this.$checkIfClosedThrowDisposed();
			if (!this.$canWrite) {
				throw new ss.NotSupportedException('Cannot write to this MemoryStream');
			}
			// LAMESPEC: AGAIN! It says to throw this exception if value is
			// greater than "the maximum length of the MemoryStream".  I haven't
			// seen anywhere mention what the maximum length of a MemoryStream is and
			// since we're this far this memory stream is expandable.
			if (value < 0 || value + this.initialIndex > 2147483647) {
				throw new ss.ArgumentOutOfRangeException();
			}
			var newSize = value + this.initialIndex;
			if (newSize > this.length) {
				this.$expand(newSize);
			}
			else if (newSize < this.length) {
				this.$dirty_bytes += this.length - newSize;
			}
			this.length = newSize;
			if (this.$position > this.length) {
				this.$position = this.length;
			}
		},
		toArray: function() {
			var l = this.length - this.initialIndex;
			var outBuffer = new Array(l);
			if (ss.isValue(this.internalBuffer)) {
				$Franca_BinaryData.blockCopy$1(this.internalBuffer, 0, outBuffer, 0, l);
			}
			return outBuffer;
		},
		write: function(buffer, offset, count) {
			this.$checkIfClosedThrowDisposed();
			if (!this.$canWrite) {
				throw new ss.NotSupportedException('Cannot write to this stream.');
			}
			if (ss.isNullOrUndefined(buffer)) {
				throw new ss.ArgumentNullException('buffer');
			}
			if (offset < 0 || count < 0) {
				throw new ss.ArgumentOutOfRangeException();
			}
			if (buffer.length - offset < count) {
				throw new ss.ArgumentException('offset+count', 'The size of the buffer is less than offset + count.');
			}
			// reordered to avoid possible integer overflow
			if (this.$position > this.length - count) {
				this.$expand(this.$position + count);
			}
			$Franca_BinaryData.blockCopy$2(buffer, offset, this.internalBuffer, this.$position, count);
			this.$position += count;
			if (this.$position >= this.length) {
				this.length = this.$position;
			}
		},
		$_Write: function(buffer, offset, count) {
			this.$checkIfClosedThrowDisposed();
			if (!this.$canWrite) {
				throw new ss.NotSupportedException('Cannot write to this stream.');
			}
			if (ss.isNullOrUndefined(buffer)) {
				throw new ss.ArgumentNullException('buffer');
			}
			if (offset < 0 || count < 0) {
				throw new ss.ArgumentOutOfRangeException();
			}
			if (buffer.get_length() - offset < count) {
				throw new ss.ArgumentException('offset+count', 'The size of the buffer is less than offset + count.');
			}
			// reordered to avoid possible integer overflow
			if (this.$position > this.length - count) {
				this.$expand(this.$position + count);
			}
			$Franca_BinaryData.blockCopy(buffer, offset, this.internalBuffer, this.$position, count);
			this.$position += count;
			if (this.$position >= this.length) {
				this.length = this.$position;
			}
		},
		writeByte: function(value) {
			this.$checkIfClosedThrowDisposed();
			if (!this.$canWrite) {
				throw new ss.NotSupportedException('Cannot write to this stream.');
			}
			if (this.$position >= this.length) {
				this.$expand(this.$position + 1);
				this.length = this.$position + 1;
			}
			this.internalBuffer.set_item(this.$position++, value);
		},
		writeTo: function(stream) {
			this.$checkIfClosedThrowDisposed();
			if (ss.isNullOrUndefined(stream)) {
				throw new ss.ArgumentNullException('stream');
			}
			stream.$_Write(this.internalBuffer, this.initialIndex, this.length - this.initialIndex);
		},
		get_internalBuffer: function() {
			return this.internalBuffer;
		},
		readBinary: function(buffer, offset, count) {
			return this.$_Read(buffer, offset, count);
		},
		writeBinary: function(buffer, offset, count) {
			this.$_Write(buffer, offset, count);
		},
		seekTo: function(offset, origin) {
			switch (origin) {
				default:
				case 0: {
					return this.seek(offset, 0);
				}
				case 1: {
					return this.seek(offset, 1);
				}
				case 2: {
					return this.seek(offset, 2);
				}
			}
		},
		get_location: function() {
			return this.$position;
		},
		get_sizeBytes: function() {
			return this.get_length();
		}
	}, $System_IO_Stream, [ss.IDisposable, $Franca_JS_IBaseStream, $Franca_IBinaryStream, $Franca_JS_IBinaryStreamJS]);
	$System_IO_MemoryStream.$ctor2.prototype = $System_IO_MemoryStream.$ctor1.prototype = $System_IO_MemoryStream.$ctor3.prototype = $System_IO_MemoryStream.$ctor4.prototype = $System_IO_MemoryStream.$ctor5.prototype = $System_IO_MemoryStream.$ctor6.prototype = $System_IO_MemoryStream.prototype;
	ss.initClass($Franca_BinaryStream, $asm, {
		read$1: function(buffer, offset, count) {
			return this.$_Read(buffer, offset, count);
		},
		write$1: function(buffer, offset, count) {
			this.$_Write(buffer, offset, count);
		},
		getBufferData: function() {
			return this.getBuffer();
		},
		getBuffer: function() {
			return this.getBuffer();
		}
	}, $System_IO_MemoryStream, [ss.IDisposable, $Franca_JS_IBaseStream, $Franca_IBinaryStream, $Franca_JS_IBinaryStreamJS]);
	$Franca_BinaryStream.$ctor2.prototype = $Franca_BinaryStream.$ctor1.prototype = $Franca_BinaryStream.$ctor3.prototype = $Franca_BinaryStream.$ctor4.prototype = $Franca_BinaryStream.$ctor5.prototype = $Franca_BinaryStream.$ctor6.prototype = $Franca_BinaryStream.prototype;
	ss.initEnum($Franca_BinaryTextFormat, $asm, { array: 0, hexUpperCase: 1, hexLowerCase: 2 });
	ss.initClass($Franca_BinConverter, $asm, {});
	ss.initInterface($Franca_IBinaryReader, $asm, { read: null, read$1: null, readData: null, readBool: null, readByte: null, readSByte: null, readDouble: null, readDouble$1: null, readInt16: null, readInt16$1: null, readInt32: null, readInt32$1: null, readSingle: null, readSingle$1: null, readUInt16: null, readUInt16$1: null, readUInt32: null, readUInt32$1: null, readString: null, close: null, get_defaultEndian: null, set_defaultEndian: null, skip: null, get_stream: null }, [ss.IDisposable]);
	ss.initClass($Franca_BinDataReader, $asm, {
		readString: function(allowNull) {
			var length = this.readInt32();
			if (length === -1) {
				if (allowNull) {
					return null;
				}
				else {
					throw new $Franca_InvalidFormatException.$ctor1('Binary string value was null, but null was not an allowed value.');
				}
			}
			else if (length === 0) {
				return '';
			}
			else {
				var bin = this.readData(length);
				return $Franca_Text_UTF8.fromBinaryData(bin, false);
			}
		},
		skip: function(count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataReader', 'Cannot read from a closed BinDataReader.');
			}
			if (ss.isNullOrUndefined(this.$binStream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$binStream.seekTo(count, 1);
		},
		read: function(buffer, offset, count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataReader', 'Cannot read from a closed BinDataReader.');
			}
			if (ss.isNullOrUndefined(this.$binStream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			return this.$binStream.readBinary(buffer, offset, count);
		},
		read$1: function(buffer, offset, count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataReader', 'Cannot read from a closed BinDataReader.');
			}
			if (ss.isNullOrUndefined(this.$binStream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			var tmpBuffer = new $Franca_BinaryData.$ctor5(count);
			var ret = this.$binStream.readBinary(tmpBuffer, 0, count);
			$Franca_BinaryData.blockCopy$1(tmpBuffer, 0, buffer, offset, ret);
			return ret;
		},
		readData: function(count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataReader', 'Cannot read from a closed BinDataReader.');
			}
			if (ss.isNullOrUndefined(this.$binStream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			var data = new $Franca_BinaryData.$ctor5(count);
			var totalBytes = 0;
			do {
				var n = this.read(data, totalBytes, count);
				if (n === 0) {
					break;
				}
				count -= n;
				totalBytes += n;
			} while (count > 0);
			if (totalBytes !== data.get_length()) {
				var cpy = new $Franca_BinaryData.$ctor5(totalBytes);
				$Franca_BinaryData.blockCopy(data, 0, cpy, 0, totalBytes);
				data = cpy;
			}
			return data;
		},
		$fillBuffer: function(count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataReader', 'Cannot read from a closed BinDataReader.');
			}
			if (ss.isNullOrUndefined(this.$binStream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			var pos = 0;
			while (pos < count) {
				var n = this.$binStream.readBinary(this.$buffer, pos, count - pos);
				if (n === 0) {
					throw new $System_IO_EndOfStreamException();
				}
				pos += n;
			}
		},
		readBool: function() {
			this.$fillBuffer(1);
			return this.$buffer.get_item(0) !== 0;
		},
		readByte: function() {
			this.$fillBuffer(1);
			return this.$buffer.get_item(0);
		},
		readSByte: function() {
			this.$fillBuffer(1);
			return $Franca_Cast.toSByte(this.$buffer.get_item(0));
		},
		readDouble: function() {
			this.$fillBuffer(8);
			return this.$buffer.readDouble$2(0);
		},
		readDouble$1: function(endian) {
			this.$fillBuffer(8);
			return this.$buffer.readDouble$3(0, endian);
		},
		readInt16: function() {
			this.$fillBuffer(2);
			return this.$buffer.readInt16$2(0);
		},
		readInt16$1: function(endian) {
			this.$fillBuffer(2);
			return this.$buffer.readInt16$3(0, endian);
		},
		readInt32: function() {
			this.$fillBuffer(4);
			return this.$buffer.readInt32$2(0);
		},
		readInt32$1: function(endian) {
			this.$fillBuffer(4);
			return this.$buffer.readInt32$3(0, endian);
		},
		readSingle: function() {
			this.$fillBuffer(4);
			return this.$buffer.readSingle$2(0);
		},
		readSingle$1: function(endian) {
			this.$fillBuffer(4);
			return this.$buffer.readSingle$3(0, endian);
		},
		readUInt16: function() {
			this.$fillBuffer(2);
			return this.$buffer.readUInt16$2(0);
		},
		readUInt16$1: function(endian) {
			this.$fillBuffer(2);
			return this.$buffer.readUInt16$3(0, endian);
		},
		readUInt32: function() {
			this.$fillBuffer(4);
			return this.$buffer.readUInt32$2(0);
		},
		readUInt32$1: function(endian) {
			this.$fillBuffer(4);
			return this.$buffer.readUInt32$3(0, endian);
		},
		close: function() {
			this.dispose();
		},
		dispose$1: function(disposing) {
			if (disposing) {
				var stream = ss.safeCast(this.$binStream, $System_IO_Stream);
				if (ss.isValue(stream)) {
					if (this.$leaveOpen) {
						stream.flush();
					}
					else {
						stream.close();
					}
				}
				this.$disposed = true;
			}
		},
		dispose: function() {
			this.dispose$1(true);
			//GC.SuppressFinalize(this);
		},
		get_defaultEndian: function() {
			return this.$buffer.get_endian();
		},
		set_defaultEndian: function(value) {
			this.$buffer.set_endian(value);
		},
		get_stream$1: function() {
			return this.$binStream;
		},
		get_stream: function() {
			return ss.cast(this.$binStream, $System_IO_Stream);
		}
	}, null, [ss.IDisposable, $Franca_IBinaryReader]);
	ss.initClass($Franca_BinDataStreamReader, $asm, {
		get_defaultEndian: function() {
			return this.$buffer.get_endian();
		},
		set_defaultEndian: function(value) {
			this.$buffer.set_endian(value);
		},
		get_stream: function() {
			return this.$stream;
		},
		readString: function(allowNull) {
			var length = this.readInt32();
			if (length === -1) {
				if (allowNull) {
					return null;
				}
				else {
					throw new $Franca_InvalidFormatException.$ctor1('Binary string value was null, but null was not an allowed value.');
				}
			}
			else if (length === 0) {
				return '';
			}
			else {
				var bin = this.readData(length);
				return $Franca_Text_UTF8.fromBinaryData(bin, false);
			}
		},
		close: function() {
			this.dispose();
		},
		dispose$1: function(disposing) {
			if (!this.$disposedValue) {
				if (disposing) {
					if (ss.isValue(this.$stream)) {
						if (this.$leaveOpen) {
							this.$stream.flush();
						}
						else {
							this.$stream.close();
						}
					}
				}
				// TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
				// TODO: set large fields to null.
				this.$disposedValue = true;
				this.$disposed = true;
			}
		},
		dispose: function() {
			// Do not change this code. Put cleanup code in Dispose(bool disposing) above.
			this.dispose$1(true);
			// TODO: uncomment the following line if the finalizer is overridden above.
			// GC.SuppressFinalize(this);
		},
		read: function(buffer, offset, count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamReader', 'Cannot read from a closed BinDataStreamReader.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			if (ss.isValue(this.$binStream)) {
				return this.$binStream.readBinary(buffer, offset, count);
			}
			else {
				var tmp = $Franca_BinDataStreamReader.get_$readTempBuffer();
				var bytesRead = 0;
				do {
					var bytesToRead = Math.min(tmp.length, count);
					var n = this.$stream.read(tmp, 0, bytesToRead);
					if (n === 0) {
						break;
					}
					$Franca_BinaryData.blockCopy$2(tmp, 0, buffer, offset, n);
					offset += n;
					count -= n;
					bytesRead += n;
					if (n < bytesToRead) {
						break;
					}
				} while (count > 0);
				return bytesRead;
			}
		},
		read$1: function(buffer, offset, count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamReader', 'Cannot read from a closed BinDataStreamReader.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			return this.$stream.read(buffer, offset, count);
		},
		readData: function(count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamReader', 'Cannot read from a closed BinDataStreamReader.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			var data = new $Franca_BinaryData.$ctor5(count);
			var totalBytes = 0;
			do {
				var n = this.read(data, totalBytes, count);
				if (n === 0) {
					break;
				}
				count -= n;
				totalBytes += n;
			} while (count > 0);
			if (totalBytes !== data.get_length()) {
				var cpy = new $Franca_BinaryData.$ctor5(totalBytes);
				$Franca_BinaryData.blockCopy(data, 0, cpy, 0, totalBytes);
				data = cpy;
			}
			return data;
		},
		skip: function(count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamReader', 'Cannot read from a closed BinDataStreamReader.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			if (ss.isValue(this.$binStream)) {
				this.$binStream.seekTo(count, 1);
			}
			else if (this.$stream.get_canSeek()) {
				this.$stream.seek(count, 1);
			}
			else {
				var skipped = 0;
				var tmp = $Franca_BinDataStreamReader.get_$readTempBuffer();
				while (skipped < count) {
					var n = this.$stream.read(tmp, 0, count - skipped);
					if (n === 0) {
						throw new $System_IO_EndOfStreamException();
					}
					skipped += n;
				}
			}
		},
		$fillBuffer: function(count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamReader', 'Cannot read from a closed BinDataStreamReader.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			if (ss.isValue(this.$binStream)) {
				var pos = 0;
				while (pos < count) {
					var n = this.$binStream.readBinary(this.$buffer, pos, count - pos);
					if (n === 0) {
						throw new $System_IO_EndOfStreamException();
					}
					pos += n;
				}
			}
			else {
				var pos1 = 0;
				while (pos1 < count) {
					var n1 = this.$stream.read(this.$bufferBytes, pos1, count - pos1);
					if (n1 === 0) {
						throw new $System_IO_EndOfStreamException();
					}
					pos1 += n1;
				}
				for (var i = 0; i < count; i++) {
					this.$buffer.set_item(i, this.$bufferBytes[i]);
				}
			}
		},
		readBool: function() {
			this.$fillBuffer(1);
			return this.$buffer.get_item(0) !== 0;
		},
		readByte: function() {
			this.$fillBuffer(1);
			return this.$buffer.get_item(0);
		},
		readSByte: function() {
			this.$fillBuffer(1);
			return $Franca_Cast.toSByte(this.$buffer.get_item(0));
		},
		readDouble: function() {
			this.$fillBuffer(8);
			return this.$buffer.readDouble$2(0);
		},
		readDouble$1: function(endian) {
			this.$fillBuffer(8);
			return this.$buffer.readDouble$3(0, endian);
		},
		readInt16: function() {
			this.$fillBuffer(2);
			return this.$buffer.readInt16$2(0);
		},
		readInt16$1: function(endian) {
			this.$fillBuffer(2);
			return this.$buffer.readInt16$3(0, endian);
		},
		readInt32: function() {
			this.$fillBuffer(4);
			return this.$buffer.readInt32$2(0);
		},
		readInt32$1: function(endian) {
			this.$fillBuffer(4);
			return this.$buffer.readInt32$3(0, endian);
		},
		readSingle: function() {
			this.$fillBuffer(4);
			return this.$buffer.readSingle$2(0);
		},
		readSingle$1: function(endian) {
			this.$fillBuffer(4);
			return this.$buffer.readSingle$3(0, endian);
		},
		readUInt16: function() {
			this.$fillBuffer(2);
			return this.$buffer.readUInt16$2(0);
		},
		readUInt16$1: function(endian) {
			this.$fillBuffer(2);
			return this.$buffer.readUInt16$3(0, endian);
		},
		readUInt32: function() {
			this.$fillBuffer(4);
			return this.$buffer.readUInt32$2(0);
		},
		readUInt32$1: function(endian) {
			this.$fillBuffer(4);
			return this.$buffer.readUInt32$3(0, endian);
		}
	}, null, [ss.IDisposable, $Franca_IBinaryReader]);
	$Franca_BinDataStreamReader.$ctor1.prototype = $Franca_BinDataStreamReader.prototype;
	ss.initInterface($Franca_IBinaryWriter, $asm, { write$2: null, write$3: null, write: null, write$1: null, writeBool: null, writeByte: null, writeSByte: null, writeDouble: null, writeDouble$1: null, writeInt16: null, writeInt16$1: null, writeInt32: null, writeInt32$1: null, writeSingle: null, writeSingle$1: null, writeUInt16: null, writeUInt16$1: null, writeUInt32: null, writeUInt32$1: null, writeString: null, close: null, get_defaultEndian: null, set_defaultEndian: null, get_stream: null }, [ss.IDisposable]);
	ss.initClass($Franca_BinDataStreamWriter, $asm, {
		writeString: function(value, allowNull) {
			if (ss.isNullOrUndefined(value)) {
				if (allowNull) {
					this.writeInt32(-1);
				}
				else {
					throw new ss.ArgumentNullException('value');
				}
			}
			else {
				var bin = $Franca_Text_UTF8.toBinaryData(value);
				this.writeInt32(bin.get_length());
				if (value.length > 0) {
					this.write(bin);
				}
			}
		},
		write$2: function(buffer, offset, count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(buffer, offset, count);
			}
			else {
				var tmp = $Franca_BinDataStreamWriter.get_$tempBuffer();
				while (count > 0) {
					var bytesToWrite = Math.min(tmp.length, count);
					$Franca_BinaryData.blockCopy$1(buffer, offset, tmp, 0, bytesToWrite);
					this.$stream.write(tmp, 0, bytesToWrite);
					count -= bytesToWrite;
					offset += bytesToWrite;
				}
			}
		},
		write$3: function(data, offset, count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$stream.write(data, offset, count);
		},
		write: function(data) {
			this.write$2(data, 0, data.get_length());
		},
		write$1: function(data) {
			this.write$3(data, 0, data.length);
		},
		writeBool: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$stream.writeByte((value ? 1 : 0));
		},
		writeByte: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$stream.writeByte(value);
		},
		writeSByte: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$stream.writeByte(value & 255);
		},
		writeDouble: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeDouble$2(value, 0);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 8);
			}
			else {
				for (var i = 0; i < 8; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 8);
			}
		},
		writeDouble$1: function(value, endian) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeDouble$3(value, 0, endian);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 8);
			}
			else {
				for (var i = 0; i < 8; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 8);
			}
		},
		writeInt16: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeInt16$2(value, 0);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 2);
			}
			else {
				for (var i = 0; i < 2; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 2);
			}
		},
		writeInt16$1: function(value, endian) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeInt16$3(value, 0, endian);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 2);
			}
			else {
				for (var i = 0; i < 2; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 2);
			}
		},
		writeInt32: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeInt32$2(value, 0);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 4);
			}
			else {
				for (var i = 0; i < 4; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 4);
			}
		},
		writeInt32$1: function(value, endian) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeInt32$3(value, 0, endian);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 4);
			}
			else {
				for (var i = 0; i < 4; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 4);
			}
		},
		writeSingle: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeSingle$2(value, 0);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 4);
			}
			else {
				for (var i = 0; i < 4; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 4);
			}
		},
		writeSingle$1: function(value, endian) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeSingle$3(value, 0, endian);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 4);
			}
			else {
				for (var i = 0; i < 4; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 4);
			}
		},
		writeUInt16: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeUInt16$2(value, 0);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 2);
			}
			else {
				for (var i = 0; i < 2; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 2);
			}
		},
		writeUInt16$1: function(value, endian) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeUInt16$3(value, 0, endian);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 2);
			}
			else {
				for (var i = 0; i < 2; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 2);
			}
		},
		writeUInt32: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeUInt32$2(value, 0);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 4);
			}
			else {
				for (var i = 0; i < 4; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 4);
			}
		},
		writeUInt32$1: function(value, endian) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinDataStreamWriter', 'Cannot read from a closed BinDataStreamWriter.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$buffer.writeUInt32$3(value, 0, endian);
			if (ss.isValue(this.$binStream)) {
				this.$binStream.writeBinary(this.$buffer, 0, 4);
			}
			else {
				for (var i = 0; i < 4; i++) {
					this.$bufferBytes[i] = this.$buffer.get_item(i);
				}
				this.$stream.write(this.$bufferBytes, 0, 4);
			}
		},
		close: function() {
			this.dispose();
		},
		dispose$1: function(disposing) {
			if (disposing) {
				var stream = ss.safeCast(this.$binStream, $System_IO_Stream);
				if (ss.isValue(stream)) {
					if (this.$leaveOpen) {
						stream.flush();
					}
					else {
						stream.close();
					}
				}
			}
			this.$disposed = true;
		},
		dispose: function() {
			this.dispose$1(true);
			//GC.SuppressFinalize(this);
		},
		get_defaultEndian: function() {
			return this.$buffer.get_endian();
		},
		set_defaultEndian: function(value) {
			this.$buffer.set_endian(value);
		},
		get_stream: function() {
			return this.$stream;
		}
	}, null, [ss.IDisposable, $Franca_IBinaryWriter]);
	$Franca_BinDataStreamWriter.$ctor1.prototype = $Franca_BinDataStreamWriter.prototype;
	ss.initClass($Franca_BinDataWriter, $asm, {
		writeString: function(value, allowNull) {
			if (ss.isNullOrUndefined(value)) {
				if (allowNull) {
					this.writeInt32(-1);
				}
				else {
					throw new ss.ArgumentNullException('value');
				}
			}
			else {
				var bin = $Franca_Text_UTF8.toBinaryData(value);
				this.writeInt32(bin.get_length());
				if (value.length > 0) {
					this.write(bin);
				}
			}
		},
		write$2: function(data, offset, count) {
			this.$binStream.writeBinary(data, offset, count);
		},
		write$3: function(data, offset, count) {
			this.$binStream.writeBinary(new $Franca_BinaryData.$ctor3(data), offset, count);
		},
		write: function(data) {
			this.write$2(data, 0, data.get_length());
		},
		write$1: function(data) {
			this.write$3(data, 0, data.length);
		},
		writeBool: function(value) {
			this.$buffer.set_item(0, (value ? 1 : 0));
			this.$binStream.writeBinary(this.$buffer, 0, 1);
		},
		writeByte: function(value) {
			this.$buffer.set_item(0, value);
			this.$binStream.writeBinary(this.$buffer, 0, 1);
		},
		writeSByte: function(value) {
			this.$buffer.set_item(0, value & 255);
			this.$binStream.writeBinary(this.$buffer, 0, 1);
		},
		writeDouble: function(value) {
			this.$buffer.writeDouble$2(value, 0);
			this.$binStream.writeBinary(this.$buffer, 0, 8);
		},
		writeDouble$1: function(value, endian) {
			this.$buffer.writeDouble$3(value, 0, endian);
			this.$binStream.writeBinary(this.$buffer, 0, 8);
		},
		writeInt16: function(value) {
			this.$buffer.writeInt16$2(value, 0);
			this.$binStream.writeBinary(this.$buffer, 0, 2);
		},
		writeInt16$1: function(value, endian) {
			this.$buffer.writeInt16$3(value, 0, endian);
			this.$binStream.writeBinary(this.$buffer, 0, 2);
		},
		writeInt32: function(value) {
			this.$buffer.writeInt32$2(value, 0);
			this.$binStream.writeBinary(this.$buffer, 0, 4);
		},
		writeInt32$1: function(value, endian) {
			this.$buffer.writeInt32$3(value, 0, endian);
			this.$binStream.writeBinary(this.$buffer, 0, 4);
		},
		writeSingle: function(value) {
			this.$buffer.writeSingle$2(value, 0);
			this.$binStream.writeBinary(this.$buffer, 0, 4);
		},
		writeSingle$1: function(value, endian) {
			this.$buffer.writeSingle$3(value, 0, endian);
			this.$binStream.writeBinary(this.$buffer, 0, 4);
		},
		writeUInt16: function(value) {
			this.$buffer.writeUInt16$2(value, 0);
			this.$binStream.writeBinary(this.$buffer, 0, 2);
		},
		writeUInt16$1: function(value, endian) {
			this.$buffer.writeUInt16$3(value, 0, endian);
			this.$binStream.writeBinary(this.$buffer, 0, 2);
		},
		writeUInt32: function(value) {
			this.$buffer.writeUInt32$2(value, 0);
			this.$binStream.writeBinary(this.$buffer, 0, 4);
		},
		writeUInt32$1: function(value, endian) {
			this.$buffer.writeUInt32$3(value, 0, endian);
			this.$binStream.writeBinary(this.$buffer, 0, 4);
		},
		close: function() {
			this.dispose();
		},
		dispose$1: function(disposing) {
			if (disposing) {
				var stream = ss.safeCast(this.$binStream, $System_IO_Stream);
				if (ss.isValue(stream)) {
					if (this.$leaveOpen) {
						stream.flush();
					}
					else {
						stream.close();
					}
				}
			}
		},
		dispose: function() {
			this.dispose$1(true);
			$System_GC.suppressFinalize(this);
		},
		get_defaultEndian: function() {
			return this.$buffer.get_endian();
		},
		set_defaultEndian: function(value) {
			this.$buffer.set_endian(value);
		},
		get_stream$1: function() {
			return this.$binStream;
		},
		get_stream: function() {
			return ss.cast(this.$binStream, $System_IO_Stream);
		}
	}, null, [ss.IDisposable, $Franca_IBinaryWriter]);
	ss.initClass($Franca_ByteExtensions, $asm, {});
	ss.initClass($Franca_Calc, $asm, {});
	ss.initClass($Franca_Cast, $asm, {});
	ss.initEnum($Franca_CenterOptions, $asm, { none: 0, floor: 1, ceiling: 2, round: 3, truncate: 4 });
	ss.initClass($Franca_Color, $asm, {
		toString: function() {
			return ss.formatString('[Color: R={0}, G={1}, B={2}, A={3}]', this.get_r(), this.get_g(), this.get_b(), this.get_a());
		},
		mix: function(col, amount, premultiplied) {
			return $Franca_Color.lerp(this, col, amount, false);
		},
		premultiply: function() {
			return $Franca_Color.premultiply(this);
		},
		toRGBHex: function(prefix) {
			var str = $Franca_Color.get_$hexBuilder();
			str.clear();
			$Franca_ByteExtensions.toHex$1(this.get_r(), str, false);
			$Franca_ByteExtensions.toHex$1(this.get_g(), str, false);
			$Franca_ByteExtensions.toHex$1(this.get_b(), str, false);
			return str.toString();
		},
		toRGBAHex: function(prefix) {
			var str = $Franca_Color.get_$hexBuilder();
			str.clear();
			$Franca_ByteExtensions.toHex$1(this.get_r(), str, false);
			$Franca_ByteExtensions.toHex$1(this.get_g(), str, false);
			$Franca_ByteExtensions.toHex$1(this.get_b(), str, false);
			$Franca_ByteExtensions.toHex$1(this.get_a(), str, false);
			return str.toString();
		},
		toVector3: function() {
			var hdr = $Franca_Color.op_Implicit(this);
			return new $Franca_Vector3.$ctor4(hdr.r, hdr.g, hdr.b);
		},
		toVector4: function() {
			var hdr = $Franca_Color.op_Implicit(this);
			return new $Franca_Vector4.$ctor5(hdr.r, hdr.g, hdr.b, hdr.a);
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var col = ss.safeCast(obj, $Franca_Color);
			if (ss.isNullOrUndefined(col)) {
				return false;
			}
			return ss.unbox(col).$packed === this.$packed;
		},
		equals$1: function(c) {
			return this.$packed === c.$packed;
		},
		getHashCode: function() {
			return ss.getHashCode(this.$packed);
		},
		fromJson: function(json) {
			if (json.get_isObject()) {
				// backwards compatibility
				return new $Franca_Color.$ctor2($Franca_JsonValue.op_Implicit$5(json.get_item('packedColor')), true);
			}
			else {
				return new $Franca_Color.$ctor2($Franca_JsonValue.op_Implicit$5(json), true);
			}
		},
		toJson: function() {
			//var json = new JObject();
			//json["packedColor"] = packed;
			//return json;
			return new $Franca_JsonValue.$ctorf(this.$packed);
		},
		get_packed: function() {
			return this.$packed;
		},
		get_r: function() {
			return this.$packed & 255;
		},
		get_g: function() {
			return this.$packed >> 8 & 255;
		},
		get_b: function() {
			return this.$packed >> 16 & 255;
		},
		get_a: function() {
			return this.$packed >> 24 & 255;
		},
		writeJson: function(writer) {
			writer.write$4(this.$packed >> 0, null);
		}
	}, null, [$Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_Color]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_Color.$ctor2.prototype = $Franca_Color.$ctor3.prototype = $Franca_Color.$ctor5.prototype = $Franca_Color.$ctor6.prototype = $Franca_Color.$ctor4.prototype = $Franca_Color.$ctor1.prototype = $Franca_Color.prototype;
	$Franca_Color.__class = false;
	ss.initClass($Franca_ColorHelper, $asm, {});
	ss.initEnum($Franca_ColorLerpMode, $asm, { rgb: 0, hsv: 1, hsl: 2, hsb: 1 });
	ss.initClass($Franca_ColorSpace, $asm, {});
	ss.initClass($Franca_CommandLineArguments, $asm, {});
	ss.initClass($Franca_DuplicateItemException, $asm, {}, ss.Exception);
	$Franca_DuplicateItemException.$ctor1.prototype = $Franca_DuplicateItemException.$ctor2.prototype = $Franca_DuplicateItemException.prototype;
	ss.initClass($Franca_ElementExtensions, $asm, {});
	ss.initEnum($Franca_Endian, $asm, { Little: 0, Big: 1, System: 2, Network: 1, Unknown: 2, Host: 2 });
	ss.initClass($Franca_EnumHelper, $asm, {});
	ss.initEnum($Franca_FileType, $asm, { Canvas: 0, Binary: 1, Text: 2, BufferedAudio: 3, StreamingAudio: 4, AnimatedGif: 5 });
	ss.initClass($Franca_Fix53, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_Fix53);
			if (ss.isNullOrUndefined(b)) {
				var dbl = ss.safeCast(obj, Number);
				if (ss.isNullOrUndefined(dbl)) {
					var integer = ss.safeCast(obj, ss.Int32);
					if (ss.isNullOrUndefined(integer)) {
						return false;
					}
					else {
						return $Franca_Fix53.cast_Double(this) === integer;
					}
				}
				else {
					return $Franca_Fix53.cast_Double(this) === dbl;
				}
			}
			return ss.unbox(b).raw === this.raw;
		},
		equalsT: function(b) {
			return b.raw === this.raw;
		},
		equals$1: function(b) {
			return b === $Franca_Fix53.cast_Double(this);
		},
		equals$2: function(b) {
			return b === $Franca_Fix53.cast_Double(this);
		},
		getHashCode: function() {
			return ss.getHashCode(this.raw);
		},
		toString: function() {
			return $Franca_Fix53.cast_Double(this).toString();
		},
		toString$1: function(provider) {
			return ss.netFormatNumber($Franca_Fix53.cast_Double(this), 'G', provider);
		},
		format: function(format) {
			return ss.formatNumber($Franca_Fix53.cast_Double(this), format);
		},
		toString$2: function(format, provider) {
			return ss.netFormatNumber($Franca_Fix53.cast_Double(this), format, provider);
		},
		compareTo$1: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				throw new ss.ArgumentException('Object is not a Fix53');
			}
			var fix = ss.safeCast(obj, $Franca_Fix53);
			if (ss.isValue(fix)) {
				return this.compareTo(ss.unbox(fix));
			}
			else {
				throw new ss.ArgumentException('Object is not a Fix53');
			}
		},
		compareTo: function(other) {
			if (this.raw < other.raw) {
				return -1;
			}
			else if (this.raw > other.raw) {
				return 1;
			}
			return 0;
		},
		fromJson: function(json) {
			if (json.get_isObject()) {
				// backwards compatibility
				return new $Franca_Fix53.$ctor3($Franca_JsonValue.op_Implicit$3(json.get_item('fix53Value')), true);
			}
			else {
				return new $Franca_Fix53.$ctor3($Franca_JsonValue.op_Implicit$3(json), true);
			}
		},
		toJson: function() {
			//var json = new JObject();
			//json["fix53Value"] = Raw;
			//return json;
			return new $Franca_JsonValue.$ctorc(this.raw);
		},
		writeJson: function(writer) {
			writer.writeInteger(this.raw, null);
		}
	}, null, [ss.IFormattable, ss.IComparable, ss.IEquatable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_Fix53]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_Fix53.$ctor1.prototype = $Franca_Fix53.$ctor3.prototype = $Franca_Fix53.$ctor2.prototype = $Franca_Fix53.prototype;
	$Franca_Fix53.__class = false;
	ss.initClass($Franca_FloatExtensions, $asm, {});
	ss.initEnum($Franca_HAlign, $asm, { left: 0, center: 1, right: 2 });
	ss.initClass($Franca_HdrColor, $asm, {
		toString: function() {
			return ss.formatString('[HdrColor: R={0}, G={1}, B={2}, A={3}]', this.r, this.g, this.b, this.a);
		},
		toVector3: function() {
			return new $Franca_Vector3.$ctor4(this.r, this.g, this.b);
		},
		toVector4: function() {
			return new $Franca_Vector4.$ctor5(this.r, this.g, this.b, this.a);
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var col = ss.safeCast(obj, $Franca_HdrColor);
			if (ss.isNullOrUndefined(col)) {
				return false;
			}
			return ss.unbox(col).r === this.r && ss.unbox(col).g === this.g && ss.unbox(col).b === this.b && ss.unbox(col).a === this.a;
		},
		equals$1: function(c) {
			return this.r === c.r && this.g === c.g && this.b === c.b && this.a === c.a;
		},
		getHashCode: function() {
			return ss.getHashCode(this.r) ^ ss.getHashCode(this.g) ^ ss.getHashCode(this.b) ^ ss.getHashCode(this.a);
		},
		fromJson: function(json) {
			var r = 0;
			var rJson = {};
			if (json.tryGetValue('r', rJson) && rJson.$.get_isDouble()) {
				r = $Franca_JsonValue.op_Implicit$3(rJson.$);
			}
			var g = 0;
			var gJson = {};
			if (json.tryGetValue('g', gJson) && gJson.$.get_isDouble()) {
				g = $Franca_JsonValue.op_Implicit$3(gJson.$);
			}
			var b = 0;
			var bJson = {};
			if (json.tryGetValue('b', bJson) && bJson.$.get_isDouble()) {
				b = $Franca_JsonValue.op_Implicit$3(bJson.$);
			}
			var a = 1;
			var aJson = {};
			if (json.tryGetValue('a', aJson) && aJson.$.get_isDouble()) {
				a = $Franca_JsonValue.op_Implicit$3(aJson.$);
			}
			return new $Franca_HdrColor.$ctor4(r, g, b, a);
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('r', $Franca_JsonValue.op_Implicit$q(this.r));
			json.set_item('g', $Franca_JsonValue.op_Implicit$q(this.g));
			json.set_item('b', $Franca_JsonValue.op_Implicit$q(this.b));
			if (this.a !== 1) {
				json.set_item('a', $Franca_JsonValue.op_Implicit$q(this.a));
			}
			return json;
		},
		mix: function(col, amount) {
			return $Franca_HdrColor.lerp(this, col, amount, false);
		},
		premultiply: function() {
			return $Franca_HdrColor.premultiply(this);
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.write$6(this.r, 'r');
				writer.write$6(this.g, 'g');
				writer.write$6(this.b, 'b');
				if (this.a !== 1) {
					writer.write$6(this.a, 'a');
				}
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [$Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_HdrColor]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_HdrColor.$ctor2.prototype = $Franca_HdrColor.$ctor3.prototype = $Franca_HdrColor.$ctor5.prototype = $Franca_HdrColor.$ctor6.prototype = $Franca_HdrColor.$ctor4.prototype = $Franca_HdrColor.$ctor1.prototype = $Franca_HdrColor.prototype;
	$Franca_HdrColor.__class = false;
	ss.initClass($Franca_IDGenerator, $asm, {
		setMinimumID: function(id) {
			if (id > $Franca_IncrementalID.op_Implicit(this.getCurrentID())) {
				this.$curID = id;
			}
			else {
				throw new ss.ArgumentOutOfRangeException('id', 'Value was not greater than current ID value');
			}
		},
		getCurrentID: function() {
			return new $Franca_IncrementalID.$ctor2(this.$curID);
		},
		getID: function() {
			return new $Franca_IncrementalID.$ctor2(++this.$curID);
		}
	});
	$Franca_IDGenerator.$ctor1.prototype = $Franca_IDGenerator.prototype;
	ss.initClass($Franca_IMappableExtensions, $asm, {});
	ss.initClass($Franca_ImplicitFromBoolAttribute, $asm, {
		get_falseValue: function() {
			return this.$2$FalseValueField;
		},
		set_falseValue: function(value) {
			this.$2$FalseValueField = value;
		},
		get_trueValue: function() {
			return this.$2$TrueValueField;
		},
		set_trueValue: function(value) {
			this.$2$TrueValueField = value;
		}
	});
	ss.initClass($Franca_IncrementalID, $asm, {
		toString: function() {
			return $System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.value);
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_IncrementalID);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return $Franca_IncrementalID.op_Implicit(ss.unbox(b)) === this.value;
		},
		equalsT: function(b) {
			return b.value === this.value;
		},
		getHashCode: function() {
			return ss.getHashCode(this.value);
		},
		compareTo: function(other) {
			return ss.compare(this.value, other.value);
		},
		fromJson: function(json) {
			return new $Franca_IncrementalID.$ctor2($Franca_JsonValue.op_Implicit$3(json));
		},
		toJson: function() {
			return new $Franca_JsonValue.$ctorc(this.value);
		},
		writeJson: function(writer) {
			writer.writeInteger(this.value, null);
		}
	}, null, [ss.IEquatable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_IncrementalID]), ss.IComparable, $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_IncrementalID.$ctor2.prototype = $Franca_IncrementalID.$ctor1.prototype = $Franca_IncrementalID.prototype;
	$Franca_IncrementalID.__class = false;
	ss.initClass($Franca_InvalidFormatException, $asm, {}, ss.Exception);
	$Franca_InvalidFormatException.$ctor1.prototype = $Franca_InvalidFormatException.$ctor2.prototype = $Franca_InvalidFormatException.prototype;
	ss.initInterface($Franca_IResumable, $asm, { start: null });
	ss.initClass($Franca_JsonValue, $asm, {
		get$1: function(key, safe) {
			if (ss.referenceEquals(key, null)) {
				throw new ss.ArgumentNullException('key', 'Could not get index json value: key cannot be null.');
			}
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				var dict = ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]));
				var value = {};
				if (dict.tryGetValue(key, value)) {
					return value.$;
				}
				if (!safe) {
					throw new ss.KeyNotFoundException(ss.formatString("Key '{0}' not found in JsonValue.", key));
				}
				return $Franca_JsonValue.get_null();
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not get index null json value for key '{0}'.", key));
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not get index json value of type '{1}' for key '{0}'.", key, ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		get: function(index, safe) {
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))) {
				var list = ss.cast(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]));
				var value = {};
				if (list.tryGetValue(index, value)) {
					return value.$;
				}
				if (!safe) {
					throw new ss.KeyNotFoundException(ss.formatString("Index '{0}' not found in JsonValue.", $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, index)));
				}
				return $Franca_JsonValue.get_null();
			}
			else if (ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray)) {
				var arr = ss.cast(this.value, $Franca_Collections_TypedArray);
				if (index < 0 || index >= arr.get_length()) {
					if (safe) {
						return $Franca_JsonValue.get_null();
					}
					else {
						throw new ss.KeyNotFoundException(ss.formatString("Index '{0}' not found in JsonValue.", $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, index)));
					}
				}
				return new $Franca_JsonValue.$ctorh(arr.getValue(index));
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not get index null json value for index '{0}'.", index));
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not get index json value of type '{1}' for index '{0}'.", index, ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		set$1: function(key, value) {
			if (ss.referenceEquals(key, null)) {
				throw new ss.ArgumentNullException('key', 'Could not set index json value: key cannot be null.');
			}
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				try {
					this.set_item(key, (ss.isInstanceOfType(value, $Franca_JsonValue) ? ss.cast(value, $Franca_JsonValue) : new $Franca_JsonValue.$ctorh(value)));
				}
				catch ($t1) {
					$t1 = ss.Exception.wrap($t1);
					if (ss.isInstanceOfType($t1, $Franca_JsonTypeConversionException)) {
						var e = ss.cast($t1, $Franca_JsonTypeConversionException);
						throw new $Franca_JsonIndexException.$ctor2(ss.formatString("Could not set index json value of type '{1}' for key '{0}'. {2}", key, ss.getTypeFullName(ss.getInstanceType(this.value)), e.get_message()), e);
					}
					else {
						throw $t1;
					}
				}
				return;
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not set index null json value for key '{0}'.", key));
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not set index json value of type '{1}' for key '{0}'.", key, ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		set: function(index, value) {
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))) {
				try {
					this.set_item$1(index, (ss.isInstanceOfType(value, $Franca_JsonValue) ? ss.cast(value, $Franca_JsonValue) : new $Franca_JsonValue.$ctorh(value)));
				}
				catch ($t1) {
					$t1 = ss.Exception.wrap($t1);
					if (ss.isInstanceOfType($t1, $Franca_JsonTypeConversionException)) {
						var e = ss.cast($t1, $Franca_JsonTypeConversionException);
						throw new $Franca_JsonIndexException.$ctor2(ss.formatString("Could not set index json value of type '{1}' for index '{0}'. {2}", index, ss.getTypeFullName(ss.getInstanceType(this.value)), e.get_message()), e);
					}
					else {
						throw $t1;
					}
				}
				return;
			}
			else if (ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray)) {
				throw new $Franca_JsonIndexException.$ctor1('Cannot set index on TypedArray json value.');
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not set index null json value for index '{0}'.", index));
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not set index json value of type '{1}' for index '{0}'.", index, ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		add: function(value) {
			this.set(this.get_count(), value);
		},
		add$1: function(key, value) {
			if (ss.referenceEquals(key, null)) {
				throw new ss.ArgumentNullException('key', 'Could not add index json value: key cannot be null.');
			}
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				if (ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue])).containsKey(key)) {
					if (ss.referenceEquals(this.value, null)) {
						throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not add index null json value for key '{0}': duplicate key detected.", key));
					}
					else {
						throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not add index json value of type '{1}' for key '{0}': duplicate key detected.", key, ss.getTypeFullName(ss.getInstanceType(this.value))));
					}
				}
			}
			this.set$1(key, value);
		},
		remove: function(key) {
			if (ss.referenceEquals(key, null)) {
				throw new ss.ArgumentNullException('key', 'Could not remove index json value: key cannot be null.');
			}
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				return ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue])).remove(key);
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not remove index null json value for key '{0}'.", key));
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not remove index json value of type '{1}' for key '{0}'.", key, ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		removeAt: function(index) {
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))) {
				ss.cast(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue])).removeAt(index);
				return;
			}
			else if (ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray)) {
				throw new $Franca_JsonIndexException.$ctor1('Cannot remove index on TypedArray json value.');
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not remove index null json value for index '{0}'.", index));
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not remove index json value of type '{1}' for index '{0}'.", index, ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		clear: function() {
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue])).clear();
			}
			else if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))) {
				ss.cast(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue])).clear();
			}
			else if (ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray)) {
				ss.cast(this.value, $Franca_Collections_TypedArray).resize(0, false);
			}
			else {
				// setting value to null would introduce reference type mutability and change the hashcode within collections
				// if a JsonValue is used as a key and then mutated
			}
		},
		get_count: function() {
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				return ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue])).get_count();
			}
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))) {
				return ss.cast(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue])).get_count();
			}
			if (ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray)) {
				return ss.cast(this.value, $Franca_Collections_TypedArray).get_length();
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1('Could not get count for null json value.');
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not get count for json value of type '{0}'.", ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		get_hasValue: function() {
			return !ss.referenceEquals(this.value, null);
		},
		containsKey: function(key) {
			if (ss.referenceEquals(key, null)) {
				throw new ss.ArgumentNullException('key', 'Could not check key in json value: key cannot be null.');
			}
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				return ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue])).containsKey(key);
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not check key in null json value for key '{0}'.", key));
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not check key in json value of type '{1}' for key '{0}'.", key, ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		tryGetValue: function(key, value) {
			if (ss.referenceEquals(key, null)) {
				throw new ss.ArgumentNullException('key', 'Could not try get value in json value: key cannot be null.');
			}
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				return ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue])).tryGetValue(key, value);
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not try get value in null json value for key '{0}'.", key));
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not try get value in json value of type '{1}' for key '{0}'.", key, ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		get_item: function(key) {
			return this.get$1(key, false);
		},
		set_item: function(key, value) {
			if (ss.referenceEquals(key, null)) {
				throw new ss.ArgumentNullException('key', 'Could not set index json value: key cannot be null.');
			}
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue])).set_item(key, value || $Franca_JsonValue.get_null());
				return;
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not set index null json value for key '{0}'.", key));
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not set index json value of type '{1}' for key '{0}'.", key, ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		get_item$1: function(index) {
			return this.get(index, false);
		},
		set_item$1: function(index, value) {
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))) {
				ss.cast(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue])).set_item(index, value || $Franca_JsonValue.get_null());
				return;
			}
			else if (ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray)) {
				throw new $Franca_JsonIndexException.$ctor1('Cannot set index on TypedArray json value.');
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not set index null json value for index '{0}'.", index));
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not set index json value of type '{1}' for index '{0}'.", index, ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		get_keys: function() {
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				return ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue])).get_keys();
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1('Could not enumerate keys for null json value.');
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not enumerate keys for json value of type '{0}'.", ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		get_indices: function() {
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))) {
				return ss.cast(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue])).get_indices();
			}
			if (ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray)) {
				return Enumerable.range(0, ss.cast(this.value, $Franca_Collections_TypedArray).get_length());
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1('Could not enumerate indices for null json value.');
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not enumerate indices for json value of type '{0}'.", ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		get_values: function() {
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				return ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue])).get_values();
			}
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))) {
				return ss.cast(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]));
			}
			if (ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray)) {
				return ss.cast(this.value, $Franca_Collections_TypedArray);
			}
			if (ss.referenceEquals(this.value, null)) {
				throw new $Franca_JsonIndexException.$ctor1('Could not enumerate values for null json value.');
			}
			else {
				throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not enumerate values for json value of type '{0}'.", ss.getTypeFullName(ss.getInstanceType(this.value))));
			}
		},
		get_pairs: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, $t1, kvp;
					var $finally = function() {
						$t1.dispose();
					};
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
										$t1 = ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue])).getEnumerator();
										$state = 5;
										continue $sm1;
									}
									$state = 1;
									continue $sm1;
								}
								case 5: {
									$state = 3;
									if (!$t1.moveNext()) {
										$state = 4;
										continue $sm1;
									}
									kvp = $t1.current();
									$result = kvp;
									$state = 5;
									return true;
								}
								case 4: {
									$state = -1;
									$finally.call(this);
									$state = 2;
									continue $sm1;
								}
								case 2: {
									$state = -1;
									break $sm1;
								}
								case 1: {
									$state = -1;
									if (ss.referenceEquals(this.value, null)) {
										throw new $Franca_JsonIndexException.$ctor1('Could not enumerate keys for null json value.');
									}
									else {
										throw new $Franca_JsonIndexException.$ctor1(ss.formatString("Could not enumerate keys for json value of type '{0}'.", ss.getTypeFullName(ss.getInstanceType(this.value))));
									}
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, function() {
						try {
							switch ($state) {
								case 3:
								case 4:
								case 5: {
									try {
										break;
									}
									finally {
										$finally.call(this);
									}
								}
							}
						}
						finally {
							$state = -1;
						}
					}, this);
				}).call(this);
			}, this);
		},
		get_arrayType: function() {
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))) {
				return 0;
			}
			if (ss.isInstanceOfType(this.value, $Franca_Collections_ByteArray)) {
				return 2;
			}
			if (ss.isInstanceOfType(this.value, $Franca_Collections_SByteArray)) {
				return 1;
			}
			if (ss.isInstanceOfType(this.value, $Franca_Collections_ShortArray)) {
				return 3;
			}
			if (ss.isInstanceOfType(this.value, $Franca_Collections_IntArray)) {
				return 4;
			}
			if (ss.isInstanceOfType(this.value, $Franca_Collections_FloatArray)) {
				return 6;
			}
			if (ss.isInstanceOfType(this.value, $Franca_Collections_DoubleArray)) {
				return 7;
			}
			return -1;
		},
		toRawValue: function() {
			if (this.get_isObject()) {
				var dict = new (ss.makeGenericType(ss.Dictionary$2, [String, Object]))();
				var $t1 = ss.getEnumerator(this.get_pairs());
				try {
					while ($t1.moveNext()) {
						var kvp = $t1.current();
						dict.set_item(kvp.key, kvp.value.toRawValue());
					}
				}
				finally {
					$t1.dispose();
				}
				return dict;
			}
			else if (this.get_isArray()) {
				if (ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray)) {
					var list = [];
					var arr = ss.cast(this.value, $Franca_Collections_TypedArray);
					switch (this.get_arrayType()) {
						case 1: {
							for (var i = 0; i < arr.get_length(); i++) {
								list.push(ss.unbox(ss.cast(arr.getValue(i), ss.Int32)));
							}
							break;
						}
						case 2: {
							for (var i1 = 0; i1 < arr.get_length(); i1++) {
								list.push(ss.unbox(ss.cast(arr.getValue(i1), ss.Int32)));
							}
							break;
						}
						case 3: {
							for (var i2 = 0; i2 < arr.get_length(); i2++) {
								list.push(ss.unbox(ss.cast(arr.getValue(i2), ss.Int32)));
							}
							break;
						}
						case 4: {
							for (var i3 = 0; i3 < arr.get_length(); i3++) {
								list.push(ss.unbox(ss.cast(arr.getValue(i3), ss.Int32)));
							}
							break;
						}
						case 6: {
							for (var i4 = 0; i4 < arr.get_length(); i4++) {
								list.push(ss.unbox(ss.cast(arr.getValue(i4), Number)));
							}
							break;
						}
						case 7: {
							for (var i5 = 0; i5 < arr.get_length(); i5++) {
								list.push(ss.unbox(ss.cast(arr.getValue(i5), Number)));
							}
							break;
						}
					}
					return list;
				}
				else {
					var list1 = [];
					var $t2 = ss.getEnumerator(this.get_values());
					try {
						while ($t2.moveNext()) {
							var item = $t2.current();
							list1.push(item.toRawValue());
						}
					}
					finally {
						$t2.dispose();
					}
					return list1;
				}
			}
			else {
				return this.value;
			}
		},
		validate: function(col, throwException) {
			return this.$_Validate(col, (throwException ? function(e) {
				return e;
			} : null));
		},
		validate$1: function(col, exceptionFactory) {
			this.$_Validate(col, exceptionFactory);
		},
		$_Validate: function(col, exceptionFactory) {
			var e;
			if (col.get_hasKeys()) {
				var $t1 = ss.getEnumerator(col.get_keys());
				try {
					while ($t1.moveNext()) {
						var kvp = $t1.current();
						e = this.$_Validate$2(kvp.key, kvp.value);
						if (ss.isValue(e)) {
							if (ss.staticEquals(exceptionFactory, null)) {
								return false;
							}
							else {
								try {
									e = exceptionFactory(e);
								}
								catch ($t2) {
								}
								throw e;
							}
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
			if (col.get_hasIndices()) {
				var $t3 = ss.getEnumerator(col.get_indices());
				try {
					while ($t3.moveNext()) {
						var kvp1 = $t3.current();
						e = this.$_Validate$1(kvp1.key, kvp1.value);
						if (ss.isValue(e)) {
							if (ss.staticEquals(exceptionFactory, null)) {
								return false;
							}
							else {
								try {
									e = exceptionFactory(e);
								}
								catch ($t4) {
								}
								throw e;
							}
						}
					}
				}
				finally {
					$t3.dispose();
				}
			}
			return true;
		},
		validate$4: function(key, type, throwException) {
			return this.$_Validate$4(key, type, (throwException ? function(e) {
				return e;
			} : null));
		},
		validate$5: function(key, type, exceptionFactory) {
			this.$_Validate$4(key, type, exceptionFactory);
		},
		$_Validate$4: function(key, type, exceptionFactory) {
			var e = this.$_Validate$2(key, type);
			if (ss.isValue(e)) {
				if (!ss.staticEquals(exceptionFactory, null)) {
					try {
						e = exceptionFactory(e);
					}
					catch ($t1) {
					}
					throw e;
				}
				else {
					return false;
				}
			}
			return true;
		},
		$_Validate$2: function(key, type) {
			if (!this.get_isObject()) {
				return this.$validationException(key, type, false, 'parent was not an object.');
			}
			var dict = ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]));
			var value = {};
			if (!dict.tryGetValue(key, value)) {
				return (($System_EnumExtensions.hasFlag(type, 8388608) || $System_EnumExtensions.hasFlag(type, 16777216)) ? null : this.$validationException(key, type, false, 'value was missing.'));
			}
			return this.$validateValue(String).call(this, key, type, value.$, false);
		},
		validate$2: function(index, type, throwException) {
			return this.$_Validate$3(index, type, (throwException ? function(e) {
				return e;
			} : null));
		},
		validate$3: function(index, type, exceptionFactory) {
			this.$_Validate$3(index, type, exceptionFactory);
		},
		$_Validate$3: function(index, type, exceptionFactory) {
			var e = this.$_Validate$1(index, type);
			if (ss.isValue(e)) {
				if (!ss.staticEquals(exceptionFactory, null)) {
					try {
						e = exceptionFactory(e);
					}
					catch ($t1) {
					}
					throw e;
				}
				else {
					return false;
				}
			}
			return true;
		},
		$_Validate$1: function(index, type) {
			var value = {};
			if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))) {
				var list = ss.cast(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]));
				if (!list.tryGetValue(index, value)) {
					return (($System_EnumExtensions.hasFlag(type, 8388608) || $System_EnumExtensions.hasFlag(type, 16777216)) ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, index), type, true, 'value was missing.'));
				}
			}
			else if (ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray)) {
				var arr = ss.cast(this.value, $Franca_Collections_TypedArray);
				if (index < 0 || index >= arr.get_length()) {
					return (($System_EnumExtensions.hasFlag(type, 8388608) || $System_EnumExtensions.hasFlag(type, 16777216)) ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, index), type, true, 'value was missing.'));
				}
				value.$ = new $Franca_JsonValue.$ctorh(arr.getValue(index));
			}
			else {
				return this.$validationException($System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, index), type, true, 'parent was not an object.');
			}
			return this.$validateValue(ss.Int32).call(this, index, type, value.$, true);
		},
		$validateValue: function(T) {
			return function(name, type, value, isIndex) {
				switch (type) {
					default: {
						//throw new InvalidProgramException(string.Format("Unknown JsonType value {0} in validation.", type.GetName<JsonType>()));
						break;
					}
					case 8192: {
						return (value.get_isArray() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 1024: {
						return (value.get_isBool() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 1: {
						return (value.get_isByte() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 512: {
						return (value.get_isDouble() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 16777216: {
						return ((value.get_isNull() || value.get_isBool() && ss.unbox(ss.cast(value.value, Boolean)) === false) ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 256: {
						return (value.get_isFloat() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 2097152: {
						return (value.get_isFloat32Array() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 4194304: {
						return (value.get_isFloat64Array() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 16: {
						return (value.get_isInt() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 262144: {
						return (value.get_isInt16Array() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 524288: {
						return (value.get_isInt32Array() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 1048576: {
						return (value.get_isInt64Array() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 64: {
						return (value.get_isLong() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 16384:
					case 8404992: {
						// value can't be undefined cause we checked that, must be null
						return (value.get_isNull() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 4096: {
						return (value.get_isObject() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 2: {
						return (value.get_isSByte() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 4: {
						return (value.get_isShort() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 2048: {
						return (value.get_isString() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 33554432: {
						return ((!value.get_isNull() && (!value.get_isBool() || ss.unbox(ss.cast(value.value, Boolean)) === true)) ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 65536: {
						return (value.get_isTypedArray() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 32: {
						return (value.get_isUInt() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 131072: {
						return (value.get_isUInt8Array() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 128: {
						return (value.get_isULong() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 8388608: {
						return this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null);
					}
					case 8: {
						return (value.get_isUShort() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
					case 32768: {
						return (value.get_isValue() ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
					}
				}
				var flag = 1;
				var maxVal = $Franca_JsonValue.$maxJsonTypeVal;
				var valid = false;
				while (flag <= maxVal) {
					var fType = flag;
					if ($System_EnumExtensions.hasFlag(type, fType)) {
						var exc = this.$validateValue(T).call(this, name, fType, value, isIndex);
						if (ss.isNullOrUndefined(exc)) {
							valid = true;
							break;
						}
					}
					flag = flag << 1;
				}
				return (valid ? null : this.$validationException($System_ObjectExtensions.toStringInvariant$1(T).call(null, name), type, isIndex, null));
			};
		},
		$validationException: function(key, type, isIndex, reason) {
			var fmt;
			if (isIndex) {
				fmt = (ss.isNullOrUndefined(reason) ? "Couldn't validate json item at index {0} to be of type {1}" : "Couldn't validate json item at index {0} to be of type {1}: {2}");
			}
			else {
				fmt = (ss.isNullOrUndefined(reason) ? "Couldn't validate json key '{0}' to be of type {1}" : "Couldn't validate json key '{0}' to be of type {1}: {2}");
			}
			if (ss.isNullOrUndefined(reason)) {
				return new $Franca_JsonValidationException.$ctor1(ss.formatString(fmt, key, $System_EnumExtensions.getName($Franca_JsonType).call(null, type)));
			}
			else {
				return new $Franca_JsonValidationException.$ctor1(ss.formatString(fmt, key, $System_EnumExtensions.getName($Franca_JsonType).call(null, type), reason));
			}
		},
		toString: function() {
			return this.toString$1(false, false);
		},
		toString$1: function(stringify, truncate) {
			if (ss.referenceEquals(this.value, null)) {
				return (stringify ? 'null' : null);
			}
			else if (!stringify) {
				if (this.get_isObject()) {
					return 'JsonValue:Object';
				}
				else if (this.get_isArray()) {
					var arrType = this.get_arrayType();
					if (arrType < 1) {
						return 'JsonValue:Array';
					}
					else {
						return ss.formatString('JsonValue:{0}Array', $System_EnumExtensions.getName($Franca_JArrayType).call(null, arrType));
					}
				}
				return this.value.toString();
			}
			else if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]))) {
				var str = new ss.StringBuilder();
				var dict = ss.cast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]));
				var first = true;
				str.append('{');
				if (truncate) {
					var i = 0;
					var $t1 = dict.getEnumerator();
					try {
						while ($t1.moveNext()) {
							var kvp = $t1.current();
							if (dict.get_count() > 40 && i >= 20 && i < dict.get_count() - 20) {
								str.append(',...');
								continue;
							}
							$System_StringBuilderFixes.appendFormat(str, '{2}"{0}":{1}', [kvp.key, kvp.value.toString$1(true, truncate), (first ? '' : ',')]);
							first = false;
							i++;
						}
					}
					finally {
						$t1.dispose();
					}
				}
				else {
					var $t2 = dict.getEnumerator();
					try {
						while ($t2.moveNext()) {
							var kvp1 = $t2.current();
							$System_StringBuilderFixes.appendFormat(str, '{2}"{0}":{1}', [kvp1.key, kvp1.value.toString$1(true, truncate), (first ? '' : ',')]);
							first = false;
						}
					}
					finally {
						$t2.dispose();
					}
				}
				str.append('}');
				return str.toString();
			}
			else if (ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]))) {
				var str1 = new ss.StringBuilder();
				var list = ss.cast(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue]));
				var first1 = true;
				str1.append('[');
				if (truncate) {
					for (var i1 = 0; i1 < list.get_count(); i1++) {
						if (list.get_count() > 40 && i1 >= 20 && i1 < list.get_count() - 20) {
							i1 = list.get_count() - 20;
							str1.append(',...');
						}
						var value = (list.containsIndex(i1) ? list.get_item(i1).toString$1(true, truncate) : 'null');
						$System_StringBuilderFixes.appendFormat(str1, '{1}{0}', [value, (first1 ? '' : ',')]);
						first1 = false;
					}
				}
				else {
					for (var i2 = 0; i2 < list.get_count(); i2++) {
						var value1 = (list.containsIndex(i2) ? list.get_item(i2).toString$1(true, truncate) : 'null');
						$System_StringBuilderFixes.appendFormat(str1, '{1}{0}', [value1, (first1 ? '' : ',')]);
						first1 = false;
					}
				}
				str1.append(']');
				return str1.toString();
			}
			else if (ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray)) {
				var str2 = new ss.StringBuilder();
				var arr = ss.cast(this.value, $Franca_Collections_TypedArray);
				var first2 = true;
				str2.append('[');
				if (truncate) {
					for (var i3 = 0; i3 < arr.get_length(); i3++) {
						if (arr.get_length() > 40 && i3 >= 20 && i3 < arr.get_length() - 20) {
							i3 = arr.get_length() - 20;
							str2.append(',...');
						}
						$System_StringBuilderFixes.appendFormat(str2, '{1}{0}', [$System_ObjectExtensions.toStringInvariant(arr.getValue(i3)), (first2 ? '' : ',')]);
						first2 = false;
					}
				}
				else {
					for (var i4 = 0; i4 < arr.get_length(); i4++) {
						$System_StringBuilderFixes.appendFormat(str2, '{1}{0}', [$System_ObjectExtensions.toStringInvariant(arr.getValue(i4)), (first2 ? '' : ',')]);
						first2 = false;
					}
				}
				str2.append(']');
				return str2.toString();
			}
			else if (this.get_isBool()) {
				return (ss.unbox(ss.cast(this.value, Boolean)) ? 'true' : 'false');
			}
			else if (this.get_isString()) {
				return ss.formatString('"{0}"', $System_StringExtensions.escape(ss.cast(this.value, String), 2));
			}
			else {
				return $System_ObjectExtensions.toStringInvariant(this.value);
			}
		},
		getHashCode: function() {
			return (ss.isValue(this.value) ? ss.getHashCode(this.value) : ss.defaultHashCode(this));
		},
		equals: function(obj) {
			if (ss.referenceEquals(obj, null)) {
				return false;
			}
			if (ss.isInstanceOfType(obj, $Franca_JsonValue)) {
				if (ss.referenceEquals(this.value, null)) {
					return ss.staticEquals(ss.cast(obj, $Franca_JsonValue).value, null);
				}
				else {
					return ss.equals(this.value, ss.cast(obj, $Franca_JsonValue).value);
				}
			}
			var converted = $Franca_JsonValue.convertValue(obj, false);
			if (ss.referenceEquals(converted, null)) {
				return ss.staticEquals(this.value, null);
			}
			else {
				return ss.equals(converted, this.value);
			}
		},
		get_isByte: function() {
			if (ss.isInstanceOfType(this.value, Number)) {
				if (Math.trunc(ss.unbox(ss.cast(this.value, Number))) === ss.unbox(ss.cast(this.value, Number))) {
					if (ss.unbox(ss.cast(this.value, Number)) >= 0 && ss.unbox(ss.cast(this.value, Number)) <= 255) {
						return true;
					}
				}
			}
			return false;
		},
		get_isSByte: function() {
			if (ss.isInstanceOfType(this.value, Number)) {
				if (Math.trunc(ss.unbox(ss.cast(this.value, Number))) === ss.unbox(ss.cast(this.value, Number))) {
					if (ss.unbox(ss.cast(this.value, Number)) >= -128 && ss.unbox(ss.cast(this.value, Number)) <= 127) {
						return true;
					}
				}
			}
			return false;
		},
		get_isShort: function() {
			if (ss.isInstanceOfType(this.value, Number)) {
				if (Math.trunc(ss.unbox(ss.cast(this.value, Number))) === ss.unbox(ss.cast(this.value, Number))) {
					if (ss.unbox(ss.cast(this.value, Number)) >= -32768 && ss.unbox(ss.cast(this.value, Number)) <= 32767) {
						return true;
					}
				}
			}
			return false;
		},
		get_isUShort: function() {
			if (ss.isInstanceOfType(this.value, Number)) {
				if (Math.trunc(ss.unbox(ss.cast(this.value, Number))) === ss.unbox(ss.cast(this.value, Number))) {
					if (ss.unbox(ss.cast(this.value, Number)) >= 0 && ss.unbox(ss.cast(this.value, Number)) <= 65535) {
						return true;
					}
				}
			}
			return false;
		},
		get_isInt: function() {
			if (ss.isInstanceOfType(this.value, Number)) {
				if (Math.trunc(ss.unbox(ss.cast(this.value, Number))) === ss.unbox(ss.cast(this.value, Number))) {
					if (ss.unbox(ss.cast(this.value, Number)) >= -2147483648 && ss.unbox(ss.cast(this.value, Number)) <= 2147483647) {
						return true;
					}
				}
			}
			return false;
		},
		get_isUInt: function() {
			if (ss.isInstanceOfType(this.value, Number)) {
				if (Math.trunc(ss.unbox(ss.cast(this.value, Number))) === ss.unbox(ss.cast(this.value, Number))) {
					if (ss.unbox(ss.cast(this.value, Number)) >= 0 && ss.unbox(ss.cast(this.value, Number)) <= 4294967295) {
						return true;
					}
				}
			}
			return false;
		},
		get_isLong: function() {
			if (ss.isInstanceOfType(this.value, Number)) {
				if (Math.trunc(ss.unbox(ss.cast(this.value, Number))) === ss.unbox(ss.cast(this.value, Number))) {
					if (ss.unbox(ss.cast(this.value, Number)) >= -Number.MAX_VALUE && ss.unbox(ss.cast(this.value, Number)) <= Number.MAX_VALUE) {
						return true;
					}
				}
			}
			return false;
		},
		get_isULong: function() {
			if (ss.isInstanceOfType(this.value, Number)) {
				if (Math.trunc(ss.unbox(ss.cast(this.value, Number))) === ss.unbox(ss.cast(this.value, Number))) {
					if (ss.unbox(ss.cast(this.value, Number)) >= 0 && ss.unbox(ss.cast(this.value, Number)) <= Number.MAX_VALUE) {
						return true;
					}
				}
			}
			return false;
		},
		get_isFloat: function() {
			return ss.isInstanceOfType(this.value, Number);
		},
		get_isDouble: function() {
			return ss.isInstanceOfType(this.value, Number);
		},
		get_isBool: function() {
			return ss.isInstanceOfType(this.value, Boolean);
		},
		get_isString: function() {
			return ss.isInstanceOfType(this.value, String);
		},
		get_isObject: function() {
			return ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]));
		},
		get_isArray: function() {
			return ss.isInstanceOfType(this.value, ss.makeGenericType($Franca_FlexibleList$1, [$Franca_JsonValue])) || ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray);
		},
		get_isNull: function() {
			return ss.referenceEquals(this.value, null);
		},
		get_isValue: function() {
			return !this.get_isArray() && !this.get_isObject();
		},
		get_isTypedArray: function() {
			return ss.isInstanceOfType(this.value, $Franca_Collections_TypedArray);
		},
		get_isInt8Array: function() {
			return ss.isInstanceOfType(this.value, $Franca_Collections_SByteArray);
		},
		get_isUInt8Array: function() {
			return ss.isInstanceOfType(this.value, $Franca_Collections_ByteArray);
		},
		get_isInt16Array: function() {
			return ss.isInstanceOfType(this.value, $Franca_Collections_ShortArray);
		},
		get_isInt32Array: function() {
			return ss.isInstanceOfType(this.value, $Franca_Collections_IntArray);
		},
		get_isInt64Array: function() {
			return false;
		},
		get_isFloat32Array: function() {
			return ss.isInstanceOfType(this.value, $Franca_Collections_FloatArray);
		},
		get_isFloat64Array: function() {
			return ss.isInstanceOfType(this.value, $Franca_Collections_DoubleArray);
		},
		writeJson: function(writer) {
			if (this.get_isObject()) {
				{
					var $t2 = writer.writeObject(null);
					try {
						var $t1 = ss.getEnumerator(this.get_pairs());
						try {
							while ($t1.moveNext()) {
								var kvp = $t1.current();
								if (!ss.referenceEquals(kvp.value, null)) {
									writer.writeKey(kvp.key);
									kvp.value.writeJson(writer);
								}
							}
						}
						finally {
							$t1.dispose();
						}
					}
					finally {
						$t2.dispose();
					}
				}
			}
			else if (this.get_isArray()) {
				{
					var $t4 = writer.writeArray(null);
					try {
						var $t3 = ss.getEnumerator(this.get_values());
						try {
							while ($t3.moveNext()) {
								var val = $t3.current();
								if (!ss.referenceEquals(val, null)) {
									val.writeJson(writer);
								}
							}
						}
						finally {
							$t3.dispose();
						}
					}
					finally {
						$t4.dispose();
					}
				}
			}
			else if (this.get_isString()) {
				writer.write$p(ss.cast(this.value, String), null, true, 0, -1);
			}
			else if (this.get_isBool()) {
				writer.write(ss.unbox(ss.cast(this.value, Boolean)), null);
			}
			else if (this.get_isNull()) {
				writer.writeNull(null);
			}
			else if (ss.isInstanceOfType(this.value, Number)) {
				writer.writeNumber(ss.unbox(ss.cast(this.value, Number)), null);
			}
			else {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		}
	}, null, [$Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_JsonValue.$ctorc.prototype = $Franca_JsonValue.$ctorj.prototype = $Franca_JsonValue.$ctor9.prototype = $Franca_JsonValue.$ctori.prototype = $Franca_JsonValue.$ctore.prototype = $Franca_JsonValue.$ctorl.prototype = $Franca_JsonValue.$ctorf.prototype = $Franca_JsonValue.$ctorm.prototype = $Franca_JsonValue.$ctorg.prototype = $Franca_JsonValue.$ctorn.prototype = $Franca_JsonValue.$ctor2.prototype = $Franca_JsonValue.$ctork.prototype = $Franca_JsonValue.$ctor8.prototype = $Franca_JsonValue.$ctord.prototype = $Franca_JsonValue.$ctor3.prototype = $Franca_JsonValue.$ctor6.prototype = $Franca_JsonValue.$ctor7.prototype = $Franca_JsonValue.$ctora.prototype = $Franca_JsonValue.$ctorb.prototype = $Franca_JsonValue.$ctor1.prototype = $Franca_JsonValue.$ctor5.prototype = $Franca_JsonValue.$ctor4.prototype = $Franca_JsonValue.$ctorh.prototype = $Franca_JsonValue.$ctoro.prototype = $Franca_JsonValue.prototype;
	ss.initClass($Franca_JArray, $asm, {
		getEnumerator: function() {
			if (!this.get_isArray()) {
				throw new $Franca_JsonIndexException.$ctor1('Cannot enumerate JArray: Value was not an array.');
			}
			return ss.getEnumerator(this.get_values());
		}
	}, $Franca_JsonValue, [$Franca_Serialization_Streaming_IJsonStreamWriter, ss.IEnumerable, ss.IEnumerable]);
	$Franca_JArray.$ctor3.prototype = $Franca_JArray.$ctor2.prototype = $Franca_JArray.$ctor1.prototype = $Franca_JArray.prototype;
	ss.initEnum($Franca_JArrayType, $asm, { notAnArray: -1, any: 0, int8: 1, uInt8: 2, int16: 3, int32: 4, int64: 5, float32: 6, float64: 7 });
	ss.initClass($Franca_JObject, $asm, {
		getEnumerator: function() {
			var dict = ss.safeCast(this.value, ss.makeGenericType($Franca_ReflectableDict$2, [String, $Franca_JsonValue]));
			if (ss.isNullOrUndefined(dict)) {
				throw new $Franca_JsonIndexException.$ctor1('Cannot enumerate JObject: Value was not a dictionary.');
			}
			return dict.getEnumerator();
		}
	}, $Franca_JsonValue, [$Franca_Serialization_Streaming_IJsonStreamWriter, ss.IEnumerable, ss.IEnumerable]);
	$Franca_JObject.$ctor1.prototype = $Franca_JObject.$ctor2.prototype = $Franca_JObject.prototype;
	ss.initClass($Franca_JsonValueException, $asm, {}, ss.Exception);
	$Franca_JsonValueException.$ctor1.prototype = $Franca_JsonValueException.$ctor2.prototype = $Franca_JsonValueException.prototype;
	ss.initClass($Franca_JsonIndexException, $asm, {}, $Franca_JsonValueException);
	$Franca_JsonIndexException.$ctor1.prototype = $Franca_JsonIndexException.$ctor2.prototype = $Franca_JsonIndexException.prototype;
	ss.initEnum($Franca_JsonType, $asm, { byte$1: 1, sByte: 2, short$1: 4, uShort: 8, int$1: 16, uInt: 32, long$1: 64, uLong: 128, float$1: 256, double$1: 512, bool: 1024, string: 2048, object: 4096, array: 8192, null$1: 16384, value: 32768, typedArray: 65536, uInt8Array: 131072, int16Array: 262144, int32Array: 524288, int64Array: 1048576, float32Array: 2097152, float64Array: 4194304, undefined: 8388608, falsy: 16777216, truthy: 33554432, nullOrUndefined: 8404992, number: 512 });
	ss.initClass($Franca_JsonTypeConversionException, $asm, {}, $Franca_JsonValueException);
	$Franca_JsonTypeConversionException.$ctor1.prototype = $Franca_JsonTypeConversionException.$ctor2.prototype = $Franca_JsonTypeConversionException.prototype;
	ss.initClass($Franca_JsonValidationException, $asm, {}, $Franca_JsonValueException);
	$Franca_JsonValidationException.$ctor1.prototype = $Franca_JsonValidationException.$ctor2.prototype = $Franca_JsonValidationException.prototype;
	ss.initClass($Franca_JsonValue$Validation, $asm, {
		add$1: function(key, type) {
			this.$keys.set_item(key, type);
		},
		add: function(index, type) {
			this.$indices.set_item(index, type);
		},
		getEnumerator: function() {
			return this.$keys.getEnumerator();
		},
		getEnumerator: function() {
			return this.$indices.getEnumerator();
		},
		get_keys: function() {
			return this.$keys;
		},
		get_indices: function() {
			return this.$indices;
		},
		get_hasKeys: function() {
			return this.$keys.get_count() > 0;
		},
		get_hasIndices: function() {
			return this.$indices.get_count() > 0;
		}
	}, null, [ss.IEnumerable, ss.IEnumerable, ss.IEnumerable]);
	ss.initClass($Franca_JsonValueExtensions, $asm, {});
	ss.initClass($Franca_LoadableFromAttribute, $asm, {});
	ss.initClass($Franca_MathHelper, $asm, {});
	ss.initInterface($System_ICloneable, $asm, { clone: null });
	ss.initClass($Franca_Matrix4, $asm, {
		fromJson: function(json) {
			return new $Franca_Matrix4.$ctor2($Franca_JsonValue.create($Franca_Vector4).call(null, json.get_item('row0')), $Franca_JsonValue.create($Franca_Vector4).call(null, json.get_item('row1')), $Franca_JsonValue.create($Franca_Vector4).call(null, json.get_item('row2')), $Franca_JsonValue.create($Franca_Vector4).call(null, json.get_item('row3')));
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('row0', this.row0.toJson());
			json.set_item('row1', this.row1.toJson());
			json.set_item('row2', this.row2.toJson());
			json.set_item('row3', this.row3.toJson());
			return json;
		},
		get_determinant: function() {
			return this.row0.x * this.row1.y * this.row2.z * this.row3.w - this.row0.x * this.row1.y * this.row2.w * this.row3.z + this.row0.x * this.row1.z * this.row2.w * this.row3.y - this.row0.x * this.row1.z * this.row2.y * this.row3.w + this.row0.x * this.row1.w * this.row2.y * this.row3.z - this.row0.x * this.row1.w * this.row2.z * this.row3.y - this.row0.y * this.row1.z * this.row2.w * this.row3.x + this.row0.y * this.row1.z * this.row2.x * this.row3.w - this.row0.y * this.row1.w * this.row2.x * this.row3.z + this.row0.y * this.row1.w * this.row2.z * this.row3.x - this.row0.y * this.row1.x * this.row2.z * this.row3.w + this.row0.y * this.row1.x * this.row2.w * this.row3.z + this.row0.z * this.row1.w * this.row2.x * this.row3.y - this.row0.z * this.row1.w * this.row2.y * this.row3.x + this.row0.z * this.row1.x * this.row2.y * this.row3.w - this.row0.z * this.row1.x * this.row2.w * this.row3.y + this.row0.z * this.row1.y * this.row2.w * this.row3.x - this.row0.z * this.row1.y * this.row2.x * this.row3.w - this.row0.w * this.row1.x * this.row2.y * this.row3.z + this.row0.w * this.row1.x * this.row2.z * this.row3.y - this.row0.w * this.row1.y * this.row2.z * this.row3.x + this.row0.w * this.row1.y * this.row2.x * this.row3.z - this.row0.w * this.row1.z * this.row2.x * this.row3.y + this.row0.w * this.row1.z * this.row2.y * this.row3.x;
		},
		get_column0: function() {
			return new $Franca_Vector4.$ctor5(this.row0.x, this.row1.x, this.row2.x, this.row3.x);
		},
		get_column1: function() {
			return new $Franca_Vector4.$ctor5(this.row0.y, this.row1.y, this.row2.y, this.row3.y);
		},
		get_column2: function() {
			return new $Franca_Vector4.$ctor5(this.row0.z, this.row1.z, this.row2.z, this.row3.z);
		},
		get_column3: function() {
			return new $Franca_Vector4.$ctor5(this.row0.w, this.row1.w, this.row2.w, this.row3.w);
		},
		toString: function() {
			return ss.formatString('{0}\n{1}\n{2}\n{3}', this.row0, this.row1, this.row2, this.row3);
		},
		getHashCode: function() {
			return this.row0.getHashCode() ^ this.row1.getHashCode() ^ this.row2.getHashCode() ^ this.row3.getHashCode();
		},
		equals: function(obj) {
			if (!ss.isInstanceOfType(obj, $Franca_Matrix4)) {
				return false;
			}
			return this.equalsT(ss.unbox(ss.cast(obj, $Franca_Matrix4)));
		},
		equalsT: function(other) {
			return $Franca_Vector4.op_Equality(this.row0, other.row0) && $Franca_Vector4.op_Equality(this.row1, other.row1) && $Franca_Vector4.op_Equality(this.row2, other.row2) && $Franca_Vector4.op_Equality(this.row3, other.row3);
		},
		clone$1: function() {
			return new $Franca_Matrix4.$ctor3(this.row0.x, this.row0.y, this.row0.z, this.row0.w, this.row1.x, this.row1.y, this.row1.z, this.row1.w, this.row2.x, this.row2.y, this.row2.z, this.row2.w, this.row3.x, this.row3.y, this.row3.z, this.row3.w);
		},
		clone: function() {
			return new $Franca_Matrix4.$ctor3(this.row0.x, this.row0.y, this.row0.z, this.row0.w, this.row1.x, this.row1.y, this.row1.z, this.row1.w, this.row2.x, this.row2.y, this.row2.z, this.row2.w, this.row3.x, this.row3.y, this.row3.z, this.row3.w);
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.writeStreamer($Franca_Vector4).call(writer, this.row0, 'row0', false);
				writer.writeStreamer($Franca_Vector4).call(writer, this.row1, 'row1', false);
				writer.writeStreamer($Franca_Vector4).call(writer, this.row2, 'row2', false);
				writer.writeStreamer($Franca_Vector4).call(writer, this.row3, 'row3', false);
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [ss.IEquatable, $System_ICloneable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_Matrix4]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_Matrix4.$ctor2.prototype = $Franca_Matrix4.$ctor3.prototype = $Franca_Matrix4.$ctor1.prototype = $Franca_Matrix4.prototype;
	$Franca_Matrix4.__class = false;
	ss.initClass($Franca_NumberExtensions, $asm, {});
	ss.initClass($Franca_ParsableAttribute, $asm, {});
	ss.initClass($Franca_Platform, $asm, {});
	ss.initEnum($Franca_PlatformType, $asm, { Native: 0, Firefox: 1, IE: 2, Chrome: 3, Safari: 4, Opera: 5, Other: 6 });
	ss.initClass($Franca_Point, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_Point);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).x === this.x && ss.unbox(b).y === this.y;
		},
		equalsT: function(p) {
			return this.x === p.x && this.y === p.y;
		},
		getHashCode: function() {
			return ss.getHashCode(this.x) ^ ss.getHashCode(this.y);
		},
		fromJson: function(json) {
			return new $Franca_Point.$ctor2($Franca_JsonValue.op_Implicit$5(json.get_item('x')), $Franca_JsonValue.op_Implicit$5(json.get_item('y')));
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('x', $Franca_JsonValue.op_Implicit$s(this.x));
			json.set_item('y', $Franca_JsonValue.op_Implicit$s(this.y));
			return json;
		},
		toString: function() {
			return ss.formatString('[Point: X={0}, Y={1}]', this.x, this.y);
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.write$4(this.x >> 0, 'x');
				writer.write$4(this.y >> 0, 'y');
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [ss.IEquatable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_Point]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_Point.$ctor2.prototype = $Franca_Point.$ctor1.prototype = $Franca_Point.prototype;
	$Franca_Point.__class = false;
	ss.initClass($Franca_PointF, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_PointF);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).x === this.x && ss.unbox(b).y === this.y;
		},
		equalsT: function(p) {
			return this.x === p.x && this.y === p.y;
		},
		getHashCode: function() {
			return ss.getHashCode(this.x) ^ ss.getHashCode(this.y);
		},
		fromJson: function(json) {
			return new $Franca_PointF.$ctor2($Franca_JsonValue.op_Implicit$3(json.get_item('x')), $Franca_JsonValue.op_Implicit$3(json.get_item('y')));
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('x', $Franca_JsonValue.op_Implicit$q(this.x));
			json.set_item('y', $Franca_JsonValue.op_Implicit$q(this.y));
			return json;
		},
		toString: function() {
			return ss.formatString('[PointF: X={0}, Y={1}]', this.x, this.y);
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.write$2(this.x, 'x');
				writer.write$2(this.y, 'y');
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [ss.IEquatable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_PointF]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_PointF.$ctor2.prototype = $Franca_PointF.$ctor1.prototype = $Franca_PointF.prototype;
	$Franca_PointF.__class = false;
	ss.initClass($Franca_PreloaderInfoAttribute, $asm, {
		get_contentFile: function() {
			return this.$2$ContentFileField;
		},
		set_contentFile: function(value) {
			this.$2$ContentFileField = value;
		}
	});
	ss.initClass($Franca_Quaternion, $asm, {});
	$Franca_Quaternion.$ctor3.prototype = $Franca_Quaternion.$ctor2.prototype = $Franca_Quaternion.$ctor1.prototype = $Franca_Quaternion.prototype;
	ss.initClass($Franca_Rectangle, $asm, {
		get_center: function() {
			return new $Franca_PointF.$ctor2(this.location.x + this.size.width / 2, this.location.y + this.size.height / 2);
		},
		get_centerV2: function() {
			return new $Franca_Vector2.$ctor3(this.location.x + this.size.width / 2, this.location.y + this.size.height / 2);
		},
		contains$2: function(x, y) {
			return this.location.x <= x && x < this.location.x + this.size.width && this.location.y <= y && y < this.location.y + this.size.height;
		},
		contains: function(point) {
			return this.location.x <= point.x && point.x < this.location.x + this.size.width && this.location.y <= point.y && point.y < this.location.y + this.size.height;
		},
		contains$1: function(rect) {
			return this.location.x <= rect.location.x && rect.location.x + rect.size.width <= this.location.x + this.size.width && this.location.y <= rect.location.y && rect.location.y + rect.size.height <= this.location.y + this.size.height;
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_Rectangle);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return $Franca_Point.op_Equality(ss.unbox(b).location, this.location) && $Franca_Size.op_Equality(ss.unbox(b).size, this.size);
		},
		equalsT: function(r) {
			return $Franca_Point.op_Equality(this.location, r.location) && $Franca_Size.op_Equality(this.size, r.size);
		},
		getHashCode: function() {
			return this.location.getHashCode() ^ this.size.getHashCode();
		},
		fromJson: function(json) {
			return new $Franca_Rectangle.$ctor3($Franca_JsonValue.op_Implicit$5(json.get_item('x')), $Franca_JsonValue.op_Implicit$5(json.get_item('y')), $Franca_JsonValue.op_Implicit$5(json.get_item('width')), $Franca_JsonValue.op_Implicit$5(json.get_item('height')));
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('x', $Franca_JsonValue.op_Implicit$s(this.location.x));
			json.set_item('y', $Franca_JsonValue.op_Implicit$s(this.location.y));
			json.set_item('width', $Franca_JsonValue.op_Implicit$s(this.size.width));
			json.set_item('height', $Franca_JsonValue.op_Implicit$s(this.size.height));
			return json;
		},
		intersects: function(b) {
			if (this.size.width === 0 || this.size.height === 0 || b.size.width === 0 || b.size.height === 0) {
				return false;
			}
			return !(this.location.x + this.size.width <= b.location.x || this.location.y + this.size.height <= b.location.y || this.location.x >= b.location.x + b.size.width || this.location.y >= b.location.y + b.size.height);
		},
		intersects$1: function(x, y, width, height) {
			if (this.size.width === 0 || this.size.height === 0 || width === 0 || height === 0) {
				return false;
			}
			return !(this.location.x + this.size.width <= x || this.location.y + this.size.height <= y || this.location.x >= x + width || this.location.y >= y + height);
		},
		inflate: function(value) {
			return new $Franca_Rectangle.$ctor3(this.location.x - value, this.location.y - value, this.size.width + value * 2, this.size.height + value * 2);
		},
		inflate$1: function(horizontal, vertical) {
			return new $Franca_Rectangle.$ctor3(this.location.x - horizontal, this.location.y - vertical, this.size.width + horizontal * 2, this.size.height + vertical * 2);
		},
		inflate$2: function(left, top, right, bottom) {
			return new $Franca_Rectangle.$ctor3(this.location.x - left, this.location.y - top, this.size.width + left + right, this.size.height + top + bottom);
		},
		deflate: function(value) {
			if (this.size.width - value * 2 <= 0 || this.size.height - value * 2 <= 0) {
				return new $Franca_Rectangle.$ctor3(0, 0, 0, 0);
			}
			return new $Franca_Rectangle.$ctor3(this.location.x + value, this.location.y + value, this.size.width - value * 2, this.size.height - value * 2);
		},
		deflate$1: function(horizontal, vertical) {
			if (this.size.width - horizontal * 2 <= 0 || this.size.height - vertical * 2 <= 0) {
				return new $Franca_Rectangle.$ctor3(0, 0, 0, 0);
			}
			return new $Franca_Rectangle.$ctor3(this.location.x + horizontal, this.location.y + vertical, this.size.width - horizontal * 2, this.size.height - vertical * 2);
		},
		deflate$2: function(left, top, right, bottom) {
			if (this.size.width - (left + right) <= 0 || this.size.height - (top + bottom) <= 0) {
				return new $Franca_Rectangle.$ctor3(0, 0, 0, 0);
			}
			return new $Franca_Rectangle.$ctor3(this.location.x + left, this.location.y + top, this.size.width - (left + right), this.size.height - (top + bottom));
		},
		toString: function() {
			return ss.formatString('[Rectangle: X={0}, Y={1}, W={2}, H={3}]', this.location.x, this.location.y, this.size.width, this.size.height);
		},
		get_points: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, y, x;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									y = this.location.y;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!(y < this.location.y + this.size.height)) {
										$state = -1;
										break $sm1;
									}
									x = this.location.x;
									$state = 3;
									continue $sm1;
								}
								case 3: {
									$state = -1;
									if (!(x < this.location.x + this.size.width)) {
										$state = 2;
										continue $sm1;
									}
									$result = new $Franca_Point.$ctor2(x, y);
									$state = 4;
									return true;
								}
								case 2: {
									$state = -1;
									y++;
									$state = 1;
									continue $sm1;
								}
								case 4: {
									$state = -1;
									x++;
									$state = 3;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.write$4(this.location.x >> 0, 'x');
				writer.write$4(this.location.y >> 0, 'y');
				writer.write$4(this.size.width >> 0, 'width');
				writer.write$4(this.size.height >> 0, 'height');
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [ss.IEquatable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_Rectangle]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_Rectangle.$ctor3.prototype = $Franca_Rectangle.$ctor2.prototype = $Franca_Rectangle.$ctor1.prototype = $Franca_Rectangle.prototype;
	$Franca_Rectangle.__class = false;
	ss.initClass($Franca_RectangleF, $asm, {
		get_center: function() {
			return new $Franca_PointF.$ctor2(this.location.x + this.size.width / 2, this.location.y + this.size.height / 2);
		},
		get_centerV2: function() {
			return new $Franca_Vector2.$ctor3(this.location.x + this.size.width / 2, this.location.y + this.size.height / 2);
		},
		contains$2: function(x, y) {
			return this.location.x <= x && x < this.location.x + this.size.width && this.location.y <= y && y < this.location.y + this.size.height;
		},
		contains: function(point) {
			return this.location.x <= point.x && point.x < this.location.x + this.size.width && this.location.y <= point.y && point.y < this.location.y + this.size.height;
		},
		contains$1: function(vec) {
			return this.location.x <= vec.x && vec.x < this.location.x + this.size.width && this.location.y <= vec.y && vec.y < this.location.y + this.size.height;
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_RectangleF);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return $Franca_PointF.op_Equality(ss.unbox(b).location, this.location) && $Franca_SizeF.op_Equality(ss.unbox(b).size, this.size);
		},
		equalsT: function(r) {
			return $Franca_PointF.op_Equality(this.location, r.location) && $Franca_SizeF.op_Equality(this.size, r.size);
		},
		getHashCode: function() {
			return this.location.getHashCode() ^ this.size.getHashCode();
		},
		fromJson: function(json) {
			return new $Franca_RectangleF.$ctor3($Franca_JsonValue.op_Implicit$3(json.get_item('x')), $Franca_JsonValue.op_Implicit$3(json.get_item('y')), $Franca_JsonValue.op_Implicit$3(json.get_item('width')), $Franca_JsonValue.op_Implicit$3(json.get_item('height')));
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('x', $Franca_JsonValue.op_Implicit$q(this.location.x));
			json.set_item('y', $Franca_JsonValue.op_Implicit$q(this.location.y));
			json.set_item('width', $Franca_JsonValue.op_Implicit$q(this.size.width));
			json.set_item('height', $Franca_JsonValue.op_Implicit$q(this.size.height));
			return json;
		},
		intersects: function(b) {
			if (this.size.width === 0 || this.size.height === 0 || b.size.width === 0 || b.size.height === 0) {
				return false;
			}
			return !(this.location.x + this.size.width <= b.location.x || this.location.y + this.size.height <= b.location.y || this.location.x >= b.location.x + b.size.width || this.location.y >= b.location.y + b.size.height);
		},
		intersects$1: function(x, y, width, height) {
			if (this.size.width === 0 || this.size.height === 0 || width === 0 || height === 0) {
				return false;
			}
			return !(this.location.x + this.size.width <= x || this.location.y + this.size.height <= y || this.location.x >= x + width || this.location.y >= y + height);
		},
		inflate: function(value) {
			return new $Franca_RectangleF.$ctor3(this.location.x - value, this.location.y - value, this.size.width + value * 2, this.size.height + value * 2);
		},
		inflate$1: function(horizontal, vertical) {
			return new $Franca_RectangleF.$ctor3(this.location.x - horizontal, this.location.y - vertical, this.size.width + horizontal * 2, this.size.height + vertical * 2);
		},
		inflate$2: function(left, top, right, bottom) {
			return new $Franca_RectangleF.$ctor3(this.location.x - left, this.location.y - top, this.size.width + left + right, this.size.height + top + bottom);
		},
		deflate: function(value) {
			if (this.size.width - value * 2 <= 0 || this.size.height - value * 2 <= 0) {
				return new $Franca_RectangleF.$ctor3(0, 0, 0, 0);
			}
			return new $Franca_RectangleF.$ctor3(this.location.x + value, this.location.y + value, this.size.width - value * 2, this.size.height - value * 2);
		},
		deflate$1: function(horizontal, vertical) {
			if (this.size.width - horizontal * 2 <= 0 || this.size.height - vertical * 2 <= 0) {
				return new $Franca_RectangleF.$ctor3(0, 0, 0, 0);
			}
			return new $Franca_RectangleF.$ctor3(this.location.x + horizontal, this.location.y + vertical, this.size.width - horizontal * 2, this.size.height - vertical * 2);
		},
		deflate$2: function(left, top, right, bottom) {
			if (this.size.width - (left + right) <= 0 || this.size.height - (top + bottom) <= 0) {
				return new $Franca_RectangleF.$ctor3(0, 0, 0, 0);
			}
			return new $Franca_RectangleF.$ctor3(this.location.x + left, this.location.y + top, this.size.width - (left + right), this.size.height - (top + bottom));
		},
		toString: function() {
			return ss.formatString('[RectangleF: X={0}, Y={1}, W={2}, H={3}]', this.location.x, this.location.y, this.size.width, this.size.height);
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.writeNumber(this.location.x, 'x');
				writer.writeNumber(this.location.y, 'y');
				writer.writeNumber(this.size.width, 'width');
				writer.writeNumber(this.size.height, 'height');
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [ss.IEquatable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_RectangleF]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_RectangleF.$ctor3.prototype = $Franca_RectangleF.$ctor2.prototype = $Franca_RectangleF.$ctor1.prototype = $Franca_RectangleF.prototype;
	$Franca_RectangleF.__class = false;
	ss.initClass($Franca_ResourceString, $asm, {});
	ss.initClass($Franca_Resumable, $asm, { run: null, runUntil: null, tick: null, pause: null, reset: null, dispose: null, get_done: null }, null, [ss.IDisposable]);
	ss.initClass($Franca_RNG, $asm, {
		fromJson: function(json) {
			return new $Franca_RNG.$ctor3($Franca_JsonValue.op_Implicit$5(json.get_item('seed')), $Franca_JsonValue.op_Implicit$5(json.get_item('x')), $Franca_JsonValue.op_Implicit$5(json.get_item('y')), $Franca_JsonValue.op_Implicit$5(json.get_item('z')), $Franca_JsonValue.op_Implicit$5(json.get_item('w')));
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('seed', $Franca_JsonValue.op_Implicit$s(this.$seed));
			json.set_item('x', $Franca_JsonValue.op_Implicit$q(this.$xor.x));
			json.set_item('y', $Franca_JsonValue.op_Implicit$q(this.$xor.y));
			json.set_item('z', $Franca_JsonValue.op_Implicit$q(this.$xor.z));
			json.set_item('w', $Franca_JsonValue.op_Implicit$q(this.$xor.w));
			return json;
		},
		next: function() {
			return this.$xor.next();
		},
		nextMax: function(maxValue) {
			return Math.floor(this.nextDouble() * maxValue);
		},
		nextMinMax: function(minValue, maxValue) {
			return Math.floor(this.nextDouble() * (maxValue - minValue)) + minValue;
		},
		nextDouble: function() {
			return this.next() / 2147483648;
		},
		nextBytes: function(buffer) {
			var max = Math.ceil(buffer.length / 4);
			for (var i = 0, j = 0; i < max; i++) {
				var rndInt = this.next();
				if (j < buffer.length) {
					buffer[j] = rndInt & 255;
					j++;
				}
				else {
					break;
				}
				if (j < buffer.length) {
					buffer[j] = rndInt >> 8 & 255;
					j++;
				}
				else {
					break;
				}
				if (j < buffer.length) {
					buffer[j] = rndInt >> 16 & 255;
					j++;
				}
				else {
					break;
				}
				if (j < buffer.length) {
					buffer[j] = rndInt >> 24 & 255;
					j++;
				}
				else {
					break;
				}
			}
		},
		sample: function() {
			return this.nextDouble();
		},
		get_seed: function() {
			return this.$seed;
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.write$4(this.$seed >> 0, 'seed');
				writer.write$4(this.$xor.x >> 0, 'x');
				writer.write$4(this.$xor.y >> 0, 'y');
				writer.write$4(this.$xor.z >> 0, 'z');
				writer.write$4(this.$xor.w >> 0, 'w');
			}
			finally {
				$t1.dispose();
			}
		}
	}, ss.Random, [$Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_RNG]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_RNG.$ctor2.prototype = $Franca_RNG.$ctor3.prototype = $Franca_RNG.$ctor1.prototype = $Franca_RNG.prototype;
	ss.initEnum($Franca_RotationOrigin, $asm, { Left: 0, Right: 1, Top: 2, Bottom: 3, Default: 0 });
	ss.initEnum($Franca_RoundingStyle, $asm, { default$1: 0, bankers: 1, awayFromZero: 2 });
	ss.initClass($Franca_SeekException, $asm, {}, ss.Exception);
	$Franca_SeekException.$ctor1.prototype = $Franca_SeekException.$ctor2.prototype = $Franca_SeekException.prototype;
	ss.initEnum($Franca_SeekOrigin, $asm, { Begin: 0, Current: 1, End: 2 });
	ss.initClass($Franca_ShuffleExtension, $asm, {});
	ss.initClass($Franca_Size, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_Size);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).width === this.width && ss.unbox(b).height === this.height;
		},
		equalsT: function(p) {
			return this.width === p.width && this.height === p.height;
		},
		getHashCode: function() {
			return ss.getHashCode(this.width) ^ ss.getHashCode(this.height);
		},
		fromJson: function(json) {
			return new $Franca_Size.$ctor2($Franca_JsonValue.op_Implicit$5(json.get_item('width')), $Franca_JsonValue.op_Implicit$5(json.get_item('height')));
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('width', $Franca_JsonValue.op_Implicit$s(this.width));
			json.set_item('height', $Franca_JsonValue.op_Implicit$s(this.height));
			return json;
		},
		toString: function() {
			return ss.formatString('[Size: W={0}, H={1}]', this.width, this.height);
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.write$4(this.width >> 0, 'width');
				writer.write$4(this.height >> 0, 'height');
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [ss.IEquatable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_Size]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_Size.$ctor2.prototype = $Franca_Size.$ctor1.prototype = $Franca_Size.prototype;
	$Franca_Size.__class = false;
	ss.initClass($Franca_SizeF, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_SizeF);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).width === this.width && ss.unbox(b).height === this.height;
		},
		equalsT: function(p) {
			return this.width === p.width && this.height === p.height;
		},
		getHashCode: function() {
			return ss.getHashCode(this.width) ^ ss.getHashCode(this.height);
		},
		fromJson: function(json) {
			return new $Franca_SizeF.$ctor2($Franca_JsonValue.op_Implicit$3(json.get_item('width')), $Franca_JsonValue.op_Implicit$3(json.get_item('height')));
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('width', $Franca_JsonValue.op_Implicit$q(this.width));
			json.set_item('height', $Franca_JsonValue.op_Implicit$q(this.height));
			return json;
		},
		toString: function() {
			return ss.formatString('[SizeF: W={0}, H={1}]', this.width, this.height);
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.write$2(this.width, 'width');
				writer.write$2(this.height, 'height');
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [ss.IEquatable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_SizeF]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_SizeF.$ctor2.prototype = $Franca_SizeF.$ctor1.prototype = $Franca_SizeF.prototype;
	$Franca_SizeF.__class = false;
	ss.initClass($Franca_StreamExtensions, $asm, {});
	ss.initClass($Franca_StringBuilderExtensions, $asm, {});
	ss.initClass($Franca_StringHelper, $asm, {});
	ss.initClass($Franca_StringHelper$CodePointEnumerator, $asm, {
		getEnumerator$1: function() {
			return new $Franca_StringHelper$CodePointEnumerator$Enumerator(this.$s, this.$start, this.$end, this.$reversed);
		},
		getEnumerator: function() {
			return this.getEnumerator$1();
		},
		getHashCode: function() {
			var h = (this.$s ? ss.getHashCode(this.$s) : 0);
			h = h * 397 ^ this.$start;
			h = h * 397 ^ this.$end;
			h = h * 397 ^ (this.$reversed ? 1 : 0);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_StringHelper$CodePointEnumerator)) {
				return false;
			}
			return ss.equals(this.$s, o.$s) && this.$start === o.$start && this.$end === o.$end && this.$reversed === o.$reversed;
		}
	}, null, [ss.IEnumerable, ss.IEnumerable]);
	$Franca_StringHelper$CodePointEnumerator.$ctor1.prototype = $Franca_StringHelper$CodePointEnumerator.prototype;
	$Franca_StringHelper$CodePointEnumerator.__class = false;
	ss.initClass($Franca_StringHelper$CodePointEnumerator$Enumerator, $asm, {
		$reset: function() {
			if (this.$reversed) {
				this.$lastIndex = this.$index = this.$end - 1;
			}
			else {
				this.$lastIndex = this.$index = this.$start;
			}
			this.$current = this.$prev = 0;
			this.$next = this.$peek();
		},
		dispose: function() {
		},
		skip: function(charCount) {
			if (charCount < 0) {
				throw new ss.ArgumentOutOfRangeException('charCount', 'Skip count must be 0 or greater.');
			}
			if (this.$reversed) {
				this.$index = Math.max(this.$start - 1, this.$index - charCount);
			}
			else {
				this.$index = Math.min(this.$end, this.$index + charCount);
			}
			this.$next = this.$peek();
		},
		moveNext: function() {
			if (this.$reversed) {
				if (this.$index >= this.$start) {
					this.$prev = this.$current;
					this.$current = this.$next;
					this.$lastIndex = this.$index;
					this.$index -= ($Franca_StringHelper.isSurrogatePair$1(this.$s, this.$index, true) ? 2 : 1);
					this.$next = this.$peek();
					return true;
				}
			}
			else if (this.$index < this.$end) {
				this.$prev = this.$current;
				this.$current = this.$next;
				this.$lastIndex = this.$index;
				this.$index += ($Franca_StringHelper.isSurrogatePair$1(this.$s, this.$index, false) ? 2 : 1);
				this.$next = this.$peek();
				return true;
			}
			return this.$moveNextRare();
		},
		$moveNextRare: function() {
			this.$index = (this.$reversed ? (this.$start - 2) : (this.$end + 1));
			this.$lastIndex = this.$index;
			this.$current = 0;
			this.$next = 0;
			return false;
		},
		$peek: function() {
			if (this.$reversed) {
				if (this.$index >= this.$start) {
					return $Franca_StringHelper.$_GetCodePointAt(this.$s, this.$index, true);
				}
			}
			else if (this.$index < this.$end) {
				return $Franca_StringHelper.$_GetCodePointAt(this.$s, this.$index, false);
			}
			return 0;
		},
		current: function() {
			return this.$current;
		},
		get_next: function() {
			return this.$next;
		},
		get_prev: function() {
			return this.$prev;
		},
		get_index: function() {
			// we want Index to mean "index of the current item", but MoveNext will move index
			// to the next item after setting the current item, so we want the previous index
			return this.$lastIndex;
		},
		reset: function() {
			this.$reset();
		}
	}, null, [ss.IDisposable, ss.IEnumerator, ss.IEnumerator]);
	ss.initClass($Franca_TextAlign, $asm, {
		get_horizontal: function() {
			return this.$1$HorizontalField;
		},
		set_horizontal: function(value) {
			this.$1$HorizontalField = value;
		},
		get_vertical: function() {
			return this.$1$VerticalField;
		},
		set_vertical: function(value) {
			this.$1$VerticalField = value;
		},
		toString: function() {
			return $System_StringExtensions.toLowerInvariant($System_EnumExtensions.getName($Franca_HAlign).call(null, this.get_horizontal())) + ', ' + $System_StringExtensions.toLowerInvariant($System_EnumExtensions.getName($Franca_VAlign).call(null, this.get_vertical()));
		}
	});
	ss.initClass($Franca_TypeHelper, $asm, {});
	ss.initClass($Franca_TypeReflectionException, $asm, {}, ss.Exception);
	$Franca_TypeReflectionException.$ctor1.prototype = $Franca_TypeReflectionException.$ctor2.prototype = $Franca_TypeReflectionException.prototype;
	ss.initClass($Franca_UnknownPlatformException, $asm, {}, ss.Exception);
	$Franca_UnknownPlatformException.$ctor1.prototype = $Franca_UnknownPlatformException.$ctor2.prototype = $Franca_UnknownPlatformException.prototype;
	ss.initClass($Franca_UtcDate, $asm, {
		fromJson: function(json) {
			if (json.get_isObject()) {
				// backwards compatibility
				return $Franca_UtcDate.parse($Franca_JsonValue.op_Implicit$k(json.get_item('date')));
			}
			else {
				return $Franca_UtcDate.parse($Franca_JsonValue.op_Implicit$k(json));
			}
		},
		toJson: function() {
			//var json = JsonValue.Dict;
			//json["date"] = ToString();
			//return json;
			return new $Franca_JsonValue.$ctork(this.toString());
		},
		toString: function() {
			return (new Date(this.$value - $Franca_UtcDate.msToUnixEpoch)).toISOString();
		},
		toUtcString: function() {
			var d = new Date(this.$value - $Franca_UtcDate.msToUnixEpoch);
			return ss.formatString('{0}, {1} {2} {3} {4}:{5}:{6} GMT', $Franca_UtcDate.$abbreviatedDayNames[d.getUTCDay()], ss.formatNumber(d.getUTCDate(), 'D2'), $Franca_UtcDate.$abbreviatedMonthNames[d.getUTCMonth()], ss.formatNumber(d.getUTCFullYear(), 'D4'), ss.formatNumber(d.getUTCHours(), 'D2'), ss.formatNumber(d.getUTCMinutes(), 'D2'), ss.formatNumber(d.getUTCSeconds(), 'D2'));
		},
		toLocalString: function() {
			var d = new Date(this.$value - $Franca_UtcDate.msToUnixEpoch);
			var offset = d.getTimezoneOffset() * -1;
			var offsetHours = Math.floor(ss.Int32.div(offset, 60));
			var offsetMinutes = offset - offsetHours * 60;
			return ss.formatString('{0}, {1} {2} {3} {4}:{5}:{6} GMT{7}{8}:{9}', $Franca_UtcDate.$abbreviatedDayNames[d.getDay()], ss.formatNumber(d.getDate(), 'D2'), $Franca_UtcDate.$abbreviatedMonthNames[d.getMonth()], ss.formatNumber(d.getFullYear(), 'D4'), ss.formatNumber(d.getHours(), 'D2'), ss.formatNumber(d.getMinutes(), 'D2'), ss.formatNumber(d.getSeconds(), 'D2'), ((offset < 0) ? '' : '+'), ss.formatNumber(offsetHours, 'D2'), ss.formatNumber(offsetMinutes, 'D2'));
		},
		toHttpDateString: function() {
			return this.toUtcString();
		},
		get_ticks: function() {
			return this.$value * $Franca_UtcDate.ticksPerMillisecond;
		},
		get_totalMilliseconds: function() {
			return this.$value;
		},
		getHashCode: function() {
			return ss.getHashCode(this.$value);
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_UtcDate);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).$value === this.$value;
		},
		equalsT: function(b) {
			return b.$value === this.$value;
		},
		compareTo: function(other) {
			return ss.compare(this.$value, other.$value);
		},
		writeJson: function(writer) {
			writer.write$p(this.toString(), null, true, 0, -1);
		}
	}, null, [$Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_UtcDate]), ss.IEquatable, ss.IComparable, $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_UtcDate.$ctor2.prototype = $Franca_UtcDate.$ctor3.prototype = $Franca_UtcDate.$ctor1.prototype = $Franca_UtcDate.prototype;
	$Franca_UtcDate.__class = false;
	ss.initEnum($Franca_VAlign, $asm, { top: 0, center: 1, bottom: 2 });
	ss.initClass($Franca_Vector2, $asm, {
		equals: function(obj) {
			if (ss.isInstanceOfType(obj, $Franca_Vector2)) {
				return this.equalsT(ss.unbox(ss.cast(obj, $Franca_Vector2)));
			}
			return false;
		},
		equalsT: function(other) {
			return this.x === other.x && this.y === other.y;
		},
		getHashCode: function() {
			return ss.getHashCode(this.x) ^ ss.getHashCode(this.y);
		},
		length: function() {
			return Math.sqrt(this.x * this.x + this.y * this.y);
		},
		lengthSquared: function() {
			return this.x * this.x + this.y * this.y;
		},
		normalize: function() {
			return $Franca_Vector2.normalize(this);
		},
		toString: function() {
			return ss.formatString('{{X:{0} Y:{1}}}', $System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.x), $System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.y));
		},
		fromJson: function(json) {
			return new $Franca_Vector2.$ctor3($Franca_JsonValue.op_Implicit$3(json.get_item('x')), $Franca_JsonValue.op_Implicit$3(json.get_item('y')));
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('x', $Franca_JsonValue.op_Implicit$q(this.x));
			json.set_item('y', $Franca_JsonValue.op_Implicit$q(this.y));
			return json;
		},
		getRotation: function(origin) {
			return $Franca_VectorMath.getRotation(this, origin);
		},
		rotate: function(angle) {
			return $Franca_VectorMath.rotateVector(this, angle);
		},
		floor: function() {
			return new $Franca_Vector2.$ctor3(Math.floor(this.x), Math.floor(this.y));
		},
		round: function() {
			return new $Franca_Vector2.$ctor3(Math.round(this.x), Math.round(this.y));
		},
		ceiling: function() {
			return new $Franca_Vector2.$ctor3(Math.ceil(this.x), Math.ceil(this.y));
		},
		abs: function() {
			return new $Franca_Vector2.$ctor3(Math.abs(this.x), Math.abs(this.y));
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.write$2(this.x, 'x');
				writer.write$2(this.y, 'y');
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [ss.IEquatable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_Vector2]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_Vector2.$ctor3.prototype = $Franca_Vector2.$ctor2.prototype = $Franca_Vector2.$ctor1.prototype = $Franca_Vector2.prototype;
	$Franca_Vector2.__class = false;
	ss.initClass($Franca_Vector3, $asm, {
		equals: function(obj) {
			return (ss.isInstanceOfType(obj, $Franca_Vector3) ? $Franca_Vector3.op_Equality(this, ss.unbox(ss.cast(obj, $Franca_Vector3))) : false);
		},
		equalsT: function(other) {
			return $Franca_Vector3.op_Equality(this, other);
		},
		getHashCode: function() {
			return ss.getHashCode(this.x) ^ ss.getHashCode(this.y) ^ ss.getHashCode(this.z);
		},
		length: function() {
			var result = $Franca_Vector3.distanceSquared(this, $Franca_Vector3.$zero);
			return Math.sqrt(result);
		},
		lengthSquared: function() {
			return $Franca_Vector3.distanceSquared(this, $Franca_Vector3.$zero);
		},
		normalize: function() {
			return $Franca_Vector3.normalize(this);
		},
		toString: function() {
			var sb = $Franca_Vector3.get_$toStringBuilder();
			sb.clear();
			sb.append('{X:');
			sb.append($System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.x));
			sb.append(' Y:');
			sb.append($System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.y));
			sb.append(' Z:');
			sb.append($System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.z));
			sb.append('}');
			return sb.toString();
		},
		fromJson: function(json) {
			return new $Franca_Vector3.$ctor4($Franca_JsonValue.op_Implicit$3(json.get_item('x')), $Franca_JsonValue.op_Implicit$3(json.get_item('y')), $Franca_JsonValue.op_Implicit$3(json.get_item('z')));
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('x', $Franca_JsonValue.op_Implicit$q(this.x));
			json.set_item('y', $Franca_JsonValue.op_Implicit$q(this.y));
			json.set_item('z', $Franca_JsonValue.op_Implicit$q(this.z));
			return json;
		},
		floor: function() {
			return new $Franca_Vector3.$ctor4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));
		},
		round: function() {
			return new $Franca_Vector3.$ctor4(Math.round(this.x), Math.round(this.y), Math.round(this.z));
		},
		ceiling: function() {
			return new $Franca_Vector3.$ctor4(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.z));
		},
		abs: function() {
			return new $Franca_Vector3.$ctor4(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.write$2(this.x, 'x');
				writer.write$2(this.y, 'y');
				writer.write$2(this.z, 'z');
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [ss.IEquatable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_Vector3]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_Vector3.$ctor4.prototype = $Franca_Vector3.$ctor2.prototype = $Franca_Vector3.$ctor3.prototype = $Franca_Vector3.$ctor1.prototype = $Franca_Vector3.prototype;
	$Franca_Vector3.__class = false;
	ss.initClass($Franca_Vector4, $asm, {
		equals: function(obj) {
			return (ss.isInstanceOfType(obj, $Franca_Vector4) ? $Franca_Vector4.op_Equality(this, ss.unbox(ss.cast(obj, $Franca_Vector4))) : false);
		},
		equalsT: function(other) {
			return $Franca_Vector4.op_Equality(this, other);
		},
		getHashCode: function() {
			return ss.getHashCode(this.x) ^ ss.getHashCode(this.y) ^ ss.getHashCode(this.z) ^ ss.getHashCode(this.w);
		},
		toString: function() {
			var sb = $Franca_Vector4.get_$toStringBuilder();
			sb.clear();
			sb.append('{X:');
			sb.append($System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.x));
			sb.append(' Y:');
			sb.append($System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.y));
			sb.append(' Z:');
			sb.append($System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.z));
			sb.append(' W:');
			sb.append($System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.w));
			sb.append('}');
			return sb.toString();
		},
		fromJson: function(json) {
			return new $Franca_Vector4.$ctor5($Franca_JsonValue.op_Implicit$3(json.get_item('x')), $Franca_JsonValue.op_Implicit$3(json.get_item('y')), $Franca_JsonValue.op_Implicit$3(json.get_item('z')), $Franca_JsonValue.op_Implicit$3(json.get_item('w')));
		},
		toJson: function() {
			var json = new $Franca_JObject();
			json.set_item('x', $Franca_JsonValue.op_Implicit$q(this.x));
			json.set_item('y', $Franca_JsonValue.op_Implicit$q(this.y));
			json.set_item('z', $Franca_JsonValue.op_Implicit$q(this.z));
			json.set_item('w', $Franca_JsonValue.op_Implicit$q(this.w));
			return json;
		},
		floor: function() {
			return new $Franca_Vector4.$ctor5(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));
		},
		round: function() {
			return new $Franca_Vector4.$ctor5(Math.round(this.x), Math.round(this.y), Math.round(this.z), Math.round(this.w));
		},
		ceiling: function() {
			return new $Franca_Vector4.$ctor5(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.z), Math.ceil(this.w));
		},
		abs: function() {
			return new $Franca_Vector4.$ctor5(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z), Math.abs(this.w));
		},
		normalize: function() {
			return $Franca_Vector4.normalize(this);
		},
		length: function() {
			var result = $Franca_Vector4.distanceSquared(this, $Franca_Vector4.zero);
			return Math.sqrt(result);
		},
		lengthSquared: function() {
			return $Franca_Vector4.distanceSquared(this, $Franca_Vector4.zero);
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.write$2(this.x, 'x');
				writer.write$2(this.y, 'y');
				writer.write$2(this.z, 'z');
				writer.write$2(this.w, 'w');
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [ss.IEquatable, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_Vector4]), $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_Vector4.$ctor5.prototype = $Franca_Vector4.$ctor2.prototype = $Franca_Vector4.$ctor4.prototype = $Franca_Vector4.$ctor3.prototype = $Franca_Vector4.$ctor1.prototype = $Franca_Vector4.prototype;
	$Franca_Vector4.__class = false;
	ss.initClass($Franca_VectorMath, $asm, {});
	ss.initClass($Franca_$Compression_Deflate$Huffman, $asm, {});
	ss.initClass($Franca_$Compression_Deflate$State, $asm, {});
	ss.initClass($Franca_$Text_Base32$Base32Mask, $asm, {});
	$Franca_$Text_Base32$Base32Mask.$ctor1.prototype = $Franca_$Text_Base32$Base32Mask.prototype;
	ss.initClass($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter, $asm, {});
	ss.initClass($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag, $asm, {});
	ss.initEnum($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$TagType, $asm, { $none: 0, $bold: 1, $italic: 2, $underline: 4, $color: 8, $size: 16 });
	ss.initClass($Franca_Collections_TypedArray, $asm, {
		set: function(array) {
			this.set$1(array, 0);
		},
		getValue: null,
		set$1: null,
		resize: null,
		subarrayBlock: null,
		subarrayBlock$1: null,
		get_bytesPerElement: null,
		get_length: null,
		get_byteLength: function() {
			return this.get_length() * this.get_bytesPerElement();
		},
		get_underlyingObject: null,
		getEnumerator: function() {
			var $result, $state = 0, i;
			return new ss.IteratorBlockEnumerator(function() {
				$sm1:
				for (;;) {
					switch ($state) {
						case 0: {
							$state = -1;
							i = 0;
							$state = 1;
							continue $sm1;
						}
						case 1: {
							$state = -1;
							if (!(i < this.get_length())) {
								$state = -1;
								break $sm1;
							}
							$result = new $Franca_JsonValue.$ctorh(this.getValue(i));
							$state = 2;
							return true;
						}
						case 2: {
							$state = -1;
							i++;
							$state = 1;
							continue $sm1;
						}
						default: {
							break $sm1;
						}
					}
				}
				return false;
			}, function() {
				return $result;
			}, null, this);
		}
	}, null, [ss.IEnumerable, ss.IEnumerable]);
	ss.initClass($Franca_Collections_ByteArray, $asm, {
		getValue: function(index) {
			return this.get_item(index);
		},
		resize: function(length, retainContents) {
			var newArr = new Uint8Array(length);
			if (retainContents && ss.isValue(this.$arr)) {
				var src = this.$arr;
				if (this.$arr.length > length) {
					if ($Franca_Platform.get_type() !== 3) {
						src = new Uint8Array(this.$arr.buffer.slice(0, length));
					}
					else {
						src = this.$arr.subarray(0, length);
					}
				}
				newArr.set(src);
			}
			this.$arr = newArr;
		},
		subarrayBlock: function(byteOffset) {
			return this.subarrayBlock$1(byteOffset, this.get_byteLength());
		},
		subarrayBlock$1: function(byteOffset, byteSize) {
			if (byteOffset === 0 && byteSize === this.get_byteLength()) {
				return this;
			}
			var newArr = new $Franca_Collections_ByteArray();
			// TODO: Check if still broken for Chrome
			// NOTE: when passing using the first method below, a mysterious slow down happens under Chrome
			if ($Franca_Platform.get_type() !== 3) {
				newArr.$arr = new Uint8Array(this.$arr.buffer, byteOffset, byteSize);
			}
			else {
				newArr.$arr = new Uint8Array(this.$arr.buffer.slice(byteOffset, byteOffset + byteSize));
			}
			return newArr;
		},
		subarray: function(begin) {
			return this.subarray$1(begin, this.get_length());
		},
		subarray$1: function(begin, end) {
			var newArr = new $Franca_Collections_ByteArray();
			newArr.$arr = this.$arr.subarray(begin, end);
			return newArr;
		},
		set$3: function(array, destOffset) {
			//arr.Set(array, destOffset);
			for (var i = 0; i < array.length; i++) {
				this.$arr[destOffset + i] = array[i];
			}
		},
		set$1: function(array, destOffset) {
			this.$arr.set(new Uint8Array(array.get_underlyingObject().buffer), destOffset);
		},
		set$4: function(array) {
			this.set$5(array, 0);
		},
		set$5: function(array, destOffset) {
			this.$arr.set(array.$arr, destOffset);
		},
		get_bytesPerElement: function() {
			return 1;
		},
		get_length: function() {
			return this.$arr.length;
		},
		get_underlyingObject: function() {
			return this.$arr;
		},
		get_item: function(index) {
			return this.$arr[index];
		},
		set_item: function(index, value) {
			this.$arr[index] = value;
		}
	}, ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]), [ss.IEnumerable, ss.IEnumerable]);
	$Franca_Collections_ByteArray.$ctor1.prototype = $Franca_Collections_ByteArray.$ctor2.prototype = $Franca_Collections_ByteArray.prototype;
	ss.initClass($Franca_Collections_DoubleArray, $asm, {
		getValue: function(index) {
			return this.get_item(index);
		},
		resize: function(length, retainContents) {
			var newArr = new Float64Array(length);
			if (retainContents && ss.isValue(this.$arr)) {
				var src = this.$arr;
				if (this.$arr.length > length) {
					if ($Franca_Platform.get_type() !== 3) {
						src = new Float64Array(this.$arr.buffer.slice(0, length * this.get_bytesPerElement()));
					}
					else {
						src = this.$arr.subarray(0, length);
					}
				}
				newArr.set(src);
			}
			this.$arr = newArr;
		},
		subarrayBlock: function(byteOffset) {
			return this.subarrayBlock$1(byteOffset, this.get_byteLength());
		},
		subarrayBlock$1: function(byteOffset, byteSize) {
			if (byteOffset === 0 && byteSize === this.get_byteLength()) {
				return this;
			}
			var newArr = new $Franca_Collections_DoubleArray();
			// TODO: Check if still broken for Chrome
			// NOTE: when passing using the first method below, a mysterious slow down happens under Chrome
			if ($Franca_Platform.get_type() !== 3 && byteOffset % this.get_bytesPerElement() === 0 && byteSize % this.get_bytesPerElement() === 0) {
				newArr.$arr = new Float64Array(this.$arr.buffer, byteOffset, ss.Int32.div(byteSize, this.get_bytesPerElement()));
			}
			else {
				newArr.$arr = new Float64Array(this.$arr.buffer.slice(byteOffset, byteOffset + byteSize));
			}
			return newArr;
		},
		subarray: function(begin) {
			return this.subarray$1(begin, this.get_length());
		},
		subarray$1: function(begin, end) {
			var newArr = new $Franca_Collections_DoubleArray();
			newArr.$arr = this.$arr.subarray(begin, end);
			return newArr;
		},
		set$3: function(array, destOffset) {
			//arr.Set(array, destOffset);
			for (var i = 0; i < array.length; i++) {
				this.$arr[destOffset + i] = array[i];
			}
		},
		set$1: function(array, destOffset) {
			this.$arr.set(new Float64Array(array.get_underlyingObject().buffer), destOffset);
		},
		set$4: function(array) {
			this.set$5(array, 0);
		},
		set$5: function(array, destOffset) {
			this.$arr.set(array.$arr, destOffset);
		},
		get_bytesPerElement: function() {
			return 8;
		},
		get_length: function() {
			return this.$arr.length;
		},
		get_underlyingObject: function() {
			return this.$arr;
		},
		get_item: function(index) {
			return this.$arr[index];
		},
		set_item: function(index, value) {
			this.$arr[index] = value;
		}
	}, ss.makeGenericType($Franca_Collections_TypedArray$1, [Number]), [ss.IEnumerable, ss.IEnumerable]);
	$Franca_Collections_DoubleArray.$ctor2.prototype = $Franca_Collections_DoubleArray.$ctor1.prototype = $Franca_Collections_DoubleArray.prototype;
	ss.initClass($Franca_Collections_FloatArray, $asm, {
		getValue: function(index) {
			return this.get_item(index);
		},
		resize: function(length, retainContents) {
			var newArr = new Float32Array(length);
			if (retainContents && ss.isValue(this.$arr)) {
				var src = this.$arr;
				if (this.$arr.length > length) {
					if ($Franca_Platform.get_type() !== 3) {
						src = new Float32Array(this.$arr.buffer.slice(0, length * this.get_bytesPerElement()));
					}
					else {
						src = this.$arr.subarray(0, length);
					}
				}
				newArr.set(src);
			}
			this.$arr = newArr;
		},
		subarrayBlock: function(byteOffset) {
			return this.subarrayBlock$1(byteOffset, this.get_byteLength());
		},
		subarrayBlock$1: function(byteOffset, byteSize) {
			if (byteOffset === 0 && byteSize === this.get_byteLength()) {
				return this;
			}
			var newArr = new $Franca_Collections_FloatArray();
			// TODO: Check if still broken for Chrome
			// NOTE: when passing using the first method below, a mysterious slow down happens under Chrome
			if ($Franca_Platform.get_type() !== 3 && byteOffset % this.get_bytesPerElement() === 0 && byteSize % this.get_bytesPerElement() === 0) {
				newArr.$arr = new Float32Array(this.$arr.buffer, byteOffset, ss.Int32.div(byteSize, this.get_bytesPerElement()));
			}
			else {
				newArr.$arr = new Float32Array(this.$arr.buffer.slice(byteOffset, byteOffset + byteSize));
			}
			return newArr;
		},
		subarray: function(begin) {
			return this.subarray$1(begin, this.get_length());
		},
		subarray$1: function(begin, end) {
			var newArr = new $Franca_Collections_FloatArray();
			newArr.$arr = this.$arr.subarray(begin, end);
			return newArr;
		},
		set$3: function(array, destOffset) {
			//arr.Set(array, destOffset);
			for (var i = 0; i < array.length; i++) {
				this.$arr[destOffset + i] = array[i];
			}
		},
		set$1: function(array, destOffset) {
			this.$arr.set(new Float32Array(array.get_underlyingObject().buffer), destOffset);
		},
		set$4: function(array) {
			this.set$5(array, 0);
		},
		set$5: function(array, destOffset) {
			this.$arr.set(array.$arr, destOffset);
		},
		get_bytesPerElement: function() {
			return 4;
		},
		get_length: function() {
			return this.$arr.length;
		},
		get_underlyingObject: function() {
			return this.$arr;
		},
		get_item: function(index) {
			return this.$arr[index];
		},
		set_item: function(index, value) {
			this.$arr[index] = value;
		}
	}, ss.makeGenericType($Franca_Collections_TypedArray$1, [Number]), [ss.IEnumerable, ss.IEnumerable]);
	$Franca_Collections_FloatArray.$ctor1.prototype = $Franca_Collections_FloatArray.$ctor2.prototype = $Franca_Collections_FloatArray.prototype;
	ss.initClass($Franca_Collections_IntArray, $asm, {
		getValue: function(index) {
			return this.get_item(index);
		},
		resize: function(length, retainContents) {
			var newArr = new Int32Array(length);
			if (retainContents && ss.isValue(this.$arr)) {
				var src = this.$arr;
				if (this.$arr.length > length) {
					if ($Franca_Platform.get_type() !== 3) {
						src = new Int32Array(this.$arr.buffer.slice(0, length * this.get_bytesPerElement()));
					}
					else {
						src = this.$arr.subarray(0, length);
					}
				}
				newArr.set(src);
			}
			this.$arr = newArr;
		},
		subarrayBlock: function(byteOffset) {
			return this.subarrayBlock$1(byteOffset, this.get_byteLength());
		},
		subarrayBlock$1: function(byteOffset, byteSize) {
			if (byteOffset === 0 && byteSize === this.get_byteLength()) {
				return this;
			}
			var newArr = new $Franca_Collections_IntArray();
			// TODO: Check if still broken for Chrome
			// NOTE: when passing using the first method below, a mysterious slow down happens under Chrome
			if ($Franca_Platform.get_type() !== 3 && byteOffset % this.get_bytesPerElement() === 0 && byteSize % this.get_bytesPerElement() === 0) {
				newArr.$arr = new Int32Array(this.$arr.buffer, byteOffset, ss.Int32.div(byteSize, this.get_bytesPerElement()));
			}
			else {
				newArr.$arr = new Int32Array(this.$arr.buffer.slice(byteOffset, byteOffset + byteSize));
			}
			return newArr;
		},
		subarray: function(begin) {
			return this.subarray$1(begin, this.get_length());
		},
		subarray$1: function(begin, end) {
			var newArr = new $Franca_Collections_IntArray();
			newArr.$arr = this.$arr.subarray(begin, end);
			return newArr;
		},
		set$3: function(array, destOffset) {
			//arr.Set(array, destOffset);
			for (var i = 0; i < array.length; i++) {
				this.$arr[destOffset + i] = array[i];
			}
		},
		set$1: function(array, destOffset) {
			this.$arr.set(new Int32Array(array.get_underlyingObject().buffer), destOffset);
		},
		set$4: function(array) {
			this.set$5(array, 0);
		},
		set$5: function(array, destOffset) {
			this.$arr.set(array.$arr, destOffset);
		},
		get_bytesPerElement: function() {
			return 4;
		},
		get_length: function() {
			return this.$arr.length;
		},
		get_underlyingObject: function() {
			return this.$arr;
		},
		get_item: function(index) {
			return this.$arr[index];
		},
		set_item: function(index, value) {
			this.$arr[index] = value;
		}
	}, ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]), [ss.IEnumerable, ss.IEnumerable]);
	$Franca_Collections_IntArray.$ctor1.prototype = $Franca_Collections_IntArray.$ctor2.prototype = $Franca_Collections_IntArray.prototype;
	ss.initClass($Franca_Collections_SByteArray, $asm, {
		getValue: function(index) {
			return this.get_item(index);
		},
		resize: function(length, retainContents) {
			var newArr = new Int8Array(length);
			if (retainContents && ss.isValue(this.$arr)) {
				var src = this.$arr;
				if (this.$arr.length > length) {
					if ($Franca_Platform.get_type() !== 6) {
						src = new Int8Array(this.$arr.buffer.slice(0, length));
					}
					else {
						src = this.$arr.subarray(0, length);
					}
				}
				newArr.set(src);
			}
			this.$arr = newArr;
		},
		subarrayBlock: function(byteOffset) {
			return this.subarrayBlock$1(byteOffset, this.get_byteLength());
		},
		subarrayBlock$1: function(byteOffset, byteSize) {
			if (byteOffset === 0 && byteSize === this.get_byteLength()) {
				return this;
			}
			var newArr = new $Franca_Collections_SByteArray();
			// TODO: Check if still broken for Chrome
			// NOTE: when passing using the first method below, a mysterious slow down happens under Chrome
			if ($Franca_Platform.get_type() !== 3) {
				newArr.$arr = new Int8Array(this.$arr.buffer, byteOffset, byteSize);
			}
			else {
				newArr.$arr = new Int8Array(this.$arr.buffer.slice(byteOffset, byteOffset + byteSize));
			}
			return newArr;
		},
		subarray: function(begin) {
			return this.subarray$1(begin, this.get_length());
		},
		subarray$1: function(begin, end) {
			var newArr = new $Franca_Collections_SByteArray();
			newArr.$arr = this.$arr.subarray(begin, end);
			return newArr;
		},
		set$3: function(array, destOffset) {
			//arr.Set(array, destOffset);
			for (var i = 0; i < array.length; i++) {
				this.$arr[destOffset + i] = array[i];
			}
		},
		set$1: function(array, destOffset) {
			this.$arr.set(new Int8Array(array.get_underlyingObject().buffer), destOffset);
		},
		set$4: function(array) {
			this.set$5(array, 0);
		},
		set$5: function(array, destOffset) {
			this.$arr.set(array.$arr, destOffset);
		},
		get_bytesPerElement: function() {
			return 1;
		},
		get_length: function() {
			return this.$arr.length;
		},
		get_underlyingObject: function() {
			return this.$arr;
		},
		get_item: function(index) {
			return this.$arr[index];
		},
		set_item: function(index, value) {
			this.$arr[index] = value;
		}
	}, ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]), [ss.IEnumerable, ss.IEnumerable]);
	$Franca_Collections_SByteArray.$ctor1.prototype = $Franca_Collections_SByteArray.$ctor2.prototype = $Franca_Collections_SByteArray.prototype;
	ss.initClass($Franca_Collections_ShortArray, $asm, {
		getValue: function(index) {
			return this.get_item(index);
		},
		resize: function(length, retainContents) {
			var newArr = new Int16Array(length);
			if (retainContents && ss.isValue(this.$arr)) {
				var src = this.$arr;
				if (this.$arr.length > length) {
					if ($Franca_Platform.get_type() !== 3) {
						src = new Int16Array(this.$arr.buffer.slice(0, length * this.get_bytesPerElement()));
					}
					else {
						src = this.$arr.subarray(0, length);
					}
				}
				newArr.set(src);
			}
			this.$arr = newArr;
		},
		subarrayBlock: function(byteOffset) {
			return this.subarrayBlock$1(byteOffset, this.get_byteLength());
		},
		subarrayBlock$1: function(byteOffset, byteSize) {
			if (byteOffset === 0 && byteSize === this.get_byteLength()) {
				return this;
			}
			var newArr = new $Franca_Collections_ShortArray();
			// TODO: Check if still broken for Chrome
			// NOTE: when passing using the first method below, a mysterious slow down happens under Chrome
			if ($Franca_Platform.get_type() !== 3 && byteOffset % this.get_bytesPerElement() === 0 && byteSize % this.get_bytesPerElement() === 0) {
				newArr.$arr = new Int16Array(this.$arr.buffer, byteOffset, ss.Int32.div(byteSize, this.get_bytesPerElement()));
			}
			else {
				newArr.$arr = new Int16Array(this.$arr.buffer.slice(byteOffset, byteOffset + byteSize));
			}
			return newArr;
		},
		subarray: function(begin) {
			return this.subarray$1(begin, this.get_length());
		},
		subarray$1: function(begin, end) {
			var newArr = new $Franca_Collections_ShortArray();
			newArr.$arr = this.$arr.subarray(begin, end);
			return newArr;
		},
		set$3: function(array, destOffset) {
			//arr.Set(array, destOffset);
			for (var i = 0; i < array.length; i++) {
				this.$arr[destOffset + i] = array[i];
			}
		},
		set$1: function(array, destOffset) {
			this.$arr.set(new Int16Array(array.get_underlyingObject().buffer), destOffset);
		},
		set$4: function(array) {
			this.set$5(array, 0);
		},
		set$5: function(array, destOffset) {
			this.$arr.set(array.$arr, destOffset);
		},
		get_bytesPerElement: function() {
			return 2;
		},
		get_length: function() {
			return this.$arr.length;
		},
		get_underlyingObject: function() {
			return this.$arr;
		},
		get_item: function(index) {
			return this.$arr[index];
		},
		set_item: function(index, value) {
			this.$arr[index] = value;
		}
	}, ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]), [ss.IEnumerable, ss.IEnumerable]);
	$Franca_Collections_ShortArray.$ctor1.prototype = $Franca_Collections_ShortArray.$ctor2.prototype = $Franca_Collections_ShortArray.prototype;
	ss.initClass($Franca_Collections_UIntArray, $asm, {
		getValue: function(index) {
			return this.get_item(index);
		},
		resize: function(length, retainContents) {
			var newArr = new Uint32Array(length);
			if (retainContents && ss.isValue(this.$arr)) {
				var src = this.$arr;
				if (this.$arr.length > length) {
					if ($Franca_Platform.get_type() !== 3) {
						src = new Uint32Array(this.$arr.buffer.slice(0, length * this.get_bytesPerElement()));
					}
					else {
						src = this.$arr.subarray(0, length);
					}
				}
				newArr.set(src);
			}
			this.$arr = newArr;
		},
		subarrayBlock: function(byteOffset) {
			return this.subarrayBlock$1(byteOffset, this.get_byteLength());
		},
		subarrayBlock$1: function(byteOffset, byteSize) {
			if (byteOffset === 0 && byteSize === this.get_byteLength()) {
				return this;
			}
			var newArr = new $Franca_Collections_UIntArray();
			// TODO: Check if still broken for Chrome
			// NOTE: when passing using the first method below, a mysterious slow down happens under Chrome
			if ($Franca_Platform.get_type() !== 3 && byteOffset % this.get_bytesPerElement() === 0 && byteSize % this.get_bytesPerElement() === 0) {
				newArr.$arr = new Uint32Array(this.$arr.buffer, byteOffset, ss.Int32.div(byteSize, this.get_bytesPerElement()));
			}
			else {
				newArr.$arr = new Uint32Array(this.$arr.buffer.slice(byteOffset, byteOffset + byteSize));
			}
			return newArr;
		},
		subarray: function(begin) {
			return this.subarray$1(begin, this.get_length());
		},
		subarray$1: function(begin, end) {
			var newArr = new $Franca_Collections_UIntArray();
			newArr.$arr = this.$arr.subarray(begin, end);
			return newArr;
		},
		set$3: function(array, destOffset) {
			//arr.Set(array, destOffset);
			for (var i = 0; i < array.length; i++) {
				this.$arr[destOffset + i] = array[i];
			}
		},
		set$1: function(array, destOffset) {
			this.$arr.set(new Uint32Array(array.get_underlyingObject().buffer), destOffset);
		},
		set$4: function(array) {
			this.set$5(array, 0);
		},
		set$5: function(array, destOffset) {
			this.$arr.set(array.$arr, destOffset);
		},
		get_bytesPerElement: function() {
			return 4;
		},
		get_length: function() {
			return this.$arr.length;
		},
		get_underlyingObject: function() {
			return this.$arr;
		},
		get_item: function(index) {
			return this.$arr[index];
		},
		set_item: function(index, value) {
			this.$arr[index] = value;
		}
	}, ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]), [ss.IEnumerable, ss.IEnumerable]);
	$Franca_Collections_UIntArray.$ctor1.prototype = $Franca_Collections_UIntArray.$ctor2.prototype = $Franca_Collections_UIntArray.prototype;
	ss.initClass($Franca_Collections_UShortArray, $asm, {
		getValue: function(index) {
			return this.get_item(index);
		},
		resize: function(length, retainContents) {
			var newArr = new Uint16Array(length);
			if (retainContents && ss.isValue(this.$arr)) {
				var src = this.$arr;
				if (this.$arr.length > length) {
					if ($Franca_Platform.get_type() !== 3) {
						src = new Uint16Array(this.$arr.buffer.slice(0, length * this.get_bytesPerElement()));
					}
					else {
						src = this.$arr.subarray(0, length);
					}
				}
				newArr.set(src);
			}
			this.$arr = newArr;
		},
		subarrayBlock: function(byteOffset) {
			return this.subarrayBlock$1(byteOffset, this.get_byteLength());
		},
		subarrayBlock$1: function(byteOffset, byteSize) {
			if (byteOffset === 0 && byteSize === this.get_byteLength()) {
				return this;
			}
			var newArr = new $Franca_Collections_UShortArray();
			// TODO: Check if still broken for Chrome
			// NOTE: when passing using the first method below, a mysterious slow down happens under Chrome
			if ($Franca_Platform.get_type() !== 3 && byteOffset % this.get_bytesPerElement() === 0 && byteSize % this.get_bytesPerElement() === 0) {
				newArr.$arr = new Uint16Array(this.$arr.buffer, byteOffset, ss.Int32.div(byteSize, this.get_bytesPerElement()));
			}
			else {
				newArr.$arr = new Uint16Array(this.$arr.buffer.slice(byteOffset, byteOffset + byteSize));
			}
			return newArr;
		},
		subarray: function(begin) {
			return this.subarray$1(begin, this.get_length());
		},
		subarray$1: function(begin, end) {
			var newArr = new $Franca_Collections_UShortArray();
			newArr.$arr = this.$arr.subarray(begin, end);
			return newArr;
		},
		set$3: function(array, destOffset) {
			//arr.Set(array, destOffset);
			for (var i = 0; i < array.length; i++) {
				this.$arr[destOffset + i] = array[i];
			}
		},
		set$1: function(array, destOffset) {
			this.$arr.set(new Uint16Array(array.get_underlyingObject().buffer), destOffset);
		},
		set$4: function(array) {
			this.set$5(array, 0);
		},
		set$5: function(array, destOffset) {
			this.$arr.set(array.$arr, destOffset);
		},
		get_bytesPerElement: function() {
			return 2;
		},
		get_length: function() {
			return this.$arr.length;
		},
		get_underlyingObject: function() {
			return this.$arr;
		},
		get_item: function(index) {
			return this.$arr[index];
		},
		set_item: function(index, value) {
			this.$arr[index] = value;
		}
	}, ss.makeGenericType($Franca_Collections_TypedArray$1, [ss.Int32]), [ss.IEnumerable, ss.IEnumerable]);
	$Franca_Collections_UShortArray.$ctor1.prototype = $Franca_Collections_UShortArray.$ctor2.prototype = $Franca_Collections_UShortArray.prototype;
	ss.initClass($Franca_Compression_Deflate, $asm, {});
	ss.initClass($Franca_Compression_DeflateException, $asm, {}, ss.Exception);
	$Franca_Compression_DeflateException.$ctor1.prototype = $Franca_Compression_DeflateException.$ctor2.prototype = $Franca_Compression_DeflateException.prototype;
	ss.initEnum($Franca_Compression_DeflateType, $asm, { rawDeflate: 0, zlib: 1 });
	ss.initClass($Franca_Compression_GZip, $asm, {
		start: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									this.$init();
									this.$chunkCount = ss.Int32.trunc(Math.ceil(this.$length / 16384));
									this.$end = this.$offset + this.$length;
									if (this.$op === 0) {
										$state = 1;
										continue $sm1;
									}
									else {
										$state = 2;
										continue $sm1;
									}
								}
								case 1: {
									$state = -1;
									if (!ss.isNullOrUndefined(this.$result)) {
										$state = -1;
										break $sm1;
									}
									$result = this.$progress = this.$pushNextChunk();
									$state = 1;
									return true;
								}
								case 2: {
									$state = -1;
									if (!ss.isNullOrUndefined(this.$result)) {
										$state = -1;
										break $sm1;
									}
									$result = this.$progress = this.$pushNextChunk();
									$state = 2;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		$pushNextChunk: function() {
			this.$pushChunk(this.$offset, Math.min(this.$end - this.$offset, $Franca_Compression_GZip.$maxChunkSize), this.$chunksProcessed >= this.$chunkCount - 1);
			this.$offset += $Franca_Compression_GZip.$maxChunkSize;
			this.$chunksProcessed++;
			if (this.$chunksProcessed >= this.$chunkCount) {
				this.$finish();
			}
			if (this.$chunkCount > 0) {
				return ss.Int32.div(this.$chunksProcessed * 100, this.$chunkCount);
			}
			else {
				return 100;
			}
		},
		get_result: function() {
			return this.$result;
		},
		get_progress: function() {
			return this.$progress;
		},
		$init: function() {
			this.$binData = this.$data;
			if (this.$op === 0) {
				this.$gzip = new pako.Deflate({ level: this.Compression });
			}
			else {
				this.$gzip = new pako.Inflate();
			}
		},
		$finish: function() {
			if (!!this.$gzip.err) {
				throw new ss.InvalidOperationException(ss.cast(this.$gzip.err, String));
			}
			this.$result = new $Franca_BinaryData.$ctor4(ss.cast(this.$gzip.result, Uint8Array));
			this.$gzip = null;
		},
		$pushChunk: function(chunkStart, chunkSize, isLastChunk) {
			this.$gzip.push(new Uint8Array(this.$binData.get_uint8Array().buffer, chunkStart, chunkSize), isLastChunk);
		}
	}, null, [$Franca_IResumable]);
	ss.initEnum($Franca_Compression_GZip$CompressionLevel, $asm, { none: 0, fast: 1, optimal: 3 });
	ss.initEnum($Franca_Compression_GZip$Operation, $asm, { deflate: 0, inflate: 1 });
	ss.initClass($Franca_Compression_LZString, $asm, {});
	ss.initClass($Franca_Compression_RectanglePacker, $asm, {
		$initialize: function() {
			this.$items = [];
		},
		add: function(rect) {
			this.$items.push(rect);
		},
		pack: function() {
			var rows = [];
			var rects = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_Rectangle]))();
			for (var i = 0; i < this.$items.length; i++) {
				rects.set_item(i, this.$items[i]);
			}
			// process by largest height first
			var rectsByHeight = Enumerable.from(rects).orderByDescending(function(kvp) {
				return kvp.value.size.height;
			});
			var area = new $Franca_Rectangle.$ctor3(0, 0, this.get_size().width, this.get_size().height);
			var $t1 = ss.getEnumerator(rectsByHeight);
			try {
				while ($t1.moveNext()) {
					var kvp1 = $t1.current();
					if (rows.length === 0) {
						var newRow = new $Franca_Rectangle.$ctor3(0, 0, this.$source.size.width, kvp1.value.size.height);
						// fail if the row does not fit inside the packer's size
						if (!area.contains$1(newRow)) {
							return null;
						}
						rows.push(newRow);
					}
					var packed = false;
					for (var i1 = 0; i1 < rows.length; i1++) {
						// attempt to fit the rectangle in the row
						if (this.$fitInRow(kvp1, rows, i1)) {
							packed = true;
							break;
						}
					}
					if (!packed) {
						// if we couldn't fit the rectangle, create a new row
						var $t2 = rows[rows.length - 1];
						var newRow1 = new $Franca_Rectangle.$ctor3(0, $t2.location.y + $t2.size.height, this.$source.size.width, kvp1.value.size.height);
						// fail if the row does not fit inside the packer's size
						if (!area.contains$1(newRow1)) {
							return null;
						}
						// if the new row doesn't fit inside the bin, we couldn't fit everything
						if (!this.$source.contains$1(newRow1)) {
							return null;
						}
						rows.push(newRow1);
						// if the item didn't fit in the new row, it will never fit
						// throw the user an exception to inform them of this
						if (!this.$fitInRow(kvp1, rows, rows.length - 1)) {
							throw new $Franca_Compression_RectanglePackerException(kvp1.value, this.$source);
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
			return this.$items;
		},
		$fitInRow: function(kvp, rows, index) {
			var row = rows[index];
			var newRect = {};
			if ($Franca_Compression_RectanglePacker.$tryFit(kvp.value, row, newRect)) {
				this.$items[kvp.key] = newRect.$;
				row = new $Franca_Rectangle.$ctor3(newRect.$.location.x + newRect.$.size.width, row.location.y, this.$source.size.width - (newRect.$.location.x + newRect.$.size.width), row.size.height);
				rows[index] = row;
				return true;
			}
			return false;
		},
		get_items: function() {
			return this.$items;
		},
		get_size: function() {
			return new $Franca_Size.$ctor2(this.$source.size.width, this.$source.size.height);
		}
	});
	$Franca_Compression_RectanglePacker.$ctor1.prototype = $Franca_Compression_RectanglePacker.$ctor2.prototype = $Franca_Compression_RectanglePacker.prototype;
	ss.initClass($Franca_Compression_RectanglePackerException, $asm, {}, ss.Exception);
	ss.initInterface($Franca_Easing_IEasing, $asm, { ease: null, easeF: null });
	ss.initClass($Franca_Easing_EasingFormula, $asm, {
		easeF: function(progress) {
			return this.ease(progress);
		},
		ease: function(progress) {
			switch (this.$mode) {
				case 3: {
					if (progress < 0.5) {
						return this.easeOut(progress * 2) / 2;
					}
					else {
						return 0.5 + this.easeIn((progress - 0.5) * 2) / 2;
					}
				}
				case 1: {
					return this.easeIn(progress);
				}
				case 0: {
					return this.easeOut(progress);
				}
				case 2:
				default: {
					if (progress < 0.5) {
						return this.easeIn(progress * 2) / 2;
					}
					else {
						return 0.5 + this.easeOut((progress - 0.5) * 2) / 2;
					}
				}
			}
		},
		easeIn: function(progress) {
			return this.formula(progress);
		},
		easeOut: function(progress) {
			return 1 - this.formula(1 - progress);
		},
		formula: null,
		get_mode: function() {
			return this.$mode;
		},
		set_mode: function(value) {
			this.$mode = value;
		}
	}, null, [$Franca_Easing_IEasing]);
	ss.initClass($Franca_Easing_BackEase, $asm, {
		formula: function(t) {
			return Math.pow(t, 3) - t * this.$a * Math.sin(t * Math.PI);
		},
		get_amplitude: function() {
			return this.$a;
		},
		set_amplitude: function(value) {
			this.$a = value;
		}
	}, $Franca_Easing_EasingFormula, [$Franca_Easing_IEasing]);
	ss.initClass($Franca_Easing_BounceEase, $asm, {
		formula: function(t) {
			var a = this.$baseAmp;
			// amplitude of current bounce
			var l = this.$baseLen;
			// length of current bounce
			var from = 0;
			// time the current bounce started within 0.0-1.0 range
			var n = 0;
			// current bounce
			while (from + l < t) {
				from += l;
				a *= this.$bounciness;
				n++;
				l += Math.pow(2, n) * this.$baseLen;
			}
			// in bounce time
			var t2;
			if (from + l >= 1) {
				t2 = (t - from) / ((1 - from) * 2);
			}
			else {
				t2 = (t - from) / l;
			}
			return Math.sin(t2 * Math.PI) * a;
		}
	}, $Franca_Easing_EasingFormula, [$Franca_Easing_IEasing]);
	ss.initClass($Franca_Easing_CircleEase, $asm, {
		formula: function(t) {
			return 1 - Math.sqrt(1 - t * t);
		}
	}, $Franca_Easing_EasingFormula, [$Franca_Easing_IEasing]);
	ss.initClass($Franca_Easing_PowerEase, $asm, {
		formula: function(t) {
			return Math.pow(t, this.p);
		},
		get_power: function() {
			return this.p;
		},
		set_power: function(value) {
			this.p = value;
		}
	}, $Franca_Easing_EasingFormula, [$Franca_Easing_IEasing]);
	$Franca_Easing_PowerEase.$ctor1.prototype = $Franca_Easing_PowerEase.prototype;
	ss.initClass($Franca_Easing_CubicEase, $asm, {
		get_power$1: function() {
			return this.p;
		},
		set_power$1: function(value) {
			this.p = value;
		}
	}, $Franca_Easing_PowerEase, [$Franca_Easing_IEasing]);
	ss.initEnum($Franca_Easing_EaseMode, $asm, { out: 0, in$1: 1, inOut: 2, outIn: 3 });
	ss.initClass($Franca_Easing_ElasticEase, $asm, {
		formula: function(t) {
			if (this.$s > 0) {
				return Math.sin(t * (this.$n + 0.25) * 2 * Math.PI) * (Math.exp(this.$s * t) - 1) / (Math.exp(this.$s) - 1);
			}
			else {
				return Math.sin(t * (this.$n + 0.25) * 2 * Math.PI) * t;
			}
		},
		get_oscillations: function() {
			return this.$n;
		},
		set_oscillations: function(value) {
			this.$n = value;
		}
	}, $Franca_Easing_EasingFormula, [$Franca_Easing_IEasing]);
	ss.initClass($Franca_Easing_ExponentialEase, $asm, {
		formula: function(t) {
			return (Math.exp(this.$a * t) - 1) / (Math.exp(this.$a) - 1);
		},
		get_exponent: function() {
			return this.$a;
		},
		set_exponent: function(value) {
			this.$a = value;
		}
	}, $Franca_Easing_EasingFormula, [$Franca_Easing_IEasing]);
	ss.initClass($Franca_Easing_QuadraticEase, $asm, {
		get_power$1: function() {
			return this.p;
		},
		set_power$1: function(value) {
			this.p = value;
		}
	}, $Franca_Easing_PowerEase, [$Franca_Easing_IEasing]);
	ss.initClass($Franca_Easing_SineEase, $asm, {
		formula: function(t) {
			return 1 - Math.sin((1 - t) / 2 * Math.PI);
		}
	}, $Franca_Easing_EasingFormula, [$Franca_Easing_IEasing]);
	ss.initClass($Franca_Gui_Formatting, $asm, {
		applyMarkup: function(markup) {
			if (ss.isNullOrUndefined(markup)) {
				return;
			}
			var reset = markup.get_reset();
			if (markup.get_resetAll()) {
				this.reset();
			}
			if (markup.get_isSize()) {
				this.size = (reset ? this.baseSize : markup.get_size());
			}
			if (markup.get_isColor()) {
				this.color = (reset ? this.baseColor : (ss.isValue(markup.get_color()) ? ss.unbox(markup.get_color()).premultiply() : this.color));
			}
			if (markup.get_bold()) {
				this.bold = (reset ? this.baseBold : true);
			}
			if (markup.get_italic()) {
				this.italic = (reset ? this.baseItalic : true);
			}
			if (markup.get_underline()) {
				this.underline = (reset ? this.baseUnderline : true);
			}
		},
		copyFrom: function(f) {
			if (ss.isNullOrUndefined(f)) {
				return;
			}
			this.size = f.size;
			this.bold = f.bold;
			this.italic = f.italic;
			this.underline = f.underline;
			this.kerning = f.kerning;
			this.color = f.color;
		},
		clone$1: function() {
			var $t1 = new $Franca_Gui_Formatting(this.baseSize, this.baseBold, this.baseItalic, this.baseUnderline, this.baseKerning, this.baseColor);
			$t1.size = this.size;
			$t1.bold = this.bold;
			$t1.italic = this.italic;
			$t1.underline = this.underline;
			$t1.kerning = this.kerning;
			$t1.color = this.color;
			return $t1;
		},
		reset: function() {
			this.size = this.baseSize;
			this.bold = this.baseBold;
			this.italic = this.baseItalic;
			this.underline = this.baseUnderline;
			this.kerning = this.baseKerning;
			this.color = this.baseColor;
		},
		resetSize: function() {
			this.size = this.baseSize;
		},
		resetBold: function() {
			this.bold = this.baseBold;
		},
		resetItalic: function() {
			this.italic = this.baseItalic;
		},
		resetUnderline: function() {
			this.underline = this.baseUnderline;
		},
		resetKerning: function() {
			this.kerning = this.baseKerning;
		},
		resetColor: function() {
			this.color = this.baseColor;
		},
		reset$1: function(bold, italic, underline) {
			if (bold) {
				this.bold = this.baseBold;
			}
			if (italic) {
				this.italic = this.baseItalic;
			}
			if (underline) {
				this.underline = this.baseUnderline;
			}
		},
		clone: function() {
			return this.clone$1();
		}
	}, null, [$System_ICloneable]);
	ss.initClass($Franca_Gui_GuiCompilationException, $asm, {
		get_errors: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, $t1, err;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									$t1 = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!($t1 < this.$errors.length)) {
										$state = -1;
										break $sm1;
									}
									err = this.$errors[$t1];
									$result = err;
									$state = 2;
									return true;
								}
								case 2: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		toString: function() {
			return Object.prototype.toString.call(this);
		}
	}, ss.Exception);
	ss.initClass($Franca_Gui_GuiCompilationException$CompilerError, $asm, {
		toString: function() {
			if (this.fileName.length > 0) {
				return ss.formatString('{0}({1},{2}) : {3} {4}: {5}', this.fileName, $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.line), $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.column), (this.isWarning ? 'warning' : 'error'), this.errorNumber, this.errorText);
			}
			else {
				return ss.formatString('{0} {1}: {2}', (this.isWarning ? 'warning' : 'error'), this.errorNumber, this.errorText);
			}
		}
	});
	$Franca_Gui_GuiCompilationException$CompilerError.$ctor1.prototype = $Franca_Gui_GuiCompilationException$CompilerError.prototype;
	ss.initClass($Franca_Gui_Documentation_GenerateDocsAttribute, $asm, {});
	ss.initClass($Franca_Gui_Documentation_GuiSupportAttribute, $asm, {});
	ss.initClass($Franca_IO_LocalStorage, $asm, {});
	ss.initClass($Franca_IO_Storage, $asm, {
		get_root: function() {
			if (ss.isNullOrUndefined(this.$parent)) {
				return this.$root;
			}
			return this.$parent.get_root() + this.$root;
		},
		get_paths: function() {
			return $Franca_IO_LocalStorage.getPaths(this.get_root());
		},
		inspect: function() {
			return this.inspect$1('');
		},
		inspect$1: function(searchPath) {
			return $Franca_IO_LocalStorage.inspect$1(this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(searchPath));
		},
		clear: function() {
			var $t1 = ss.getEnumerator($System_IEnumerableExtensions.safeEnumerate(String).call(null, this.get_paths()));
			try {
				while ($t1.moveNext()) {
					var path = $t1.current();
					$Franca_IO_LocalStorage.remove(path);
				}
			}
			finally {
				$t1.dispose();
			}
		},
		remove: function(path) {
			return $Franca_IO_LocalStorage.remove(this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path));
		},
		contains: function(path) {
			return $Franca_IO_LocalStorage.contains(this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path));
		},
		writeRaw: function(path, value) {
			$Franca_IO_LocalStorage.writeRaw(this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path), value);
		},
		write$1: function(path, value) {
			this.write$2(path, value, 1);
		},
		write$2: function(path, value, encoding) {
			$Franca_IO_LocalStorage.write$2(this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path), value, encoding);
		},
		write: function(path, data) {
			$Franca_IO_LocalStorage.write(this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path), data);
		},
		writeObject: function(T) {
			return function(path, obj) {
				$Franca_IO_LocalStorage.writeObject(T).call(null, this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path), obj);
			};
		},
		readRaw: function(path) {
			return $Franca_IO_LocalStorage.readRaw(this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path));
		},
		readText: function(path) {
			return $Franca_IO_LocalStorage.readText(this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path));
		},
		readBinary: function(path) {
			return $Franca_IO_LocalStorage.readBinary(this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path));
		},
		readObject$1: function(T) {
			return function(path, dest) {
				$Franca_IO_LocalStorage.readObject$1(T).call(null, this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path), dest);
			};
		},
		readObjectProp: function(T) {
			return function(path, propertyGet, propertySet) {
				$Franca_IO_LocalStorage.readObjectProp(T).call(null, this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path), propertyGet, propertySet);
			};
		},
		readObject: function(T) {
			return function(path) {
				return $Franca_IO_LocalStorage.readObject(T).call(null, this.get_root() + $Franca_IO_LocalStorage.getAbsolutePath(path));
			};
		}
	});
	$Franca_IO_Storage.$ctor1.prototype = $Franca_IO_Storage.prototype;
	ss.initEnum($Franca_IO_StorageEncoding, $asm, { none: 0, lzStringUTF16: 1, lzStringBase64: 2, lzStringBase64Uri: 3 });
	ss.initClass($Franca_IO_StorageException, $asm, {}, ss.Exception);
	$Franca_IO_StorageException.$ctor1.prototype = $Franca_IO_StorageException.$ctor2.prototype = $Franca_IO_StorageException.prototype;
	ss.initEnum($Franca_IO_StorageType, $asm, { text: 0, binary: 1, object: 2, reserved: 15 });
	ss.initClass($Franca_JS_JsColor, $asm, {
		get_code: function() {
			return this.$code;
		},
		get_alpha: function() {
			return this.$alpha;
		},
		getHashCode: function() {
			var h = (this.$code ? ss.getHashCode(this.$code) : 0);
			h = h * 397 ^ this.$alpha;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_JS_JsColor)) {
				return false;
			}
			return ss.equals(this.$code, o.$code) && this.$alpha === o.$alpha;
		}
	});
	$Franca_JS_JsColor.$ctor1.prototype = $Franca_JS_JsColor.prototype;
	$Franca_JS_JsColor.__class = false;
	ss.initClass($Franca_JS_JsHelper, $asm, {});
	ss.initClass($Franca_JS_UTF8Encoding, $asm, {});
	ss.initClass($Franca_Localization_LocalizableAttribute, $asm, {
		get_description: function() {
			return this.$2$DescriptionField;
		},
		set_description: function(value) {
			this.$2$DescriptionField = value;
		},
		get_allowMarkup: function() {
			return this.$2$AllowMarkupField;
		},
		set_allowMarkup: function(value) {
			this.$2$AllowMarkupField = value;
		}
	});
	ss.initEnum($Franca_Localization_LocalizableFormat, $asm, { raw: 0, markup: 1, HTML: 2 });
	ss.initClass($Franca_Mathematics_Histogram, $asm, {
		get_min: function() {
			return this.$1$MinField;
		},
		set_min: function(value) {
			this.$1$MinField = value;
		},
		get_max: function() {
			return this.$1$MaxField;
		},
		set_max: function(value) {
			this.$1$MaxField = value;
		},
		fromData$1: function(values) {
			this.fromData(values);
		},
		fromData: function(values) {
			if (Enumerable.from(values).count() === 0) {
				throw new ss.ArgumentException('Values cannot be empty');
			}
			var min = Number.MAX_VALUE;
			var max = -Number.MAX_VALUE;
			var $t1 = ss.getEnumerator(values);
			try {
				while ($t1.moveNext()) {
					var v = $t1.current();
					min = Math.min(min, v);
					max = Math.max(max, v);
				}
			}
			finally {
				$t1.dispose();
			}
			this.fromData$2(values, min, max);
		},
		fromData$2: function(values, min, max) {
			var bucketRange = (max - min) / this.buckets.length;
			var bucketMin = min;
			for (var i = 0; i < this.buckets.length; i++) {
				this.buckets[i].min = bucketMin;
				this.buckets[i].max = ((i === this.buckets.length - 1) ? max : (bucketMin + bucketRange));
				this.buckets[i].clear();
				bucketMin += bucketRange;
			}
			this.total = 0;
			var bucketIndex = 0;
			var $t1 = Enumerable.from(values).orderBy(function(v1) {
				return v1;
			}).getEnumerator();
			try {
				while ($t1.moveNext()) {
					var v = $t1.current();
					while (v >= this.buckets[bucketIndex].max) {
						if (v === this.buckets[bucketIndex].max) {
							break;
						}
						bucketIndex++;
						if (bucketIndex >= this.buckets.length) {
							throw new ss.InvalidOperationException('Something went wrong, passed the bucket max');
						}
					}
					this.buckets[bucketIndex].frequency++;
					this.total++;
				}
			}
			finally {
				$t1.dispose();
			}
			this.set_min(min);
			this.set_max(max);
		}
	});
	ss.initClass($Franca_Mathematics_HistogramBucket, $asm, {
		clear: function() {
			this.frequency = 0;
		},
		toString: function() {
			return ss.formatString('{0}: Min {1}, Max {2}, Frequency {3}', ss.getTypeName(ss.getInstanceType(this)), this.min, this.max, this.frequency);
		}
	});
	$Franca_Mathematics_HistogramBucket.$ctor1.prototype = $Franca_Mathematics_HistogramBucket.prototype;
	ss.initClass($Franca_Serialization_InvalidJsonException, $asm, {
		get_position: function() {
			return this.$2$PositionField;
		},
		set_position: function(value) {
			this.$2$PositionField = value;
		},
		get_hasPosition: function() {
			return this.get_position() > -1;
		}
	}, ss.Exception);
	$Franca_Serialization_InvalidJsonException.$ctor2.prototype = $Franca_Serialization_InvalidJsonException.$ctor4.prototype = $Franca_Serialization_InvalidJsonException.$ctor1.prototype = $Franca_Serialization_InvalidJsonException.$ctor3.prototype = $Franca_Serialization_InvalidJsonException.$ctor5.prototype = $Franca_Serialization_InvalidJsonException.prototype;
	ss.initClass($Franca_Serialization_Json, $asm, {});
	ss.initClass($Franca_Serialization_JsonHexDouble, $asm, {
		writeJson: function(writer) {
			writer.write$p($Franca_Serialization_JsonHexDouble.toHex(this.value), null, true, 0, -1);
		},
		fromJson: function(json) {
			if (!json.get_isString()) {
				throw new $Franca_JsonValidationException.$ctor1('JsonHexDouble expects string value.');
			}
			return new $Franca_Serialization_JsonHexDouble.$ctor2($Franca_Serialization_JsonHexDouble.parse($Franca_JsonValue.op_Implicit$k(json)));
		},
		toJson: function() {
			return $Franca_JsonValue.op_Implicit$G($Franca_Serialization_JsonHexDouble.toHex(this.value));
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_Serialization_JsonHexDouble);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).value === this.value;
		},
		equalsT: function(b) {
			return this.value === b.value;
		},
		getHashCode: function() {
			return ss.getHashCode(this.value);
		}
	}, null, [$Franca_Serialization_Streaming_IJsonStreamWriter, $Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_Serialization_JsonHexDouble]), ss.IEquatable]);
	$Franca_Serialization_JsonHexDouble.$ctor1.prototype = $Franca_Serialization_JsonHexDouble.$ctor2.prototype = $Franca_Serialization_JsonHexDouble.prototype;
	$Franca_Serialization_JsonHexDouble.__class = false;
	ss.initClass($Franca_Serialization_JsonHexFloat, $asm, {
		fromJson: function(json) {
			if (!json.get_isString()) {
				throw new $Franca_JsonValidationException.$ctor1('JsonHexFloat expects string value.');
			}
			return new $Franca_Serialization_JsonHexFloat.$ctor2($Franca_Serialization_JsonHexFloat.parse($Franca_JsonValue.op_Implicit$k(json)));
		},
		toJson: function() {
			return $Franca_JsonValue.op_Implicit$G($Franca_Serialization_JsonHexFloat.toHex(this.value));
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_Serialization_JsonHexFloat);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).value === this.value;
		},
		equalsT: function(b) {
			return this.value === b.value;
		},
		getHashCode: function() {
			return ss.getHashCode(this.value);
		},
		writeJson: function(writer) {
			writer.write$p($Franca_Serialization_JsonHexFloat.toHex(this.value), null, true, 0, -1);
		}
	}, null, [$Franca_IMappable, ss.makeGenericType($Franca_IMappable$1, [$Franca_Serialization_JsonHexFloat]), ss.IEquatable, $Franca_Serialization_Streaming_IJsonStreamWriter]);
	$Franca_Serialization_JsonHexFloat.$ctor2.prototype = $Franca_Serialization_JsonHexFloat.$ctor1.prototype = $Franca_Serialization_JsonHexFloat.prototype;
	$Franca_Serialization_JsonHexFloat.__class = false;
	ss.initClass($Franca_Serialization_UBJSettings, $asm, {
		clone$1: function() {
			var $t1 = new $Franca_Serialization_UBJSettings();
			$t1.maxArrayOptimizedFormatEmptyBodyCount = this.maxArrayOptimizedFormatEmptyBodyCount;
			$t1.endian = this.endian;
			return $t1;
		},
		clone: function() {
			return this.clone$1();
		}
	}, null, [$System_ICloneable]);
	ss.initClass($Franca_Serialization_UBJson, $asm, {});
	ss.initEnum($Franca_Serialization_UBJType, $asm, { null$1: 90, noop: 78, true$1: 84, false$1: 70, int8: 105, uInt8: 85, int16: 73, int32: 108, int64: 76, float32: 100, float64: 68, highPrecision: 72, char$1: 67, string: 83, arrayOpen: 91, arrayClose: 93, objectOpen: 123, objectClose: 125, type: 36, count: 35 });
	ss.initEnum($Franca_Serialization_Streaming_BinJsonFixedArray, $asm, { string: 36, bool: 63, double$1: 78, single: 70, uInt8: 66, int8: 98, uInt16: 87, int16: 119, uInt32: 73, int32: 105, any: 45 });
	ss.initEnum($Franca_Serialization_Streaming_BinJsonToken, $asm, { objectOpen: 123, objectClose: 125, arrayOpen: 91, arrayClose: 93, string8: 36, string16: 83, string32: 115, false$1: 48, true$1: 49, double$1: 78, single: 70, uInt8: 66, int8: 98, uInt16: 87, int16: 119, uInt32: 73, int32: 105, integer: 37, smallInteger: 33, key8: 35, key16: 75, key32: 107, null$1: 86, typedArrayOpen: 60, header: 72, noop: 42 });
	ss.initInterface($Franca_Serialization_Streaming_IJsonContainerFinalizer, $asm, { finalizeObject: null, finalizeArray: null });
	ss.initInterface($Franca_Serialization_Streaming_IJsonReader, $asm, { readObjectValue: null, readArrayValue: null, readNumber: null, readBool: null, readString: null, readInteger: null, readNull: null, readNull$1: null, readInt8: null, readUInt8: null, readInt16: null, readUInt16: null, readInt32: null, readUInt32: null, readSingle: null, readDouble: null, beginReadObject: null, endReadObject: null, readObject: null, beginReadArray: null, endReadArray: null, readArray: null, isObject: null, isArray: null, isString: null, isNumber: null, isBool: null, isNull: null, isInteger: null, skipValue: null, get_currentType: null, readBinary: null, readUInt8Array: null, readInt8Array: null, readInt16Array: null, readUInt16Array: null, readInt32Array: null, readUInt32Array: null, readSingleArray: null, readDoubleArray: null, readBoolArray: null, readStringArray: null, readFixedArray: null }, [ss.IDisposable]);
	ss.initInterface($Franca_Serialization_Streaming_IJsonWriter, $asm, { writeKey: null, writeInteger: null, writeNumber: null, writeNull: null, write: null, write$p: null, write$5: null, write$1: null, write$3: null, write$7: null, write$4: null, write$8: null, write$6: null, write$2: null, beginWriteObject: null, endWriteObject: null, writeObject: null, beginWriteArray: null, endWriteArray: null, writeArray: null, writeBinary: null, writeBinary$1: null, writeBinary$2: null, write$9: null, write$a: null, write$e: null, write$f: null, write$h: null, write$d: null, write$g: null, write$c: null, write$b: null, write$j: null, write$n: null, write$l: null, write$r: null, write$m: null, write$s: null, write$o: null, write$k: null, write$i: null, write$q: null, beginWriteFixedArray$1: null, beginWriteFixedArray: null, endWriteFixedArray: null, writeFixedArray$1: null, writeFixedArray: null, writeStreamer: null }, [ss.IDisposable]);
	ss.initClass($Franca_Serialization_Streaming_IJsonWriterExtensions, $asm, {});
	ss.initClass($Franca_Serialization_Streaming_JsonArrayReader, $asm, {
		get_length: function() {
			if (!this.$isFixedArray) {
				throw new ss.InvalidOperationException('JsonArrayReader is not a fixed-length array reader so length is unknown');
			}
			return this.$length;
		},
		get_isNull: function() {
			return this.$length < 0;
		},
		getEnumerator: function() {
			var $result, $state = 0, count, current, arrayFinalizer;
			return new ss.IteratorBlockEnumerator(function() {
				$sm1:
				for (;;) {
					switch ($state) {
						case 0: {
							$state = -1;
							if (this.get_isNull()) {
								$state = -1;
								break $sm1;
							}
							count = 0;
							$state = 1;
							continue $sm1;
						}
						case 1: {
							$state = -1;
							if (!((current = this.reader.readArrayValue()) !== 4)) {
								$state = 2;
								continue $sm1;
							}
							if (this.maxLength >= 0 && count >= this.maxLength) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							$result = current;
							$state = 3;
							return true;
						}
						case 3: {
							$state = -1;
							count++;
							$state = 1;
							continue $sm1;
						}
						case 2: {
							$state = -1;
							if (count < this.minLength) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							arrayFinalizer = ss.safeCast(this.reader, $Franca_Serialization_Streaming_IJsonContainerFinalizer);
							if (ss.isValue(arrayFinalizer)) {
								arrayFinalizer.finalizeArray(false);
							}
							else {
								this.reader.endReadArray();
							}
							if (!ss.staticEquals(this.onEnd, null)) {
								this.onEnd(this.reader);
							}
							$state = -1;
							break $sm1;
						}
						default: {
							break $sm1;
						}
					}
				}
				return false;
			}, function() {
				return $result;
			}, null, this);
		},
		getHashCode: function() {
			var h = (this.$isFixedArray ? 1 : 0);
			h = h * 397 ^ (this.reader ? ss.getHashCode(this.reader) : 0);
			h = h * 397 ^ this.minLength;
			h = h * 397 ^ this.maxLength;
			h = h * 397 ^ this.$length;
			h = h * 397 ^ (this.onEnd ? ss.getHashCode(this.onEnd) : 0);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Serialization_Streaming_JsonArrayReader)) {
				return false;
			}
			return this.$isFixedArray === o.$isFixedArray && ss.equals(this.reader, o.reader) && this.minLength === o.minLength && this.maxLength === o.maxLength && this.$length === o.$length && ss.equals(this.onEnd, o.onEnd);
		}
	}, null, [ss.IEnumerable, ss.IEnumerable]);
	$Franca_Serialization_Streaming_JsonArrayReader.$ctor1.prototype = $Franca_Serialization_Streaming_JsonArrayReader.$ctor2.prototype = $Franca_Serialization_Streaming_JsonArrayReader.prototype;
	$Franca_Serialization_Streaming_JsonArrayReader.__class = false;
	ss.initClass($Franca_Serialization_Streaming_JsonBinaryReader, $asm, {
		$readStringData: function(type, makeString) {
			var len;
			switch (type) {
				case 36:
				case 35: {
					len = this.$json.readByte();
					break;
				}
				case 83:
				case 75: {
					len = this.$json.readUInt16();
					break;
				}
				case 115:
				case 107: {
					len = this.$json.readInt32();
					break;
				}
				default: {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
			var bin = this.$json.readData(len);
			return (makeString ? $Franca_Text_UTF8.fromBinaryData(bin, true) : null);
		},
		$skipReadValue: function() {
			switch (this.$tokenType) {
				case 123:
				case 125:
				case 91:
				case 93:
				case 49:
				case 48:
				case 86: {
					break;
				}
				case 35:
				case 36:
				case 75:
				case 83:
				case 107:
				case 115: {
					this.$readStringData(this.$tokenType, false);
					break;
				}
				case 78: {
					this.$json.readDouble();
					break;
				}
				case 70: {
					this.$json.readSingle();
					break;
				}
				case 66: {
					this.$json.readByte();
					break;
				}
				case 98: {
					this.$json.readSByte();
					break;
				}
				case 87: {
					this.$json.readUInt16();
					break;
				}
				case 119: {
					this.$json.readInt16();
					break;
				}
				case 73: {
					this.$json.readUInt32();
					break;
				}
				case 105: {
					this.$json.readInt32();
					break;
				}
				case 37: {
					this.$json.readDouble();
					break;
				}
				case 33: {
					this.$json.readSingle();
					break;
				}
				case 60: {
					switch (this.$typedArrayType) {
						case 36: {
							this.readStringArray(0, -1);
							break;
						}
						case 63: {
							this.readBoolArray(0, -1);
							break;
						}
						case 78: {
							this.readDoubleArray(0, -1);
							break;
						}
						case 70: {
							this.readSingleArray(0, -1);
							break;
						}
						case 66: {
							this.readUInt8Array(0, -1);
							break;
						}
						case 98: {
							this.readInt8Array(0, -1);
							break;
						}
						case 87: {
							this.readUInt16Array(0, -1);
							break;
						}
						case 119: {
							this.readInt16Array(0, -1);
							break;
						}
						case 73: {
							this.readUInt32Array(0, -1);
							break;
						}
						case 105: {
							this.readInt32Array(0, -1);
							break;
						}
						case 45: {
							break;
						}
					}
					break;
				}
				default: {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
		},
		skipValue: function() {
			do {
				if (this.$tokenType === 91 || this.$tokenType === 60) {
					this.$skipStack.push(91);
					this.beginReadArray();
				}
				else if (this.$tokenType === 123) {
					this.$skipStack.push(this.$tokenType);
					this.beginReadObject();
				}
				else {
					this.$skipReadValue();
				}
				if (this.$skipStack.length > 0) {
					var type = ss.arrayPeekBack(this.$skipStack);
					if (type === 91) {
						if (this.readArrayValue() === 4) {
							this.finalizeArray(false);
							this.$skipStack.pop();
						}
					}
					else if (this.readObjectValue().type === 2) {
						this.finalizeObject(false);
						this.$skipStack.pop();
					}
				}
			} while (this.$skipStack.length > 0);
			if (this.$skipStack.length > 0) {
				ss.clear(this.$skipStack);
			}
		},
		readNumber: function(coerce) {
			var value = {};
			if (coerce) {
				switch (this.$tokenType) {
					case 123:
					case 60:
					case 91: {
						this.skipValue();
						return Number.NaN;
					}
					case 36:
					case 83:
					case 115: {
						var s = this.$readStringData(this.$tokenType, true);
						$Franca_Calc.tryParseNumber(s, value);
						return value.$;
					}
					case 49: {
						return 1;
					}
					case 48: {
						return 0;
					}
					case 78: {
						return this.$json.readDouble();
					}
					case 70: {
						return this.$json.readSingle();
					}
					case 66: {
						return this.$json.readByte();
					}
					case 98: {
						return this.$json.readSByte();
					}
					case 87: {
						return this.$json.readUInt16();
					}
					case 119: {
						return this.$json.readInt16();
					}
					case 73: {
						return this.$json.readUInt32();
					}
					case 105: {
						return this.$json.readInt32();
					}
					case 37: {
						value.$ = this.$json.readDouble();
						return Math.trunc(value.$);
					}
					case 33: {
						value.$ = this.$json.readSingle();
						return Math.trunc(value.$);
					}
					case 86: {
						return 0;
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
			else {
				switch (this.$tokenType) {
					case 78: {
						return this.$json.readDouble();
					}
					case 70: {
						return this.$json.readSingle();
					}
					case 66: {
						return this.$json.readByte();
					}
					case 98: {
						return this.$json.readSByte();
					}
					case 87: {
						return this.$json.readUInt16();
					}
					case 119: {
						return this.$json.readInt16();
					}
					case 73: {
						return this.$json.readUInt32();
					}
					case 105: {
						return this.$json.readInt32();
					}
					case 37: {
						value.$ = this.$json.readDouble();
						return Math.trunc(value.$);
					}
					case 33: {
						value.$ = this.$json.readSingle();
						return Math.trunc(value.$);
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
		},
		readBool: function(coerce) {
			if (coerce) {
				switch (this.$tokenType) {
					case 123:
					case 60:
					case 91: {
						this.skipValue();
						return true;
					}
					case 36:
					case 83:
					case 115: {
						this.$readStringData(this.$tokenType, false);
						return true;
					}
					case 49: {
						return true;
					}
					case 48: {
						return false;
					}
					case 78: {
						return this.$json.readDouble() !== 0;
					}
					case 70: {
						return this.$json.readSingle() !== 0;
					}
					case 66: {
						return this.$json.readByte() !== 0;
					}
					case 98: {
						return this.$json.readSByte() !== 0;
					}
					case 87: {
						return this.$json.readUInt16() !== 0;
					}
					case 119: {
						return this.$json.readInt16() !== 0;
					}
					case 73: {
						return this.$json.readUInt32() !== 0;
					}
					case 105: {
						return this.$json.readInt32() !== 0;
					}
					case 37: {
						return Math.trunc(this.$json.readDouble()) !== 0;
					}
					case 33: {
						return Math.trunc(this.$json.readSingle()) !== 0;
					}
					case 86: {
						return false;
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
			else {
				switch (this.$tokenType) {
					case 49: {
						return true;
					}
					case 48: {
						return false;
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
		},
		readString: function(coerce, minLength, maxLength) {
			if (coerce) {
				switch (this.$tokenType) {
					case 123: {
						this.skipValue();
						return '{}';
					}
					case 60: {
						this.skipValue();
						return '[]';
					}
					case 91: {
						this.skipValue();
						return '[]';
					}
					case 36:
					case 83:
					case 115: {
						return this.$readStringData(this.$tokenType, true);
					}
					case 49: {
						return 'True';
					}
					case 48: {
						return 'False';
					}
					case 78: {
						return $System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.$json.readDouble());
					}
					case 70: {
						return $System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.$json.readSingle());
					}
					case 66: {
						return $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.$json.readByte());
					}
					case 98: {
						return $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.$json.readSByte());
					}
					case 87: {
						return $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.$json.readUInt16());
					}
					case 119: {
						return $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.$json.readInt16());
					}
					case 73: {
						return $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.$json.readUInt32());
					}
					case 105: {
						return $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.$json.readInt32());
					}
					case 37: {
						return $System_ObjectExtensions.toStringInvariant$1(Number).call(null, Math.trunc(this.$json.readDouble()));
					}
					case 33: {
						return $System_ObjectExtensions.toStringInvariant$1(Number).call(null, Math.trunc(this.$json.readSingle()));
					}
					case 86: {
						return null;
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
			else {
				switch (this.$tokenType) {
					case 36:
					case 83:
					case 115: {
						return this.$readStringData(this.$tokenType, true);
					}
					case 86: {
						return null;
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
		},
		readInteger: function(coerce) {
			var value = {};
			if (coerce) {
				switch (this.$tokenType) {
					case 123:
					case 60:
					case 91: {
						this.skipValue();
						return 1;
					}
					case 36:
					case 83:
					case 115: {
						var s = this.$readStringData(this.$tokenType, true);
						if (!$Franca_Calc.tryParseNumber(s, value)) {
							return 0;
						}
						return Math.trunc(value.$);
					}
					case 49: {
						return 1;
					}
					case 48: {
						return 0;
					}
					case 78: {
						value.$ = this.$json.readDouble();
						if (isNaN(value.$) || Math.abs(value.$) === Number.POSITIVE_INFINITY) {
							return 0;
						}
						return value.$;
					}
					case 70: {
						value.$ = this.$json.readSingle();
						if (isNaN(value.$) || Math.abs(value.$) === Number.POSITIVE_INFINITY) {
							return 0;
						}
						return value.$;
					}
					case 66: {
						return this.$json.readByte();
					}
					case 98: {
						return this.$json.readSByte();
					}
					case 87: {
						return this.$json.readUInt16();
					}
					case 119: {
						return this.$json.readInt16();
					}
					case 73: {
						return this.$json.readUInt32();
					}
					case 105: {
						return this.$json.readInt32();
					}
					case 37: {
						value.$ = this.$json.readDouble();
						if (isNaN(value.$) || Math.abs(value.$) === Number.POSITIVE_INFINITY) {
							return 0;
						}
						return value.$;
					}
					case 33: {
						value.$ = this.$json.readSingle();
						if (isNaN(value.$) || Math.abs(value.$) === Number.POSITIVE_INFINITY) {
							return 0;
						}
						return value.$;
					}
					case 86: {
						return 0;
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
			else {
				switch (this.$tokenType) {
					case 78: {
						var dbl = this.$json.readDouble();
						if (dbl % 1 !== 0) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						return Math.trunc(dbl);
					}
					case 70: {
						var flt = this.$json.readSingle();
						if (flt % 1 !== 0) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						return Math.trunc(flt);
					}
					case 66: {
						return this.$json.readByte();
					}
					case 98: {
						return this.$json.readSByte();
					}
					case 87: {
						return this.$json.readUInt16();
					}
					case 119: {
						return this.$json.readInt16();
					}
					case 73: {
						return this.$json.readUInt32();
					}
					case 105: {
						return this.$json.readInt32();
					}
					case 37: {
						var num = this.$json.readDouble();
						if (num % 1 !== 0) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						return Math.trunc(num);
					}
					case 33: {
						var smn = this.$json.readSingle();
						if (smn % 1 !== 0) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						return Math.trunc(smn);
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
		},
		readNull: function(coerce) {
			if (coerce) {
				switch (this.$tokenType) {
					case 123: {
						this.skipValue();
						break;
					}
					case 91: {
						this.skipValue();
						break;
					}
					case 60: {
						this.skipValue();
						break;
					}
					case 36:
					case 83:
					case 115: {
						this.$readStringData(this.$tokenType, false);
						break;
					}
					case 49:
					case 48:
					case 86: {
						break;
					}
					case 78: {
						this.$json.readDouble();
						break;
					}
					case 70: {
						this.$json.readSingle();
						break;
					}
					case 66: {
						this.$json.readByte();
						break;
					}
					case 98: {
						this.$json.readSByte();
						break;
					}
					case 87: {
						this.$json.readUInt16();
						break;
					}
					case 119: {
						this.$json.readInt16();
						break;
					}
					case 73: {
						this.$json.readUInt32();
						break;
					}
					case 105: {
						this.$json.readInt32();
						break;
					}
					case 37: {
						this.$json.readDouble();
						break;
					}
					case 33: {
						this.$json.readSingle();
						break;
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
			else {
				switch (this.$tokenType) {
					case 86: {
						break;
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
			return null;
		},
		readNull$1: function(T) {
			return function(coerce) {
				if (coerce) {
					switch (this.$tokenType) {
						case 123: {
							this.skipValue();
							break;
						}
						case 91: {
							this.skipValue();
							break;
						}
						case 60: {
							this.skipValue();
							break;
						}
						case 36:
						case 83:
						case 115: {
							this.$readStringData(this.$tokenType, false);
							break;
						}
						case 49:
						case 48:
						case 86: {
							break;
						}
						case 78: {
							this.$json.readDouble();
							break;
						}
						case 70: {
							this.$json.readSingle();
							break;
						}
						case 66: {
							this.$json.readByte();
							break;
						}
						case 98: {
							this.$json.readSByte();
							break;
						}
						case 87: {
							this.$json.readUInt16();
							break;
						}
						case 119: {
							this.$json.readInt16();
							break;
						}
						case 73: {
							this.$json.readUInt32();
							break;
						}
						case 105: {
							this.$json.readInt32();
							break;
						}
						case 37: {
							this.$json.readDouble();
							break;
						}
						case 33: {
							this.$json.readSingle();
							break;
						}
						default: {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
					}
				}
				else {
					switch (this.$tokenType) {
						case 86: {
							break;
						}
						default: {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
					}
				}
				return ss.getDefaultValue(T);
			};
		},
		readInt8: function(coerce) {
			return $Franca_Cast.toSByte$1(this.readInteger(coerce));
		},
		readUInt8: function(coerce) {
			return this.readInteger(coerce) & 255;
		},
		readInt16: function(coerce) {
			return $Franca_Cast.toShort$1(this.readInteger(coerce));
		},
		readUInt16: function(coerce) {
			return this.readInteger(coerce) & 65535;
		},
		readInt32: function(coerce) {
			return this.readInteger(coerce) >> 0;
		},
		readUInt32: function(coerce) {
			return this.readInteger(coerce) >>> 0;
		},
		readSingle: function(coerce) {
			return this.readNumber(coerce);
		},
		readDouble: function(coerce) {
			return this.readNumber(coerce);
		},
		beginReadObject: function() {
			if (this.$tokenType !== 123) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		},
		endReadObject: function() {
			if (this.readObjectValue().type !== 4) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		},
		finalizeObject: function(consumeToken) {
			if (consumeToken && this.readObjectValue().type !== 2 || this.$tokenType !== 125) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		},
		readObject: function() {
			this.beginReadObject();
			return new $Franca_Serialization_Streaming_JsonObjectReader.$ctor1(this);
		},
		beginReadArray: function() {
			if (this.$tokenType !== 91 && this.$tokenType !== 60) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		},
		$readTypedArrayInfo: function() {
			this.$typedArrayType = this.$json.readByte();
			switch (this.$typedArrayType) {
				default: {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				case 36:
				case 63:
				case 78:
				case 70:
				case 66:
				case 98:
				case 87:
				case 119:
				case 73:
				case 105:
				case 45: {
					break;
				}
			}
			this.$typedArrayLength = this.$json.readInt32();
		},
		endReadArray: function() {
			if (this.readArrayValue() !== 4) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		},
		finalizeArray: function(consumeToken) {
			if (consumeToken && this.readArrayValue() !== 4 || this.$tokenType !== 93) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		},
		readArray: function(minLength, maxLength) {
			this.beginReadArray();
			if (this.$tokenType === 60) {
				if (this.$typedArrayLength < minLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
			return new $Franca_Serialization_Streaming_JsonArrayReader.$ctor1(this, minLength, maxLength);
		},
		readArrayValue: function() {
			this.$readToken();
			switch (this.$tokenType) {
				case 60:
				case 91: {
					return 3;
				}
				case 123: {
					return 1;
				}
				case 93: {
					return 4;
				}
				case 36:
				case 83:
				case 115: {
					return 7;
				}
				case 49: {
					return 9;
				}
				case 48: {
					return 10;
				}
				case 78: {
					return 8;
				}
				case 70: {
					return 8;
				}
				case 66: {
					return 8;
				}
				case 98: {
					return 8;
				}
				case 87: {
					return 8;
				}
				case 119: {
					return 8;
				}
				case 73: {
					return 8;
				}
				case 105: {
					return 8;
				}
				case 37: {
					return 8;
				}
				case 33: {
					return 8;
				}
				case 86: {
					return 11;
				}
				default: {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
		},
		readObjectValue: function() {
			this.$readToken();
			switch (this.$tokenType) {
				case 125: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(null, 2);
				}
				case 35:
				case 75:
				case 107: {
					break;
				}
				default: {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
			var key = this.$readStringData(this.$tokenType, true);
			this.$readToken();
			switch (this.$tokenType) {
				case 60:
				case 91: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 3);
				}
				case 123: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 1);
				}
				case 36:
				case 83:
				case 115: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 7);
				}
				case 49: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 9);
				}
				case 48: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 10);
				}
				case 78: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 8);
				}
				case 70: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 8);
				}
				case 66: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 8);
				}
				case 98: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 8);
				}
				case 87: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 8);
				}
				case 119: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 8);
				}
				case 73: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 8);
				}
				case 105: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 8);
				}
				case 37: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 8);
				}
				case 33: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 8);
				}
				case 86: {
					return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, 11);
				}
				default: {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
		},
		readFixedArray: function(minLength, maxLength) {
			if (this.$tokenType === 86) {
				return new $Franca_Serialization_Streaming_JsonArrayReader.$ctor2(this, -1, null, minLength, maxLength);
			}
			this.beginReadArray();
			if (this.$typedArrayType !== 45) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$typedArrayLength < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			return new $Franca_Serialization_Streaming_JsonArrayReader.$ctor2(this, this.$typedArrayLength, null, minLength, maxLength);
		},
		readBinary: function(minLength, maxLength) {
			if (this.$tokenType === 86) {
				return null;
			}
			this.beginReadArray();
			if (this.$typedArrayType !== 66) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$typedArrayLength < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var bin = this.$json.readData(this.$typedArrayLength);
			this.endReadArray();
			return bin;
		},
		readUInt8Array: function(minLength, maxLength) {
			return $Franca_Collections_ByteArray.op_Explicit(this.readBinary(minLength, maxLength));
		},
		readInt8Array: function(minLength, maxLength) {
			if (this.$tokenType === 86) {
				return null;
			}
			this.beginReadArray();
			if (this.$typedArrayType !== 98) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$typedArrayLength < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var arr = new $Franca_Collections_SByteArray.$ctor2(this.$typedArrayLength);
			var bytes = this.$json.readData(this.$typedArrayLength);
			for (var i = 0; i < bytes.get_length(); i++) {
				arr.set_item(i, bytes.get_item(i));
			}
			this.endReadArray();
			return arr;
		},
		readInt16Array: function(minLength, maxLength) {
			if (this.$tokenType === 86) {
				return null;
			}
			this.beginReadArray();
			if (this.$typedArrayType !== 119) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$typedArrayLength < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var arr = new $Franca_Collections_ShortArray.$ctor2(this.$typedArrayLength);
			for (var i = 0; i < this.$typedArrayLength; i++) {
				arr.set_item(i, this.$json.readInt16());
			}
			this.endReadArray();
			return arr;
		},
		readUInt16Array: function(minLength, maxLength) {
			if (this.$tokenType === 86) {
				return null;
			}
			this.beginReadArray();
			if (this.$typedArrayType !== 87) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$typedArrayLength < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var arr = new $Franca_Collections_UShortArray.$ctor2(this.$typedArrayLength);
			for (var i = 0; i < this.$typedArrayLength; i++) {
				arr.set_item(i, this.$json.readUInt16());
			}
			this.endReadArray();
			return arr;
		},
		readInt32Array: function(minLength, maxLength) {
			if (this.$tokenType === 86) {
				return null;
			}
			this.beginReadArray();
			if (this.$typedArrayType !== 105) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$typedArrayLength < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var arr = new $Franca_Collections_IntArray.$ctor2(this.$typedArrayLength);
			for (var i = 0; i < this.$typedArrayLength; i++) {
				arr.set_item(i, this.$json.readInt32());
			}
			this.endReadArray();
			return arr;
		},
		readUInt32Array: function(minLength, maxLength) {
			if (this.$tokenType === 86) {
				return null;
			}
			this.beginReadArray();
			if (this.$typedArrayType !== 73) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$typedArrayLength < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var arr = new $Franca_Collections_UIntArray.$ctor2(this.$typedArrayLength);
			for (var i = 0; i < this.$typedArrayLength; i++) {
				arr.set_item(i, this.$json.readUInt32());
			}
			this.endReadArray();
			return arr;
		},
		readSingleArray: function(minLength, maxLength) {
			if (this.$tokenType === 86) {
				return null;
			}
			this.beginReadArray();
			if (this.$typedArrayType !== 70) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$typedArrayLength < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var arr = new $Franca_Collections_FloatArray.$ctor2(this.$typedArrayLength);
			for (var i = 0; i < this.$typedArrayLength; i++) {
				arr.set_item(i, this.$json.readSingle());
			}
			this.endReadArray();
			return arr;
		},
		readDoubleArray: function(minLength, maxLength) {
			if (this.$tokenType === 86) {
				return null;
			}
			this.beginReadArray();
			if (this.$typedArrayType !== 78) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$typedArrayLength < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var arr = new $Franca_Collections_DoubleArray.$ctor2(this.$typedArrayLength);
			for (var i = 0; i < this.$typedArrayLength; i++) {
				arr.set_item(i, this.$json.readDouble());
			}
			this.endReadArray();
			return arr;
		},
		readBoolArray: function(minLength, maxLength) {
			if (this.$tokenType === 86) {
				return null;
			}
			this.beginReadArray();
			if (this.$typedArrayType !== 63) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$typedArrayLength < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var arr = new Array(this.$typedArrayLength);
			for (var i = 0; i < this.$typedArrayLength; i++) {
				arr[i] = this.$json.readByte() !== 48;
			}
			this.endReadArray();
			return arr;
		},
		readStringArray: function(minLength, maxLength) {
			if (this.$tokenType === 86) {
				return null;
			}
			this.beginReadArray();
			if (this.$typedArrayType !== 36) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$typedArrayLength < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && this.$typedArrayLength > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var arr = new Array(this.$typedArrayLength);
			for (var i = 0; i < this.$typedArrayLength; i++) {
				this.readArrayValue();
				arr[i] = this.readString(false, 0, -1);
			}
			this.endReadArray();
			return arr;
		},
		isObject: function() {
			return this.$tokenType === 123;
		},
		isArray: function() {
			return this.$tokenType === 91 || this.$tokenType === 60;
		},
		isString: function() {
			return this.$tokenType >= 36 && this.$tokenType <= 115;
		},
		isNumber: function() {
			switch (this.$tokenType) {
				default: {
					return false;
				}
				case 78:
				case 70:
				case 66:
				case 98:
				case 87:
				case 119:
				case 73:
				case 105:
				case 37:
				case 33: {
					return true;
				}
			}
		},
		isBool: function() {
			return this.$tokenType === 49 || this.$tokenType === 48;
		},
		isNull: function() {
			return this.$tokenType === 86;
		},
		isInteger: function() {
			switch (this.$tokenType) {
				default: {
					return false;
				}
				case 66:
				case 98:
				case 87:
				case 119:
				case 73:
				case 105:
				case 37:
				case 33: {
					return true;
				}
			}
		},
		get_currentType: function() {
			switch (this.$tokenType) {
				case 125: {
					return 2;
				}
				case 93: {
					return 4;
				}
				case 123: {
					return 1;
				}
				case 91:
				case 60: {
					return 3;
				}
				case 36:
				case 83:
				case 115: {
					return 7;
				}
				case 49: {
					return 9;
				}
				case 48: {
					return 10;
				}
				case 78:
				case 70:
				case 66:
				case 98:
				case 87:
				case 119:
				case 73:
				case 105:
				case 37:
				case 33: {
					return 8;
				}
				case 86: {
					return 11;
				}
				default: {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
		},
		$readFileHeader: function() {
			if (this.$eof) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.$tokenType = this.$json.readByte();
			if (this.$tokenType !== 72) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.$readHeaderData();
		},
		$readFirstToken: function() {
			var $state = 0;
			$sm1:
			for (;;) {
				switch ($state) {
					case 0: {
						// do a loop here instead of recursively calling this function if the token is a header
						// token because if we recurse then malicious users could write a bunch of headers all
						// in a row in order to drive the receiving machine out of stack space
						do {
							if (this.$eof) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.$tokenType = this.$json.readByte();
							if (this.$tokenType === 72) {
								this.$readHeaderData();
							}
						} while (this.$tokenType === 72 || this.$tokenType === 42);
						if (this.$tokenType === 60) {
							this.$readTypedArrayInfo();
							$state = 1;
							continue $sm1;
						}
						else if (this.$tokenType === 91 || this.$tokenType === 123) {
							$state = 1;
							continue $sm1;
						}
						else if (this.$tokenType === 36 || this.$tokenType === 83 || this.$tokenType === 115 || this.$tokenType === 49 || this.$tokenType === 48 || this.$tokenType === 78 || this.$tokenType === 70 || this.$tokenType === 66 || this.$tokenType === 98 || this.$tokenType === 87 || this.$tokenType === 119 || this.$tokenType === 73 || this.$tokenType === 105 || this.$tokenType === 37 || this.$tokenType === 33 || this.$tokenType === 86) {
							this.$eof = true;
							$state = -1;
							break $sm1;
						}
						else {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						$state = -1;
						break $sm1;
					}
					case 1: {
						this.$depth++;
						$state = -1;
						break $sm1;
					}
					default: {
						break $sm1;
					}
				}
			}
		},
		$readToken: function() {
			var $state = 0;
			$sm1:
			for (;;) {
				switch ($state) {
					case 0: {
						// do a loop here instead of recursively calling this function if the token is a header
						// token because if we recurse then malicious users could write a bunch of headers all
						// in a row in order to drive the receiving machine out of stack space
						do {
							if (this.$eof) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							this.$tokenType = this.$json.readByte();
							if (this.$tokenType === 72) {
								this.$readHeaderData();
							}
						} while (this.$tokenType === 72 || this.$tokenType === 42);
						if (this.$tokenType === 60) {
							this.$readTypedArrayInfo();
							$state = 1;
							continue $sm1;
						}
						else if (this.$tokenType === 91 || this.$tokenType === 123) {
							$state = 1;
							continue $sm1;
						}
						else if (this.$tokenType === 93 || this.$tokenType === 125) {
							this.$depth--;
							if (this.$depth < 0) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							if (this.$depth === 0) {
								this.$eof = true;
							}
							$state = -1;
							break $sm1;
						}
						else if (this.$tokenType === 36 || this.$tokenType === 83 || this.$tokenType === 115 || this.$tokenType === 49 || this.$tokenType === 48 || this.$tokenType === 78 || this.$tokenType === 70 || this.$tokenType === 66 || this.$tokenType === 98 || this.$tokenType === 87 || this.$tokenType === 119 || this.$tokenType === 73 || this.$tokenType === 105 || this.$tokenType === 37 || this.$tokenType === 33 || this.$tokenType === 86 || this.$tokenType === 35 || this.$tokenType === 75 || this.$tokenType === 107) {
							$state = -1;
							break $sm1;
						}
						else {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						$state = -1;
						break $sm1;
					}
					case 1: {
						this.$depth++;
						$state = -1;
						break $sm1;
					}
					default: {
						break $sm1;
					}
				}
			}
		},
		$readHeaderData: function() {
			if (this.$tokenType !== 72) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.$json.readByte() !== 66 || this.$json.readByte() !== 74 || this.$json.readByte() !== 0) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var version = this.$json.readInt32();
			if (version < 0 || version > $Franca_Serialization_Streaming_JsonBinaryWriter.currentVersion) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		},
		dispose$1: function(disposing) {
			if (!this.$disposedValue) {
				if (disposing) {
					// free managed resources
					this.$json.close();
				}
				// free unmanaged resources (unmanaged objects) and override a finalizer below.
				// set large fields to null.
				this.$disposedValue = true;
			}
		},
		dispose: function() {
			this.dispose$1(true);
			// TODO: uncomment the following line if the finalizer is overridden above.
			// GC.SuppressFinalize(this);
		}
	}, null, [ss.IDisposable, $Franca_Serialization_Streaming_IJsonReader, $Franca_Serialization_Streaming_IJsonContainerFinalizer]);
	ss.initClass($Franca_Serialization_Streaming_JsonBinaryWriter, $asm, {
		$writeHeader: function() {
			this.$json.writeByte(72);
			this.$json.writeByte(66);
			this.$json.writeByte(74);
			this.$json.writeByte(0);
			this.$json.writeInt32($Franca_Serialization_Streaming_JsonBinaryWriter.currentVersion);
		},
		writeNoop: function() {
			this.$json.writeByte(42);
		},
		writeKey: function(key) {
			if (ss.isNullOrUndefined(key)) {
				throw new ss.ArgumentNullException('key');
			}
			var keyBin = $Franca_Text_UTF8.toBinaryData(key);
			if (keyBin.get_length() <= 255) {
				this.$json.writeByte(35);
				this.$json.writeByte(keyBin.get_length());
			}
			else if (keyBin.get_length() <= 65535) {
				this.$json.writeByte(75);
				this.$json.writeUInt16(keyBin.get_length());
			}
			else {
				this.$json.writeByte(107);
				this.$json.writeInt32(keyBin.get_length());
			}
			this.$json.write(keyBin);
		},
		writeStreamer: function(T) {
			return function(value, key, allowNull) {
				if (ss.referenceEquals(value, null)) {
					if (!allowNull) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					this.writeNull(key);
					return;
				}
				if (ss.isValue(key)) {
					this.writeKey(key);
				}
				value.writeJson(this);
			};
		},
		write: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			if (value) {
				this.$json.writeByte(49);
			}
			else {
				this.$json.writeByte(48);
			}
		},
		write$p: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			var bin = $Franca_Text_UTF8.toBinaryData(value);
			if (bin.get_length() <= 255) {
				this.$json.writeByte(36);
				this.$json.writeByte(bin.get_length());
			}
			else if (bin.get_length() <= 65535) {
				this.$json.writeByte(83);
				this.$json.writeUInt16(bin.get_length());
			}
			else {
				this.$json.writeByte(115);
				this.$json.writeInt32(bin.get_length());
			}
			this.$json.write(bin);
		},
		write$5: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			this.$json.writeByte(98);
			this.$json.writeSByte(value);
		},
		write$1: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			this.$json.writeByte(66);
			this.$json.writeByte(value);
		},
		write$3: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			if (value >= 0) {
				if (value <= 255) {
					this.$json.writeByte(66);
					this.$json.writeByte(value);
					return;
				}
			}
			else if (value >= -128) {
				this.$json.writeByte(98);
				this.$json.writeSByte(value);
				return;
			}
			this.$json.writeByte(119);
			this.$json.writeInt16(value);
		},
		write$7: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			if (value <= 255) {
				this.$json.writeByte(66);
				this.$json.writeByte(value);
				return;
			}
			this.$json.writeByte(87);
			this.$json.writeUInt16(value);
		},
		write$4: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			if (value >= 0) {
				if (value <= 255) {
					this.$json.writeByte(66);
					this.$json.writeByte(value);
					return;
				}
				else if (value <= 65535) {
					this.$json.writeByte(87);
					this.$json.writeUInt16(value);
					return;
				}
			}
			else if (value >= -128) {
				this.$json.writeByte(98);
				this.$json.writeSByte(value);
				return;
			}
			else if (value >= -32768) {
				this.$json.writeByte(119);
				this.$json.writeInt16(value);
				return;
			}
			this.$json.writeByte(105);
			this.$json.writeInt32(value);
		},
		write$8: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			if (value <= 255) {
				this.$json.writeByte(66);
				this.$json.writeByte(value);
				return;
			}
			else if (value <= 65535) {
				this.$json.writeByte(87);
				this.$json.writeUInt16(value);
				return;
			}
			this.$json.writeByte(73);
			this.$json.writeUInt32(value);
		},
		write$6: function(value, key) {
			if (value % 1 === 0) {
				this.writeSmallInteger(value, key);
				return;
			}
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			this.$json.writeByte(70);
			this.$json.writeSingle(value);
		},
		write$2: function(value, key) {
			if (value % 1 === 0) {
				this.writeInteger(value, key);
				return;
			}
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			this.$json.writeByte(78);
			this.$json.writeDouble(value);
		},
		writeInteger: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			value = Math.trunc(value);
			if (value >= 0) {
				if (value <= 255) {
					this.$json.writeByte(66);
					this.$json.writeByte(ss.Int32.trunc(value));
					return;
				}
				else if (value <= 65535) {
					this.$json.writeByte(87);
					this.$json.writeUInt16(ss.Int32.trunc(value));
					return;
				}
				else if (value <= 4294967295) {
					this.$json.writeByte(73);
					this.$json.writeUInt32(ss.Int32.trunc(value));
					return;
				}
			}
			else if (value >= -128) {
				this.$json.writeByte(98);
				this.$json.writeSByte(ss.Int32.trunc(value));
				return;
			}
			else if (value >= -32768) {
				this.$json.writeByte(119);
				this.$json.writeInt16(ss.Int32.trunc(value));
				return;
			}
			else if (value >= -2147483648) {
				this.$json.writeByte(105);
				this.$json.writeInt32(ss.Int32.trunc(value));
				return;
			}
			this.$json.writeByte(37);
			this.$json.writeDouble(value);
		},
		writeSmallInteger: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			value = Math.trunc(value);
			if (value >= 0) {
				if (value <= 255) {
					this.write$1(ss.Int32.trunc(value), null);
					return;
				}
				else if (value <= 65535) {
					this.write$7(ss.Int32.trunc(value), null);
					return;
				}
				else if (value <= 4294967296) {
					this.write$8(ss.Int32.trunc(value), null);
					return;
				}
			}
			else if (value >= -128) {
				this.write$5(ss.Int32.trunc(value), null);
				return;
			}
			else if (value >= -32768) {
				this.write$3(ss.Int32.trunc(value), null);
				return;
			}
			else if (value >= -2147483648) {
				this.write$4(ss.Int32.trunc(value), null);
				return;
			}
			this.$json.writeByte(33);
			this.$json.writeSingle(value);
		},
		writeNull: function(key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			this.$json.writeByte(86);
		},
		writeNumber: function(value, key) {
			if (value % 1 === 0) {
				if (value >= 0) {
					if (value <= 255) {
						this.$json.writeByte(66);
						this.$json.writeByte(ss.Int32.trunc(value));
						return;
					}
					else if (value <= 65535) {
						this.$json.writeByte(87);
						this.$json.writeUInt16(ss.Int32.trunc(value));
						return;
					}
					else if (value <= 4294967295) {
						this.$json.writeByte(73);
						this.$json.writeUInt32(ss.Int32.trunc(value));
						return;
					}
				}
				else if (value >= -128) {
					this.$json.writeByte(98);
					this.$json.writeSByte(ss.Int32.trunc(value));
					return;
				}
				else if (value >= -32768) {
					this.$json.writeByte(119);
					this.$json.writeInt16(ss.Int32.trunc(value));
					return;
				}
				else if (value >= -2147483648) {
					this.$json.writeByte(105);
					this.$json.writeInt32(ss.Int32.trunc(value));
					return;
				}
			}
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			this.$json.writeByte(78);
			this.$json.writeDouble(value);
		},
		beginWriteObject: function(key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			this.$json.writeByte(123);
		},
		endWriteObject: function() {
			// eat exceptions so an exception in the inner block doesn't get eaten by the finalizer
			try {
				this.$json.writeByte(125);
			}
			catch ($t1) {
				$t1 = ss.Exception.wrap($t1);
				if (ss.isInstanceOfType($t1, $System_ObjectDisposedException)) {
					throw $t1;
				}
				else if (ss.isInstanceOfType($t1, $System_IO_IOException)) {
					throw $t1;
				}
				else {
				}
			}
		},
		writeObject: function(key) {
			this.beginWriteObject(key);
			return new $Franca_Serialization_Streaming_JsonContainerWriter.$ctor1(this, 0);
		},
		beginWriteArray: function(key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			this.$json.writeByte(91);
		},
		endWriteArray: function() {
			// eat exceptions so an exception in the inner block doesn't get eaten by the finalizer
			try {
				this.$json.writeByte(93);
			}
			catch ($t1) {
				$t1 = ss.Exception.wrap($t1);
				if (ss.isInstanceOfType($t1, $System_ObjectDisposedException)) {
					throw $t1;
				}
				else if (ss.isInstanceOfType($t1, $System_IO_IOException)) {
					throw $t1;
				}
				else {
				}
			}
		},
		writeArray: function(key) {
			this.beginWriteArray(key);
			return new $Franca_Serialization_Streaming_JsonContainerWriter.$ctor1(this, 1);
		},
		beginWriteTypedArray: function(typeCode, length, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			this.$json.writeByte(60);
			this.$json.writeByte(typeCode);
			this.$json.writeInt32(length);
		},
		beginWriteFixedArray$1: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			this.beginWriteFixedArray(ss.count(value), key, minLength, maxLength);
		},
		beginWriteFixedArray: function(length, key, minLength, maxLength) {
			if (length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(45, length, key);
		},
		endWriteFixedArray: function(isNull) {
			if (isNull) {
				return;
			}
			this.endWriteArray();
		},
		writeFixedArray$1: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return new $Franca_Serialization_Streaming_JsonFixedArrayWriter.$ctor1(this, true);
			}
			return this.writeFixedArray(ss.count(value), key, minLength, maxLength);
		},
		writeFixedArray: function(length, key, minLength, maxLength) {
			this.beginWriteFixedArray(length, key, minLength, maxLength);
			return new $Franca_Serialization_Streaming_JsonFixedArrayWriter.$ctor1(this, false);
		},
		writeBinary: function(value, key, allowNull, minLength, maxLength) {
			this.write$9(value, key, allowNull, minLength, maxLength);
		},
		writeBinary$1: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			this.writeBinary($Franca_Collections_ByteArray.op_Explicit$1(value), key, allowNull, minLength, maxLength);
		},
		writeBinary$2: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			this.writeBinary(new $Franca_BinaryData.$ctor3(value), key, allowNull, minLength, maxLength);
		},
		write$9: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(66, value.get_length(), key);
			{
				this.$json.write(value);
			}
			this.endWriteArray();
		},
		write$a: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(66, value.get_length(), key);
			{
				this.$json.write($Franca_Collections_ByteArray.op_Explicit$1(value));
			}
			this.endWriteArray();
		},
		write$e: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(98, value.get_length(), key);
			{
				for (var i = 0; i < value.get_length(); i++) {
					this.$json.writeSByte(value.get_item(i));
				}
			}
			this.endWriteArray();
		},
		write$f: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(119, value.get_length(), key);
			{
				for (var i = 0; i < value.get_length(); i++) {
					this.$json.writeInt16(value.get_item(i));
				}
			}
			this.endWriteArray();
		},
		write$h: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(87, value.get_length(), key);
			{
				for (var i = 0; i < value.get_length(); i++) {
					this.$json.writeUInt16(value.get_item(i));
				}
			}
			this.endWriteArray();
		},
		write$d: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(105, value.get_length(), key);
			{
				for (var i = 0; i < value.get_length(); i++) {
					this.$json.writeInt32(value.get_item(i));
				}
			}
			this.endWriteArray();
		},
		write$g: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(73, value.get_length(), key);
			{
				for (var i = 0; i < value.get_length(); i++) {
					this.$json.writeUInt32(value.get_item(i));
				}
			}
			this.endWriteArray();
		},
		write$c: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(70, value.get_length(), key);
			{
				for (var i = 0; i < value.get_length(); i++) {
					this.$json.writeSingle(value.get_item(i));
				}
			}
			this.endWriteArray();
		},
		write$b: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(78, value.get_length(), key);
			{
				for (var i = 0; i < value.get_length(); i++) {
					this.$json.writeDouble(value.get_item(i));
				}
			}
			this.endWriteArray();
		},
		write$j: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(66, value.length, key);
			{
				this.$json.write(new $Franca_BinaryData.$ctor3(value));
			}
			this.endWriteArray();
		},
		write$n: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(98, value.length, key);
			{
				for (var i = 0; i < value.length; i++) {
					this.$json.writeSByte(value[i]);
				}
			}
			this.endWriteArray();
		},
		write$l: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(119, value.length, key);
			{
				for (var i = 0; i < value.length; i++) {
					this.$json.writeInt16(value[i]);
				}
			}
			this.endWriteArray();
		},
		write$r: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(87, value.length, key);
			{
				for (var i = 0; i < value.length; i++) {
					this.$json.writeUInt16(value[i]);
				}
			}
			this.endWriteArray();
		},
		write$m: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(105, value.length, key);
			{
				for (var i = 0; i < value.length; i++) {
					this.$json.writeInt32(value[i]);
				}
			}
			this.endWriteArray();
		},
		write$s: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(73, value.length, key);
			{
				for (var i = 0; i < value.length; i++) {
					this.$json.writeUInt32(value[i]);
				}
			}
			this.endWriteArray();
		},
		write$o: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(70, value.length, key);
			{
				for (var i = 0; i < value.length; i++) {
					this.$json.writeSingle(value[i]);
				}
			}
			this.endWriteArray();
		},
		write$k: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(78, value.length, key);
			{
				for (var i = 0; i < value.length; i++) {
					this.$json.writeDouble(value[i]);
				}
			}
			this.endWriteArray();
		},
		write$i: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(63, value.length, key);
			{
				for (var i = 0; i < value.length; i++) {
					this.$json.writeByte((value[i] ? 49 : 48));
				}
			}
			this.endWriteArray();
		},
		write$q: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteTypedArray(36, value.length, key);
			{
				for (var i = 0; i < value.length; i++) {
					this.write$p(value[i], null, true, 0, -1);
				}
			}
			this.endWriteArray();
		},
		writeTo: function(writer, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			var binStream = ss.safeCast(this.$json.get_stream(), $Franca_IBinaryStream);
			var memStream = ss.safeCast(this.$json.get_stream(), $System_IO_MemoryStream);
			if (ss.isNullOrUndefined(binStream) && ss.isNullOrUndefined(memStream)) {
				throw new ss.InvalidOperationException('Cannot call JsonBinaryWriter.WriteTo unless the backing stream is IBinaryStream or MemoryStream.');
			}
			var buffer;
			var length;
			if (ss.isValue(binStream)) {
				// try to avoid a full copy operation by getting the buffer directly and
				// creating a BinaryData object from it without copying for best perf
				try {
					buffer = binStream.getBuffer();
				}
				catch ($t1) {
					$t1 = ss.Exception.wrap($t1);
					if (ss.isInstanceOfType($t1, $System_UnauthorizedAccessException)) {
						// MemoryStream can throw this exception if it is created without
						// the publiclyVisible argument set to true.
						buffer = binStream.toBinary();
					}
					else {
						throw $t1;
					}
				}
				length = binStream.get_sizeBytes();
			}
			else {
				//if (memStream != null) {
				// try to avoid a full copy operation by getting the buffer directly and
				// creating a BinaryData object from it without copying for best perf
				// but only on .NET. JS shouldn't get here because on JS MemoryStream is
				// already an IBinaryStream.
				buffer = new $Franca_BinaryData.$ctor3(memStream.toArray());
				length = memStream.get_length();
			}
			writer.$json.write$2(buffer, 0, length);
		},
		toBinary: function() {
			return $Franca_StreamExtensions.toBinaryData(this.$json.get_stream());
		},
		dispose$1: function(disposing) {
			if (!this.$disposedValue) {
				if (disposing) {
					// free managed resources
					this.$json.close();
				}
				// free unmanaged resources (unmanaged objects) and override a finalizer below.
				// set large fields to null.
				this.$disposedValue = true;
			}
		},
		dispose: function() {
			this.dispose$1(true);
			// TODO: uncomment the following line if the finalizer is overridden above.
			// GC.SuppressFinalize(this);
		}
	}, null, [ss.IDisposable, $Franca_Serialization_Streaming_IJsonWriter]);
	ss.initEnum($Franca_Serialization_Streaming_JsonContainerType, $asm, { object: 0, array: 1 });
	ss.initClass($Franca_Serialization_Streaming_JsonContainerWriter, $asm, {
		dispose: function() {
			this.endRead();
		},
		endRead: function() {
			if (this.type === 0) {
				this.parent.endWriteObject();
			}
			else if (this.type === 1) {
				this.parent.endWriteArray();
			}
			else {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
		},
		getHashCode: function() {
			var h = (this.parent ? ss.getHashCode(this.parent) : 0);
			h = h * 397 ^ this.type;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Serialization_Streaming_JsonContainerWriter)) {
				return false;
			}
			return ss.equals(this.parent, o.parent) && this.type === o.type;
		}
	}, null, [ss.IDisposable]);
	$Franca_Serialization_Streaming_JsonContainerWriter.$ctor1.prototype = $Franca_Serialization_Streaming_JsonContainerWriter.prototype;
	$Franca_Serialization_Streaming_JsonContainerWriter.__class = false;
	ss.initClass($Franca_Serialization_Streaming_JsonFixedArrayWriter, $asm, {
		dispose: function() {
			this.endRead();
		},
		endRead: function() {
			this.parent.endWriteFixedArray(this.isNullArray);
		},
		getHashCode: function() {
			var h = (this.parent ? ss.getHashCode(this.parent) : 0);
			h = h * 397 ^ (this.isNullArray ? 1 : 0);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Serialization_Streaming_JsonFixedArrayWriter)) {
				return false;
			}
			return ss.equals(this.parent, o.parent) && this.isNullArray === o.isNullArray;
		}
	}, null, [ss.IDisposable]);
	$Franca_Serialization_Streaming_JsonFixedArrayWriter.$ctor1.prototype = $Franca_Serialization_Streaming_JsonFixedArrayWriter.prototype;
	$Franca_Serialization_Streaming_JsonFixedArrayWriter.__class = false;
	ss.initClass($Franca_Serialization_Streaming_JsonObjectReader, $asm, {
		getEnumerator: function() {
			var $result, $state = 0, current, objectFinalizer;
			return new ss.IteratorBlockEnumerator(function() {
				$sm1:
				for (;;) {
					switch ($state) {
						case 0: {
							$state = -1;
							$state = 1;
							continue $sm1;
						}
						case 1: {
							$state = -1;
							if (!((current = this.parent.readObjectValue()).type !== 2)) {
								$state = 2;
								continue $sm1;
							}
							$result = current;
							$state = 1;
							return true;
						}
						case 2: {
							$state = -1;
							objectFinalizer = ss.safeCast(this.parent, $Franca_Serialization_Streaming_IJsonContainerFinalizer);
							if (ss.isValue(objectFinalizer)) {
								objectFinalizer.finalizeObject(false);
							}
							else {
								this.parent.endReadObject();
							}
							$state = -1;
							break $sm1;
						}
						default: {
							break $sm1;
						}
					}
				}
				return false;
			}, function() {
				return $result;
			}, null, this);
		},
		getHashCode: function() {
			return (this.parent ? ss.getHashCode(this.parent) : 0) | 0;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Serialization_Streaming_JsonObjectReader)) {
				return false;
			}
			return ss.equals(this.parent, o.parent);
		}
	}, null, [ss.IEnumerable, ss.IEnumerable]);
	$Franca_Serialization_Streaming_JsonObjectReader.$ctor1.prototype = $Franca_Serialization_Streaming_JsonObjectReader.prototype;
	$Franca_Serialization_Streaming_JsonObjectReader.__class = false;
	ss.initClass($Franca_Serialization_Streaming_JsonObjectValue, $asm, {
		toString: function() {
			return ss.formatString('{0}:{1}', this.key, this.type);
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_Serialization_Streaming_JsonObjectValue);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.referenceEquals(ss.unbox(b).key, this.key) && ss.unbox(b).type === this.type;
		},
		equalsT: function(b) {
			return ss.referenceEquals(this.key, b.key) && this.type === b.type;
		},
		getHashCode: function() {
			return ss.getHashCode(this.key) ^ ss.getHashCode(this.type);
		}
	}, null, [ss.IEquatable]);
	$Franca_Serialization_Streaming_JsonObjectValue.$ctor1.prototype = $Franca_Serialization_Streaming_JsonObjectValue.prototype;
	$Franca_Serialization_Streaming_JsonObjectValue.__class = false;
	ss.initClass($Franca_Serialization_Streaming_JsonStringReader, $asm, {
		skipValue: function() {
			do {
				if (this.$valueToken.type === 3) {
					this.$skipStack.push(this.$valueToken.type);
					this.beginReadArray();
				}
				else if (this.$valueToken.type === 1) {
					this.$skipStack.push(this.$valueToken.type);
					this.beginReadObject();
				}
				if (this.$skipStack.length > 0) {
					var type = ss.arrayPeekBack(this.$skipStack);
					if (type === 3) {
						if (this.readArrayValue() === 4) {
							this.endReadArray();
							this.$skipStack.pop();
						}
					}
					else if (this.readObjectValue().type === 2) {
						this.endReadObject();
						this.$skipStack.pop();
					}
				}
			} while (this.$skipStack.length > 0);
			if (this.$skipStack.length > 0) {
				ss.clear(this.$skipStack);
			}
		},
		readNumber: function(coerce) {
			var value = {};
			if (this.$valueToken.type !== 8) {
				if (!coerce) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				else {
					switch (this.$valueToken.type) {
						case 3:
						case 1: {
							this.skipValue();
							return Number.NaN;
						}
						case 10:
						case 11: {
							return 0;
						}
						case 9: {
							return 1;
						}
						case 7: {
							$Franca_Calc.tryParseNumber(this.$valueToken.value, value);
							return value.$;
						}
						case 0: {
							return Number.NaN;
						}
						default: {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
					}
				}
			}
			if (!$Franca_Calc.tryParseNumber(this.$valueToken.value, value)) {
				if (coerce) {
					return Number.NaN;
				}
				else {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
			return value.$;
		},
		readBool: function(coerce) {
			if (!coerce) {
				switch (this.$valueToken.type) {
					case 9: {
						return true;
					}
					case 10: {
						return false;
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
			else {
				switch (this.$valueToken.type) {
					case 9: {
						return true;
					}
					case 10: {
						return false;
					}
					case 3:
					case 1: {
						this.skipValue();
						return true;
					}
					case 7: {
						return true;
					}
					case 11: {
						return false;
					}
					case 8: {
						var value = {};
						if ($Franca_Calc.tryParseNumber(this.$valueToken.value, value)) {
							return value.$ !== 0;
						}
						return false;
					}
					case 0: {
						return false;
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
		},
		readString: function(coerce, minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return null;
			}
			var value;
			if (this.$valueToken.type !== 7) {
				if (!coerce) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				else {
					switch (this.$valueToken.type) {
						case 3: {
							this.skipValue();
							value = '[]';
							break;
						}
						case 1: {
							this.skipValue();
							value = '{}';
							break;
						}
						case 9: {
							value = 'True';
							break;
						}
						case 10: {
							value = 'False';
							break;
						}
						case 8: {
							value = this.$valueToken.value;
							break;
						}
						case 0: {
							value = '';
							break;
						}
						default: {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
					}
				}
			}
			else {
				value = this.$valueToken.value;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			return value;
		},
		readInteger: function(coerce) {
			var value = {};
			if (this.$valueToken.type !== 8) {
				if (!coerce) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				else {
					switch (this.$valueToken.type) {
						case 3:
						case 1: {
							this.skipValue();
							return 1;
						}
						case 10:
						case 11: {
							return 0;
						}
						case 9: {
							return 1;
						}
						case 7: {
							if (!$Franca_Calc.tryParseNumber(this.$valueToken.value, value)) {
								return 0;
							}
							return Math.trunc(value.$);
						}
						case 0: {
							return 0;
						}
						default: {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
					}
				}
			}
			if (!$Franca_Calc.tryParseNumber(this.$valueToken.value, value)) {
				if (coerce) {
					return 0;
				}
				else {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
			if (value.$ % 1 !== 0) {
				if (coerce) {
					return Math.trunc(value.$);
				}
				else {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
			return value.$;
		},
		readNull: function(coerce) {
			this.skipValue();
			return null;
		},
		readNull$1: function(T) {
			return function(coerce) {
				this.skipValue();
				return ss.getDefaultValue(T);
			};
		},
		readInt8: function(coerce) {
			return $Franca_Cast.toSByte$1(this.readInteger(coerce));
		},
		readUInt8: function(coerce) {
			return this.readInteger(coerce) & 255;
		},
		readInt16: function(coerce) {
			return $Franca_Cast.toShort$1(this.readInteger(coerce));
		},
		readUInt16: function(coerce) {
			return this.readInteger(coerce) & 65535;
		},
		readInt32: function(coerce) {
			return this.readInteger(coerce) >> 0;
		},
		readUInt32: function(coerce) {
			return this.readInteger(coerce) >>> 0;
		},
		readSingle: function(coerce) {
			return this.readNumber(coerce);
		},
		readDouble: function(coerce) {
			return this.readNumber(coerce);
		},
		beginReadObject: function() {
			if (this.$valueToken.type !== 1) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			$Franca_Serialization_Streaming_JsonStringReader.$push(this.$firstValueStack, true);
		},
		endReadObject: function() {
			var token = this.$readToken();
			if (token.type !== 2) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			$Franca_Serialization_Streaming_JsonStringReader.$pop(this.$firstValueStack);
			if (this.get_$root()) {
				token = this.$readToken();
				if (token.type !== 0) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
		},
		readObject: function() {
			this.beginReadObject();
			return new $Franca_Serialization_Streaming_JsonObjectReader.$ctor1(this);
		},
		beginReadArray: function() {
			if (this.$valueToken.type !== 3) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			$Franca_Serialization_Streaming_JsonStringReader.$push(this.$firstValueStack, true);
		},
		endReadArray: function() {
			var token = this.$readToken();
			if (token.type !== 4) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			$Franca_Serialization_Streaming_JsonStringReader.$pop(this.$firstValueStack);
			if (this.get_$root()) {
				token = this.$readToken();
				if (token.type !== 0) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
		},
		readArray: function(minLength, maxLength) {
			this.beginReadArray();
			return new $Franca_Serialization_Streaming_JsonArrayReader.$ctor1(this, minLength, maxLength);
		},
		readArrayValue: function() {
			var peekType = {};
			if (this.$tryPeekToken(peekType) && peekType.$ === 4) {
				return 4;
			}
			this.$valueToken = this.$readToken();
			if (!this.get_$isFirstValue()) {
				if (this.$valueToken.type !== 6) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.$valueToken = this.$readToken();
			}
			else {
				this.$firstValueStack[this.$firstValueStack.length - 1] = false;
			}
			if (this.$valueToken.type !== 10 && this.$valueToken.type !== 9 && this.$valueToken.type !== 11 && this.$valueToken.type !== 8 && this.$valueToken.type !== 7 && this.$valueToken.type !== 3 && this.$valueToken.type !== 1) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			return this.$valueToken.type;
		},
		readObjectValue: function() {
			var peekType = {};
			if (this.$tryPeekToken(peekType) && peekType.$ === 2) {
				return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(null, 2);
			}
			var token = this.$readToken();
			if (!this.get_$isFirstValue()) {
				if (token.type !== 6) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				token = this.$readToken();
			}
			else {
				this.$firstValueStack[this.$firstValueStack.length - 1] = false;
			}
			if (token.type !== 7) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var key = token.value;
			token = this.$readToken();
			if (token.type !== 5) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.$valueToken = this.$readToken();
			if (this.$valueToken.type !== 10 && this.$valueToken.type !== 9 && this.$valueToken.type !== 11 && this.$valueToken.type !== 8 && this.$valueToken.type !== 7 && this.$valueToken.type !== 3 && this.$valueToken.type !== 1) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			return new $Franca_Serialization_Streaming_JsonObjectValue.$ctor1(key, this.$valueToken.type);
		},
		$isFixedArrayTypeDescriptor: function(matchType) {
			var expectedLength = $Franca_Serialization_Streaming_JsonStringReader.fixedArrayTypePrefix.length + matchType.length;
			var value = this.readString(false, expectedLength, expectedLength);
			if (ss.isNullOrUndefined(value)) {
				return false;
			}
			if (!$Franca_Serialization_Streaming_JsonStringReader.$startsWith(value, $Franca_Serialization_Streaming_JsonStringReader.fixedArrayTypePrefix)) {
				return false;
			}
			if (!$Franca_Serialization_Streaming_JsonStringReader.$endsWith(value, matchType)) {
				return false;
			}
			return true;
		},
		readFixedArray: function(minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return new $Franca_Serialization_Streaming_JsonArrayReader.$ctor2(this, -1, $Franca_Serialization_Streaming_JsonStringReader.get_$endReadFixedArrayDelegate(), minLength, maxLength);
			}
			this.beginReadArray();
			var valType = this.readArrayValue();
			if (valType === 7) {
				if (!this.$isFixedArrayTypeDescriptor('any')) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (this.readArrayValue() !== 8) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
			else if (valType !== 8) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			var length = this.readInt32(false);
			if (length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (this.readArrayValue() !== 3) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginReadArray();
			return new $Franca_Serialization_Streaming_JsonArrayReader.$ctor2(this, length, $Franca_Serialization_Streaming_JsonStringReader.get_$endReadFixedArrayDelegate(), minLength, maxLength);
		},
		readBinary$1: function(fixedArrayType, minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return null;
			}
			var bin;
			this.beginReadArray();
			{
				var valType = this.readArrayValue();
				if (valType === 7) {
					if (!this.$isFixedArrayTypeDescriptor(fixedArrayType)) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					if (this.readArrayValue() !== 8) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				else if (valType !== 8) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				var length = this.readInt32(false);
				if (length < minLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (maxLength >= 0 && length > maxLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				var type;
				if ((type = this.readArrayValue()) === 3) {
					bin = new $Franca_BinaryData.$ctor5(length);
					this.beginReadArray();
					{
						var index = 0;
						while ((type = this.readArrayValue()) !== 4) {
							if (maxLength >= 0 && index >= maxLength) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							if (type !== 8) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							if (index >= bin.get_length()) {
								throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
							}
							bin.set_item(index++, this.readUInt8(false));
						}
						if (index < minLength) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
					}
					this.endReadArray();
				}
				else if (type === 7) {
					bin = $Franca_Text_Base64.decode(this.readString(false, 0, -1));
				}
				else {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (bin.get_length() !== length) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
			this.endReadArray();
			return bin;
		},
		readBinary: function(minLength, maxLength) {
			return this.readBinary$1('binary', minLength, maxLength);
		},
		readUInt8Array: function(minLength, maxLength) {
			return $Franca_Collections_ByteArray.op_Explicit(this.readBinary$1('uint8', minLength, maxLength));
		},
		readInt8Array: function(minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return null;
			}
			var arr;
			this.beginReadArray();
			{
				var valType = this.readArrayValue();
				if (valType === 7) {
					if (!this.$isFixedArrayTypeDescriptor('int8')) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					if (this.readArrayValue() !== 8) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				else if (valType !== 8) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				var length = this.readInt32(false);
				if (length < minLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (maxLength >= 0 && length > maxLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (this.readArrayValue() !== 3) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				arr = new $Franca_Collections_SByteArray.$ctor2(length);
				this.beginReadArray();
				{
					var index = 0;
					var type;
					while ((type = this.readArrayValue()) !== 4) {
						if (maxLength >= 0 && index >= maxLength) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (type !== 8) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (index >= arr.get_length()) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						arr.set_item(index++, this.readInt8(false));
					}
					if (index < minLength) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				this.endReadArray();
			}
			this.endReadArray();
			return arr;
		},
		readInt16Array: function(minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return null;
			}
			var arr;
			this.beginReadArray();
			{
				var valType = this.readArrayValue();
				if (valType === 7) {
					if (!this.$isFixedArrayTypeDescriptor('int16')) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					if (this.readArrayValue() !== 8) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				else if (valType !== 8) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				var length = this.readInt32(false);
				if (length < minLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (maxLength >= 0 && length > maxLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (this.readArrayValue() !== 3) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				arr = new $Franca_Collections_ShortArray.$ctor2(length);
				this.beginReadArray();
				{
					var index = 0;
					var type;
					while ((type = this.readArrayValue()) !== 4) {
						if (maxLength >= 0 && index >= maxLength) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (type !== 8) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (index >= arr.get_length()) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						arr.set_item(index++, this.readInt16(false));
					}
					if (index < minLength) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				this.endReadArray();
			}
			this.endReadArray();
			return arr;
		},
		readUInt16Array: function(minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return null;
			}
			var arr;
			this.beginReadArray();
			{
				var valType = this.readArrayValue();
				if (valType === 7) {
					if (!this.$isFixedArrayTypeDescriptor('uint16')) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					if (this.readArrayValue() !== 8) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				else if (valType !== 8) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				var length = this.readInt32(false);
				if (length < minLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (maxLength >= 0 && length > maxLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (this.readArrayValue() !== 3) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				arr = new $Franca_Collections_UShortArray.$ctor2(length);
				this.beginReadArray();
				{
					var index = 0;
					var type;
					while ((type = this.readArrayValue()) !== 4) {
						if (maxLength >= 0 && index >= maxLength) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (type !== 8) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (index >= arr.get_length()) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						arr.set_item(index++, this.readUInt16(false));
					}
					if (index < minLength) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				this.endReadArray();
			}
			this.endReadArray();
			return arr;
		},
		readInt32Array: function(minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return null;
			}
			var arr;
			this.beginReadArray();
			{
				var valType = this.readArrayValue();
				if (valType === 7) {
					if (!this.$isFixedArrayTypeDescriptor('int32')) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					if (this.readArrayValue() !== 8) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				else if (valType !== 8) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				var length = this.readInt32(false);
				if (length < minLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (maxLength >= 0 && length > maxLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (this.readArrayValue() !== 3) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				arr = new $Franca_Collections_IntArray.$ctor2(length);
				this.beginReadArray();
				{
					var index = 0;
					var type;
					while ((type = this.readArrayValue()) !== 4) {
						if (maxLength >= 0 && index >= maxLength) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (type !== 8) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (index >= arr.get_length()) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						arr.set_item(index++, this.readInt32(false));
					}
					if (index < minLength) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				this.endReadArray();
			}
			this.endReadArray();
			return arr;
		},
		readUInt32Array: function(minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return null;
			}
			var arr;
			this.beginReadArray();
			{
				var valType = this.readArrayValue();
				if (valType === 7) {
					if (!this.$isFixedArrayTypeDescriptor('uint32')) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					if (this.readArrayValue() !== 8) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				else if (valType !== 8) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				var length = this.readInt32(false);
				if (length < minLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (maxLength >= 0 && length > maxLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (this.readArrayValue() !== 3) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				arr = new $Franca_Collections_UIntArray.$ctor2(length);
				this.beginReadArray();
				{
					var index = 0;
					var type;
					while ((type = this.readArrayValue()) !== 4) {
						if (maxLength >= 0 && index >= maxLength) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (type !== 8) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (index >= arr.get_length()) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						arr.set_item(index++, this.readUInt32(false));
					}
					if (index < minLength) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				this.endReadArray();
			}
			this.endReadArray();
			return arr;
		},
		readSingleArray: function(minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return null;
			}
			var arr;
			this.beginReadArray();
			{
				var valType = this.readArrayValue();
				if (valType === 7) {
					if (!this.$isFixedArrayTypeDescriptor('single')) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					if (this.readArrayValue() !== 8) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				else if (valType !== 8) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				var length = this.readInt32(false);
				if (length < minLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (maxLength >= 0 && length > maxLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (this.readArrayValue() !== 3) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				arr = new $Franca_Collections_FloatArray.$ctor2(length);
				this.beginReadArray();
				{
					var index = 0;
					var type;
					while ((type = this.readArrayValue()) !== 4) {
						if (maxLength >= 0 && index >= maxLength) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (type !== 8) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (index >= arr.get_length()) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						arr.set_item(index++, this.readSingle(false));
					}
					if (index < minLength) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				this.endReadArray();
			}
			this.endReadArray();
			return arr;
		},
		readDoubleArray: function(minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return null;
			}
			var arr;
			this.beginReadArray();
			{
				var valType = this.readArrayValue();
				if (valType === 7) {
					if (!this.$isFixedArrayTypeDescriptor('double')) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					if (this.readArrayValue() !== 8) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				else if (valType !== 8) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				var length = this.readInt32(false);
				if (length < minLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (maxLength >= 0 && length > maxLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (this.readArrayValue() !== 3) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				arr = new $Franca_Collections_DoubleArray.$ctor2(length);
				this.beginReadArray();
				{
					var index = 0;
					var type;
					while ((type = this.readArrayValue()) !== 4) {
						if (maxLength >= 0 && index >= maxLength) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (type !== 8) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (index >= arr.get_length()) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						arr.set_item(index++, this.readDouble(false));
					}
					if (index < minLength) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				this.endReadArray();
			}
			this.endReadArray();
			return arr;
		},
		readBoolArray: function(minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return null;
			}
			var arr;
			this.beginReadArray();
			{
				var valType = this.readArrayValue();
				if (valType === 7) {
					if (!this.$isFixedArrayTypeDescriptor('bool')) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					if (this.readArrayValue() !== 8) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				else if (valType !== 8) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				var length = this.readInt32(false);
				if (length < minLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (maxLength >= 0 && length > maxLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (this.readArrayValue() !== 3) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				arr = new Array(length);
				this.beginReadArray();
				{
					var index = 0;
					var type;
					while ((type = this.readArrayValue()) !== 4) {
						if (maxLength >= 0 && index >= maxLength) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (type !== 8) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (index >= arr.length) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						arr[index++] = this.readBool(false);
					}
					if (index < minLength) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				this.endReadArray();
			}
			this.endReadArray();
			return arr;
		},
		readStringArray: function(minLength, maxLength) {
			if (this.$valueToken.type === 11) {
				return null;
			}
			var arr;
			this.beginReadArray();
			{
				var valType = this.readArrayValue();
				if (valType === 7) {
					if (!this.$isFixedArrayTypeDescriptor('string')) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					if (this.readArrayValue() !== 8) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				else if (valType !== 8) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				var length = this.readInt32(false);
				if (length < minLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (maxLength >= 0 && length > maxLength) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				if (this.readArrayValue() !== 3) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				arr = new Array(length);
				this.beginReadArray();
				{
					var index = 0;
					var type;
					while ((type = this.readArrayValue()) !== 4) {
						if (maxLength >= 0 && index >= maxLength) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (type !== 8) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (index >= arr.length) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						arr[index++] = this.readString(false, 0, -1);
					}
					if (index < minLength) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
				this.endReadArray();
			}
			this.endReadArray();
			return arr;
		},
		isObject: function() {
			return this.$valueToken.type === 1;
		},
		isArray: function() {
			return this.$valueToken.type === 3;
		},
		isString: function() {
			return this.$valueToken.type === 7;
		},
		isNumber: function() {
			return this.$valueToken.type === 8;
		},
		isBool: function() {
			return this.$valueToken.type === 9 || this.$valueToken.type === 10;
		},
		isNull: function() {
			return this.$valueToken.type === 11;
		},
		isInteger: function() {
			return this.get_$valueIsInteger();
		},
		get_currentType: function() {
			return this.$valueToken.type;
		},
		$readFirstToken: function() {
			var token = this.$readToken();
			switch (token.type) {
				case 3:
				case 10:
				case 11:
				case 8:
				case 1:
				case 7:
				case 9: {
					break;
				}
				default: {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
			this.$valueToken = token;
		},
		$tryPeekToken: function(type) {
			if (this.get_$eof()) {
				type.$ = 0;
				return true;
			}
			var c;
			while ($Franca_Serialization_Streaming_JsonStringReader.$isWhitespace(c = this.$getChar())) {
			}
			this.$index--;
			if (c === 0 && this.$index + 1 >= this.$json.length) {
				type.$ = 0;
				return true;
			}
			switch (c) {
				case 123: {
					type.$ = 1;
					return true;
				}
				case 125: {
					type.$ = 2;
					return true;
				}
				case 91: {
					type.$ = 3;
					return true;
				}
				case 93: {
					type.$ = 4;
					return true;
				}
				case 58: {
					type.$ = 5;
					return true;
				}
				case 44: {
					type.$ = 6;
					return true;
				}
				default: {
					type.$ = -1;
					return false;
				}
			}
		},
		$readToken: function() {
			if (this.get_$eof()) {
				return new $Franca_Serialization_Streaming_JsonToken.$ctor1(null, 0);
			}
			var c;
			while ($Franca_Serialization_Streaming_JsonStringReader.$isWhitespace(c = this.$getChar())) {
			}
			if (c === 0 && this.$index >= this.$json.length) {
				return new $Franca_Serialization_Streaming_JsonToken.$ctor1(null, 0);
			}
			switch (c) {
				case 123: {
					return new $Franca_Serialization_Streaming_JsonToken.$ctor1('{', 1);
				}
				case 125: {
					return new $Franca_Serialization_Streaming_JsonToken.$ctor1('}', 2);
				}
				case 91: {
					return new $Franca_Serialization_Streaming_JsonToken.$ctor1('[', 3);
				}
				case 93: {
					return new $Franca_Serialization_Streaming_JsonToken.$ctor1(']', 4);
				}
				case 58: {
					return new $Franca_Serialization_Streaming_JsonToken.$ctor1(':', 5);
				}
				case 44: {
					return new $Franca_Serialization_Streaming_JsonToken.$ctor1(',', 6);
				}
				case 34: {
					this.$str.clear();
					var isEscape = false;
					while (true) {
						if (this.get_$eof()) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (isEscape) {
							this.$readTokenEscape();
							isEscape = false;
						}
						else {
							c = this.$getChar();
							if (c === 92) {
								isEscape = true;
							}
							else if (c === 34) {
								break;
							}
							else {
								this.$str.appendChar(c);
							}
						}
					}
					return new $Franca_Serialization_Streaming_JsonToken.$ctor1(this.$str.toString(), 7);
				}
				case 116: {
					for (var i = 1; i < $Franca_Serialization_Streaming_JsonStringReader.$trueStringLen; i++) {
						if (this.get_$eof()) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (this.$getChar() !== $Franca_Serialization_Streaming_JsonStringReader.$trueString.charCodeAt(i)) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
					}
					c = this.$peekChar();
					if ($System_CharExtensions.isAsciiLetter(c, true, true) || $System_CharExtensions.isDigit(c)) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					return new $Franca_Serialization_Streaming_JsonToken.$ctor1($Franca_Serialization_Streaming_JsonStringReader.$trueString, 9);
				}
				case 102: {
					for (var i1 = 1; i1 < $Franca_Serialization_Streaming_JsonStringReader.$falseStringLen; i1++) {
						if (this.get_$eof()) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (this.$getChar() !== $Franca_Serialization_Streaming_JsonStringReader.$falseString.charCodeAt(i1)) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
					}
					c = this.$peekChar();
					if ($System_CharExtensions.isAsciiLetter(c, true, true) || $System_CharExtensions.isDigit(c)) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					return new $Franca_Serialization_Streaming_JsonToken.$ctor1($Franca_Serialization_Streaming_JsonStringReader.$falseString, 10);
				}
				case 110: {
					for (var i2 = 1; i2 < $Franca_Serialization_Streaming_JsonStringReader.$nullStringLen; i2++) {
						if (this.get_$eof()) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
						if (this.$getChar() !== $Franca_Serialization_Streaming_JsonStringReader.$nullString.charCodeAt(i2)) {
							throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
						}
					}
					c = this.$peekChar();
					if ($System_CharExtensions.isAsciiLetter(c, true, true) || $System_CharExtensions.isDigit(c)) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					return new $Franca_Serialization_Streaming_JsonToken.$ctor1($Franca_Serialization_Streaming_JsonStringReader.$nullString, 11);
				}
				case 45:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57: {
					this.$str.clear();
					this.$str.appendChar(c);
					var integerExponent = 0;
					this.$readTokenDigits();
					for (var i3 = 0; i3 < this.$str.length; i3++) {
						//if (str[i] != '0') {
						//    integerExponent = str.Length - i - 1;
						//}
					}
					if (this.$peekChar() === 46) {
						var strPos = this.$str.length;
						this.$str.appendChar(this.$getChar());
						this.$readTokenDigits();
						for (var i4 = strPos + 1; i4 < this.$str.length; i4++) {
							//if (str[i] != '0') {
							//    integerExponent = strPos - i;
							//    break;
							//}
						}
					}
					var exponentValue = 0;
					c = this.$peekChar();
					if (c === 101 || c === 69) {
						this.$str.appendChar(this.$getChar());
						var negExponent = false;
						c = this.$peekChar();
						if (c === 43 || c === 45) {
							this.$str.appendChar(this.$getChar());
							negExponent = c === 45;
						}
						var strPos1 = this.$str.length;
						this.$readTokenDigits();
						for (var i5 = strPos1; i5 < this.$str.length; i5++) {
							//exponentValue = exponentValue * 10 + str[i] - '0';
						}
						if (negExponent) {
							exponentValue = -exponentValue;
						}
					}
					c = this.$peekChar();
					if ($System_CharExtensions.isAsciiLetter(c, true, true) || $System_CharExtensions.isDigit(c)) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					this.$numberExponent = integerExponent + exponentValue;
					return new $Franca_Serialization_Streaming_JsonToken.$ctor1(this.$str.toString(), 8);
				}
				default: {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
			}
		},
		$readTokenEscape: function() {
			var c = this.$getChar();
			if (c === 117) {
				var value = {};
				if (!$Franca_Calc.tryParseHex$3(this.$json, this.$index, value, true, 4, 1)) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.$index += 4;
				this.$str.appendChar(value.$);
			}
			else {
				switch (c) {
					case 98: {
						this.$str.appendChar(8);
						break;
					}
					case 102: {
						this.$str.appendChar(12);
						break;
					}
					case 110: {
						this.$str.appendChar(10);
						break;
					}
					case 114: {
						this.$str.appendChar(13);
						break;
					}
					case 116: {
						this.$str.appendChar(9);
						break;
					}
					case 47: {
						this.$str.appendChar(47);
						break;
					}
					case 92: {
						this.$str.appendChar(92);
						break;
					}
					case 34: {
						this.$str.appendChar(34);
						break;
					}
					default: {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
				}
			}
		},
		$readTokenDigits: function() {
			while (true) {
				if (this.get_$eof()) {
					break;
				}
				var c = this.$getChar();
				if (!$System_CharExtensions.isDigit(c)) {
					this.$index--;
					break;
				}
				this.$str.appendChar(c);
			}
		},
		$getChar: function() {
			if (this.get_$eof()) {
				return 0;
			}
			return this.$json.charCodeAt(this.$index++);
		},
		$peekChar: function() {
			if (this.get_$eof()) {
				return 0;
			}
			return this.$json.charCodeAt(this.$index);
		},
		dispose: function() {
			this.$json = null;
		},
		get_$valueIsInteger: function() {
			return this.$valueToken.type === 8 && this.$numberExponent >= 0;
		},
		get_$eof: function() {
			return this.$index >= this.$json.length;
		},
		get_$isFirstValue: function() {
			return ((this.$firstValueStack.length > 0) ? this.$firstValueStack[this.$firstValueStack.length - 1] : true);
		},
		get_$root: function() {
			return this.$firstValueStack.length === 0;
		}
	}, null, [ss.IDisposable, $Franca_Serialization_Streaming_IJsonReader]);
	ss.initClass($Franca_Serialization_Streaming_JsonStringWriter, $asm, {
		writeKey: function(key) {
			if (ss.isNullOrUndefined(key)) {
				throw new ss.ArgumentNullException('key');
			}
			if (this.get_$prettyPrint()) {
				if (this.get_$isFirstValue()) {
					this.$firstValueStack[this.$firstValueStack.length - 1] = false;
				}
				else {
					this.$json.appendLine(',');
				}
				this.$json.append($Franca_Serialization_Streaming_JsonStringWriter.$indentString(this.$indent));
				this.$json.append('"');
				this.$json.append(key);
				this.$json.append('": ');
			}
			else {
				if (this.get_$isFirstValue()) {
					this.$firstValueStack[this.$firstValueStack.length - 1] = false;
				}
				else {
					this.$json.append(',');
				}
				this.$json.append('"');
				this.$json.append(key);
				this.$json.append('":');
			}
		},
		$writeComma: function() {
			if (this.get_$prettyPrint()) {
				if (this.get_$isFirstValue()) {
					this.$firstValueStack[this.$firstValueStack.length - 1] = false;
				}
				else {
					this.$json.appendLine(',');
				}
				this.$json.append($Franca_Serialization_Streaming_JsonStringWriter.$indentString(this.$indent));
			}
			else if (this.get_$isFirstValue()) {
				this.$firstValueStack[this.$firstValueStack.length - 1] = false;
			}
			else {
				this.$json.append(',');
			}
		},
		writeStreamer: function(T) {
			return function(value, key, allowNull) {
				if (ss.referenceEquals(value, null)) {
					if (!allowNull) {
						throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
					}
					this.writeNull(key);
					return;
				}
				// only write key, not comma:
				// further serialization by the stream writer will call value writing
				// methods, which will make the writer add the comma later
				if (ss.isValue(key)) {
					this.writeKey(key);
				}
				value.writeJson(this);
			};
		},
		write: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			if (value) {
				this.$json.append('true');
			}
			else {
				this.$json.append('false');
			}
		},
		write$p: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			this.$json.append('"');
			this.$json.append($System_StringExtensions.escape(value, 2));
			this.$json.append('"');
		},
		write$5: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			this.$json.append(value.toString());
		},
		write$1: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			this.$json.append(value.toString());
		},
		write$3: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			this.$json.append(value.toString());
		},
		write$7: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			this.$json.append(value.toString());
		},
		write$4: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			this.$json.append(value.toString());
		},
		write$8: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			this.$json.append(value.toString());
		},
		write$6: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			this.$json.append(value.toString());
		},
		write$2: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			this.$json.append(value.toString());
		},
		writeInteger: function(value, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			this.$json.append(Math.trunc(value).toString());
		},
		writeNull: function(key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			this.$json.append('null');
		},
		writeNumber: function(value, key) {
			this.write$2(value, key);
		},
		beginWriteObject: function(key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			if (this.get_$prettyPrint()) {
				this.$json.appendLine('{');
			}
			else {
				this.$json.append('{');
			}
			this.$indent += this.$indentSize;
			$Franca_Serialization_Streaming_JsonStringWriter.$push(this.$firstValueStack, true);
			this.$isArrayStack.push(false);
		},
		endWriteObject: function() {
			// eat exceptions so an exception in the inner block doesn't get eaten by the finalizer
			try {
				$Franca_Serialization_Streaming_JsonStringWriter.$pop(this.$firstValueStack);
				this.$isArrayStack.pop();
				if (this.get_$prettyPrint()) {
					this.$json.appendLine();
					this.$indent -= this.$indentSize;
					this.$json.append($Franca_Serialization_Streaming_JsonStringWriter.$indentString(this.$indent));
					this.$json.append('}');
				}
				else {
					this.$json.append('}');
				}
			}
			catch ($t1) {
			}
		},
		writeObject: function(key) {
			this.beginWriteObject(key);
			return new $Franca_Serialization_Streaming_JsonContainerWriter.$ctor1(this, 0);
		},
		beginWriteArray: function(key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			if (this.get_$prettyPrint()) {
				this.$json.appendLine('[');
			}
			else {
				this.$json.append('[');
			}
			this.$indent += this.$indentSize;
			$Franca_Serialization_Streaming_JsonStringWriter.$push(this.$firstValueStack, true);
			this.$isArrayStack.push(true);
		},
		endWriteArray: function() {
			// eat exceptions so an exception in the inner block doesn't get eaten by the finalizer
			try {
				$Franca_Serialization_Streaming_JsonStringWriter.$pop(this.$firstValueStack);
				this.$isArrayStack.pop();
				if (this.get_$prettyPrint()) {
					this.$json.appendLine();
					this.$indent -= this.$indentSize;
					this.$json.append($Franca_Serialization_Streaming_JsonStringWriter.$indentString(this.$indent));
					this.$json.append(']');
				}
				else {
					this.$json.append(']');
				}
			}
			catch ($t1) {
			}
		},
		writeArray: function(key) {
			this.beginWriteArray(key);
			return new $Franca_Serialization_Streaming_JsonContainerWriter.$ctor1(this, 1);
		},
		beginWriteFixedArray$1: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			this.beginWriteFixedArray(ss.count(value), key, minLength, maxLength);
		},
		beginWriteFixedArray: function(length, key, minLength, maxLength) {
			if (length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			this.write$p('fixedArray any', null, true, 0, -1);
			this.write$4(length, null);
			this.beginWriteArray(null);
		},
		endWriteFixedArray: function(isNull) {
			if (isNull) {
				return;
			}
			this.endWriteArray();
			this.endWriteArray();
		},
		writeFixedArray$1: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return new $Franca_Serialization_Streaming_JsonFixedArrayWriter.$ctor1(this, true);
			}
			return this.writeFixedArray(ss.count(value), key, minLength, maxLength);
		},
		writeFixedArray: function(length, key, minLength, maxLength) {
			this.beginWriteFixedArray(length, key, minLength, maxLength);
			return new $Franca_Serialization_Streaming_JsonFixedArrayWriter.$ctor1(this, false);
		},
		writeBinary: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray binary', null, true, 0, -1);
				this.write$4(value.get_length(), null);
				this.write$p($Franca_Text_Base64.encode(value), null, true, 0, -1);
			}
			this.endWriteArray();
		},
		writeBinary$1: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			this.writeBinary($Franca_Collections_ByteArray.op_Explicit$1(value), key, allowNull, minLength, maxLength);
		},
		writeBinary$2: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			this.writeBinary(new $Franca_BinaryData.$ctor3(value), key, allowNull, minLength, maxLength);
		},
		write$9: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray uint8', null, true, 0, -1);
				this.write$4(value.get_length(), null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.get_length(); i++) {
						this.write$1(value.get_item(i), null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$a: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray uint8', null, true, 0, -1);
				this.write$4(value.get_length(), null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.get_length(); i++) {
						this.write$1(value.get_item(i), null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$e: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray int8', null, true, 0, -1);
				this.write$4(value.get_length(), null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.get_length(); i++) {
						this.write$5(value.get_item(i), null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$f: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray int16', null, true, 0, -1);
				this.write$4(value.get_length(), null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.get_length(); i++) {
						this.write$3(value.get_item(i), null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$h: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray uint16', null, true, 0, -1);
				this.write$4(value.get_length(), null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.get_length(); i++) {
						this.write$7(value.get_item(i), null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$d: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray int32', null, true, 0, -1);
				this.write$4(value.get_length(), null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.get_length(); i++) {
						this.write$4(value.get_item(i), null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$g: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray uint32', null, true, 0, -1);
				this.write$4(value.get_length(), null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.get_length(); i++) {
						this.write$8(value.get_item(i), null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$c: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray single', null, true, 0, -1);
				this.write$4(value.get_length(), null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.get_length(); i++) {
						this.write$6(value.get_item(i), null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$b: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.get_length() < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.get_length() > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray double', null, true, 0, -1);
				this.write$4(value.get_length(), null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.get_length(); i++) {
						this.write$2(value.get_item(i), null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$j: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray uint8', null, true, 0, -1);
				this.write$4(value.length, null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.length; i++) {
						this.write$1(value[i], null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$n: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray int8', null, true, 0, -1);
				this.write$4(value.length, null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.length; i++) {
						this.write$5(value[i], null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$l: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray int16', null, true, 0, -1);
				this.write$4(value.length, null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.length; i++) {
						this.write$3(value[i], null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$r: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray uint16', null, true, 0, -1);
				this.write$4(value.length, null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.length; i++) {
						this.write$7(value[i], null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$m: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray int32', null, true, 0, -1);
				this.write$4(value.length, null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.length; i++) {
						this.write$4(value[i], null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$s: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray uint32', null, true, 0, -1);
				this.write$4(value.length, null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.length; i++) {
						this.write$8(value[i], null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$o: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray single', null, true, 0, -1);
				this.write$4(value.length, null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.length; i++) {
						this.write$6(value[i], null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$k: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray double', null, true, 0, -1);
				this.write$4(value.length, null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.length; i++) {
						this.write$2(value[i], null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$i: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray bool', null, true, 0, -1);
				this.write$4(value.length, null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.length; i++) {
						this.write(value[i], null);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		write$q: function(value, key, allowNull, minLength, maxLength) {
			if (ss.isNullOrUndefined(value)) {
				if (!allowNull) {
					throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
				}
				this.writeNull(key);
				return;
			}
			if (value.length < minLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			if (maxLength >= 0 && value.length > maxLength) {
				throw new $Franca_Serialization_Streaming_StreamingJsonTempException();
			}
			this.beginWriteArray(key);
			{
				this.write$p('fixedArray string', null, true, 0, -1);
				this.write$4(value.length, null);
				this.beginWriteArray(null);
				{
					for (var i = 0; i < value.length; i++) {
						this.write$p(value[i], null, true, 0, -1);
					}
				}
				this.endWriteArray();
			}
			this.endWriteArray();
		},
		writeTo: function(writer, key) {
			if (ss.isValue(key)) {
				this.writeKey(key);
			}
			else if (this.get_$isArray()) {
				this.$writeComma();
			}
			writer.$json.append(this.$json.toString());
		},
		dispose: function() {
			this.$json = null;
		},
		get_$isFirstValue: function() {
			return ((this.$firstValueStack.length > 0) ? this.$firstValueStack[this.$firstValueStack.length - 1] : true);
		},
		get_$isArray: function() {
			return ((this.$isArrayStack.length > 0) ? ss.arrayPeekBack(this.$isArrayStack) : false);
		},
		get_$prettyPrint: function() {
			return this.$indentSize > 0;
		},
		get_contents: function() {
			return this.$json.toString();
		}
	}, null, [ss.IDisposable, $Franca_Serialization_Streaming_IJsonWriter]);
	ss.initClass($Franca_Serialization_Streaming_JsonToken, $asm, {
		toString: function() {
			if (ss.isValue(this.value)) {
				return ss.formatString('{0} ({1})', this.type, this.value);
			}
			else {
				return ss.formatString('{0}', this.type);
			}
		},
		getHashCode: function() {
			var h = (this.value ? ss.getHashCode(this.value) : 0);
			h = h * 397 ^ this.type;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Serialization_Streaming_JsonToken)) {
				return false;
			}
			return ss.equals(this.value, o.value) && this.type === o.type;
		}
	});
	$Franca_Serialization_Streaming_JsonToken.$ctor1.prototype = $Franca_Serialization_Streaming_JsonToken.prototype;
	$Franca_Serialization_Streaming_JsonToken.__class = false;
	ss.initEnum($Franca_Serialization_Streaming_JsonTokenType, $asm, { EOF: 0, objectOpen: 1, objectClose: 2, arrayOpen: 3, arrayClose: 4, colon: 5, comma: 6, string: 7, number: 8, true$1: 9, false$1: 10, null$1: 11 });
	ss.initEnum($Franca_Serialization_Streaming_JsonValueType, $asm, { objectOpen: 1, objectClose: 2, arrayOpen: 3, arrayClose: 4, string: 7, number: 8, true$1: 9, false$1: 10, null$1: 11 });
	ss.initClass($Franca_Serialization_Streaming_StreamingJsonTempException, $asm, {}, ss.Exception);
	$Franca_Serialization_Streaming_StreamingJsonTempException.$ctor1.prototype = $Franca_Serialization_Streaming_StreamingJsonTempException.$ctor2.prototype = $Franca_Serialization_Streaming_StreamingJsonTempException.prototype;
	ss.initClass($Franca_Text_ASCII, $asm, {});
	ss.initClass($Franca_Text_Base32, $asm, {});
	ss.initClass($Franca_Text_Base64, $asm, {});
	ss.initEnum($Franca_Text_ControlChar, $asm, { ctrlA: 1, ctrlB: 2, ctrlC: 3, ctrlD: 4, ctrlE: 5, ctrlF: 6, ctrlG: 7, ctrlH: 8, tab: 9, ctrlJ: 10, ctrlK: 11, ctrlL: 12, ctrlM: 13, ctrlN: 14, ctrlO: 15, ctrlP: 16, ctrlQ: 17, ctrlR: 18, ctrlS: 19, ctrlT: 20, ctrlU: 21, ctrlV: 22, ctrlW: 23, ctrlX: 24, ctrlY: 25, ctrlZ: 26, escape: 27, backspace: 28, ctrlHome: 134, ctrlEnd: 135, privateUse1: 145, privateUse2: 146 });
	ss.initClass($Franca_Text_Markup, $asm, {});
	ss.initClass($Franca_Text_MarkupConverter, $asm, {
		get_hasColorTable: null,
		header: null,
		colorTable: null,
		beginBody: null,
		newline: null,
		openMarkup: null,
		endBody: null,
		footer: null,
		appendTextFragment: function(cpy, str, index, length) {
			if (ss.referenceEquals(str, null)) {
				throw new ss.ArgumentNullException('str', "String provided to MarkupConverter.AppendTextFragment can't be null");
			}
			$System_StringBuilderFixes.append(cpy, str, index, length);
		},
		convert: function(str, formatting, align) {
			if (ss.referenceEquals(str, null)) {
				throw new ss.ArgumentNullException('str', "String provided to MarkupConverter.Convert can't be null");
			}
			return this.convert$1(str, 0, str.length, formatting, null);
		},
		convert$1: function(str, index, length, formatting, align) {
			if (ss.referenceEquals(str, null)) {
				throw new ss.ArgumentNullException('str', "String provided to MarkupConverter.Convert can't be null");
			}
			var cpy = new ss.StringBuilder();
			this.header(cpy, str, index, length, formatting, align);
			var hasDefaultColor = ss.isValue(formatting) && ss.isValue(formatting.color);
			var colors = null;
			if (this.get_hasColorTable()) {
				var tags = $Franca_Text_Markup.readAll$1(str, index, length);
				colors = [];
				if (hasDefaultColor) {
					colors.push(ss.unbox(formatting.color));
				}
				for (var $t1 = 0; $t1 < tags.length; $t1++) {
					var markup = tags[$t1];
					if (markup.get_isColor() && ss.isValue(markup.get_color())) {
						if (!ss.contains(colors, ss.unbox(markup.get_color()))) {
							colors.push(ss.unbox(markup.get_color()));
						}
					}
				}
				this.colorTable(colors, hasDefaultColor, cpy, str, index, length, formatting, align);
			}
			this.beginBody(colors, hasDefaultColor, cpy, str, index, length, formatting, align);
			var last = index;
			var end = index + length;
			for (var i = { $: index }; i.$ < end; i.$++) {
				if (str.charCodeAt(i.$) === 10) {
					if (i.$ - last > 0) {
						this.appendTextFragment(cpy, str, last, i.$ - last);
					}
					this.newline(i, 1, colors, hasDefaultColor, cpy, str, index, length, formatting, align);
					last = i.$ + 1;
				}
				else if (str.charCodeAt(i.$) === 13) {
					if (i.$ - last > 0) {
						this.appendTextFragment(cpy, str, last, i.$ - last);
					}
					this.newline(i, 2, colors, hasDefaultColor, cpy, str, index, length, formatting, align);
					if (i.$ + 1 < end && str.charCodeAt(i.$ + 1) === 10) {
						i.$++;
					}
					last = i.$ + 1;
				}
				else if (str.charCodeAt(i.$) === 6) {
					var markup1 = $Franca_Text_Markup.read$1(str, i.$);
					if (ss.isValue(markup1)) {
						if (i.$ - last > 0) {
							this.appendTextFragment(cpy, str, last, i.$ - last);
						}
						this.openMarkup(i, markup1, colors, hasDefaultColor, cpy, str, index, length, formatting, align);
						i.$ += markup1.get_length() - 1;
						last = i.$ + 1;
					}
				}
			}
			if (end - last > 0) {
				this.appendTextFragment(cpy, str, last, end - last);
			}
			this.footer(colors, hasDefaultColor, cpy, str, index, length, formatting, align);
			return cpy.toString();
		}
	});
	ss.initClass($Franca_Text_MarkupHtmlConverter, $asm, {
		get_hasColorTable: function() {
			return false;
		},
		appendTextFragment: function(cpy, str, index, length) {
			if (ss.referenceEquals(str, null)) {
				throw new ss.ArgumentNullException('str', "String provided to MarkupHtmlConverter.AppendTextFragment can't be null");
			}
			if (ss.indexOfAnyString(str, $Franca_Text_MarkupHtmlConverter.$escapedCharacters, index, length) >= 0) {
				str = str.substr(index, length);
				for (var i = 0; i < $Franca_Text_MarkupHtmlConverter.$escapeSequencesFrom.length; i++) {
					str = ss.replaceAllString(str, $Franca_Text_MarkupHtmlConverter.$escapeSequencesFrom[i], $Franca_Text_MarkupHtmlConverter.$escapeSequencesTo[i]);
				}
				cpy.append(str);
			}
			else {
				$Franca_Text_MarkupConverter.prototype.appendTextFragment.call(this, cpy, str, index, length);
			}
		},
		header: function(cpy, str, index, length, formatting, align) {
			this.$boldOpen = false;
			this.$italicOpen = false;
			this.$underlineOpen = false;
			this.$size = null;
			this.$color = null;
		},
		colorTable: function(colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
		},
		beginBody: function(colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
			if (ss.isValue(align)) {
				switch (align.get_horizontal()) {
					case 2: {
						cpy.append('<div style="text-align: right">');
						break;
					}
					case 1: {
						cpy.append('<div style="text-align: center">');
						break;
					}
				}
			}
			if (ss.isValue(formatting)) {
				if (formatting.bold) {
					cpy.append('<b>');
				}
				if (formatting.italic) {
					cpy.append('<i>');
				}
				if (formatting.underline) {
					cpy.append('<u>');
				}
				$System_StringBuilderFixes.appendFormat(cpy, '<font style="font-size: {0}pt">', [formatting.size]);
				if (hasDefaultColor) {
					$System_StringBuilderFixes.appendFormat(cpy, '<span style="color: #{0}">', [ss.unbox(formatting.color).toRGBHex(null)]);
				}
			}
		},
		newline: function(i, newlineLength, colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
			if (this.convertNewlines) {
				cpy.append('<br>');
			}
			else {
				cpy.append(this.nonBRNewlineStyle);
			}
		},
		openMarkup: function(i, markup, colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
			if (markup.get_resetAll()) {
				if (ss.isValue(this.$color)) {
					cpy.append('</span>');
					this.$color = null;
				}
				if (ss.isValue(this.$size)) {
					cpy.append('</font>');
					this.$size = null;
				}
				if (this.$underlineOpen) {
					cpy.append('</u>');
					this.$underlineOpen = false;
				}
				if (this.$italicOpen) {
					cpy.append('</i>');
					this.$italicOpen = false;
				}
				if (this.$boldOpen) {
					cpy.append('</b>');
					this.$boldOpen = false;
				}
			}
			else if (!markup.get_reset()) {
				if (markup.get_bold() && !this.$boldOpen) {
					cpy.append('<b>');
					this.$boldOpen = true;
				}
				if (markup.get_italic() && !this.$italicOpen) {
					cpy.append('<i>');
					this.$italicOpen = true;
				}
				if (markup.get_underline() && !this.$underlineOpen) {
					cpy.append('<u>');
					this.$underlineOpen = true;
				}
				if (markup.get_isSize()) {
					if (markup.get_size() > 0 && this.$size !== markup.get_size()) {
						if (ss.isValue(this.$size)) {
							cpy.append('</font>');
						}
						$System_StringBuilderFixes.appendFormat(cpy, '<font style="font-size: {0}pt">', [markup.get_size()]);
						this.$size = markup.get_size();
					}
				}
				if (markup.get_isColor()) {
					if (ss.isValue(markup.get_color()) && ss.Nullable$1.liftne($Franca_Color.op_Inequality, this.$color, markup.get_color())) {
						if (ss.isValue(this.$color)) {
							cpy.append('</span>');
						}
						$System_StringBuilderFixes.appendFormat(cpy, '<span style="color: #{0}">', [ss.unbox(markup.get_color()).toRGBHex(null)]);
						this.$color = markup.get_color();
					}
				}
			}
			else {
				if (markup.get_bold()) {
					if (this.$boldOpen) {
						cpy.append('</b>');
						this.$boldOpen = false;
					}
				}
				if (markup.get_italic()) {
					if (this.$italicOpen) {
						cpy.append('</i>');
						this.$italicOpen = false;
					}
				}
				if (markup.get_underline()) {
					if (this.$underlineOpen) {
						cpy.append('</u>');
						this.$underlineOpen = false;
					}
				}
				if (markup.get_isSize()) {
					if (ss.isValue(this.$size)) {
						cpy.append('</font>');
						this.$size = null;
					}
				}
				if (markup.get_isColor()) {
					if (ss.isValue(this.$color)) {
						cpy.append('</span>');
						this.$color = null;
					}
				}
			}
		},
		endBody: function(colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
		},
		footer: function(colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
			if (this.$boldOpen) {
				cpy.append('</b>');
				this.$boldOpen = false;
			}
			if (this.$italicOpen) {
				cpy.append('</i>');
				this.$italicOpen = false;
			}
			if (this.$underlineOpen) {
				cpy.append('</u>');
				this.$underlineOpen = false;
			}
			if (ss.isValue(this.$size)) {
				cpy.append('</font>');
				this.$size = null;
			}
			if (ss.isValue(this.$color)) {
				cpy.append('</span>');
				this.$color = null;
			}
			if (ss.isValue(formatting)) {
				if (hasDefaultColor) {
					cpy.append('</span>');
				}
				cpy.append('</font>');
				if (formatting.underline) {
					cpy.append('</u>');
				}
				if (formatting.italic) {
					cpy.append('</i>');
				}
				if (formatting.bold) {
					cpy.append('</b>');
				}
			}
			if (ss.isValue(align)) {
				switch (align.get_horizontal()) {
					case 2: {
						cpy.append('</div>');
						break;
					}
					case 1: {
						cpy.append('</div>');
						break;
					}
				}
			}
		}
	}, $Franca_Text_MarkupConverter);
	ss.initClass($Franca_Text_MarkupRtfConverter, $asm, {
		$sizeToRtf: function(size) {
			return $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, Math.round(size / 0.5));
		},
		get_hasColorTable: function() {
			return true;
		},
		appendTextFragment: function(cpy, str, index, length) {
			if (ss.referenceEquals(str, null)) {
				throw new ss.ArgumentNullException('str', "String provided to MarkupRtfConverter.AppendTextFragment can't be null");
			}
			if (ss.indexOfAnyString(str, $Franca_Text_MarkupRtfConverter.$escapedCharacters, index, length) >= 0) {
				str = str.substr(index, length);
				for (var i = 0; i < $Franca_Text_MarkupRtfConverter.$escapeSequencesFrom.length; i++) {
					str = ss.replaceAllString(str, $Franca_Text_MarkupRtfConverter.$escapeSequencesFrom[i], $Franca_Text_MarkupRtfConverter.$escapeSequencesTo[i]);
				}
				cpy.append(str);
			}
			else {
				$Franca_Text_MarkupConverter.prototype.appendTextFragment.call(this, cpy, str, index, length);
			}
		},
		header: function(cpy, str, index, length, formatting, align) {
			cpy.appendLine('{\\rtf1\\ansi\\deff0');
		},
		colorTable: function(colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
			cpy.append('{\\colortbl ;');
			for (var $t1 = 0; $t1 < colors.length; $t1++) {
				var c = colors[$t1];
				$System_StringBuilderFixes.appendFormat(cpy, '\\red{0}\\green{1}\\blue{2};', [c.get_r(), c.get_g(), c.get_b()]);
			}
			cpy.appendLine('}');
		},
		beginBody: function(colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
			if (ss.isValue(align)) {
				switch (align.get_horizontal()) {
					case 0: {
						cpy.append('\\ql ');
						break;
					}
					case 2: {
						cpy.append('\\qr ');
						break;
					}
					case 1: {
						cpy.append('\\qc ');
						break;
					}
				}
			}
			if (ss.isValue(formatting)) {
				if (formatting.bold) {
					cpy.append('\\b ');
				}
				if (formatting.italic) {
					cpy.append('\\i ');
				}
				if (formatting.underline) {
					cpy.append('\\u ');
				}
				$System_StringBuilderFixes.appendFormat(cpy, '\\fs{0} ', [this.$sizeToRtf(formatting.size)]);
				cpy.append((hasDefaultColor ? '\\cf1 ' : '\\cf0 '));
			}
		},
		newline: function(i, newlineLength, colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
			cpy.append('\\line ');
		},
		openMarkup: function(i, markup, colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
			if (markup.get_resetAll()) {
				if (formatting.bold) {
					cpy.append('\\b ');
				}
				if (formatting.italic) {
					cpy.append('\\i ');
				}
				if (formatting.underline) {
					cpy.append('\\u ');
				}
				$System_StringBuilderFixes.appendFormat(cpy, '\\fs{0} ', [this.$sizeToRtf(formatting.size)]);
				cpy.append((hasDefaultColor ? '\\cf1 ' : '\\cf0 '));
			}
			else {
				if (markup.get_bold()) {
					cpy.append((markup.get_reset() ? '\\b0 ' : '\\b '));
				}
				if (markup.get_italic()) {
					cpy.append((markup.get_reset() ? '\\i0 ' : '\\i '));
				}
				if (markup.get_underline()) {
					cpy.append((markup.get_reset() ? '\\u0 ' : '\\u '));
				}
				if (markup.get_isColor()) {
					if (ss.isValue(markup.get_color()) || markup.get_reset()) {
						if (markup.get_reset()) {
							cpy.append((hasDefaultColor ? '\\cf1 ' : '\\cf0 '));
						}
						else {
							$System_StringBuilderFixes.appendFormat(cpy, '\\cf{0} ', [(ss.indexOf(colors, ss.unbox(markup.get_color())) + 1).toString()]);
						}
					}
				}
				if (markup.get_isSize()) {
					if (markup.get_size() > 0 || markup.get_reset()) {
						if (markup.get_reset()) {
							$System_StringBuilderFixes.appendFormat(cpy, '\\fs{0} ', [this.$sizeToRtf(formatting.size)]);
						}
						else {
							$System_StringBuilderFixes.appendFormat(cpy, '\\fs{0} ', [this.$sizeToRtf(markup.get_size())]);
						}
					}
				}
			}
		},
		endBody: function(colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
		},
		footer: function(colors, hasDefaultColor, cpy, str, index, length, formatting, align) {
			if (ss.isValue(align) && align.get_horizontal() !== 0) {
				cpy.appendLine('\\par');
			}
			cpy.append('}');
		}
	}, $Franca_Text_MarkupConverter);
	ss.initClass($Franca_Text_MarkupTag, $asm, {
		get_type: function() {
			return this.$1$TypeField;
		},
		set_type: function(value) {
			this.$1$TypeField = value;
		},
		get_color: function() {
			return this.$1$ColorField;
		},
		set_color: function(value) {
			this.$1$ColorField = value;
		},
		get_size: function() {
			return this.$1$SizeField;
		},
		set_size: function(value) {
			this.$1$SizeField = value;
		},
		get_index: function() {
			return this.$1$IndexField;
		},
		set_index: function(value) {
			this.$1$IndexField = value;
		},
		toString: function() {
			if (this.get_isSize()) {
				return (this.get_reset() ? 'Size, Reset' : ('Size: ' + this.get_size()));
			}
			else if (this.get_isColor()) {
				return (this.get_reset() ? 'Color, Reset' : ('Color: ' + this.get_color()));
			}
			else {
				var bold = this.get_bold();
				var italic = this.get_italic();
				var underline = this.get_underline();
				if (bold && italic && underline) {
					return (this.get_reset() ? 'Bold, Italic, Underline, Reset' : 'Bold, Italic, Underline');
				}
				else if (bold && italic) {
					return (this.get_reset() ? 'Bold, Italic, Reset' : 'Bold, Italic');
				}
				else if (bold && underline) {
					return (this.get_reset() ? 'Bold, Underline, Reset' : 'Bold, Underline');
				}
				else if (italic && underline) {
					return (this.get_reset() ? 'Italic, Underline, Reset' : 'Italic, Underline');
				}
				else if (bold) {
					return (this.get_reset() ? 'Bold, Reset' : 'Bold');
				}
				else if (italic) {
					return (this.get_reset() ? 'Italic, Reset' : 'Italic');
				}
				else if (underline) {
					return (this.get_reset() ? 'Underline, Reset' : 'Underline');
				}
				else {
					return 'ResetAll';
				}
			}
		},
		toCode: function() {
			if (this.get_isSize()) {
				return $Franca_Text_Markup.size(this.get_size());
			}
			else if (this.get_isColor()) {
				return $Franca_Text_Markup.color(this.get_color());
			}
			else {
				return $Franca_Text_Markup.write($Franca_Calc.clamp$5(this.get_type(), 0, 7) | (this.get_reset() ? 64 : 0));
			}
		},
		toText: function() {
			switch (this.get_type()) {
				case 0:
				case 64: {
					return '^mr';
				}
				case 1: {
					return '^mb';
				}
				case 2: {
					return '^mi';
				}
				case 4: {
					return '^mu';
				}
				case 3: {
					return '^mb^mi';
				}
				case 7: {
					return '^mb^mi^mu';
				}
				case 5: {
					return '^mb^mu';
				}
				case 6: {
					return '^mi^mu';
				}
				case 8: {
					if (!ss.isValue(this.get_color())) {
						return '';
					}
					return '^mc' + ss.unbox(this.get_color()).toRGBAHex(null);
				}
				case 16: {
					if (this.get_size() <= 0) {
						return '';
					}
					var sizeStr = $System_ObjectExtensions.toStringInvariant$1(Number).call(null, this.get_size());
					if (sizeStr.length > 4) {
						if (sizeStr.charCodeAt(3) === 46) {
							return ss.formatString('^ms{0}{1}', '0', sizeStr.substr(0, 3));
						}
						else {
							return ss.formatString('^ms{0}', sizeStr.substr(0, 4));
						}
					}
					else if (sizeStr.length < 4) {
						return ss.formatString('^ms{0}{1}', ss.stringFromChar(String.fromCharCode(48), 4 - sizeStr.length), sizeStr);
					}
					else {
						return '^ms' + sizeStr;
					}
				}
				case 65: {
					return '^mB';
				}
				case 66: {
					return '^mI';
				}
				case 68: {
					return '^mU';
				}
				case 67: {
					return '^mB^mI';
				}
				case 71: {
					return '^mB^mI^mU';
				}
				case 69: {
					return '^mB^mU';
				}
				case 70: {
					return '^mI^mU';
				}
				case 80: {
					return '^mS';
				}
				case 72: {
					return '^mC';
				}
				default: {
					var opcode = Math.max(0, this.get_type());
					return '^mx' + ((opcode < 10) ? ('0' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, opcode)) : $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, opcode));
				}
			}
		},
		get_length: function() {
			if ((this.get_type() & 64) === 64) {
				return 2;
			}
			return ((this.get_type() === 8) ? 6 : ((this.get_type() === 16) ? 4 : 2));
		},
		get_bold: function() {
			return $System_EnumExtensions.hasFlag(this.get_type(), 1);
		},
		get_italic: function() {
			return $System_EnumExtensions.hasFlag(this.get_type(), 2);
		},
		get_underline: function() {
			return $System_EnumExtensions.hasFlag(this.get_type(), 4);
		},
		get_isColor: function() {
			return $System_EnumExtensions.hasFlag(this.get_type(), 8);
		},
		get_isSize: function() {
			return $System_EnumExtensions.hasFlag(this.get_type(), 16);
		},
		get_reset: function() {
			return $System_EnumExtensions.hasFlag(this.get_type(), 64);
		},
		get_resetAll: function() {
			return this.get_type() === 0;
		},
		get_premultiplied: function() {
			return (ss.isValue(this.get_color()) ? ss.unbox(this.get_color()).premultiply() : $Franca_Color.transparentBlack);
		},
		get_hasIndex: function() {
			return this.get_index() >= 0;
		}
	});
	ss.initEnum($Franca_Text_MarkupType, $asm, { resetAll: 0, bold: 1, italic: 2, underline: 4, color: 8, size: 16, reset: 64, boldItalic: 3, boldUnderline: 5, italicUnderline: 6, boldItalicUnderline: 7 });
	ss.initClass($Franca_Text_Match, $asm, {});
	ss.initClass($Franca_Text_MD5, $asm, {});
	ss.initClass($Franca_Text_Regex, $asm, {
		compile: function() {
		},
		exec: function(input) {
			var res = this.$regex.exec(input);
			if (ss.isNullOrUndefined(res) || res.length === 0 || ss.isNullOrUndefined(res[0]) || res[0].length === 0) {
				return new $Franca_Text_Match(-1, null);
			}
			return new $Franca_Text_Match(res.index, res);
		},
		test: function(input) {
			return this.$regex.test(input);
		},
		match: function(input) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(input) {
					var $result, $state = 0, allFlags, allRegex, match;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									allFlags = this.$flags;
									if (!(allFlags.indexOf('g') !== -1)) {
										allFlags += 'g';
									}
									allRegex = new RegExp(this.get_source(), allFlags);
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!ss.isValue(match = allRegex.exec(input))) {
										$state = -1;
										break $sm1;
									}
									if (match.length > 0 && ss.isValue(match[0]) && match[0].length > 0) {
										$result = new $Franca_Text_Match(match.index, match);
										$state = 1;
										return true;
									}
									else {
										$state = -1;
										break $sm1;
									}
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, input);
			}, this);
		},
		get_source: function() {
			return this.$regex.source;
		},
		get_lastIndex: function() {
			return this.$regex.lastIndex;
		},
		set_lastIndex: function(value) {
			this.$regex.lastIndex = value;
		},
		remove: function(input) {
			return this.replace(input, ss.mkdel(this, this.$replaceEmpty));
		},
		$replaceEmpty: function(match) {
			return null;
		},
		replace: function(input, replacer) {
			var str = new ss.StringBuilder();
			var index = 0;
			var $t1 = ss.getEnumerator(this.match(input));
			try {
				while ($t1.moveNext()) {
					var match = $t1.current();
					if (match.index > index) {
						str.append(input.substr(index, match.index - index));
					}
					index = match.index + match.length;
					var replacement = replacer(match);
					if (!$System_StringExtensions.isNullOrEmpty(replacement, false)) {
						str.append(replacement);
					}
				}
			}
			finally {
				$t1.dispose();
			}
			if (input.length - index > 0) {
				str.append(input.substr(index, input.length - index));
			}
			return $System_ObjectExtensions.toStringInvariant$1(ss.StringBuilder).call(null, str);
		}
	});
	ss.initEnum($Franca_Text_RegexFlags, $asm, { None: 0, IgnoreCase: 1, Multiline: 2, Global: 4 });
	ss.initClass($Franca_Text_UTF8, $asm, {});
	ss.initClass($Franca_Text_Word, $asm, {
		toString: function() {
			return this.get_value();
		},
		get_value: function() {
			return this.text.substr(this.index, this.length);
		},
		getHashCode: function() {
			var h = (this.text ? ss.getHashCode(this.text) : 0);
			h = h * 397 ^ this.index;
			h = h * 397 ^ this.length;
			h = h * 397 ^ this.type;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Text_Word)) {
				return false;
			}
			return ss.equals(this.text, o.text) && this.index === o.index && this.length === o.length && this.type === o.type;
		}
	});
	$Franca_Text_Word.$ctor1.prototype = $Franca_Text_Word.prototype;
	$Franca_Text_Word.__class = false;
	ss.initClass($Franca_Text_Words, $asm, {});
	ss.initEnum($Franca_Text_WordType, $asm, { newline: 0, whitespace: 1, word: 2 });
	ss.initClass($Franca_Text_UnicodeExtensions_UintCharExtensions, $asm, {});
	ss.initClass($Franca_Tweening_BaseTween, $asm, {
		validate: null,
		getProgress: function() {
			var itween = ss.safeCast(this, $Franca_Tweening_ITween);
			if (ss.isNullOrUndefined(itween)) {
				throw new ss.InvalidCastException('Cannot GetProcess() on BaseTween of type ' + ss.getTypeName(ss.getInstanceType(this)) + ': was not an ITween.');
			}
			return itween.get_progress();
		}
	});
	ss.initInterface($Franca_Tweening_IBaseTween, $asm, { tick: null, get_startTime: null, set_startTime: null, onFinish: null, onStart: null, managedBy: null, start: null, cancel: null, pause: null, resume: null, finish: null, get_manager: null, get_state: null, get_progress: null });
	ss.initInterface($Franca_Tweening_ITween, $asm, { duration: null, ease: null, delay: null }, [$Franca_Tweening_IBaseTween]);
	ss.initClass($Franca_Tweening_InvalidTweenSequenceException, $asm, {}, ss.Exception);
	$Franca_Tweening_InvalidTweenSequenceException.$ctor1.prototype = $Franca_Tweening_InvalidTweenSequenceException.$ctor2.prototype = $Franca_Tweening_InvalidTweenSequenceException.prototype;
	ss.initInterface($Franca_Tweening_ITweenable, $asm, {});
	ss.initInterface($Franca_Tweening_ITweenableColor, $asm, { get_color: null, set_color: null }, [$Franca_Tweening_ITweenable]);
	ss.initInterface($Franca_Tweening_ITweenableOpacity, $asm, { get_opacity: null, set_opacity: null }, [$Franca_Tweening_ITweenable]);
	ss.initInterface($Franca_Tweening_ITweenableXY, $asm, { get_x: null, set_x: null, get_y: null, set_y: null }, [$Franca_Tweening_ITweenable]);
	ss.initInterface($Franca_Tweening_ITweenablePosition, $asm, { get_position: null, set_position: null }, [$Franca_Tweening_ITweenable, $Franca_Tweening_ITweenableXY]);
	ss.initInterface($Franca_Tweening_ITweenableXYZ, $asm, { get_z: null, set_z: null }, [$Franca_Tweening_ITweenable, $Franca_Tweening_ITweenableXY]);
	ss.initInterface($Franca_Tweening_ITweenablePosition3D, $asm, { get_position: null, set_position: null }, [$Franca_Tweening_ITweenable, $Franca_Tweening_ITweenableXY, $Franca_Tweening_ITweenableXYZ]);
	ss.initInterface($Franca_Tweening_ITweenableRotation, $asm, { get_rotation: null, set_rotation: null }, [$Franca_Tweening_ITweenable]);
	ss.initInterface($Franca_Tweening_ITweenableScaleXY, $asm, { get_scaleX: null, set_scaleX: null, get_scaleY: null, set_scaleY: null }, [$Franca_Tweening_ITweenable]);
	ss.initInterface($Franca_Tweening_ITweenableScale, $asm, { get_scale: null, set_scale: null }, [$Franca_Tweening_ITweenable, $Franca_Tweening_ITweenableScaleXY]);
	ss.initInterface($Franca_Tweening_ITweenableScaleXYZ, $asm, { get_scaleZ: null, set_scaleZ: null }, [$Franca_Tweening_ITweenable, $Franca_Tweening_ITweenableScaleXY]);
	ss.initInterface($Franca_Tweening_ITweenableScale3D, $asm, { get_scale: null, set_scale: null }, [$Franca_Tweening_ITweenable, $Franca_Tweening_ITweenableScaleXY, $Franca_Tweening_ITweenableScaleXYZ]);
	ss.initInterface($Franca_Tweening_ITweenableSize, $asm, { get_size: null, set_size: null }, [$Franca_Tweening_ITweenable]);
	ss.initInterface($Franca_Tweening_ITweenManager, $asm, { update: null, add: null, resume: null, remove: null });
	ss.initClass($Franca_Tweening_Tween, $asm, {
		add_$tick: function(value) {
			this.$1$tickField = ss.delegateCombine(this.$1$tickField, value);
		},
		remove_$tick: function(value) {
			this.$1$tickField = ss.delegateRemove(this.$1$tickField, value);
		},
		add_$finish: function(value) {
			this.$1$finishField = ss.delegateCombine(this.$1$finishField, value);
		},
		remove_$finish: function(value) {
			this.$1$finishField = ss.delegateRemove(this.$1$finishField, value);
		},
		add_$start: function(value) {
			this.$1$startField = ss.delegateCombine(this.$1$startField, value);
		},
		remove_$start: function(value) {
			this.$1$startField = ss.delegateRemove(this.$1$startField, value);
		},
		tick: function(elapsedSeconds) {
			this.$lastTime = elapsedSeconds;
			if (elapsedSeconds < this.$delay) {
				return false;
			}
			if (!this.started) {
				this.started = true;
				if (!ss.staticEquals(this.$1$startField, null)) {
					this.$1$startField(this);
				}
			}
			this.$thisManager.update(elapsedSeconds - this.$delay);
			if (!ss.staticEquals(this.$1$tickField, null)) {
				this.$1$tickField(this);
			}
			var finished = this.$thisManager.tweens.get_count() === 0;
			if (finished) {
				this.$state = 0;
			}
			if (finished && !ss.staticEquals(this.$1$finishField, null)) {
				this.$1$finishField(this);
			}
			return finished;
		},
		$setDefaults: function(tween) {
			tween.duration(this.$defaultDuration);
			tween.ease(this.$defaultEase);
		},
		setPos: function(value) {
			var pos = this.$getPosition().from(value).to(value).duration$1(0);
			return this;
		},
		setPos$1: function(value) {
			var pos = this.$getPosition3D().from(value).to(value).duration$1(0);
			return this;
		},
		setPos$2: function(x, y) {
			return this.setPos(new $Franca_Vector2.$ctor3(x, y));
		},
		setPos$3: function(x, y, z) {
			return this.setPos$1(new $Franca_Vector3.$ctor4(x, y, z));
		},
		setX: function(x) {
			var pos = this.$getX().from(x).to(x).duration$1(0);
			return this;
		},
		setY: function(y) {
			var pos = this.$getY().from(y).to(y).duration$1(0);
			return this;
		},
		setZ: function(z) {
			var pos = this.$getZ().from(z).to(z).duration$1(0);
			return this;
		},
		$getPosition: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_PositionTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_PositionTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_PositionTween);
					}
				}
				var positionTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenablePosition);
				if (ss.isNullOrUndefined(positionTweenable)) {
					throw new ss.InvalidCastException("Could not tween 2D position on ITweenable '" + this.$source + "', does not implement ITweenablePosition");
				}
				var $t2 = new $Franca_Tweening_Tweenable_PositionTween(positionTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_PositionTween);
		},
		$getPosition3D: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_Position3DTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_Position3DTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_Position3DTween);
					}
				}
				var positionTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenablePosition3D);
				if (ss.isNullOrUndefined(positionTweenable)) {
					throw new ss.InvalidCastException("Could not tween 3D position on ITweenable '" + this.$source + "', does not implement ITweenablePosition3D");
				}
				var $t2 = new $Franca_Tweening_Tweenable_Position3DTween(positionTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_Position3DTween);
		},
		fromPos: function(value) {
			var pos = this.$getPosition();
			pos.from(value);
			return this;
		},
		fromPos$1: function(value) {
			var pos = this.$getPosition3D();
			pos.from(value);
			return this;
		},
		fromPos$2: function(x, y) {
			return this.fromPos(new $Franca_Vector2.$ctor3(x, y));
		},
		fromPos$3: function(x, y, z) {
			return this.fromPos$1(new $Franca_Vector3.$ctor4(x, y, z));
		},
		toPos: function(value) {
			var pos = this.$getPosition();
			pos.to(value);
			return this;
		},
		toPos$1: function(value) {
			var pos = this.$getPosition3D();
			pos.to(value);
			return this;
		},
		toPos$2: function(x, y) {
			return this.toPos(new $Franca_Vector2.$ctor3(x, y));
		},
		toPos$3: function(x, y, z) {
			return this.toPos$1(new $Franca_Vector3.$ctor4(x, y, z));
		},
		$getX: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_XTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_XTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_XTween);
					}
				}
				var positionTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableXY);
				if (ss.isNullOrUndefined(positionTweenable)) {
					throw new ss.InvalidCastException("Could not tween x on ITweenable '" + this.$source + "', does not implement ITweenableXY");
				}
				var $t2 = new $Franca_Tweening_Tweenable_XTween(positionTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_XTween);
		},
		fromX: function(value) {
			var pos = this.$getX();
			pos.from(value);
			return this;
		},
		toX: function(value) {
			var pos = this.$getX();
			pos.to(value);
			return this;
		},
		$getY: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_YTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_YTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_YTween);
					}
				}
				var positionTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableXY);
				if (ss.isNullOrUndefined(positionTweenable)) {
					throw new ss.InvalidCastException("Could not tween y on ITweenable '" + this.$source + "', does not implement ITweenableXY");
				}
				var $t2 = new $Franca_Tweening_Tweenable_YTween(positionTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_YTween);
		},
		fromY: function(value) {
			var pos = this.$getY();
			pos.from(value);
			return this;
		},
		toY: function(value) {
			var pos = this.$getY();
			pos.to(value);
			return this;
		},
		$getZ: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_ZTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_ZTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_ZTween);
					}
				}
				var positionTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableXYZ);
				if (ss.isNullOrUndefined(positionTweenable)) {
					throw new ss.InvalidCastException("Could not tween z on ITweenable '" + this.$source + "', does not implement ITweenableXYZ");
				}
				var $t2 = new $Franca_Tweening_Tweenable_ZTween(positionTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_ZTween);
		},
		fromZ: function(value) {
			var pos = this.$getZ();
			pos.from(value);
			return this;
		},
		toZ: function(value) {
			var pos = this.$getZ();
			pos.to(value);
			return this;
		},
		setScale: function(value) {
			var pos = this.$getScale().from(value).to(value).duration$1(0);
			return this;
		},
		setScale$1: function(value) {
			var pos = this.$getScale3D().from(value).to(value).duration$1(0);
			return this;
		},
		setScale$2: function(x, y) {
			return this.setScale(new $Franca_Vector2.$ctor3(x, y));
		},
		setScale$3: function(x, y, z) {
			return this.setScale$1(new $Franca_Vector3.$ctor4(x, y, z));
		},
		setScaleX: function(scale) {
			var pos = this.$getScaleX().from(scale).to(scale).duration$1(0);
			return this;
		},
		setScaleY: function(scale) {
			var pos = this.$getScaleY().from(scale).to(scale).duration$1(0);
			return this;
		},
		setScaleZ: function(scale) {
			var pos = this.$getScaleZ().from(scale).to(scale).duration$1(0);
			return this;
		},
		$getScale: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_ScaleTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_ScaleTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_ScaleTween);
					}
				}
				var scaleTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableScale);
				if (ss.isNullOrUndefined(scaleTweenable)) {
					throw new ss.InvalidCastException("Could not tween 2D scale on ITweenable '" + this.$source + "', does not implement ITweenableScale");
				}
				var $t2 = new $Franca_Tweening_Tweenable_ScaleTween(scaleTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_ScaleTween);
		},
		$getScale3D: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_Scale3DTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_Scale3DTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_Scale3DTween);
					}
				}
				var scaleTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableScale3D);
				if (ss.isNullOrUndefined(scaleTweenable)) {
					throw new ss.InvalidCastException("Could not tween 3D scale on ITweenable '" + this.$source + "', does not implement ITweenableScale3D");
				}
				var $t2 = new $Franca_Tweening_Tweenable_Scale3DTween(scaleTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_Scale3DTween);
		},
		fromScale: function(value) {
			var scale = this.$getScale();
			scale.from(value);
			return this;
		},
		fromScale$1: function(value) {
			var scale = this.$getScale3D();
			scale.from(value);
			return this;
		},
		fromScale$2: function(xScale, yScale) {
			return this.fromScale(new $Franca_Vector2.$ctor3(xScale, yScale));
		},
		fromScale$3: function(xScale, yScale, zScale) {
			return this.fromScale$1(new $Franca_Vector3.$ctor4(xScale, yScale, zScale));
		},
		toScale: function(value) {
			var scale = this.$getScale();
			scale.to(value);
			return this;
		},
		toScale$1: function(value) {
			var scale = this.$getScale3D();
			scale.to(value);
			return this;
		},
		toScale$2: function(xScale, yScale) {
			return this.toScale(new $Franca_Vector2.$ctor3(xScale, yScale));
		},
		toScale$3: function(xScale, yScale, zScale) {
			return this.toScale$1(new $Franca_Vector3.$ctor4(xScale, yScale, zScale));
		},
		$getScaleX: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_ScaleXTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_ScaleXTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_ScaleXTween);
					}
				}
				var scaleTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableScaleXY);
				if (ss.isNullOrUndefined(scaleTweenable)) {
					throw new ss.InvalidCastException("Could not tween scale x on ITweenable '" + this.$source + "', does not implement ITweenableScaleXY");
				}
				var $t2 = new $Franca_Tweening_Tweenable_ScaleXTween(scaleTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_ScaleXTween);
		},
		fromScaleX: function(value) {
			var scale = this.$getScaleX();
			scale.from(value);
			return this;
		},
		toScaleX: function(value) {
			var scale = this.$getScaleX();
			scale.to(value);
			return this;
		},
		$getScaleY: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_ScaleYTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_ScaleYTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_ScaleYTween);
					}
				}
				var scaleTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableScaleXY);
				if (ss.isNullOrUndefined(scaleTweenable)) {
					throw new ss.InvalidCastException("Could not tween scale y on ITweenable '" + this.$source + "', does not implement ITweenableScaleXY");
				}
				var $t2 = new $Franca_Tweening_Tweenable_ScaleYTween(scaleTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_ScaleYTween);
		},
		fromScaleY: function(value) {
			var scale = this.$getScaleY();
			scale.from(value);
			return this;
		},
		toScaleY: function(value) {
			var scale = this.$getScaleY();
			scale.to(value);
			return this;
		},
		$getScaleZ: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_ScaleZTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_ScaleZTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_ScaleZTween);
					}
				}
				var scaleTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableScaleXYZ);
				if (ss.isNullOrUndefined(scaleTweenable)) {
					throw new ss.InvalidCastException("Could not tween scale z on ITweenable '" + this.$source + "', does not implement ITweenableScaleXYZ");
				}
				var $t2 = new $Franca_Tweening_Tweenable_ScaleZTween(scaleTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_ScaleZTween);
		},
		fromScaleZ: function(value) {
			var scale = this.$getScaleZ();
			scale.from(value);
			return this;
		},
		toScaleZ: function(value) {
			var scale = this.$getScaleZ();
			scale.to(value);
			return this;
		},
		setSize: function(value) {
			var pos = this.$getSize().from(value).to(value).duration$1(0);
			return this;
		},
		setSize$2: function(width, height) {
			return this.setSize(new $Franca_SizeF.$ctor2(width, height));
		},
		setSize$1: function(size) {
			return this.setSize(new $Franca_SizeF.$ctor2(size, size));
		},
		setWidth: function(size) {
			var pos = this.$getSizeX().from(size).to(size).duration$1(0);
			return this;
		},
		setHeight: function(size) {
			var pos = this.$getSizeY().from(size).to(size).duration$1(0);
			return this;
		},
		$getSize: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_SizeTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_SizeTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_SizeTween);
					}
				}
				var sizeTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableSize);
				if (ss.isNullOrUndefined(sizeTweenable)) {
					throw new ss.InvalidCastException("Could not tween size on ITweenable '" + this.$source + "', does not implement ITweenableSize");
				}
				var $t2 = new $Franca_Tweening_Tweenable_SizeTween(sizeTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_SizeTween);
		},
		fromSize: function(value) {
			var size = this.$getSize();
			size.from(value);
			return this;
		},
		fromSize$2: function(width, height) {
			return this.fromSize(new $Franca_SizeF.$ctor2(width, height));
		},
		fromSize$1: function(size) {
			return this.fromSize(new $Franca_SizeF.$ctor2(size, size));
		},
		toSize: function(value) {
			var size = this.$getSize();
			size.to(value);
			return this;
		},
		toSize$2: function(width, height) {
			return this.toSize(new $Franca_SizeF.$ctor2(width, height));
		},
		toSize$1: function(size) {
			return this.toSize(new $Franca_SizeF.$ctor2(size, size));
		},
		$getSizeX: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_WidthTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_WidthTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_WidthTween);
					}
				}
				var sizeTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableSize);
				if (ss.isNullOrUndefined(sizeTweenable)) {
					throw new ss.InvalidCastException("Could not tween size x on ITweenable '" + this.$source + "', does not implement ITweenableSize");
				}
				var $t2 = new $Franca_Tweening_Tweenable_WidthTween(sizeTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_WidthTween);
		},
		fromWidth: function(value) {
			var size = this.$getSizeX();
			size.from(value);
			return this;
		},
		toWidth: function(value) {
			var size = this.$getSizeX();
			size.to(value);
			return this;
		},
		$getSizeY: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_HeightTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_HeightTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_HeightTween);
					}
				}
				var sizeTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableSize);
				if (ss.isNullOrUndefined(sizeTweenable)) {
					throw new ss.InvalidCastException("Could not tween size y on ITweenable '" + this.$source + "', does not implement ITweenableSize");
				}
				var $t2 = new $Franca_Tweening_Tweenable_HeightTween(sizeTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_HeightTween);
		},
		fromHeight: function(value) {
			var size = this.$getSizeY();
			size.from(value);
			return this;
		},
		toHeight: function(value) {
			var size = this.$getSizeY();
			size.to(value);
			return this;
		},
		setRot: function(value) {
			var pos = this.$getRotation().from(value).to(value).duration$1(0);
			return this;
		},
		$getRotation: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_RotationTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_RotationTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_RotationTween);
					}
				}
				var rotationTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableRotation);
				if (ss.isNullOrUndefined(rotationTweenable)) {
					throw new ss.InvalidCastException("Could not tween rotation on ITweenable '" + this.$source + "', does not implement ITweenableRotation");
				}
				var $t2 = new $Franca_Tweening_Tweenable_RotationTween(rotationTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_RotationTween);
		},
		fromRot: function(value) {
			var rot = this.$getRotation();
			rot.from(value);
			return this;
		},
		toRot: function(value) {
			var rot = this.$getRotation();
			rot.to(value);
			return this;
		},
		setColor: function(value) {
			var pos = this.$getColor().from(value).to(value).duration$1(0);
			return this;
		},
		$getColor: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_ColorTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_ColorTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_ColorTween);
					}
				}
				var colorTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableColor);
				if (ss.isNullOrUndefined(colorTweenable)) {
					throw new ss.InvalidCastException("Could not tween color on ITweenable '" + this.$source + "', does not implement ITweenableColor");
				}
				var $t2 = new $Franca_Tweening_Tweenable_ColorTween(colorTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_ColorTween);
		},
		fromColor: function(value) {
			var col = this.$getColor();
			col.from(value);
			return this;
		},
		toColor: function(value) {
			var col = this.$getColor();
			col.to(value);
			return this;
		},
		fromColor$1: function(value, mode) {
			var col = this.$getColor();
			col.set_mode(mode);
			col.from(value);
			return this;
		},
		fromColor$2: function(value, mode, premultiplied) {
			var col = this.$getColor();
			col.set_mode(mode);
			col.set_premultiplied(premultiplied);
			col.from(value);
			return this;
		},
		toColor$1: function(value, mode, premultiplied) {
			var col = this.$getColor();
			col.set_mode(mode);
			col.set_premultiplied(premultiplied);
			col.to(value);
			return this;
		},
		setOpacity: function(value) {
			var alpha = this.$getOpacity().from(value).to(value).duration$1(0);
			return this;
		},
		$getOpacity: function() {
			if (!ss.isInstanceOfType(this.$current, $Franca_Tweening_Tweenable_OpacityTween)) {
				for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
					var tween = this.$tweens[$t1];
					if (ss.isInstanceOfType(tween, $Franca_Tweening_Tweenable_OpacityTween)) {
						return ss.cast(tween, $Franca_Tweening_Tweenable_OpacityTween);
					}
				}
				var opacityTweenable = ss.safeCast(this.$source, $Franca_Tweening_ITweenableOpacity);
				if (ss.isNullOrUndefined(opacityTweenable)) {
					throw new ss.InvalidCastException("Could not tween opacity on ITweenable '" + this.$source + "', does not implement ITweenableOpacity");
				}
				var $t2 = new $Franca_Tweening_Tweenable_OpacityTween(opacityTweenable, this.$thisManager);
				$t2.set_fixedManager(true);
				this.$current = $t2;
				this.$setDefaults(this.$current);
				this.$tweens.push(this.$current);
			}
			return ss.cast(this.$current, $Franca_Tweening_Tweenable_OpacityTween);
		},
		fromOpacity: function(value) {
			var alpha = this.$getOpacity();
			alpha.from(value);
			return this;
		},
		toOpacity: function(value) {
			var alpha = this.$getOpacity();
			alpha.to(value);
			return this;
		},
		duration$1: function(val) {
			return this.duration(val.ticks / 10000000);
		},
		duration: function(seconds) {
			this.$defaultDuration = seconds;
			for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
				var tween = this.$tweens[$t1];
				ss.cast(tween, $Franca_Tweening_ITween).duration(this.$defaultDuration);
			}
			return this;
		},
		durationCurrent$1: function(val) {
			this.$current.duration(val.ticks / 10000000);
			return this;
		},
		durationCurrent: function(seconds) {
			this.$current.duration(seconds);
			return this;
		},
		ease: function(formula) {
			this.$defaultEase = formula;
			for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
				var tween = this.$tweens[$t1];
				ss.cast(tween, $Franca_Tweening_ITween).ease(this.$defaultEase);
			}
			return this;
		},
		easeCurrent: function(formula) {
			this.$current.ease(formula);
			return this;
		},
		onFinishCurrent: function(callback) {
			this.$current.onFinish(callback);
			return this;
		},
		onFinish$1: function(callback) {
			this.add_$finish(callback);
			return this;
		},
		onStartCurrent: function(callback) {
			this.$current.onStart(callback);
			return this;
		},
		onStart$1: function(callback) {
			this.add_$start(callback);
			return this;
		},
		onTick: function(callback) {
			this.add_$tick(callback);
			return this;
		},
		delayCurrent$1: function(duration) {
			this.$current.delay(duration.ticks / 10000000);
			return this;
		},
		delayCurrent: function(seconds) {
			this.$current.delay(seconds);
			return this;
		},
		delay$1: function(duration) {
			this.$delay = duration.ticks / 10000000;
			return this;
		},
		delay: function(seconds) {
			this.$delay = seconds;
			return this;
		},
		start$1: function() {
			this.started = false;
			this.$lastTime = 0;
			this.$thisManager.update(0);
			// sets last time to 0
			for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
				var tween = this.$tweens[$t1];
				tween.start();
			}
			(this.$manager || $Franca_Tweening_Tween.realTime).add(this);
			this.$state = 1;
			return this;
		},
		cancel: function() {
			for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
				var tween = this.$tweens[$t1];
				tween.cancel();
			}
			(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
			this.$state = 0;
		},
		pause: function() {
			for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
				var tween = this.$tweens[$t1];
				tween.pause();
			}
			(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
			this.$state = 2;
		},
		resume: function() {
			for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
				var tween = this.$tweens[$t1];
				tween.resume();
			}
			(this.$manager || $Franca_Tweening_Tween.realTime).resume(this, this.$lastTime);
			this.$state = 1;
		},
		finish: function() {
			if (this.$state === 0) {
				this.start$1();
			}
			for (var $t1 = 0; $t1 < this.$tweens.length; $t1++) {
				var tween = this.$tweens[$t1];
				tween.finish();
			}
			this.$state = 0;
			if (!ss.staticEquals(this.$1$finishField, null)) {
				this.$1$finishField(this);
			}
			(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
		},
		managedBy$1: function(manager) {
			this.$manager = manager;
			return this;
		},
		get_startTime: function() {
			return this.$1$StartTimeField;
		},
		set_startTime: function(value) {
			this.$1$StartTimeField = value;
		},
		get_manager: function() {
			return this.$manager;
		},
		get_state: function() {
			return this.$state;
		},
		onFinish: function(callback) {
			return this.onFinish$1(function(t) {
				callback();
			});
		},
		onStart: function(callback) {
			return this.onStart$1(function(t) {
				callback();
			});
		},
		start: function() {
			return this.start$1();
		},
		managedBy: function(manager) {
			return this.managedBy$1(manager);
		},
		get_progress: function() {
			if (this.$tweens.length === 0) {
				return 0;
			}
			var progress = 2147483647;
			for (var i = 0; i < this.$tweens.length; i++) {
				progress = Math.min(this.$tweens[i].get_progress(), progress);
			}
			return progress;
		}
	}, null, [$Franca_Tweening_IBaseTween]);
	ss.initClass($Franca_Tweening_TweenDouble, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Calc.lerp$2(from, to, alpha);
		},
		get_value: function() {
			return this.$value;
		},
		set_value: function(value) {
			this.$value = value;
		},
		get_currentValue: function() {
			return this.$value;
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_TweenExtensions, $asm, {});
	ss.initClass($Franca_Tweening_TweenManager, $asm, {
		clear: function() {
			this.tweens.clear();
		},
		update$1: function(time) {
			this.update(time.ticks / 10000000);
		},
		update: function(time) {
			var remaining = time - this.$lastTime;
			var curTime = this.$lastTime;
			// we need this because if time == lastTime then tick will not be called on tweens
			var runOnce = true;
			while (runOnce || remaining > 0) {
				runOnce = false;
				curTime += Math.min(remaining, $Franca_Tweening_TweenManager.$maxTime);
				this.$lastTime = curTime;
				var node = this.tweens.get_first();
				while (ss.isValue(node)) {
					var next = node.get_next();
					var tween = node.get_value();
					if (tween.tick(curTime - tween.get_startTime())) {
						this.tweens.remove$1(node);
					}
					node = next;
				}
				remaining -= $Franca_Tweening_TweenManager.$maxTime;
			}
			this.$lastTime = time;
		},
		add: function(tween) {
			this.tweens.addFirst$1(tween);
			tween.set_startTime(this.$lastTime);
		},
		remove: function(tween) {
			this.tweens.remove(tween);
		},
		resume: function(tween, elapsed) {
			this.tweens.addFirst$1(tween);
			tween.set_startTime(this.$lastTime - elapsed);
		}
	}, null, [$Franca_Tweening_ITweenManager]);
	ss.initClass($Franca_Tweening_TweenSequence, $asm, {
		add_finish: function(value) {
			this.$1$finishField = ss.delegateCombine(this.$1$finishField, value);
		},
		remove_finish: function(value) {
			this.$1$finishField = ss.delegateRemove(this.$1$finishField, value);
		},
		add_start: function(value) {
			this.$1$startField = ss.delegateCombine(this.$1$startField, value);
		},
		remove_start: function(value) {
			this.$1$startField = ss.delegateRemove(this.$1$startField, value);
		},
		tick: function(elapsedSeconds) {
			this.lastTime = elapsedSeconds;
			if (!this.started) {
				this.started = true;
				this.invokeStart();
			}
			var finishedRepeat = this.$sequenceIndex >= this.tweens.length;
			var finished = finishedRepeat && this.repeats >= this.repeatCount && !this.$loops;
			if (finishedRepeat && !finished) {
				var reps = (this.$loops ? 0 : (this.repeats + 1));
				this.start$1();
				// sets repeats to 0
				this.repeats = reps;
				return true;
			}
			if (finished) {
				this.state = 0;
				this.invokeFinish();
			}
			return finished;
		},
		add: function(tween) {
			this.tweens.push(tween);
			tween.onFinish(ss.mkdel(this, this.$nextTween));
			return this;
		},
		invokeStart: function() {
			if (!ss.staticEquals(this.$1$startField, null)) {
				this.$1$startField(this);
			}
		},
		invokeFinish: function() {
			if (!ss.staticEquals(this.$1$finishField, null)) {
				this.$1$finishField(this);
			}
		},
		pause$2: function(time) {
			return this.pause$1(time.ticks / 10000000);
		},
		pause$1: function(seconds) {
			this.add(new $Franca_Tweening_TweenPause(seconds, null));
			return this;
		},
		parallel: function(tweens) {
			var par = new $Franca_Tweening_TweenParallel(null);
			for (var $t1 = 0; $t1 < tweens.length; $t1++) {
				var tween = tweens[$t1];
				par.add(tween);
			}
			this.add(par);
			return this;
		},
		onFinish$1: function(callback) {
			this.add_finish(callback);
			return this;
		},
		onStart$1: function(callback) {
			this.add_start(callback);
			return this;
		},
		$nextTween: function() {
			this.$sequenceIndex++;
			if (this.$sequenceIndex < this.tweens.length) {
				var tween = this.tweens[this.$sequenceIndex];
				if (ss.isNullOrUndefined(tween.get_manager()) && ss.isValue(this.$manager)) {
					tween.managedBy(this.$manager);
				}
				tween.start();
			}
		},
		start$1: function() {
			this.started = false;
			this.validateSequence();
			this.lastTime = 0;
			this.repeats = 0;
			this.$sequenceIndex = -1;
			this.$nextTween();
			(this.$manager || $Franca_Tweening_Tween.realTime).add(this);
			this.state = 1;
			this.tick(0);
			return this;
		},
		cancel: function() {
			if (this.$sequenceIndex >= 0 && this.$sequenceIndex < this.tweens.length) {
				this.tweens[this.$sequenceIndex].cancel();
			}
			(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
			this.state = 0;
		},
		pause: function() {
			if (this.$sequenceIndex >= 0 && this.$sequenceIndex < this.tweens.length) {
				this.tweens[this.$sequenceIndex].pause();
			}
			(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
			this.state = 2;
		},
		resume: function() {
			if (this.$sequenceIndex >= 0 && this.$sequenceIndex < this.tweens.length) {
				this.tweens[this.$sequenceIndex].resume();
			}
			(this.$manager || $Franca_Tweening_Tween.realTime).resume(this, this.lastTime);
			this.state = 1;
		},
		finish: function() {
			if (this.get_loops()) {
				throw new ss.InvalidOperationException('Cannot finish a looping tween');
			}
			if (this.state === 0) {
				this.start$1();
			}
			for (var $t1 = 0; $t1 < this.tweens.length; $t1++) {
				var tween = this.tweens[$t1];
				tween.finish();
			}
			this.state = 0;
			this.invokeFinish();
			(this.get_manager() || $Franca_Tweening_Tween.realTime).remove(this);
		},
		validateSequence: function() {
			for (var i = 0; i < this.tweens.length; i++) {
				var tween = this.tweens[i];
				var seq = ss.safeCast(tween, $Franca_Tweening_TweenSequence);
				if (ss.isValue(seq)) {
					if (seq.get_loops()) {
						if (i < this.tweens.length - 1) {
							throw new $Franca_Tweening_InvalidTweenSequenceException.$ctor1('Unreachable item(s) in TweenSequence detected: item with index ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, i) + ' is a looping sequence, but not the last item in the sequence.');
						}
						else if (!ss.staticEquals(this.$1$finishField, null)) {
							throw new $Franca_Tweening_InvalidTweenSequenceException.$ctor1('Unintended nested looping sequence in TweenSequence detected: item with index ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, i) + ' is a looping sequence, but the parent sequence has an OnFinish callback.');
						}
						else if (this.repeatCount > 0 || this.$loops) {
							throw new $Franca_Tweening_InvalidTweenSequenceException.$ctor1('Unintended nested looping sequence in TweenSequence detected: item with index ' + $System_ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, i) + ' is a looping sequence, but not the parent sequence is set to repeat.');
						}
						else {
							console.log('Possibly unintended looping sequence detected');
						}
					}
					seq.validateSequence();
				}
				var b = ss.safeCast(tween, $Franca_Tweening_BaseTween);
				if (ss.isValue(b)) {
					b.validate();
				}
			}
		},
		managedBy$1: function(manager) {
			this.$manager = manager;
			return this;
		},
		repeat: function(count) {
			if (count < 0) {
				throw new ss.ArgumentOutOfRangeException('count', 'Repeat count must be 0 or more. For infinite repeats use Loop.', null, count);
			}
			this.repeatCount = count;
			return this;
		},
		loop: function(value) {
			this.$loops = value;
			return this;
		},
		get_startTime: function() {
			return this.$1$StartTimeField;
		},
		set_startTime: function(value) {
			this.$1$StartTimeField = value;
		},
		get_manager: function() {
			return this.$manager;
		},
		get_loops: function() {
			return this.$loops;
		},
		get_state: function() {
			return this.state;
		},
		onFinish: function(callback) {
			return this.onFinish$1(function(t) {
				callback();
			});
		},
		onStart: function(callback) {
			return this.onStart$1(function(t) {
				callback();
			});
		},
		start: function() {
			return this.start$1();
		},
		managedBy: function(manager) {
			return this.managedBy$1(manager);
		},
		get_progress: function() {
			return 0;
		}
	}, null, [$Franca_Tweening_IBaseTween]);
	ss.initClass($Franca_Tweening_TweenParallel, $asm, {
		tick: function(elapsedSeconds) {
			if (!this.started) {
				this.started = true;
				this.invokeStart();
			}
			var finishedRepeat = this.$finishedCount >= this.tweens.length;
			var finished = finishedRepeat && this.repeats >= this.repeatCount && !this.get_loops();
			if (finishedRepeat && !finished) {
				var reps = (this.get_loops() ? 0 : (this.repeats + 1));
				this.start$1();
				// sets repeats to 0
				this.repeats = reps;
				return true;
			}
			if (finished) {
				this.state = 0;
				this.invokeFinish();
			}
			return finished;
		},
		add: function(tween) {
			this.tweens.push(tween);
			tween.onFinish(ss.mkdel(this, this.$finished));
			return this;
		},
		$finished: function() {
			this.$finishedCount++;
		},
		start$1: function() {
			this.started = false;
			this.validateSequence();
			this.lastTime = 0;
			this.repeats = 0;
			for (var $t1 = 0; $t1 < this.tweens.length; $t1++) {
				var tween = this.tweens[$t1];
				if (ss.isNullOrUndefined(tween.get_manager()) && ss.isValue(this.get_manager())) {
					tween.managedBy(this.get_manager());
				}
				tween.start();
			}
			this.$finishedCount = 0;
			(this.get_manager() || $Franca_Tweening_Tween.realTime).add(this);
			this.state = 1;
			this.tick(0);
			return this;
		},
		start: function() {
			return this.start$1();
		},
		cancel: function() {
			for (var $t1 = 0; $t1 < this.tweens.length; $t1++) {
				var tween = this.tweens[$t1];
				tween.cancel();
			}
			(this.get_manager() || $Franca_Tweening_Tween.realTime).remove(this);
			this.state = 0;
		},
		pause: function() {
			for (var $t1 = 0; $t1 < this.tweens.length; $t1++) {
				var tween = this.tweens[$t1];
				tween.pause();
			}
			(this.get_manager() || $Franca_Tweening_Tween.realTime).remove(this);
			this.state = 2;
		},
		resume: function() {
			for (var $t1 = 0; $t1 < this.tweens.length; $t1++) {
				var tween = this.tweens[$t1];
				tween.resume();
			}
			(this.get_manager() || $Franca_Tweening_Tween.realTime).resume(this, this.lastTime);
			this.state = 1;
		}
	}, $Franca_Tweening_TweenSequence, [$Franca_Tweening_IBaseTween]);
	ss.initClass($Franca_Tweening_TweenPause, $asm, {
		add_$finish: function(value) {
			this.$1$finishField = ss.delegateCombine(this.$1$finishField, value);
		},
		remove_$finish: function(value) {
			this.$1$finishField = ss.delegateRemove(this.$1$finishField, value);
		},
		add_$start: function(value) {
			this.$1$startField = ss.delegateCombine(this.$1$startField, value);
		},
		remove_$start: function(value) {
			this.$1$startField = ss.delegateRemove(this.$1$startField, value);
		},
		duration$1: function(seconds) {
			this.$duration = seconds;
			return this;
		},
		tick: function(elapsedSeconds) {
			this.$lastTime = elapsedSeconds;
			if (!this.started) {
				this.started = true;
				if (!ss.staticEquals(this.$1$startField, null)) {
					this.$1$startField();
				}
			}
			this.$progress = this.$duration / (elapsedSeconds - this.$delay);
			var finished = elapsedSeconds >= this.$duration + this.$delay;
			if (finished) {
				this.$state = 0;
			}
			if (finished && !ss.staticEquals(this.$1$finishField, null)) {
				this.$1$finishField();
			}
			return finished;
		},
		onFinish$1: function(callback) {
			this.add_$finish(callback);
			return this;
		},
		onStart$1: function(callback) {
			this.add_$start(callback);
			return this;
		},
		managedBy$1: function(manager) {
			this.$manager = manager;
			return this;
		},
		start$1: function() {
			this.started = false;
			this.$lastTime = 0;
			(this.$manager || $Franca_Tweening_Tween.realTime).add(this);
			this.$state = 1;
			return this;
		},
		cancel: function() {
			(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
			this.$state = 0;
		},
		pause: function() {
			(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
			this.$state = 2;
		},
		resume: function() {
			(this.$manager || $Franca_Tweening_Tween.realTime).resume(this, this.$lastTime);
			this.$state = 1;
		},
		finish: function() {
			this.tick(this.$duration + this.$delay);
			(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
			this.$state = 0;
		},
		get_startTime: function() {
			return this.$1$StartTimeField;
		},
		set_startTime: function(value) {
			this.$1$StartTimeField = value;
		},
		get_manager: function() {
			return this.$manager;
		},
		duration: function(seconds) {
			return this.duration$1(seconds);
		},
		ease: function(formula) {
			return this;
		},
		delay: function(seconds) {
			this.$delay = seconds;
			return this;
		},
		onFinish: function(callback) {
			return this.onFinish$1(callback);
		},
		onStart: function(callback) {
			return this.onStart$1(callback);
		},
		managedBy: function(manager) {
			return this.managedBy$1(manager);
		},
		start: function() {
			this.tick(0);
			return this.start$1();
		},
		get_state: function() {
			return this.$state;
		},
		get_progress: function() {
			return this.$progress;
		}
	}, null, [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	$Franca_Tweening_TweenPause.$ctor1.prototype = $Franca_Tweening_TweenPause.prototype;
	ss.initEnum($Franca_Tweening_TweenState, $asm, { stopped: 0, playing: 1, paused: 2 });
	ss.initClass($Franca_Tweening_TweenWaitUntil, $asm, {
		add_$finish: function(value) {
			this.$1$finishField = ss.delegateCombine(this.$1$finishField, value);
		},
		remove_$finish: function(value) {
			this.$1$finishField = ss.delegateRemove(this.$1$finishField, value);
		},
		add_$start: function(value) {
			this.$1$startField = ss.delegateCombine(this.$1$startField, value);
		},
		remove_$start: function(value) {
			this.$1$startField = ss.delegateRemove(this.$1$startField, value);
		},
		duration: function(seconds) {
			return this;
		},
		ease: function(formula) {
			return this;
		},
		delay: function(seconds) {
			this.$delay = seconds;
			return this;
		},
		tick: function(elapsedSeconds) {
			this.$lastTime = elapsedSeconds;
			if (!this.started) {
				this.started = true;
				if (!ss.staticEquals(this.$1$startField, null)) {
					this.$1$startField();
				}
			}
			if (elapsedSeconds < this.$delay) {
				return false;
			}
			var finished = this.$callback(this);
			if (finished) {
				this.$state = 0;
			}
			if (finished && !ss.staticEquals(this.$1$finishField, null)) {
				this.$1$finishField();
			}
			return finished;
		},
		get_startTime: function() {
			return this.$1$StartTimeField;
		},
		set_startTime: function(value) {
			this.$1$StartTimeField = value;
		},
		onFinish: function(callback) {
			this.add_$finish(callback);
			return this;
		},
		onStart: function(callback) {
			this.add_$start(callback);
			return this;
		},
		managedBy: function(manager) {
			this.$manager = manager;
			return this;
		},
		start: function() {
			this.started = false;
			this.$lastTime = 0;
			(this.$manager || $Franca_Tweening_Tween.realTime).add(this);
			this.$state = 1;
			return this;
		},
		cancel: function() {
			(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
			this.$state = 0;
		},
		pause: function() {
			(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
			this.$state = 2;
		},
		resume: function() {
			(this.$manager || $Franca_Tweening_Tween.realTime).resume(this, this.$lastTime);
			this.$state = 1;
		},
		finish: function() {
			if (!ss.staticEquals(this.$1$finishField, null)) {
				this.$1$finishField();
			}
			(this.$manager || $Franca_Tweening_Tween.realTime).remove(this);
			this.$state = 0;
		},
		get_manager: function() {
			return this.$manager;
		},
		get_state: function() {
			return this.$state;
		},
		get_callback: function() {
			return this.$callback;
		},
		get_progress: function() {
			return 0;
		}
	}, null, [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_ColorTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_HdrColor.lerp$1(from, to, alpha, this.$mode, this.$premultiplied);
		},
		get_value: function() {
			return this.$source.get_color();
		},
		set_value: function(value) {
			this.$source.set_color(value);
		},
		managedBy$1: function(manager) {
			return ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_HdrColor]).prototype.managedBy$1.call(this, manager);
		},
		managedBy: function(manager) {
			return this.managedBy$1(manager);
		},
		get_mode: function() {
			return this.$mode;
		},
		set_mode: function(value) {
			this.$mode = value;
		},
		get_premultiplied: function() {
			return this.$premultiplied;
		},
		set_premultiplied: function(value) {
			this.$premultiplied = value;
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_HdrColor]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_HeightTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Calc.lerp$2(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_size().height;
		},
		set_value: function(value) {
			this.$source.set_size(new $Franca_SizeF.$ctor2(this.$source.get_size().width, value));
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_OpacityTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Calc.lerp$2(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_opacity();
		},
		set_value: function(value) {
			this.$source.set_opacity(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_Position3DTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Vector3.lerp(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_position();
		},
		set_value: function(value) {
			this.$source.set_position(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_Vector3]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_PositionTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Vector2.lerp(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_position();
		},
		set_value: function(value) {
			this.$source.set_position(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_Vector2]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_RotationTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Calc.lerp$2(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_rotation();
		},
		set_value: function(value) {
			this.$source.set_rotation(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_Scale3DTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Vector3.lerp(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_scale();
		},
		set_value: function(value) {
			this.$source.set_scale(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_Vector3]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_ScaleTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Vector2.lerp(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_scale();
		},
		set_value: function(value) {
			this.$source.set_scale(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_Vector2]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_ScaleXTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Calc.lerp$2(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_scaleX();
		},
		set_value: function(value) {
			this.$source.set_scaleX(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_ScaleYTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Calc.lerp$2(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_scaleY();
		},
		set_value: function(value) {
			this.$source.set_scaleY(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_ScaleZTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Calc.lerp$2(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_scaleZ();
		},
		set_value: function(value) {
			this.$source.set_scaleZ(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_SizeTween, $asm, {
		lerp: function(from, to, alpha) {
			return new $Franca_SizeF.$ctor2($Franca_Calc.lerp$2(from.width, to.width, alpha), $Franca_Calc.lerp$2(from.height, to.height, alpha));
		},
		get_value: function() {
			return this.$source.get_size();
		},
		set_value: function(value) {
			this.$source.set_size(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [$Franca_SizeF]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_WidthTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Calc.lerp$2(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_size().width;
		},
		set_value: function(value) {
			this.$source.set_size(new $Franca_SizeF.$ctor2(value, this.$source.get_size().height));
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_XTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Calc.lerp$2(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_x();
		},
		set_value: function(value) {
			this.$source.set_x(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_YTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Calc.lerp$2(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_y();
		},
		set_value: function(value) {
			this.$source.set_y(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($Franca_Tweening_Tweenable_ZTween, $asm, {
		lerp: function(from, to, alpha) {
			return $Franca_Calc.lerp$2(from, to, alpha);
		},
		get_value: function() {
			return this.$source.get_z();
		},
		set_value: function(value) {
			this.$source.set_z(value);
		}
	}, ss.makeGenericType($Franca_Tweening_BaseTween$1, [Number]), [$Franca_Tweening_IBaseTween, $Franca_Tweening_ITween]);
	ss.initClass($System_SystemException, $asm, {
		get_hResult: function() {
			return this.$2$HResultField;
		},
		set_hResult: function(value) {
			this.$2$HResultField = value;
		}
	}, ss.Exception);
	$System_SystemException.$ctor1.prototype = $System_SystemException.$ctor2.prototype = $System_SystemException.prototype;
	ss.initClass($System_ArithmeticException, $asm, {}, $System_SystemException);
	$System_ArithmeticException.$ctor1.prototype = $System_ArithmeticException.$ctor2.prototype = $System_ArithmeticException.prototype;
	ss.initClass($System_Buffer, $asm, {});
	ss.initClass($System_CharExtensions, $asm, {});
	ss.initClass($System_EnumExtensions, $asm, {});
	ss.initClass($System_GC, $asm, {});
	ss.initClass($System_IEnumerableExtensions, $asm, {});
	ss.initClass($System_IndexOutOfRangeException, $asm, {}, ss.Exception);
	$System_IndexOutOfRangeException.$ctor1.prototype = $System_IndexOutOfRangeException.$ctor2.prototype = $System_IndexOutOfRangeException.prototype;
	ss.initClass($System_JsIntegerExtensions, $asm, {});
	ss.initClass($System_NewlineInfo, $asm, {
		getHashCode: function() {
			var h = this.startIndex;
			h = h * 397 ^ this.length;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $System_NewlineInfo)) {
				return false;
			}
			return this.startIndex === o.startIndex && this.length === o.length;
		}
	});
	$System_NewlineInfo.$ctor1.prototype = $System_NewlineInfo.prototype;
	$System_NewlineInfo.__class = false;
	ss.initClass($System_ObjectDisposedException, $asm, {
		get_message: function() {
			return this.$msg;
		},
		get_objectName: function() {
			return this.$obj_name;
		}
	}, ss.InvalidOperationException);
	$System_ObjectDisposedException.$ctor2.prototype = $System_ObjectDisposedException.$ctor1.prototype = $System_ObjectDisposedException.prototype;
	ss.initClass($System_ObjectExtensions, $asm, {});
	ss.initClass($System_OverflowException, $asm, {}, $System_ArithmeticException);
	$System_OverflowException.$ctor1.prototype = $System_OverflowException.$ctor2.prototype = $System_OverflowException.prototype;
	ss.initClass($System_STAThreadAttribute, $asm, {});
	ss.initClass($System_StringBuilderFixes, $asm, {});
	ss.initEnum($System_StringEscapeStyle, $asm, { dotNet: 0, javascript: 1, json: 2, escapeSingleQuote: 128, escapeQuestionMark: 256, escapeForwardSlash: 512 });
	ss.initClass($System_StringExtensions, $asm, {});
	ss.initClass($System_ThreadStaticAttribute, $asm, {});
	ss.initClass($System_TimeSpanExtensions, $asm, {});
	ss.initClass($System_TypeExtensions, $asm, {});
	ss.initClass($System_UnauthorizedAccessException, $asm, {}, $System_SystemException);
	$System_UnauthorizedAccessException.$ctor1.prototype = $System_UnauthorizedAccessException.$ctor2.prototype = $System_UnauthorizedAccessException.prototype;
	ss.initEnum($System_UniqueStringHash, $asm, { v0: 0, latest: 0, dontCare: 0 });
	ss.initClass($System_IO_$NullStream, $asm, {
		get_canRead: function() {
			return true;
		},
		get_canSeek: function() {
			return true;
		},
		get_canWrite: function() {
			return true;
		},
		get_length: function() {
			return 0;
		},
		get_position: function() {
			return 0;
		},
		set_position: function(value) {
		},
		flush: function() {
		},
		read: function(buffer, offset, count) {
			return 0;
		},
		$_Read: function(buffer, offset, count) {
			return 0;
		},
		readByte: function() {
			return -1;
		},
		seek: function(offset, origin) {
			return 0;
		},
		setLength: function(value) {
		},
		write: function(buffer, offset, count) {
		},
		$_Write: function(data, offset, count) {
		},
		writeByte: function(value) {
		}
	}, $System_IO_Stream, [ss.IDisposable, $Franca_JS_IBaseStream]);
	ss.initClass($System_IO_BinaryReader, $asm, {
		get_baseStream: function() {
			return this.$stream;
		},
		close: function() {
			this.dispose$1(true);
			this.$disposed = true;
		},
		dispose$1: function(disposing) {
			if (disposing && ss.isValue(this.$stream)) {
				this.$stream.close();
			}
			this.$disposed = true;
			this.$buffer = null;
			//m_encoding = null;
			this.$stream = null;
			//charBuffer = null;
		},
		dispose: function() {
			this.dispose$1(true);
		},
		fillBuffer: function(numBytes) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryReader', 'Cannot read from a closed BinaryReader.');
			}
			if (ss.isNullOrUndefined(this.$stream)) {
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			this.$checkBuffer(numBytes);
			// Cope with partial reads
			var pos = 0;
			while (pos < numBytes) {
				var n = this.$stream.$_Read(this.$buffer, pos, numBytes - pos);
				if (n === 0) {
					throw new $System_IO_EndOfStreamException();
				}
				pos += n;
			}
		},
		peekChar: function() {
			throw new ss.NotImplementedException();
			//if (stream == null) {
			//
			//if (disposed)
			//throw new ObjectDisposedException("BinaryReader", "Cannot read from a closed BinaryReader.");
			//
			//throw new IOException("Stream is invalid");
			//}
			//
			//if (!stream.CanSeek) {
			//return -1;
			//}
			//
			//char[] result = new char[1];
			//int bcount;
			//
			//int ccount = ReadCharBytes(result, 0, 1, out bcount);
			//
			//// Reposition the stream
			//stream.Position -= bcount;
			//
			//// If we read 0 characters then return -1
			//if (ccount == 0) {
			//return -1;
			//}
			//
			//// Return the single character we read
			//return result[0];
		},
		read: function() {
			throw new ss.NotImplementedException();
			//if (charBuffer == null)
			//charBuffer = new char[MaxBufferSize];
			//
			//int count = Read(charBuffer, 0, 1);
			//if (count == 0) {
			//// No chars available
			//return -1;
			//}
			//
			//return charBuffer[0];
		},
		read$1: function(buffer, index, count) {
			if (ss.isNullOrUndefined(this.$stream)) {
				if (this.$disposed) {
					throw new $System_ObjectDisposedException.$ctor2('BinaryReader', 'Cannot read from a closed BinaryReader.');
				}
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			if (ss.isNullOrUndefined(buffer)) {
				throw new ss.ArgumentNullException('buffer is null');
			}
			if (index < 0) {
				throw new ss.ArgumentOutOfRangeException('index is less than 0');
			}
			if (count < 0) {
				throw new ss.ArgumentOutOfRangeException('count is less than 0');
			}
			if (buffer.length - index < count) {
				throw new ss.ArgumentException('buffer is too small');
			}
			var bytes_read = this.$stream.read(buffer, index, count);
			return bytes_read;
		},
		read$2: function(buffer, index, count) {
			throw new ss.NotImplementedException();
			//if (m_stream == null) {
			//
			//if (m_disposed)
			//throw new ObjectDisposedException("BinaryReader", "Cannot read from a closed BinaryReader.");
			//
			//throw new IOException("Stream is invalid");
			//}
			//
			//if (buffer == null) {
			//throw new ArgumentNullException("buffer is null");
			//}
			//if (index < 0) {
			//throw new ArgumentOutOfRangeException("index is less than 0");
			//}
			//if (count < 0) {
			//throw new ArgumentOutOfRangeException("count is less than 0");
			//}
			//if (buffer.Length - index < count) {
			//throw new ArgumentException("buffer is too small");
			//}
			//
			//int bytes_read;
			//return ReadCharBytes(buffer, index, count, out bytes_read);
		},
		$readCharBytes: function(buffer, index, count, bytes_read) {
			bytes_read.$ = 0;
			return 0;
			//int chars_read = 0;
			//bytes_read = 0;
			//
			//while (chars_read < count) {
			//int pos = 0;
			//while (true) {
			//CheckBuffer(pos + 1);
			//
			//int read_byte = m_stream.ReadByte();
			//
			//if (read_byte == -1)
			//// EOF
			//return chars_read;
			//
			//m_buffer[pos++] = (byte)read_byte;
			//bytes_read++;
			//
			//int n = m_encoding.GetChars(m_buffer, 0, pos, buffer, index + chars_read);
			//if (n > 0)
			//break;
			//}
			//chars_read++;
			//}
			//
			//return chars_read;
		},
		read7BitEncodedInt: function() {
			var ret = 0;
			var shift = 0;
			var len;
			var b;
			for (len = 0; len < 5; ++len) {
				b = this.readByte();
				ret = ret | (b & 127) << shift;
				shift += 7;
				if ((b & 128) === 0) {
					break;
				}
			}
			if (len < 5) {
				return ret;
			}
			else {
				throw new ss.FormatException('Too many bytes in what should have been a 7 bit encoded Int32.');
			}
		},
		readBoolean: function() {
			// Return value:
			//  true if the byte is non-zero; otherwise false.
			return this.readByte() !== 0;
		},
		readByte: function() {
			if (ss.isNullOrUndefined(this.$stream)) {
				if (this.$disposed) {
					throw new $System_ObjectDisposedException.$ctor2('BinaryReader', 'Cannot read from a closed BinaryReader.');
				}
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			var val = this.$stream.readByte();
			if (val !== -1) {
				return val & 255;
			}
			throw new $System_IO_EndOfStreamException();
		},
		readBytes: function(count) {
			if (ss.isNullOrUndefined(this.$stream)) {
				if (this.$disposed) {
					throw new $System_ObjectDisposedException.$ctor2('BinaryReader', 'Cannot read from a closed BinaryReader.');
				}
				throw new $System_IO_IOException.$ctor1('Stream is invalid');
			}
			if (count < 0) {
				throw new ss.ArgumentOutOfRangeException('count is less than 0');
			}
			// Can't use FillBuffer() here, because it's OK to
			// return fewer bytes than were requested
			var buf = new Array(count);
			var pos = 0;
			while (pos < count) {
				var n = this.$stream.read(buf, pos, count - pos);
				if (n === 0) {
					// EOF
					break;
				}
				pos += n;
			}
			if (pos !== count) {
				var new_buffer = new Array(pos);
				$System_Buffer.blockCopy$3(buf, 0, new_buffer, 0, pos);
				return new_buffer;
			}
			return buf;
		},
		readChar: function() {
			throw new ss.NotImplementedException();
			//int ch = Read();
			//
			//if (ch == -1) {
			//throw new EndOfStreamException();
			//}
			//
			//return ((char)ch);
		},
		readChars: function(count) {
			throw new ss.NotImplementedException();
			//if (count < 0) {
			//throw new ArgumentOutOfRangeException("count is less than 0");
			//}
			//
			//if (count == 0)
			//return new char[0];
			//
			//char[] full = new char[count];
			//int chars = Read(full, 0, count);
			//
			//if (chars == 0) {
			//throw new EndOfStreamException();
			//}
			//else if (chars != full.Length) {
			//char[] ret = new char[chars];
			//Array.Copy(full, 0, ret, 0, chars);
			//return ret;
			//}
			//else {
			//return full;
			//}
		},
		readDecimal: function() {
			throw new ss.NotImplementedException();
			//FillBuffer(16);
			//
			//decimal ret;
			//byte* ret_ptr = (byte*)&ret;
			//
			//// internal representation of decimal is
			//// ss32, hi32, lo32, mi32,
			//// but in stream it is
			//// lo32, mi32, hi32, ss32
			//// So we have to rerange this int32 values
			//
			//if (BitConverter.IsLittleEndian) {
			//for (int i = 0; i < 16; i++) {
			//if (i < 4) {
			//// lo 8 - 12
			//ret_ptr[i + 8] = m_buffer[i];
			//}
			//else if (i < 8) {
			//// mid 12 - 16
			//ret_ptr[i + 8] = m_buffer[i];
			//}
			//else if (i < 12) {
			//// hi 4 - 8
			//ret_ptr[i - 4] = m_buffer[i];
			//}
			//else if (i < 16) {
			//// ss 0 - 4
			//ret_ptr[i - 12] = m_buffer[i];
			//}
			//}
			//}
			//else {
			//for (int i = 0; i < 16; i++) {
			//if (i < 4) {
			//// lo 8 - 12
			//ret_ptr[11 - i] = m_buffer[i];
			//}
			//else if (i < 8) {
			//// mid 12 - 16
			//ret_ptr[19 - i] = m_buffer[i];
			//}
			//else if (i < 12) {
			//// hi 4 - 8
			//ret_ptr[15 - i] = m_buffer[i];
			//}
			//else if (i < 16) {
			//// ss 0 - 4
			//ret_ptr[15 - i] = m_buffer[i];
			//}
			//}
			//}
			//
			//return ret;
		},
		readDouble: function() {
			this.fillBuffer(8);
			//return (BitConverterLE.ToDouble(m_buffer, 0));
			return this.$buffer.readDouble$3(0, 0);
		},
		readInt16: function() {
			this.fillBuffer(2);
			//return ((short)(buffer[0] | (buffer[1] << 8)));
			return this.$buffer.readInt16$3(0, 0);
		},
		readInt32: function() {
			this.fillBuffer(4);
			//return (buffer[0] | (buffer[1] << 8) |
			//       (buffer[2] << 16) | (buffer[3] << 24));
			return this.$buffer.readInt32$3(0, 0);
		},
		readInt64: function() {
			throw new ss.NotImplementedException();
			//FillBuffer(8);
			//
			//uint ret_low = (uint)(buffer[0] |
			//(buffer[1] << 8) |
			//(buffer[2] << 16) |
			//(buffer[3] << 24)
			//);
			//uint ret_high = (uint)(buffer[4] |
			//(buffer[5] << 8) |
			//(buffer[6] << 16) |
			//(buffer[7] << 24)
			//);
			//return (long)((((ulong)ret_high) << 32) | ret_low);
		},
		readSByte: function() {
			return $Franca_Cast.toSByte(this.readByte());
		},
		readString: function() {
			throw new ss.NotImplementedException();
			//
			//            // Inspection of BinaryWriter-written files
			//
			//            // shows that the length is given in bytes,
			//
			//            // not chars
			//
			//            int len = Read7BitEncodedInt();
			//
			//            
			//
			//            if (len < 0)
			//
			//            throw new IOException("Invalid binary file (string len < 0)");
			//
			//            
			//
			//            if (len == 0)
			//
			//            return String.Empty;
			//
			//            
			//
			//            
			//
			//            if (charBuffer == null)
			//
			//            charBuffer = new char[MaxBufferSize];
			//
			//            
			//
			//            // We read the string here in small chunks. Also, we
			//
			//            // Attempt to optimize the common case of short strings.
			//
			//            StringBuilder sb = null;
			//
			//            do {
			//
			//            int readLen = (len > MaxBufferSize)
			//
			//            ? MaxBufferSize
			//
			//            : len;
			//
			//            
			//
			//            FillBuffer(readLen);
			//
			//            
			//
			//            int cch = decoder.GetChars(m_buffer, 0, readLen, charBuffer, 0);
			//
			//            
			//
			//            if (sb == null && readLen == len) // ok, we got out the easy way, dont bother with the sb
			//
			//            return new String(charBuffer, 0, cch);
			//
			//            
			//
			//            if (sb == null)
			//
			//            // Len is a fairly good estimate of the number of chars in a string
			//
			//            // Most of the time 1 byte == 1 char
			//
			//            sb = new StringBuilder(len);
			//
			//            
			//
			//            sb.Append(charBuffer, 0, cch);
			//
			//            len -= readLen;
			//
			//            } while (len > 0);
			//
			//            
			//
			//            return sb.ToString();
		},
		readSingle: function() {
			this.fillBuffer(4);
			//return (BitConverterLE.ToSingle(m_buffer, 0));
			return this.$buffer.readSingle$3(0, 0);
		},
		readUInt16: function() {
			this.fillBuffer(2);
			//return ((ushort)(buffer[0] | (buffer[1] << 8)));
			return this.$buffer.readUInt16$3(0, 0);
		},
		readUInt32: function() {
			this.fillBuffer(4);
			//return ((uint)(buffer[0] |
			//           (buffer[1] << 8) |
			//           (buffer[2] << 16) |
			//           (buffer[3] << 24)));
			return this.$buffer.readUInt32$3(0, 0);
		},
		readUInt64: function() {
			throw new ss.NotImplementedException();
			//FillBuffer(8);
			//
			//uint ret_low = (uint)(buffer[0] |
			//(buffer[1] << 8) |
			//(buffer[2] << 16) |
			//(buffer[3] << 24)
			//);
			//uint ret_high = (uint)(buffer[4] |
			//(buffer[5] << 8) |
			//(buffer[6] << 16) |
			//(buffer[7] << 24)
			//);
			//return (((ulong)ret_high) << 32) | ret_low;
		},
		$checkBuffer: function(length) {
			if (this.$buffer.get_length() <= length) {
				var new_buffer = new $Franca_BinaryData.$ctor5(length);
				$Franca_BinaryData.blockCopy(this.$buffer, 0, new_buffer, 0, this.$buffer.get_length());
				this.$buffer = new_buffer;
			}
		}
	}, null, [ss.IDisposable]);
	$System_IO_BinaryReader.$ctor1.prototype = $System_IO_BinaryReader.$ctor2.prototype = $System_IO_BinaryReader.prototype;
	ss.initClass($System_IO_BinaryWriter, $asm, {
		get_baseStream: function() {
			this.flush();
			return this.outStream;
		},
		close: function() {
			this.dispose$1(true);
		},
		dispose: function() {
			this.dispose$1(true);
		},
		dispose$1: function(disposing) {
			if (disposing && ss.isValue(this.outStream)) {
				this.outStream.close();
			}
			this.$buffer = null;
			//m_encoding = null;
			this.$disposed = true;
		},
		flush: function() {
			this.outStream.flush();
		},
		seek: function(offset, origin) {
			return this.outStream.seek(offset, origin);
		},
		write: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			this.outStream.writeByte((value ? 1 : 0));
		},
		write$1: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			this.outStream.writeByte(value);
		},
		write$2: function(buffer) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			if (ss.isNullOrUndefined(buffer)) {
				throw new ss.ArgumentNullException('buffer');
			}
			this.outStream.write(buffer, 0, buffer.length);
		},
		write$g: function(buffer, index, count) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			if (ss.isNullOrUndefined(buffer)) {
				throw new ss.ArgumentNullException('buffer');
			}
			this.outStream.write(buffer, index, count);
		},
		write$3: function(ch) {
			throw new ss.NotImplementedException();
			//if (disposed)
			//throw new ObjectDisposedException("BinaryWriter", "Cannot write to a closed BinaryWriter");
			//
			//char[] dec = new char[1];
			//dec[0] = ch;
			//byte[] enc = m_encoding.GetBytes(dec, 0, 1);
			//OutStream.Write(enc, 0, enc.Length);
		},
		write$4: function(chars) {
			throw new ss.NotImplementedException();
			//if (disposed)
			//throw new ObjectDisposedException("BinaryWriter", "Cannot write to a closed BinaryWriter");
			//
			//if (chars == null)
			//throw new ArgumentNullException("chars");
			//byte[] enc = m_encoding.GetBytes(chars, 0, chars.Length);
			//OutStream.Write(enc, 0, enc.Length);
		},
		write$h: function(chars, index, count) {
			throw new ss.NotImplementedException();
			//if (disposed)
			//throw new ObjectDisposedException("BinaryWriter", "Cannot write to a closed BinaryWriter");
			//
			//if (chars == null)
			//throw new ArgumentNullException("chars");
			//byte[] enc = m_encoding.GetBytes(chars, index, count);
			//OutStream.Write(enc, 0, enc.Length);
		},
		write$5: function(value) {
			throw new ss.NotImplementedException();
			//if (disposed)
			//throw new ObjectDisposedException("BinaryWriter", "Cannot write to a closed BinaryWriter");
			//
			//byte* value_ptr = (byte*)&value;
			//
			//// decimal in stream is lo32, mi32, hi32, ss32
			//// but its internal structure si ss32, hi32, lo32, mi32
			//
			//if (BitConverter.IsLittleEndian) {
			//for (int i = 0; i < 16; i++) {
			//if (i < 4)
			//buffer[i + 12] = value_ptr[i];
			//else if (i < 8)
			//buffer[i + 4] = value_ptr[i];
			//else if (i < 12)
			//buffer[i - 8] = value_ptr[i];
			//else
			//buffer[i - 8] = value_ptr[i];
			//}
			//}
			//else {
			//for (int i = 0; i < 16; i++) {
			//if (i < 4)
			//buffer[15 - i] = value_ptr[i];
			//else if (i < 8)
			//buffer[15 - i] = value_ptr[i];
			//else if (i < 12)
			//buffer[11 - i] = value_ptr[i];
			//else
			//buffer[19 - i] = value_ptr[i];
			//}
			//}
			//
			//OutStream.Write(buffer, 0, 16);
		},
		write$6: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			//OutStream.Write(BitConverterLE.GetBytes(value), 0, 8);
			this.$buffer.writeDouble$3(value, 0, 0);
			this.outStream.$_Write(this.$buffer, 0, 8);
		},
		write$7: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			//buffer[0] = (byte)value;
			//buffer[1] = (byte)(value >> 8);
			this.$buffer.writeInt16$3(value, 0, 0);
			this.outStream.$_Write(this.$buffer, 0, 2);
		},
		write$8: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			//buffer[0] = (byte)value;
			//buffer[1] = (byte)(value >> 8);
			//buffer[2] = (byte)(value >> 16);
			//buffer[3] = (byte)(value >> 24);
			this.$buffer.writeInt32$3(value, 0, 0);
			this.outStream.$_Write(this.$buffer, 0, 4);
		},
		write$9: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			for (var i = 0, sh = 0; i < 8; i++, sh += 8) {
				//buffer[i] = (byte)(value >> sh);
				this.$buffer.set_item(i, ss.Int32.trunc(value / Math.pow(2, sh)) & 255);
			}
			this.outStream.$_Write(this.$buffer, 0, 8);
		},
		write$a: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			this.$buffer.set_item(0, value & 255);
			this.outStream.$_Write(this.$buffer, 0, 1);
		},
		write$b: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			//OutStream.Write(BitConverterLE.GetBytes(value), 0, 4);
			this.$buffer.writeSingle$3(value, 0, 0);
			this.outStream.$_Write(this.$buffer, 0, 4);
		},
		write$c: function(value) {
			throw new ss.NotImplementedException();
			//
			//            if (disposed)
			//
			//            throw new ObjectDisposedException("BinaryWriter", "Cannot write to a closed BinaryWriter");
			//
			//            
			//
			//            int len = m_encoding.GetByteCount(value);
			//
			//            Write7BitEncodedInt(len);
			//
			//            
			//
			//            if (stringBuffer == null) {
			//
			//            stringBuffer = new byte[512];
			//
			//            maxCharsPerRound = 512 / m_encoding.GetMaxByteCount(1);
			//
			//            }
			//
			//            
			//
			//            int chpos = 0;
			//
			//            int chrem = value.Length;
			//
			//            while (chrem > 0) {
			//
			//            int cch = (chrem > maxCharsPerRound) ? maxCharsPerRound : chrem;
			//
			//            int blen = m_encoding.GetBytes(value, chpos, cch, stringBuffer, 0);
			//
			//            OutStream.Write(stringBuffer, 0, blen);
			//
			//            
			//
			//            chpos += cch;
			//
			//            chrem -= cch;
			//
			//            }
		},
		write$d: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			//buffer[0] = (byte)value;
			//buffer[1] = (byte)(value >> 8);
			this.$buffer.writeUInt16$3(value, 0, 0);
			this.outStream.$_Write(this.$buffer, 0, 2);
		},
		write$e: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			//buffer[0] = (byte)value;
			//buffer[1] = (byte)(value >> 8);
			//buffer[2] = (byte)(value >> 16);
			//buffer[3] = (byte)(value >> 24);
			this.$buffer.writeUInt32$3(value, 0, 0);
			this.outStream.$_Write(this.$buffer, 0, 4);
		},
		write$f: function(value) {
			if (this.$disposed) {
				throw new $System_ObjectDisposedException.$ctor2('BinaryWriter', 'Cannot write to a closed BinaryWriter');
			}
			for (var i = 0, sh = 0; i < 8; i++, sh += 8) {
				//buffer[i] = (byte)(value >> sh);
				this.$buffer.set_item(i, ss.Int32.trunc(value / Math.pow(2, sh)) & 255);
			}
			this.outStream.$_Write(this.$buffer, 0, 8);
		},
		write7BitEncodedInt: function(value) {
			do {
				var high = value >> 7 & 33554431;
				var b = value & 127;
				if (high !== 0) {
					b = b | 128;
				}
				this.write$1(b);
				value = high;
			} while (value !== 0);
		}
	}, null, [ss.IDisposable]);
	$System_IO_BinaryWriter.$ctor1.prototype = $System_IO_BinaryWriter.$ctor2.prototype = $System_IO_BinaryWriter.$ctor3.prototype = $System_IO_BinaryWriter.prototype;
	ss.initClass($System_IO_IOException, $asm, {}, $System_SystemException);
	$System_IO_IOException.$ctor1.prototype = $System_IO_IOException.$ctor2.prototype = $System_IO_IOException.$ctor3.prototype = $System_IO_IOException.prototype;
	ss.initClass($System_IO_EndOfStreamException, $asm, {}, $System_IO_IOException);
	$System_IO_EndOfStreamException.$ctor1.prototype = $System_IO_EndOfStreamException.$ctor2.prototype = $System_IO_EndOfStreamException.prototype;
	ss.initClass($System_IO_InvalidDataException, $asm, {}, $System_SystemException);
	$System_IO_InvalidDataException.$ctor1.prototype = $System_IO_InvalidDataException.$ctor2.prototype = $System_IO_InvalidDataException.prototype;
	ss.initEnum($System_IO_SeekOrigin, $asm, { begin: 0, current: 1, end: 2 });
	ss.initClass($System_Linq_LinqExtensions, $asm, {});
	ss.initClass($System_Reflection_ParameterInfo, $asm, {});
	ss.initClass($System_Reflection_ReflectionExtensions, $asm, {});
	ss.initClass($System_Runtime_InteropServices_Marshal, $asm, {});
	ss.initEnum($UniPrep_BinType, $asm, { and: 0, or: 1 });
	ss.initClass($UniPrep_Chunk, $asm, { parse: null, compile: null });
	ss.initClass($UniPrep_BlockChunk, $asm, {
		parse: function(parser) {
			throw new ss.NotImplementedException();
		},
		parse$1: function(parser, closers) {
			var token = parser.lookAhead(0);
			while (!ss.contains(closers, token.type)) {
				this.chunks.push(parser.parseChunk(token));
				token = parser.lookAhead(0);
			}
		},
		compile: function(str, args) {
			for (var $t1 = 0; $t1 < this.chunks.length; $t1++) {
				var chk = this.chunks[$t1];
				chk.compile(str, args);
			}
		},
		toString: function() {
			var str = new ss.StringBuilder();
			for (var $t1 = 0; $t1 < this.chunks.length; $t1++) {
				var chk = this.chunks[$t1];
				str.append(chk.toString());
			}
			return str.toString();
		}
	}, $UniPrep_Chunk);
	ss.initClass($UniPrep_CommentChunk, $asm, {
		parse: function(parser) {
			this.comment = parser.consume(10).value.substring(8).trim();
		},
		compile: function(str, args) {
		},
		toString: function() {
			return ss.formatString('#comment {0}', this.comment, '\n');
		}
	}, $UniPrep_Chunk);
	ss.initClass($UniPrep_CompileArgs, $asm, {
		setDefaultFileResolver: function() {
			// this is called from constructors, we don't want a default file solver but we do wanna disable tool sections
			this.disableTool = true;
			// we do want a default relativizer
			this.defaultFileRelativizer = ss.mkdel(this, this.$defaultMakeRelative);
		},
		$defaultMakeRelative: function(source) {
			if (this.files.length === 0) {
				return $Franca_Platform.getFullPath(source);
			}
			if (this.currentFile === -1) {
				return $Franca_Platform.getFullPath(source);
			}
			var currentFile = this.files[this.currentFile];
			var directory = $Franca_Platform.getDirectory($Franca_Platform.getFullPath(currentFile));
			return $Franca_Platform.getFullPath($Franca_Platform.combinePaths$2(directory, source));
		},
		add_onBeginInclude: function(value) {
			this.$1$OnBeginIncludeField = ss.delegateCombine(this.$1$OnBeginIncludeField, value);
		},
		remove_onBeginInclude: function(value) {
			this.$1$OnBeginIncludeField = ss.delegateRemove(this.$1$OnBeginIncludeField, value);
		},
		add_onEndInclude: function(value) {
			this.$1$OnEndIncludeField = ss.delegateCombine(this.$1$OnEndIncludeField, value);
		},
		remove_onEndInclude: function(value) {
			this.$1$OnEndIncludeField = ss.delegateRemove(this.$1$OnEndIncludeField, value);
		},
		performInclude: function(chunk, str) {
			if (this.currentFile === -1 && this.files.length > 0) {
				this.files[0] = this.makeRelative(this.files[0]);
				this.currentFile = 0;
			}
			// save current line and file
			this.currentLine.push(chunk.line);
			var lastFile = this.currentFile;
			// add new file and set current file
			var relFile = this.makeRelative(chunk.source);
			if (!ss.contains(this.files, relFile)) {
				this.files.push(relFile);
			}
			this.currentFile = ss.indexOf(this.files, relFile);
			// call begin include
			var onBeginInclude = this.$1$OnBeginIncludeField;
			if (!ss.staticEquals(onBeginInclude, null)) {
				onBeginInclude(str, this, 1, lastFile);
			}
			// perform actual include
			chunk.performInclude(str, this, relFile);
			// restore current file
			this.currentFile = lastFile;
			// call end include
			var onEndInclude = this.$1$OnEndIncludeField;
			if (!ss.staticEquals(onEndInclude, null)) {
				onEndInclude(str, this, this.currentLine.pop() + 1);
			}
		},
		makeRelative: function(source) {
			var onMakeRelative = this.onMakeRelative;
			if (!ss.staticEquals(onMakeRelative, null)) {
				return onMakeRelative(this, source);
			}
			if (ss.staticEquals(this.defaultFileRelativizer, null)) {
				throw new ss.InvalidOperationException(ss.formatString("Couldn't resolve include for file '{0}': CompileArgs.OnMakeRelative was null, but defaultFileRelativizer was also null", source));
			}
			return this.defaultFileRelativizer(source);
		},
		resolveInclude: function(source) {
			var onResolveInclude = this.onResolveInclude;
			if (!ss.staticEquals(onResolveInclude, null)) {
				return onResolveInclude(this, source);
			}
			if (ss.staticEquals(this.defaultFileResolver, null)) {
				throw new ss.InvalidOperationException(ss.formatString("Couldn't resolve include for file '{0}': CompileArgs.OnResolveInclude was null, but defaultFileResolver was also null", source));
			}
			return this.defaultFileResolver(source);
		}
	});
	$UniPrep_CompileArgs.$ctor1.prototype = $UniPrep_CompileArgs.prototype;
	ss.initClass($UniPrep_DefineChunk, $asm, {
		parse: function(parser) {
			this.expression = parser.consume(7).value.substring(8).trim();
			this.macro = new $UniPrep_MacroParser(this.expression);
			this.macro.parse(this.type === 8);
		},
		compile: function(str, args) {
			if (this.macro.isDefine) {
				if (!ss.contains(args.defines, this.macro.symbol)) {
					args.defines.push(this.macro.symbol);
				}
			}
			else {
				if (args.macros.containsKey(this.macro.symbol)) {
					console.log(ss.formatString("Warning! Redefinition of macro '{0}'", this.macro.symbol));
				}
				args.macros.set_item(this.macro.symbol, this.macro);
			}
		},
		toString: function() {
			return ss.formatString('#define {0}', this.expression, '\n');
		}
	}, $UniPrep_Chunk);
	ss.initClass($UniPrep_DelimiterPair, $asm, {
		getHashCode: function() {
			var h = this.left;
			h = h * 397 ^ this.right;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $UniPrep_DelimiterPair)) {
				return false;
			}
			return this.left === o.left && this.right === o.right;
		}
	});
	$UniPrep_DelimiterPair.$ctor1.prototype = $UniPrep_DelimiterPair.prototype;
	$UniPrep_DelimiterPair.__class = false;
	ss.initEnum($UniPrep_DirectiveType, $asm, { text: 0, if$1: 1, else$1: 2, elseIf: 3, endIf: 4, include: 5, includeRaw: 6, define: 7, defineBlank: 8, undef: 9, comment: 10, tool: 11, endTool: 12, endOfFile: 13 });
	ss.initClass($UniPrep_IfChunk, $asm, {
		$parseOperator: function(precedence, leftToRight) {
			var token = this.$getToken();
			var lhs;
			if (token === '(') {
				var op = this.$parseOperator(0, true);
				var group = new $UniPrep_OpGroup(op);
				token = this.$getToken();
				if (token !== ')') {
					if (ss.isValue(token)) {
						throw new ss.Exception("Unexpected '" + token + "' in group in #if condition.");
					}
					else {
						throw new ss.Exception("Expected ')' in group in #if condition.");
					}
				}
				lhs = group;
			}
			else if (token === '&&') {
				throw new ss.Exception('Unexpected and operator in #if condition.');
			}
			else if (token === '||') {
				throw new ss.Exception('Unexpected or operator in #if condition.');
			}
			else if (token === ')') {
				throw new ss.Exception('Unexpected closing parenthesis in #if condition.');
			}
			else if (ss.isNullOrUndefined(token)) {
				throw new ss.Exception('Unexpected end of condition in #if.');
			}
			else if (token === '!') {
				var op1 = this.$parseOperator(0, false);
				var negate = new $UniPrep_OpNegate(op1);
				lhs = negate;
			}
			else {
				lhs = new $UniPrep_OpName(token);
			}
			if (leftToRight) {
				while (true) {
					var rhs = null;
					var op2 = this.$lookToken();
					if (op2 === '&&' || op2 === '||') {
						var opPrecedence = this.$getPrecedence(op2);
						if (opPrecedence >= precedence) {
							this.tokenIndex++;
							rhs = this.$parseOperator(opPrecedence, true);
						}
					}
					if (ss.isNullOrUndefined(rhs)) {
						return lhs;
					}
					else {
						lhs = new $UniPrep_OpBinary(lhs, rhs, ((op2 === '&&') ? 0 : 1));
					}
				}
			}
			else {
				return lhs;
			}
		},
		$getPrecedence: function(op) {
			if (op === '||') {
				return 0;
			}
			return 1;
		},
		$lookToken: function() {
			if (this.tokenIndex >= this.tokens.length) {
				return null;
			}
			return this.tokens[this.tokenIndex];
		},
		$getToken: function() {
			if (this.tokenIndex >= this.tokens.length) {
				return null;
			}
			var s = this.tokens[this.tokenIndex];
			this.tokenIndex++;
			return s;
		},
		$getTokens: function(s) {
			var regex = new $Franca_Text_Regex('\\(|\\)|!|&&|\\|\\||\\w+|\\s+', 0);
			return Enumerable.from(regex.match(s)).select(function(x) {
				return ss.cast(x, $Franca_Text_Match);
			}).where(function(m) {
				return !$UniPrep_StringExtensions.isNullOrWhiteSpace(m.value);
			}).select(function(m1) {
				return m1.value;
			}).toArray();
		},
		parse: function(parser) {
			var token = parser.consume(this.type);
			var condition = token.value.substring(((this.type === 1) ? 3 : 5)).trim();
			this.tokens = this.$getTokens(condition);
			this.ifCondition = this.$parseOperator(0, true);
			this.ifBlock = new $UniPrep_BlockChunk();
			this.ifBlock.parse$1(parser, [2, 3, 4]);
			token = parser.lookAhead(0);
			if (token.type === 3) {
				var elseIf = new $UniPrep_IfChunk(3);
				elseIf.parse(parser);
				this.elseBlock = elseIf;
			}
			else if (token.type === 2) {
				parser.consume(2);
				var elseBlock = new $UniPrep_BlockChunk();
				elseBlock.parse$1(parser, [4]);
				this.elseBlock = elseBlock;
				parser.consume(4);
			}
			else if (token.type === 4) {
				parser.consume(4);
			}
			else {
				throw new ss.Exception('Unexpected directive ' + token.type + ' in #if block.');
			}
		},
		compile: function(str, args) {
			if (this.ifCondition.test(args.defines)) {
				this.ifBlock.compile(str, args);
			}
			else if (ss.isValue(this.elseBlock)) {
				this.elseBlock.compile(str, args);
			}
		},
		toString: function() {
			var str = new ss.StringBuilder();
			str.appendLine(ss.formatString('#if {0}', this.ifCondition));
			str.append(this.ifBlock.toString());
			if (ss.isValue(this.elseBlock)) {
				str.appendLine('#else');
				str.append(this.elseBlock.toString());
			}
			str.appendLine('#endif');
			return str.toString();
		}
	}, $UniPrep_Chunk);
	ss.initClass($UniPrep_IncludeChunk, $asm, {
		parse: function(parser) {
			var token;
			if (this.preprocess) {
				token = parser.consume(5);
				this.source = token.value.substring(8).trim();
			}
			else {
				token = parser.consume(6);
				this.source = token.value.substring(11).trim();
			}
			this.line = token.line;
		},
		$removeSourceDelimiters: function(args) {
			if (this.$delimitersRemoved) {
				return;
			}
			this.$delimitersRemoved = true;
			for (var $t1 = 0; $t1 < args.allowedIncludeDelimiters.length; $t1++) {
				var del = args.allowedIncludeDelimiters[$t1];
				if (this.source.length >= 2 && this.source.charCodeAt(0) === del.left && this.source.charCodeAt(this.source.length - 1) === del.right) {
					this.source = this.source.substr(1, this.source.length - 2);
					return;
				}
			}
		},
		compile: function(str, args) {
			this.$removeSourceDelimiters(args);
			args.performInclude(this, str);
		},
		performInclude: function(str, args, source) {
			if (this.preprocess) {
				str.append($UniPrep_Preprocessor.preprocessString(args.resolveInclude(source), args));
			}
			else {
				str.appendLine(args.resolveInclude(source));
			}
		},
		toString: function() {
			if (this.preprocess) {
				return ss.formatString('#include {0}{1}', this.source, '\n');
			}
			else {
				return ss.formatString('#includeraw {0}{1}', this.source, '\n');
			}
		}
	}, $UniPrep_Chunk);
	ss.initClass($UniPrep_Lexer, $asm, {
		lex: function(args) {
			this.tokens = [];
			for (var i = 0; i < this.lines.length; i++) {
				var line = this.lines[i];
				var token = null;
				if (ss.isNullOrUndefined(this.prefix) || ss.startsWithString(line.trim(), this.prefix)) {
					var dir = line.trim();
					if (ss.isValue(this.prefix) && line.length > this.prefix.length) {
						dir = dir.substring(this.prefix.length).trim();
					}
					if (!args.disableIf && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#if')) {
						token = new $UniPrep_Token(1, dir, i + 1);
					}
					else if (!args.disableIf && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#elif')) {
						token = new $UniPrep_Token(3, dir, i + 1);
					}
					else if (!args.disableIf && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#else')) {
						token = new $UniPrep_Token(2, dir, i + 1);
					}
					else if (!args.disableIf && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#endif')) {
						token = new $UniPrep_Token(4, dir, i + 1);
					}
					else if (!args.disableInclude && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#includeraw')) {
						token = new $UniPrep_Token(6, dir, i + 1);
					}
					else if (!args.disableInclude && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#include')) {
						token = new $UniPrep_Token(5, dir, i + 1);
					}
					else if (!args.disableDefine && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#define')) {
						token = new $UniPrep_Token(7, dir, i + 1);
					}
					else if (!args.disableDefine && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#defineblank')) {
						token = new $UniPrep_Token(8, dir, i + 1);
					}
					else if (!args.disableComment && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#comment')) {
						token = new $UniPrep_Token(10, dir, i + 1);
					}
					else if (!args.disableDefine && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#undef')) {
						token = new $UniPrep_Token(9, dir, i + 1);
					}
					else if (!args.disableTool && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#tool')) {
						token = new $UniPrep_Token(11, dir, i + 1);
					}
					else if (!args.disableTool && ss.startsWithString($System_StringExtensions.toLowerInvariant(dir), '#endtool')) {
						token = new $UniPrep_Token(12, dir, i + 1);
					}
				}
				if (ss.isNullOrUndefined(token)) {
					token = new $UniPrep_Token(0, line, i + 1);
				}
				this.tokens.push(token);
			}
		}
	});
	ss.initClass($UniPrep_LineChunk, $asm, {
		parse: function(parser) {
			this.value = parser.consume(0).value;
			this.final$1 = this.value;
		},
		compile: function(str, args) {
			this.final$1 = this.value;
			var $t1 = ss.getEnumerator(args.macros.get_values());
			try {
				while ($t1.moveNext()) {
					var macro = $t1.current();
					this.final$1 = macro.apply(this.final$1);
				}
			}
			finally {
				$t1.dispose();
			}
			str.appendLine(this.final$1);
		},
		toString: function() {
			return this.value + '\n';
		}
	}, $UniPrep_Chunk);
	ss.initClass($UniPrep_MacroParser, $asm, {
		apply: function(source) {
			if (this.isFunc) {
				return this.$regex.replace(source, ss.mkdel(this, function(match) {
					var str = new ss.StringBuilder(ss.coalesce(match.groups[1], ''));
					for (var i = this.$expressionStart; i < this.$tokens.length; i++) {
						var token = this.$tokens[i];
						if (token.isIdentifier && ss.contains(this.$arguments, token.value)) {
							var argIndex = ss.indexOf(this.$arguments, token.value);
							str.append(ss.coalesce(match.groups[argIndex + 2], '').trim());
						}
						else {
							str.append(token.value);
						}
					}
					return str.toString();
				}));
			}
			else {
				return this.$regex.replace(source, ss.mkdel(this, function(match1) {
					return ss.formatString('{0}{1}{2}', ss.coalesce(match1.groups[1], ''), this.$macroValue, ss.coalesce(match1.groups[2], ''));
				}));
			}
		},
		parse: function(isBlank) {
			var regexSource;
			this.$tokens = [];
			this.$arguments = [];
			this.$lex();
			this.symbol = this.$consumeIdentifier();
			this.$consumeBlank();
			// if the identifier is followed by a '(' it's a function macro
			// if it's followed by end of file, it's a define
			// otherwise it's an object macro
			if (ss.isNullOrUndefined(this.$lookAhead(0).value) && !isBlank) {
				this.isDefine = true;
				return;
			}
			else if (isBlank || ss.isValue(this.$lookAhead(0)) && this.$lookAhead(0).value !== '(') {
				regexSource = ss.formatString('([^\\w]|^){0}([^\\w]|$)', this.symbol);
				this.$regex = new $Franca_Text_Regex(regexSource, 0);
				this.isFunc = false;
				this.$macroValue = (isBlank ? '' : this.source.substring(this.$lookAhead(0).index).trim());
				return;
			}
			this.isFunc = true;
			this.$consume('(');
			this.$consumeBlank();
			var token;
			while ((token = this.$lookAhead(0)).value !== ')') {
				if (ss.isNullOrUndefined(token.value)) {
					throw new ss.Exception('Unexpected end of file in macro');
				}
				this.$consumeBlank();
				this.$arguments.push(this.$consumeIdentifier());
				this.$consumeBlank();
				if (this.$lookAhead(0).value === ',') {
					this.$consume(',');
					this.$consumeBlank();
				}
			}
			this.$consume(')');
			this.$consumeBlank();
			this.$expressionStart = this.$tokenIndex;
			// set up regex
			var regArgs = new ss.StringBuilder();
			for (var i = 0; i < this.$arguments.length; i++) {
				regArgs.append('([^,)]*)');
				if (i < this.$arguments.length - 1) {
					regArgs.append(',');
				}
			}
			regexSource = ss.formatString('([^\\w]|^){0}\\s*\\({1}\\)', this.symbol, regArgs.toString());
			this.$regex = new $Franca_Text_Regex(regexSource, 0);
		},
		$consumeIdentifier: function() {
			var token = this.$tokens[this.$tokenIndex];
			if (!token.isIdentifier) {
				throw new ss.Exception('Expected identifier in macro');
			}
			this.$tokenIndex++;
			return token.value;
		},
		$consumeBlank: function() {
			while (ss.isValue(this.$lookAhead(0).value) && $UniPrep_StringExtensions.isNullOrWhiteSpace(this.$tokens[this.$tokenIndex].value)) {
				this.$tokenIndex++;
			}
		},
		$consume: function(s) {
			var token = this.$tokens[this.$tokenIndex];
			if (token.isIdentifier) {
				throw new ss.Exception('Unexpected identifier in macro');
			}
			if (!ss.referenceEquals(token.value, s)) {
				throw new ss.Exception("Expected '" + s + "' in macro");
			}
			this.$tokenIndex++;
		},
		$lookAhead: function(i) {
			if (this.$tokenIndex + i >= this.$tokens.length) {
				return new $UniPrep_MacroParser$MacroToken(null, false, 0);
			}
			return this.$tokens[this.$tokenIndex + i];
		},
		$lex: function() {
			while (this.$lexIndex < this.source.length) {
				var c = this.source.charCodeAt(this.$lexIndex);
				if (this.$isWord(c, true)) {
					var startIndex = this.$lexIndex;
					var ident = new ss.StringBuilder($UniPrep_ObjectExtensions.toStringInvariant(c));
					while (this.$lexIndex + 1 < this.source.length && this.$isWord(c = this.source.charCodeAt(this.$lexIndex + 1), false)) {
						ident.appendChar(c);
						this.$lexIndex++;
					}
					this.$tokens.push(new $UniPrep_MacroParser$MacroToken(ident.toString(), true, startIndex));
				}
				else if (c === 40) {
					this.$tokens.push(new $UniPrep_MacroParser$MacroToken('(', false, this.$lexIndex));
				}
				else if (c === 41) {
					this.$tokens.push(new $UniPrep_MacroParser$MacroToken(')', false, this.$lexIndex));
				}
				else if (c === 44) {
					this.$tokens.push(new $UniPrep_MacroParser$MacroToken(',', false, this.$lexIndex));
				}
				else {
					var startIndex1 = this.$lexIndex;
					var code = new ss.StringBuilder($UniPrep_ObjectExtensions.toStringInvariant(c));
					while (this.$lexIndex + 1 < this.source.length && !this.$isWord(c = this.source.charCodeAt(this.$lexIndex + 1), true) && c !== 40 && c !== 44 && c !== 41) {
						code.appendChar(c);
						this.$lexIndex++;
					}
					this.$tokens.push(new $UniPrep_MacroParser$MacroToken(code.toString(), false, startIndex1));
				}
				this.$lexIndex++;
			}
		},
		$isWord: function(c, firstCharacter) {
			if (firstCharacter) {
				return c >= 65 && c <= 90 || c >= 97 && c <= 122 || c === 95;
			}
			else {
				return this.$isWord(c, true) || this.$isNumber(c);
			}
		},
		$isNumber: function(c) {
			return c >= 48 && c <= 57;
		}
	});
	ss.initClass($UniPrep_MacroParser$MacroToken, $asm, {
		toString: function() {
			return this.value;
		}
	});
	ss.initClass($UniPrep_ObjectExtensions, $asm, {});
	ss.initClass($UniPrep_Operator, $asm, { test: null });
	ss.initClass($UniPrep_OpBinary, $asm, {
		test: function(defines) {
			if (this.type === 0) {
				return this.lhs.test(defines) && this.rhs.test(defines);
			}
			else {
				return this.lhs.test(defines) || this.rhs.test(defines);
			}
		},
		toString: function() {
			return ss.formatString('({0} {1} {2})', this.lhs.toString(), ((this.type === 0) ? '&&' : '||'), this.rhs.toString());
		}
	}, $UniPrep_Operator);
	ss.initClass($UniPrep_OpGroup, $asm, {
		test: function(defines) {
			return this.op.test(defines);
		},
		toString: function() {
			return this.op.toString();
		}
	}, $UniPrep_Operator);
	ss.initClass($UniPrep_OpName, $asm, {
		test: function(defines) {
			return ss.contains(defines, this.name);
		},
		toString: function() {
			return this.name;
		}
	}, $UniPrep_Operator);
	ss.initClass($UniPrep_OpNegate, $asm, {
		test: function(defines) {
			return !this.op.test(defines);
		},
		toString: function() {
			return '!' + this.op.toString();
		}
	}, $UniPrep_Operator);
	ss.initClass($UniPrep_Parser, $asm, {
		parse: function() {
			this.macros = [];
			var chunk = new $UniPrep_BlockChunk();
			chunk.parse$1(this, [13]);
			return chunk;
		},
		parseChunk: function(token) {
			var chunk;
			switch (token.type) {
				default: {
					throw new ss.Exception('Unexpected directive ' + $UniPrep_ObjectExtensions.toStringInvariant$1(token.type));
				}
				case 0: {
					chunk = new $UniPrep_LineChunk();
					break;
				}
				case 1: {
					chunk = new $UniPrep_IfChunk(1);
					break;
				}
				case 5: {
					chunk = new $UniPrep_IncludeChunk(true);
					break;
				}
				case 6: {
					chunk = new $UniPrep_IncludeChunk(false);
					break;
				}
				case 7: {
					chunk = new $UniPrep_DefineChunk(7);
					break;
				}
				case 8: {
					chunk = new $UniPrep_DefineChunk(8);
					break;
				}
				case 10: {
					chunk = new $UniPrep_CommentChunk();
					break;
				}
				case 9: {
					chunk = new $UniPrep_UndefChunk();
					break;
				}
				case 11: {
					chunk = new $UniPrep_ToolChunk();
					break;
				}
			}
			chunk.parse(this);
			return chunk;
		},
		lookAhead: function(offset) {
			if (this.index + offset >= this.tokens.length) {
				return new $UniPrep_Token(13, null, -1);
			}
			return this.tokens[this.index + offset];
		},
		consume: function(type) {
			if (this.index >= this.tokens.length) {
				throw new ss.Exception('Unexpected end of file in parser.');
			}
			var token = this.tokens[this.index];
			if (token.type !== type) {
				throw new ss.Exception("Expected type '" + $UniPrep_ObjectExtensions.toStringInvariant$1(type) + "' but found type '" + $UniPrep_ObjectExtensions.toStringInvariant$1(token.type) + "'.");
			}
			this.index++;
			return token;
		}
	});
	ss.initClass($UniPrep_Preprocessor, $asm, {});
	ss.initClass($UniPrep_StringExtensions, $asm, {});
	ss.initClass($UniPrep_Token, $asm, {
		toString: function() {
			return ss.formatString('{0}: {1}', $UniPrep_ObjectExtensions.toStringInvariant$1(this.type), this.value);
		}
	});
	ss.initClass($UniPrep_ToolChunk, $asm, {
		parse: function(parser) {
		},
		compile: function(str, args) {
		}
	}, $UniPrep_Chunk);
	ss.initClass($UniPrep_UndefChunk, $asm, {
		parse: function(parser) {
			this.name = parser.consume(9).value.substring(7).trim();
		},
		compile: function(str, args) {
			ss.remove(args.defines, this.name);
			args.macros.remove(this.name);
		},
		toString: function() {
			return ss.formatString('#undef {0}', this.name, '\n');
		}
	}, $UniPrep_Chunk);
	ss.setMetadata($Coroutines_Coroutine, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: '_running', isStatic: true, type: 4, returnType: Array, sname: '$_running' }] });
	ss.setMetadata($Franca_BinaryData, { attr: [new $Franca_LoadableFromAttribute(1)], members: [{ name: '.ctor', type: 1, params: [$Franca_BinaryData], sname: '$ctor1' }] });
	ss.setMetadata($Franca_BinDataStreamReader, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: '_readTempBuffer', isStatic: true, type: 4, returnType: Array, sname: '$_readTempBuffer' }] });
	ss.setMetadata($Franca_BinDataStreamWriter, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: '_tempBuffer', isStatic: true, type: 4, returnType: Array, sname: '$_tempBuffer' }] });
	ss.setMetadata($Franca_Calc, { members: [{ name: '.cctor', type: 1, params: [] }, { name: 'Abs', isStatic: true, type: 8, sname: 'abs', returnType: $Franca_Fix53, params: [$Franca_Fix53] }, { name: 'Acos', isStatic: true, type: 8, sname: 'acos', returnType: Number, params: [$Franca_Fix53] }, { name: 'Asin', isStatic: true, type: 8, sname: 'asin', returnType: Number, params: [$Franca_Fix53] }, { name: 'Atan', isStatic: true, type: 8, sname: 'atan', returnType: Number, params: [$Franca_Fix53] }, { name: 'Atan2', isStatic: true, type: 8, sname: 'atan2', returnType: Number, params: [$Franca_Fix53, $Franca_Fix53] }, { name: 'Atan2', isStatic: true, type: 8, sname: 'atan2$1', returnType: Number, params: [$Franca_Fix53, Number] }, { name: 'Atan2', isStatic: true, type: 8, sname: 'atan2$2', returnType: Number, params: [Number, $Franca_Fix53] }, { name: 'Bilinear', isStatic: true, type: 8, sname: 'bilinear', returnType: Number, params: [$Franca_Vector2, Array] }, { name: 'Bilinear', isStatic: true, type: 8, sname: 'bilinear$1', returnType: Number, params: [$Franca_Vector2, Number, Number, Number, Number] }, { name: 'Ceiling', isStatic: true, type: 8, sname: 'ceiling', returnType: $Franca_Fix53, params: [$Franca_Fix53] }, {
		name: 'Ceiling',
		isStatic: true,
		type: 8,
		def: function(value) {
			return Math.ceil(value);
		},
		returnType: ss.Int32,
		params: [Number]
	}, { name: 'CeilingF', isStatic: true, type: 8, sname: 'ceilingF', returnType: Number, params: [Number, ss.Int32] }, { name: 'Center', isStatic: true, type: 8, sname: 'center', returnType: Number, params: [Number, Number, $Franca_CenterOptions] }, { name: 'Clamp', isStatic: true, type: 8, sname: 'clamp$1', returnType: $Franca_Fix53, params: [$Franca_Fix53, ss.makeGenericType(ss.Nullable$1, [$Franca_Fix53]), ss.makeGenericType(ss.Nullable$1, [$Franca_Fix53])] }, { name: 'Clamp', isStatic: true, type: 8, sname: 'clamp$3', returnType: Number, params: [Number, Number, Number] }, { name: 'Clamp', isStatic: true, type: 8, sname: 'clamp$5', returnType: ss.Int32, params: [ss.Int32, ss.Int32, ss.Int32] }, { name: 'Clamp', isStatic: true, type: 8, sname: 'clamp$7', returnType: Number, params: [Number, Number, Number] }, { name: 'Cos', isStatic: true, type: 8, sname: 'cos', returnType: Number, params: [$Franca_Fix53] }, { name: 'Cosh', isStatic: true, type: 8, sname: 'cosh', returnType: Number, params: [$Franca_Fix53] }, { name: 'Exp', isStatic: true, type: 8, sname: 'exp', returnType: Number, params: [$Franca_Fix53] }, { name: 'ExpFix', isStatic: true, type: 8, sname: 'expFix', returnType: $Franca_Fix53, params: [ss.Int32] }, { name: 'Floor', isStatic: true, type: 8, sname: 'floor', returnType: $Franca_Fix53, params: [$Franca_Fix53] }, {
		name: 'Floor',
		isStatic: true,
		type: 8,
		def: function(value) {
			return Math.floor(value);
		},
		returnType: ss.Int32,
		params: [Number]
	}, { name: 'FloorF', isStatic: true, type: 8, sname: 'floorF', returnType: Number, params: [Number, ss.Int32] }, { name: 'IsPowerOfTwo', isStatic: true, type: 8, sname: 'isPowerOfTwo', returnType: Boolean, params: [ss.Int32] }, { name: 'Lerp', isStatic: true, type: 8, sname: 'lerp', returnType: $Franca_Fix53, params: [$Franca_Fix53, $Franca_Fix53, $Franca_Fix53] }, { name: 'Lerp', isStatic: true, type: 8, sname: 'lerp$1', returnType: Number, params: [$Franca_Fix53, $Franca_Fix53, Number] }, { name: 'Lerp', isStatic: true, type: 8, sname: 'lerp$2', returnType: Number, params: [Number, Number, Number] }, { name: 'Lerp', isStatic: true, type: 8, sname: 'lerp$3', returnType: Number, params: [Number, Number, Number] }, { name: 'Log', isStatic: true, type: 8, sname: 'log', returnType: Number, params: [$Franca_Fix53] }, { name: 'Log', isStatic: true, type: 8, sname: 'log$1', returnType: Number, params: [$Franca_Fix53, $Franca_Fix53] }, { name: 'Log', isStatic: true, type: 8, sname: 'log$2', returnType: Number, params: [$Franca_Fix53, Number] }, { name: 'Log10', isStatic: true, type: 8, sname: 'log10', returnType: Number, params: [$Franca_Fix53] }, { name: 'Log2', isStatic: true, type: 8, sname: 'log2', returnType: Number, params: [Number] }, { name: 'Max', isStatic: true, type: 8, sname: 'max', returnType: $Franca_Fix53, params: [Array] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$1', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$2', returnType: ss.Int32, params: [Array] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$3', returnType: Number, params: [Number] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$4', returnType: Number, params: [Array] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$5', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$6', returnType: ss.Int32, params: [Array] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$7', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$8', returnType: ss.Int32, params: [Array] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$9', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$a', returnType: ss.Int32, params: [Array] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$b', returnType: Number, params: [Number] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$c', returnType: Number, params: [Array] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$d', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$e', returnType: ss.Int32, params: [Array] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$f', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$g', returnType: ss.Int32, params: [Array] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$h', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$i', returnType: Number, params: [Number, Number] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$j', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$k', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$l', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$m', returnType: Number, params: [Number, Number] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$n', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Max', isStatic: true, type: 8, sname: 'max$o', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min', returnType: $Franca_Fix53, params: [Array] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$1', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$2', returnType: ss.Int32, params: [Array] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$3', returnType: Number, params: [Number] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$4', returnType: Number, params: [Array] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$5', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$6', returnType: ss.Int32, params: [Array] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$7', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$8', returnType: ss.Int32, params: [Array] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$9', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$a', returnType: ss.Int32, params: [Array] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$b', returnType: Number, params: [Number] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$c', returnType: Number, params: [Array] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$d', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$e', returnType: ss.Int32, params: [Array] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$f', returnType: ss.Int32, params: [ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$g', returnType: ss.Int32, params: [Array] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$h', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$i', returnType: Number, params: [Number, Number] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$j', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$k', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$l', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$m', returnType: Number, params: [Number, Number] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$n', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Min', isStatic: true, type: 8, sname: 'min$o', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Mod', isStatic: true, type: 8, sname: 'mod', returnType: $Franca_Fix53, params: [$Franca_Fix53, $Franca_Fix53] }, { name: 'Mod', isStatic: true, type: 8, sname: 'mod$1', returnType: $Franca_Fix53, params: [$Franca_Fix53, ss.Int32] }, { name: 'Mod', isStatic: true, type: 8, sname: 'mod$2', returnType: Number, params: [Number, Number] }, { name: 'Mod', isStatic: true, type: 8, sname: 'mod$3', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'ParseInt', isStatic: true, type: 8, sname: 'parseInt', returnType: ss.Int32, params: [String] }, { name: 'ParseNumber', isStatic: true, type: 8, sname: 'parseNumber', returnType: Number, params: [String] }, { name: 'Pow', isStatic: true, type: 8, sname: 'pow', returnType: Number, params: [$Franca_Fix53, Number] }, { name: 'Pow', isStatic: true, type: 8, sname: 'pow$1', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Pow', isStatic: true, type: 8, sname: 'pow$2', returnType: Number, params: [Number, Number] }, { name: 'PowFix', isStatic: true, type: 8, sname: 'powFix', returnType: $Franca_Fix53, params: [$Franca_Fix53, ss.Int32] }, { name: 'Round', isStatic: true, type: 8, sname: 'round', returnType: $Franca_Fix53, params: [$Franca_Fix53] }, {
		name: 'Round',
		isStatic: true,
		type: 8,
		def: function(value) {
			return Math.round(value);
		},
		returnType: ss.Int32,
		params: [Number]
	}, { name: 'Round', isStatic: true, type: 8, sname: 'round$1', returnType: Number, params: [$Franca_Fix53, ss.Int32] }, {
		name: 'RoundF',
		isStatic: true,
		type: 8,
		def: function(value) {
			return Math.round(value);
		},
		returnType: Number,
		params: [Number]
	}, { name: 'RoundF', isStatic: true, type: 8, sname: 'roundF', returnType: Number, params: [Number, ss.Int32] }, { name: 'Sign', isStatic: true, type: 8, sname: 'sign', returnType: ss.Int32, params: [$Franca_Fix53] }, { name: 'SignFix', isStatic: true, type: 8, sname: 'signFix', returnType: $Franca_Fix53, params: [$Franca_Fix53] }, { name: 'Sin', isStatic: true, type: 8, sname: 'sin', returnType: Number, params: [$Franca_Fix53] }, { name: 'Sinh', isStatic: true, type: 8, sname: 'sinh', returnType: Number, params: [$Franca_Fix53] }, { name: 'SmoothStep', isStatic: true, type: 8, sname: 'smoothStep', returnType: Number, params: [Number, Number, Number] }, { name: 'Sqrt', isStatic: true, type: 8, sname: 'sqrt', returnType: Number, params: [$Franca_Fix53] }, { name: 'Tan', isStatic: true, type: 8, sname: 'tan', returnType: Number, params: [$Franca_Fix53] }, { name: 'Tanh', isStatic: true, type: 8, sname: 'tanh', returnType: Number, params: [$Franca_Fix53] }, { name: 'Truncate', isStatic: true, type: 8, sname: 'truncate', returnType: $Franca_Fix53, params: [$Franca_Fix53] }, {
		name: 'Truncate',
		isStatic: true,
		type: 8,
		def: function(value) {
			return Math.trunc(value);
		},
		returnType: Number,
		params: [Number]
	}, { name: 'Wave', isStatic: true, type: 8, sname: 'wave', returnType: Number, params: [Number] }, { name: 'Wave', isStatic: true, type: 8, sname: 'wave$1', returnType: Number, params: [ss.TimeSpan, Number] }, { name: 'WaveF', isStatic: true, type: 8, sname: 'waveF', returnType: Number, params: [Number] }, { name: 'WaveF', isStatic: true, type: 8, sname: 'waveF$1', returnType: Number, params: [ss.TimeSpan, Number] }, { name: 'Wrap', isStatic: true, type: 8, sname: 'wrap', returnType: $Franca_Fix53, params: [$Franca_Fix53, $Franca_Fix53] }, { name: 'Wrap', isStatic: true, type: 8, sname: 'wrap$1', returnType: Number, params: [Number, Number] }, { name: 'Wrap', isStatic: true, type: 8, sname: 'wrap$2', returnType: ss.Int32, params: [ss.Int32, ss.Int32] }, { name: 'Wrap', isStatic: true, type: 8, sname: 'wrap$3', returnType: Number, params: [Number, Number] }, { name: 'Wrap', isStatic: true, type: 8, sname: 'wrap$4', returnType: $Franca_Fix53, params: [$Franca_Fix53, $Franca_Fix53, $Franca_Fix53] }, { name: 'Wrap', isStatic: true, type: 8, sname: 'wrap$5', returnType: Number, params: [Number, Number, Number] }, { name: 'Wrap', isStatic: true, type: 8, sname: 'wrap$6', returnType: ss.Int32, params: [ss.Int32, ss.Int32, ss.Int32] }, { name: 'Wrap', isStatic: true, type: 8, sname: 'wrap$7', returnType: Number, params: [Number, Number, Number] }, { name: 'MaxSafeIntFloat32', isStatic: true, type: 4, returnType: Number, sname: 'maxSafeIntFloat32' }, { name: 'MaxSafeIntFloat64', isStatic: true, type: 4, returnType: Number, sname: 'maxSafeIntFloat64' }, { name: 'PI', isStatic: true, type: 4, returnType: Number, sname: 'PI' }, { name: 'Tau', isStatic: true, type: 4, returnType: Number, sname: 'tau' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_hexCharValues', isStatic: true, type: 4, returnType: Array, sname: '$_hexCharValues' }] });
	ss.setMetadata($Franca_Color, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_Serialization_Streaming_IJsonReader], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [ss.Int32, Boolean], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [ss.Int32, Boolean], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [Number, Number, Number, Number], sname: '$ctor4' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, ss.Int32, ss.Int32], sname: '$ctor5' }, { name: '.ctor', type: 1, params: [Number, Number, Number, Number], sname: '$ctor6' }, { name: 'Equals', type: 8, sname: 'equals$1', returnType: Boolean, params: [$Franca_Color] }, { name: 'Equals', type: 8, sname: 'equals', returnType: Boolean, params: [Object] }, { name: 'FromHex', isStatic: true, type: 8, sname: 'fromHex', returnType: $Franca_Color, params: [String, Boolean] }, { name: 'FromJson', type: 8, sname: 'fromJson', returnType: $Franca_Color, params: [$Franca_JsonValue] }, { name: 'FromName', isStatic: true, type: 8, sname: 'fromName', returnType: ss.makeGenericType(ss.Nullable$1, [$Franca_Color]), params: [String] }, { name: 'GetHashCode', type: 8, sname: 'getHashCode', returnType: ss.Int32, params: [] }, { name: 'GetRandomNamed', isStatic: true, type: 8, sname: 'getRandomNamed', returnType: $Franca_Color, params: [ss.Random] }, { name: 'Lerp', isStatic: true, type: 8, sname: 'lerp', returnType: $Franca_Color, params: [$Franca_Color, $Franca_Color, Number, Boolean] }, { name: 'Lerp', isStatic: true, type: 8, sname: 'lerp$1', returnType: $Franca_Color, params: [$Franca_Color, $Franca_Color, Number, $Franca_ColorLerpMode, Boolean] }, { name: 'Mix', type: 8, sname: 'mix', returnType: $Franca_Color, params: [$Franca_Color, Number, Boolean] }, { name: 'Multiply', isStatic: true, type: 8, sname: 'multiply', returnType: $Franca_Color, params: [$Franca_Color, Number, Boolean] }, { name: 'Premultiply', type: 8, sname: 'premultiply', returnType: $Franca_Color, params: [] }, { name: 'Premultiply', isStatic: true, type: 8, sname: 'premultiply', returnType: $Franca_Color, params: [$Franca_Color] }, { name: 'ToJson', type: 8, sname: 'toJson', returnType: $Franca_JsonValue, params: [] }, { name: 'ToRGBAHex', type: 8, sname: 'toRGBAHex', returnType: String, params: [String] }, { name: 'ToRGBHex', type: 8, sname: 'toRGBHex', returnType: String, params: [String] }, { name: 'ToString', type: 8, sname: 'toString', returnType: String, params: [] }, { name: 'ToVector3', type: 8, sname: 'toVector3', returnType: $Franca_Vector3, params: [] }, { name: 'ToVector4', type: 8, sname: 'toVector4', returnType: $Franca_Vector4, params: [] }, { name: 'WriteJson', type: 8, sname: 'writeJson', returnType: Object, params: [$Franca_Serialization_Streaming_IJsonWriter] }, { name: 'op_Addition', isStatic: true, type: 8, sname: 'op_Addition', returnType: $Franca_Color, params: [$Franca_Color, $Franca_Color] }, { name: 'op_Division', isStatic: true, type: 8, sname: 'op_Division', returnType: $Franca_Color, params: [$Franca_Color, $Franca_Color] }, { name: 'op_Division', isStatic: true, type: 8, sname: 'op_Division$1', returnType: $Franca_Color, params: [$Franca_Color, Number] }, { name: 'op_Equality', isStatic: true, type: 8, sname: 'op_Equality', returnType: Boolean, params: [$Franca_Color, $Franca_Color] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit', returnType: $Franca_Vector3, params: [$Franca_Color] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit$1', returnType: $Franca_Vector4, params: [$Franca_Color] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit', returnType: $Franca_HdrColor, params: [$Franca_Color] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit$1', returnType: $Franca_Color, params: [ss.Int32] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit$2', returnType: $Franca_Color, params: [ss.Int32] }, { name: 'op_Inequality', isStatic: true, type: 8, sname: 'op_Inequality', returnType: Boolean, params: [$Franca_Color, $Franca_Color] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply', returnType: $Franca_Color, params: [$Franca_Color, $Franca_Color] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$1', returnType: $Franca_Color, params: [$Franca_Color, Number] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$2', returnType: $Franca_Color, params: [Number, $Franca_Color] }, { name: 'op_Subtraction', isStatic: true, type: 8, sname: 'op_Subtraction', returnType: $Franca_Color, params: [$Franca_Color, $Franca_Color] }, { name: 'A', type: 16, returnType: ss.Int32, getter: { name: 'get_A', type: 8, sname: 'get_a', returnType: ss.Int32, params: [] } }, { name: 'B', type: 16, returnType: ss.Int32, getter: { name: 'get_B', type: 8, sname: 'get_b', returnType: ss.Int32, params: [] } }, { name: 'G', type: 16, returnType: ss.Int32, getter: { name: 'get_G', type: 8, sname: 'get_g', returnType: ss.Int32, params: [] } }, { name: 'NamedColors', isStatic: true, type: 16, returnType: ss.IEnumerable, getter: { name: 'get_NamedColors', isStatic: true, type: 8, sname: 'get_namedColors', returnType: ss.IEnumerable, params: [] } }, { name: 'Packed', type: 16, returnType: ss.Int32, getter: { name: 'get_Packed', type: 8, sname: 'get_packed', returnType: ss.Int32, params: [] } }, { name: 'R', type: 16, returnType: ss.Int32, getter: { name: 'get_R', type: 8, sname: 'get_r', returnType: ss.Int32, params: [] } }, { name: 'AliceBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'aliceBlue' }, { name: 'AntiqueWhite', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'antiqueWhite' }, { name: 'Aqua', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'aqua' }, { name: 'Aquamarine', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'aquamarine' }, { name: 'Azure', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'azure' }, { name: 'Beige', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'beige' }, { name: 'Bisque', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'bisque' }, { name: 'Black', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'black' }, { name: 'BlanchedAlmond', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'blanchedAlmond' }, { name: 'Blue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'blue' }, { name: 'BlueViolet', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'blueViolet' }, { name: 'Brown', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'brown' }, { name: 'BurlyWood', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'burlyWood' }, { name: 'CadetBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'cadetBlue' }, { name: 'Chartreuse', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'chartreuse' }, { name: 'Chocolate', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'chocolate' }, { name: 'Coral', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'coral' }, { name: 'CornflowerBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'cornflowerBlue' }, { name: 'Cornsilk', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'cornsilk' }, { name: 'Crimson', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'crimson' }, { name: 'Cyan', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'cyan' }, { name: 'DarkBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkBlue' }, { name: 'DarkCyan', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkCyan' }, { name: 'DarkGoldenrod', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkGoldenrod' }, { name: 'DarkGray', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkGray' }, { name: 'DarkGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkGreen' }, { name: 'DarkKhaki', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkKhaki' }, { name: 'DarkMagenta', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkMagenta' }, { name: 'DarkOliveGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkOliveGreen' }, { name: 'DarkOrange', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkOrange' }, { name: 'DarkOrchid', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkOrchid' }, { name: 'DarkRed', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkRed' }, { name: 'DarkSalmon', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkSalmon' }, { name: 'DarkSeaGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkSeaGreen' }, { name: 'DarkSlateBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkSlateBlue' }, { name: 'DarkSlateGray', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkSlateGray' }, { name: 'DarkTurquoise', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkTurquoise' }, { name: 'DarkViolet', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'darkViolet' }, { name: 'DeepPink', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'deepPink' }, { name: 'DeepSkyBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'deepSkyBlue' }, { name: 'DimGray', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'dimGray' }, { name: 'DodgerBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'dodgerBlue' }, { name: 'Firebrick', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'firebrick' }, { name: 'FloralWhite', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'floralWhite' }, { name: 'ForestGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'forestGreen' }, { name: 'Fuchsia', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'fuchsia' }, { name: 'Gainsboro', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'gainsboro' }, { name: 'GhostWhite', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'ghostWhite' }, { name: 'Gold', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'gold' }, { name: 'Goldenrod', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'goldenrod' }, { name: 'Gray', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'gray' }, { name: 'Green', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'green' }, { name: 'GreenYellow', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'greenYellow' }, { name: 'Honeydew', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'honeydew' }, { name: 'HotPink', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'hotPink' }, { name: 'IndianRed', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'indianRed' }, { name: 'Indigo', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'indigo' }, { name: 'Ivory', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'ivory' }, { name: 'Khaki', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'khaki' }, { name: 'Lavender', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lavender' }, { name: 'LavenderBlush', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lavenderBlush' }, { name: 'LawnGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lawnGreen' }, { name: 'LemonChiffon', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lemonChiffon' }, { name: 'LightBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightBlue' }, { name: 'LightCoral', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightCoral' }, { name: 'LightCyan', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightCyan' }, { name: 'LightGoldenrodYellow', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightGoldenrodYellow' }, { name: 'LightGray', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightGray' }, { name: 'LightGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightGreen' }, { name: 'LightPink', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightPink' }, { name: 'LightSalmon', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightSalmon' }, { name: 'LightSeaGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightSeaGreen' }, { name: 'LightSkyBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightSkyBlue' }, { name: 'LightSlateGray', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightSlateGray' }, { name: 'LightSteelBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightSteelBlue' }, { name: 'LightYellow', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lightYellow' }, { name: 'Lime', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'lime' }, { name: 'LimeGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'limeGreen' }, { name: 'Linen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'linen' }, { name: 'Magenta', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'magenta' }, { name: 'Maroon', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'maroon' }, { name: 'MediumAquamarine', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'mediumAquamarine' }, { name: 'MediumBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'mediumBlue' }, { name: 'MediumOrchid', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'mediumOrchid' }, { name: 'MediumPurple', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'mediumPurple' }, { name: 'MediumSeaGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'mediumSeaGreen' }, { name: 'MediumSlateBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'mediumSlateBlue' }, { name: 'MediumSpringGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'mediumSpringGreen' }, { name: 'MediumTurquoise', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'mediumTurquoise' }, { name: 'MediumVioletRed', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'mediumVioletRed' }, { name: 'MidnightBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'midnightBlue' }, { name: 'MintCream', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'mintCream' }, { name: 'MistyRose', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'mistyRose' }, { name: 'Moccasin', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'moccasin' }, { name: 'NavajoWhite', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'navajoWhite' }, { name: 'Navy', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'navy' }, { name: 'OfficeGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'officeGreen' }, { name: 'OldLace', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'oldLace' }, { name: 'Olive', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'olive' }, { name: 'OliveDrab', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'oliveDrab' }, { name: 'Orange', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'orange' }, { name: 'OrangeRed', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'orangeRed' }, { name: 'Orchid', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'orchid' }, { name: 'PaleGoldenrod', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'paleGoldenrod' }, { name: 'PaleGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'paleGreen' }, { name: 'PaleTurquoise', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'paleTurquoise' }, { name: 'PaleVioletRed', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'paleVioletRed' }, { name: 'PapayaWhip', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'papayaWhip' }, { name: 'PeachPuff', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'peachPuff' }, { name: 'Peru', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'peru' }, { name: 'Pink', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'pink' }, { name: 'Plum', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'plum' }, { name: 'PowderBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'powderBlue' }, { name: 'Purple', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'purple' }, { name: 'Red', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'red' }, { name: 'RosyBrown', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'rosyBrown' }, { name: 'RoyalBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'royalBlue' }, { name: 'SaddleBrown', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'saddleBrown' }, { name: 'Salmon', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'salmon' }, { name: 'SandyBrown', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'sandyBrown' }, { name: 'SeaGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'seaGreen' }, { name: 'SeaShell', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'seaShell' }, { name: 'Sienna', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'sienna' }, { name: 'Silver', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'silver' }, { name: 'SkyBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'skyBlue' }, { name: 'SlateBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'slateBlue' }, { name: 'SlateGray', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'slateGray' }, { name: 'Snow', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'snow' }, { name: 'SpringGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'springGreen' }, { name: 'SteelBlue', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'steelBlue' }, { name: 'Tan', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'tan' }, { name: 'Teal', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'teal' }, { name: 'Thistle', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'thistle' }, { name: 'Tomato', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'tomato' }, { name: 'Transparent', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'transparent' }, { name: 'TransparentBlack', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'transparentBlack' }, { name: 'Turquoise', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'turquoise' }, { name: 'Violet', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'violet' }, { name: 'Wheat', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'wheat' }, { name: 'White', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'white' }, { name: 'WhiteSmoke', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'whiteSmoke' }, { name: 'Yellow', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'yellow' }, { name: 'YellowGreen', isStatic: true, type: 4, returnType: $Franca_Color, sname: 'yellowGreen' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_hexBuilder', isStatic: true, type: 4, returnType: ss.StringBuilder, sname: '$_hexBuilder' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_randomizer', isStatic: true, type: 4, returnType: $Franca_RNG, sname: '$_randomizer' }] });
	ss.setMetadata($Franca_HAlign, { attr: [new $Franca_Gui_Documentation_GuiSupportAttribute()] });
	ss.setMetadata($Franca_HdrColor, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_Serialization_Streaming_IJsonReader], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [ss.Int32, Boolean], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [ss.Int32, Boolean], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [Number, Number, Number, Number], sname: '$ctor4' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, ss.Int32, ss.Int32], sname: '$ctor5' }, { name: '.ctor', type: 1, params: [Number, Number, Number, Number], sname: '$ctor6' }, { name: 'Equals', type: 8, sname: 'equals$1', returnType: Boolean, params: [$Franca_HdrColor] }, { name: 'Equals', type: 8, sname: 'equals', returnType: Boolean, params: [Object] }, { name: 'FromJson', type: 8, sname: 'fromJson', returnType: $Franca_HdrColor, params: [$Franca_JsonValue] }, { name: 'GetHashCode', type: 8, sname: 'getHashCode', returnType: ss.Int32, params: [] }, { name: 'Lerp', isStatic: true, type: 8, sname: 'lerp', returnType: $Franca_HdrColor, params: [$Franca_HdrColor, $Franca_HdrColor, Number, Boolean] }, { name: 'Lerp', isStatic: true, type: 8, sname: 'lerp$1', returnType: $Franca_HdrColor, params: [$Franca_HdrColor, $Franca_HdrColor, Number, $Franca_ColorLerpMode, Boolean] }, { name: 'Mix', type: 8, sname: 'mix', returnType: $Franca_HdrColor, params: [$Franca_HdrColor, Number] }, { name: 'Multiply', isStatic: true, type: 8, sname: 'multiply', returnType: $Franca_HdrColor, params: [$Franca_HdrColor, Number, Boolean] }, { name: 'Premultiply', type: 8, sname: 'premultiply', returnType: $Franca_HdrColor, params: [] }, { name: 'Premultiply', isStatic: true, type: 8, sname: 'premultiply', returnType: $Franca_HdrColor, params: [$Franca_HdrColor] }, { name: 'ToJson', type: 8, sname: 'toJson', returnType: $Franca_JsonValue, params: [] }, { name: 'ToString', type: 8, sname: 'toString', returnType: String, params: [] }, { name: 'ToVector3', type: 8, sname: 'toVector3', returnType: $Franca_Vector3, params: [] }, { name: 'ToVector4', type: 8, sname: 'toVector4', returnType: $Franca_Vector4, params: [] }, { name: 'WriteJson', type: 8, sname: 'writeJson', returnType: Object, params: [$Franca_Serialization_Streaming_IJsonWriter] }, { name: 'op_Addition', isStatic: true, type: 8, sname: 'op_Addition', returnType: $Franca_HdrColor, params: [$Franca_HdrColor, $Franca_HdrColor] }, { name: 'op_Division', isStatic: true, type: 8, sname: 'op_Division', returnType: $Franca_HdrColor, params: [$Franca_HdrColor, $Franca_HdrColor] }, { name: 'op_Division', isStatic: true, type: 8, sname: 'op_Division$1', returnType: $Franca_HdrColor, params: [$Franca_HdrColor, Number] }, { name: 'op_Equality', isStatic: true, type: 8, sname: 'op_Equality', returnType: Boolean, params: [$Franca_HdrColor, $Franca_HdrColor] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit', returnType: $Franca_Color, params: [$Franca_HdrColor] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit$1', returnType: $Franca_Vector3, params: [$Franca_HdrColor] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit$2', returnType: $Franca_Vector4, params: [$Franca_HdrColor] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit', returnType: $Franca_HdrColor, params: [ss.Int32] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit$1', returnType: $Franca_HdrColor, params: [ss.Int32] }, { name: 'op_Inequality', isStatic: true, type: 8, sname: 'op_Inequality', returnType: Boolean, params: [$Franca_HdrColor, $Franca_HdrColor] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply', returnType: $Franca_HdrColor, params: [$Franca_HdrColor, $Franca_HdrColor] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$1', returnType: $Franca_HdrColor, params: [$Franca_HdrColor, Number] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$2', returnType: $Franca_HdrColor, params: [Number, $Franca_HdrColor] }, { name: 'op_Subtraction', isStatic: true, type: 8, sname: 'op_Subtraction', returnType: $Franca_HdrColor, params: [$Franca_HdrColor, $Franca_HdrColor] }, { name: 'Black', isStatic: true, type: 16, returnType: $Franca_HdrColor, getter: { name: 'get_Black', isStatic: true, type: 8, sname: 'get_black', returnType: $Franca_HdrColor, params: [] } }, { name: 'Transparent', isStatic: true, type: 16, returnType: $Franca_HdrColor, getter: { name: 'get_Transparent', isStatic: true, type: 8, sname: 'get_transparent', returnType: $Franca_HdrColor, params: [] } }, { name: 'White', isStatic: true, type: 16, returnType: $Franca_HdrColor, getter: { name: 'get_White', isStatic: true, type: 8, sname: 'get_white', returnType: $Franca_HdrColor, params: [] } }, { name: 'A', type: 4, returnType: Number, sname: 'a' }, { name: 'B', type: 4, returnType: Number, sname: 'b' }, { name: 'G', type: 4, returnType: Number, sname: 'g' }, { name: 'R', type: 4, returnType: Number, sname: 'r' }] });
	ss.setMetadata($Franca_ImplicitEnum$1, { attr: [new $Franca_ParsableAttribute()] });
	ss.setMetadata($Franca_JsonType, { enumFlags: true });
	ss.setMetadata($Franca_Platform, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: '_combinePathsBuilder', isStatic: true, type: 4, returnType: ss.StringBuilder, sname: '$_combinePathsBuilder' }] });
	ss.setMetadata($Franca_Point, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_Serialization_Streaming_IJsonReader], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32], sname: '$ctor2' }, { name: 'Equals', type: 8, sname: 'equalsT', returnType: Boolean, params: [$Franca_Point] }, { name: 'Equals', type: 8, sname: 'equals', returnType: Boolean, params: [Object] }, { name: 'FromJson', type: 8, sname: 'fromJson', returnType: $Franca_Point, params: [$Franca_JsonValue] }, { name: 'GetHashCode', type: 8, sname: 'getHashCode', returnType: ss.Int32, params: [] }, { name: 'ToJson', type: 8, sname: 'toJson', returnType: $Franca_JsonValue, params: [] }, { name: 'ToString', type: 8, sname: 'toString', returnType: String, params: [] }, { name: 'WriteJson', type: 8, sname: 'writeJson', returnType: Object, params: [$Franca_Serialization_Streaming_IJsonWriter] }, { name: 'op_Equality', isStatic: true, type: 8, sname: 'op_Equality', returnType: Boolean, params: [$Franca_Point, $Franca_Point] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit', returnType: $Franca_PointF, params: [$Franca_Point] }, { name: 'op_Inequality', isStatic: true, type: 8, sname: 'op_Inequality', returnType: Boolean, params: [$Franca_Point, $Franca_Point] }, { name: 'X', type: 4, returnType: ss.Int32, sname: 'x' }, { name: 'Y', type: 4, returnType: ss.Int32, sname: 'y' }, { name: 'Zero', isStatic: true, type: 4, returnType: $Franca_Point, sname: 'zero' }] });
	ss.setMetadata($Franca_PointF, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_Serialization_Streaming_IJsonReader], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [Number, Number], sname: '$ctor2' }, { name: 'Equals', type: 8, sname: 'equalsT', returnType: Boolean, params: [$Franca_PointF] }, { name: 'Equals', type: 8, sname: 'equals', returnType: Boolean, params: [Object] }, { name: 'FromJson', type: 8, sname: 'fromJson', returnType: $Franca_PointF, params: [$Franca_JsonValue] }, { name: 'GetHashCode', type: 8, sname: 'getHashCode', returnType: ss.Int32, params: [] }, { name: 'ToJson', type: 8, sname: 'toJson', returnType: $Franca_JsonValue, params: [] }, { name: 'ToString', type: 8, sname: 'toString', returnType: String, params: [] }, { name: 'WriteJson', type: 8, sname: 'writeJson', returnType: Object, params: [$Franca_Serialization_Streaming_IJsonWriter] }, { name: 'op_Equality', isStatic: true, type: 8, sname: 'op_Equality', returnType: Boolean, params: [$Franca_PointF, $Franca_PointF] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit', returnType: $Franca_Point, params: [$Franca_PointF] }, { name: 'op_Inequality', isStatic: true, type: 8, sname: 'op_Inequality', returnType: Boolean, params: [$Franca_PointF, $Franca_PointF] }, { name: 'X', type: 4, returnType: Number, sname: 'x' }, { name: 'Y', type: 4, returnType: Number, sname: 'y' }, { name: 'Zero', isStatic: true, type: 4, returnType: $Franca_PointF, sname: 'zero' }] });
	ss.setMetadata($Franca_Rectangle, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_Serialization_Streaming_IJsonReader], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [$Franca_Point, $Franca_Size], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, ss.Int32, ss.Int32], sname: '$ctor3' }, { name: 'Contains', type: 8, sname: 'contains', returnType: Boolean, params: [$Franca_Point] }, { name: 'Contains', type: 8, sname: 'contains$1', returnType: Boolean, params: [$Franca_Rectangle] }, { name: 'Contains', type: 8, sname: 'contains$2', returnType: Boolean, params: [ss.Int32, ss.Int32] }, { name: 'Deflate', type: 8, sname: 'deflate', returnType: $Franca_Rectangle, params: [ss.Int32] }, { name: 'Deflate', type: 8, sname: 'deflate$1', returnType: $Franca_Rectangle, params: [ss.Int32, ss.Int32] }, { name: 'Deflate', type: 8, sname: 'deflate$2', returnType: $Franca_Rectangle, params: [ss.Int32, ss.Int32, ss.Int32, ss.Int32] }, { name: 'Equals', type: 8, sname: 'equalsT', returnType: Boolean, params: [$Franca_Rectangle] }, { name: 'Equals', type: 8, sname: 'equals', returnType: Boolean, params: [Object] }, { name: 'FromJson', type: 8, sname: 'fromJson', returnType: $Franca_Rectangle, params: [$Franca_JsonValue] }, { name: 'FromLTRB', isStatic: true, type: 8, sname: 'fromLTRB', returnType: $Franca_Rectangle, params: [ss.Int32, ss.Int32, ss.Int32, ss.Int32] }, { name: 'GetHashCode', type: 8, sname: 'getHashCode', returnType: ss.Int32, params: [] }, { name: 'Inflate', type: 8, sname: 'inflate', returnType: $Franca_Rectangle, params: [ss.Int32] }, { name: 'Inflate', type: 8, sname: 'inflate$1', returnType: $Franca_Rectangle, params: [ss.Int32, ss.Int32] }, { name: 'Inflate', type: 8, sname: 'inflate$2', returnType: $Franca_Rectangle, params: [ss.Int32, ss.Int32, ss.Int32, ss.Int32] }, { name: 'Intersect', isStatic: true, type: 8, sname: 'intersect', returnType: $Franca_Rectangle, params: [$Franca_Rectangle, $Franca_Rectangle] }, { name: 'Intersect', isStatic: true, type: 8, sname: 'intersect$1', returnType: $Franca_Rectangle, params: [$Franca_Rectangle, ss.Int32, ss.Int32, ss.Int32, ss.Int32] }, { name: 'Intersects', type: 8, sname: 'intersects', returnType: Boolean, params: [$Franca_Rectangle] }, { name: 'Intersects', type: 8, sname: 'intersects$1', returnType: Boolean, params: [ss.Int32, ss.Int32, ss.Int32, ss.Int32] }, { name: 'ToJson', type: 8, sname: 'toJson', returnType: $Franca_JsonValue, params: [] }, { name: 'ToString', type: 8, sname: 'toString', returnType: String, params: [] }, { name: 'WriteJson', type: 8, sname: 'writeJson', returnType: Object, params: [$Franca_Serialization_Streaming_IJsonWriter] }, { name: 'op_Equality', isStatic: true, type: 8, sname: 'op_Equality', returnType: Boolean, params: [$Franca_Rectangle, $Franca_Rectangle] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit', returnType: $Franca_RectangleF, params: [$Franca_Rectangle] }, { name: 'op_Inequality', isStatic: true, type: 8, sname: 'op_Inequality', returnType: Boolean, params: [$Franca_Rectangle, $Franca_Rectangle] }, { name: 'Bottom', type: 16, returnType: ss.Int32, getter: {
		name: 'get_Bottom',
		type: 8,
		def: function() {
			return this.location.y + this.size.height;
		},
		returnType: ss.Int32,
		params: []
	} }, { name: 'Center', type: 16, returnType: $Franca_PointF, getter: { name: 'get_Center', type: 8, sname: 'get_center', returnType: $Franca_PointF, params: [] } }, { name: 'CenterV2', type: 16, returnType: $Franca_Vector2, getter: { name: 'get_CenterV2', type: 8, sname: 'get_centerV2', returnType: $Franca_Vector2, params: [] } }, { name: 'Height', type: 16, returnType: ss.Int32, getter: {
		name: 'get_Height',
		type: 8,
		def: function() {
			return this.size.height;
		},
		returnType: ss.Int32,
		params: []
	} }, { name: 'Left', type: 16, returnType: ss.Int32, getter: {
		name: 'get_Left',
		type: 8,
		def: function() {
			return this.location.x;
		},
		returnType: ss.Int32,
		params: []
	} }, { name: 'Points', type: 16, returnType: ss.IEnumerable, getter: { name: 'get_Points', type: 8, sname: 'get_points', returnType: ss.IEnumerable, params: [] } }, { name: 'Right', type: 16, returnType: ss.Int32, getter: {
		name: 'get_Right',
		type: 8,
		def: function() {
			return this.location.x + this.size.width;
		},
		returnType: ss.Int32,
		params: []
	} }, { name: 'Top', type: 16, returnType: ss.Int32, getter: {
		name: 'get_Top',
		type: 8,
		def: function() {
			return this.location.y;
		},
		returnType: ss.Int32,
		params: []
	} }, { name: 'Width', type: 16, returnType: ss.Int32, getter: {
		name: 'get_Width',
		type: 8,
		def: function() {
			return this.size.width;
		},
		returnType: ss.Int32,
		params: []
	} }, { name: 'Empty', isStatic: true, type: 4, returnType: $Franca_Rectangle, sname: 'empty' }, { name: 'Location', type: 4, returnType: $Franca_Point, sname: 'location' }, { name: 'Size', type: 4, returnType: $Franca_Size, sname: 'size' }] });
	ss.setMetadata($Franca_RectangleF, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_Serialization_Streaming_IJsonReader], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [$Franca_PointF, $Franca_SizeF], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [Number, Number, Number, Number], sname: '$ctor3' }, { name: 'Contains', type: 8, sname: 'contains', returnType: Boolean, params: [$Franca_PointF] }, { name: 'Contains', type: 8, sname: 'contains$1', returnType: Boolean, params: [$Franca_Vector2] }, { name: 'Contains', type: 8, sname: 'contains$2', returnType: Boolean, params: [Number, Number] }, { name: 'Deflate', type: 8, sname: 'deflate', returnType: $Franca_RectangleF, params: [Number] }, { name: 'Deflate', type: 8, sname: 'deflate$1', returnType: $Franca_RectangleF, params: [Number, Number] }, { name: 'Deflate', type: 8, sname: 'deflate$2', returnType: $Franca_RectangleF, params: [Number, Number, Number, Number] }, { name: 'Equals', type: 8, sname: 'equalsT', returnType: Boolean, params: [$Franca_RectangleF] }, { name: 'Equals', type: 8, sname: 'equals', returnType: Boolean, params: [Object] }, { name: 'FromJson', type: 8, sname: 'fromJson', returnType: $Franca_RectangleF, params: [$Franca_JsonValue] }, { name: 'FromLTRB', isStatic: true, type: 8, sname: 'fromLTRB', returnType: $Franca_RectangleF, params: [Number, Number, Number, Number] }, { name: 'GetHashCode', type: 8, sname: 'getHashCode', returnType: ss.Int32, params: [] }, { name: 'Inflate', type: 8, sname: 'inflate', returnType: $Franca_RectangleF, params: [Number] }, { name: 'Inflate', type: 8, sname: 'inflate$1', returnType: $Franca_RectangleF, params: [Number, Number] }, { name: 'Inflate', type: 8, sname: 'inflate$2', returnType: $Franca_RectangleF, params: [Number, Number, Number, Number] }, { name: 'Intersect', isStatic: true, type: 8, sname: 'intersect', returnType: $Franca_RectangleF, params: [$Franca_RectangleF, $Franca_RectangleF] }, { name: 'Intersect', isStatic: true, type: 8, sname: 'intersect$1', returnType: $Franca_RectangleF, params: [$Franca_RectangleF, Number, Number, Number, Number] }, { name: 'Intersects', type: 8, sname: 'intersects', returnType: Boolean, params: [$Franca_RectangleF] }, { name: 'Intersects', type: 8, sname: 'intersects$1', returnType: Boolean, params: [Number, Number, Number, Number] }, { name: 'ToJson', type: 8, sname: 'toJson', returnType: $Franca_JsonValue, params: [] }, { name: 'ToString', type: 8, sname: 'toString', returnType: String, params: [] }, { name: 'WriteJson', type: 8, sname: 'writeJson', returnType: Object, params: [$Franca_Serialization_Streaming_IJsonWriter] }, { name: 'op_Equality', isStatic: true, type: 8, sname: 'op_Equality', returnType: Boolean, params: [$Franca_RectangleF, $Franca_RectangleF] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit', returnType: $Franca_Rectangle, params: [$Franca_RectangleF] }, { name: 'op_Inequality', isStatic: true, type: 8, sname: 'op_Inequality', returnType: Boolean, params: [$Franca_RectangleF, $Franca_RectangleF] }, { name: 'Bottom', type: 16, returnType: Number, getter: {
		name: 'get_Bottom',
		type: 8,
		def: function() {
			return this.location.y + this.size.height;
		},
		returnType: Number,
		params: []
	} }, { name: 'Center', type: 16, returnType: $Franca_PointF, getter: { name: 'get_Center', type: 8, sname: 'get_center', returnType: $Franca_PointF, params: [] } }, { name: 'CenterV2', type: 16, returnType: $Franca_Vector2, getter: { name: 'get_CenterV2', type: 8, sname: 'get_centerV2', returnType: $Franca_Vector2, params: [] } }, { name: 'Height', type: 16, returnType: Number, getter: {
		name: 'get_Height',
		type: 8,
		def: function() {
			return this.size.height;
		},
		returnType: Number,
		params: []
	} }, { name: 'Left', type: 16, returnType: Number, getter: {
		name: 'get_Left',
		type: 8,
		def: function() {
			return this.location.x;
		},
		returnType: Number,
		params: []
	} }, { name: 'Right', type: 16, returnType: Number, getter: {
		name: 'get_Right',
		type: 8,
		def: function() {
			return this.location.x + this.size.width;
		},
		returnType: Number,
		params: []
	} }, { name: 'Top', type: 16, returnType: Number, getter: {
		name: 'get_Top',
		type: 8,
		def: function() {
			return this.location.y;
		},
		returnType: Number,
		params: []
	} }, { name: 'Width', type: 16, returnType: Number, getter: {
		name: 'get_Width',
		type: 8,
		def: function() {
			return this.size.width;
		},
		returnType: Number,
		params: []
	} }, { name: 'Empty', isStatic: true, type: 4, returnType: $Franca_RectangleF, sname: 'empty' }, { name: 'Location', type: 4, returnType: $Franca_PointF, sname: 'location' }, { name: 'Size', type: 4, returnType: $Franca_SizeF, sname: 'size' }] });
	ss.setMetadata($Franca_ReflectableDict$2, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [ss.IDictionary], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [ss.IEqualityComparer], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [ss.Int32], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [ss.IDictionary, ss.IEqualityComparer], sname: '$ctor4' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.IEqualityComparer], sname: '$ctor5' }, { name: 'Add', type: 8, sname: 'add', returnType: Object, params: [Object, Object] }, { name: 'ContainsKey', type: 8, sname: 'containsKey', returnType: Boolean, params: [Object] }, { name: 'Remove', type: 8, sname: 'remove', returnType: Boolean, params: [Object] }, { name: 'Count', type: 16, returnType: ss.Int32, getter: { name: 'get_Count', type: 8, sname: 'get_count', returnType: ss.Int32, params: [] } }, { name: 'Item', type: 16, returnType: Object, params: [Object], getter: { name: 'get_Item', type: 8, sname: 'get_item', returnType: Object, params: [Object] }, setter: { name: 'set_Item', type: 8, sname: 'set_item', returnType: Object, params: [Object, Object] } }, { name: 'Keys', type: 16, returnType: ss.ICollection, getter: { name: 'get_Keys', type: 8, sname: 'get_keys', returnType: ss.ICollection, params: [] } }, { name: 'Values', type: 16, returnType: ss.ICollection, getter: { name: 'get_Values', type: 8, sname: 'get_values', returnType: ss.ICollection, params: [] } }, { name: 'dictionary', type: 4, returnType: ss.makeGenericType(ss.Dictionary$2, [Object, Object]), sname: '$dictionary' }] });
	ss.setMetadata($Franca_ReflectableList$1, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [ss.IEnumerable], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [Array], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [ss.Int32], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [Array], sname: '$ctor4' }, { name: 'Add', type: 8, sname: 'add', returnType: Object, params: [Object] }, { name: 'Clear', type: 8, sname: 'clear', returnType: Object, params: [] }, { name: 'Contains', type: 8, sname: 'contains', returnType: Boolean, params: [Object] }, { name: 'IndexOf', type: 8, sname: 'indexOf', returnType: ss.Int32, params: [Object] }, { name: 'Insert', type: 8, sname: 'insert', returnType: Object, params: [ss.Int32, Object] }, { name: 'Remove', type: 8, sname: 'remove', returnType: Boolean, params: [Object] }, { name: 'RemoveAt', type: 8, sname: 'removeAt', returnType: Object, params: [ss.Int32] }, { name: 'Count', type: 16, returnType: ss.Int32, getter: { name: 'get_Count', type: 8, sname: 'get_count', returnType: ss.Int32, params: [] } }, { name: 'Item', type: 16, returnType: Object, params: [ss.Int32], getter: { name: 'get_Item', type: 8, sname: 'get_item', returnType: Object, params: [ss.Int32] }, setter: { name: 'set_Item', type: 8, sname: 'set_item', returnType: Object, params: [ss.Int32, Object] } }] });
	ss.setMetadata($Franca_StringHelper, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: '_bmpCodePointStrings', isStatic: true, type: 4, returnType: ss.makeGenericType(ss.Dictionary$2, [ss.Int32, String]), sname: '$_bmpCodePointStrings' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_fromCodePointBuilder', isStatic: true, type: 4, returnType: ss.StringBuilder, sname: '$_fromCodePointBuilder' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_surrogatePairArray', isStatic: true, type: 4, returnType: Array, sname: '$_surrogatePairArray' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: 'cpVarArgs', isStatic: true, type: 4, returnType: ss.makeGenericType(ss.Dictionary$2, [ss.Int32, Array]), sname: '$cpVarArgs' }] });
	ss.setMetadata($Franca_TextAlign, { attr: [new $Franca_Gui_Documentation_GuiSupportAttribute(), new $Franca_ParsableAttribute()] });
	ss.setMetadata($Franca_VAlign, { attr: [new $Franca_Gui_Documentation_GuiSupportAttribute()] });
	ss.setMetadata($Franca_Vector2, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_Serialization_Streaming_IJsonReader], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [Number], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [Number, Number], sname: '$ctor3' }, { name: 'Abs', type: 8, sname: 'abs', returnType: $Franca_Vector2, params: [] }, { name: 'Abs', isStatic: true, type: 8, sname: 'abs', returnType: $Franca_Vector2, params: [$Franca_Vector2] }, { name: 'Add', isStatic: true, type: 8, sname: 'add', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'Barycentric', isStatic: true, type: 8, sname: 'barycentric', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2, $Franca_Vector2, Number, Number] }, { name: 'CatmullRom', isStatic: true, type: 8, sname: 'catmullRom', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2, $Franca_Vector2, $Franca_Vector2, Number] }, { name: 'Ceiling', type: 8, sname: 'ceiling', returnType: $Franca_Vector2, params: [] }, { name: 'Ceiling', isStatic: true, type: 8, sname: 'ceiling', returnType: $Franca_Vector2, params: [$Franca_Vector2] }, { name: 'Clamp', isStatic: true, type: 8, sname: 'clamp', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2, $Franca_Vector2] }, { name: 'Distance', isStatic: true, type: 8, sname: 'distance', returnType: Number, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'DistanceSquared', isStatic: true, type: 8, sname: 'distanceSquared', returnType: Number, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'Divide', isStatic: true, type: 8, sname: 'divide', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'Divide', isStatic: true, type: 8, sname: 'divide$1', returnType: $Franca_Vector2, params: [$Franca_Vector2, Number] }, { name: 'Dot', isStatic: true, type: 8, sname: 'dot', returnType: Number, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'Equals', type: 8, sname: 'equalsT', returnType: Boolean, params: [$Franca_Vector2] }, { name: 'Equals', type: 8, sname: 'equals', returnType: Boolean, params: [Object] }, { name: 'Floor', type: 8, sname: 'floor', returnType: $Franca_Vector2, params: [] }, { name: 'Floor', isStatic: true, type: 8, sname: 'floor', returnType: $Franca_Vector2, params: [$Franca_Vector2] }, { name: 'FromJson', type: 8, sname: 'fromJson', returnType: $Franca_Vector2, params: [$Franca_JsonValue] }, { name: 'GetHashCode', type: 8, sname: 'getHashCode', returnType: ss.Int32, params: [] }, { name: 'GetRotation', type: 8, sname: 'getRotation', returnType: Number, params: [$Franca_RotationOrigin] }, { name: 'Hermite', isStatic: true, type: 8, sname: 'hermite', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2, $Franca_Vector2, $Franca_Vector2, Number] }, { name: 'Length', type: 8, sname: 'length', returnType: Number, params: [] }, { name: 'LengthSquared', type: 8, sname: 'lengthSquared', returnType: Number, params: [] }, { name: 'Lerp', isStatic: true, type: 8, sname: 'lerp', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2, Number] }, { name: 'Max', isStatic: true, type: 8, sname: 'max', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'Min', isStatic: true, type: 8, sname: 'min', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'Multiply', isStatic: true, type: 8, sname: 'multiply', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'Multiply', isStatic: true, type: 8, sname: 'multiply$1', returnType: $Franca_Vector2, params: [$Franca_Vector2, Number] }, { name: 'Negate', isStatic: true, type: 8, sname: 'negate', returnType: $Franca_Vector2, params: [$Franca_Vector2] }, { name: 'Normalize', type: 8, sname: 'normalize', returnType: $Franca_Vector2, params: [] }, { name: 'Normalize', isStatic: true, type: 8, sname: 'normalize', returnType: $Franca_Vector2, params: [$Franca_Vector2] }, { name: 'Pow', isStatic: true, type: 8, sname: 'pow', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'Random', isStatic: true, type: 8, sname: 'random', returnType: $Franca_Vector2, params: [ss.Random] }, { name: 'Reflect', isStatic: true, type: 8, sname: 'reflect', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'Rotate', type: 8, sname: 'rotate', returnType: $Franca_Vector2, params: [Number] }, { name: 'Round', type: 8, sname: 'round', returnType: $Franca_Vector2, params: [] }, { name: 'Round', isStatic: true, type: 8, sname: 'round', returnType: $Franca_Vector2, params: [$Franca_Vector2] }, { name: 'SmoothStep', isStatic: true, type: 8, sname: 'smoothStep', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2, Number] }, { name: 'Subtract', isStatic: true, type: 8, sname: 'subtract', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'ToJson', type: 8, sname: 'toJson', returnType: $Franca_JsonValue, params: [] }, { name: 'ToString', type: 8, sname: 'toString', returnType: String, params: [] }, { name: 'Transform', isStatic: true, type: 8, sname: 'transform', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Matrix4] }, { name: 'Transform', isStatic: true, type: 8, sname: 'transform$1', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Quaternion] }, { name: 'TransformNormal', isStatic: true, type: 8, sname: 'transformNormal', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Matrix4] }, { name: 'WriteJson', type: 8, sname: 'writeJson', returnType: Object, params: [$Franca_Serialization_Streaming_IJsonWriter] }, { name: 'op_Addition', isStatic: true, type: 8, sname: 'op_Addition', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'op_Addition', isStatic: true, type: 8, sname: 'op_Addition$1', returnType: $Franca_Vector2, params: [$Franca_Vector2, Number] }, { name: 'op_Division', isStatic: true, type: 8, sname: 'op_Division', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'op_Division', isStatic: true, type: 8, sname: 'op_Division$1', returnType: $Franca_Vector2, params: [$Franca_Vector2, Number] }, { name: 'op_Equality', isStatic: true, type: 8, sname: 'op_Equality', returnType: Boolean, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit', returnType: $Franca_Vector2, params: [$Franca_Point] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit$1', returnType: $Franca_Vector2, params: [$Franca_PointF] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit$2', returnType: $Franca_Point, params: [$Franca_Vector2] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit$3', returnType: $Franca_PointF, params: [$Franca_Vector2] }, { name: 'op_GreaterThan', isStatic: true, type: 8, sname: 'op_GreaterThan', returnType: Boolean, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'op_GreaterThanOrEqual', isStatic: true, type: 8, sname: 'op_GreaterThanOrEqual', returnType: Boolean, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'op_Inequality', isStatic: true, type: 8, sname: 'op_Inequality', returnType: Boolean, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'op_LessThan', isStatic: true, type: 8, sname: 'op_LessThan', returnType: Boolean, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'op_LessThanOrEqual', isStatic: true, type: 8, sname: 'op_LessThanOrEqual', returnType: Boolean, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$1', returnType: $Franca_Vector2, params: [$Franca_Vector2, Number] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$2', returnType: $Franca_Vector2, params: [Number, $Franca_Vector2] }, { name: 'op_Subtraction', isStatic: true, type: 8, sname: 'op_Subtraction', returnType: $Franca_Vector2, params: [$Franca_Vector2, $Franca_Vector2] }, { name: 'op_Subtraction', isStatic: true, type: 8, sname: 'op_Subtraction$1', returnType: $Franca_Vector2, params: [$Franca_Vector2, Number] }, { name: 'op_UnaryNegation', isStatic: true, type: 8, sname: 'op_UnaryNegation', returnType: $Franca_Vector2, params: [$Franca_Vector2] }, { name: 'One', isStatic: true, type: 4, returnType: $Franca_Vector2, sname: 'one' }, { name: 'UnitX', isStatic: true, type: 4, returnType: $Franca_Vector2, sname: 'unitX' }, { name: 'UnitY', isStatic: true, type: 4, returnType: $Franca_Vector2, sname: 'unitY' }, { name: 'X', type: 4, returnType: Number, sname: 'x' }, { name: 'Y', type: 4, returnType: Number, sname: 'y' }, { name: 'Zero', isStatic: true, type: 4, returnType: $Franca_Vector2, sname: 'zero' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_seedGenerator', isStatic: true, type: 4, returnType: $Franca_RNG, sname: '$_seedGenerator' }] });
	ss.setMetadata($Franca_Vector3, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_Serialization_Streaming_IJsonReader], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [Number], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [$Franca_Vector2, Number], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [Number, Number, Number], sname: '$ctor4' }, { name: 'Abs', type: 8, sname: 'abs', returnType: $Franca_Vector3, params: [] }, { name: 'Abs', isStatic: true, type: 8, sname: 'abs', returnType: $Franca_Vector3, params: [$Franca_Vector3] }, { name: 'Add', isStatic: true, type: 8, sname: 'add', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'Barycentric', isStatic: true, type: 8, sname: 'barycentric', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3, $Franca_Vector3, Number, Number] }, { name: 'CatmullRom', isStatic: true, type: 8, sname: 'catmullRom', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3, $Franca_Vector3, $Franca_Vector3, Number] }, { name: 'Ceiling', type: 8, sname: 'ceiling', returnType: $Franca_Vector3, params: [] }, { name: 'Ceiling', isStatic: true, type: 8, sname: 'ceiling', returnType: $Franca_Vector3, params: [$Franca_Vector3] }, { name: 'Clamp', isStatic: true, type: 8, sname: 'clamp', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3, $Franca_Vector3] }, { name: 'Cross', isStatic: true, type: 8, sname: 'cross', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'Distance', isStatic: true, type: 8, sname: 'distance', returnType: Number, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'DistanceSquared', isStatic: true, type: 8, sname: 'distanceSquared', returnType: Number, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'Divide', isStatic: true, type: 8, sname: 'divide', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'Divide', isStatic: true, type: 8, sname: 'divide$1', returnType: $Franca_Vector3, params: [$Franca_Vector3, Number] }, { name: 'Dot', isStatic: true, type: 8, sname: 'dot', returnType: Number, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'Equals', type: 8, sname: 'equalsT', returnType: Boolean, params: [$Franca_Vector3] }, { name: 'Equals', type: 8, sname: 'equals', returnType: Boolean, params: [Object] }, { name: 'Floor', type: 8, sname: 'floor', returnType: $Franca_Vector3, params: [] }, { name: 'Floor', isStatic: true, type: 8, sname: 'floor', returnType: $Franca_Vector3, params: [$Franca_Vector3] }, { name: 'FromJson', type: 8, sname: 'fromJson', returnType: $Franca_Vector3, params: [$Franca_JsonValue] }, { name: 'GetHashCode', type: 8, sname: 'getHashCode', returnType: ss.Int32, params: [] }, { name: 'Hermite', isStatic: true, type: 8, sname: 'hermite', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3, $Franca_Vector3, $Franca_Vector3, Number] }, { name: 'Length', type: 8, sname: 'length', returnType: Number, params: [] }, { name: 'LengthSquared', type: 8, sname: 'lengthSquared', returnType: Number, params: [] }, { name: 'Lerp', isStatic: true, type: 8, sname: 'lerp', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3, Number] }, { name: 'Max', isStatic: true, type: 8, sname: 'max', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'Min', isStatic: true, type: 8, sname: 'min', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'Multiply', isStatic: true, type: 8, sname: 'multiply', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'Multiply', isStatic: true, type: 8, sname: 'multiply$1', returnType: $Franca_Vector3, params: [$Franca_Vector3, Number] }, { name: 'Negate', isStatic: true, type: 8, sname: 'negate', returnType: $Franca_Vector3, params: [$Franca_Vector3] }, { name: 'Normalize', type: 8, sname: 'normalize', returnType: $Franca_Vector3, params: [] }, { name: 'Normalize', isStatic: true, type: 8, sname: 'normalize', returnType: $Franca_Vector3, params: [$Franca_Vector3] }, { name: 'Pow', isStatic: true, type: 8, sname: 'pow', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'Random', isStatic: true, type: 8, sname: 'random', returnType: $Franca_Vector3, params: [ss.Random] }, { name: 'Reflect', isStatic: true, type: 8, sname: 'reflect', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'Round', type: 8, sname: 'round', returnType: $Franca_Vector3, params: [] }, { name: 'Round', isStatic: true, type: 8, sname: 'round', returnType: $Franca_Vector3, params: [$Franca_Vector3] }, { name: 'SmoothStep', isStatic: true, type: 8, sname: 'smoothStep', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3, Number] }, { name: 'Subtract', isStatic: true, type: 8, sname: 'subtract', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'ToJson', type: 8, sname: 'toJson', returnType: $Franca_JsonValue, params: [] }, { name: 'ToString', type: 8, sname: 'toString', returnType: String, params: [] }, { name: 'WriteJson', type: 8, sname: 'writeJson', returnType: Object, params: [$Franca_Serialization_Streaming_IJsonWriter] }, { name: 'op_Addition', isStatic: true, type: 8, sname: 'op_Addition', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'op_Addition', isStatic: true, type: 8, sname: 'op_Addition$1', returnType: $Franca_Vector3, params: [$Franca_Vector3, Number] }, { name: 'op_Division', isStatic: true, type: 8, sname: 'op_Division', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'op_Division', isStatic: true, type: 8, sname: 'op_Division$1', returnType: $Franca_Vector3, params: [$Franca_Vector3, Number] }, { name: 'op_Equality', isStatic: true, type: 8, sname: 'op_Equality', returnType: Boolean, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'op_GreaterThan', isStatic: true, type: 8, sname: 'op_GreaterThan', returnType: Boolean, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'op_GreaterThanOrEqual', isStatic: true, type: 8, sname: 'op_GreaterThanOrEqual', returnType: Boolean, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'op_Inequality', isStatic: true, type: 8, sname: 'op_Inequality', returnType: Boolean, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'op_LessThan', isStatic: true, type: 8, sname: 'op_LessThan', returnType: Boolean, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'op_LessThanOrEqual', isStatic: true, type: 8, sname: 'op_LessThanOrEqual', returnType: Boolean, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$1', returnType: $Franca_Vector3, params: [$Franca_Vector3, Number] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$2', returnType: $Franca_Vector3, params: [Number, $Franca_Vector3] }, { name: 'op_Subtraction', isStatic: true, type: 8, sname: 'op_Subtraction', returnType: $Franca_Vector3, params: [$Franca_Vector3, $Franca_Vector3] }, { name: 'op_Subtraction', isStatic: true, type: 8, sname: 'op_Subtraction$1', returnType: $Franca_Vector3, params: [$Franca_Vector3, Number] }, { name: 'op_UnaryNegation', isStatic: true, type: 8, sname: 'op_UnaryNegation', returnType: $Franca_Vector3, params: [$Franca_Vector3] }, { name: 'Backward', isStatic: true, type: 4, returnType: $Franca_Vector3, sname: 'backward' }, { name: 'Down', isStatic: true, type: 4, returnType: $Franca_Vector3, sname: 'down' }, { name: 'Forward', isStatic: true, type: 4, returnType: $Franca_Vector3, sname: 'forward' }, { name: 'Left', isStatic: true, type: 4, returnType: $Franca_Vector3, sname: 'left' }, { name: 'One', isStatic: true, type: 4, returnType: $Franca_Vector3, sname: 'one' }, { name: 'Right', isStatic: true, type: 4, returnType: $Franca_Vector3, sname: 'right' }, { name: 'UnitX', isStatic: true, type: 4, returnType: $Franca_Vector3, sname: 'unitX' }, { name: 'UnitY', isStatic: true, type: 4, returnType: $Franca_Vector3, sname: 'unitY' }, { name: 'UnitZ', isStatic: true, type: 4, returnType: $Franca_Vector3, sname: 'unitZ' }, { name: 'Up', isStatic: true, type: 4, returnType: $Franca_Vector3, sname: 'up' }, { name: 'X', type: 4, returnType: Number, sname: 'x' }, { name: 'Y', type: 4, returnType: Number, sname: 'y' }, { name: 'Z', type: 4, returnType: Number, sname: 'z' }, { name: 'Zero', isStatic: true, type: 4, returnType: $Franca_Vector3, sname: 'zero' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_seedGenerator', isStatic: true, type: 4, returnType: $Franca_RNG, sname: '$_seedGenerator' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_toStringBuilder', isStatic: true, type: 4, returnType: ss.StringBuilder, sname: '$_toStringBuilder' }] });
	ss.setMetadata($Franca_Vector4, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_Serialization_Streaming_IJsonReader], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [Number], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [$Franca_Vector3, Number], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [$Franca_Vector2, Number, Number], sname: '$ctor4' }, { name: '.ctor', type: 1, params: [Number, Number, Number, Number], sname: '$ctor5' }, { name: 'Abs', type: 8, sname: 'abs', returnType: $Franca_Vector4, params: [] }, { name: 'Abs', isStatic: true, type: 8, sname: 'abs', returnType: $Franca_Vector4, params: [$Franca_Vector4] }, { name: 'Add', isStatic: true, type: 8, sname: 'add', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'Ceiling', type: 8, sname: 'ceiling', returnType: $Franca_Vector4, params: [] }, { name: 'Ceiling', isStatic: true, type: 8, sname: 'ceiling', returnType: $Franca_Vector4, params: [$Franca_Vector4] }, { name: 'Clamp', isStatic: true, type: 8, sname: 'clamp', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4, $Franca_Vector4] }, { name: 'Distance', isStatic: true, type: 8, sname: 'distance', returnType: Number, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'DistanceSquared', isStatic: true, type: 8, sname: 'distanceSquared', returnType: Number, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'Divide', isStatic: true, type: 8, sname: 'divide', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'Divide', isStatic: true, type: 8, sname: 'divide$1', returnType: $Franca_Vector4, params: [$Franca_Vector4, Number] }, { name: 'Dot', isStatic: true, type: 8, sname: 'dot', returnType: Number, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'Equals', type: 8, sname: 'equalsT', returnType: Boolean, params: [$Franca_Vector4] }, { name: 'Equals', type: 8, sname: 'equals', returnType: Boolean, params: [Object] }, { name: 'Floor', type: 8, sname: 'floor', returnType: $Franca_Vector4, params: [] }, { name: 'Floor', isStatic: true, type: 8, sname: 'floor', returnType: $Franca_Vector4, params: [$Franca_Vector4] }, { name: 'FromJson', type: 8, sname: 'fromJson', returnType: $Franca_Vector4, params: [$Franca_JsonValue] }, { name: 'GetHashCode', type: 8, sname: 'getHashCode', returnType: ss.Int32, params: [] }, { name: 'Length', type: 8, sname: 'length', returnType: Number, params: [] }, { name: 'LengthSquared', type: 8, sname: 'lengthSquared', returnType: Number, params: [] }, { name: 'Lerp', isStatic: true, type: 8, sname: 'lerp', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4, Number] }, { name: 'Max', isStatic: true, type: 8, sname: 'max', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'Min', isStatic: true, type: 8, sname: 'min', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'Multiply', isStatic: true, type: 8, sname: 'multiply', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'Multiply', isStatic: true, type: 8, sname: 'multiply$1', returnType: $Franca_Vector4, params: [$Franca_Vector4, Number] }, { name: 'Negate', isStatic: true, type: 8, sname: 'negate', returnType: $Franca_Vector4, params: [$Franca_Vector4] }, { name: 'Normalize', type: 8, sname: 'normalize', returnType: $Franca_Vector4, params: [] }, { name: 'Normalize', isStatic: true, type: 8, sname: 'normalize', returnType: $Franca_Vector4, params: [$Franca_Vector4] }, { name: 'Pow', isStatic: true, type: 8, sname: 'pow', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'Random', isStatic: true, type: 8, sname: 'random', returnType: $Franca_Vector4, params: [ss.Random] }, { name: 'Round', type: 8, sname: 'round', returnType: $Franca_Vector4, params: [] }, { name: 'Round', isStatic: true, type: 8, sname: 'round', returnType: $Franca_Vector4, params: [$Franca_Vector4] }, { name: 'Subtract', isStatic: true, type: 8, sname: 'subtract', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'ToJson', type: 8, sname: 'toJson', returnType: $Franca_JsonValue, params: [] }, { name: 'ToString', type: 8, sname: 'toString', returnType: String, params: [] }, { name: 'WriteJson', type: 8, sname: 'writeJson', returnType: Object, params: [$Franca_Serialization_Streaming_IJsonWriter] }, { name: 'op_Addition', isStatic: true, type: 8, sname: 'op_Addition', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'op_Addition', isStatic: true, type: 8, sname: 'op_Addition$1', returnType: $Franca_Vector4, params: [$Franca_Vector4, Number] }, { name: 'op_Division', isStatic: true, type: 8, sname: 'op_Division', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'op_Division', isStatic: true, type: 8, sname: 'op_Division$1', returnType: $Franca_Vector4, params: [$Franca_Vector4, Number] }, { name: 'op_Equality', isStatic: true, type: 8, sname: 'op_Equality', returnType: Boolean, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'op_GreaterThan', isStatic: true, type: 8, sname: 'op_GreaterThan', returnType: Boolean, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'op_GreaterThanOrEqual', isStatic: true, type: 8, sname: 'op_GreaterThanOrEqual', returnType: Boolean, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'op_Inequality', isStatic: true, type: 8, sname: 'op_Inequality', returnType: Boolean, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'op_LessThan', isStatic: true, type: 8, sname: 'op_LessThan', returnType: Boolean, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'op_LessThanOrEqual', isStatic: true, type: 8, sname: 'op_LessThanOrEqual', returnType: Boolean, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$1', returnType: $Franca_Vector4, params: [$Franca_Vector4, Number] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$2', returnType: $Franca_Vector4, params: [Number, $Franca_Vector4] }, { name: 'op_Subtraction', isStatic: true, type: 8, sname: 'op_Subtraction', returnType: $Franca_Vector4, params: [$Franca_Vector4, $Franca_Vector4] }, { name: 'op_Subtraction', isStatic: true, type: 8, sname: 'op_Subtraction$1', returnType: $Franca_Vector4, params: [$Franca_Vector4, Number] }, { name: 'op_UnaryNegation', isStatic: true, type: 8, sname: 'op_UnaryNegation', returnType: $Franca_Vector4, params: [$Franca_Vector4] }, { name: 'One', isStatic: true, type: 4, returnType: $Franca_Vector4, sname: 'one' }, { name: 'UnitW', isStatic: true, type: 4, returnType: $Franca_Vector4, sname: 'unitW' }, { name: 'UnitX', isStatic: true, type: 4, returnType: $Franca_Vector4, sname: 'unitX' }, { name: 'UnitY', isStatic: true, type: 4, returnType: $Franca_Vector4, sname: 'unitY' }, { name: 'UnitZ', isStatic: true, type: 4, returnType: $Franca_Vector4, sname: 'unitZ' }, { name: 'W', type: 4, returnType: Number, sname: 'w' }, { name: 'X', type: 4, returnType: Number, sname: 'x' }, { name: 'Y', type: 4, returnType: Number, sname: 'y' }, { name: 'Z', type: 4, returnType: Number, sname: 'z' }, { name: 'Zero', isStatic: true, type: 4, returnType: $Franca_Vector4, sname: 'zero' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_seedGenerator', isStatic: true, type: 4, returnType: $Franca_RNG, sname: '$_seedGenerator' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_toStringBuilder', isStatic: true, type: 4, returnType: ss.StringBuilder, sname: '$_toStringBuilder' }] });
	ss.setMetadata($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: 'bTags', isStatic: true, type: 4, returnType: Array, sname: '$bTags' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: 'colors', isStatic: true, type: 4, returnType: Array, sname: '$colors' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: 'emTags', isStatic: true, type: 4, returnType: Array, sname: '$emTags' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: 'fontTags', isStatic: true, type: 4, returnType: Array, sname: '$fontTags' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: 'iTags', isStatic: true, type: 4, returnType: Array, sname: '$iTags' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: 'sizes', isStatic: true, type: 4, returnType: Array, sname: '$sizes' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: 'spanTags', isStatic: true, type: 4, returnType: Array, sname: '$spanTags' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: 'strongTags', isStatic: true, type: 4, returnType: Array, sname: '$strongTags' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: 'tags', isStatic: true, type: 4, returnType: Array, sname: '$tags' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: 'uTags', isStatic: true, type: 4, returnType: Array, sname: '$uTags' }] });
	ss.setMetadata($Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$TagType, { enumFlags: true });
	ss.setMetadata($Franca_Gui_Documentation_GenerateDocsAttribute, { attrAllowMultiple: true });
	ss.setMetadata($Franca_Gui_Documentation_GuiSupportAttribute, { attrNoInherit: true });
	ss.setMetadata($Franca_Localization_LocalizableAttribute, { attrNoInherit: true });
	ss.setMetadata($Franca_Serialization_JsonHexDouble, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: '_bytes', isStatic: true, type: 4, returnType: $Franca_BinaryData, sname: '$_bytes' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_hex', isStatic: true, type: 4, returnType: ss.StringBuilder, sname: '$_hex' }] });
	ss.setMetadata($Franca_Serialization_JsonHexFloat, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: '_bytes', isStatic: true, type: 4, returnType: $Franca_BinaryData, sname: '$_bytes' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: '_hex', isStatic: true, type: 4, returnType: ss.StringBuilder, sname: '$_hex' }] });
	ss.setMetadata($Franca_Serialization_Streaming_JsonStringWriter, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: 'indentStrings', isStatic: true, type: 4, returnType: ss.makeGenericType(ss.Dictionary$2, [ss.Int32, String]), sname: '$indentStrings' }] });
	ss.setMetadata($Franca_Text_Base32, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: '_encodeBuilder', isStatic: true, type: 4, returnType: ss.StringBuilder, sname: '$_encodeBuilder' }] });
	ss.setMetadata($Franca_Text_Markup, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: '_strBuilder', isStatic: true, type: 4, returnType: ss.StringBuilder, sname: '$_strBuilder' }] });
	ss.setMetadata($Franca_Text_MarkupType, { enumFlags: true });
	ss.setMetadata($Franca_Text_MD5, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: '_hexBuilder', isStatic: true, type: 4, returnType: ss.StringBuilder, sname: '$_hexBuilder' }] });
	ss.setMetadata($Franca_Text_RegexFlags, { enumFlags: true });
	ss.setMetadata($System_IEnumerableExtensions, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: 'cacheInUse', isStatic: true, type: 4, returnType: ss.makeGenericType($System_Collections_Generic_HashSet$1, [Function]), sname: '$cacheInUse' }, { attr: [$System_ThreadStaticAttribute.$ctor()], name: 'cachedArrays', isStatic: true, type: 4, returnType: ss.makeGenericType(ss.Dictionary$2, [Function, Object]), sname: '$cachedArrays' }] });
	ss.setMetadata($System_StringEscapeStyle, { enumFlags: true });
	ss.setMetadata($System_StringExtensions, { members: [{ attr: [$System_ThreadStaticAttribute.$ctor()], name: '_stringCopyBuilder', isStatic: true, type: 4, returnType: ss.StringBuilder, sname: '$_stringCopyBuilder' }] });
	ss.setMetadata($System_ThreadStaticAttribute, { attrNoInherit: true });
	(function() {
		$Coroutines_Coroutine.$_running = null;
	})();
	(function() {
		$System_StringExtensions.$_stringCopyBuilder = null;
	})();
	(function() {
		$Franca_Platform.$_provider = null;
		$Franca_Platform.$initialized = false;
		$Franca_Platform.$stopwatch = null;
		$Franca_Platform.$_combinePathsBuilder = null;
		$Franca_Platform.$pathSeparator = null;
		$Franca_Platform.$type = $Franca_Platform.$getPlatformType();
		$Franca_Platform.$os = $Franca_Platform.get_$provider().$getOS();
		$Franca_Platform.init();
	})();
	(function() {
		$Franca_Benchmark.$watch = new ss.Stopwatch();
	})();
	(function() {
		$System_SystemException.$result = -2146233087;
	})();
	(function() {
		$System_ArithmeticException.$result = -2147024362;
	})();
	(function() {
		$System_OverflowException.$result = -2146233066;
	})();
	(function() {
		$Franca_StringHelper.$caseInsensitiveComparer = new $Franca_$StringHelper$CaseInsensitiveStringComparer();
		$Franca_StringHelper.$newLines = ['\r\n', '\r', '\n'];
		$Franca_StringHelper.highSurrogateStart = 55296;
		$Franca_StringHelper.highSurrogateEnd = 56319;
		$Franca_StringHelper.lowSurrogateStart = 56320;
		$Franca_StringHelper.lowSurrogateEnd = 57343;
		$Franca_StringHelper.maxUnicodeCodePoint = 1114111;
		$Franca_StringHelper.$fromCodePointBufferSize = 16384;
		$Franca_StringHelper.$_bmpCodePointStrings = null;
		$Franca_StringHelper.$commonCodePointsUpper = 8192;
		$Franca_StringHelper.$commonCodePointsAsiaLower = 12288;
		$Franca_StringHelper.$commonCodePointsAsiaUpper = 19968;
		$Franca_StringHelper.$_surrogatePairArray = null;
		$Franca_StringHelper.$cpVarArgs = null;
		$Franca_StringHelper.$units = [];
		$Franca_StringHelper.$_fromCodePointBuilder = null;
	})();
	(function() {
		$System_Buffer.$negativeValueErrorText = 'Non-negative number required.';
		$System_Buffer.$outOfRangeErrorText = 'Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.';
	})();
	(function() {
		$Franca_BinConverter.$isLittleEndian = false;
		$Franca_BinConverter.$dataConverter = new $Franca_BinaryData.$ctor5(32);
		$Franca_BinConverter.$isLittleEndian = JsEndian.isLittleEndian();
	})();
	(function() {
		$Franca_Fix53.fractionBits = 21;
		$Franca_Fix53.scalar = 2097152;
		$Franca_Fix53.maxRawValue = 9.00719925474099E+15;
		$Franca_Fix53.minRawValue = -9.00719925474099E+15;
		$Franca_Fix53.maxIntegerRawValue = 9.00719925264384E+15;
		$Franca_Fix53.minIntegerRawValue = -9.00719925264384E+15;
		$Franca_Fix53.maxValue = new $Franca_Fix53.$ctor3($Franca_Fix53.maxRawValue, true);
		$Franca_Fix53.minValue = new $Franca_Fix53.$ctor3($Franca_Fix53.minRawValue, true);
		$Franca_Fix53.maxIntegerValue = new $Franca_Fix53.$ctor3($Franca_Fix53.maxIntegerRawValue, true);
		$Franca_Fix53.minIntegerValue = new $Franca_Fix53.$ctor3($Franca_Fix53.minIntegerRawValue, true);
		$Franca_Fix53.epsilon = new $Franca_Fix53.$ctor3(1, true);
		$Franca_Fix53.one = new $Franca_Fix53.$ctor3($Franca_Fix53.scalar, true);
		$Franca_Fix53.zero = new $Franca_Fix53.$ctor3(0, true);
		$Franca_Fix53.minusOne = new $Franca_Fix53.$ctor3(-2097152, true);
		$Franca_Fix53.e = new $Franca_Fix53.$ctor3(2.71828182845905, false);
		$Franca_Fix53.PI = new $Franca_Fix53.$ctor3(3.14159265358979, false);
		$Franca_Fix53.tau = new $Franca_Fix53.$ctor3(6.28318530717959, false);
		$Franca_Fix53.int32Converter = new Int32Array(1);
		$Franca_Fix53.uint32Converter = new Uint32Array(1);
		$Franca_Fix53.int16Converter = new Int16Array(1);
		$Franca_Fix53.uint16Converter = new Uint16Array(1);
		$Franca_Fix53.int8Converter = new Int8Array(1);
		$Franca_Fix53.uint8Converter = new Uint8Array(1);
		$Franca_Fix53.$throwExceptions = false;
		$Franca_Fix53.$failedTests = null;
	})();
	(function() {
		$Franca_Calc.PI = 3.14159274101257;
		$Franca_Calc.tau = 6.28318548202515;
		$Franca_Calc.maxSafeIntFloat32 = 16777216;
		$Franca_Calc.maxSafeIntFloat64 = 9.00719925474099E+15;
		$Franca_Calc.$isLittleEndian = false;
		$Franca_Calc.$_hexCharValues = null;
		$Franca_Calc.$doubleRegex = new $Franca_Text_Regex('^\\s*[+-]?\\d+(\\.\\d*)?([eE][+-]?\\d+)?\\s*$', 0);
		$Franca_Calc.$intRegex = new $Franca_Text_Regex('^\\s*[+-]?\\d+\\s*$', 0);
		$Franca_Calc.$fix53FractionMask = 2097151;
		$Franca_Calc.$fix53FloorMask = -2097152;
		$Franca_Calc.$fix53FractionMaskHalved = 1048575;
		$Franca_Calc.$isLittleEndian = JsEndian.isLittleEndian();
	})();
	(function() {
		$Franca_EnumHelper.$randomRNG = null;
	})();
	(function() {
		$Franca_JsonValue.truncateDebugView = true;
		$Franca_JsonValue.$maxJsonTypeVal = Enumerable.from($Franca_EnumHelper.getValues($Franca_JsonType).call(null)).select(function(e) {
			return e;
		}).max();
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [Function, Function]))();
		$t1.add(Number, function(v) {
			return v;
		});
		$t1.add(ss.makeGenericType(ss.Nullable$1, [Number]), function(v1) {
			var c = ss.cast(v1, Number);
			return (ss.isValue(c) ? ss.unbox(c) : null);
		});
		$t1.add(ss.Int32, function(v2) {
			return ss.unbox(ss.cast(v2, ss.Int32));
		});
		$t1.add(ss.makeGenericType(ss.Nullable$1, [ss.Int32]), function(v3) {
			var c1 = ss.cast(v3, ss.Int32);
			return (ss.isValue(c1) ? ss.unbox(c1) : null);
		});
		$t1.add(Boolean, function(v4) {
			return v4;
		});
		$t1.add(ss.makeGenericType(ss.Nullable$1, [Boolean]), function(v5) {
			var c2 = ss.cast(v5, Boolean);
			return (ss.isValue(c2) ? ss.unbox(c2) : null);
		});
		$t1.add(String, function(v6) {
			return v6;
		});
		$t1.add($Franca_Fix53, function(v7) {
			return $Franca_Fix53.cast_Double(ss.unbox(ss.cast(v7, $Franca_Fix53)));
		});
		$t1.add(ss.makeGenericType(ss.Nullable$1, [$Franca_Fix53]), function(v8) {
			var c3 = ss.cast(v8, $Franca_Fix53);
			return (ss.isValue(c3) ? $Franca_Fix53.cast_Double(ss.unbox(c3)) : null);
		});
		$t1.add(ss.Enum, function(v9) {
			var c4 = ss.cast(v9, ss.Enum);
			return (ss.referenceEquals(c4, null) ? null : $System_EnumExtensions.toInt32(c4));
		});
		$Franca_JsonValue.conversionMap = $t1;
	})();
	(function() {
		$System_UnauthorizedAccessException.$result = -2146233088;
	})();
	(function() {
		$System_IO_Stream.null$1 = new $System_IO_$NullStream();
	})();
	(function() {
		$System_IO_BinaryWriter.null$1 = new $System_IO_BinaryWriter();
	})();
	(function() {
		$Franca_BinDataStreamReader.$_readTempBuffer = null;
	})();
	(function() {
		$Franca_BinDataStreamWriter.$_tempBuffer = null;
	})();
	(function() {
		$Franca_Vector3.$zero = new $Franca_Vector3.$ctor4(0, 0, 0);
		$Franca_Vector3.$one = new $Franca_Vector3.$ctor4(1, 1, 1);
		$Franca_Vector3.$unitX = new $Franca_Vector3.$ctor4(1, 0, 0);
		$Franca_Vector3.$unitY = new $Franca_Vector3.$ctor4(0, 1, 0);
		$Franca_Vector3.$unitZ = new $Franca_Vector3.$ctor4(0, 0, 1);
		$Franca_Vector3.$up = new $Franca_Vector3.$ctor4(0, 1, 0);
		$Franca_Vector3.$down = new $Franca_Vector3.$ctor4(0, -1, 0);
		$Franca_Vector3.$right = new $Franca_Vector3.$ctor4(1, 0, 0);
		$Franca_Vector3.$left = new $Franca_Vector3.$ctor4(-1, 0, 0);
		$Franca_Vector3.$forward = new $Franca_Vector3.$ctor4(0, 0, -1);
		$Franca_Vector3.$backward = new $Franca_Vector3.$ctor4(0, 0, 1);
		$Franca_Vector3.$_seedGenerator = null;
		$Franca_Vector3.zero = new $Franca_Vector3.$ctor4(0, 0, 0);
		$Franca_Vector3.one = new $Franca_Vector3.$ctor4(1, 1, 1);
		$Franca_Vector3.unitX = new $Franca_Vector3.$ctor4(1, 0, 0);
		$Franca_Vector3.unitY = new $Franca_Vector3.$ctor4(0, 1, 0);
		$Franca_Vector3.unitZ = new $Franca_Vector3.$ctor4(0, 0, 1);
		$Franca_Vector3.up = new $Franca_Vector3.$ctor4(0, 1, 0);
		$Franca_Vector3.down = new $Franca_Vector3.$ctor4(0, -1, 0);
		$Franca_Vector3.right = new $Franca_Vector3.$ctor4(1, 0, 0);
		$Franca_Vector3.left = new $Franca_Vector3.$ctor4(-1, 0, 0);
		$Franca_Vector3.forward = new $Franca_Vector3.$ctor4(0, 0, -1);
		$Franca_Vector3.backward = new $Franca_Vector3.$ctor4(0, 0, 1);
		$Franca_Vector3.$_toStringBuilder = null;
	})();
	(function() {
		$Franca_Vector4.$_seedGenerator = null;
		$Franca_Vector4.zero = new $Franca_Vector4.$ctor5(0, 0, 0, 0);
		$Franca_Vector4.one = new $Franca_Vector4.$ctor5(1, 1, 1, 1);
		$Franca_Vector4.unitX = new $Franca_Vector4.$ctor5(1, 0, 0, 0);
		$Franca_Vector4.unitY = new $Franca_Vector4.$ctor5(0, 1, 0, 0);
		$Franca_Vector4.unitZ = new $Franca_Vector4.$ctor5(0, 0, 1, 0);
		$Franca_Vector4.unitW = new $Franca_Vector4.$ctor5(0, 0, 0, 1);
		$Franca_Vector4.$_toStringBuilder = null;
	})();
	(function() {
		$Franca_Color.$_hexBuilder = null;
		$Franca_Color.$_randomizer = null;
		var $t1 = [];
		$t1.push(0);
		$t1.push(4294965488);
		$t1.push(4292340730);
		$t1.push(4294967040);
		$t1.push(4292149119);
		$t1.push(4294967280);
		$t1.push(4292670965);
		$t1.push(4291093759);
		$t1.push(4278190080);
		$t1.push(4291685375);
		$t1.push(4294901760);
		$t1.push(4293012362);
		$t1.push(4280953509);
		$t1.push(4287084766);
		$t1.push(4288716383);
		$t1.push(4278255487);
		$t1.push(4280183250);
		$t1.push(4283465727);
		$t1.push(4293760356);
		$t1.push(4292671743);
		$t1.push(4282127580);
		$t1.push(4294967040);
		$t1.push(4287299584);
		$t1.push(4287335168);
		$t1.push(4278945464);
		$t1.push(4289309097);
		$t1.push(4278215680);
		$t1.push(4285249469);
		$t1.push(4287299723);
		$t1.push(4281297749);
		$t1.push(4278226175);
		$t1.push(4291572377);
		$t1.push(4278190219);
		$t1.push(4286224105);
		$t1.push(4287347855);
		$t1.push(4287315272);
		$t1.push(4283387695);
		$t1.push(4291939840);
		$t1.push(4292018324);
		$t1.push(4287829247);
		$t1.push(4294950656);
		$t1.push(4285098345);
		$t1.push(4294938654);
		$t1.push(4280427186);
		$t1.push(4293982975);
		$t1.push(4280453922);
		$t1.push(4294902015);
		$t1.push(4292664540);
		$t1.push(4294965496);
		$t1.push(4278245375);
		$t1.push(4280329690);
		$t1.push(4286611584);
		$t1.push(4278222848);
		$t1.push(4281335725);
		$t1.push(4293984240);
		$t1.push(4290013695);
		$t1.push(4284243149);
		$t1.push(4286709835);
		$t1.push(4293984255);
		$t1.push(4287424240);
		$t1.push(4294633190);
		$t1.push(4294308095);
		$t1.push(4278254716);
		$t1.push(4291689215);
		$t1.push(4293318829);
		$t1.push(4286611696);
		$t1.push(4294967264);
		$t1.push(4292016890);
		$t1.push(4292072403);
		$t1.push(4287688336);
		$t1.push(4290885375);
		$t1.push(4286226687);
		$t1.push(4289376800);
		$t1.push(4294626951);
		$t1.push(4288252023);
		$t1.push(4292789424);
		$t1.push(4292935679);
		$t1.push(4278255360);
		$t1.push(4281519410);
		$t1.push(4293325050);
		$t1.push(4294902015);
		$t1.push(4278190208);
		$t1.push(4289383782);
		$t1.push(4291624960);
		$t1.push(4292040122);
		$t1.push(4292571283);
		$t1.push(4285641532);
		$t1.push(4293814395);
		$t1.push(4288346624);
		$t1.push(4291613000);
		$t1.push(4286911943);
		$t1.push(4285536537);
		$t1.push(4294639605);
		$t1.push(4292994303);
		$t1.push(4290110719);
		$t1.push(4289584895);
		$t1.push(4286578688);
		$t1.push(4293326333);
		$t1.push(4278222976);
		$t1.push(4280520299);
		$t1.push(4278232575);
		$t1.push(4278207999);
		$t1.push(4292243674);
		$t1.push(4289390830);
		$t1.push(4288215960);
		$t1.push(4293848751);
		$t1.push(4287852763);
		$t1.push(4292210687);
		$t1.push(4290370303);
		$t1.push(4282353101);
		$t1.push(4291543295);
		$t1.push(4292714717);
		$t1.push(4293320880);
		$t1.push(4286578816);
		$t1.push(4278190335);
		$t1.push(4287598524);
		$t1.push(4292962625);
		$t1.push(4279453067);
		$t1.push(4285694202);
		$t1.push(4284523764);
		$t1.push(4283927342);
		$t1.push(4293850623);
		$t1.push(4281160352);
		$t1.push(4290822336);
		$t1.push(4293643911);
		$t1.push(4291648106);
		$t1.push(4287660144);
		$t1.push(4294638335);
		$t1.push(4286578432);
		$t1.push(4290019910);
		$t1.push(4287411410);
		$t1.push(4286611456);
		$t1.push(4292394968);
		$t1.push(4282868735);
		$t1.push(4291878976);
		$t1.push(4293821166);
		$t1.push(4289978101);
		$t1.push(4294967295);
		$t1.push(4294309365);
		$t1.push(4278255615);
		$t1.push(4281519514);
		$Franca_Color.$colorValues = $t1;
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [String, ss.Int32]))();
		$t1.add('transparentblack', 0);
		$t1.add('transparent', 0);
		$t1.add('aliceblue', 4294965488);
		$t1.add('antiquewhite', 4292340730);
		$t1.add('aqua', 4294967040);
		$t1.add('aquamarine', 4292149119);
		$t1.add('azure', 4294967280);
		$t1.add('beige', 4292670965);
		$t1.add('bisque', 4291093759);
		$t1.add('black', 4278190080);
		$t1.add('blanchedalmond', 4291685375);
		$t1.add('blue', 4294901760);
		$t1.add('blueviolet', 4293012362);
		$t1.add('brown', 4280953509);
		$t1.add('burlywood', 4287084766);
		$t1.add('cadetblue', 4288716383);
		$t1.add('chartreuse', 4278255487);
		$t1.add('chocolate', 4280183250);
		$t1.add('coral', 4283465727);
		$t1.add('cornflowerblue', 4293760356);
		$t1.add('cornsilk', 4292671743);
		$t1.add('crimson', 4282127580);
		$t1.add('cyan', 4294967040);
		$t1.add('darkblue', 4287299584);
		$t1.add('darkcyan', 4287335168);
		$t1.add('darkgoldenrod', 4278945464);
		$t1.add('darkgray', 4289309097);
		$t1.add('darkgreen', 4278215680);
		$t1.add('darkkhaki', 4285249469);
		$t1.add('darkmagenta', 4287299723);
		$t1.add('darkolivegreen', 4281297749);
		$t1.add('darkorange', 4278226175);
		$t1.add('darkorchid', 4291572377);
		$t1.add('darkred', 4278190219);
		$t1.add('darksalmon', 4286224105);
		$t1.add('darkseagreen', 4287347855);
		$t1.add('darkslateblue', 4287315272);
		$t1.add('darkslategray', 4283387695);
		$t1.add('darkturquoise', 4291939840);
		$t1.add('darkviolet', 4292018324);
		$t1.add('deeppink', 4287829247);
		$t1.add('deepskyblue', 4294950656);
		$t1.add('dimgray', 4285098345);
		$t1.add('dodgerblue', 4294938654);
		$t1.add('firebrick', 4280427186);
		$t1.add('floralwhite', 4293982975);
		$t1.add('forestgreen', 4280453922);
		$t1.add('fuchsia', 4294902015);
		$t1.add('gainsboro', 4292664540);
		$t1.add('ghostwhite', 4294965496);
		$t1.add('gold', 4278245375);
		$t1.add('goldenrod', 4280329690);
		$t1.add('gray', 4286611584);
		$t1.add('officegreen', 4278222848);
		$t1.add('green', 4278255360);
		$t1.add('greenyellow', 4281335725);
		$t1.add('honeydew', 4293984240);
		$t1.add('hotpink', 4290013695);
		$t1.add('indianred', 4284243149);
		$t1.add('indigo', 4286709835);
		$t1.add('ivory', 4293984255);
		$t1.add('khaki', 4287424240);
		$t1.add('lavender', 4294633190);
		$t1.add('lavenderblush', 4294308095);
		$t1.add('lawngreen', 4278254716);
		$t1.add('lemonchiffon', 4291689215);
		$t1.add('lightblue', 4293318829);
		$t1.add('lightcoral', 4286611696);
		$t1.add('lightcyan', 4294967264);
		$t1.add('lightgoldenrodyellow', 4292016890);
		$t1.add('lightgray', 4292072403);
		$t1.add('lightgreen', 4287688336);
		$t1.add('lightpink', 4290885375);
		$t1.add('lightsalmon', 4286226687);
		$t1.add('lightseagreen', 4289376800);
		$t1.add('lightskyblue', 4294626951);
		$t1.add('lightslategray', 4288252023);
		$t1.add('lightsteelblue', 4292789424);
		$t1.add('lightyellow', 4292935679);
		$t1.add('lime', 4278255360);
		$t1.add('limegreen', 4281519410);
		$t1.add('linen', 4293325050);
		$t1.add('magenta', 4294902015);
		$t1.add('maroon', 4278190208);
		$t1.add('mediumaquamarine', 4289383782);
		$t1.add('mediumblue', 4291624960);
		$t1.add('mediumorchid', 4292040122);
		$t1.add('mediumpurple', 4292571283);
		$t1.add('mediumseagreen', 4285641532);
		$t1.add('mediumslateblue', 4293814395);
		$t1.add('mediumspringgreen', 4288346624);
		$t1.add('mediumturquoise', 4291613000);
		$t1.add('mediumvioletred', 4286911943);
		$t1.add('midnightblue', 4285536537);
		$t1.add('mintcream', 4294639605);
		$t1.add('mistyrose', 4292994303);
		$t1.add('moccasin', 4290110719);
		$t1.add('navajowhite', 4289584895);
		$t1.add('navy', 4286578688);
		$t1.add('oldlace', 4293326333);
		$t1.add('olive', 4278222976);
		$t1.add('olivedrab', 4280520299);
		$t1.add('orange', 4278232575);
		$t1.add('orangered', 4278207999);
		$t1.add('orchid', 4292243674);
		$t1.add('palegoldenrod', 4289390830);
		$t1.add('palegreen', 4288215960);
		$t1.add('paleturquoise', 4293848751);
		$t1.add('palevioletred', 4287852763);
		$t1.add('papayawhip', 4292210687);
		$t1.add('peachpuff', 4290370303);
		$t1.add('peru', 4282353101);
		$t1.add('pink', 4291543295);
		$t1.add('plum', 4292714717);
		$t1.add('powderblue', 4293320880);
		$t1.add('purple', 4286578816);
		$t1.add('red', 4278190335);
		$t1.add('rosybrown', 4287598524);
		$t1.add('royalblue', 4292962625);
		$t1.add('saddlebrown', 4279453067);
		$t1.add('salmon', 4285694202);
		$t1.add('sandybrown', 4284523764);
		$t1.add('seagreen', 4283927342);
		$t1.add('seashell', 4293850623);
		$t1.add('sienna', 4281160352);
		$t1.add('silver', 4290822336);
		$t1.add('skyblue', 4293643911);
		$t1.add('slateblue', 4291648106);
		$t1.add('slategray', 4287660144);
		$t1.add('snow', 4294638335);
		$t1.add('springgreen', 4286578432);
		$t1.add('steelblue', 4290019910);
		$t1.add('tan', 4287411410);
		$t1.add('teal', 4286611456);
		$t1.add('thistle', 4292394968);
		$t1.add('tomato', 4282868735);
		$t1.add('turquoise', 4291878976);
		$t1.add('violet', 4293821166);
		$t1.add('wheat', 4289978101);
		$t1.add('white', 4294967295);
		$t1.add('whitesmoke', 4294309365);
		$t1.add('yellow', 4278255615);
		$t1.add('yellowgreen', 4281519514);
		$Franca_Color.$namedColors = $t1;
		$Franca_Color.transparentBlack = new $Franca_Color.$ctor2(0, true);
		$Franca_Color.transparent = new $Franca_Color.$ctor2(0, true);
		$Franca_Color.aliceBlue = new $Franca_Color.$ctor3(4294965488, true);
		$Franca_Color.antiqueWhite = new $Franca_Color.$ctor3(4292340730, true);
		$Franca_Color.aqua = new $Franca_Color.$ctor3(4294967040, true);
		$Franca_Color.aquamarine = new $Franca_Color.$ctor3(4292149119, true);
		$Franca_Color.azure = new $Franca_Color.$ctor3(4294967280, true);
		$Franca_Color.beige = new $Franca_Color.$ctor3(4292670965, true);
		$Franca_Color.bisque = new $Franca_Color.$ctor3(4291093759, true);
		$Franca_Color.black = new $Franca_Color.$ctor3(4278190080, true);
		$Franca_Color.blanchedAlmond = new $Franca_Color.$ctor3(4291685375, true);
		$Franca_Color.blue = new $Franca_Color.$ctor3(4294901760, true);
		$Franca_Color.blueViolet = new $Franca_Color.$ctor3(4293012362, true);
		$Franca_Color.brown = new $Franca_Color.$ctor3(4280953509, true);
		$Franca_Color.burlyWood = new $Franca_Color.$ctor3(4287084766, true);
		$Franca_Color.cadetBlue = new $Franca_Color.$ctor3(4288716383, true);
		$Franca_Color.chartreuse = new $Franca_Color.$ctor3(4278255487, true);
		$Franca_Color.chocolate = new $Franca_Color.$ctor3(4280183250, true);
		$Franca_Color.coral = new $Franca_Color.$ctor3(4283465727, true);
		$Franca_Color.cornflowerBlue = new $Franca_Color.$ctor3(4293760356, true);
		$Franca_Color.cornsilk = new $Franca_Color.$ctor3(4292671743, true);
		$Franca_Color.crimson = new $Franca_Color.$ctor3(4282127580, true);
		$Franca_Color.cyan = new $Franca_Color.$ctor3(4294967040, true);
		$Franca_Color.darkBlue = new $Franca_Color.$ctor3(4287299584, true);
		$Franca_Color.darkCyan = new $Franca_Color.$ctor3(4287335168, true);
		$Franca_Color.darkGoldenrod = new $Franca_Color.$ctor3(4278945464, true);
		$Franca_Color.darkGray = new $Franca_Color.$ctor3(4289309097, true);
		$Franca_Color.darkGreen = new $Franca_Color.$ctor3(4278215680, true);
		$Franca_Color.darkKhaki = new $Franca_Color.$ctor3(4285249469, true);
		$Franca_Color.darkMagenta = new $Franca_Color.$ctor3(4287299723, true);
		$Franca_Color.darkOliveGreen = new $Franca_Color.$ctor3(4281297749, true);
		$Franca_Color.darkOrange = new $Franca_Color.$ctor3(4278226175, true);
		$Franca_Color.darkOrchid = new $Franca_Color.$ctor3(4291572377, true);
		$Franca_Color.darkRed = new $Franca_Color.$ctor3(4278190219, true);
		$Franca_Color.darkSalmon = new $Franca_Color.$ctor3(4286224105, true);
		$Franca_Color.darkSeaGreen = new $Franca_Color.$ctor3(4287347855, true);
		$Franca_Color.darkSlateBlue = new $Franca_Color.$ctor3(4287315272, true);
		$Franca_Color.darkSlateGray = new $Franca_Color.$ctor3(4283387695, true);
		$Franca_Color.darkTurquoise = new $Franca_Color.$ctor3(4291939840, true);
		$Franca_Color.darkViolet = new $Franca_Color.$ctor3(4292018324, true);
		$Franca_Color.deepPink = new $Franca_Color.$ctor3(4287829247, true);
		$Franca_Color.deepSkyBlue = new $Franca_Color.$ctor3(4294950656, true);
		$Franca_Color.dimGray = new $Franca_Color.$ctor3(4285098345, true);
		$Franca_Color.dodgerBlue = new $Franca_Color.$ctor3(4294938654, true);
		$Franca_Color.firebrick = new $Franca_Color.$ctor3(4280427186, true);
		$Franca_Color.floralWhite = new $Franca_Color.$ctor3(4293982975, true);
		$Franca_Color.forestGreen = new $Franca_Color.$ctor3(4280453922, true);
		$Franca_Color.fuchsia = new $Franca_Color.$ctor3(4294902015, true);
		$Franca_Color.gainsboro = new $Franca_Color.$ctor3(4292664540, true);
		$Franca_Color.ghostWhite = new $Franca_Color.$ctor3(4294965496, true);
		$Franca_Color.gold = new $Franca_Color.$ctor3(4278245375, true);
		$Franca_Color.goldenrod = new $Franca_Color.$ctor3(4280329690, true);
		$Franca_Color.gray = new $Franca_Color.$ctor3(4286611584, true);
		$Franca_Color.officeGreen = new $Franca_Color.$ctor3(4278222848, true);
		$Franca_Color.green = new $Franca_Color.$ctor3(4278255360, true);
		$Franca_Color.greenYellow = new $Franca_Color.$ctor3(4281335725, true);
		$Franca_Color.honeydew = new $Franca_Color.$ctor3(4293984240, true);
		$Franca_Color.hotPink = new $Franca_Color.$ctor3(4290013695, true);
		$Franca_Color.indianRed = new $Franca_Color.$ctor3(4284243149, true);
		$Franca_Color.indigo = new $Franca_Color.$ctor3(4286709835, true);
		$Franca_Color.ivory = new $Franca_Color.$ctor3(4293984255, true);
		$Franca_Color.khaki = new $Franca_Color.$ctor3(4287424240, true);
		$Franca_Color.lavender = new $Franca_Color.$ctor3(4294633190, true);
		$Franca_Color.lavenderBlush = new $Franca_Color.$ctor3(4294308095, true);
		$Franca_Color.lawnGreen = new $Franca_Color.$ctor3(4278254716, true);
		$Franca_Color.lemonChiffon = new $Franca_Color.$ctor3(4291689215, true);
		$Franca_Color.lightBlue = new $Franca_Color.$ctor3(4293318829, true);
		$Franca_Color.lightCoral = new $Franca_Color.$ctor3(4286611696, true);
		$Franca_Color.lightCyan = new $Franca_Color.$ctor3(4294967264, true);
		$Franca_Color.lightGoldenrodYellow = new $Franca_Color.$ctor3(4292016890, true);
		$Franca_Color.lightGray = new $Franca_Color.$ctor3(4292072403, true);
		$Franca_Color.lightGreen = new $Franca_Color.$ctor3(4287688336, true);
		$Franca_Color.lightPink = new $Franca_Color.$ctor3(4290885375, true);
		$Franca_Color.lightSalmon = new $Franca_Color.$ctor3(4286226687, true);
		$Franca_Color.lightSeaGreen = new $Franca_Color.$ctor3(4289376800, true);
		$Franca_Color.lightSkyBlue = new $Franca_Color.$ctor3(4294626951, true);
		$Franca_Color.lightSlateGray = new $Franca_Color.$ctor3(4288252023, true);
		$Franca_Color.lightSteelBlue = new $Franca_Color.$ctor3(4292789424, true);
		$Franca_Color.lightYellow = new $Franca_Color.$ctor3(4292935679, true);
		$Franca_Color.lime = new $Franca_Color.$ctor3(4278255360, true);
		$Franca_Color.limeGreen = new $Franca_Color.$ctor3(4281519410, true);
		$Franca_Color.linen = new $Franca_Color.$ctor3(4293325050, true);
		$Franca_Color.magenta = new $Franca_Color.$ctor3(4294902015, true);
		$Franca_Color.maroon = new $Franca_Color.$ctor3(4278190208, true);
		$Franca_Color.mediumAquamarine = new $Franca_Color.$ctor3(4289383782, true);
		$Franca_Color.mediumBlue = new $Franca_Color.$ctor3(4291624960, true);
		$Franca_Color.mediumOrchid = new $Franca_Color.$ctor3(4292040122, true);
		$Franca_Color.mediumPurple = new $Franca_Color.$ctor3(4292571283, true);
		$Franca_Color.mediumSeaGreen = new $Franca_Color.$ctor3(4285641532, true);
		$Franca_Color.mediumSlateBlue = new $Franca_Color.$ctor3(4293814395, true);
		$Franca_Color.mediumSpringGreen = new $Franca_Color.$ctor3(4288346624, true);
		$Franca_Color.mediumTurquoise = new $Franca_Color.$ctor3(4291613000, true);
		$Franca_Color.mediumVioletRed = new $Franca_Color.$ctor3(4286911943, true);
		$Franca_Color.midnightBlue = new $Franca_Color.$ctor3(4285536537, true);
		$Franca_Color.mintCream = new $Franca_Color.$ctor3(4294639605, true);
		$Franca_Color.mistyRose = new $Franca_Color.$ctor3(4292994303, true);
		$Franca_Color.moccasin = new $Franca_Color.$ctor3(4290110719, true);
		$Franca_Color.navajoWhite = new $Franca_Color.$ctor3(4289584895, true);
		$Franca_Color.navy = new $Franca_Color.$ctor3(4286578688, true);
		$Franca_Color.oldLace = new $Franca_Color.$ctor3(4293326333, true);
		$Franca_Color.olive = new $Franca_Color.$ctor3(4278222976, true);
		$Franca_Color.oliveDrab = new $Franca_Color.$ctor3(4280520299, true);
		$Franca_Color.orange = new $Franca_Color.$ctor3(4278232575, true);
		$Franca_Color.orangeRed = new $Franca_Color.$ctor3(4278207999, true);
		$Franca_Color.orchid = new $Franca_Color.$ctor3(4292243674, true);
		$Franca_Color.paleGoldenrod = new $Franca_Color.$ctor3(4289390830, true);
		$Franca_Color.paleGreen = new $Franca_Color.$ctor3(4288215960, true);
		$Franca_Color.paleTurquoise = new $Franca_Color.$ctor3(4293848751, true);
		$Franca_Color.paleVioletRed = new $Franca_Color.$ctor3(4287852763, true);
		$Franca_Color.papayaWhip = new $Franca_Color.$ctor3(4292210687, true);
		$Franca_Color.peachPuff = new $Franca_Color.$ctor3(4290370303, true);
		$Franca_Color.peru = new $Franca_Color.$ctor3(4282353101, true);
		$Franca_Color.pink = new $Franca_Color.$ctor3(4291543295, true);
		$Franca_Color.plum = new $Franca_Color.$ctor3(4292714717, true);
		$Franca_Color.powderBlue = new $Franca_Color.$ctor3(4293320880, true);
		$Franca_Color.purple = new $Franca_Color.$ctor3(4286578816, true);
		$Franca_Color.red = new $Franca_Color.$ctor3(4278190335, true);
		$Franca_Color.rosyBrown = new $Franca_Color.$ctor3(4287598524, true);
		$Franca_Color.royalBlue = new $Franca_Color.$ctor3(4292962625, true);
		$Franca_Color.saddleBrown = new $Franca_Color.$ctor3(4279453067, true);
		$Franca_Color.salmon = new $Franca_Color.$ctor3(4285694202, true);
		$Franca_Color.sandyBrown = new $Franca_Color.$ctor3(4284523764, true);
		$Franca_Color.seaGreen = new $Franca_Color.$ctor3(4283927342, true);
		$Franca_Color.seaShell = new $Franca_Color.$ctor3(4293850623, true);
		$Franca_Color.sienna = new $Franca_Color.$ctor3(4281160352, true);
		$Franca_Color.silver = new $Franca_Color.$ctor3(4290822336, true);
		$Franca_Color.skyBlue = new $Franca_Color.$ctor3(4293643911, true);
		$Franca_Color.slateBlue = new $Franca_Color.$ctor3(4291648106, true);
		$Franca_Color.slateGray = new $Franca_Color.$ctor3(4287660144, true);
		$Franca_Color.snow = new $Franca_Color.$ctor3(4294638335, true);
		$Franca_Color.springGreen = new $Franca_Color.$ctor3(4286578432, true);
		$Franca_Color.steelBlue = new $Franca_Color.$ctor3(4290019910, true);
		$Franca_Color.tan = new $Franca_Color.$ctor3(4287411410, true);
		$Franca_Color.teal = new $Franca_Color.$ctor3(4286611456, true);
		$Franca_Color.thistle = new $Franca_Color.$ctor3(4292394968, true);
		$Franca_Color.tomato = new $Franca_Color.$ctor3(4282868735, true);
		$Franca_Color.turquoise = new $Franca_Color.$ctor3(4291878976, true);
		$Franca_Color.violet = new $Franca_Color.$ctor3(4293821166, true);
		$Franca_Color.wheat = new $Franca_Color.$ctor3(4289978101, true);
		$Franca_Color.white = new $Franca_Color.$ctor3(4294967295, true);
		$Franca_Color.whiteSmoke = new $Franca_Color.$ctor3(4294309365, true);
		$Franca_Color.yellow = new $Franca_Color.$ctor3(4278255615, true);
		$Franca_Color.yellowGreen = new $Franca_Color.$ctor3(4281519514, true);
	})();
	(function() {
		$Franca_HdrColor.$white = new $Franca_HdrColor.$ctor4(1, 1, 1, 1);
		$Franca_HdrColor.$black = new $Franca_HdrColor.$ctor4(0, 0, 0, 1);
		$Franca_HdrColor.$transparent = new $Franca_HdrColor.$ctor4(0, 0, 0, 0);
	})();
	(function() {
		$Franca_ColorHelper.$epsilon = 1.40129846432482E-45;
	})();
	(function() {
		$Franca_Matrix4.identity = new $Franca_Matrix4.$ctor2($Franca_Vector4.unitX, $Franca_Vector4.unitY, $Franca_Vector4.unitZ, $Franca_Vector4.unitW);
	})();
	(function() {
		$Franca_Point.zero = new $Franca_Point.$ctor2(0, 0);
	})();
	(function() {
		$Franca_PointF.zero = new $Franca_PointF.$ctor2(0, 0);
	})();
	(function() {
		$Franca_Vector2.$zeroVector = new $Franca_Vector2.$ctor3(0, 0);
		$Franca_Vector2.$unitVector = new $Franca_Vector2.$ctor3(1, 1);
		$Franca_Vector2.$unitXVector = new $Franca_Vector2.$ctor3(1, 0);
		$Franca_Vector2.$unitYVector = new $Franca_Vector2.$ctor3(0, 1);
		$Franca_Vector2.$_seedGenerator = null;
		$Franca_Vector2.zero = new $Franca_Vector2.$ctor3(0, 0);
		$Franca_Vector2.one = new $Franca_Vector2.$ctor3(1, 1);
		$Franca_Vector2.unitX = new $Franca_Vector2.$ctor3(1, 0);
		$Franca_Vector2.unitY = new $Franca_Vector2.$ctor3(0, 1);
	})();
	(function() {
		$Franca_VectorMath.$piFloat = 0;
		$Franca_VectorMath.$ninetyDegrees = 0;
		$Franca_VectorMath.$oneEightyDegrees = 0;
		$Franca_VectorMath.$twoSeventyDegrees = 0;
		$Franca_VectorMath.$ninetyDegrees = Math.PI / 2;
		$Franca_VectorMath.$oneEightyDegrees = Math.PI;
		$Franca_VectorMath.$twoSeventyDegrees = Math.PI / 2 + Math.PI;
		$Franca_VectorMath.$piFloat = Math.PI;
	})();
	(function() {
		$Franca_ColorSpace.gamma = 2.2;
		$Franca_ColorSpace.invGamma = 0.454545454545455;
		$Franca_ColorSpace.$vec2Gamma = new $Franca_Vector2.$ctor2($Franca_ColorSpace.gamma);
		$Franca_ColorSpace.$vec3Gamma = new $Franca_Vector3.$ctor2($Franca_ColorSpace.gamma);
		$Franca_ColorSpace.$vec2GammaInv = new $Franca_Vector2.$ctor2($Franca_ColorSpace.invGamma);
		$Franca_ColorSpace.$vec3GammaInv = new $Franca_Vector3.$ctor2($Franca_ColorSpace.invGamma);
		$Franca_ColorSpace.$vec2SrgbThreshold = new $Franca_Vector2.$ctor2(0.04045);
		$Franca_ColorSpace.$vec2SrgbPow = new $Franca_Vector2.$ctor2(2.4);
		$Franca_ColorSpace.$vec3SrgbThreshold = new $Franca_Vector3.$ctor2(0.04045);
		$Franca_ColorSpace.$vec3SrgbPow = new $Franca_Vector3.$ctor2(2.4);
		$Franca_ColorSpace.$vec2SrgbInvThreshold = new $Franca_Vector2.$ctor2(0.0031308);
		$Franca_ColorSpace.$vec2SrgbInvPow = new $Franca_Vector2.$ctor2(0.416666666666667);
		$Franca_ColorSpace.$vec3SrgbInvThreshold = new $Franca_Vector3.$ctor2(0.0031308);
		$Franca_ColorSpace.$vec3SrgbInvPow = new $Franca_Vector3.$ctor2(0.416666666666667);
	})();
	(function() {
		$Franca_Rectangle.empty = new $Franca_Rectangle.$ctor3(0, 0, 0, 0);
	})();
	(function() {
		$Franca_RectangleF.empty = new $Franca_RectangleF.$ctor3(0, 0, 0, 0);
	})();
	(function() {
		$Franca_ResourceString.$withoutArgs = null;
		$Franca_ResourceString.$withArgs = null;
		$Franca_ResourceString.invalidOperation_EnumFailedVersion = 'InvalidOperation_EnumFailedVersion';
		$Franca_ResourceString.invalidOperation_EnumOpCantHappen = 'InvalidOperation_EnumOpCantHappen';
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [String, String]))();
		$t1.add('InvalidOperation_EnumFailedVersion', 'Collection was modified; enumeration operation may not execute.');
		$t1.add('InvalidOperation_EnumOpCantHappen', 'Enumeration has either not started or has already finished.');
		$Franca_ResourceString.defaultMessages = $t1;
	})();
	(function() {
		$Franca_StringBuilderExtensions.$chr1024 = new Array(1024);
		$Franca_StringBuilderExtensions.$chr512 = new Array(512);
		$Franca_StringBuilderExtensions.$chr256 = new Array(256);
		$Franca_StringBuilderExtensions.$chr128 = new Array(128);
		$Franca_StringBuilderExtensions.$chr64 = new Array(64);
		$Franca_StringBuilderExtensions.$chr32 = new Array(32);
		$Franca_StringBuilderExtensions.$chr16 = new Array(16);
		$Franca_StringBuilderExtensions.$chr8 = new Array(8);
		$Franca_StringBuilderExtensions.$chr4 = new Array(4);
		$Franca_StringBuilderExtensions.$chr2 = new Array(2);
	})();
	(function() {
		$Franca_UtcDate.msToUnixEpoch = 62135596800000;
		$Franca_UtcDate.msPerWeek = 604800000;
		$Franca_UtcDate.msPerDay = 86400000;
		$Franca_UtcDate.msPerHour = 3600000;
		$Franca_UtcDate.msPerMinute = 60000;
		$Franca_UtcDate.msPerSecond = 1000;
		$Franca_UtcDate.ticksPerMillisecond = 10000;
		$Franca_UtcDate.$dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
		$Franca_UtcDate.$abbreviatedDayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
		$Franca_UtcDate.$monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', ''];
		$Franca_UtcDate.$abbreviatedMonthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', ''];
	})();
	(function() {
		$Franca_Text_MarkupHtmlConverter.$escapedCharacters = [60, 38, 62];
		var $t1 = [];
		$t1.push('&');
		$t1.push('<');
		$t1.push('>');
		$Franca_Text_MarkupHtmlConverter.$escapeSequencesFrom = $t1;
		var $t1 = [];
		$t1.push('&amp;');
		$t1.push('&lt;');
		$t1.push('&gt;');
		$Franca_Text_MarkupHtmlConverter.$escapeSequencesTo = $t1;
	})();
	(function() {
		$Franca_Text_MarkupRtfConverter.$escapedCharacters = [92, 123, 125];
		var $t1 = [];
		$t1.push('\\');
		$t1.push('{');
		$t1.push('}');
		$Franca_Text_MarkupRtfConverter.$escapeSequencesFrom = $t1;
		var $t1 = [];
		$t1.push('\\\\');
		$t1.push('\\{');
		$t1.push('\\}');
		$Franca_Text_MarkupRtfConverter.$escapeSequencesTo = $t1;
	})();
	(function() {
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter$Tag.$sizeTag = new $Franca_Text_MarkupTag(16, null, 0, -1);
	})();
	(function() {
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$tagRegex = new $Franca_Text_Regex('<(\\/?)(font|span|em|strong|b|i|u)(?:\\s+style="([^"]*)")?\\s*>', 1);
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$styleKvpRegex = new $Franca_Text_Regex('\\s*([^:\\s]+)\\s*:\\s*(\\S+)\\s*(?:;|$)', 4);
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$measurementUnits = ['em', 'pt', 'px', '%'];
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$tags = null;
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$colors = null;
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$sizes = null;
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$bTags = null;
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$iTags = null;
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$uTags = null;
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$emTags = null;
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$strongTags = null;
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$spanTags = null;
		$Franca_$Text_Markup$LocalizableHtmlToMarkupConverter.$fontTags = null;
	})();
	(function() {
		$Franca_Text_Markup.startChar = 6;
		$Franca_Text_Markup.colorLength = 5;
		$Franca_Text_Markup.sizeLength = 3;
		$Franca_Text_Markup.maxMarkupLength = 6;
		$Franca_Text_Markup.reset = String.fromCharCode.apply(null, [$Franca_Text_Markup.startChar, 0]);
		$Franca_Text_Markup.$_strBuilder = null;
	})();
	(function() {
		$Franca_Compression_Deflate.$fdictFlag = 32;
		$Franca_Compression_Deflate.maxBits = 15;
		$Franca_Compression_Deflate.maxLCodes = 286;
		$Franca_Compression_Deflate.maxDCodes = 30;
		$Franca_Compression_Deflate.maxCodes = 316;
		$Franca_Compression_Deflate.fixLCodes = 288;
		$Franca_Compression_Deflate.$lens = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
		$Franca_Compression_Deflate.$lext = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
		$Franca_Compression_Deflate.$dists = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
		$Franca_Compression_Deflate.$dext = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
		$Franca_Compression_Deflate.$lenCount = new Array(16);
		$Franca_Compression_Deflate.$lenSym = new Array($Franca_Compression_Deflate.fixLCodes);
		$Franca_Compression_Deflate.$distCount = new Array(16);
		$Franca_Compression_Deflate.$distSym = new Array($Franca_Compression_Deflate.maxDCodes);
		$Franca_Compression_Deflate.$lencode = null;
		$Franca_Compression_Deflate.$distcode = null;
		$Franca_Compression_Deflate.$order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
		console.log(ss.formatString('Puff inflate: HUFFMAN_HEAP={0}, INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR={1}', $System_ObjectExtensions.toStringInvariant$1(Boolean).call(null, true), $System_ObjectExtensions.toStringInvariant$1(Boolean).call(null, false)));
		// build fixed huffman tables
		var symbol;
		var lengths = new Array($Franca_Compression_Deflate.fixLCodes);
		// construct lencode and distcode
		$Franca_Compression_Deflate.$lencode = new $Franca_$Compression_Deflate$Huffman($Franca_Compression_Deflate.$lenCount, $Franca_Compression_Deflate.$lenSym);
		$Franca_Compression_Deflate.$distcode = new $Franca_$Compression_Deflate$Huffman($Franca_Compression_Deflate.$distCount, $Franca_Compression_Deflate.$distSym);
		// literal/length table
		for (symbol = 0; symbol < 144; symbol++) {
			lengths[symbol] = 8;
		}
		for (; symbol < 256; symbol++) {
			lengths[symbol] = 9;
		}
		for (; symbol < 280; symbol++) {
			lengths[symbol] = 7;
		}
		for (; symbol < $Franca_Compression_Deflate.fixLCodes; symbol++) {
			lengths[symbol] = 8;
		}
		$Franca_Compression_Deflate.$construct($Franca_Compression_Deflate.$lencode, lengths, 0, $Franca_Compression_Deflate.fixLCodes);
		// distance table
		for (symbol = 0; symbol < $Franca_Compression_Deflate.maxDCodes; symbol++) {
			lengths[symbol] = 5;
		}
		$Franca_Compression_Deflate.$construct($Franca_Compression_Deflate.$distcode, lengths, 0, $Franca_Compression_Deflate.maxDCodes);
	})();
	(function() {
		$Franca_Compression_GZip.$maxChunkSize = 16384;
	})();
	(function() {
		$Franca_Easing_BackEase.$defaultIn = new $Franca_Easing_BackEase(1, 1);
		$Franca_Easing_BackEase.$defaultOut = new $Franca_Easing_BackEase(1, 0);
		$Franca_Easing_BackEase.$defaultInOut = new $Franca_Easing_BackEase(1, 2);
		$Franca_Easing_BackEase.$defaultOutIn = new $Franca_Easing_BackEase(1, 3);
	})();
	(function() {
		$Franca_Easing_BounceEase.$defaultIn = new $Franca_Easing_BounceEase(3, 3, 1);
		$Franca_Easing_BounceEase.$defaultOut = new $Franca_Easing_BounceEase(3, 3, 0);
		$Franca_Easing_BounceEase.$defaultInOut = new $Franca_Easing_BounceEase(3, 3, 2);
		$Franca_Easing_BounceEase.$defaultOutIn = new $Franca_Easing_BounceEase(3, 3, 3);
	})();
	(function() {
		$Franca_Easing_CircleEase.$defaultIn = new $Franca_Easing_CircleEase(1);
		$Franca_Easing_CircleEase.$defaultOut = new $Franca_Easing_CircleEase(0);
		$Franca_Easing_CircleEase.$defaultInOut = new $Franca_Easing_CircleEase(2);
		$Franca_Easing_CircleEase.$defaultOutIn = new $Franca_Easing_CircleEase(3);
	})();
	(function() {
		$Franca_Easing_PowerEase.$defaultIn = new $Franca_Easing_PowerEase.$ctor1(4, 1);
		$Franca_Easing_PowerEase.$defaultOut = new $Franca_Easing_PowerEase.$ctor1(4, 0);
		$Franca_Easing_PowerEase.$defaultInOut = new $Franca_Easing_PowerEase.$ctor1(4, 2);
		$Franca_Easing_PowerEase.$defaultOutIn = new $Franca_Easing_PowerEase.$ctor1(4, 3);
	})();
	(function() {
		$Franca_Easing_CubicEase.$defaultIn = new $Franca_Easing_CubicEase(1);
		$Franca_Easing_CubicEase.$defaultOut = new $Franca_Easing_CubicEase(0);
		$Franca_Easing_CubicEase.$defaultInOut = new $Franca_Easing_CubicEase(2);
		$Franca_Easing_CubicEase.$defaultOutIn = new $Franca_Easing_CubicEase(3);
	})();
	(function() {
		$Franca_Easing_ElasticEase.$defaultIn = new $Franca_Easing_ElasticEase(3, 3, 1);
		$Franca_Easing_ElasticEase.$defaultOut = new $Franca_Easing_ElasticEase(3, 3, 0);
		$Franca_Easing_ElasticEase.$defaultInOut = new $Franca_Easing_ElasticEase(3, 3, 2);
		$Franca_Easing_ElasticEase.$defaultOutIn = new $Franca_Easing_ElasticEase(3, 3, 3);
	})();
	(function() {
		$Franca_Easing_ExponentialEase.$defaultIn = new $Franca_Easing_ExponentialEase(2, 1);
		$Franca_Easing_ExponentialEase.$defaultOut = new $Franca_Easing_ExponentialEase(2, 0);
		$Franca_Easing_ExponentialEase.$defaultInOut = new $Franca_Easing_ExponentialEase(2, 2);
		$Franca_Easing_ExponentialEase.$defaultOutIn = new $Franca_Easing_ExponentialEase(2, 3);
	})();
	(function() {
		$Franca_Easing_QuadraticEase.$defaultIn = new $Franca_Easing_QuadraticEase(1);
		$Franca_Easing_QuadraticEase.$defaultOut = new $Franca_Easing_QuadraticEase(0);
		$Franca_Easing_QuadraticEase.$defaultInOut = new $Franca_Easing_QuadraticEase(2);
		$Franca_Easing_QuadraticEase.$defaultOutIn = new $Franca_Easing_QuadraticEase(3);
	})();
	(function() {
		$Franca_Easing_SineEase.$defaultIn = new $Franca_Easing_SineEase(1);
		$Franca_Easing_SineEase.$defaultOut = new $Franca_Easing_SineEase(0);
		$Franca_Easing_SineEase.$defaultInOut = new $Franca_Easing_SineEase(2);
		$Franca_Easing_SineEase.$defaultOutIn = new $Franca_Easing_SineEase(3);
	})();
	(function() {
		$Franca_IO_LocalStorage.pathSeparator = '/';
		$Franca_IO_LocalStorage.$unavailableMessage = 'LocalStorage is not available';
		$Franca_IO_LocalStorage.storage = null;
		$Franca_IO_LocalStorage.available = false;
		try {
			var x = '__storage_test__';
			window.localStorage.setItem(x, x);
			window.localStorage.removeItem(x);
			$Franca_IO_LocalStorage.available = true;
			$Franca_IO_LocalStorage.storage = window.localStorage;
		}
		catch ($t1) {
			$Franca_IO_LocalStorage.available = false;
		}
	})();
	(function() {
		$System_IEnumerableExtensions.$cachedArrays = null;
		$System_IEnumerableExtensions.$cacheInUse = null;
	})();
	(function() {
		$Franca_Serialization_JsonHexDouble.$_bytes = null;
		$Franca_Serialization_JsonHexDouble.$_hex = null;
		$Franca_Serialization_JsonHexDouble.$numBytes = 8;
		$Franca_Serialization_JsonHexDouble.$hexChars = 16;
		$Franca_Serialization_JsonHexDouble.$typeName = 'JsonHexDouble';
	})();
	(function() {
		$Franca_Serialization_JsonHexFloat.$_bytes = null;
		$Franca_Serialization_JsonHexFloat.$_hex = null;
		$Franca_Serialization_JsonHexFloat.$numBytes = 4;
		$Franca_Serialization_JsonHexFloat.$hexChars = 8;
		$Franca_Serialization_JsonHexFloat.$typeName = 'JsonHexFloat';
	})();
	(function() {
		$Franca_Serialization_UBJSettings.$_default = new $Franca_Serialization_UBJSettings();
	})();
	(function() {
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [Function, Function]))();
		$t1.add($Franca_Collections_ByteArray, $Franca_Serialization_Streaming_IJsonWriterExtensions.$writeByteArray);
		$t1.add($Franca_Collections_SByteArray, $Franca_Serialization_Streaming_IJsonWriterExtensions.$writeSByteArray);
		$t1.add($Franca_Collections_ShortArray, $Franca_Serialization_Streaming_IJsonWriterExtensions.$writeShortArray);
		$t1.add($Franca_Collections_UShortArray, $Franca_Serialization_Streaming_IJsonWriterExtensions.$writeUShortArray);
		$t1.add($Franca_Collections_IntArray, $Franca_Serialization_Streaming_IJsonWriterExtensions.$writeIntArray);
		$t1.add($Franca_Collections_UIntArray, $Franca_Serialization_Streaming_IJsonWriterExtensions.$writeUIntArray);
		$t1.add($Franca_Collections_FloatArray, $Franca_Serialization_Streaming_IJsonWriterExtensions.$writeFloatArray);
		$t1.add($Franca_Collections_DoubleArray, $Franca_Serialization_Streaming_IJsonWriterExtensions.$writeDoubleArray);
		$Franca_Serialization_Streaming_IJsonWriterExtensions.$delegates = $t1;
	})();
	(function() {
		$Franca_Serialization_Streaming_JsonBinaryWriter.currentVersion = 0;
	})();
	(function() {
		$Franca_Serialization_Streaming_JsonStringReader.$trueString = 'true';
		$Franca_Serialization_Streaming_JsonStringReader.$falseString = 'false';
		$Franca_Serialization_Streaming_JsonStringReader.$nullString = 'null';
		$Franca_Serialization_Streaming_JsonStringReader.$trueStringLen = 4;
		$Franca_Serialization_Streaming_JsonStringReader.$falseStringLen = 5;
		$Franca_Serialization_Streaming_JsonStringReader.$nullStringLen = 4;
		$Franca_Serialization_Streaming_JsonStringReader.fixedArrayTypePrefix = 'fixedArray ';
		$Franca_Serialization_Streaming_JsonStringReader.$_endReadFixedArrayDelegate = null;
	})();
	(function() {
		$Franca_Serialization_Streaming_JsonStringWriter.$indentStrings = null;
	})();
	(function() {
		$Franca_Text_Base32.$mask0 = 31;
		$Franca_Text_Base32.$mask1A = 224;
		$Franca_Text_Base32.$mask1B = 3;
		$Franca_Text_Base32.$mask1RShiftA = 5;
		$Franca_Text_Base32.$mask1RShiftB = -3;
		$Franca_Text_Base32.$mask2 = 124;
		$Franca_Text_Base32.$mask2RShift = 2;
		$Franca_Text_Base32.$mask3A = 128;
		$Franca_Text_Base32.$mask3B = 15;
		$Franca_Text_Base32.$mask3RShiftA = 7;
		$Franca_Text_Base32.$mask3RShiftB = -1;
		$Franca_Text_Base32.$mask4A = 240;
		$Franca_Text_Base32.$mask4B = 1;
		$Franca_Text_Base32.$mask4RShiftA = 4;
		$Franca_Text_Base32.$mask4RShiftB = -4;
		$Franca_Text_Base32.$mask5 = 62;
		$Franca_Text_Base32.$mask5RShift = 1;
		$Franca_Text_Base32.$mask6A = 192;
		$Franca_Text_Base32.$mask6B = 7;
		$Franca_Text_Base32.$mask6RShiftA = 6;
		$Franca_Text_Base32.$mask6RShiftB = -2;
		$Franca_Text_Base32.$mask7 = 248;
		$Franca_Text_Base32.$mask7RShift = 3;
		var $t1 = [];
		$t1.push('0');
		$t1.push('1');
		$t1.push('2');
		$t1.push('3');
		$t1.push('4');
		$t1.push('5');
		$t1.push('6');
		$t1.push('7');
		$t1.push('8');
		$t1.push('9');
		$t1.push('A');
		$t1.push('B');
		$t1.push('C');
		$t1.push('D');
		$t1.push('E');
		$t1.push('F');
		$t1.push('G');
		$t1.push('H');
		$t1.push('J');
		$t1.push('K');
		$t1.push('M');
		$t1.push('N');
		$t1.push('P');
		$t1.push('Q');
		$t1.push('R');
		$t1.push('S');
		$t1.push('T');
		$t1.push('V');
		$t1.push('W');
		$t1.push('X');
		$t1.push('Y');
		$t1.push('Z');
		$Franca_Text_Base32.$encodeSymbols = $t1;
		var $t1 = [];
		$t1.push(new $Franca_$Text_Base32$Base32Mask($Franca_Text_Base32.$mask0, 0));
		$t1.push(new $Franca_$Text_Base32$Base32Mask.$ctor1($Franca_Text_Base32.$mask1A, $Franca_Text_Base32.$mask1RShiftA, $Franca_Text_Base32.$mask1B, 3));
		$t1.push(new $Franca_$Text_Base32$Base32Mask($Franca_Text_Base32.$mask2, $Franca_Text_Base32.$mask2RShift));
		$t1.push(new $Franca_$Text_Base32$Base32Mask.$ctor1($Franca_Text_Base32.$mask3A, $Franca_Text_Base32.$mask3RShiftA, $Franca_Text_Base32.$mask3B, 1));
		$t1.push(new $Franca_$Text_Base32$Base32Mask.$ctor1($Franca_Text_Base32.$mask4A, $Franca_Text_Base32.$mask4RShiftA, $Franca_Text_Base32.$mask4B, 4));
		$t1.push(new $Franca_$Text_Base32$Base32Mask($Franca_Text_Base32.$mask5, $Franca_Text_Base32.$mask5RShift));
		$t1.push(new $Franca_$Text_Base32$Base32Mask.$ctor1($Franca_Text_Base32.$mask6A, $Franca_Text_Base32.$mask6RShiftA, $Franca_Text_Base32.$mask6B, 2));
		$t1.push(new $Franca_$Text_Base32$Base32Mask($Franca_Text_Base32.$mask7, $Franca_Text_Base32.$mask7RShift));
		$Franca_Text_Base32.$encodeMasks = $t1;
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, ss.Int32]))();
		$t1.add(48, 0);
		$t1.add(79, 0);
		$t1.add(111, 0);
		$t1.add(73, 1);
		$t1.add(105, 1);
		$t1.add(76, 1);
		$t1.add(108, 1);
		$t1.add(49, 1);
		$t1.add(50, 2);
		$t1.add(51, 3);
		$t1.add(52, 4);
		$t1.add(53, 5);
		$t1.add(54, 6);
		$t1.add(55, 7);
		$t1.add(56, 8);
		$t1.add(57, 9);
		$t1.add(65, 10);
		$t1.add(97, 10);
		$t1.add(66, 11);
		$t1.add(98, 11);
		$t1.add(67, 12);
		$t1.add(99, 12);
		$t1.add(68, 13);
		$t1.add(100, 13);
		$t1.add(69, 14);
		$t1.add(101, 14);
		$t1.add(70, 15);
		$t1.add(102, 15);
		$t1.add(71, 16);
		$t1.add(103, 16);
		$t1.add(72, 17);
		$t1.add(104, 17);
		$t1.add(74, 18);
		$t1.add(106, 18);
		$t1.add(75, 19);
		$t1.add(107, 19);
		$t1.add(77, 20);
		$t1.add(109, 20);
		$t1.add(78, 21);
		$t1.add(110, 21);
		$t1.add(80, 22);
		$t1.add(112, 22);
		$t1.add(81, 23);
		$t1.add(113, 23);
		$t1.add(82, 24);
		$t1.add(114, 24);
		$t1.add(83, 25);
		$t1.add(115, 25);
		$t1.add(84, 26);
		$t1.add(116, 26);
		$t1.add(86, 27);
		$t1.add(118, 27);
		$t1.add(87, 28);
		$t1.add(119, 28);
		$t1.add(88, 29);
		$t1.add(120, 29);
		$t1.add(89, 30);
		$t1.add(121, 30);
		$t1.add(90, 31);
		$t1.add(122, 31);
		$t1.add(61, 0);
		$Franca_Text_Base32.$decodeSymbols = $t1;
		var $t1 = new (ss.makeGenericType($System_Collections_Generic_HashSet$1, [ss.Int32]))();
		$t1.add(48);
		$t1.add(49);
		$t1.add(50);
		$t1.add(51);
		$t1.add(52);
		$t1.add(53);
		$t1.add(54);
		$t1.add(55);
		$t1.add(56);
		$t1.add(57);
		$t1.add(97);
		$t1.add(98);
		$t1.add(99);
		$t1.add(100);
		$t1.add(101);
		$t1.add(102);
		$t1.add(103);
		$t1.add(104);
		$t1.add(105);
		$t1.add(106);
		$t1.add(107);
		$t1.add(108);
		$t1.add(109);
		$t1.add(110);
		$t1.add(111);
		$t1.add(112);
		$t1.add(113);
		$t1.add(114);
		$t1.add(115);
		$t1.add(116);
		$t1.add(117);
		$t1.add(118);
		$t1.add(119);
		$t1.add(120);
		$t1.add(121);
		$t1.add(122);
		$t1.add(65);
		$t1.add(66);
		$t1.add(67);
		$t1.add(68);
		$t1.add(69);
		$t1.add(70);
		$t1.add(71);
		$t1.add(72);
		$t1.add(73);
		$t1.add(74);
		$t1.add(75);
		$t1.add(76);
		$t1.add(77);
		$t1.add(78);
		$t1.add(79);
		$t1.add(80);
		$t1.add(81);
		$t1.add(82);
		$t1.add(83);
		$t1.add(84);
		$t1.add(85);
		$t1.add(86);
		$t1.add(87);
		$t1.add(88);
		$t1.add(89);
		$t1.add(90);
		$t1.add(61);
		$Franca_Text_Base32.$acceptedSymbols = $t1;
		$Franca_Text_Base32.$strictException = 'Malformed base32 string, final character only partially encoded';
		$Franca_Text_Base32.$_encodeBuilder = null;
	})();
	(function() {
		$Franca_Text_MD5.$_hexBuilder = null;
	})();
	(function() {
		$Franca_Tweening_TweenManager.$maxTime = 0.0835;
	})();
	(function() {
		$Franca_Tweening_Tween.gameTime = new $Franca_Tweening_TweenManager();
		$Franca_Tweening_Tween.realTime = new $Franca_Tweening_TweenManager();
	})();
})();


// Script: Franca.js
(function() {
	'use strict';
	var $asm = {};
	global.Franca = global.Franca || {};
	global.Franca.Audio = global.Franca.Audio || {};
	global.Franca.Collections = global.Franca.Collections || {};
	global.Franca.DrawBucketing = global.Franca.DrawBucketing || {};
	global.Franca.Gif = global.Franca.Gif || {};
	global.Franca.Gui = global.Franca.Gui || {};
	global.Franca.Gui.FlowLang = global.Franca.Gui.FlowLang || {};
	global.Franca.Ime = global.Franca.Ime || {};
	global.Franca.JS = global.Franca.JS || {};
	global.Franca.JS.SimpleAudio = global.Franca.JS.SimpleAudio || {};
	global.Franca.JS.WebAudio = global.Franca.JS.WebAudio || {};
	global.Franca.JsonData = global.Franca.JsonData || {};
	global.Franca.Localization = global.Franca.Localization || {};
	global.Franca.Mode7 = global.Franca.Mode7 || {};
	global.Franca.OpenGL = global.Franca.OpenGL || {};
	global.Franca.OpenGL.WebGL = global.Franca.OpenGL.WebGL || {};
	global.Franca.Png = global.Franca.Png || {};
	global.Franca.Saves = global.Franca.Saves || {};
	global.Franca.Serialization = global.Franca.Serialization || {};
	global.Franca.Targa = global.Franca.Targa || {};
	global.Franca.Text = global.Franca.Text || {};
	global.Franca.Vertices = global.Franca.Vertices || {};
	global.Franca.Video = global.Franca.Video || {};
	ss.initAssembly($asm, 'Franca');
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IClipboardProvider
	var $Franca_$IClipboardProvider = function() {
	};
	$Franca_$IClipboardProvider.__typeName = 'Franca.$IClipboardProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IFontProvider
	var $Franca_$IFontProvider = function() {
	};
	$Franca_$IFontProvider.__typeName = 'Franca.$IFontProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IGraphicsDeviceProvider
	var $Franca_$IGraphicsDeviceProvider = function() {
	};
	$Franca_$IGraphicsDeviceProvider.__typeName = 'Franca.$IGraphicsDeviceProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IInputProvider
	var $Franca_$IInputProvider = function() {
	};
	$Franca_$IInputProvider.__typeName = 'Franca.$IInputProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IWindowProvider
	var $Franca_$IWindowProvider = function() {
	};
	$Franca_$IWindowProvider.__typeName = 'Franca.$IWindowProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JSClipboard
	var $Franca_$JSClipboard = function() {
		this.$activeElement = null;
		this.$textArea = null;
		this.$getPasteCallback = null;
		this.$pasteText = null;
		var anchorEle = document.getElementById('anchor');
		var $t1 = document.createElement('textarea');
		this.$textArea = ss.safeCast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'TEXTAREA'));
		this.$textArea.style.position = 'fixed';
		this.$textArea.style.width = '80px;';
		this.$textArea.style.height = '80px;';
		this.$textArea.style.left = '-200px';
		this.$textArea.style.top = '0';
		document.body.appendChild(this.$textArea);
		document.addEventListener('copy', ss.mkdel(this, this.$domCopy));
		document.addEventListener('cut', ss.mkdel(this, this.$domCopy));
		document.addEventListener('paste', ss.mkdel(this, this.$domPaste));
	};
	$Franca_$JSClipboard.__typeName = 'Franca.$JSClipboard';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JSGraphicsDevice
	var $Franca_$JSGraphicsDevice = function(window) {
		this.$context = null;
		this.$context = FrancaGlobals.getContext(window);
		if (ss.isNullOrUndefined(this.$context)) {
			throw new $Franca_OpenGLException.$ctor1('Could not create WebGL rendering context. Your browser may not support WebGL.');
		}
	};
	$Franca_$JSGraphicsDevice.__typeName = 'Franca.$JSGraphicsDevice';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JSWindow
	var $Franca_$JSWindow = function(container, anchor, position) {
		this.$window = null;
		this.$parentEle = null;
		this.$title = null;
		this.$styleZIndex = null;
		this.$internalWidth = 0;
		this.$internalHeight = 0;
		this.$windowedWidth = 0;
		this.$windowedHeight = 0;
		this.$windowedX = 0;
		this.$windowedY = 0;
		this.$container = null;
		this.fullscreenContainer = null;
		this.$screenfull = null;
		this.$disposed = false;
		this.$container = container;
		this.$screenfull = window.screenfull;
		var $t1 = document.createElement('canvas');
		this.$window = ss.safeCast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'CANVAS'));
		this.$setStylePosition(System.EnumExtensions.getName($Franca_ContainerPosition).call(null, position));
		this.$window.style.left = '0px';
		this.$window.style.top = '0px';
		this.$window.style.visibility = 'hidden';
		this.$styleZIndex = this.$window.style.zIndex;
		if (System.StringExtensions.hasValue(anchor, true)) {
			this.$parentEle = document.getElementById(anchor);
		}
		if (ss.isNullOrUndefined(this.$parentEle)) {
			this.$parentEle = document.body;
		}
		this.$parentEle.appendChild(this.$window);
		document.addEventListener('keydown', ss.mkdel(this, this.$checkFullscreen));
		this.$screenfull.onchange(ss.mkdel(this, this.$fullscreen_changed));
		this.fullscreenContainer = document.createElement('div');
		this.fullscreenContainer.style.display = 'none';
		this.fullscreenContainer.style.position = 'absolute';
		this.fullscreenContainer.style.left = '0';
		this.fullscreenContainer.style.top = '0';
		this.fullscreenContainer.style.right = '0';
		this.fullscreenContainer.style.bottom = '0';
		this.fullscreenContainer.style.padding = '0';
		this.fullscreenContainer.style.margin = '0';
		this.fullscreenContainer.style.background = '#000000';
		document.body.appendChild(this.fullscreenContainer);
	};
	$Franca_$JSWindow.__typeName = 'Franca.$JSWindow';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.PixelFont.Glyph
	var $Franca_$PixelFont$Glyph = function(texture, metrics, ignoreColor) {
		this.$texture = null;
		this.$metrics = ss.getDefaultValue($Franca_GlyphMetrics);
		this.$ignoreColor = false;
		this.$texture = texture;
		this.$metrics = metrics;
		this.$ignoreColor = ignoreColor;
	};
	$Franca_$PixelFont$Glyph.__typeName = 'Franca.$PixelFont$Glyph';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ResolutionSwitch
	var $Franca_$ResolutionSwitch = function(fullscreen, width, height) {
		this.$width = 0;
		this.$height = 0;
		this.$fullscreen = 0;
		this.$fullscreen = fullscreen;
		this.$width = width;
		this.$height = height;
	};
	$Franca_$ResolutionSwitch.__typeName = 'Franca.$ResolutionSwitch';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BatchDrawCall
	var $Franca_BatchDrawCall = function() {
		this.texture = null;
		this.programs = null;
		this.filter = 0;
		this.wrap = 0;
		this.viewport = ss.getDefaultValue(Franca.Rectangle);
		this.offset = 0;
		this.items = 0;
	};
	$Franca_BatchDrawCall.__typeName = 'Franca.BatchDrawCall';
	$Franca_BatchDrawCall.$ctor1 = function(texture, programs, filter, wrap, viewport, items, offset) {
		this.texture = null;
		this.programs = null;
		this.filter = 0;
		this.wrap = 0;
		this.viewport = ss.getDefaultValue(Franca.Rectangle);
		this.offset = 0;
		this.items = 0;
		this.texture = texture;
		this.programs = programs;
		this.filter = filter;
		this.wrap = wrap;
		this.viewport = viewport;
		this.items = items;
		this.offset = offset;
	};
	$Franca_BatchDrawCall.getDefaultValue = function() {
		return new $Franca_BatchDrawCall();
	};
	global.Franca.BatchDrawCall = $Franca_BatchDrawCall;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BatchSortMode
	var $Franca_BatchSortMode = function() {
	};
	$Franca_BatchSortMode.__typeName = 'Franca.BatchSortMode';
	global.Franca.BatchSortMode = $Franca_BatchSortMode;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BufferObject
	var $Franca_BufferObject = function(count, size) {
		this.buffers = null;
		this.curBuffer = 0;
		this.$graphicsDevice = null;
		this.$disposed = false;
		this.buffers = [];
		while (this.buffers.length < count) {
			this.buffers.push($Franca_OpenGL_WebGL_GL.createBuffer());
		}
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_BufferObject.__typeName = 'Franca.BufferObject';
	global.Franca.BufferObject = $Franca_BufferObject;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BufferTarget
	var $Franca_BufferTarget = function() {
	};
	$Franca_BufferTarget.__typeName = 'Franca.BufferTarget';
	global.Franca.BufferTarget = $Franca_BufferTarget;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BufferUsage
	var $Franca_BufferUsage = function() {
	};
	$Franca_BufferUsage.__typeName = 'Franca.BufferUsage';
	global.Franca.BufferUsage = $Franca_BufferUsage;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BuiltinAssets
	var $Franca_BuiltinAssets = function(shaders, shaderPrograms, basicEffect, fontEffect, noneTexture, whiteTexture) {
		this.$1$ShadersField = null;
		this.$1$ShaderProgramsField = null;
		this.$1$BasicEffectField = null;
		this.$1$FontEffectField = null;
		this.$1$VideoEffectField = null;
		this.$1$NoneTextureField = null;
		this.$1$WhiteTextureField = null;
		this.set_shaders(shaders);
		this.set_shaderPrograms(shaderPrograms);
		this.set_basicEffect(basicEffect);
		this.set_fontEffect(fontEffect);
		this.set_noneTexture(noneTexture);
		this.set_whiteTexture(whiteTexture);
	};
	$Franca_BuiltinAssets.__typeName = 'Franca.BuiltinAssets';
	global.Franca.BuiltinAssets = $Franca_BuiltinAssets;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BuiltinProgram
	var $Franca_BuiltinProgram = function() {
	};
	$Franca_BuiltinProgram.__typeName = 'Franca.BuiltinProgram';
	global.Franca.BuiltinProgram = $Franca_BuiltinProgram;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.BuiltinShader
	var $Franca_BuiltinShader = function() {
	};
	$Franca_BuiltinShader.__typeName = 'Franca.BuiltinShader';
	global.Franca.BuiltinShader = $Franca_BuiltinShader;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ButtonState
	var $Franca_ButtonState = function() {
	};
	$Franca_ButtonState.__typeName = 'Franca.ButtonState';
	global.Franca.ButtonState = $Franca_ButtonState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Canvas
	var $Franca_Canvas = function(canvas) {
		this.$bitmap = null;
		this.$width = 0;
		this.$height = 0;
		this.$disposed = false;
		this.$bitmap = canvas.$bitmap;
		this.$width = canvas.$width;
		this.$height = canvas.$height;
		this.$disposed = canvas.$disposed;
	};
	$Franca_Canvas.__typeName = 'Franca.Canvas';
	$Franca_Canvas.$ctor3 = function(width, height) {
		this.$bitmap = null;
		this.$width = 0;
		this.$height = 0;
		this.$disposed = false;
		this.$width = width;
		this.$height = height;
		this.$bitmap = $Franca_Canvas.$createProvider(true, width, height);
	};
	$Franca_Canvas.$ctor1 = function(data) {
		$Franca_Canvas.$ctor3.call(this, data.width, data.height);
		this.setPixelData(data);
	};
	$Franca_Canvas.$ctor2 = function(bitmap) {
		this.$bitmap = null;
		this.$width = 0;
		this.$height = 0;
		this.$disposed = false;
		this.$width = bitmap.get_width();
		this.$height = bitmap.get_height();
		this.$bitmap = bitmap;
	};
	$Franca_Canvas.$createProvider = function(initialize, width, height) {
		var bitmap;
		bitmap = (initialize ? new $Franca_JSBitmap.$ctor2(width, height) : new $Franca_JSBitmap());
		return bitmap;
	};
	$Franca_Canvas.fromBinary = function(data, mimeType) {
		if (ss.isNullOrUndefined(data)) {
			throw new ss.ArgumentNullException('data', 'Cannot create Canvas from BinaryData if data is null');
		}
		var bitmap = $Franca_Canvas.$createProvider(false, 0, 0);
		return bitmap.fromBinary(data, mimeType);
	};
	$Franca_Canvas.fromBase64 = function(base64) {
		var base64Index = ss.indexOfString(base64, ';base64,', 0, 255);
		if (!ss.startsWithString(base64, 'data:image') || base64Index < 0) {
			throw new Franca.InvalidFormatException.$ctor1('Could not create Canvas from base64 string, was not a data uri or data start location not found.');
		}
		var startLoc = base64Index + 8;
		var bitmap = $Franca_Canvas.$createProvider(false, 0, 0);
		return bitmap.fromBase64(base64, startLoc);
	};
	$Franca_Canvas.op_Explicit = function(canvas) {
		return ss.cast(canvas.$bitmap, $Franca_JSBitmap).get_bitmap();
	};
	global.Franca.Canvas = $Franca_Canvas;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.CanvasPixelData
	var $Franca_CanvasPixelData = function(canvas) {
		$Franca_CanvasPixelData.$ctor1.call(this, canvas, new Franca.Rectangle.$ctor3(0, 0, canvas.get_width(), canvas.get_height()));
	};
	$Franca_CanvasPixelData.__typeName = 'Franca.CanvasPixelData';
	$Franca_CanvasPixelData.$ctor2 = function(width, height) {
		this.width = 0;
		this.height = 0;
		this.$imgData = null;
		this.data = null;
		this.stride = 0;
		this.width = width;
		this.height = height;
	};
	$Franca_CanvasPixelData.$ctor1 = function(canvas, rect) {
		$Franca_CanvasPixelData.$ctor2.call(this, rect.size.width, rect.size.height);
		{
			var context = canvas.createContext();
			try {
				this.$imgData = ss.cast(context, $Franca_JS_CanvasContext).get_htmlContext().getImageData(rect.location.x, rect.location.y, rect.size.width, rect.size.height);
			}
			finally {
				if (ss.isValue(context)) {
					context.dispose();
				}
			}
		}
		if (Franca.Platform.get_type() !== 2) {
			this.data = new Uint8Array(this.$imgData.data.buffer);
		}
		else {
			var d = this.$imgData.data;
			this.data = new Uint8Array(d.length);
			for (var i = 0; i < d.length; i++) {
				this.data[i] = this.data[i];
			}
		}
		this.stride = this.width * 4;
	};
	$Franca_CanvasPixelData.$ctor3 = function(width, height, stride) {
		$Franca_CanvasPixelData.$ctor2.call(this, width, height);
		if (stride <= 0) {
			stride = width * 4;
		}
		this.stride = stride;
		this.data = new Uint8Array(height * this.stride);
	};
	$Franca_CanvasPixelData.op_Explicit = function(data) {
		return data.data;
	};
	global.Franca.CanvasPixelData = $Franca_CanvasPixelData;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.CanvasPixelDataInternalLayout
	var $Franca_CanvasPixelDataInternalLayout = function() {
	};
	$Franca_CanvasPixelDataInternalLayout.__typeName = 'Franca.CanvasPixelDataInternalLayout';
	global.Franca.CanvasPixelDataInternalLayout = $Franca_CanvasPixelDataInternalLayout;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ClearOptions
	var $Franca_ClearOptions = function() {
	};
	$Franca_ClearOptions.__typeName = 'Franca.ClearOptions';
	global.Franca.ClearOptions = $Franca_ClearOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ClientMessage
	var $Franca_ClientMessage = function(data) {
		this.type = 0;
		this.data = null;
		this.data = data;
		this.type = 0;
	};
	$Franca_ClientMessage.__typeName = 'Franca.ClientMessage';
	$Franca_ClientMessage.$ctor1 = function(data) {
		this.type = 0;
		this.data = null;
		this.data = data;
		this.type = 1;
	};
	global.Franca.ClientMessage = $Franca_ClientMessage;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ClientSocket
	var $Franca_ClientSocket = function() {
		this.$1$OnConnectField = null;
		this.$1$OnCloseField = null;
		this.$1$OnErrorField = null;
		this.$1$OnMessageField = null;
		this.$disposed = false;
		this.$sock = null;
	};
	$Franca_ClientSocket.__typeName = 'Franca.ClientSocket';
	global.Franca.ClientSocket = $Franca_ClientSocket;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ClientSocketException
	var $Franca_ClientSocketException = function() {
		ss.Exception.call(this);
	};
	$Franca_ClientSocketException.__typeName = 'Franca.ClientSocketException';
	$Franca_ClientSocketException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_ClientSocketException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.ClientSocketException = $Franca_ClientSocketException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Clipboard
	var $Franca_Clipboard = function() {
	};
	$Franca_Clipboard.__typeName = 'Franca.Clipboard';
	$Franca_Clipboard.init = function() {
		if ($Franca_Clipboard.$initialized) {
			return;
		}
		$Franca_Clipboard.$initialized = true;
		$Franca_Clipboard.$platformClipboard = new $Franca_$JSClipboard();
	};
	$Franca_Clipboard.setText = function(text, fromKeyboardShortcut) {
		$Franca_Clipboard.$platformClipboard.$setText(text, fromKeyboardShortcut);
	};
	$Franca_Clipboard.get_text = function() {
		return $Franca_Clipboard.$platformClipboard.get_$text();
	};
	$Franca_Clipboard.get_$provider = function() {
		return $Franca_Clipboard.$platformClipboard;
	};
	global.Franca.Clipboard = $Franca_Clipboard;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.CloseCode
	var $Franca_CloseCode = function() {
	};
	$Franca_CloseCode.__typeName = 'Franca.CloseCode';
	global.Franca.CloseCode = $Franca_CloseCode;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Colors
	var $Franca_Colors = function() {
		this.topLeft = ss.getDefaultValue(Franca.Color);
		this.topRight = ss.getDefaultValue(Franca.Color);
		this.bottomLeft = ss.getDefaultValue(Franca.Color);
		this.bottomRight = ss.getDefaultValue(Franca.Color);
	};
	$Franca_Colors.__typeName = 'Franca.Colors';
	$Franca_Colors.$ctor1 = function(color) {
		$Franca_Colors.$ctor5.call(this, color, color, color, color);
	};
	$Franca_Colors.$ctor5 = function(topLeft, topRight, bottomLeft, bottomRight) {
		this.topLeft = ss.getDefaultValue(Franca.Color);
		this.topRight = ss.getDefaultValue(Franca.Color);
		this.bottomLeft = ss.getDefaultValue(Franca.Color);
		this.bottomRight = ss.getDefaultValue(Franca.Color);
		this.topLeft = topLeft;
		this.topRight = topRight;
		this.bottomLeft = bottomLeft;
		this.bottomRight = bottomRight;
	};
	$Franca_Colors.$ctor4 = function(color, premultiplied) {
		$Franca_Colors.$ctor7.call(this, color, color, color, color, true);
	};
	$Franca_Colors.$ctor7 = function(topLeft, topRight, bottomLeft, bottomRight, premultiplied) {
		this.topLeft = ss.getDefaultValue(Franca.Color);
		this.topRight = ss.getDefaultValue(Franca.Color);
		this.bottomLeft = ss.getDefaultValue(Franca.Color);
		this.bottomRight = ss.getDefaultValue(Franca.Color);
		this.topLeft = new Franca.Color.$ctor3(topLeft, premultiplied);
		this.topRight = new Franca.Color.$ctor3(topRight, premultiplied);
		this.bottomLeft = new Franca.Color.$ctor3(bottomLeft, premultiplied);
		this.bottomRight = new Franca.Color.$ctor3(bottomRight, premultiplied);
	};
	$Franca_Colors.$ctor3 = function(color, premultiplied) {
		$Franca_Colors.$ctor6.call(this, color, color, color, color, true);
	};
	$Franca_Colors.$ctor6 = function(topLeft, topRight, bottomLeft, bottomRight, premultiplied) {
		this.topLeft = ss.getDefaultValue(Franca.Color);
		this.topRight = ss.getDefaultValue(Franca.Color);
		this.bottomLeft = ss.getDefaultValue(Franca.Color);
		this.bottomRight = ss.getDefaultValue(Franca.Color);
		this.topLeft = new Franca.Color.$ctor2(topLeft, premultiplied);
		this.topRight = new Franca.Color.$ctor2(topRight, premultiplied);
		this.bottomLeft = new Franca.Color.$ctor2(bottomLeft, premultiplied);
		this.bottomRight = new Franca.Color.$ctor2(bottomRight, premultiplied);
	};
	$Franca_Colors.$ctor2 = function(reader) {
		this.topLeft = ss.getDefaultValue(Franca.Color);
		this.topRight = ss.getDefaultValue(Franca.Color);
		this.bottomLeft = ss.getDefaultValue(Franca.Color);
		this.bottomRight = ss.getDefaultValue(Franca.Color);
		this.topLeft = ss.getDefaultValue(Franca.Color);
		this.topRight = ss.getDefaultValue(Franca.Color);
		this.bottomLeft = ss.getDefaultValue(Franca.Color);
		this.bottomRight = ss.getDefaultValue(Franca.Color);
		if (!reader.isObject()) {
			throw new Franca.Serialization.Streaming.StreamingJsonTempException();
		}
		var _requiredField_color0 = false;
		var _requiredField_color1 = false;
		var _requiredField_color2 = false;
		var _requiredField_color3 = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new Franca.Serialization.Streaming.StreamingJsonTempException();
					}
					case 'color0': {
						{
							_requiredField_color0 = true;
							this.topLeft = new Franca.Color.$ctor1(reader);
						}
						break;
					}
					case 'color1': {
						{
							_requiredField_color1 = true;
							this.topRight = new Franca.Color.$ctor1(reader);
						}
						break;
					}
					case 'color2': {
						{
							_requiredField_color2 = true;
							this.bottomLeft = new Franca.Color.$ctor1(reader);
						}
						break;
					}
					case 'color3': {
						{
							_requiredField_color3 = true;
							this.bottomRight = new Franca.Color.$ctor1(reader);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_color0 || !_requiredField_color1 || !_requiredField_color2 || !_requiredField_color3) {
			throw new Franca.Serialization.Streaming.StreamingJsonTempException();
		}
	};
	$Franca_Colors.getDefaultValue = function() {
		return new $Franca_Colors();
	};
	$Franca_Colors.op_Implicit$1 = function(colors) {
		return new $Franca_HdrColors.$ctor5(Franca.Color.op_Implicit(colors.topLeft), Franca.Color.op_Implicit(colors.topRight), Franca.Color.op_Implicit(colors.bottomLeft), Franca.Color.op_Implicit(colors.bottomRight));
	};
	$Franca_Colors.op_Implicit = function(color) {
		return new $Franca_Colors.$ctor1(color);
	};
	global.Franca.Colors = $Franca_Colors;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ContainerPosition
	var $Franca_ContainerPosition = function() {
	};
	$Franca_ContainerPosition.__typeName = 'Franca.ContainerPosition';
	global.Franca.ContainerPosition = $Franca_ContainerPosition;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ContentManager
	var $Franca_ContentManager = function(graphicsDevice, contentRoot) {
		this.$graphicsDevice = null;
		this.$contentRoot = null;
		this.$assets = null;
		this.$typePaths = null;
		this.$loadingAssets = null;
		this.$spriteFonts = null;
		this.$disposed = false;
		this.$1$DefaultFontField = null;
		this.$graphicsDevice = graphicsDevice;
		this.$contentRoot = contentRoot;
		this.$assets = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_IAsset]))();
		this.$typePaths = new (ss.makeGenericType(ss.Dictionary$2, [Function, String]))();
		//typeExtensions = new Dictionary<Type, HashSet<string>>();
		this.$loadingAssets = [];
		this.$spriteFonts = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_SpriteFont]))();
		graphicsDevice.$registerContentManager(this);
		if (!$Franca_ContentManager.$b32infoLoaded) {
			if ($Franca_File.isVirtualFile(Franca.Platform.combinePaths('_base32info.dat'), 0)) {
				this.load($Franca_JS_Base32Info).call(this, '_base32info.dat', []);
				$Franca_ContentManager.$b32infoLoaded = true;
			}
		}
	};
	$Franca_ContentManager.__typeName = 'Franca.ContentManager';
	$Franca_ContentManager.get_$fonts = function() {
		return $Franca_ContentManager.$fonts;
	};
	global.Franca.ContentManager = $Franca_ContentManager;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DeadzoneProcessingStyle
	var $Franca_DeadzoneProcessingStyle = function() {
	};
	$Franca_DeadzoneProcessingStyle.__typeName = 'Franca.DeadzoneProcessingStyle';
	global.Franca.DeadzoneProcessingStyle = $Franca_DeadzoneProcessingStyle;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DebugGraph
	var $Franca_DebugGraph = function(color, label) {
		this.$canvas = null;
		this.$texture = null;
		this.$counts = null;
		this.$1$ColorField = ss.getDefaultValue(Franca.Color);
		this.$1$LabelField = null;
		this.$1$SeparatePeriodsField = false;
		this.$canvas = new $Franca_Canvas.$ctor3($Franca_DebugGraph.width, $Franca_DebugGraph.height);
		this.$texture = new $Franca_Texture.$ctor3(this.$canvas, true, false, false);
		this.$counts = new (ss.makeGenericType(Franca.Collections.Buffer$1, [ss.Int32]))(this.$canvas.get_width());
		this.set_color(color);
		this.set_label(label);
		this.set_separatePeriods(true);
	};
	$Franca_DebugGraph.__typeName = 'Franca.DebugGraph';
	$Franca_DebugGraph.init = function(device, fnt) {
		$Franca_DebugGraph.$batch = new $Franca_SpriteBatch(device);
		$Franca_DebugGraph.$font = fnt;
	};
	global.Franca.DebugGraph = $Franca_DebugGraph;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DebugOptions
	var $Franca_DebugOptions = function() {
		this.$1$OpenGLField = null;
		var $t1 = new $Franca_OpenGLDebugOptions();
		$t1.set_debug(false);
		$t1.set_frequency(0);
		$t1.set_interval(new ss.TimeSpan(1 * 10000000));
		this.set_openGL($t1);
	};
	$Franca_DebugOptions.__typeName = 'Franca.DebugOptions';
	global.Franca.DebugOptions = $Franca_DebugOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DepthPrecision
	var $Franca_DepthPrecision = function() {
	};
	$Franca_DepthPrecision.__typeName = 'Franca.DepthPrecision';
	global.Franca.DepthPrecision = $Franca_DepthPrecision;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Effect
	var $Franca_Effect = function() {
		this.$programs = null;
		this.$parameters = null;
		this.$programOrder = null;
		this.$programCol = null;
		this.$fileRes = null;
		this.$content = null;
		this.$loadingShaders = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		this.$programs = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_ShaderProgram]))();
		this.$programCol = new $Franca_ShaderProgramCollection.$ctor1(this.$programs);
		this.$parameters = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_ShaderParamCollection]))();
		this.$programOrder = [];
	};
	$Franca_Effect.__typeName = 'Franca.Effect';
	global.Franca.Effect = $Franca_Effect;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Features
	var $Franca_Features = function() {
	};
	$Franca_Features.__typeName = 'Franca.Features';
	global.Franca.Features = $Franca_Features;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.File
	var $Franca_File = function() {
	};
	$Franca_File.__typeName = 'Franca.File';
	$Franca_File.addVirtualFiles = function(binFile) {
		var $t1 = binFile.getEnumerator();
		try {
			while ($t1.moveNext()) {
				var entry = $t1.current();
				var name = $Franca_File.transformPath(entry.name, 0);
				if ($Franca_File.$virtualFiles.containsKey(name)) {
					throw new $Franca_FileLoadException.$ctor1("Virtual file collision, file '" + name + "' was added twice.");
				}
				$Franca_File.$virtualFiles.set_item(name, entry);
			}
		}
		finally {
			$t1.dispose();
		}
	};
	$Franca_File.$getVirtualFile = function(location) {
		var entry = {};
		if ($Franca_File.$virtualFiles.tryGetValue(location, entry)) {
			return entry.$;
		}
		return null;
	};
	$Franca_File.isVirtualFile = function(location, locType) {
		location = $Franca_File.transformPath(location, locType);
		return $Franca_File.$virtualFiles.containsKey(location) || ss.contains($Franca_File.$objectUrls.get_values(), location);
	};
	$Franca_File.transformPath = function(location, locType) {
		if (Franca.Platform.isPathRooted(location) || locType === 3) {
			return Franca.Platform.getFullPath(location);
		}
		if (locType === 0) {
			return Franca.Platform.combinePaths$2(Franca.Platform.get_appContentPath(), Franca.Platform.normalizePath(location, null));
		}
		else if (locType === 1 || locType === 2) {
			throw new ss.NotImplementedException('Cannot call Platform.GetStoragePath in JS');
		}
		else {
			throw new ss.NotImplementedException('Unknown FileLocation type ' + System.EnumExtensions.getName($Franca_FileLocation).call(null, locType) + ' in File.TransformPath');
		}
	};
	$Franca_File.load = function(T) {
		return function(location, onLoad, name) {
			return $Franca_File.load$3(T).call(null, location, onLoad, null, 0, name);
		};
	};
	$Franca_File.load$2 = function(T) {
		return function(location, onLoad, locType, name) {
			return $Franca_File.load$3(T).call(null, location, onLoad, null, locType, name);
		};
	};
	$Franca_File.load$1 = function(T) {
		return function(location, onLoad, onError, name) {
			return $Franca_File.load$3(T).call(null, location, onLoad, onError, 0, name);
		};
	};
	$Franca_File.load$3 = function(T) {
		return function(location, onLoad, onError, locType, name) {
			location = $Franca_File.transformPath(location, locType);
			var loadedFrom = System.TypeExtensions.getAttribute$1(Franca.LoadableFromAttribute).call(null, T, false);
			if (ss.isNullOrUndefined(loadedFrom)) {
				throw new $Franca_MissingAttributeException.$ctor2(T, Franca.LoadableFromAttribute);
			}
			var constructor = null;
			if (loadedFrom.fileType === 0) {
				constructor = ss.getMembers(T, 1, 284, null, [$Franca_Canvas]);
				if (ss.isNullOrUndefined(constructor)) {
					throw new $Franca_MissingConstructorException.$ctor2(T, [$Franca_Canvas]);
				}
			}
			else if (loadedFrom.fileType === 1) {
				constructor = ss.getMembers(T, 1, 284, null, [Franca.BinaryData]);
				if (ss.isNullOrUndefined(constructor)) {
					throw new $Franca_MissingConstructorException.$ctor2(T, [Franca.BinaryData]);
				}
			}
			else if (loadedFrom.fileType === 2) {
				constructor = ss.getMembers(T, 1, 284, null, [String]);
				if (ss.isNullOrUndefined(constructor)) {
					throw new $Franca_MissingConstructorException.$ctor2(T, [String]);
				}
			}
			else if (loadedFrom.fileType === 3) {
				constructor = ss.getMembers(T, 1, 284, null, [$Franca_Audio_Sound]);
				if (ss.isNullOrUndefined(constructor)) {
					throw new $Franca_MissingConstructorException.$ctor2(T, [$Franca_Audio_Sound]);
				}
			}
			else if (loadedFrom.fileType === 4) {
				constructor = ss.getMembers(T, 1, 284, null, [$Franca_Audio_Music]);
				if (ss.isNullOrUndefined(constructor)) {
					throw new $Franca_MissingConstructorException.$ctor2(T, [$Franca_Audio_Music]);
				}
			}
			else if (loadedFrom.fileType === 5) {
				constructor = ss.getMembers(T, 1, 284, null, [$Franca_Gif_AnimatedGif]);
				if (ss.isNullOrUndefined(constructor)) {
					throw new $Franca_MissingConstructorException.$ctor2(T, [$Franca_Gif_AnimatedGif]);
				}
			}
			var res = new (ss.makeGenericType($Franca_FileResult$1, [T]))(constructor, loadedFrom.fileType, location, name, onLoad, onError);
			$Franca_File.$loadingList.push(res);
			switch (loadedFrom.fileType) {
				default:
				case 1: {
					$Franca_File.$loadBinary(T).call(null, res, location, onLoad, name);
					break;
				}
				case 2: {
					$Franca_File.$loadText(T).call(null, res, location, onLoad, name);
					break;
				}
				case 0: {
					$Franca_File.$loadCanvas(T).call(null, res, location, onLoad, name);
					break;
				}
				case 3: {
					$Franca_File.$loadSound(T).call(null, res, location, onLoad, name);
					break;
				}
				case 4: {
					$Franca_File.$loadMusic(T).call(null, res, location, onLoad, name);
					break;
				}
				case 5: {
					$Franca_File.$loadGif(T).call(null, res, location, onLoad, name);
					break;
				}
			}
			return res;
		};
	};
	$Franca_File.$fileLoaded = function(T) {
		return function(result) {
			ss.remove($Franca_File.$loadingList, result);
			if (ss.isNullOrUndefined(result.get_error())) {
				if (result.get_type() === 0) {
					var canvas = $Franca_File.$imageToCanvas(result);
					var final1 = result.invokeConstructor([canvas]);
					result.$setValue(final1);
				}
				else if (result.get_type() === 1) {
					var bin = $Franca_File.$requestToBinaryData(result);
					var final2 = result.invokeConstructor([bin]);
					result.$setValue(final2);
				}
				else if (result.get_type() === 2) {
					var str = $Franca_File.$requestToText(result);
					var final3 = result.invokeConstructor([str]);
					result.$setValue(final3);
				}
				else if (result.get_type() === 3) {
					var sound = $Franca_File.$bufferedAudioToSound(result);
					var final4 = result.invokeConstructor([sound]);
					result.$setValue(final4);
				}
				else if (result.get_type() === 4) {
					var music = $Franca_File.$streamingAudioToMusic(result);
					var final5 = result.invokeConstructor([music]);
					result.$setValue(final5);
				}
				else if (result.get_type() === 5) {
					var gif = $Franca_File.$getAnimatedGif(result);
					var final6 = result.invokeConstructor([gif]);
					result.$setValue(final6);
				}
				result.set_loaded(true);
			}
			// remove anonymous event listener functions and the event target as we don't need it anymore
			// do this so we're assured that the object is garbage collected properly
			result.$removeListeners();
			result.set_$eventTarget(null);
			$Franca_File.$loadedList.push(result);
		};
	};
	$Franca_File.update = function() {
		while ($Franca_File.$loadedList.length > 0) {
			// use MemoryFailPoint?
			var file = $Franca_File.$loadedList[$Franca_File.$loadedList.length - 1].get_location();
			try {
				var index = $Franca_File.$loadedList.length - 1;
				var res = $Franca_File.$loadedList[index];
				ss.removeAt($Franca_File.$loadedList, index);
				if (ss.isNullOrUndefined(res.get_error())) {
					if (!ss.staticEquals(res.get_$onLoad(), null)) {
						res.get_$onLoad()(res);
					}
				}
				else if (!ss.staticEquals(res.get_$onError(), null)) {
					res.get_$onError()(res);
				}
				else {
					throw res.get_error();
				}
			}
			catch ($t1) {
				throw $t1;
			}
		}
	};
	$Franca_File.mimeTypeFromFile = function(file) {
		if (ss.isNullOrUndefined(file)) {
			throw new ss.ArgumentNullException('file');
		}
		var ext = Franca.Platform.getExtension(file);
		return $Franca_File.mimeTypeFromExt(ext);
	};
	$Franca_File.mimeTypeFromExt = function(ext) {
		if (ss.isNullOrUndefined(ext)) {
			throw new ss.ArgumentNullException('ext');
		}
		switch (System.StringExtensions.toLowerInvariant(ext)) {
			case 'txt':
			case 'ini':
			case 'json':
			case 'js':
			case 'frag':
			case 'vert': {
				return 'text/plain';
			}
			case 'htm':
			case 'html':
			case 'php':
			case 'asp':
			case 'aspx': {
				return 'text/html';
			}
			case 'png': {
				return 'image/png';
			}
			case 'jpg':
			case 'jpeg': {
				return 'image/jpeg';
			}
			case 'gif': {
				return 'image/gif';
			}
			case 'bmp': {
				return 'image/bmp';
			}
			case 'svg': {
				return 'image/svg+xml';
			}
			case 'ogg': {
				return 'audio/ogg';
			}
			case 'mid':
			case 'midi': {
				return 'audio/midi';
			}
			case 'wav': {
				return 'audio/wav';
			}
			case 'mp4': {
				return 'audio/mp4';
			}
			case 'mp3': {
				return 'audio/mpeg';
			}
			case 'tga': {
				return 'image/x-targa';
			}
			default: {
				return 'application/octet-stream';
			}
		}
	};
	$Franca_File.$getObjectUrl = function(location, mimeType) {
		var url = {};
		if ($Franca_File.$objectUrls.tryGetValue(location, url)) {
			return url.$;
		}
		var entry = {};
		if ($Franca_File.$virtualFiles.tryGetValue(location, entry)) {
			var $t2 = entry.$.read();
			var $t1 = mimeType;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = $Franca_File.mimeTypeFromFile(location);
			}
			url.$ = $t2.toUrl($t1);
			$Franca_File.$objectUrls.set_item(location, url.$);
			return url.$;
		}
		return null;
	};
	$Franca_File.$loadCanvas = function(T) {
		return function(res, location, onLoad, name) {
			var img = new Image();
			res.set_$eventTarget(img);
			res.get_$events().set_item('load', function() {
				$Franca_File.$jsFileLoaded(T).call(null, res);
			});
			//res.Listeners["error"] = () => { FileError(res); }; // TODO: implement
			res.$attachListeners();
			if ($Franca_File.$loadingList.length > $Franca_File.maxConcurrentLoadingFiles) {
				$Franca_File.$queuedFiles.push(res);
			}
			else {
				var virt = $Franca_File.$getObjectUrl(location, null);
				img.src = ss.coalesce(virt, location);
			}
		};
	};
	$Franca_File.$loadBinary = function(T) {
		return function(res, location, onLoad, name) {
			var virt = $Franca_File.$getVirtualFile(location);
			if (ss.isNullOrUndefined(virt)) {
				var xReq = new XMLHttpRequest();
				xReq.open('GET', location, true);
				xReq.responseType = 'arraybuffer';
				res.set_$eventTarget(xReq);
				res.get_$events().set_item('load', function() {
					$Franca_File.$jsFileLoaded(T).call(null, res);
				});
				//res.Events["error"] = () => { Console.WriteLine("FILE ERROR " + res); }; // TODO: implement
				res.$attachListeners();
				if ($Franca_File.$loadingList.length > $Franca_File.maxConcurrentLoadingFiles) {
					$Franca_File.$queuedFiles.push(res);
				}
				else {
					xReq.send();
				}
			}
			else {
				res.set_$extra(virt);
				$Franca_File.$jsFileSyncLoaded(T).call(null, res);
			}
		};
	};
	$Franca_File.$loadText = function(T) {
		return function(res, location, onLoad, name) {
			var virt = $Franca_File.$getVirtualFile(location);
			if (ss.isNullOrUndefined(virt)) {
				var xReq = new XMLHttpRequest();
				xReq.open('GET', location, true);
				xReq.responseType = 'text';
				res.set_$eventTarget(xReq);
				res.get_$events().set_item('load', function() {
					$Franca_File.$jsFileLoaded(T).call(null, res);
				});
				//res.Listeners["error"] = () => { FileError(res); }; // TODO: implement
				res.$attachListeners();
				if ($Franca_File.$loadingList.length > $Franca_File.maxConcurrentLoadingFiles) {
					$Franca_File.$queuedFiles.push(res);
				}
				else {
					xReq.send();
				}
			}
			else {
				res.set_$extra(virt);
				$Franca_File.$jsFileSyncLoaded(T).call(null, res);
			}
		};
	};
	$Franca_File.$loadSound = function(T) {
		return function(res, location, onLoad, name) {
			if (ss.isNullOrUndefined($Franca_Audio_AudioContext.audioExtension)) {
				$Franca_File.$jsFileSyncLoaded(T).call(null, res);
				return;
			}
			if ($Franca_FrancaFramework.isSupported(2)) {
				var virt = $Franca_File.$getVirtualFile(location + $Franca_Audio_AudioContext.audioExtension);
				if (ss.isNullOrUndefined(virt)) {
					var xReq = new XMLHttpRequest();
					xReq.open('GET', location + $Franca_Audio_AudioContext.audioExtension, true);
					xReq.responseType = 'arraybuffer';
					res.set_$eventTarget(xReq);
					res.get_$events().set_item('load', function() {
						ss.cast($Franca_Audio_AudioContext.$platformAudio, $Franca_Audio_$JSAudio).$webAudioContext.decodeAudioData(ss.cast(xReq.response, ArrayBuffer), function(b) {
							res.set_$extra(b);
							$Franca_File.$jsFileLoaded(T).call(null, res);
						});
						// TODO: add onError callback
					});
					//res.Events["load"] = () => { JSFileLoaded(res); };
					//res.Listeners["error"] = () => { FileError(res); }; // TODO: implement
					res.$attachListeners();
					if ($Franca_File.$loadingList.length > $Franca_File.maxConcurrentLoadingFiles) {
						$Franca_File.$queuedFiles.push(res);
					}
					else {
						xReq.send();
					}
				}
				else {
					ss.cast($Franca_Audio_AudioContext.$platformAudio, $Franca_Audio_$JSAudio).$webAudioContext.decodeAudioData(virt.read().get_uint8Array().buffer, function(b1) {
						res.set_$extra(b1);
						$Franca_File.$jsFileLoaded(T).call(null, res);
					});
				}
			}
			else {
				var entry = $Franca_File.$getVirtualFile(location + $Franca_Audio_AudioContext.audioExtension);
				var virt1 = ss.formatString('data:{0};base64,{1}', $Franca_File.mimeTypeFromFile(location + $Franca_Audio_AudioContext.audioExtension), Franca.Text.Base64.encode(entry.read()));
				var snd = new $Franca_JS_SimpleAudio_StreamedSound.$ctor1(null, ss.coalesce(virt1, location), ss.isNullOrUndefined(virt1), 2);
				snd.add_onLoad(function(s) {
					$Franca_File.$jsFileLoaded(T).call(null, res);
				});
				res.set_$extra(snd);
				if ($Franca_File.$loadingList.length > $Franca_File.maxConcurrentLoadingFiles) {
					$Franca_File.$queuedFiles.push(res);
				}
				else {
					snd.load();
				}
			}
		};
	};
	$Franca_File.$loadMusic = function(T) {
		return function(res, location, onLoad, name) {
			if (ss.isNullOrUndefined($Franca_Audio_AudioContext.audioExtension)) {
				$Franca_File.$jsFileSyncLoaded(T).call(null, res);
				return;
			}
			var virt = null;
			if ($Franca_FrancaFramework.isSupported(2)) {
				// if web audio is supported assume we're on a relatively recent browser
				virt = $Franca_File.$getObjectUrl(location + $Franca_Audio_AudioContext.audioExtension, null);
			}
			else {
				var entry = $Franca_File.$getVirtualFile(location + $Franca_Audio_AudioContext.audioExtension);
				if (ss.isValue(entry)) {
					virt = ss.formatString('data:{0};base64,{1}', $Franca_File.mimeTypeFromFile(location + $Franca_Audio_AudioContext.audioExtension), Franca.Text.Base64.encode(entry.read()));
				}
			}
			var mus = new $Franca_JS_SimpleAudio_StreamedMusic.$ctor1(null, ss.coalesce(virt, location), ss.isNullOrUndefined(virt));
			mus.add_onLoad(function(s) {
				$Franca_File.$jsFileLoaded(T).call(null, res);
			});
			res.set_$extra(mus);
			if ($Franca_File.$loadingList.length > $Franca_File.maxConcurrentLoadingFiles && Franca.Platform.get_type() !== 4) {
				$Franca_File.$queuedFiles.push(res);
			}
			else {
				mus.load();
			}
		};
	};
	$Franca_File.$loadGif = function(T) {
		return function(res, location, onLoad, name) {
			var virt = $Franca_File.$getVirtualFile(location);
			if (ss.isNullOrUndefined(virt)) {
				var xReq = new XMLHttpRequest();
				xReq.open('GET', location, true);
				xReq.responseType = 'arraybuffer';
				res.set_$eventTarget(xReq);
				res.get_$events().set_item('load', function() {
					$Franca_File.$jsFileLoaded(T).call(null, res);
				});
				res.$attachListeners();
				if ($Franca_File.$loadingList.length > $Franca_File.maxConcurrentLoadingFiles) {
					$Franca_File.$queuedFiles.push(res);
				}
				else {
					xReq.send();
				}
			}
			else {
				res.set_$extra(virt);
				$Franca_File.$jsFileSyncLoaded(T).call(null, res);
			}
		};
	};
	$Franca_File.$jsFileLoaded = function(T) {
		return function(result) {
			$Franca_File.$fileLoaded(T).call(null, result);
			$Franca_File.$dequeueFile();
		};
	};
	$Franca_File.$jsFileSyncLoaded = function(T) {
		return function(result) {
			$Franca_File.$fileLoaded(T).call(null, result);
		};
	};
	$Franca_File.$dequeueFile = function() {
		if ($Franca_File.$queuedFiles.length > 0) {
			var file = $Franca_File.$queuedFiles.shift();
			if (file.get_type() === 0) {
				var virt = $Franca_File.$getObjectUrl(file.get_location(), null);
				var $t1 = file.get_$eventTarget();
				var $t3 = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'IMG'));
				var $t2 = virt;
				if (ss.isNullOrUndefined($t2)) {
					$t2 = file.get_location();
				}
				$t3.src = $t2;
			}
			else if (file.get_type() === 1 || file.get_type() === 2 || file.get_type() === 5) {
				var xReq = ss.safeCast(file.get_$eventTarget(), XMLHttpRequest);
				xReq.send();
			}
			else if (file.get_type() === 3) {
				if ($Franca_FrancaFramework.isSupported(2)) {
					var xReq1 = ss.safeCast(file.get_$eventTarget(), XMLHttpRequest);
					xReq1.send();
				}
				else {
					var snd = ss.safeCast(file.get_$extra(), $Franca_JS_SimpleAudio_StreamedSound);
					snd.load();
				}
			}
			else if (file.get_type() === 4) {
				var mus = ss.safeCast(file.get_$extra(), $Franca_JS_SimpleAudio_StreamedMusic);
				mus.load();
			}
		}
	};
	$Franca_File.$imageToCanvas = function(result) {
		// TODO: This will nuke transparent pixels, need custom PNG loader :/
		// https://github.com/devongovett/png.js/blob/master/png.js
		var $t1 = result.get_$eventTarget();
		var image = ss.safeCast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'IMG'));
		var canvas = new $Franca_Canvas.$ctor3(image.width, image.height);
		var context = ss.safeCast(ss.cast(canvas.get_bitmap(), $Franca_JSBitmap).get_bitmap().getContext('2d'), CanvasRenderingContext2D);
		context.drawImage(image, 0, 0);
		return canvas;
	};
	$Franca_File.$requestToBinaryData = function(result) {
		var virt = ss.safeCast(result.get_$extra(), $Franca_Collections_BinFileEntry);
		if (ss.isValue(virt)) {
			return virt.read();
		}
		else {
			var xReq = ss.safeCast(result.get_$eventTarget(), XMLHttpRequest);
			if (xReq.readyState !== 4 || xReq.status !== 200) {
				throw new $Franca_FileLoadException.$ctor1("File '" + result.get_location() + "' could not be loaded (readyState: " + xReq.readyState + ', status: ' + xReq.status + ')');
			}
			var bin = new Franca.BinaryData.$ctor_fromArrayBuffer(ss.cast(xReq.response, ArrayBuffer));
			return bin;
		}
	};
	$Franca_File.$requestToText = function(result) {
		var virt = ss.safeCast(result.get_$extra(), $Franca_Collections_BinFileEntry);
		if (ss.isValue(virt)) {
			return Franca.Text.UTF8.fromBinaryData(virt.read(), true);
		}
		else {
			var xReq = ss.safeCast(result.get_$eventTarget(), XMLHttpRequest);
			if (xReq.readyState !== 4 || xReq.status !== 200) {
				throw new $Franca_FileLoadException.$ctor1("File '" + result.get_location() + "' could not be loaded (readyState: " + xReq.readyState + ', status: ' + xReq.status + ')');
			}
			var str = ss.cast(xReq.response, String);
			return str;
		}
	};
	$Franca_File.$bufferedAudioToSound = function(result) {
		if (ss.isNullOrUndefined($Franca_Audio_AudioContext.audioExtension)) {
			return new $Franca_Audio_Sound.$ctor1(null);
		}
		if ($Franca_FrancaFramework.isSupported(2)) {
			var buffer = ss.cast(result.get_$extra(), AudioBuffer);
			var sound = new $Franca_Audio_Sound.$ctor1(new $Franca_JS_WebAudio_BufferedSound(buffer));
			return sound;
		}
		else {
			var snd = ss.cast(result.get_$extra(), $Franca_JS_SimpleAudio_StreamedSound);
			var sound1 = new $Franca_Audio_Sound.$ctor1(snd);
			return sound1;
		}
	};
	$Franca_File.$streamingAudioToMusic = function(result) {
		if (ss.isNullOrUndefined($Franca_Audio_AudioContext.audioExtension)) {
			return new $Franca_Audio_Music.$ctor1(null);
		}
		var mus = ss.cast(result.get_$extra(), $Franca_JS_SimpleAudio_StreamedMusic);
		var music = new $Franca_Audio_Music.$ctor1(mus);
		return music;
	};
	$Franca_File.$getAnimatedGif = function(result) {
		var data = $Franca_File.$requestToBinaryData(result);
		return new $Franca_Gif_AnimatedGif.$ctor1(data);
	};
	global.Franca.File = $Franca_File;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.FileLoadException
	var $Franca_FileLoadException = function() {
		ss.Exception.call(this);
	};
	$Franca_FileLoadException.__typeName = 'Franca.FileLoadException';
	$Franca_FileLoadException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_FileLoadException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.FileLoadException = $Franca_FileLoadException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.FileLocation
	var $Franca_FileLocation = function() {
	};
	$Franca_FileLocation.__typeName = 'Franca.FileLocation';
	global.Franca.FileLocation = $Franca_FileLocation;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.FileResult
	var $Franca_FileResult = function() {
		this.$constructor = null;
		this.$type = 0;
		this.$location = null;
		this.value = null;
		this.$name = null;
		this.$onLoad = null;
		this.$onError = null;
		this.$loaded = false;
		this.$error = null;
		this.$eventTarget = null;
		this.$events = null;
		this.$extra = null;
		this.$events = new (ss.makeGenericType(ss.Dictionary$2, [String, Function]))();
	};
	$Franca_FileResult.__typeName = 'Franca.FileResult';
	$Franca_FileResult.$ctor1 = function(constructor, type, location, name, onLoad, onError) {
		$Franca_FileResult.call(this);
		this.$type = type;
		this.$location = location;
		this.$name = name;
		this.$onLoad = onLoad;
		this.$onError = onError;
		this.$constructor = constructor;
	};
	global.Franca.FileResult = $Franca_FileResult;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.FileResult
	var $Franca_FileResult$1 = function(T) {
		var $type = function(constructor, type, location, name, onLoad, onError) {
			$Franca_FileResult.$ctor1.call(this, constructor, type, location, name, onLoad, onError);
		};
		ss.registerGenericClassInstance($type, $Franca_FileResult$1, [T], {
			invokeConstructor: function(args) {
				return ss.safeCast(ss.invokeCI(this.get_constructor(), args), T);
			},
			get_value: function() {
				if (this.get_loaded()) {
					return ss.safeCast(this.value, T);
				}
				return null;
			}
		}, function() {
			return $Franca_FileResult;
		}, function() {
			return [];
		});
		return $type;
	};
	$Franca_FileResult$1.__typeName = 'Franca.FileResult$1';
	ss.initGenericClass($Franca_FileResult$1, $asm, 1);
	global.Franca.FileResult$1 = $Franca_FileResult$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.FloatType
	var $Franca_FloatType = function() {
	};
	$Franca_FloatType.__typeName = 'Franca.FloatType';
	global.Franca.FloatType = $Franca_FloatType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Font
	var $Franca_Font = function() {
		this.$provider = null;
		this.$unitsPerEm = 0;
		this.$metrics = ss.getDefaultValue($Franca_FontMetrics);
		this.$strokeWidth = -1;
		this.$disposed = false;
		this.$fileRes = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$provider = new $Franca_JSFontProvider();
	};
	$Franca_Font.__typeName = 'Franca.Font';
	$Franca_Font.$ctor1 = function(data) {
		$Franca_Font.call(this);
		this.$provider.$initialize(this, data);
	};
	global.Franca.Font = $Franca_Font;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.FontMetrics
	var $Franca_FontMetrics = function() {
		this.$ascent = 0;
		this.$descent = 0;
		this.$linegap = 0;
		this.$xMin = 0;
		this.$yMin = 0;
		this.$xMax = 0;
		this.$yMax = 0;
	};
	$Franca_FontMetrics.__typeName = 'Franca.FontMetrics';
	$Franca_FontMetrics.$ctor3 = function(ascent, descent, linegap, xMin, yMin, xMax, yMax) {
		this.$ascent = 0;
		this.$descent = 0;
		this.$linegap = 0;
		this.$xMin = 0;
		this.$yMin = 0;
		this.$xMax = 0;
		this.$yMax = 0;
		this.$ascent = ascent;
		this.$descent = descent;
		this.$linegap = linegap;
		this.$xMin = xMin;
		this.$yMin = yMin;
		this.$xMax = xMax;
		this.$yMax = yMax;
	};
	$Franca_FontMetrics.$ctor1 = function(source, scale) {
		this.$ascent = 0;
		this.$descent = 0;
		this.$linegap = 0;
		this.$xMin = 0;
		this.$yMin = 0;
		this.$xMax = 0;
		this.$yMax = 0;
		this.$ascent = source.$ascent * scale;
		this.$descent = source.$descent * scale;
		this.$linegap = source.$linegap * scale;
		this.$xMin = source.$xMin * scale;
		this.$yMin = source.$yMin * scale;
		this.$xMax = source.$xMax * scale;
		this.$yMax = source.$yMax * scale;
	};
	$Franca_FontMetrics.$ctor2 = function(source, unitsPerEm, fontSize) {
		$Franca_FontMetrics.$ctor1.call(this, source, 1 / unitsPerEm * fontSize);
	};
	$Franca_FontMetrics.getDefaultValue = function() {
		return new $Franca_FontMetrics();
	};
	$Franca_FontMetrics.op_Multiply = function(metrics, scale) {
		return new $Franca_FontMetrics.$ctor1(metrics, scale);
	};
	$Franca_FontMetrics.op_Multiply$1 = function(scale, metrics) {
		return new $Franca_FontMetrics.$ctor1(metrics, scale);
	};
	global.Franca.FontMetrics = $Franca_FontMetrics;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.FrancaFramework
	var $Franca_FrancaFramework = function() {
	};
	$Franca_FrancaFramework.__typeName = 'Franca.FrancaFramework';
	$Franca_FrancaFramework.$b32Dict = function() {
		return $Franca_FrancaFramework.$_w;
	};
	$Franca_FrancaFramework.get_isInitialized = function() {
		return $Franca_FrancaFramework.$1$IsInitializedField;
	};
	$Franca_FrancaFramework.set_isInitialized = function(value) {
		$Franca_FrancaFramework.$1$IsInitializedField = value;
	};
	$Franca_FrancaFramework.get_entryAssembly = function() {
		return $Franca_FrancaFramework.$1$EntryAssemblyField;
	};
	$Franca_FrancaFramework.set_entryAssembly = function(value) {
		$Franca_FrancaFramework.$1$EntryAssemblyField = value;
	};
	$Franca_FrancaFramework.setEntryAssembly = function(t) {
		$Franca_FrancaFramework.set_entryAssembly(ss.getTypeAssembly(t));
	};
	$Franca_FrancaFramework.doInit = function(onLoad, requiredFeatures) {
		if (!ss.staticEquals(onLoad, null)) {
			$Franca_FrancaFramework.$loadAction = function() {
				$Franca_FrancaFramework.initNow(onLoad, requiredFeatures);
			};
			if (!(window.ScriptLoader && window.ContentLoader)) {
				window.addEventListener('load', $Franca_FrancaFramework.$loadAction);
			}
		}
	};
	$Franca_FrancaFramework.initPlatformProviders = function() {
		$Franca_Audio_AudioContext.initPlatform();
	};
	$Franca_FrancaFramework.initFromLoader = function() {
		$Franca_FrancaFramework.$loadAction();
	};
	$Franca_FrancaFramework.initNow = function(onLoad, requiredFeatures) {
		$Franca_FrancaFramework.set_isInitialized(true);
		$Franca_OpenGL_WebGL_GL.init();
		$Franca_Clipboard.init();
		if (!ss.staticEquals($Franca_FrancaFramework.$loadAction, null)) {
			window.removeEventListener('load', $Franca_FrancaFramework.$loadAction);
		}
		$Franca_FrancaFramework.$checkSupportedFeatures(requiredFeatures);
		$Franca_FrancaFramework.initPlatformProviders();
		if (!ss.staticEquals(onLoad, null)) {
			onLoad();
		}
	};
	$Franca_FrancaFramework.$checkSupportedFeatures = function(requiredFeatures) {
		var features = FrancaGlobals.supportedFeatures;
		var notSupported = [];
		if (!ss.contains(features, 'WebWorkers')) {
			notSupported.push('WebWorkers');
		}
		for (var $t1 = 0; $t1 < requiredFeatures.length; $t1++) {
			var feat = requiredFeatures[$t1];
			if (!$Franca_FrancaFramework.isSupported(feat)) {
				var str = System.EnumExtensions.getName($Franca_Features).call(null, feat);
				if (!ss.contains(notSupported, str)) {
					notSupported.push(str);
				}
			}
		}
		if (notSupported.length > 0) {
			throw new ss.NotSupportedException('Cannot run Franca Framework, your browser does not support the following features: ' + Array.prototype.slice.call(notSupported).join(', '));
		}
	};
	$Franca_FrancaFramework.isSupported = function(feature) {
		return $Franca_FrancaFramework.$supportedFeatures.contains(feature);
	};
	global.Franca.FrancaFramework = $Franca_FrancaFramework;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.FullscreenMode
	var $Franca_FullscreenMode = function() {
	};
	$Franca_FullscreenMode.__typeName = 'Franca.FullscreenMode';
	global.Franca.FullscreenMode = $Franca_FullscreenMode;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GameContainer
	var $Franca_GameContainer = function(width, height) {
		this.$customMainLoop = true;
		this.$closed = false;
		this.$anchor = null;
		this.$position = 0;
		this.$graphicsDevice = null;
		this.$audioContext = null;
		this.$videoContext = null;
		this.$content = null;
		this.$nextOGLDebugTime = ss.getDefaultValue(ss.TimeSpan);
		this.$input = null;
		this.$fps = 0;
		this.$timeStep = new ss.TimeSpan(0.0166666666666667 * 10000000);
		this.$maxFrameTime = new ss.TimeSpan(0);
		this.$newResolution = null;
		this.$screenState = 0;
		this.$imeState = null;
		this.$resizable = false;
		this.$window = null;
		this.$idleThrottle = true;
		this.$lastFrameTime = ss.getDefaultValue(ss.TimeSpan);
		this.$_started = Franca.UtcDate.get_now();
		this.$1$OnResolutionChangedField = null;
		this.$disposed = false;
		this.$1$DebugField = null;
		this.$1$IsFixedTimeStepField = false;
		this.$1$DisableAltEnterField = false;
		this.$1$AltEnterFullscreenModeField = 0;
		this.$1$UseAvailableScreenSizeField = false;
		this.$createWindowProvider();
		this.set_debug(new $Franca_DebugOptions());
		this.set_width(width);
		this.set_height(height);
		this.$imeState = new $Franca_Ime_ImeState(this);
	};
	$Franca_GameContainer.__typeName = 'Franca.GameContainer';
	$Franca_GameContainer.$ctor1 = function(anchor, width, height) {
		this.$customMainLoop = true;
		this.$closed = false;
		this.$anchor = null;
		this.$position = 0;
		this.$graphicsDevice = null;
		this.$audioContext = null;
		this.$videoContext = null;
		this.$content = null;
		this.$nextOGLDebugTime = ss.getDefaultValue(ss.TimeSpan);
		this.$input = null;
		this.$fps = 0;
		this.$timeStep = new ss.TimeSpan(0.0166666666666667 * 10000000);
		this.$maxFrameTime = new ss.TimeSpan(0);
		this.$newResolution = null;
		this.$screenState = 0;
		this.$imeState = null;
		this.$resizable = false;
		this.$window = null;
		this.$idleThrottle = true;
		this.$lastFrameTime = ss.getDefaultValue(ss.TimeSpan);
		this.$_started = Franca.UtcDate.get_now();
		this.$1$OnResolutionChangedField = null;
		this.$disposed = false;
		this.$1$DebugField = null;
		this.$1$IsFixedTimeStepField = false;
		this.$1$DisableAltEnterField = false;
		this.$1$AltEnterFullscreenModeField = 0;
		this.$1$UseAvailableScreenSizeField = false;
		this.$anchor = anchor;
		this.$createWindowProvider();
		this.set_debug(new $Franca_DebugOptions());
		this.set_width(width);
		this.set_height(height);
		this.$imeState = new $Franca_Ime_ImeState(this);
	};
	global.Franca.GameContainer = $Franca_GameContainer;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gamepad
	var $Franca_Gamepad = function(index, guid, bestGuessName, rawID) {
		this.index = 0;
		this.guid = null;
		this.name = null;
		this.vendor = null;
		this.rawID = null;
		this.$connected = false;
		this.$buttons = null;
		this.$axes = null;
		this.$1$DisplayMappingWarningField = false;
		this.index = index;
		this.guid = guid;
		var $t1 = rawID;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = this.guid;
		}
		this.rawID = $t1;
		this.name = $Franca_GamepadTypes.getType(this);
		this.vendor = $Franca_GamepadTypes.getVendor(this);
		if (System.StringExtensions.isNullOrEmpty(bestGuessName, true) && !System.StringExtensions.isNullOrEmpty(this.vendor, true) && this.vendor !== 'Standard' && this.vendor !== 'XInput') {
			bestGuessName = this.vendor + ' Gamepad';
		}
		if ((System.StringExtensions.isNullOrEmpty(this.name, true) || this.name === 'Standard Gamepad' || this.name === 'XInput Gamepad') && !System.StringExtensions.isNullOrEmpty(bestGuessName, true)) {
			if (System.StringExtensions.isNullOrEmpty(this.name, true)) {
				this.name = ss.formatString('{0} (Standard Gamepad)', bestGuessName);
			}
			else {
				this.name = ss.formatString('{0} ({1})', bestGuessName, this.name);
			}
		}
		if (System.StringExtensions.isNullOrEmpty(this.name, true)) {
			this.name = 'Standard Gamepad';
		}
		if (System.StringExtensions.isNullOrEmpty(this.vendor, true)) {
			this.vendor = 'Standard';
		}
		this.$buttons = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_GamepadButtons, $Franca_GamepadButton]))();
		this.$buttons.set_item(0, new $Franca_GamepadButton(0, 'A'));
		this.$buttons.set_item(1, new $Franca_GamepadButton(1, 'B'));
		this.$buttons.set_item(2, new $Franca_GamepadButton(2, 'X'));
		this.$buttons.set_item(3, new $Franca_GamepadButton(3, 'Y'));
		this.$buttons.set_item(4, new $Franca_GamepadButton(4, 'L'));
		this.$buttons.set_item(5, new $Franca_GamepadButton(5, 'R'));
		this.$buttons.set_item(6, new $Franca_GamepadButton(6, 'LTrigger'));
		this.$buttons.set_item(7, new $Franca_GamepadButton(7, 'RTrigger'));
		this.$buttons.set_item(8, new $Franca_GamepadButton(8, 'Select'));
		this.$buttons.set_item(9, new $Franca_GamepadButton(9, 'Start'));
		this.$buttons.set_item(10, new $Franca_GamepadButton(10, 'LStick'));
		this.$buttons.set_item(11, new $Franca_GamepadButton(11, 'RStick'));
		this.$buttons.set_item(12, new $Franca_GamepadButton(12, 'Up'));
		this.$buttons.set_item(13, new $Franca_GamepadButton(13, 'Down'));
		this.$buttons.set_item(14, new $Franca_GamepadButton(14, 'Left'));
		this.$buttons.set_item(15, new $Franca_GamepadButton(15, 'Right'));
		this.$buttons.set_item(16, new $Franca_GamepadButton(16, 'Home'));
		this.$buttons.set_item(-1, new $Franca_GamepadButton(-1, 'Any'));
		this.$axes = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_GamepadAxis, Number]))();
		this.$axes.set_item(0, 0);
		this.$axes.set_item(1, 0);
		this.$axes.set_item(2, 0);
		this.$axes.set_item(3, 0);
	};
	$Franca_Gamepad.__typeName = 'Franca.Gamepad';
	global.Franca.Gamepad = $Franca_Gamepad;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gamepad.Axis
	var $Franca_Gamepad$Axis = function() {
		this.type = 0;
		this.value = 0;
	};
	$Franca_Gamepad$Axis.__typeName = 'Franca.Gamepad$Axis';
	$Franca_Gamepad$Axis.$ctor1 = function(axis, value) {
		this.type = 0;
		this.value = 0;
		this.type = axis;
		this.value = value;
	};
	$Franca_Gamepad$Axis.getDefaultValue = function() {
		return new $Franca_Gamepad$Axis();
	};
	global.Franca.Gamepad$Axis = $Franca_Gamepad$Axis;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GamepadAxis
	var $Franca_GamepadAxis = function() {
	};
	$Franca_GamepadAxis.__typeName = 'Franca.GamepadAxis';
	global.Franca.GamepadAxis = $Franca_GamepadAxis;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GamepadBind
	var $Franca_GamepadBind = function() {
		this.button = 0;
		this.$type = 0;
		this.callback = null;
		this.$info = 0;
		this.$mode = 0;
		this.getGamepad = null;
		this.playerIndex = 0;
	};
	$Franca_GamepadBind.__typeName = 'Franca.GamepadBind';
	$Franca_GamepadBind.$ctor1 = function(getGamepad, button, type, callback, playerIndex, info, mode) {
		this.button = 0;
		this.$type = 0;
		this.callback = null;
		this.$info = 0;
		this.$mode = 0;
		this.getGamepad = null;
		this.playerIndex = 0;
		this.button = button;
		this.$type = type;
		this.callback = callback;
		this.$info = info;
		this.$mode = mode;
		this.getGamepad = getGamepad;
		this.playerIndex = ((playerIndex < 0) ? -1 : playerIndex);
	};
	$Franca_GamepadBind.getDefaultValue = function() {
		return new $Franca_GamepadBind();
	};
	$Franca_GamepadBind.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_GamepadBind.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.GamepadBind = $Franca_GamepadBind;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GamepadButton
	var $Franca_GamepadButton = function(button, name) {
		this.state = 0;
		this.lastState = 0;
		this.realTimeState = 0;
		this.name = null;
		this.type = 0;
		this.$pressThreshold = $Franca_GamepadButton.defaultPressThreshold;
		this.type = button;
		this.name = name;
	};
	$Franca_GamepadButton.__typeName = 'Franca.GamepadButton';
	global.Franca.GamepadButton = $Franca_GamepadButton;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GamepadButtons
	var $Franca_GamepadButtons = function() {
	};
	$Franca_GamepadButtons.__typeName = 'Franca.GamepadButtons';
	global.Franca.GamepadButtons = $Franca_GamepadButtons;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GamepadButtonsExtensions
	var $Franca_GamepadButtonsExtensions = function() {
	};
	$Franca_GamepadButtonsExtensions.__typeName = 'Franca.GamepadButtonsExtensions';
	$Franca_GamepadButtonsExtensions.getName$1 = function(T) {
		return function(button) {
			return $Franca_GamepadButtonsExtensions.getName(button);
		};
	};
	$Franca_GamepadButtonsExtensions.getName = function(button) {
		switch (button) {
			default: {
				return System.EnumExtensions.getName($Franca_GamepadButtons).call(null, button);
			}
			case 0: {
				return 'A';
			}
			case 1: {
				return 'B';
			}
			case 2: {
				return 'X';
			}
			case 3: {
				return 'Y';
			}
			case 8: {
				return 'Select';
			}
		}
	};
	global.Franca.GamepadButtonsExtensions = $Franca_GamepadButtonsExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GamepadTypes
	var $Franca_GamepadTypes = function() {
	};
	$Franca_GamepadTypes.__typeName = 'Franca.GamepadTypes';
	$Franca_GamepadTypes.getVendor = function(gamepad) {
		if (ss.isValue(gamepad)) {
			return $Franca_GamepadTypes.getVendor$1(gamepad.guid);
		}
		return null;
	};
	$Franca_GamepadTypes.getVendor$1 = function(guid) {
		if (ss.isNullOrUndefined(guid) || guid.length < 4) {
			return 'Standard';
		}
		if (System.StringExtensions.toLowerInvariant(guid).trim() === 'xinput') {
			return 'XInput';
		}
		var vendorId = System.StringExtensions.toLowerInvariant(guid.substr(0, 4));
		var vendor = {};
		if ($Franca_GamepadTypes.vendors.tryGetValue(vendorId, vendor)) {
			return vendor.$;
		}
		return 'Standard';
	};
	$Franca_GamepadTypes.getType = function(gamepad) {
		if (ss.isValue(gamepad)) {
			return $Franca_GamepadTypes.getType$1(gamepad.guid);
		}
		return null;
	};
	$Franca_GamepadTypes.getType$1 = function(guid) {
		if (ss.isNullOrUndefined(guid)) {
			return 'Standard Gamepad';
		}
		var map = {};
		if ($Franca_GamepadTypes.platforms.tryGetValue(Franca.Platform.get_OS(), map)) {
			var type = {};
			if (map.$.tryGetValue(System.StringExtensions.toLowerInvariant(guid), type)) {
				return type.$;
			}
		}
		var $t1 = $Franca_GamepadTypes.platforms.getEnumerator();
		try {
			while ($t1.moveNext()) {
				var kvp = $t1.current();
				var type1 = {};
				if (kvp.value.tryGetValue(System.StringExtensions.toLowerInvariant(guid), type1)) {
					return type1.$;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return $Franca_GamepadTypes.getVendor$1(guid) + ' Gamepad';
	};
	$Franca_GamepadTypes.addName = function(os, guid, name, replace) {
		if (System.StringExtensions.isNullOrEmpty(os, false) || System.StringExtensions.isNullOrEmpty(guid, false) || System.StringExtensions.isNullOrEmpty(name, false)) {
			return false;
		}
		guid = System.StringExtensions.toLowerInvariant(guid);
		if (guid.trim() === 'xinput') {
			return false;
		}
		if (!$Franca_GamepadTypes.platforms.containsKey(os)) {
			$Franca_GamepadTypes.platforms.set_item(os, new (ss.makeGenericType(ss.Dictionary$2, [String, String]))());
		}
		if (replace || !$Franca_GamepadTypes.platforms.get_item(os).containsKey(guid)) {
			$Franca_GamepadTypes.platforms.get_item(os).set_item(guid, name);
			return true;
		}
		return false;
	};
	global.Franca.GamepadTypes = $Franca_GamepadTypes;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GameReferenceException
	var $Franca_GameReferenceException = function() {
		$Franca_GameReferenceException.$ctor1.call(this, 'GameContainer set on MainLoop when another instance was set already.');
	};
	$Franca_GameReferenceException.__typeName = 'Franca.GameReferenceException';
	$Franca_GameReferenceException.$ctor1 = function(message) {
		$Franca_GameReferenceException.$ctor2.call(this, message, null);
	};
	$Franca_GameReferenceException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.GameReferenceException = $Franca_GameReferenceException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GlyphMetrics
	var $Franca_GlyphMetrics = function() {
		this.$bearingX = 0;
		this.$bearingY = 0;
		this.$advanceWidth = 0;
		this.$xMin = 0;
		this.$yMin = 0;
		this.$xMax = 0;
		this.$yMax = 0;
	};
	$Franca_GlyphMetrics.__typeName = 'Franca.GlyphMetrics';
	$Franca_GlyphMetrics.$ctor3 = function(bearingX, bearingY, advanceWidth, xMin, yMin, xMax, yMax) {
		this.$bearingX = 0;
		this.$bearingY = 0;
		this.$advanceWidth = 0;
		this.$xMin = 0;
		this.$yMin = 0;
		this.$xMax = 0;
		this.$yMax = 0;
		this.$bearingX = bearingX;
		this.$bearingY = bearingY;
		this.$advanceWidth = advanceWidth;
		this.$xMin = xMin;
		this.$yMin = yMin;
		this.$xMax = xMax;
		this.$yMax = yMax;
	};
	$Franca_GlyphMetrics.$ctor4 = function(bearingX, bearingY, advanceWidth, xMin, yMin, xMax, yMax, scale) {
		this.$bearingX = 0;
		this.$bearingY = 0;
		this.$advanceWidth = 0;
		this.$xMin = 0;
		this.$yMin = 0;
		this.$xMax = 0;
		this.$yMax = 0;
		this.$bearingX = bearingX * scale;
		this.$bearingY = bearingY * scale;
		this.$advanceWidth = advanceWidth * scale;
		this.$xMin = xMin * scale;
		this.$yMin = yMin * scale;
		this.$xMax = xMax * scale;
		this.$yMax = yMax * scale;
	};
	$Franca_GlyphMetrics.$ctor5 = function(bearingX, bearingY, advanceWidth, xMin, yMin, xMax, yMax, unitsPerEm, fontSize) {
		$Franca_GlyphMetrics.$ctor4.call(this, bearingX, bearingY, advanceWidth, xMin, yMin, xMax, yMax, 1 / unitsPerEm * fontSize);
	};
	$Franca_GlyphMetrics.$ctor1 = function(source, scale) {
		this.$bearingX = 0;
		this.$bearingY = 0;
		this.$advanceWidth = 0;
		this.$xMin = 0;
		this.$yMin = 0;
		this.$xMax = 0;
		this.$yMax = 0;
		this.$bearingX = source.$bearingX;
		this.$bearingY = source.$bearingY;
		this.$advanceWidth = source.$advanceWidth;
		this.$xMin = source.$xMin * scale;
		this.$yMin = source.$yMin * scale;
		this.$xMax = source.$xMax * scale;
		this.$yMax = source.$yMax * scale;
	};
	$Franca_GlyphMetrics.$ctor2 = function(source, unitsPerEm, fontSize) {
		$Franca_GlyphMetrics.$ctor1.call(this, source, 1 / unitsPerEm * fontSize);
	};
	$Franca_GlyphMetrics.getDefaultValue = function() {
		return new $Franca_GlyphMetrics();
	};
	$Franca_GlyphMetrics.op_Multiply = function(metrics, scale) {
		return new $Franca_GlyphMetrics.$ctor1(metrics, scale);
	};
	$Franca_GlyphMetrics.op_Multiply$1 = function(scale, metrics) {
		return new $Franca_GlyphMetrics.$ctor1(metrics, scale);
	};
	global.Franca.GlyphMetrics = $Franca_GlyphMetrics;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GlyphRegion
	var $Franca_GlyphRegion = function() {
		this.x = 0;
		this.y = 0;
		this.width = 0;
		this.height = 0;
		this.size = 0;
		this.full = false;
		this.lastUsed = new ss.TimeSpan(-1);
		this.glyphs = [];
	};
	$Franca_GlyphRegion.__typeName = 'Franca.GlyphRegion';
	global.Franca.GlyphRegion = $Franca_GlyphRegion;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GraphicsContextException
	var $Franca_GraphicsContextException = function() {
		ss.Exception.call(this);
	};
	$Franca_GraphicsContextException.__typeName = 'Franca.GraphicsContextException';
	$Franca_GraphicsContextException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	global.Franca.GraphicsContextException = $Franca_GraphicsContextException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GraphicsContextMissingException
	var $Franca_GraphicsContextMissingException = function() {
		$Franca_GraphicsContextException.$ctor1.call(this, 'No context is current in the calling code.');
	};
	$Franca_GraphicsContextMissingException.__typeName = 'Franca.GraphicsContextMissingException';
	$Franca_GraphicsContextMissingException.$ctor1 = function(message) {
		$Franca_GraphicsContextException.$ctor1.call(this, $Franca_GraphicsContextMissingException.$normalizeMessageEnd(message) + ' No context is current in the calling code.');
	};
	$Franca_GraphicsContextMissingException.$normalizeMessageEnd = function(message) {
		if (ss.isNullOrEmptyString(message)) {
			return message;
		}
		message = message.trim();
		var lastChar = message.charCodeAt(message.length - 1);
		if (lastChar !== 46 && lastChar !== 58 && lastChar !== 59 && lastChar !== 33) {
			return message + '.';
		}
		return message;
	};
	global.Franca.GraphicsContextMissingException = $Franca_GraphicsContextMissingException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GraphicsDevice
	var $Franca_GraphicsDevice = function(container, width, height) {
		this.$viewport = ss.getDefaultValue(Franca.Rectangle);
		this.$lastClearColor = ss.getDefaultValue(Franca.HdrColor);
		this.$lastClearDepth = 0;
		this.$lastClearStencil = 0;
		this.$contentManagers = null;
		this.$builtinAssets = null;
		this.$defaultFontManager = null;
		this.$renderTarget = null;
		this.$backbufferWidth = 0;
		this.$backbufferHeight = 0;
		this.$depthWrite = true;
		this.$container = null;
		this.$platformDevice = null;
		this.$maxTextureSize = 0;
		this.b32Message = null;
		this.$stencilEnabled = false;
		this.$stencilMask = 4294967295;
		this.$stencilFunc = $Franca_OpenGL_WebGL_Constants.ALWAYS;
		this.$stencilRef = 0;
		this.$stencilFuncMask = 4294967295;
		this.$stencilOpFail = $Franca_OpenGL_WebGL_Constants.KEEP;
		this.$stencilOpZFail = $Franca_OpenGL_WebGL_Constants.KEEP;
		this.$stencilOpZPass = $Franca_OpenGL_WebGL_Constants.KEEP;
		this.$lastStencilState = null;
		this.$disposed = false;
		this.$1$DebugShaderSourceField = false;
		this.set_debugShaderSource(true);
		this.$container = container;
		this.$contentManagers = [];
		this.$backbufferWidth = width;
		this.$backbufferHeight = height;
		this.$createDevice();
	};
	$Franca_GraphicsDevice.__typeName = 'Franca.GraphicsDevice';
	$Franca_GraphicsDevice.get_default = function() {
		return $Franca_GraphicsDevice.$defaultDevice;
	};
	$Franca_GraphicsDevice.set_default = function(value) {
		$Franca_GraphicsDevice.$defaultDevice = value;
	};
	$Franca_GraphicsDevice.get_current = function() {
		return $Franca_GraphicsDevice.$current;
	};
	$Franca_GraphicsDevice.set_current = function(value) {
		$Franca_GraphicsDevice.$current = value;
		if (ss.isValue($Franca_GraphicsDevice.$current)) {
			$Franca_GraphicsDevice.$current.$finalizeContent();
		}
	};
	global.Franca.GraphicsDevice = $Franca_GraphicsDevice;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.GraphicsDeviceException
	var $Franca_GraphicsDeviceException = function() {
		ss.Exception.call(this);
	};
	$Franca_GraphicsDeviceException.__typeName = 'Franca.GraphicsDeviceException';
	$Franca_GraphicsDeviceException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_GraphicsDeviceException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.GraphicsDeviceException = $Franca_GraphicsDeviceException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.HdrColors
	var $Franca_HdrColors = function() {
		this.topLeft = ss.getDefaultValue(Franca.HdrColor);
		this.topRight = ss.getDefaultValue(Franca.HdrColor);
		this.bottomLeft = ss.getDefaultValue(Franca.HdrColor);
		this.bottomRight = ss.getDefaultValue(Franca.HdrColor);
	};
	$Franca_HdrColors.__typeName = 'Franca.HdrColors';
	$Franca_HdrColors.$ctor1 = function(color) {
		$Franca_HdrColors.$ctor5.call(this, color, color, color, color);
	};
	$Franca_HdrColors.$ctor5 = function(topLeft, topRight, bottomLeft, bottomRight) {
		this.topLeft = ss.getDefaultValue(Franca.HdrColor);
		this.topRight = ss.getDefaultValue(Franca.HdrColor);
		this.bottomLeft = ss.getDefaultValue(Franca.HdrColor);
		this.bottomRight = ss.getDefaultValue(Franca.HdrColor);
		this.topLeft = topLeft;
		this.topRight = topRight;
		this.bottomLeft = bottomLeft;
		this.bottomRight = bottomRight;
	};
	$Franca_HdrColors.$ctor4 = function(color, premultiplied) {
		$Franca_HdrColors.$ctor7.call(this, color, color, color, color, true);
	};
	$Franca_HdrColors.$ctor7 = function(topLeft, topRight, bottomLeft, bottomRight, premultiplied) {
		this.topLeft = ss.getDefaultValue(Franca.HdrColor);
		this.topRight = ss.getDefaultValue(Franca.HdrColor);
		this.bottomLeft = ss.getDefaultValue(Franca.HdrColor);
		this.bottomRight = ss.getDefaultValue(Franca.HdrColor);
		this.topLeft = new Franca.HdrColor.$ctor3(topLeft, premultiplied);
		this.topRight = new Franca.HdrColor.$ctor3(topRight, premultiplied);
		this.bottomLeft = new Franca.HdrColor.$ctor3(bottomLeft, premultiplied);
		this.bottomRight = new Franca.HdrColor.$ctor3(bottomRight, premultiplied);
	};
	$Franca_HdrColors.$ctor3 = function(color, premultiplied) {
		$Franca_HdrColors.$ctor6.call(this, color, color, color, color, true);
	};
	$Franca_HdrColors.$ctor6 = function(topLeft, topRight, bottomLeft, bottomRight, premultiplied) {
		this.topLeft = ss.getDefaultValue(Franca.HdrColor);
		this.topRight = ss.getDefaultValue(Franca.HdrColor);
		this.bottomLeft = ss.getDefaultValue(Franca.HdrColor);
		this.bottomRight = ss.getDefaultValue(Franca.HdrColor);
		this.topLeft = new Franca.HdrColor.$ctor2(topLeft, premultiplied);
		this.topRight = new Franca.HdrColor.$ctor2(topRight, premultiplied);
		this.bottomLeft = new Franca.HdrColor.$ctor2(bottomLeft, premultiplied);
		this.bottomRight = new Franca.HdrColor.$ctor2(bottomRight, premultiplied);
	};
	$Franca_HdrColors.$ctor2 = function(reader) {
		this.topLeft = ss.getDefaultValue(Franca.HdrColor);
		this.topRight = ss.getDefaultValue(Franca.HdrColor);
		this.bottomLeft = ss.getDefaultValue(Franca.HdrColor);
		this.bottomRight = ss.getDefaultValue(Franca.HdrColor);
		this.topLeft = ss.getDefaultValue(Franca.HdrColor);
		this.topRight = ss.getDefaultValue(Franca.HdrColor);
		this.bottomLeft = ss.getDefaultValue(Franca.HdrColor);
		this.bottomRight = ss.getDefaultValue(Franca.HdrColor);
		if (!reader.isObject()) {
			throw new Franca.Serialization.Streaming.StreamingJsonTempException();
		}
		var _requiredField_color0 = false;
		var _requiredField_color1 = false;
		var _requiredField_color2 = false;
		var _requiredField_color3 = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new Franca.Serialization.Streaming.StreamingJsonTempException();
					}
					case 'color0': {
						{
							_requiredField_color0 = true;
							this.topLeft = new Franca.HdrColor.$ctor1(reader);
						}
						break;
					}
					case 'color1': {
						{
							_requiredField_color1 = true;
							this.topRight = new Franca.HdrColor.$ctor1(reader);
						}
						break;
					}
					case 'color2': {
						{
							_requiredField_color2 = true;
							this.bottomLeft = new Franca.HdrColor.$ctor1(reader);
						}
						break;
					}
					case 'color3': {
						{
							_requiredField_color3 = true;
							this.bottomRight = new Franca.HdrColor.$ctor1(reader);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_color0 || !_requiredField_color1 || !_requiredField_color2 || !_requiredField_color3) {
			throw new Franca.Serialization.Streaming.StreamingJsonTempException();
		}
	};
	$Franca_HdrColors.getDefaultValue = function() {
		return new $Franca_HdrColors();
	};
	$Franca_HdrColors.op_Explicit = function(colors) {
		return new $Franca_Colors.$ctor5(Franca.HdrColor.op_Explicit(colors.topLeft), Franca.HdrColor.op_Explicit(colors.topRight), Franca.HdrColor.op_Explicit(colors.bottomLeft), Franca.HdrColor.op_Explicit(colors.bottomRight));
	};
	$Franca_HdrColors.op_Implicit = function(color) {
		return new $Franca_HdrColors.$ctor1(Franca.Color.op_Implicit(color));
	};
	$Franca_HdrColors.op_Implicit$1 = function(color) {
		return new $Franca_HdrColors.$ctor1(color);
	};
	global.Franca.HdrColors = $Franca_HdrColors;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.HttpRequest
	var $Franca_HttpRequest = function(requestType, responseType, url) {
		this.$1$OnProgressField = null;
		this.$1$OnUploadProgressField = null;
		this.$1$OnFinishField = null;
		this.$1$OnUploadCompleteField = null;
		this.$1$OnAbortField = null;
		this.$1$OnErrorField = null;
		this.$requestType = 0;
		this.$responseType = 0;
		this.$url = null;
		this.$response = null;
		this.$request = null;
		this.$rangeType = null;
		this.$ranges = null;
		this.$contentLength = -1;
		this.$progress = 0;
		this.$lastProgress = 0;
		this.$done = false;
		this.$aborted = false;
		this.$uploadLength = -1;
		this.$uploadProgress = 0;
		this.$lastUploadProgress = 0;
		this.$uploadDone = false;
		this.$onUploadCalled = false;
		this.$errorMessage = null;
		this.$statusCode = 0;
		this.$statusDesc = null;
		this.$requestType = requestType;
		this.$url = url;
		this.$responseType = responseType;
		this.$open();
	};
	$Franca_HttpRequest.__typeName = 'Franca.HttpRequest';
	$Franca_HttpRequest.processActiveRequests = function() {
		var $t1 = ss.getEnumerator(System.IEnumerableExtensions.safeEnumerate($Franca_HttpRequest).call(null, $Franca_HttpRequest.$activeRequests));
		try {
			while ($t1.moveNext()) {
				var req = $t1.current();
				var progress = -1;
				var uploadProgress = -1;
				if (req.$progress > req.$lastProgress) {
					req.$lastProgress = req.$progress;
					progress = req.$progress;
				}
				if (req.$uploadProgress > req.$lastUploadProgress) {
					req.$lastUploadProgress = req.$uploadProgress;
					uploadProgress = req.$uploadProgress;
				}
				if (uploadProgress > -1) {
					var onUploadProgress = req.$1$OnUploadProgressField;
					if (!ss.staticEquals(onUploadProgress, null)) {
						var $t2 = new $Franca_HttpRequest$ProgressEventInfo();
						$t2.progress = req.$uploadProgress;
						$t2.contentLength = req.$uploadLength;
						onUploadProgress(req, $t2);
					}
				}
				if (req.$uploadDone && !req.$onUploadCalled) {
					req.$onUploadCalled = true;
					var onFinish = req.$1$OnUploadCompleteField;
					if (!ss.staticEquals(onFinish, null)) {
						var $t3 = new $Franca_HttpRequest$FinishedEventInfo();
						$t3.aborted = req.$aborted;
						$t3.error = ss.isValue(req.$errorMessage);
						onFinish(req, $t3);
					}
				}
				if (progress > -1) {
					var onProgress = req.$1$OnProgressField;
					if (!ss.staticEquals(onProgress, null)) {
						var $t4 = new $Franca_HttpRequest$ProgressEventInfo();
						$t4.progress = req.$progress;
						$t4.contentLength = req.$contentLength;
						onProgress(req, $t4);
					}
				}
				if (req.$aborted) {
					var onAbort = req.$1$OnAbortField;
					if (!ss.staticEquals(onAbort, null)) {
						onAbort(req, new $Franca_HttpRequest$AbortEventInfo());
					}
				}
				if (ss.isValue(req.$errorMessage)) {
					var onError = req.$1$OnErrorField;
					if (!ss.staticEquals(onError, null)) {
						var $t5 = new $Franca_HttpRequest$ErrorEventInfo();
						$t5.message = req.$errorMessage;
						$t5.statusCode = req.$statusCode;
						$t5.statusDesc = req.$statusDesc;
						onError(req, $t5);
					}
				}
				if (req.$done || req.$aborted || ss.isValue(req.$errorMessage)) {
					var onFinish1 = req.$1$OnFinishField;
					if (!ss.staticEquals(onFinish1, null)) {
						var $t6 = new $Franca_HttpRequest$FinishedEventInfo();
						$t6.aborted = req.$aborted;
						$t6.error = ss.isValue(req.$errorMessage);
						onFinish1(req, $t6);
					}
					ss.remove($Franca_HttpRequest.$activeRequests, req);
				}
			}
		}
		finally {
			$t1.dispose();
		}
	};
	global.Franca.HttpRequest = $Franca_HttpRequest;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.HttpRequest.AbortEventInfo
	var $Franca_HttpRequest$AbortEventInfo = function() {
	};
	$Franca_HttpRequest$AbortEventInfo.__typeName = 'Franca.HttpRequest$AbortEventInfo';
	global.Franca.HttpRequest$AbortEventInfo = $Franca_HttpRequest$AbortEventInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.HttpRequest.ErrorEventInfo
	var $Franca_HttpRequest$ErrorEventInfo = function() {
		this.statusCode = 0;
		this.statusDesc = null;
		this.message = null;
	};
	$Franca_HttpRequest$ErrorEventInfo.__typeName = 'Franca.HttpRequest$ErrorEventInfo';
	global.Franca.HttpRequest$ErrorEventInfo = $Franca_HttpRequest$ErrorEventInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.HttpRequest.FinishedEventInfo
	var $Franca_HttpRequest$FinishedEventInfo = function() {
		this.aborted = false;
		this.error = false;
	};
	$Franca_HttpRequest$FinishedEventInfo.__typeName = 'Franca.HttpRequest$FinishedEventInfo';
	global.Franca.HttpRequest$FinishedEventInfo = $Franca_HttpRequest$FinishedEventInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.HttpRequest.ProgressEventInfo
	var $Franca_HttpRequest$ProgressEventInfo = function() {
		this.progress = 0;
		this.contentLength = 0;
	};
	$Franca_HttpRequest$ProgressEventInfo.__typeName = 'Franca.HttpRequest$ProgressEventInfo';
	global.Franca.HttpRequest$ProgressEventInfo = $Franca_HttpRequest$ProgressEventInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.HttpRequest.RequestType
	var $Franca_HttpRequest$RequestType = function() {
	};
	$Franca_HttpRequest$RequestType.__typeName = 'Franca.HttpRequest$RequestType';
	global.Franca.HttpRequest$RequestType = $Franca_HttpRequest$RequestType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.HttpRequest.ResponseData
	var $Franca_HttpRequest$ResponseData = function() {
		this.binary = null;
		this.text = null;
	};
	$Franca_HttpRequest$ResponseData.__typeName = 'Franca.HttpRequest$ResponseData';
	global.Franca.HttpRequest$ResponseData = $Franca_HttpRequest$ResponseData;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.HttpRequest.ResponseType
	var $Franca_HttpRequest$ResponseType = function() {
	};
	$Franca_HttpRequest$ResponseType.__typeName = 'Franca.HttpRequest$ResponseType';
	global.Franca.HttpRequest$ResponseType = $Franca_HttpRequest$ResponseType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IAsset
	var $Franca_IAsset = function() {
	};
	$Franca_IAsset.__typeName = 'Franca.IAsset';
	global.Franca.IAsset = $Franca_IAsset;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IBind
	var $Franca_IBind = function() {
	};
	$Franca_IBind.__typeName = 'Franca.IBind';
	global.Franca.IBind = $Franca_IBind;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IBitmapProvider
	var $Franca_IBitmapProvider = function() {
	};
	$Franca_IBitmapProvider.__typeName = 'Franca.IBitmapProvider';
	global.Franca.IBitmapProvider = $Franca_IBitmapProvider;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ICanvasContext
	var $Franca_ICanvasContext = function() {
	};
	$Franca_ICanvasContext.__typeName = 'Franca.ICanvasContext';
	global.Franca.ICanvasContext = $Franca_ICanvasContext;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IGameComponent
	var $Franca_IGameComponent = function() {
	};
	$Franca_IGameComponent.__typeName = 'Franca.IGameComponent';
	global.Franca.IGameComponent = $Franca_IGameComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.IGameObserver
	var $Franca_IGameObserver = function() {
	};
	$Franca_IGameObserver.__typeName = 'Franca.IGameObserver';
	global.Franca.IGameObserver = $Franca_IGameObserver;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.InputCategory
	var $Franca_InputCategory = function() {
	};
	$Franca_InputCategory.__typeName = 'Franca.InputCategory';
	global.Franca.InputCategory = $Franca_InputCategory;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.InputDevice
	var $Franca_InputDevice = function() {
	};
	$Franca_InputDevice.__typeName = 'Franca.InputDevice';
	global.Franca.InputDevice = $Franca_InputDevice;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.InputEvent
	var $Franca_InputEvent = function(gameTime, device, info, mode, mouse, shift, control, alt) {
		$Franca_InputEvent.$ctor1.call(this, gameTime, device, info, mode, mouse, null, shift, control, alt);
	};
	$Franca_InputEvent.__typeName = 'Franca.InputEvent';
	$Franca_InputEvent.$ctor1 = function(gameTime, device, info, mode, mouse, gamepad, shift, control, alt) {
		this.keyBind = null;
		this.mouseBind = null;
		this.gamepadBind = null;
		this.gameTime = ss.getDefaultValue(ss.TimeSpan);
		this.device = 0;
		this.info = 0;
		this.mode = 0;
		this.mouse = null;
		this.gamepad = null;
		this.shift = false;
		this.control = false;
		this.alt = false;
		this.gameTime = gameTime;
		this.device = device;
		this.info = info;
		this.mode = mode;
		this.mouse = mouse;
		this.gamepad = gamepad;
		this.shift = shift;
		this.control = control;
		this.alt = alt;
	};
	global.Franca.InputEvent = $Franca_InputEvent;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.InputHandler
	var $Franca_InputHandler = function(container) {
		this.$container = null;
		this.$keyStates = null;
		this.$binds = null;
		this.$mouse = null;
		this.$textBuffer = null;
		this.$wasCompositing = false;
		this.$ime = null;
		this.$platformInput = null;
		this.$gamepads = null;
		this.$deadzoneStyle = 0;
		this.$deadzoneProcessor = null;
		this.$1$OnKeyDownField = null;
		this.$1$OnKeyUpField = null;
		this.$1$OnCopyField = null;
		this.$1$OnNativeClickField = null;
		this.$1$OnGamepadChangedField = null;
		this.$disposed = false;
		this.$1$GlobalFocusField = false;
		this.$container = container;
		this.$createProvider();
		this.$ime = container.get_ime();
		this.$keyStates = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_KeyboardButton]))();
		this.$binds = [];
		this.$mouse = new $Franca_Mouse();
		this.$textBuffer = new Array();
		this.$gamepads = [];
		for (var i = 0; i < $Franca_InputHandler.maxGamepads; i++) {
			this.$gamepads.push(new $Franca_Gamepad(i, '', null, null));
		}
		this.setDeadzoneProcessing$1(1);
		this.set_globalFocus(true);
		this.registerEvents();
	};
	$Franca_InputHandler.__typeName = 'Franca.InputHandler';
	$Franca_InputHandler.$excludeCircularDeadZone = function(value, deadZone) {
		var originalLength = value.length();
		if (originalLength <= deadZone) {
			return Franca.Vector2.zero;
		}
		var newLength = (originalLength - deadZone) / (1 - deadZone);
		return Franca.Vector2.op_Multiply$1(value, newLength / originalLength);
	};
	$Franca_InputHandler.getTexture$1 = function(content, key, type) {
		if (type === 2) {
			throw new ss.NotImplementedException();
		}
		else {
			var fullName = {};
			if (key === 91 || key === 92) {
				fullName.$ = 'Base64Images.KbMouse.Keyboard_{0}_' + ((Franca.Platform.get_OS() === 'Mac OS X') ? 'Command' : 'Win');
			}
			else if (!$Franca_InputHandler.$keyImages.tryGetValue(key, fullName)) {
				fullName.$ = 'Base64Images.KbMouse.Keyboard_{0}_' + System.EnumExtensions.getName($Franca_Key).call(null, key);
			}
			return $Franca_InputHandler.getTexture$2(content, ss.formatString(fullName.$, ((type === 1) ? 'Black' : 'White')), $Franca_InputHandler.get_$kbMouseAssembly());
		}
	};
	$Franca_InputHandler.getTexture = function(content, category, button) {
		var fullName = {};
		var assembly;
		switch (category) {
			default: {
				return null;
			}
			case 1: {
				if (!$Franca_InputHandler.$switchButtons.tryGetValue(button, fullName)) {
					return null;
				}
				assembly = $Franca_InputHandler.get_$switchButtonsAssembly();
				break;
			}
			case 0: {
				if (!$Franca_InputHandler.$xbOneButtons.tryGetValue(button, fullName)) {
					return null;
				}
				assembly = $Franca_InputHandler.get_$xbOneButtonsAssembly();
				break;
			}
			case 2: {
				if (!$Franca_InputHandler.$ps4Buttons.tryGetValue(button, fullName)) {
					return null;
				}
				assembly = $Franca_InputHandler.get_$ps4ButtonsAssembly();
				break;
			}
			case 3: {
				if (!$Franca_InputHandler.$psVitaButtons.tryGetValue(button, fullName)) {
					return null;
				}
				assembly = $Franca_InputHandler.get_$psVitaButtonsAssembly();
				break;
			}
		}
		return $Franca_InputHandler.getTexture$2(content, fullName.$, assembly);
	};
	$Franca_InputHandler.getTexture$2 = function(content, fullTypeName, assembly) {
		if (ss.isNullOrUndefined(fullTypeName)) {
			return null;
		}
		var base64Type = {};
		if (!$Franca_InputHandler.$base64TypeCache.tryGetValue(fullTypeName, base64Type)) {
			base64Type.$ = null;
			var $t1 = ss.getEnumerator(System.Reflection.ReflectionExtensions.definedTypes(assembly));
			try {
				while ($t1.moveNext()) {
					var t = $t1.current();
					if (ss.referenceEquals(ss.getTypeFullName(t), fullTypeName)) {
						$Franca_InputHandler.$base64TypeCache.set_item(fullTypeName, base64Type.$ = t);
						break;
					}
				}
			}
			finally {
				$t1.dispose();
			}
			if (ss.isNullOrUndefined(base64Type.$)) {
				$Franca_InputHandler.$base64TypeCache.set_item(fullTypeName, null);
				return null;
			}
			return content.loadBase64Texture(base64Type.$, true, false);
		}
		else {
			if (ss.isNullOrUndefined(base64Type.$)) {
				return null;
			}
			return content.loadBase64Texture(base64Type.$, true, false);
		}
	};
	$Franca_InputHandler.get_$kbMouseAssembly = function() {
		return ss.getTypeAssembly(Base64Images.KbMouse.Blank_Black_Enter);
	};
	$Franca_InputHandler.get_$switchButtonsAssembly = function() {
		return ss.getTypeAssembly(Base64Images.NintendoSwitch.Switch_A);
	};
	$Franca_InputHandler.get_$xbOneButtonsAssembly = function() {
		return ss.getTypeAssembly(Base64Images.XboxOne.XboxOne_A);
	};
	$Franca_InputHandler.get_$ps4ButtonsAssembly = function() {
		return ss.getTypeAssembly(Base64Images.PlayStation4.PS4_Circle);
	};
	$Franca_InputHandler.get_$psVitaButtonsAssembly = function() {
		return ss.getTypeAssembly(Base64Images.PlayStationVita.Vita_Bumper_Left);
	};
	global.Franca.InputHandler = $Franca_InputHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.InputType
	var $Franca_InputType = function() {
	};
	$Franca_InputType.__typeName = 'Franca.InputType';
	global.Franca.InputType = $Franca_InputType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JSBitmap
	var $Franca_JSBitmap = function() {
		this.$bitmap = null;
		this.$disposed = false;
	};
	$Franca_JSBitmap.__typeName = 'Franca.JSBitmap';
	$Franca_JSBitmap.$ctor2 = function(width, height) {
		this.$bitmap = null;
		this.$disposed = false;
		var $t1 = document.createElement('canvas');
		this.$bitmap = ss.safeCast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'CANVAS'));
		this.$bitmap.width = width;
		this.$bitmap.height = height;
	};
	$Franca_JSBitmap.$ctor1 = function(bitmap) {
		this.$bitmap = null;
		this.$disposed = false;
		this.$bitmap = bitmap;
	};
	global.Franca.JSBitmap = $Franca_JSBitmap;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JSFontProvider
	var $Franca_JSFontProvider = function() {
		this.$font = null;
		this.$unitsPerEm = 0;
		this.$disposed = false;
	};
	$Franca_JSFontProvider.__typeName = 'Franca.JSFontProvider';
	global.Franca.JSFontProvider = $Franca_JSFontProvider;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JSInput
	var $Franca_JSInput = function(inputHandler, container) {
		this.$inputHandler = null;
		this.$container = null;
		this.$hasFocus = false;
		this.$keyDownHandler = null;
		this.$keyUpHandler = null;
		this.$keyPressHandler = null;
		this.$mouseMoveHandler = null;
		this.$mouseDownHandler = null;
		this.$mouseUpHandler = null;
		this.$focusHandler = null;
		this.$blurHandler = null;
		this.$blurred = false;
		this.$wasBlurred = false;
		this.$gamepadConnectedHandler = null;
		this.$gamepadDisconnectedHandler = null;
		this.$gamepadPlayerMapping = null;
		this.$oldContextHandler = null;
		this.$inputHandler = inputHandler;
		this.$container = container;
		$Franca_JSInput.init();
	};
	$Franca_JSInput.__typeName = 'Franca.JSInput';
	$Franca_JSInput.init = function() {
		if ($Franca_JSInput.$initialized) {
			return;
		}
		try {
			$Franca_JSInput.$hasUIEventSupport = typeof(KeyboardEvent) !== 'undefined' && 'code' in KeyboardEvent.prototype && 'key' in KeyboardEvent.prototype;
		}
		catch ($t1) {
			$Franca_JSInput.$hasUIEventSupport = false;
		}
		$Franca_JSInput.$initialized = true;
	};
	$Franca_JSInput.parseGamepadID = function(id, guid, bestGuess) {
		id = ss.coalesce(id, '');
		var match;
		if (Franca.Platform.get_type() === 1 || Franca.Platform.get_type() === 4) {
			if ((match = $Franca_JSInput.$firefoxGamepadIDRegex.exec(id)).success) {
				guid.$ = $Franca_JSInput.guidFromVendorProduct(match.groups[1], match.groups[2]);
				bestGuess.$ = $Franca_JSInput.$gamepadRemoveParentheses.remove(ss.coalesce(match.groups[3], '').trim());
				return;
			}
		}
		else if (Franca.Platform.get_type() === 3 || Franca.Platform.get_type() === 5) {
			if ((match = $Franca_JSInput.$chromeGamepadIDRegex.exec(id)).success) {
				guid.$ = $Franca_JSInput.guidFromVendorProduct(match.groups[2], match.groups[3]);
				bestGuess.$ = $Franca_JSInput.$gamepadRemoveParentheses.remove(ss.coalesce(match.groups[1], '').trim());
				return;
			}
		}
		if ((match = $Franca_JSInput.$firefoxGamepadIDRegex.exec(id)).success) {
			guid.$ = $Franca_JSInput.guidFromVendorProduct(match.groups[1], match.groups[2]);
			bestGuess.$ = $Franca_JSInput.$gamepadRemoveParentheses.remove(ss.coalesce(match.groups[3], '').trim());
			return;
		}
		if ((match = $Franca_JSInput.$chromeGamepadIDRegex.exec(id)).success) {
			guid.$ = $Franca_JSInput.guidFromVendorProduct(match.groups[2], match.groups[3]);
			bestGuess.$ = $Franca_JSInput.$gamepadRemoveParentheses.remove(ss.coalesce(match.groups[1], '').trim());
			return;
		}
		var vendor, product;
		if ((match = $Franca_JSInput.$gamepadVendorRegex.exec(id)).success) {
			vendor = match.groups[1];
			if ((match = $Franca_JSInput.$gamepadProductRegex.exec(id)).success) {
				product = match.groups[1];
			}
			else {
				product = '0000';
			}
			guid.$ = $Franca_JSInput.guidFromVendorProduct(vendor, product);
			bestGuess.$ = $Franca_JSInput.$gamepadRemoveParentheses.remove(id);
			return;
		}
		var trimmedLowerID = System.StringExtensions.toLowerInvariant(id.trim());
		if (trimmedLowerID === 'xinput') {
			guid.$ = 'xinput';
			bestGuess.$ = null;
			return;
		}
		if (ss.endsWithString(trimmedLowerID, '(xinput standard gamepad)')) {
			guid.$ = 'xinput';
			bestGuess.$ = $Franca_JSInput.$gamepadRemoveParentheses.remove(id);
			return;
		}
		guid.$ = null;
		bestGuess.$ = $Franca_JSInput.$gamepadRemoveParentheses.remove(id);
	};
	$Franca_JSInput.guidFromVendorProduct = function(vendor, product) {
		vendor = System.StringExtensions.toLowerInvariant(ss.coalesce(vendor, '').trim());
		if (vendor === 'xinput') {
			return 'xinput';
		}
		if (vendor.length < 4) {
			vendor = ss.stringFromChar(String.fromCharCode(48), 4 - vendor.length) + vendor;
		}
		product = System.StringExtensions.toLowerInvariant(ss.coalesce(product, '').trim());
		if (product.length < 4) {
			product = ss.stringFromChar(String.fromCharCode(48), 4 - product.length) + product;
		}
		return vendor.substr(2, 2) + vendor.substr(0, 2) + product.substr(2, 2) + product.substr(0, 2);
	};
	$Franca_JSInput.$getKeyFromJs = function(code, key, keyCode) {
		if ($Franca_JSInput.$hasUIEventSupport) {
			// first try to map the string to the equivalent Key enum string value
			var values = Object.keys($Franca_Key.prototype);
			var index = Enumerable.from(values).indexOf(code, Franca.StringHelper.get_caseInsensitiveComparer());
			if (index >= 0) {
				return ss.cast(ss.Enum.parse($Franca_Key, values[index]), ss.Int32);
			}
			// if that fails look it up in our explicit mapping
			var result = {};
			if ($Franca_JSInput.$uiEventCodeToKey.tryGetValue(code, result)) {
				return result.$;
			}
			// now we're getting desperate
			index = Enumerable.from(values).indexOf(key, Franca.StringHelper.get_caseInsensitiveComparer());
			if (index >= 0) {
				return ss.cast(ss.Enum.parse($Franca_Key, values[index]), ss.Int32);
			}
		}
		// welp we're out of ideas
		return $Franca_JSInput.$codeFromJsKeyCode(keyCode);
	};
	$Franca_JSInput.$codeFromJsKeyCode = function(jsCode) {
		if (Franca.Platform.get_type() === 1) {
			// firefox uses different codes for three keys
			// semicolon  ; :  is 59 instead of 186
			// equals     = +  is 61 instead of 187
			// minus      - _  is 173 instead of 189
			switch (jsCode) {
				case 59: {
					jsCode = 186;
					break;
				}
				case 61: {
					jsCode = 187;
					break;
				}
				case 173: {
					jsCode = 189;
					break;
				}
			}
		}
		var code;
		var k = {};
		if (Franca.EnumHelper.tryCast($Franca_Key).call(null, jsCode, k)) {
			code = k.$;
			code &= -4194305;
			code &= -8388609;
		}
		else {
			switch (jsCode) {
				case 13: {
					code = 13;
					code &= -4194305;
					break;
				}
				case 16: {
					code = 16;
					code &= -4194305;
					break;
				}
				case 17: {
					code = 17;
					code &= -4194305;
					break;
				}
				case 18: {
					code = 18;
					code &= -4194305;
					break;
				}
				default: {
					code = jsCode | $Franca_KeyboardButton.scanCodeBit;
					code &= -8388609;
					break;
				}
			}
		}
		return code;
	};
	global.Franca.JSInput = $Franca_JSInput;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Key
	var $Franca_Key = function() {
	};
	$Franca_Key.__typeName = 'Franca.Key';
	global.Franca.Key = $Franca_Key;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.KeyBind
	var $Franca_KeyBind = function() {
		this.keyCode = 0;
		this.namedKey = 0;
		this.physicalKey = 0;
		this.key = null;
		this.$type = 0;
		this.callback = null;
		this.$info = 0;
		this.$mode = 0;
		this.shift = false;
		this.control = false;
		this.alt = false;
	};
	$Franca_KeyBind.__typeName = 'Franca.KeyBind';
	$Franca_KeyBind.$ctor1 = function(key, keyCode, type, callback, info, mode, shift, control, alt) {
		this.keyCode = 0;
		this.namedKey = 0;
		this.physicalKey = 0;
		this.key = null;
		this.$type = 0;
		this.callback = null;
		this.$info = 0;
		this.$mode = 0;
		this.shift = false;
		this.control = false;
		this.alt = false;
		this.key = key;
		this.namedKey = $Franca_KeyboardButton.keyFromKeyCode$1(keyCode, true);
		this.physicalKey = $Franca_KeyboardButton.keyFromKeyCode$1(keyCode, true);
		this.keyCode = keyCode;
		this.$type = type;
		this.callback = callback;
		this.$info = info;
		this.$mode = mode;
		this.shift = shift;
		this.control = control;
		this.alt = alt;
	};
	$Franca_KeyBind.getDefaultValue = function() {
		return new $Franca_KeyBind();
	};
	$Franca_KeyBind.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_KeyBind.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.KeyBind = $Franca_KeyBind;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.KeyboardButton
	var $Franca_KeyboardButton = function(code) {
		this.state = 0;
		this.lastState = 0;
		this.realTimeState = 0;
		this.name = null;
		this.code = 0;
		this.bound = false;
		this.code = code;
		var k = $Franca_KeyboardButton.keyFromKeyCode$1(code, true);
		this.name = $Franca_KeyExtensions.getName(k, false, true, null, null);
	};
	$Franca_KeyboardButton.__typeName = 'Franca.KeyboardButton';
	$Franca_KeyboardButton.keyFromKeyCode = function(keyCode) {
		return $Franca_KeyboardButton.keyFromKeyCode$1(keyCode, false);
	};
	$Franca_KeyboardButton.keyFromKeyCode$1 = function(keyCode, physical) {
		var k = {};
		if (Franca.EnumHelper.tryCast($Franca_Key).call(null, keyCode, k)) {
			if (!physical && ss.isValue($Franca_KeyExtensions.$platformInputProvider)) {
				return $Franca_KeyExtensions.$platformInputProvider.$locationalToActual(k.$);
			}
			return k.$;
		}
		return 0;
	};
	global.Franca.KeyboardButton = $Franca_KeyboardButton;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.KeyExtensions
	var $Franca_KeyExtensions = function() {
	};
	$Franca_KeyExtensions.__typeName = 'Franca.KeyExtensions';
	$Franca_KeyExtensions.getName = function(key, shortened, physical, scancodeFormat, unknownFormat) {
		var $t1 = scancodeFormat;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = (shortened ? '#{0}' : 'Key {0}');
		}
		scancodeFormat = $t1;
		var $t2 = unknownFormat;
		if (ss.isNullOrUndefined($t2)) {
			$t2 = (shortened ? '#{0}' : 'Key {0}');
		}
		unknownFormat = $t2;
		var code = key;
		if (Franca.EnumHelper.isDefined($Franca_Key).call(null, key) || (code & $Franca_KeyboardButton.scanCodeBit) !== $Franca_KeyboardButton.scanCodeBit) {
			if (key !== 0) {
				return $Franca_KeyExtensions.$keyToName(key, shortened, physical);
			}
			else {
				return ss.formatString(unknownFormat, code);
			}
		}
		else {
			return ss.formatString(scancodeFormat, code & -4194305);
		}
	};
	$Franca_KeyExtensions.$keyToName = function(key, shortened, physical) {
		if (ss.isValue($Franca_KeyExtensions.$platformInputProvider)) {
			if (!physical) {
				key = $Franca_KeyExtensions.$platformInputProvider.$locationalToActual(key);
			}
			var platformSpecificName = $Franca_KeyExtensions.$platformInputProvider.$getKeyNameByPlatform(key, shortened);
			if (ss.isValue(platformSpecificName)) {
				return platformSpecificName;
			}
		}
		var value = System.EnumExtensions.getName($Franca_Key).call(null, key);
		switch (key) {
			case 48:
			case 49:
			case 50:
			case 51:
			case 52:
			case 53:
			case 54:
			case 55:
			case 56:
			case 57: {
				return value.substring(1);
			}
			case 107: {
				return (shortened ? '+' : 'Numpad +');
			}
			case 8: {
				return (shortened ? 'Back' : 'Backspace');
			}
			case 187: {
				return '=';
			}
			case 109: {
				return (shortened ? '-' : 'Numpad -');
			}
			case 189: {
				return '-';
			}
			case 190: {
				return '.';
			}
			case 110: {
				return (shortened ? '.' : 'Numpad .');
			}
			case 111: {
				return (shortened ? '/' : 'Numpad /');
			}
			case 27: {
				return (shortened ? 'Esc' : 'Escape');
			}
			case 45: {
				return (shortened ? 'Ins' : 'Insert');
			}
			case 18: {
				return 'Alt';
			}
			case 17: {
				return (shortened ? 'Ctrl' : 'Control');
			}
			case 16: {
				return (shortened ? 'Shft' : 'Shift');
			}
			case 106: {
				return (shortened ? '*' : 'Numpad *');
			}
			case 0: {
				return (shortened ? '(??)' : 'Unknown');
			}
			case 96: {
				return (shortened ? 'NP0' : 'Numpad 0');
			}
			case 97: {
				return (shortened ? 'NP1' : 'Numpad 1');
			}
			case 98: {
				return (shortened ? 'NP2' : 'Numpad 2');
			}
			case 99: {
				return (shortened ? 'NP3' : 'Numpad 3');
			}
			case 100: {
				return (shortened ? 'NP4' : 'Numpad 4');
			}
			case 101: {
				return (shortened ? 'NP5' : 'Numpad 5');
			}
			case 102: {
				return (shortened ? 'NP6' : 'Numpad 6');
			}
			case 103: {
				return (shortened ? 'NP7' : 'Numpad 7');
			}
			case 104: {
				return (shortened ? 'NP8' : 'Numpad 8');
			}
			case 105: {
				return (shortened ? 'NP9' : 'Numpad 9');
			}
			case 220: {
				return '\\';
			}
			case 221: {
				return ']';
			}
			case 219: {
				return '[';
			}
			case 188: {
				return ',';
			}
			case 191: {
				return '/';
			}
			case 222: {
				return "'";
			}
			case 186: {
				return ';';
			}
			case 192: {
				return '~';
			}
			case 34: {
				return (shortened ? 'PgDn' : 'Page Down');
			}
			case 33: {
				return (shortened ? 'PgUp' : 'Page Up');
			}
			case 46: {
				return (shortened ? 'Del' : 'Delete');
			}
			case 91: {
				return (shortened ? 'LWin' : 'Left Windows');
			}
			case 92: {
				return (shortened ? 'RWin' : 'Right Windows');
			}
			case 144: {
				return (shortened ? 'NumLk' : 'Num Lock');
			}
			case 145: {
				return (shortened ? 'ScrLk' : 'Scroll Lock');
			}
			default: {
				return (shortened ? value.substr(0, Math.min(5, value.length)) : value);
			}
		}
	};
	global.Franca.KeyExtensions = $Franca_KeyExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.KeyImageType
	var $Franca_KeyImageType = function() {
	};
	$Franca_KeyImageType.__typeName = 'Franca.KeyImageType';
	global.Franca.KeyImageType = $Franca_KeyImageType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.KeyInputEvent
	var $Franca_KeyInputEvent = function(k) {
		this.$1$PreventDefaultField = false;
		this.key = null;
		this.key = k;
	};
	$Franca_KeyInputEvent.__typeName = 'Franca.KeyInputEvent';
	global.Franca.KeyInputEvent = $Franca_KeyInputEvent;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.KeyPress
	var $Franca_KeyPress = function() {
		this.keyCode = 0;
		this.key = 0;
		this.char$1 = 0;
	};
	$Franca_KeyPress.__typeName = 'Franca.KeyPress';
	$Franca_KeyPress.$ctor1 = function(keyCode, key, chr) {
		this.keyCode = 0;
		this.key = 0;
		this.char$1 = 0;
		this.keyCode = keyCode;
		this.key = key;
		this.char$1 = chr;
	};
	$Franca_KeyPress.getDefaultValue = function() {
		return new $Franca_KeyPress();
	};
	$Franca_KeyPress.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_KeyPress.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.KeyPress = $Franca_KeyPress;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.KeyState
	var $Franca_KeyState = function() {
	};
	$Franca_KeyState.__typeName = 'Franca.KeyState';
	global.Franca.KeyState = $Franca_KeyState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.MainLoop
	var $Franca_MainLoop = function() {
	};
	$Franca_MainLoop.__typeName = 'Franca.MainLoop';
	$Franca_MainLoop.start = function() {
		$Franca_MainLoop.$lastFrameTime = Franca.Platform.get_time();
		$Franca_MainLoop.$running = true;
		$Franca_MainLoop.$initJS();
		$Franca_MainLoop.$requestFrame();
	};
	$Franca_MainLoop.stop = function() {
		$Franca_MainLoop.$running = false;
	};
	$Franca_MainLoop.tick = function() {
		if (ss.isValue($Franca_MainLoop.$gameContainer)) {
			// Explicitly set the current GL context, in DOTNET this is
			// not needed by GL calls because every window has its own thread and
			// every thread has its own context, but it is used in GL calls in JS
			$Franca_GraphicsDevice.set_current($Franca_MainLoop.$gameContainer.get_graphicsDevice());
		}
		// first finish all loading, then refresh time so loads do not mess up timing within the frame
		$Franca_HttpRequest.processActiveRequests();
		$Franca_File.update();
		// get time AFTER loading files so it doesn't mess with stuff
		var time = Franca.Platform.get_time();
		var elapsed = new ss.TimeSpan(time.ticks - $Franca_MainLoop.$lastFrameTime.ticks);
		$Franca_MainLoop.$lastFrameTime = time;
		var sleepTime;
		if ((sleepTime = $Franca_MainLoop.$tryTick(elapsed)).ticks > (new ss.TimeSpan(0)).ticks) {
			// we do nothing, which lets javascript requestAnimationFrame, and when the next frame
			// exceeds our desired time we draw a frame, which is awful but apparently the best
			// we can expect out of javascript ¯\_(ツ)_/¯
			// one possible alternative is to set a timeout instead of using requestAnimationFrame
			// if there's a sleep time. crude testing of "weird" fpses to lock at (like 55) seem to
			// suggest this method has a far better accuracy, though may have tearing.
			// toggle this behavior off by setting UseTimeoutForSleep to false
			$Franca_MainLoop.$sleepTimeout = sleepTime;
		}
		// set the current GraphicsDevice back to null to avoid unexpected behavior
		$Franca_GraphicsDevice.set_current(null);
	};
	$Franca_MainLoop.$calculateFps = function() {
		if ($Franca_MainLoop.$fpsAccumulator.ticks / 10000000 >= $Franca_MainLoop.$fpsPeriod) {
			$Franca_MainLoop.$fps = Math.round($Franca_MainLoop.$frames / ($Franca_MainLoop.$fpsAccumulator.ticks / 10000000));
			$Franca_MainLoop.$frames = 0;
			$Franca_MainLoop.$fpsAccumulator = new ss.TimeSpan(0);
		}
	};
	$Franca_MainLoop.setFpsUpdatePeriod = function(seconds) {
		$Franca_MainLoop.$fpsPeriod = seconds;
	};
	$Franca_MainLoop.$tryTick = function(elapsed) {
		// calculate FPS
		$Franca_MainLoop.$fpsAccumulator = new ss.TimeSpan($Franca_MainLoop.$fpsAccumulator.ticks + elapsed.ticks);
		if (ss.isValue($Franca_MainLoop.$gameContainer)) {
			if ($Franca_MainLoop.$gameContainer.get_maxFrameTime().ticks > (new ss.TimeSpan(0)).ticks) {
				elapsed = new ss.TimeSpan(Math.min($Franca_MainLoop.$gameContainer.get_maxFrameTime().ticks, elapsed.ticks));
			}
			var steppedTime = $Franca_MainLoop.$gameTime;
			$Franca_MainLoop.$gameTime = new ss.TimeSpan($Franca_MainLoop.$gameTime.ticks + elapsed.ticks);
			$Franca_MainLoop.$gameContainer.$checkResolution();
			$Franca_MainLoop.$gameContainer.processEvents();
			// all other logic goes here
			if (!$Franca_MainLoop.$gameContainer.get_closed()) {
				if (ss.isValue($Franca_MainLoop.$gameContainer.get_audioContext())) {
					$Franca_MainLoop.$gameContainer.get_audioContext().update();
				}
				$Franca_MainLoop.$accumulator = new ss.TimeSpan($Franca_MainLoop.$accumulator.ticks + elapsed.ticks);
				var timeStep = $Franca_MainLoop.$gameContainer.get_timeStep();
				if ($Franca_MainLoop.$gameContainer.get_isFixedTimeStep()) {
					while ($Franca_MainLoop.$accumulator.ticks < timeStep.ticks) {
						return new ss.TimeSpan(timeStep.ticks - $Franca_MainLoop.$accumulator.ticks);
					}
					$Franca_MainLoop.$frames++;
					$Franca_MainLoop.$calculateFps();
					$Franca_MainLoop.$gameContainer.set_FPS($Franca_MainLoop.$fps);
					while ($Franca_MainLoop.$accumulator.ticks >= timeStep.ticks) {
						$Franca_MainLoop.$accumulator = new ss.TimeSpan($Franca_MainLoop.$accumulator.ticks - timeStep.ticks);
						steppedTime = new ss.TimeSpan(steppedTime.ticks + timeStep.ticks);
					}
					$Franca_MainLoop.$gameContainer.startFrame(steppedTime, timeStep);
					$Franca_MainLoop.$gameContainer.update(steppedTime, timeStep);
					$Franca_MainLoop.$gameContainer.step(steppedTime, timeStep);
					var alpha = System.TimeSpanExtensions.divide$1($Franca_MainLoop.$accumulator, timeStep);
					$Franca_MainLoop.$gameContainer.interpolate(alpha);
					$Franca_MainLoop.$gameContainer.render(steppedTime, timeStep);
					$Franca_MainLoop.$gameContainer.swapBuffers();
					$Franca_MainLoop.$gameContainer.endFrame(steppedTime, timeStep);
				}
				else {
					$Franca_MainLoop.$gameContainer.startFrame($Franca_MainLoop.$gameTime, elapsed);
					$Franca_MainLoop.$frames++;
					$Franca_MainLoop.$calculateFps();
					$Franca_MainLoop.$gameContainer.set_FPS($Franca_MainLoop.$fps);
					$Franca_MainLoop.$gameContainer.update($Franca_MainLoop.$gameTime, elapsed);
					while ($Franca_MainLoop.$accumulator.ticks >= timeStep.ticks) {
						$Franca_MainLoop.$accumulator = new ss.TimeSpan($Franca_MainLoop.$accumulator.ticks - timeStep.ticks);
						steppedTime = new ss.TimeSpan(steppedTime.ticks + timeStep.ticks);
						$Franca_MainLoop.$gameContainer.step(steppedTime, timeStep);
					}
					var alpha1 = System.TimeSpanExtensions.divide$1($Franca_MainLoop.$accumulator, timeStep);
					$Franca_MainLoop.$gameContainer.interpolate(alpha1);
					$Franca_MainLoop.$gameContainer.render($Franca_MainLoop.$gameTime, elapsed);
					$Franca_MainLoop.$gameContainer.swapBuffers();
					$Franca_MainLoop.$gameContainer.endFrame($Franca_MainLoop.$gameTime, elapsed);
				}
			}
			else {
				$Franca_MainLoop.$gameContainer.dispose();
			}
		}
		return new ss.TimeSpan(0);
	};
	$Franca_MainLoop.get_isActive = function() {
		return !$Franca_MainLoop.$gameContainer.get_closed() && $Franca_MainLoop.$gameContainer.get_hasFocus();
	};
	$Franca_MainLoop.get_gameContainer = function() {
		return $Franca_MainLoop.$gameContainer;
	};
	$Franca_MainLoop.set_gameContainer = function(value) {
		if (ss.isValue($Franca_MainLoop.$gameContainer) && ss.isValue(value)) {
			throw new $Franca_GameReferenceException();
		}
		$Franca_MainLoop.$gameContainer = value;
	};
	$Franca_MainLoop.get_running = function() {
		return $Franca_MainLoop.$running && !$Franca_MainLoop.$gameContainer.get_closed();
	};
	$Franca_MainLoop.$initJS = function() {
		var data = Franca.Text.Base64.decode($Franca_MainLoop.$idleWorkerBase64Source);
		var url = data.toUrl('text/javascript');
		$Franca_MainLoop.$idleWorker = new Worker(url);
		$Franca_MainLoop.$idleWorker.onmessage = $Franca_MainLoop.$idleWorker_OnMessage;
		FrancaGlobals.onWindowActiveChanged = $Franca_MainLoop.$windowActiveChanged;
	};
	$Franca_MainLoop.$windowActiveChanged = function() {
		if ($Franca_MainLoop.get_isActive()) {
			var $t2 = $Franca_MainLoop.$idleWorker;
			var $t1 = [];
			$t1.push('stop');
			$t2.postMessage($t1);
		}
		else {
			var $t4 = $Franca_MainLoop.$idleWorker;
			var $t3 = [];
			$t3.push('start');
			$t3.push($Franca_MainLoop.$idleMs);
			$t4.postMessage($t3);
		}
	};
	$Franca_MainLoop.$idleWorker_OnMessage = function(evt) {
		var workerEvent = evt;
		if (workerEvent.data === 'tick') {
			$Franca_MainLoop.$idleFrame();
		}
	};
	$Franca_MainLoop.$requestFrame = function() {
		if (!$Franca_MainLoop.$idleFrame$1) {
			if ($Franca_MainLoop.$sleepTimeout.ticks > (new ss.TimeSpan(0)).ticks && $Franca_MainLoop.$useTimeoutForSleep) {
				window.setTimeout($Franca_MainLoop.$activeFrame, ss.Int32.trunc(Math.trunc($Franca_MainLoop.$sleepTimeout.ticks / 10000)));
				$Franca_MainLoop.$sleepTimeout = new ss.TimeSpan(0);
			}
			else {
				window.requestAnimationFrame($Franca_MainLoop.$activeFrame$1);
			}
		}
	};
	$Franca_MainLoop.$activeFrame$1 = function(time) {
		if (!$Franca_MainLoop.get_isActive()) {
			// TODO(Eni, Low): should we change idleMs if IsFixedTimestep is true?
			FrancaGlobals.requestBackgroundFrame($Franca_MainLoop.$activeFrame$1, $Franca_MainLoop.$idleMs);
			return;
		}
		$Franca_MainLoop.$idleFrame$1 = false;
		$Franca_MainLoop.$frame();
	};
	$Franca_MainLoop.$activeFrame = function() {
		if (!$Franca_MainLoop.get_isActive()) {
			FrancaGlobals.requestBackgroundFrame($Franca_MainLoop.$activeFrame$1, $Franca_MainLoop.$idleMs);
			return;
		}
		$Franca_MainLoop.$idleFrame$1 = false;
		$Franca_MainLoop.$frame();
	};
	$Franca_MainLoop.$frame = function() {
		var time = Franca.Platform.get_time();
		$Franca_MainLoop.tick();
		$Franca_MainLoop.$requestFrame();
	};
	$Franca_MainLoop.$idleFrame = function() {
		if ($Franca_MainLoop.get_isActive()) {
			return;
		}
		$Franca_MainLoop.$idleFrame$1 = true;
		$Franca_MainLoop.$frame();
	};
	$Franca_MainLoop.get_useTimeoutForSleep = function() {
		return $Franca_MainLoop.$useTimeoutForSleep;
	};
	$Franca_MainLoop.set_useTimeoutForSleep = function(value) {
		$Franca_MainLoop.$useTimeoutForSleep = value;
	};
	global.Franca.MainLoop = $Franca_MainLoop;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.MessageType
	var $Franca_MessageType = function() {
	};
	$Franca_MessageType.__typeName = 'Franca.MessageType';
	global.Franca.MessageType = $Franca_MessageType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.MissingAttributeException
	var $Franca_MissingAttributeException = function(message) {
		$Franca_MissingAttributeException.$ctor1.call(this, message, null);
	};
	$Franca_MissingAttributeException.__typeName = 'Franca.MissingAttributeException';
	$Franca_MissingAttributeException.$ctor2 = function(source, attribute) {
		$Franca_MissingAttributeException.$ctor3.call(this, source, attribute, null);
	};
	$Franca_MissingAttributeException.$ctor3 = function(source, attribute, innerException) {
		$Franca_MissingAttributeException.$ctor1.call(this, ss.formatString('Missing attribute of type {0} on type {1}.', ss.getTypeFullName(source), ss.getTypeFullName(attribute)), innerException);
	};
	$Franca_MissingAttributeException.$ctor1 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.MissingAttributeException = $Franca_MissingAttributeException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.MissingConstructorException
	var $Franca_MissingConstructorException = function(message) {
		$Franca_MissingConstructorException.$ctor1.call(this, message, null);
	};
	$Franca_MissingConstructorException.__typeName = 'Franca.MissingConstructorException';
	$Franca_MissingConstructorException.$ctor2 = function(source, signature) {
		$Franca_MissingConstructorException.$ctor3.call(this, source, null, signature);
	};
	$Franca_MissingConstructorException.$ctor3 = function(source, innerException, signature) {
		$Franca_MissingConstructorException.$ctor1.call(this, $Franca_MissingConstructorException.$getMessage(source, signature), innerException);
	};
	$Franca_MissingConstructorException.$ctor1 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	$Franca_MissingConstructorException.$getMessage = function(source, signature) {
		var format = 'Missing constructor: new {0}({1}).{2}';
		var sig = '';
		for (var $t1 = 0; $t1 < signature.length; $t1++) {
			var type = signature[$t1];
			sig += ((sig === '') ? ss.getTypeFullName(type) : (', ' + ss.getTypeFullName(type)));
		}
		var extra = '\n' + 'Reflection requires [Reflectable] or [DefaultMemberReflectability] attributes.';
		return ss.formatString(format, ss.getTypeFullName(source), sig, extra);
	};
	global.Franca.MissingConstructorException = $Franca_MissingConstructorException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mouse
	var $Franca_Mouse = function() {
		this.$leftButton = new $Franca_MouseButton(0);
		this.$middleButton = new $Franca_MouseButton(1);
		this.$rightButton = new $Franca_MouseButton(2);
		this.$button4 = new $Franca_MouseButton(3);
		this.$button5 = new $Franca_MouseButton(4);
		this.x = 0;
		this.lastX = 0;
		this.realTimeX = 0;
		this.y = 0;
		this.lastY = 0;
		this.realTimeY = 0;
		this.inFrame = false;
	};
	$Franca_Mouse.__typeName = 'Franca.Mouse';
	$Franca_Mouse.isInFrame = function(x, y, container) {
		return x >= 0 && y >= 0 && x < container.get_width() && y < container.get_height();
	};
	global.Franca.Mouse = $Franca_Mouse;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.MouseBind
	var $Franca_MouseBind = function() {
		this.buttonType = 0;
		this.button = null;
		this.$type = 0;
		this.callback = null;
		this.$info = 0;
		this.$mode = 0;
		this.shift = false;
		this.control = false;
		this.alt = false;
	};
	$Franca_MouseBind.__typeName = 'Franca.MouseBind';
	$Franca_MouseBind.$ctor1 = function(button, buttonType, type, callback, info, mode, shift, control, alt) {
		this.buttonType = 0;
		this.button = null;
		this.$type = 0;
		this.callback = null;
		this.$info = 0;
		this.$mode = 0;
		this.shift = false;
		this.control = false;
		this.alt = false;
		this.button = button;
		this.buttonType = buttonType;
		this.$type = type;
		this.callback = callback;
		this.$info = info;
		this.$mode = mode;
		this.shift = shift;
		this.control = control;
		this.alt = alt;
	};
	$Franca_MouseBind.getDefaultValue = function() {
		return new $Franca_MouseBind();
	};
	$Franca_MouseBind.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_MouseBind.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.MouseBind = $Franca_MouseBind;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.MouseButton
	var $Franca_MouseButton = function(button) {
		this.state = 0;
		this.lastState = 0;
		this.realTimeState = 0;
		this.name = null;
		this.button = 0;
		this.type = 0;
		this.button = button;
		this.type = button;
		this.name = System.EnumExtensions.getName($Franca_MouseButtons).call(null, button);
	};
	$Franca_MouseButton.__typeName = 'Franca.MouseButton';
	global.Franca.MouseButton = $Franca_MouseButton;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.MouseButtons
	var $Franca_MouseButtons = function() {
	};
	$Franca_MouseButtons.__typeName = 'Franca.MouseButtons';
	global.Franca.MouseButtons = $Franca_MouseButtons;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGLDebugFrequency
	var $Franca_OpenGLDebugFrequency = function() {
	};
	$Franca_OpenGLDebugFrequency.__typeName = 'Franca.OpenGLDebugFrequency';
	global.Franca.OpenGLDebugFrequency = $Franca_OpenGLDebugFrequency;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGLDebugOptions
	var $Franca_OpenGLDebugOptions = function() {
		this.$1$DebugField = false;
		this.$1$FrequencyField = 0;
		this.$1$IntervalField = ss.getDefaultValue(ss.TimeSpan);
	};
	$Franca_OpenGLDebugOptions.__typeName = 'Franca.OpenGLDebugOptions';
	global.Franca.OpenGLDebugOptions = $Franca_OpenGLDebugOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGLException
	var $Franca_OpenGLException = function() {
		$Franca_OpenGLException.$ctor1.call(this, null);
	};
	$Franca_OpenGLException.__typeName = 'Franca.OpenGLException';
	$Franca_OpenGLException.$ctor1 = function(message) {
		$Franca_OpenGLException.$ctor2.call(this, message, null);
	};
	$Franca_OpenGLException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.OpenGLException = $Franca_OpenGLException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.PixelFont
	var $Franca_PixelFont = function() {
		this.$fontMetrics = ss.getDefaultValue($Franca_FontMetrics);
		this.$glyphMetrics = null;
		this.$glyphs = null;
		this.$strokeMetrics = null;
		this.$strokes = null;
		this.$_batch = null;
		this.$assetTexture = null;
		this.$assetJson = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
	};
	$Franca_PixelFont.__typeName = 'Franca.PixelFont';
	$Franca_PixelFont.$ctor2 = function(texture, json) {
		$Franca_PixelFont.$ctor1.call(this, new $Franca_SubTexture(texture), json);
	};
	$Franca_PixelFont.$ctor1 = function(texture, json) {
		this.$fontMetrics = ss.getDefaultValue($Franca_FontMetrics);
		this.$glyphMetrics = null;
		this.$glyphs = null;
		this.$strokeMetrics = null;
		this.$strokes = null;
		this.$_batch = null;
		this.$assetTexture = null;
		this.$assetJson = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.init(texture, json);
	};
	global.Franca.PixelFont = $Franca_PixelFont;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.RenderAttachments
	var $Franca_RenderAttachments = function(zero) {
		this.$dirty = false;
		this.$attachments = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_Texture]))();
		this.$indices = null;
		this.$dirty = true;
		this.$attachments.set_item(0, zero);
	};
	$Franca_RenderAttachments.__typeName = 'Franca.RenderAttachments';
	global.Franca.RenderAttachments = $Franca_RenderAttachments;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.RenderAttachmentTexture
	var $Franca_RenderAttachmentTexture = function(width, height, data, dataFormat, mipmapped) {
		$Franca_Texture.$ctor4.call(this, width, height, data, dataFormat, mipmapped);
		this.renderTarget = true;
	};
	$Franca_RenderAttachmentTexture.__typeName = 'Franca.RenderAttachmentTexture';
	$Franca_RenderAttachmentTexture.$ctor1 = function(width, height, data, srcDataFormat, glDataFormat, mipmapped) {
		$Franca_Texture.$ctor6.call(this, width, height, data, srcDataFormat, glDataFormat, mipmapped);
		this.renderTarget = true;
	};
	global.Franca.RenderAttachmentTexture = $Franca_RenderAttachmentTexture;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.RenderTarget
	var $Franca_RenderTarget = function(width, height, mipmapped) {
		this.attachments = null;
		this.$disposed$1 = false;
		$Franca_Texture.$ctor8.call(this, width, height, true, mipmapped, 6408, 5121, 33189, false);
		this.renderTarget = true;
		this.attachments = new $Franca_RenderAttachments(this);
	};
	$Franca_RenderTarget.__typeName = 'Franca.RenderTarget';
	$Franca_RenderTarget.$ctor1 = function(width, height, stencilBuffer, mipmapped) {
		this.attachments = null;
		this.$disposed$1 = false;
		$Franca_Texture.$ctor8.call(this, width, height, true, mipmapped, 6408, 5121, 33189, stencilBuffer);
		this.renderTarget = true;
		this.attachments = new $Franca_RenderAttachments(this);
	};
	$Franca_RenderTarget.$ctor3 = function(width, height, dataFormat, type, depthBits, mipmapped) {
		this.attachments = null;
		this.$disposed$1 = false;
		$Franca_Texture.$ctor8.call(this, width, height, true, mipmapped, dataFormat, type, depthBits, false);
		this.attachments = new $Franca_RenderAttachments(this);
	};
	$Franca_RenderTarget.$ctor2 = function(width, height, dataFormat, type, depthBits, mipmapped) {
		this.attachments = null;
		this.$disposed$1 = false;
		$Franca_Texture.$ctor7.call(this, width, height, true, mipmapped, dataFormat, type, depthBits);
		this.attachments = new $Franca_RenderAttachments(this);
	};
	global.Franca.RenderTarget = $Franca_RenderTarget;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.RenderTargetState
	var $Franca_RenderTargetState = function() {
		this.$renderTarget = null;
		this.$viewport = ss.getDefaultValue(Franca.Rectangle);
		this.$graphicsDevice = null;
		this.$_b_restored = false;
	};
	$Franca_RenderTargetState.__typeName = 'Franca.RenderTargetState';
	$Franca_RenderTargetState.$ctor1 = function(graphicsDevice) {
		this.$renderTarget = null;
		this.$viewport = ss.getDefaultValue(Franca.Rectangle);
		this.$graphicsDevice = null;
		this.$_b_restored = false;
		this.$graphicsDevice = graphicsDevice;
		this.$renderTarget = this.$graphicsDevice.get_renderTarget();
		this.$viewport = this.$graphicsDevice.get_viewport();
		this.$_b_restored = false;
	};
	$Franca_RenderTargetState.getDefaultValue = function() {
		return new $Franca_RenderTargetState();
	};
	global.Franca.RenderTargetState = $Franca_RenderTargetState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Resolution
	var $Franca_Resolution = function() {
		this.width = 0;
		this.height = 0;
		this.refreshRate = 0;
		this.bitsPerPixel = 0;
	};
	$Franca_Resolution.__typeName = 'Franca.Resolution';
	$Franca_Resolution.$ctor2 = function(width, height, rate, depth) {
		this.width = 0;
		this.height = 0;
		this.refreshRate = 0;
		this.bitsPerPixel = 0;
		this.width = width;
		this.height = height;
		this.refreshRate = rate;
		this.bitsPerPixel = depth;
	};
	$Franca_Resolution.$ctor1 = function(reader) {
		this.width = 0;
		this.height = 0;
		this.refreshRate = 0;
		this.bitsPerPixel = 0;
		this.width = 0;
		this.height = 0;
		this.refreshRate = 0;
		this.bitsPerPixel = 32;
		if (!reader.isObject()) {
			throw new Franca.Serialization.Streaming.StreamingJsonTempException();
		}
		var _requiredField_width = false;
		var _requiredField_height = false;
		var _requiredField_refreshRate = false;
		var _requiredField_bitsPerPixel = false;
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new Franca.Serialization.Streaming.StreamingJsonTempException();
					}
					case 'width': {
						{
							_requiredField_width = true;
							if (!reader.isInteger()) {
								throw new Franca.Serialization.Streaming.StreamingJsonTempException();
							}
							this.width = reader.readInt32(false);
						}
						break;
					}
					case 'height': {
						{
							_requiredField_height = true;
							if (!reader.isInteger()) {
								throw new Franca.Serialization.Streaming.StreamingJsonTempException();
							}
							this.height = reader.readInt32(false);
						}
						break;
					}
					case 'refreshRate': {
						{
							_requiredField_refreshRate = true;
							if (!reader.isNumber()) {
								throw new Franca.Serialization.Streaming.StreamingJsonTempException();
							}
							this.refreshRate = reader.readSingle(false);
						}
						break;
					}
					case 'bitsPerPixel': {
						{
							_requiredField_bitsPerPixel = true;
							if (!reader.isInteger()) {
								throw new Franca.Serialization.Streaming.StreamingJsonTempException();
							}
							this.bitsPerPixel = reader.readUInt8(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		if (!_requiredField_width || !_requiredField_height || !_requiredField_refreshRate || !_requiredField_bitsPerPixel) {
			throw new Franca.Serialization.Streaming.StreamingJsonTempException();
		}
	};
	$Franca_Resolution.getDefaultValue = function() {
		return new $Franca_Resolution();
	};
	global.Franca.Resolution = $Franca_Resolution;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ScreenState
	var $Franca_ScreenState = function() {
	};
	$Franca_ScreenState.__typeName = 'Franca.ScreenState';
	global.Franca.ScreenState = $Franca_ScreenState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Shader
	var $Franca_Shader = function() {
		this.$glShader = null;
		this.$uniforms = null;
		this.$attributes = null;
		this.$shaderType = 0;
		this.$sourceFile = null;
		this.$2$SourceField = null;
		this.$recompilationRequests = null;
		this.$thisInclude = new $Franca_ShaderInclude();
		this.$graphicsDevice = null;
		this.$defines = null;
		this.$loaded$1 = false;
		this.$2$OnLoadField = null;
		this.$disposed = false;
		$Franca_ShaderInclude.call(this);
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_Shader.__typeName = 'Franca.Shader';
	$Franca_Shader.$ctor1 = function(glShader, uniforms, attributes, shaderType) {
		this.$glShader = null;
		this.$uniforms = null;
		this.$attributes = null;
		this.$shaderType = 0;
		this.$sourceFile = null;
		this.$2$SourceField = null;
		this.$recompilationRequests = null;
		this.$thisInclude = new $Franca_ShaderInclude();
		this.$graphicsDevice = null;
		this.$defines = null;
		this.$loaded$1 = false;
		this.$2$OnLoadField = null;
		this.$disposed = false;
		$Franca_ShaderInclude.call(this);
		this.$glShader = glShader;
		this.$uniforms = uniforms;
		this.$attributes = attributes;
		this.$shaderType = shaderType;
		this.setLoaded(true);
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_Shader.op_Implicit = function(shader) {
		return shader.$glShader;
	};
	$Franca_Shader.getIncludes = function(source, sourceFile) {
		if (ss.isNullOrUndefined(sourceFile)) {
			throw new ss.ArgumentNullException('sourceFile');
		}
		var includes = [];
		var $t1 = new UniPrep.CompileArgs();
		$t1.disableDefine = true;
		$t1.disableIf = true;
		var compileArgs = $t1;
		compileArgs.files.push(sourceFile);
		compileArgs.onResolveInclude = function(args, includeFile) {
			if (!ss.contains(includes, includeFile)) {
				includes.push(includeFile);
			}
			// we don't actually wanna resolve the file here, so just return an empty string
			return '';
		};
		UniPrep.Preprocessor.preprocessString(source, compileArgs);
		return includes;
	};
	$Franca_Shader.replaceIncludes = function(content, source, filename, includes, filenames) {
		var $t1 = new UniPrep.CompileArgs();
		$t1.disableDefine = true;
		$t1.disableIf = true;
		var compileArgs = $t1;
		var graphicsDevice = $Franca_GraphicsDevice.get_current() || $Franca_GraphicsDevice.get_default();
		if (ss.isValue(graphicsDevice) && graphicsDevice.get_debugShaderSource()) {
			compileArgs.add_onBeginInclude($Franca_Shader.$compileArgs_OnBeginInclude);
			compileArgs.add_onEndInclude($Franca_Shader.$compileArgs_OnEndInclude);
		}
		compileArgs.onResolveInclude = function(args, includeFile) {
			for (var $t2 = 0; $t2 < includes.length; $t2++) {
				var i = includes[$t2];
				if (ss.referenceEquals(i.get_fullPath(), includeFile)) {
					return i.get_code();
				}
			}
			throw new $Franca_FileLoadException.$ctor1(ss.formatString("Couldn't resolve included file '{0}' inside shader '{1}'", includeFile, filename));
		};
		var defaultFile = '_internal_file';
		if (ss.isValue(content)) {
			defaultFile = Franca.Platform.combinePaths$2(content.get_contentRoot(), defaultFile);
		}
		compileArgs.files.push(ss.coalesce(filename, defaultFile));
		filenames.$ = compileArgs.files;
		return UniPrep.Preprocessor.preprocessString(source, compileArgs);
	};
	$Franca_Shader.$compileArgs_OnBeginInclude = function(str, args, currentLine, prevFile) {
		str.appendLine(ss.formatString('#line {0} {1}', currentLine, args.currentFile));
	};
	$Franca_Shader.$compileArgs_OnEndInclude = function(str, args, currentLine) {
		str.appendLine(ss.formatString('#line {0} {1}', currentLine, args.currentFile));
	};
	$Franca_Shader.getFullSource = function(content, source, filename, filenames, includes, platform, defines) {
		source = $Franca_Shader.replaceIncludes(content, source, filename, includes, filenames);
		//var header = platform == PlatformType.Native ? headerDesktop : headerWebGL;
		var header = $Franca_OpenGL_WebGL_GL.getShaderHeader();
		var definesString = new ss.StringBuilder();
		if (ss.isValue(defines)) {
			for (var $t1 = 0; $t1 < defines.length; $t1++) {
				var def = defines[$t1];
				if (!System.StringExtensions.isNullOrEmpty(def, false)) {
					definesString.appendLine(ss.formatString('#define {0}', def));
				}
			}
		}
		if (Franca.Platform.get_type() === 2) {
			return definesString.toString() + source;
		}
		else {
			return header + definesString.toString() + source;
		}
	};
	$Franca_Shader.compileInto = function(content, source, type, outShader, includes, defines) {
		$Franca_Shader.compileInto$1(content, source, type, outShader, null, includes, defines);
	};
	$Franca_Shader.compileInto$1 = function(content, source, type, outShader, filename, includes, defines) {
		var partialSource = source;
		if (type === 0) {
			throw new ss.NotImplementedException('Geometry shaders are not currently supported.');
		}
		var shader = $Franca_OpenGL_WebGL_GL.createShader(System.EnumExtensions.toInt32(type));
		try {
			var filenames = {};
			source = $Franca_Shader.getFullSource(content, source, filename, filenames, includes, Franca.Platform.get_type(), defines);
			$Franca_OpenGL_WebGL_GL.shaderSource(shader, source);
			$Franca_OpenGL_WebGL_GL.compileShader(shader);
			if ($Franca_OpenGL_WebGL_GL.getShaderParameter(shader, $Franca_OpenGL_WebGL_Constants.compilE_STATUS) === 0) {
				var errorMessage = $Franca_OpenGL_WebGL_GL.getShaderInfoLog(shader);
				var errorLoc = $Franca_Shader.getGlErrorLocation(errorMessage, filenames.$, filename);
				throw new $Franca_ShaderException.$ctor1('Failed to compile shader ' + errorLoc + ': ' + errorMessage);
			}
			$Franca_OpenGL_WebGL_GL.throwErrors(false);
			outShader.$glShader = shader;
			outShader.$shaderType = type;
			outShader.set_source(partialSource);
			outShader.$defines = defines;
			outShader.setLoaded(true);
		}
		catch ($t1) {
			try {
				$Franca_OpenGL_WebGL_GL.deleteShader(shader);
			}
			catch ($t2) {
			}
			throw $t1;
		}
	};
	$Franca_Shader.getGlErrorLocation = function(error, filenames, file) {
		try {
			if (ss.isNullOrUndefined(filenames) || filenames.length < 1) {
				return ss.formatString('"{0}"', ss.coalesce(file, '<unknown>'));
			}
			if (filenames.length === 1) {
				return ss.formatString('"{0}"', ss.coalesce(filenames[0], file));
			}
			var match = $Franca_Shader.getGlErrorMatch(error);
			if (ss.isNullOrUndefined(Franca.Text.Match.op_Implicit(match)) || match.groups.length < 2) {
				return ss.formatString('"{0}"', ss.coalesce(filenames[0], file));
			}
			var fileIndex = {}, lineIndex = {};
			if (!Franca.Calc.tryParseInt(match.groups[1], fileIndex)) {
				return ss.formatString('"{0}"', ss.coalesce(filenames[0], file));
			}
			if (!Franca.Calc.tryParseInt(match.groups[2], lineIndex)) {
				return ss.formatString('"{0}"', ss.coalesce(filenames[0], file));
			}
			if (fileIndex.$ < 0 || fileIndex.$ >= filenames.length || System.StringExtensions.isNullOrEmpty(filenames[fileIndex.$], false)) {
				return ss.formatString('"{0}"', ss.coalesce(filenames[0], file));
			}
			return ss.formatString('"{0}", line {1}', filenames[fileIndex.$], lineIndex.$);
		}
		catch ($t1) {
			return ss.formatString('"{0}"', ss.coalesce(file, '<unknown>'));
		}
	};
	$Franca_Shader.getGlErrorMatch = function(error) {
		var match;
		match = $Franca_Shader.$atiErrorLineFile.exec(error);
		if (match.success) {
			return match;
		}
		match = $Franca_Shader.$nvidiaErrorLineFile.exec(error);
		if (match.success) {
			return match;
		}
		return null;
	};
	$Franca_Shader.compile$2 = function(content, source, type, filename, includes, defines) {
		var shader = new $Franca_Shader();
		shader.$sourceFile = filename;
		$Franca_Shader.compileInto(content, source, type, shader, includes, defines);
		return shader;
	};
	$Franca_Shader.compile = function(content, source, type, includes, defines) {
		return $Franca_Shader.compile$2(content, source, type, null, includes, defines);
	};
	$Franca_Shader.compile$1 = function(content, source, type, filename, defines) {
		return $Franca_Shader.compile$2(content, source, type, ss.coalesce(filename, 'internal/unknown'), [], defines);
	};
	$Franca_Shader.get_batchVertexLines = function() {
		return $Franca_Shader.$batchVertexLines;
	};
	$Franca_Shader.get_batchVertexSource = function() {
		return $Franca_Shader.$batchVertexSource;
	};
	$Franca_Shader.get_batchFragLines = function() {
		return $Franca_Shader.$batchFragLines;
	};
	$Franca_Shader.get_batchFragSource = function() {
		return $Franca_Shader.$batchFragSource;
	};
	$Franca_Shader.get_batchRectLines = function() {
		return $Franca_Shader.$batchRectLines;
	};
	$Franca_Shader.get_batchRectSource = function() {
		return $Franca_Shader.$batchRectSource;
	};
	global.Franca.Shader = $Franca_Shader;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ShaderException
	var $Franca_ShaderException = function() {
		$Franca_ShaderException.$ctor1.call(this, 'An unidentified shader exception has occurred.');
	};
	$Franca_ShaderException.__typeName = 'Franca.ShaderException';
	$Franca_ShaderException.$ctor1 = function(message) {
		$Franca_ShaderException.$ctor2.call(this, message, null);
	};
	$Franca_ShaderException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.ShaderException = $Franca_ShaderException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ShaderInclude
	var $Franca_ShaderInclude = function() {
		this.$1$CodeField = null;
		this.fileRes = null;
		this.$1$FullPathField = null;
		this.$1$FilenameField = null;
		this.$1$NameField = null;
		this.content = null;
		this.$loaded = false;
		this.$1$OnLoadField = null;
		this.$includes = null;
		this.set_name('');
	};
	$Franca_ShaderInclude.__typeName = 'Franca.ShaderInclude';
	$Franca_ShaderInclude.$ctor1 = function(code) {
		$Franca_ShaderInclude.call(this);
		this.set_code(code);
	};
	$Franca_ShaderInclude.op_Explicit = function(o) {
		return (!ss.referenceEquals(o, null) ? o.get_code() : null);
	};
	global.Franca.ShaderInclude = $Franca_ShaderInclude;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ShaderParamCollection
	var $Franca_ShaderParamCollection = function() {
		this.$name = null;
		this.$parameters = null;
		this.$cachedValue = null;
		this.$parameters = [];
	};
	$Franca_ShaderParamCollection.__typeName = 'Franca.ShaderParamCollection';
	$Franca_ShaderParamCollection.$ctor1 = function(name) {
		$Franca_ShaderParamCollection.call(this);
		this.$name = name;
	};
	global.Franca.ShaderParamCollection = $Franca_ShaderParamCollection;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ShaderParameter
	var $Franca_ShaderParameter = function(name, type) {
		this.$name = null;
		this.$type = 0;
		this.$dirty = false;
		this.$setValue = null;
		this.$1$LocationField = null;
		this.$name = name;
		this.$type = type;
	};
	$Franca_ShaderParameter.__typeName = 'Franca.ShaderParameter';
	global.Franca.ShaderParameter = $Franca_ShaderParameter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ShaderParamLocation
	var $Franca_ShaderParamLocation = function(location) {
		this.$uLoc = null;
		this.$aLoc = null;
		this.$aLoc = location;
	};
	$Franca_ShaderParamLocation.__typeName = 'Franca.ShaderParamLocation';
	$Franca_ShaderParamLocation.$ctor1 = function(location) {
		this.$uLoc = null;
		this.$aLoc = null;
		this.$uLoc = location;
	};
	$Franca_ShaderParamLocation.op_Implicit$1 = function(location) {
		return new $Franca_ShaderParamLocation.$ctor1(location);
	};
	$Franca_ShaderParamLocation.op_Implicit = function(location) {
		return new $Franca_ShaderParamLocation(location);
	};
	$Franca_ShaderParamLocation.op_Implicit$3 = function(location) {
		return location.$uLoc;
	};
	$Franca_ShaderParamLocation.op_Implicit$2 = function(location) {
		return location.$aLoc;
	};
	global.Franca.ShaderParamLocation = $Franca_ShaderParamLocation;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ShaderParamType
	var $Franca_ShaderParamType = function() {
	};
	$Franca_ShaderParamType.__typeName = 'Franca.ShaderParamType';
	global.Franca.ShaderParamType = $Franca_ShaderParamType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ShaderProgram
	var $Franca_ShaderProgram = function(cloneSource) {
		this.$graphicsDevice = null;
		this.$vertexShader = null;
		this.$fragmentShader = null;
		this.$program = null;
		this.$attributes = null;
		this.$uniforms = null;
		this.$parameters = null;
		this.$disposed = false;
		this.$graphicsDevice = cloneSource.$graphicsDevice;
		this.$vertexShader = cloneSource.$vertexShader;
		this.$fragmentShader = cloneSource.$fragmentShader;
		this.$program = cloneSource.$program;
		this.$attributes = cloneSource.$attributes;
		this.$uniforms = cloneSource.$uniforms;
		this.$parameters = cloneSource.$parameters;
	};
	$Franca_ShaderProgram.__typeName = 'Franca.ShaderProgram';
	$Franca_ShaderProgram.$ctor1 = function(graphicsDevice, vertexShader, fragmentShader) {
		this.$graphicsDevice = null;
		this.$vertexShader = null;
		this.$fragmentShader = null;
		this.$program = null;
		this.$attributes = null;
		this.$uniforms = null;
		this.$parameters = null;
		this.$disposed = false;
		this.$graphicsDevice = graphicsDevice;
		this.$vertexShader = vertexShader;
		this.$fragmentShader = fragmentShader;
		this.initialize(true);
	};
	$Franca_ShaderProgram.op_Implicit = function(effect) {
		return effect.$program;
	};
	global.Franca.ShaderProgram = $Franca_ShaderProgram;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ShaderProgramCollection
	var $Franca_ShaderProgramCollection = function() {
		this.$programs = null;
		this.$programs = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_ShaderProgram]))();
	};
	$Franca_ShaderProgramCollection.__typeName = 'Franca.ShaderProgramCollection';
	$Franca_ShaderProgramCollection.$ctor1 = function(dict) {
		this.$programs = null;
		this.$programs = dict;
	};
	global.Franca.ShaderProgramCollection = $Franca_ShaderProgramCollection;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.ShaderType
	var $Franca_ShaderType = function() {
	};
	$Franca_ShaderType.__typeName = 'Franca.ShaderType';
	global.Franca.ShaderType = $Franca_ShaderType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SocketState
	var $Franca_SocketState = function() {
	};
	$Franca_SocketState.__typeName = 'Franca.SocketState';
	global.Franca.SocketState = $Franca_SocketState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SpriteBatch
	var $Franca_SpriteBatch = function(graphicsDevice) {
		this.$sortMode = 0;
		this.$filter = 0;
		this.$wrap = 0;
		this.$vertexBuffer = null;
		this.$colorBuffer = null;
		this.$uvBuffer = null;
		this.$rotBuffer = null;
		this.vertexOffset = 0;
		this.indexOffset = 0;
		this.$graphicsDevice = null;
		this.$basicEffect = null;
		this.$customEffect = null;
		this.$texture = null;
		this.$matProj = ss.getDefaultValue(Franca.Matrix4);
		this.$drawCalls = null;
		this.glVertexOffset = 0;
		this.glIndexOffset = 0;
		this.$programs = null;
		this.$rectPrograms = null;
		this.$texturePrograms = null;
		this.$currentProgram = null;
		this.$batches = null;
		this.$textureBatches = null;
		this.$batchIndex = 0;
		this.$cachedCustomProgram = null;
		this.$cachedCustomProgramList = null;
		this.$lastViewport = ss.getDefaultValue(Franca.Rectangle);
		this.$lastTexture = null;
		this.$lastProgram = null;
		this.$disposed = false;
		this.intersectionOptimization = false;
		this.$graphicsDevice = graphicsDevice;
		this.$drawCalls = [];
		this.$basicEffect = graphicsDevice.get_builtinAssets().get_basicEffect();
		this.$programs = [];
		this.$vertexBuffer = new (ss.makeGenericType($Franca_TypedBuffer$1, [Number]).$ctor1)($Franca_SpriteBatch.initialVertexCapacity, $Franca_SpriteBatch.vertexDataCapacity, 34962, 35040);
		this.$colorBuffer = new (ss.makeGenericType($Franca_TypedBuffer$1, [Number]).$ctor1)($Franca_SpriteBatch.initialColorCapacity, $Franca_SpriteBatch.colorDataCapacity, 34962, 35040);
		this.$uvBuffer = new (ss.makeGenericType($Franca_TypedBuffer$1, [Number]).$ctor1)($Franca_SpriteBatch.initialUvCapacity, $Franca_SpriteBatch.uvDataCapacity, 34962, 35040);
		this.$rotBuffer = new (ss.makeGenericType($Franca_TypedBuffer$1, [Number]).$ctor1)($Franca_SpriteBatch.initialRotCapacity, $Franca_SpriteBatch.rotDataCapacity, 34962, 35040);
		var $t1 = [];
		$t1.push(this.$basicEffect.get_programs().get_item('rectangle'));
		this.$rectPrograms = $t1;
		this.$rectPrograms[0].getUniform('testAlpha').setValue$7($Franca_SpriteBatch.defaultTestAlpha);
		var $t2 = [];
		$t2.push(this.$basicEffect.get_programs().get_item('default'));
		this.$texturePrograms = $t2;
		this.$texturePrograms[0].getUniform('testAlpha').setValue$7($Franca_SpriteBatch.defaultTestAlpha);
		this.$batches = [];
		this.$textureBatches = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_Texture, ss.Int32]))();
		this.intersectionOptimization = true;
	};
	$Franca_SpriteBatch.__typeName = 'Franca.SpriteBatch';
	$Franca_SpriteBatch.$destroyIndexBuffer = function() {
		if (ss.isValue($Franca_SpriteBatch.$indexBuffer)) {
			$Franca_SpriteBatch.$indexBuffer.dispose();
		}
	};
	$Franca_SpriteBatch.$initializeIndexBuffer = function() {
		if (ss.isNullOrUndefined($Franca_SpriteBatch.$indexBuffer)) {
			var quads = Math.ceil(10922.5);
			var indices = quads * 6;
			$Franca_SpriteBatch.$indexBuffer = new (ss.makeGenericType($Franca_TypedBuffer$1, [ss.Int32]).$ctor3)(indices, indices, 34963, 35044, 1);
			var j = 0;
			for (var i = 0; i + 3 < $Franca_SpriteBatch.maxVertices; i += 4, j += 6) {
				$Franca_SpriteBatch.$indexBuffer.set_item(j, i);
				$Franca_SpriteBatch.$indexBuffer.set_item(j + 1, i + 1);
				$Franca_SpriteBatch.$indexBuffer.set_item(j + 2, i + 2);
				$Franca_SpriteBatch.$indexBuffer.set_item(j + 3, i + 1);
				$Franca_SpriteBatch.$indexBuffer.set_item(j + 4, i + 3);
				$Franca_SpriteBatch.$indexBuffer.set_item(j + 5, i + 2);
			}
			$Franca_SpriteBatch.$indexBuffer.bind$1(0, indices);
		}
	};
	global.Franca.SpriteBatch = $Franca_SpriteBatch;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SpriteEffects
	var $Franca_SpriteEffects = function() {
	};
	$Franca_SpriteEffects.__typeName = 'Franca.SpriteEffects';
	global.Franca.SpriteEffects = $Franca_SpriteEffects;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SpriteFont
	var $Franca_SpriteFont = function() {
		this.$font = null;
		this.$manager = null;
		this.$glyphs = null;
		this.$strokeWidth = -1;
		this.$fileRes = null;
		this.$file = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
	};
	$Franca_SpriteFont.__typeName = 'Franca.SpriteFont';
	$Franca_SpriteFont.$ctor2 = function(font, manager) {
		this.$font = null;
		this.$manager = null;
		this.$glyphs = null;
		this.$strokeWidth = -1;
		this.$fileRes = null;
		this.$file = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.init(font.$font, manager);
	};
	$Franca_SpriteFont.$ctor1 = function(font, manager) {
		this.$font = null;
		this.$manager = null;
		this.$glyphs = null;
		this.$strokeWidth = -1;
		this.$fileRes = null;
		this.$file = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.init(font, manager);
	};
	global.Franca.SpriteFont = $Franca_SpriteFont;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SpriteFontBatch
	var $Franca_SpriteFontBatch = function(graphicsDevice) {
		this.$channelBuffer = null;
		this.$disposed$1 = false;
		$Franca_SpriteBatch.call(this, graphicsDevice);
		this.$channelBuffer = new (ss.makeGenericType($Franca_TypedBuffer$1, [ss.Int32]).$ctor1)($Franca_SpriteFontBatch.initialChannelCapacity, $Franca_SpriteFontBatch.channelDataCapacity, 34962, 35040);
		this.$channelBuffer.set_isNormalized(false);
	};
	$Franca_SpriteFontBatch.__typeName = 'Franca.SpriteFontBatch';
	$Franca_SpriteFontBatch.get_uncompressedGlyphVertexLines = function() {
		return $Franca_SpriteFontBatch.$uncompressedGlyphVertexLines;
	};
	$Franca_SpriteFontBatch.get_uncompressedGlyphVertexSource = function() {
		return $Franca_SpriteFontBatch.$uncompressedGlyphVertexSource;
	};
	$Franca_SpriteFontBatch.get_uncompressedGlyphFragLines = function() {
		return $Franca_SpriteFontBatch.$uncompressedGlyphFragLines;
	};
	$Franca_SpriteFontBatch.get_uncompressedGlyphFragSource = function() {
		return $Franca_SpriteFontBatch.$uncompressedGlyphFragSource;
	};
	$Franca_SpriteFontBatch.get_compressedGlyphVertexLines = function() {
		return $Franca_SpriteFontBatch.$compressedGlyphVertexLines;
	};
	$Franca_SpriteFontBatch.get_compressedGlyphVertexSource = function() {
		return $Franca_SpriteFontBatch.$compressedGlyphVertexSource;
	};
	$Franca_SpriteFontBatch.get_compressedGlyphFragLines = function() {
		return $Franca_SpriteFontBatch.$compressedGlyphFragLines;
	};
	$Franca_SpriteFontBatch.get_compressedGlyphFragSource = function() {
		return $Franca_SpriteFontBatch.$compressedGlyphFragSource;
	};
	global.Franca.SpriteFontBatch = $Franca_SpriteFontBatch;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SpriteFontGlyph
	var $Franca_SpriteFontGlyph = function(texture, cp, fontMetrics, metrics, padding, channel, rect, ascent, region) {
		this.texture = null;
		this.metrics = ss.getDefaultValue($Franca_GlyphMetrics);
		this.channel = 0;
		this.padding = 0;
		this.ascent = 0;
		this.bearingX = 0;
		this.codePoint = 0;
		this.region = null;
		this.topAlpha = 0;
		this.bottomAlpha = 0;
		this.invalidated = false;
		this.metrics = metrics;
		this.channel = channel;
		this.padding = padding;
		this.ascent = ascent;
		this.bearingX = metrics.get_bearingX() - Math.ceil(padding / 2);
		this.codePoint = cp;
		this.region = region;
		//int width = Math.Min(Calc.Ceiling(metrics.Width + padding), (int)texture.Width - 1);
		//int height = Math.Min(Calc.Ceiling(metrics.Height + padding), (int)texture.Width - 1);
		//
		//PointF pos = new PointF(
		//((int)texture.Width - width) / 2,
		//((int)texture.Height - height) / 2);
		//Texture = new SubTexture(texture, new RectangleF(pos, new SizeF(width + 1, height + 1)));
		this.texture = new $Franca_SubTexture.$ctor1(texture, rect);
		//var topDist = (fontMetrics.Ascent + padding / 2) - (Metrics.YMax + padding / 2);
		//var bottomDist = (fontMetrics.Ascent + padding / 2) - Metrics.YMin + padding / 2;
		var fontAscent = Math.ceil(fontMetrics.get_ascent() + padding / 2);
		var lineSize = fontAscent + Math.ceil(-(fontMetrics.get_descent() - padding / 2));
		var topDist = Math.max(0, fontAscent - this.ascent);
		var bottomDist = Math.min(lineSize, fontAscent - (this.ascent - rect.size.height));
		this.topAlpha = topDist / lineSize;
		this.bottomAlpha = bottomDist / lineSize;
	};
	$Franca_SpriteFontGlyph.__typeName = 'Franca.SpriteFontGlyph';
	global.Franca.SpriteFontGlyph = $Franca_SpriteFontGlyph;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SpriteFontManager
	var $Franca_SpriteFontManager = function(graphicsDevice, textureWidth, textureHeight, compressed, maxGlyphSize) {
		this.$graphicsDevice = null;
		this.$glyphsTexture = null;
		this.$renderArea = null;
		this.$wipData = null;
		this.$wipPosition = null;
		this.$wipChannel = null;
		this.$wipClaim = null;
		this.$claims = null;
		this.$freeSpace = 0;
		this.$maxFreeSpace = 0;
		this.$batch = null;
		this.$regions = null;
		this.$compressed = false;
		this.$glyphsPerPixel = 0;
		this.$strokeWidth = 1;
		this.$disposed = false;
		this.$graphicsDevice = graphicsDevice;
		this.$compressed = compressed;
		this.$glyphsPerPixel = (compressed ? 4 : 2);
		if (maxGlyphSize > 0 && !Franca.Calc.isPowerOfTwo(maxGlyphSize)) {
			throw new ss.ArgumentException('Maximum glyph size must be 0 or less, or a power of 2, was ' + maxGlyphSize, 'maxGlyphSize');
		}
		this.$init(textureWidth, textureHeight, maxGlyphSize);
		this.$batch = new $Franca_SpriteFontBatch(this.$graphicsDevice);
	};
	$Franca_SpriteFontManager.__typeName = 'Franca.SpriteFontManager';
	global.Franca.SpriteFontManager = $Franca_SpriteFontManager;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SpriteFontManager.ClaimedRect
	var $Franca_SpriteFontManager$ClaimedRect = function() {
		this.x = 0;
		this.y = 0;
		this.width = 0;
		this.height = 0;
		this.region = null;
	};
	$Franca_SpriteFontManager$ClaimedRect.__typeName = 'Franca.SpriteFontManager$ClaimedRect';
	global.Franca.SpriteFontManager$ClaimedRect = $Franca_SpriteFontManager$ClaimedRect;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.StencilFunc
	var $Franca_StencilFunc = function() {
	};
	$Franca_StencilFunc.__typeName = 'Franca.StencilFunc';
	global.Franca.StencilFunc = $Franca_StencilFunc;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.StencilMode
	var $Franca_StencilMode = function() {
	};
	$Franca_StencilMode.__typeName = 'Franca.StencilMode';
	global.Franca.StencilMode = $Franca_StencilMode;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.StencilOp
	var $Franca_StencilOp = function() {
	};
	$Franca_StencilOp.__typeName = 'Franca.StencilOp';
	global.Franca.StencilOp = $Franca_StencilOp;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.StencilState
	var $Franca_StencilState = function() {
		this.mode = 0;
		this.mask = 0;
		this.func = 0;
		this.referenceValue = 0;
		this.funcMask = 0;
		this.stencilFail = 0;
		this.depthFail = 0;
		this.success = 0;
		this.$masks = 0;
		this.$funcOps = 0;
		this.$hashcode = 0;
	};
	$Franca_StencilState.__typeName = 'Franca.StencilState';
	$Franca_StencilState.$ctor1 = function(mode) {
		this.mode = 0;
		this.mask = 0;
		this.func = 0;
		this.referenceValue = 0;
		this.funcMask = 0;
		this.stencilFail = 0;
		this.depthFail = 0;
		this.success = 0;
		this.$masks = 0;
		this.$funcOps = 0;
		this.$hashcode = 0;
		if (mode !== 0 && mode !== 2) {
			throw new ss.ArgumentException('When creating a StencilState with only a StencilMode argument its value cannot be StencilMode.Enabled', 'mode');
		}
		this.mode = mode;
		this.mask = 0;
		this.func = 0;
		this.referenceValue = 0;
		this.funcMask = 0;
		this.stencilFail = 0;
		this.depthFail = 0;
		this.success = 0;
		if (mode === 2) {
			// disabled sets the 30th and 29th bits
			this.$funcOps = 536870912;
			this.$masks = 268435456;
		}
		else {
			this.$funcOps = this.$masks = 0;
		}
		this.$hashcode = this.$funcOps ^ this.$masks;
	};
	$Franca_StencilState.$ctor2 = function(mask, func, referenceValue, funcMask, stencilFail, depthFail, success) {
		this.mode = 0;
		this.mask = 0;
		this.func = 0;
		this.referenceValue = 0;
		this.funcMask = 0;
		this.stencilFail = 0;
		this.depthFail = 0;
		this.success = 0;
		this.$masks = 0;
		this.$funcOps = 0;
		this.$hashcode = 0;
		this.mode = 1;
		this.mask = mask;
		this.func = ((func === 0) ? 519 : func);
		this.referenceValue = referenceValue;
		this.funcMask = funcMask;
		this.stencilFail = stencilFail;
		this.depthFail = depthFail;
		this.success = success;
		this.$funcOps = $Franca_StencilState.$funcToBits(func) | $Franca_StencilState.$opToBits(this.stencilFail) << 7 | $Franca_StencilState.$opToBits(this.depthFail) << 14 | $Franca_StencilState.$opToBits(this.success) << 21;
		this.$masks = this.mask | this.referenceValue << 8 | this.funcMask << 16;
		// set upper two bit on funcOps and masks
		// this allows default(StencilState) to have a valid value for these variables (0) that will never
		// match the funcOps and masks values for a StencilState that's enabled
		// use the upper two bits because the hashcode xors, which would cancel out if the same bit was set
		// and could lead to a zero result
		this.$funcOps |= -2147483648;
		this.$masks |= 1073741824;
		this.$hashcode = this.$funcOps ^ this.$masks;
	};
	$Franca_StencilState.getDefaultValue = function() {
		return new $Franca_StencilState();
	};
	$Franca_StencilState.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_StencilState.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	$Franca_StencilState.get_disabled = function() {
		return new $Franca_StencilState.$ctor1(2);
	};
	$Franca_StencilState.get_dontCare = function() {
		return ss.getDefaultValue($Franca_StencilState);
	};
	$Franca_StencilState.write = function(value) {
		return new $Franca_StencilState.$ctor2(255, 519, value, 255, 7680, 7680, 7681);
	};
	$Franca_StencilState.increment = function(value, wrap) {
		if (value < 0) {
			return $Franca_StencilState.decrement(-value, wrap);
		}
		return new $Franca_StencilState.$ctor2(255, 519, value & 255, 255, 7680, 7680, (wrap ? 34055 : 7682));
	};
	$Franca_StencilState.decrement = function(value, wrap) {
		if (value < 0) {
			return $Franca_StencilState.increment(-value, wrap);
		}
		return new $Franca_StencilState.$ctor2(255, 519, value & 255, 255, 7680, 7680, (wrap ? 34056 : 7683));
	};
	$Franca_StencilState.maskUnlessStencil = function(func, value) {
		// the actual test used is RefValue Func CurrentValue, masking where this returns false
		// we're looking for CurrentValue Func RefValue so we have to transform func
		switch (func) {
			case 516: {
				func = 513;
				break;
			}
			case 518: {
				func = 515;
				break;
			}
			case 513: {
				func = 516;
				break;
			}
			case 515: {
				func = 518;
				break;
			}
		}
		return new $Franca_StencilState.$ctor2(255, func, value, 255, 7680, 7680, 7680);
	};
	$Franca_StencilState.maskWhereStencil = function(func, value) {
		return $Franca_StencilState.maskUnlessStencil($Franca_StencilState.$reverseFunc(func), value);
	};
	$Franca_StencilState.$reverseFunc = function(func) {
		switch (func) {
			default: {
				return func;
			}
			case 0:
			case 519: {
				return 512;
			}
			case 514: {
				return 517;
			}
			case 516: {
				return 515;
			}
			case 518: {
				return 513;
			}
			case 513: {
				return 518;
			}
			case 515: {
				return 516;
			}
			case 512: {
				return 519;
			}
			case 517: {
				return 514;
			}
		}
	};
	$Franca_StencilState.$opToBits = function(op) {
		switch (op) {
			default: {
				throw new ss.NotImplementedException('Unknown StencilOp value ' + System.EnumExtensions.getName($Franca_StencilOp).call(null, op));
			}
			case 0: {
				return 0;
			}
			case 7683: {
				return 1;
			}
			case 34056: {
				return 2;
			}
			case 7682: {
				return 3;
			}
			case 34055: {
				return 4;
			}
			case 5386: {
				return 5;
			}
			case 7681: {
				return 6;
			}
			case 7680: {
				return 7;
			}
		}
	};
	$Franca_StencilState.$funcToBits = function(func) {
		switch (func) {
			default: {
				throw new ss.NotImplementedException('Unknown StencilFunc value ' + System.EnumExtensions.getName($Franca_StencilFunc).call(null, func));
			}
			case 0:
			case 519: {
				return 0;
			}
			case 514: {
				return 1;
			}
			case 516: {
				return 2;
			}
			case 518: {
				return 3;
			}
			case 513: {
				return 4;
			}
			case 515: {
				return 5;
			}
			case 512: {
				return 6;
			}
			case 517: {
				return 7;
			}
		}
	};
	global.Franca.StencilState = $Franca_StencilState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.SubTexture
	var $Franca_SubTexture = function(texture) {
		this.baseTex = null;
		this.source = ss.getDefaultValue(Franca.Rectangle);
		this.baseTex = texture;
		this.source = new Franca.Rectangle.$ctor3(0, 0, texture.get_width(), texture.get_height());
		if (!texture.get_loaded()) {
			texture.add_onLoad(ss.mkdel(this, function(asset) {
				this.source = new Franca.Rectangle.$ctor3(0, 0, this.baseTex.get_width(), this.baseTex.get_height());
			}));
		}
	};
	$Franca_SubTexture.__typeName = 'Franca.SubTexture';
	$Franca_SubTexture.$ctor4 = function(texture, source) {
		$Franca_SubTexture.$ctor3.call(this, texture, Franca.RectangleF.op_Explicit(source));
	};
	$Franca_SubTexture.$ctor2 = function(texture, source) {
		$Franca_SubTexture.$ctor1.call(this, texture, Franca.RectangleF.op_Explicit(source));
	};
	$Franca_SubTexture.$ctor3 = function(texture, source) {
		this.baseTex = null;
		this.source = ss.getDefaultValue(Franca.Rectangle);
		this.baseTex = texture;
		this.source = source;
	};
	$Franca_SubTexture.$ctor1 = function(texture, source) {
		this.baseTex = null;
		this.source = ss.getDefaultValue(Franca.Rectangle);
		this.baseTex = texture.baseTex;
		this.source = new Franca.Rectangle.$ctor3(texture.source.location.x + source.location.x, texture.source.location.y + source.location.y, source.size.width, source.size.height);
	};
	$Franca_SubTexture.op_Implicit = function(texture) {
		return new $Franca_SubTexture(texture);
	};
	global.Franca.SubTexture = $Franca_SubTexture;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Texture
	var $Franca_Texture = function() {
		this.$glTexture = null;
		this.$canvas = null;
		this.$premultiplyAlpha = false;
		this.$mipmap = false;
		this.$isPowerOfTwo = false;
		this.renderTarget = false;
		this.depthPrecision = 0;
		this.stencilBuffer = false;
		this.framebuffer = null;
		this.renderbuffer = null;
		this.$width = 0;
		this.$height = 0;
		this.$canRead = false;
		this.$graphicsDevice = null;
		this.$fileRes = null;
		this.$binaryRes = null;
		this.$disposeLoadedCanvas = false;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_Texture.__typeName = 'Franca.Texture';
	$Franca_Texture.$ctor8 = function(width, height, renderTarget, mipmapped, dataFormat, type, depthBits, stencilBuffer) {
		this.$glTexture = null;
		this.$canvas = null;
		this.$premultiplyAlpha = false;
		this.$mipmap = false;
		this.$isPowerOfTwo = false;
		this.renderTarget = false;
		this.depthPrecision = 0;
		this.stencilBuffer = false;
		this.framebuffer = null;
		this.renderbuffer = null;
		this.$width = 0;
		this.$height = 0;
		this.$canRead = false;
		this.$graphicsDevice = null;
		this.$fileRes = null;
		this.$binaryRes = null;
		this.$disposeLoadedCanvas = false;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		if (depthBits === -1) {
			throw new ss.NotImplementedException('24 bit depth buffer on render targets is not supported on this platform');
		}
		else if (depthBits === -2) {
			throw new ss.NotImplementedException('32 bit depth buffer on render targets is not supported on this platform');
		}
		if (stencilBuffer) {
			this.stencilBuffer = stencilBuffer;
		}
		else {
			this.depthPrecision = depthBits;
		}
		this.renderTarget = renderTarget;
		this.$mipmap = mipmapped;
		this.loadFromData(width, height, null, dataFormat, dataFormat, type);
		this.set_loaded(true);
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_Texture.$ctor7 = function(width, height, renderTarget, mipmapped, dataFormat, type, depthBits) {
		this.$glTexture = null;
		this.$canvas = null;
		this.$premultiplyAlpha = false;
		this.$mipmap = false;
		this.$isPowerOfTwo = false;
		this.renderTarget = false;
		this.depthPrecision = 0;
		this.stencilBuffer = false;
		this.framebuffer = null;
		this.renderbuffer = null;
		this.$width = 0;
		this.$height = 0;
		this.$canRead = false;
		this.$graphicsDevice = null;
		this.$fileRes = null;
		this.$binaryRes = null;
		this.$disposeLoadedCanvas = false;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		if (depthBits === -1) {
			throw new ss.NotImplementedException('24 bit depth buffer on render targets is not supported on this platform');
		}
		else if (depthBits === -2) {
			throw new ss.NotImplementedException('32 bit depth buffer on render targets is not supported on this platform');
		}
		var glTransformedFormat = {}, pixelType = {};
		$Franca_Texture.$prepFloatFormat(dataFormat, type, glTransformedFormat, pixelType);
		this.depthPrecision = depthBits;
		this.renderTarget = renderTarget;
		this.$mipmap = mipmapped;
		this.loadFromData(width, height, null, dataFormat, glTransformedFormat.$, pixelType.$);
		this.set_loaded(true);
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_Texture.$ctor2 = function(width, height, mipmapped) {
		this.$glTexture = null;
		this.$canvas = null;
		this.$premultiplyAlpha = false;
		this.$mipmap = false;
		this.$isPowerOfTwo = false;
		this.renderTarget = false;
		this.depthPrecision = 0;
		this.stencilBuffer = false;
		this.framebuffer = null;
		this.renderbuffer = null;
		this.$width = 0;
		this.$height = 0;
		this.$canRead = false;
		this.$graphicsDevice = null;
		this.$fileRes = null;
		this.$binaryRes = null;
		this.$disposeLoadedCanvas = false;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		this.$mipmap = mipmapped;
		this.loadFromData(width, height, new Franca.Collections.ByteArray.$ctor2(width * height * 4), 6408, 6408, 5121);
		this.set_loaded(true);
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_Texture.$ctor4 = function(width, height, data, dataFormat, mipmapped) {
		this.$glTexture = null;
		this.$canvas = null;
		this.$premultiplyAlpha = false;
		this.$mipmap = false;
		this.$isPowerOfTwo = false;
		this.renderTarget = false;
		this.depthPrecision = 0;
		this.stencilBuffer = false;
		this.framebuffer = null;
		this.renderbuffer = null;
		this.$width = 0;
		this.$height = 0;
		this.$canRead = false;
		this.$graphicsDevice = null;
		this.$fileRes = null;
		this.$binaryRes = null;
		this.$disposeLoadedCanvas = false;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		//if (data == null) {
		//    data = new ByteArray(width * height * 4);
		//}
		this.$mipmap = mipmapped;
		this.loadFromData(width, height, data, dataFormat, 6408, 5121);
		this.set_loaded(true);
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_Texture.$ctor5 = function(width, height, data, srcDataFormat, glDataFormat, mipmapped) {
		this.$glTexture = null;
		this.$canvas = null;
		this.$premultiplyAlpha = false;
		this.$mipmap = false;
		this.$isPowerOfTwo = false;
		this.renderTarget = false;
		this.depthPrecision = 0;
		this.stencilBuffer = false;
		this.framebuffer = null;
		this.renderbuffer = null;
		this.$width = 0;
		this.$height = 0;
		this.$canRead = false;
		this.$graphicsDevice = null;
		this.$fileRes = null;
		this.$binaryRes = null;
		this.$disposeLoadedCanvas = false;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		//if (data == null) {
		//    data = new ByteArray(width * height * 4);
		//}
		this.$mipmap = mipmapped;
		this.loadFromData(width, height, data, srcDataFormat, glDataFormat, 5121);
		this.set_loaded(true);
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_Texture.$ctor3 = function(image, premultiplyAlpha, mipmapped, disposeCanvas) {
		this.$glTexture = null;
		this.$canvas = null;
		this.$premultiplyAlpha = false;
		this.$mipmap = false;
		this.$isPowerOfTwo = false;
		this.renderTarget = false;
		this.depthPrecision = 0;
		this.stencilBuffer = false;
		this.framebuffer = null;
		this.renderbuffer = null;
		this.$width = 0;
		this.$height = 0;
		this.$canRead = false;
		this.$graphicsDevice = null;
		this.$fileRes = null;
		this.$binaryRes = null;
		this.$disposeLoadedCanvas = false;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		this.$canvas = image;
		this.$premultiplyAlpha = premultiplyAlpha;
		this.$mipmap = mipmapped;
		this.loadFromCanvas(disposeCanvas);
		this.set_loaded(true);
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_Texture.$ctor1 = function(data, premultiplyAlpha, mipmapped) {
		this.$glTexture = null;
		this.$canvas = null;
		this.$premultiplyAlpha = false;
		this.$mipmap = false;
		this.$isPowerOfTwo = false;
		this.renderTarget = false;
		this.depthPrecision = 0;
		this.stencilBuffer = false;
		this.framebuffer = null;
		this.renderbuffer = null;
		this.$width = 0;
		this.$height = 0;
		this.$canRead = false;
		this.$graphicsDevice = null;
		this.$fileRes = null;
		this.$binaryRes = null;
		this.$disposeLoadedCanvas = false;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		this.$premultiplyAlpha = premultiplyAlpha;
		this.$mipmap = mipmapped;
		if (premultiplyAlpha) {
			// if we have to premultiply the alpha we're basically transforming the
			// source data anyway, so we might as well use an intermediate canvas
			this.$canvas = new $Franca_Canvas.$ctor1(data);
			this.loadFromCanvas(true);
		}
		else {
			this.loadFromData(data.width, data.height, data.toByteArray(), 6408, 6408, 5121);
		}
		this.set_loaded(true);
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_Texture.$ctor6 = function(width, height, data, srcDataFormat, glDataFormat, mipmapped) {
		this.$glTexture = null;
		this.$canvas = null;
		this.$premultiplyAlpha = false;
		this.$mipmap = false;
		this.$isPowerOfTwo = false;
		this.renderTarget = false;
		this.depthPrecision = 0;
		this.stencilBuffer = false;
		this.framebuffer = null;
		this.renderbuffer = null;
		this.$width = 0;
		this.$height = 0;
		this.$canRead = false;
		this.$graphicsDevice = null;
		this.$fileRes = null;
		this.$binaryRes = null;
		this.$disposeLoadedCanvas = false;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		var glTransformedFormat = {}, pixelType = {};
		$Franca_Texture.$prepFloatFormat(glDataFormat, 1, glTransformedFormat, pixelType);
		this.$mipmap = mipmapped;
		this.loadFromData(width, height, data, srcDataFormat, glTransformedFormat.$, pixelType.$);
		this.set_loaded(true);
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_Texture.$prepFloatFormat = function(inFormat, type, format, pixelType) {
		$Franca_OpenGL_WebGL_GL.getUnclampedFloatingPointFormat(inFormat, type, format, pixelType);
	};
	$Franca_Texture.getBytesPerType = function(type) {
		switch (type) {
			case 5120:
			case 5121: {
				return 1;
			}
			case 5122:
			case 5123: {
				return 2;
			}
			case 5124:
			case 5125:
			case 5126: {
				return 4;
			}
		}
		throw new ss.ArgumentException('Unknown GL data type: ' + type, 'type');
	};
	$Franca_Texture.getChannelsFromFormat = function(format) {
		switch (format) {
			case 6408: {
				return 4;
			}
			case 6407: {
				return 3;
			}
			case 6409:
			case 6406:
			case 6402: {
				return 1;
			}
			case 34041:
			case 6410: {
				return 2;
			}
			case 34836: {
				// (int)OpenTK.Graphics.OpenGL.PixelInternalFormat.Rgba32f:
				return 4;
			}
			case 34837: {
				// (int)OpenTK.Graphics.OpenGL.PixelInternalFormat.Rgb32f:
				return 3;
			}
			case 33328: {
				// (int)OpenTK.Graphics.OpenGL.PixelInternalFormat.Rg32f:
				return 2;
			}
			case 33326: {
				// (int)OpenTK.Graphics.OpenGL.PixelInternalFormat.R32f:
				return 1;
			}
			case 34842: {
				// (int)OpenTK.Graphics.OpenGL.PixelInternalFormat.Rgba16f:
				return 4;
			}
			case 34843: {
				// (int)OpenTK.Graphics.OpenGL.PixelInternalFormat.Rgb16f:
				return 3;
			}
			case 33327: {
				// (int)OpenTK.Graphics.OpenGL.PixelInternalFormat.Rg16f:
				return 2;
			}
			case 33325: {
				// (int)OpenTK.Graphics.OpenGL.PixelInternalFormat.R16f:
				return 1;
			}
		}
		throw new ss.ArgumentException('Unrecognized format: ' + format, 'format');
	};
	$Franca_Texture.op_Implicit = function(texture) {
		return texture.$glTexture;
	};
	$Franca_Texture.get_none = function() {
		return $Franca_GraphicsDevice.get_current().get_builtinAssets().get_noneTexture();
	};
	$Franca_Texture.get_white = function() {
		return $Franca_GraphicsDevice.get_current().get_builtinAssets().get_whiteTexture();
	};
	global.Franca.Texture = $Franca_Texture;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.TextureFilter
	var $Franca_TextureFilter = function() {
	};
	$Franca_TextureFilter.__typeName = 'Franca.TextureFilter';
	global.Franca.TextureFilter = $Franca_TextureFilter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.TextureWrap
	var $Franca_TextureWrap = function() {
	};
	$Franca_TextureWrap.__typeName = 'Franca.TextureWrap';
	global.Franca.TextureWrap = $Franca_TextureWrap;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.TypedBuffer
	var $Franca_TypedBuffer$1 = function(T) {
		var $type = function(glBufferCount, glBufferSize) {
			this.$data = null;
			this.$target = 0;
			this.$usage = 0;
			this.$isNormalized = false;
			this.$glDataType = 0;
			this.$dynamicSize = false;
			this.$maxSize = 0;
			$Franca_BufferObject.call(this, glBufferCount, glBufferSize);
			this.$data = Franca.Collections.TypedArray.createTypedArray(T).call(null);
			this.$glDataType = $Franca_OpenGL_WebGL_GL.getVertexAttribPointerType(T).call(null);
		};
		$type.$ctor1 = function(initialCapacity, maxCapacity, target, usage) {
			$type.call(this, $type.$defaultBufferCount, maxCapacity);
			this.$target = target;
			this.$usage = usage;
			this.$data.resize(initialCapacity, false);
			this.$dynamicSize = true;
			this.$maxSize = maxCapacity;
			this.$initializeBuffers();
		};
		$type.$ctor2 = function(initialCapacity, maxCapacity, target, usage) {
			$type.call(this, $type.$defaultBufferCount, maxCapacity);
			this.$target = target;
			this.$usage = usage;
			this.$data.resize(initialCapacity, false);
			this.$dynamicSize = true;
			this.$maxSize = maxCapacity;
			this.$initializeBuffers();
		};
		$type.$ctor3 = function(initialCapacity, maxCapacity, target, usage, glBufferCount) {
			$type.call(this, glBufferCount, maxCapacity);
			this.$target = target;
			this.$usage = usage;
			this.$data.resize(initialCapacity, false);
			this.$dynamicSize = true;
			this.$maxSize = maxCapacity;
			this.$initializeBuffers();
		};
		$type.$ctor4 = function(initialCapacity, maxCapacity, target, usage, glBufferCount) {
			$type.call(this, glBufferCount, maxCapacity);
			this.$target = target;
			this.$usage = usage;
			this.$data.resize(initialCapacity, false);
			this.$dynamicSize = true;
			this.$maxSize = maxCapacity;
			this.$initializeBuffers();
		};
		ss.registerGenericClassInstance($type, $Franca_TypedBuffer$1, [T], {
			$initializeBuffers: function() {
				for (var $t1 = 0; $t1 < this.buffers.length; $t1++) {
					var buffer = this.buffers[$t1];
					$Franca_OpenGL_WebGL_GL.bindBuffer(this.$target, buffer);
					$Franca_OpenGL_WebGL_GL.bufferDataNull(this.$target, this.$maxSize * this.$data.get_bytesPerElement(), this.$usage);
					$Franca_OpenGL_WebGL_GL.throwErrors(false);
				}
			},
			swapBuffers: function() {
				$Franca_BufferObject.prototype.swapBuffers.call(this);
				$Franca_OpenGL_WebGL_GL.bindBuffer(this.$target, this.get_glBuffer());
				// Hi yeah so this sounded like a really great idea for performance but in actuality what happens
				// at least in WebGL is that this seems to try to actively zero out the entire buffer so every time
				// we switch between the buffers in our ring buffer a fuckton of data is shoved down to the GPU.
				//GL.BufferDataNull(target, maxSize * data.BytesPerElement, usage); // orphan buffer
			},
			bind: function() {
				$Franca_OpenGL_WebGL_GL.bindBuffer(this.$target, this.get_glBuffer());
			},
			bufferData: function() {
				$Franca_OpenGL_WebGL_GL.bufferData$6(T).call(null, this.$target, this.$data, this.$usage);
			},
			bind$1: function(offset, itemCount) {
				$Franca_OpenGL_WebGL_GL.bindBuffer(this.$target, this.get_glBuffer());
				$Franca_OpenGL_WebGL_GL.bufferSubData$h(T).call(null, this.$target, offset * this.$data.get_bytesPerElement(), itemCount * this.$data.get_bytesPerElement(), this.$data);
			},
			enableVertexAttribute: function(location, componentCount, strideBytes, offsetBytes) {
				$Franca_OpenGL_WebGL_GL.bindBuffer(this.$target, this.get_glBuffer());
				$Franca_OpenGL_WebGL_GL.enableVertexAttribArray(location);
				$Franca_OpenGL_WebGL_GL.vertexAttribPointer(location, componentCount, this.$glDataType, this.$isNormalized, strideBytes, offsetBytes);
			},
			setData$1: function(offset, data) {
				var end = offset + data.length - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set$3(data, offset);
			},
			setData: function(offset, d0) {
				var end = offset + 1 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
			},
			setData$2: function(offset, d0, d1) {
				var end = offset + 2 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
			},
			setData$3: function(offset, d0, d1, d2) {
				var end = offset + 3 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
			},
			setData$4: function(offset, d0, d1, d2, d3) {
				var end = offset + 4 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
			},
			setData$5: function(offset, d0, d1, d2, d3, d4) {
				var end = offset + 5 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
			},
			setData$6: function(offset, d0, d1, d2, d3, d4, d5) {
				var end = offset + 6 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
				this.$data.set_item(offset + 5, d5);
			},
			setData$7: function(offset, d0, d1, d2, d3, d4, d5, d6) {
				var end = offset + 7 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
				this.$data.set_item(offset + 5, d5);
				this.$data.set_item(offset + 6, d6);
			},
			setData$8: function(offset, d0, d1, d2, d3, d4, d5, d6, d7) {
				var end = offset + 8 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
				this.$data.set_item(offset + 5, d5);
				this.$data.set_item(offset + 6, d6);
				this.$data.set_item(offset + 7, d7);
			},
			setData$9: function(offset, d0, d1, d2, d3, d4, d5, d6, d7, d8) {
				var end = offset + 9 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
				this.$data.set_item(offset + 5, d5);
				this.$data.set_item(offset + 6, d6);
				this.$data.set_item(offset + 7, d7);
				this.$data.set_item(offset + 8, d8);
			},
			setData$a: function(offset, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9) {
				var end = offset + 10 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
				this.$data.set_item(offset + 5, d5);
				this.$data.set_item(offset + 6, d6);
				this.$data.set_item(offset + 7, d7);
				this.$data.set_item(offset + 8, d8);
				this.$data.set_item(offset + 9, d9);
			},
			setData$b: function(offset, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10) {
				var end = offset + 11 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
				this.$data.set_item(offset + 5, d5);
				this.$data.set_item(offset + 6, d6);
				this.$data.set_item(offset + 7, d7);
				this.$data.set_item(offset + 8, d8);
				this.$data.set_item(offset + 9, d9);
				this.$data.set_item(offset + 10, d10);
			},
			setData$c: function(offset, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11) {
				var end = offset + 12 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
				this.$data.set_item(offset + 5, d5);
				this.$data.set_item(offset + 6, d6);
				this.$data.set_item(offset + 7, d7);
				this.$data.set_item(offset + 8, d8);
				this.$data.set_item(offset + 9, d9);
				this.$data.set_item(offset + 10, d10);
				this.$data.set_item(offset + 11, d11);
			},
			setData$d: function(offset, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12) {
				var end = offset + 13 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
				this.$data.set_item(offset + 5, d5);
				this.$data.set_item(offset + 6, d6);
				this.$data.set_item(offset + 7, d7);
				this.$data.set_item(offset + 8, d8);
				this.$data.set_item(offset + 9, d9);
				this.$data.set_item(offset + 10, d10);
				this.$data.set_item(offset + 11, d11);
				this.$data.set_item(offset + 12, d12);
			},
			setData$e: function(offset, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13) {
				var end = offset + 14 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
				this.$data.set_item(offset + 5, d5);
				this.$data.set_item(offset + 6, d6);
				this.$data.set_item(offset + 7, d7);
				this.$data.set_item(offset + 8, d8);
				this.$data.set_item(offset + 9, d9);
				this.$data.set_item(offset + 10, d10);
				this.$data.set_item(offset + 11, d11);
				this.$data.set_item(offset + 12, d12);
				this.$data.set_item(offset + 13, d13);
			},
			setData$f: function(offset, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14) {
				var end = offset + 15 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
				this.$data.set_item(offset + 5, d5);
				this.$data.set_item(offset + 6, d6);
				this.$data.set_item(offset + 7, d7);
				this.$data.set_item(offset + 8, d8);
				this.$data.set_item(offset + 9, d9);
				this.$data.set_item(offset + 10, d10);
				this.$data.set_item(offset + 11, d11);
				this.$data.set_item(offset + 12, d12);
				this.$data.set_item(offset + 13, d13);
				this.$data.set_item(offset + 14, d14);
			},
			setData$g: function(offset, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15) {
				var end = offset + 16 - 1;
				if (this.$dynamicSize && end >= this.$data.get_length()) {
					if (end > this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (end + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
					}
					this.sizeToFit(end);
				}
				this.$data.set_item(offset, d0);
				this.$data.set_item(offset + 1, d1);
				this.$data.set_item(offset + 2, d2);
				this.$data.set_item(offset + 3, d3);
				this.$data.set_item(offset + 4, d4);
				this.$data.set_item(offset + 5, d5);
				this.$data.set_item(offset + 6, d6);
				this.$data.set_item(offset + 7, d7);
				this.$data.set_item(offset + 8, d8);
				this.$data.set_item(offset + 9, d9);
				this.$data.set_item(offset + 10, d10);
				this.$data.set_item(offset + 11, d11);
				this.$data.set_item(offset + 12, d12);
				this.$data.set_item(offset + 13, d13);
				this.$data.set_item(offset + 14, d14);
				this.$data.set_item(offset + 15, d15);
			},
			sizeToFit: function(index) {
				if (index < this.$data.get_length()) {
					return;
				}
				var size = 1;
				while (size <= index) {
					size *= 2;
				}
				size = Franca.Calc.min$k(this.$maxSize, size);
				if (index >= size) {
					throw new ss.ArgumentOutOfRangeException('Cannot fit ' + (index + 1) + ' items in TypedBuffer with maximum size ' + this.$maxSize);
				}
				this.resize(size, true);
			},
			resize: function(length, retainContents) {
				this.$data.resize(length, retainContents);
			},
			get_item: function(index) {
				return this.$data.get_item(index);
			},
			set_item: function(index, value) {
				if (this.$dynamicSize) {
					if (index < this.$data.get_length()) {
						this.$data.set_item(index, value);
						return;
					}
					if (index >= this.$maxSize) {
						throw new ss.ArgumentOutOfRangeException('index');
					}
					this.sizeToFit(index);
				}
				this.$data.set_item(index, value);
			},
			get_usage: function() {
				if (Franca.EnumHelper.isDefined($Franca_BufferUsage).call(null, this.$usage)) {
					return this.$usage;
				}
				return 0;
			},
			set_usage: function(value) {
				this.$usage = value;
			},
			get_target: function() {
				if (Franca.EnumHelper.isDefined($Franca_BufferTarget).call(null, this.$target)) {
					return this.$target;
				}
				return 0;
			},
			set_target: function(value) {
				this.$target = value;
			},
			get_usageInt: function() {
				return this.$usage;
			},
			set_usageInt: function(value) {
				this.$usage = value;
			},
			get_targetInt: function() {
				return this.$target;
			},
			set_targetInt: function(value) {
				this.$target = value;
			},
			get_count: function() {
				return this.$data.get_length();
			},
			get_isNormalized: function() {
				return this.$isNormalized;
			},
			set_isNormalized: function(value) {
				this.$isNormalized = value;
			},
			get_data: function() {
				return this.$data;
			},
			get_maxSize: function() {
				return this.$maxSize;
			}
		}, function() {
			return $Franca_BufferObject;
		}, function() {
			return [ss.IDisposable];
		});
		$type.$ctor1.prototype = $type.$ctor2.prototype = $type.$ctor3.prototype = $type.$ctor4.prototype = $type.prototype;
		$type.$defaultBufferCount = 5;
		return $type;
	};
	$Franca_TypedBuffer$1.__typeName = 'Franca.TypedBuffer$1';
	ss.initGenericClass($Franca_TypedBuffer$1, $asm, 1);
	global.Franca.TypedBuffer$1 = $Franca_TypedBuffer$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.VSyncStyle
	var $Franca_VSyncStyle = function() {
	};
	$Franca_VSyncStyle.__typeName = 'Franca.VSyncStyle';
	global.Franca.VSyncStyle = $Franca_VSyncStyle;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifApplicationExtension.GifApplicationBlock
	var $Franca_$Gif_$GifApplicationExtension$GifApplicationBlock = function() {
		this.$size = 3;
		this.$unknown = 1;
		this.$repeatCount = 0;
	};
	$Franca_$Gif_$GifApplicationExtension$GifApplicationBlock.__typeName = 'Franca.$Gif.$GifApplicationExtension$GifApplicationBlock';
	$Franca_$Gif_$GifApplicationExtension$GifApplicationBlock.$ctor1 = function(reader) {
		this.$size = 3;
		this.$unknown = 1;
		this.$repeatCount = 0;
		var size = reader.readByte();
		if (this.$size !== size) {
			throw new ss.FormatException(ss.formatString("Application extension block size didn't match, was {0}, expected {1}.", size, this.$size));
		}
		this.$unknown = reader.readByte();
		this.$repeatCount = reader.readUInt16();
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.JSPngDecompressor.DecompressorType
	var $Franca_$Png_$JSPngDecompressor$DecompressorType = function() {
	};
	$Franca_$Png_$JSPngDecompressor$DecompressorType.__typeName = 'Franca.$Png.$JSPngDecompressor$DecompressorType';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.WordWrap.WordChunk
	var $Franca_$Text_WordWrap$WordChunk = function() {
		this.$chunk = null;
		this.$width = 0;
	};
	$Franca_$Text_WordWrap$WordChunk.__typeName = 'Franca.$Text.WordWrap$WordChunk';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.CanPlayMedia
	var $Franca_Audio_$CanPlayMedia = function() {
	};
	$Franca_Audio_$CanPlayMedia.__typeName = 'Franca.Audio.$CanPlayMedia';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.IAudioProvider
	var $Franca_Audio_$IAudioProvider = function() {
	};
	$Franca_Audio_$IAudioProvider.__typeName = 'Franca.Audio.$IAudioProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.JSAudio
	var $Franca_Audio_$JSAudio = function() {
		this.$webAudioContext = null;
		var $t1 = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [String]))();
		$t1.add('mp3');
		$t1.add('ogg');
		this.$defaultAvailableFormats = $t1;
	};
	$Franca_Audio_$JSAudio.__typeName = 'Franca.Audio.$JSAudio';
	$Franca_Audio_$JSAudio.$canPlayMp3 = function() {
		var audio = document.createElement('audio');
		var confidence = audio.canPlayType && audio.canPlayType('audio/mpeg').replace('no', '');
		switch (ss.cast(confidence, String)) {
			default: {
				return 0;
			}
			case 'maybe': {
				return 1;
			}
			case 'probably': {
				return 2;
			}
		}
	};
	$Franca_Audio_$JSAudio.$canPlayOgg = function() {
		var audio = document.createElement('audio');
		var confidence = audio.canPlayType && audio.canPlayType('audio/ogg; codecs="vorbis"').replace('no', '');
		switch (ss.cast(confidence, String)) {
			default: {
				return 0;
			}
			case 'maybe': {
				return 1;
			}
			case 'probably': {
				return 2;
			}
		}
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.AudioContext
	var $Franca_Audio_AudioContext = function() {
		this.$masterVolume = 1;
		this.$managers = null;
		this.$managersLock = new Object();
		this.$disposed = false;
		this.$managers = [];
	};
	$Franca_Audio_AudioContext.__typeName = 'Franca.Audio.AudioContext';
	$Franca_Audio_AudioContext.get_availableAudioFormats = function() {
		return new ss.IteratorBlockEnumerable(function() {
			return (function() {
				var $result, $state = 0, $t1, format;
				var $finally = function() {
					$t1.dispose();
				};
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								$t1 = $Franca_Audio_AudioContext.$availableAudioFormats.getEnumerator();
								$state = 3;
								continue $sm1;
							}
							case 3: {
								$state = 1;
								if (!$t1.moveNext()) {
									$state = 2;
									continue $sm1;
								}
								format = $t1.current();
								$result = format;
								$state = 3;
								return true;
							}
							case 2: {
								$state = -1;
								$finally.call(this);
								$state = -1;
								break $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, function() {
					try {
						switch ($state) {
							case 1:
							case 2:
							case 3: {
								try {
									break;
								}
								finally {
									$finally.call(this);
								}
							}
						}
					}
					finally {
						$state = -1;
					}
				}, this);
			}).call(this);
		}, this);
	};
	$Franca_Audio_AudioContext.setAvailableAudioFormats = function(formats) {
		$Franca_Audio_AudioContext.$availableAudioFormats = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [String]).$ctor1)(formats);
		$Franca_Audio_AudioContext.setAudioExtension();
	};
	$Franca_Audio_AudioContext.setAudioExtension = function() {
		if (ss.isNullOrUndefined($Franca_Audio_AudioContext.$platformAudio)) {
			$Franca_Audio_AudioContext.audioExtension = null;
			return;
		}
		$Franca_Audio_AudioContext.audioExtension = $Franca_Audio_AudioContext.$platformAudio.$setAudioExtension($Franca_Audio_AudioContext.$availableAudioFormats);
	};
	$Franca_Audio_AudioContext.initPlatform = function() {
		if ($Franca_Audio_AudioContext.$isInitialized) {
			return;
		}
		$Franca_Audio_AudioContext.$platformAudio = new $Franca_Audio_$JSAudio();
		$Franca_Audio_AudioContext.$availableAudioFormats = $Franca_Audio_AudioContext.$availableAudioFormats || new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [String]).$ctor1)($Franca_Audio_AudioContext.$platformAudio.get_$defaultAvailableAudioFormats());
		$Franca_Audio_AudioContext.$platformAudio.$createContext();
		$Franca_Audio_AudioContext.setAudioExtension();
		$Franca_Audio_AudioContext.$isInitialized = true;
	};
	$Franca_Audio_AudioContext.exit = function() {
		$Franca_Audio_AudioContext.$platformAudio.dispose();
	};
	$Franca_Audio_AudioContext.loadSound = function(manager, data) {
		return $Franca_Audio_AudioContext.$platformAudio.$loadSound$1(manager, data);
	};
	$Franca_Audio_AudioContext.loadSound$1 = function(manager, data, mimeType) {
		return $Franca_Audio_AudioContext.$platformAudio.$loadSound$2(manager, data, mimeType);
	};
	$Franca_Audio_AudioContext.loadMusic = function(manager, data) {
		return $Franca_Audio_AudioContext.$platformAudio.$loadMusic$1(manager, data);
	};
	$Franca_Audio_AudioContext.loadMusic$1 = function(manager, data, mimeType) {
		return $Franca_Audio_AudioContext.$platformAudio.$loadMusic$2(manager, data, mimeType);
	};
	global.Franca.Audio.AudioContext = $Franca_Audio_AudioContext;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.AudioManager
	var $Franca_Audio_AudioManager = function(context, maxInstances) {
		this.$context = null;
		this.$instances = null;
		this.$volume = 1;
		this.$instLock = new Object();
		this.$maxInstances = 0;
		this.$disposed = false;
		this.$context = context;
		this.$maxInstances = maxInstances;
		this.$instances = [];
		context.addManager(this);
	};
	$Franca_Audio_AudioManager.__typeName = 'Franca.Audio.AudioManager';
	global.Franca.Audio.AudioManager = $Franca_Audio_AudioManager;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.AudioState
	var $Franca_Audio_AudioState = function() {
	};
	$Franca_Audio_AudioState.__typeName = 'Franca.Audio.AudioState';
	global.Franca.Audio.AudioState = $Franca_Audio_AudioState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.EmptySoundInstance
	var $Franca_Audio_EmptySoundInstance = function() {
	};
	$Franca_Audio_EmptySoundInstance.__typeName = 'Franca.Audio.EmptySoundInstance';
	global.Franca.Audio.EmptySoundInstance = $Franca_Audio_EmptySoundInstance;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.IAudioContext
	var $Franca_Audio_IAudioContext = function() {
	};
	$Franca_Audio_IAudioContext.__typeName = 'Franca.Audio.IAudioContext';
	global.Franca.Audio.IAudioContext = $Franca_Audio_IAudioContext;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.IAudioManager
	var $Franca_Audio_IAudioManager = function() {
	};
	$Franca_Audio_IAudioManager.__typeName = 'Franca.Audio.IAudioManager';
	global.Franca.Audio.IAudioManager = $Franca_Audio_IAudioManager;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.IBufferedSound
	var $Franca_Audio_IBufferedSound = function() {
	};
	$Franca_Audio_IBufferedSound.__typeName = 'Franca.Audio.IBufferedSound';
	global.Franca.Audio.IBufferedSound = $Franca_Audio_IBufferedSound;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.ISound
	var $Franca_Audio_ISound = function() {
	};
	$Franca_Audio_ISound.__typeName = 'Franca.Audio.ISound';
	global.Franca.Audio.ISound = $Franca_Audio_ISound;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.ISoundInstance
	var $Franca_Audio_ISoundInstance = function() {
	};
	$Franca_Audio_ISoundInstance.__typeName = 'Franca.Audio.ISoundInstance';
	global.Franca.Audio.ISoundInstance = $Franca_Audio_ISoundInstance;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.IStreamedSound
	var $Franca_Audio_IStreamedSound = function() {
	};
	$Franca_Audio_IStreamedSound.__typeName = 'Franca.Audio.IStreamedSound';
	global.Franca.Audio.IStreamedSound = $Franca_Audio_IStreamedSound;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.Music
	var $Franca_Audio_Music = function() {
		this.stream = null;
		this.$bufferedLoopTo = null;
		this.$disposed = false;
		this.$fileRes = null;
		this.$loadManager = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
	};
	$Franca_Audio_Music.__typeName = 'Franca.Audio.Music';
	$Franca_Audio_Music.$ctor2 = function(music) {
		this.stream = null;
		this.$bufferedLoopTo = null;
		this.$disposed = false;
		this.$fileRes = null;
		this.$loadManager = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.set_name(music.get_name());
		this.stream = music.stream;
	};
	$Franca_Audio_Music.$ctor1 = function(stream) {
		this.stream = null;
		this.$bufferedLoopTo = null;
		this.$disposed = false;
		this.$fileRes = null;
		this.$loadManager = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.stream = stream;
	};
	global.Franca.Audio.Music = $Franca_Audio_Music;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Audio.Sound
	var $Franca_Audio_Sound = function() {
		this.buffer = null;
		this.$fileRes = null;
		this.$loadManager = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
	};
	$Franca_Audio_Sound.__typeName = 'Franca.Audio.Sound';
	$Franca_Audio_Sound.$ctor2 = function(sound) {
		this.buffer = null;
		this.$fileRes = null;
		this.$loadManager = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		this.set_name(sound.get_name());
		this.buffer = sound.buffer;
	};
	$Franca_Audio_Sound.$ctor1 = function(buffer) {
		this.buffer = null;
		this.$fileRes = null;
		this.$loadManager = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		this.buffer = buffer;
	};
	global.Franca.Audio.Sound = $Franca_Audio_Sound;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.BinFileCollection
	var $Franca_Collections_BinFileCollection = function() {
	};
	$Franca_Collections_BinFileCollection.__typeName = 'Franca.Collections.BinFileCollection';
	$Franca_Collections_BinFileCollection.$ctor_fromBinaryData = function(binary) {
		this.$data = null;
		this.$index = null;
		this.$decompressor = null;
		this.$data = binary;
		if (this.$data.get_endian() !== 0) {
			this.$data.set_endian(0);
		}
		this.$index = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_Collections_BinFileEntry]))();
		try {
			this.indexData();
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			throw new Franca.InvalidFormatException.$ctor2('BinFileCollection does not appear to be a valid bin file: ' + e.get_message(), e);
		}
	};
	global.Franca.Collections.BinFileCollection = $Franca_Collections_BinFileCollection;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.BinFileDecompressionException
	var $Franca_Collections_BinFileDecompressionException = function() {
		ss.Exception.call(this);
	};
	$Franca_Collections_BinFileDecompressionException.__typeName = 'Franca.Collections.BinFileDecompressionException';
	$Franca_Collections_BinFileDecompressionException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_Collections_BinFileDecompressionException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.Collections.BinFileDecompressionException = $Franca_Collections_BinFileDecompressionException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.BinFileDecompressor
	var $Franca_Collections_BinFileDecompressor = function(bin) {
		this.$bin = null;
		this.$filesDecompressed = 0;
		this.$filesTotal = 0;
		this.$bin = bin;
	};
	$Franca_Collections_BinFileDecompressor.__typeName = 'Franca.Collections.BinFileDecompressor';
	global.Franca.Collections.BinFileDecompressor = $Franca_Collections_BinFileDecompressor;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Collections.BinFileEntry
	var $Franca_Collections_BinFileEntry = function(data, name, offset, size, compressed) {
		this.$data = null;
		this.name = null;
		this.offset = 0;
		this.size = 0;
		this.compressed = false;
		this.$decompressedData = null;
		this.$decompressed = false;
		this.$data = data;
		this.name = name;
		this.offset = offset;
		this.size = size;
		this.compressed = compressed;
	};
	$Franca_Collections_BinFileEntry.__typeName = 'Franca.Collections.BinFileEntry';
	global.Franca.Collections.BinFileEntry = $Franca_Collections_BinFileEntry;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.BucketBatch
	var $Franca_DrawBucketing_BucketBatch = function() {
		this.vertexData = null;
		this.indexData = null;
		this.calls = null;
	};
	$Franca_DrawBucketing_BucketBatch.__typeName = 'Franca.DrawBucketing.BucketBatch';
	$Franca_DrawBucketing_BucketBatch.$ctor1 = function(vertexData, indexData, calls) {
		this.vertexData = null;
		this.indexData = null;
		this.calls = null;
		this.vertexData = vertexData;
		this.indexData = indexData;
		this.calls = calls;
	};
	$Franca_DrawBucketing_BucketBatch.getDefaultValue = function() {
		return new $Franca_DrawBucketing_BucketBatch();
	};
	global.Franca.DrawBucketing.BucketBatch = $Franca_DrawBucketing_BucketBatch;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.BucketBatchCall
	var $Franca_DrawBucketing_BucketBatchCall = function() {
		this.indexOffset = 0;
		this.elements = 0;
		this.callIndex = 0;
	};
	$Franca_DrawBucketing_BucketBatchCall.__typeName = 'Franca.DrawBucketing.BucketBatchCall';
	$Franca_DrawBucketing_BucketBatchCall.$ctor1 = function(indexOffset, elements, callIndex) {
		this.indexOffset = 0;
		this.elements = 0;
		this.callIndex = 0;
		this.indexOffset = indexOffset;
		this.elements = elements;
		this.callIndex = callIndex;
	};
	$Franca_DrawBucketing_BucketBatchCall.getDefaultValue = function() {
		return new $Franca_DrawBucketing_BucketBatchCall();
	};
	global.Franca.DrawBucketing.BucketBatchCall = $Franca_DrawBucketing_BucketBatchCall;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.CallBatch
	var $Franca_DrawBucketing_CallBatch = function() {
		this.$calls = null;
		this.$vertexComponents = 0;
		this.$vertexCount = 0;
		this.$indexCount = 0;
		this.$maxVertices = 1024;
		this.$indexType = 0;
		this.$vertexSpec = null;
		this.$calls = [];
	};
	$Franca_DrawBucketing_CallBatch.__typeName = 'Franca.DrawBucketing.CallBatch';
	global.Franca.DrawBucketing.CallBatch = $Franca_DrawBucketing_CallBatch;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.DrawBucket
	var $Franca_DrawBucketing_DrawBucket = function() {
		$Franca_DrawBucketing_DrawBucket.$ctor1.call(this, []);
	};
	$Franca_DrawBucketing_DrawBucket.__typeName = 'Franca.DrawBucketing.DrawBucket';
	$Franca_DrawBucketing_DrawBucket.$ctor1 = function(calls) {
		this.$calls = null;
		this.$vertexData = null;
		this.$indexDataUInt = null;
		this.$indexDataUShort = null;
		this.bufferUsage = 0;
		this.$vertexBuffers = null;
		this.$indexBuffers = null;
		this.$curBuffer = 0;
		this.$maxVertexBufferSize = $Franca_DrawBucketing_DrawBucket.$defaultBufferSize;
		this.$maxIndexBufferSize = $Franca_DrawBucketing_DrawBucket.$defaultBufferSize;
		this.$drawCalls = null;
		this.$graphicsDevice = null;
		this.$1$BatchCountField = 0;
		this.$1$DrawCallCountField = 0;
		this.$disposed = false;
		this.$calls = calls;
		this.$vertexData = new $Franca_Vertices_VertexBufferData(256);
		this.$indexDataUInt = new $Franca_Vertices_IndexBufferData(1, 256);
		this.$indexDataUShort = new $Franca_Vertices_IndexBufferData(0, 512);
		this.bufferUsage = 35040;
		this.$vertexBuffers = new Array($Franca_DrawBucketing_DrawBucket.$bufferCount);
		this.$indexBuffers = new Array($Franca_DrawBucketing_DrawBucket.$bufferCount);
		for (var i = 0; i < $Franca_DrawBucketing_DrawBucket.$bufferCount; i++) {
			this.$vertexBuffers[i] = $Franca_OpenGL_WebGL_GL.createBuffer();
			this.$indexBuffers[i] = $Franca_OpenGL_WebGL_GL.createBuffer();
		}
		this.$initGLBuffers();
		this.$drawCalls = [];
		this.$graphicsDevice = $Franca_GraphicsDevice.get_current();
	};
	$Franca_DrawBucketing_DrawBucket.$ctor2 = function(capacity) {
		$Franca_DrawBucketing_DrawBucket.$ctor1.call(this, []);
	};
	global.Franca.DrawBucketing.DrawBucket = $Franca_DrawBucketing_DrawBucket;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.DrawCall64
	var $Franca_DrawBucketing_DrawCall64 = function() {
		this.$key = null;
		this.$key = new $Franca_DrawBucketing_DrawKey64();
	};
	$Franca_DrawBucketing_DrawCall64.__typeName = 'Franca.DrawBucketing.DrawCall64';
	global.Franca.DrawBucketing.DrawCall64 = $Franca_DrawBucketing_DrawCall64;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.DrawKey64
	var $Franca_DrawBucketing_DrawKey64 = function() {
		this.$lower32 = 0;
		this.$upper32 = 0;
	};
	$Franca_DrawBucketing_DrawKey64.__typeName = 'Franca.DrawBucketing.DrawKey64';
	global.Franca.DrawBucketing.DrawKey64 = $Franca_DrawBucketing_DrawKey64;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.IDrawCall
	var $Franca_DrawBucketing_IDrawCall = function() {
	};
	$Franca_DrawBucketing_IDrawCall.__typeName = 'Franca.DrawBucketing.IDrawCall';
	global.Franca.DrawBucketing.IDrawCall = $Franca_DrawBucketing_IDrawCall;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.IDrawKey
	var $Franca_DrawBucketing_IDrawKey = function() {
	};
	$Franca_DrawBucketing_IDrawKey.__typeName = 'Franca.DrawBucketing.IDrawKey';
	global.Franca.DrawBucketing.IDrawKey = $Franca_DrawBucketing_IDrawKey;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.Material
	var $Franca_DrawBucketing_Material = function(opacity, samplers) {
		this.samplers = null;
		this.effect = null;
		this.programs = null;
		this.id = ss.getDefaultValue(Franca.IncrementalID);
		this.uniforms = null;
		this.opacity = 0;
		this.stencilState = ss.getDefaultValue($Franca_StencilState);
		this.id = $Franca_DrawBucketing_Material.$idGen.getID();
		this.samplers = [];
		ss.arrayAddRange(this.samplers, samplers);
		this.programs = [];
		this.uniforms = [];
		this.opacity = opacity;
	};
	$Franca_DrawBucketing_Material.__typeName = 'Franca.DrawBucketing.Material';
	$Franca_DrawBucketing_Material.$ctor1 = function(source, opacity, samplers) {
		$Franca_DrawBucketing_Material.call(this, opacity, samplers);
		this.effect = source.effect;
		this.stencilState = source.stencilState;
		ss.arrayAddRange(this.programs, source.programs);
		for (var i = 0; i < source.uniforms.length; i++) {
			this.uniforms.push(new $Franca_DrawBucketing_ProgramUniforms(source.uniforms[i]));
		}
		if (samplers.length < source.samplers.length) {
			for (var i1 = samplers.length; i1 < source.samplers.length; i1++) {
				this.samplers.push(source.samplers[i1]);
			}
		}
	};
	$Franca_DrawBucketing_Material.$ctor2 = function(source, opacity, textures) {
		$Franca_DrawBucketing_Material.$ctor1.call(this, source, opacity, []);
		for (var i = 0; i < Math.min(textures.length, this.samplers.length); i++) {
			this.samplers[i] = new $Franca_DrawBucketing_SamplerState.$ctor1(this.samplers[i].sampler, textures[i], this.samplers[i].filter, this.samplers[i].wrap);
		}
	};
	$Franca_DrawBucketing_Material.op_Implicit = function(mat) {
		return ss.Int32.trunc(mat.id.value);
	};
	$Franca_DrawBucketing_Material.op_Equality = function(lhs, rhs) {
		if (ss.isNullOrUndefined(lhs)) {
			return ss.isNullOrUndefined(rhs);
		}
		return lhs.equalsT(rhs);
	};
	$Franca_DrawBucketing_Material.op_Inequality = function(lhs, rhs) {
		if (ss.isNullOrUndefined(lhs)) {
			return ss.isValue(rhs);
		}
		return !lhs.equalsT(rhs);
	};
	global.Franca.DrawBucketing.Material = $Franca_DrawBucketing_Material;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.OpacityType
	var $Franca_DrawBucketing_OpacityType = function() {
	};
	$Franca_DrawBucketing_OpacityType.__typeName = 'Franca.DrawBucketing.OpacityType';
	global.Franca.DrawBucketing.OpacityType = $Franca_DrawBucketing_OpacityType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.ProgramUniform
	var $Franca_DrawBucketing_ProgramUniform = function() {
		this.name = null;
		this.value = null;
	};
	$Franca_DrawBucketing_ProgramUniform.__typeName = 'Franca.DrawBucketing.ProgramUniform';
	$Franca_DrawBucketing_ProgramUniform.$ctor1 = function(name, value) {
		this.name = null;
		this.value = null;
		this.name = name;
		this.value = value;
	};
	$Franca_DrawBucketing_ProgramUniform.getDefaultValue = function() {
		return new $Franca_DrawBucketing_ProgramUniform();
	};
	global.Franca.DrawBucketing.ProgramUniform = $Franca_DrawBucketing_ProgramUniform;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.ProgramUniforms
	var $Franca_DrawBucketing_ProgramUniforms = function(source) {
		this.program = null;
		this.defaultUniforms = null;
		this.customUniforms = null;
		this.program = source.program;
		this.defaultUniforms = source.defaultUniforms;
		this.customUniforms = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_DrawBucketing_ProgramUniform]))();
	};
	$Franca_DrawBucketing_ProgramUniforms.__typeName = 'Franca.DrawBucketing.ProgramUniforms';
	$Franca_DrawBucketing_ProgramUniforms.$ctor1 = function(program) {
		this.program = null;
		this.defaultUniforms = null;
		this.customUniforms = null;
		this.program = program;
		this.defaultUniforms = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_DrawBucketing_ProgramUniform]))();
		this.customUniforms = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_DrawBucketing_ProgramUniform]))();
	};
	$Franca_DrawBucketing_ProgramUniforms.op_Equality = function(lhs, rhs) {
		if (ss.isNullOrUndefined(lhs)) {
			return ss.isNullOrUndefined(rhs);
		}
		return lhs.equalsT(rhs);
	};
	$Franca_DrawBucketing_ProgramUniforms.op_Inequality = function(lhs, rhs) {
		if (ss.isNullOrUndefined(lhs)) {
			return ss.isValue(rhs);
		}
		return !lhs.equalsT(rhs);
	};
	global.Franca.DrawBucketing.ProgramUniforms = $Franca_DrawBucketing_ProgramUniforms;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.Sampler
	var $Franca_DrawBucketing_Sampler = function() {
		this.name = null;
		this.index = 0;
	};
	$Franca_DrawBucketing_Sampler.__typeName = 'Franca.DrawBucketing.Sampler';
	$Franca_DrawBucketing_Sampler.$ctor1 = function(name, index) {
		this.name = null;
		this.index = 0;
		this.name = name;
		this.index = index;
	};
	$Franca_DrawBucketing_Sampler.getDefaultValue = function() {
		return new $Franca_DrawBucketing_Sampler();
	};
	$Franca_DrawBucketing_Sampler.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_DrawBucketing_Sampler.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.DrawBucketing.Sampler = $Franca_DrawBucketing_Sampler;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.SamplerState
	var $Franca_DrawBucketing_SamplerState = function() {
		this.sampler = ss.getDefaultValue($Franca_DrawBucketing_Sampler);
		this.texture = null;
		this.filter = 0;
		this.wrap = 0;
	};
	$Franca_DrawBucketing_SamplerState.__typeName = 'Franca.DrawBucketing.SamplerState';
	$Franca_DrawBucketing_SamplerState.$ctor1 = function(sampler, texture, filter, wrap) {
		this.sampler = ss.getDefaultValue($Franca_DrawBucketing_Sampler);
		this.texture = null;
		this.filter = 0;
		this.wrap = 0;
		this.sampler = sampler;
		this.texture = texture;
		this.filter = filter;
		this.wrap = wrap;
	};
	$Franca_DrawBucketing_SamplerState.getDefaultValue = function() {
		return new $Franca_DrawBucketing_SamplerState();
	};
	$Franca_DrawBucketing_SamplerState.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_DrawBucketing_SamplerState.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.DrawBucketing.SamplerState = $Franca_DrawBucketing_SamplerState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.ScreenSprite
	var $Franca_DrawBucketing_ScreenSprite = function() {
		this.viewport = ss.getDefaultValue(Franca.Rectangle);
		this.sourceRect = ss.getDefaultValue(Franca.RectangleF);
		this.destRect = ss.getDefaultValue(Franca.RectangleF);
		this.colors = ss.getDefaultValue($Franca_HdrColors);
		this.origin = ss.getDefaultValue(Franca.Vector2);
		this.angle = 0;
		this.effects = 0;
		this.stencilState = ss.getDefaultValue($Franca_StencilState);
		this.$vertexSize = $Franca_DrawBucketing_ScreenSprite.spriteVertexSpec.get_size();
		$Franca_DrawBucketing_TexturedDrawCall.call(this);
	};
	$Franca_DrawBucketing_ScreenSprite.__typeName = 'Franca.DrawBucketing.ScreenSprite';
	$Franca_DrawBucketing_ScreenSprite.compare = function(lhsOpacity, lhsStencilState, lhsMaterial, lhsDepth, rhsOpacity, rhsStencilState, rhsMaterial, rhsDepth) {
		// first sort by opacity
		if (lhsOpacity !== rhsOpacity) {
			if (lhsOpacity === 0) {
				// draw opaque sprites first
				return -1;
			}
			else if (rhsOpacity === 0) {
				// then draw transparent
				return 1;
			}
		}
		if (lhsOpacity === 0) {
			// opaque sprite sorting
			// first by stencil state
			var stencilDif = lhsStencilState.compareTo(rhsStencilState);
			if (stencilDif !== 0) {
				return stencilDif;
			}
			// then by material
			var matDif = lhsMaterial.id.value - rhsMaterial.id.value;
			if (matDif !== 0) {
				return ss.Int32.trunc(matDif);
			}
			// then by depth (nearest first)
			// this appears to be borkened and i dunno why
			if (lhsDepth < rhsDepth) {
				return -1;
			}
			else if (lhsDepth > rhsDepth) {
				return 1;
			}
			return 0;
		}
		else {
			// transparent sprite sorting
			// first by depth (farthest first)
			if (lhsDepth < rhsDepth) {
				return 1;
			}
			else if (lhsDepth > rhsDepth) {
				return -1;
			}
			// then by stencil state
			var stencilDif1 = lhsStencilState.compareTo(rhsStencilState);
			if (stencilDif1 !== 0) {
				return stencilDif1;
			}
			// then by material
			var matDif1 = lhsMaterial.id.value - rhsMaterial.id.value;
			if (matDif1 !== 0) {
				return ss.Int32.trunc(matDif1);
			}
			return 0;
		}
	};
	$Franca_DrawBucketing_ScreenSprite.get_baseMaterial = function() {
		if ($Franca_DrawBucketing_Material.op_Equality($Franca_DrawBucketing_ScreenSprite.$baseMaterial, null)) {
			$Franca_DrawBucketing_ScreenSprite.createBaseMaterial();
		}
		return $Franca_DrawBucketing_ScreenSprite.$baseMaterial;
	};
	$Franca_DrawBucketing_ScreenSprite.get_vertexArrayObj = function() {
		if (ss.isNullOrUndefined($Franca_DrawBucketing_ScreenSprite.$vertexArrayObj)) {
			$Franca_DrawBucketing_ScreenSprite.createVertexArrayObject();
		}
		return $Franca_DrawBucketing_ScreenSprite.$vertexArrayObj;
	};
	$Franca_DrawBucketing_ScreenSprite.init = function() {
		$Franca_DrawBucketing_ScreenSprite.createVertexArrayObject();
		$Franca_DrawBucketing_ScreenSprite.createBaseMaterial();
	};
	$Franca_DrawBucketing_ScreenSprite.createVertexArrayObject = function() {
		if (ss.isValue($Franca_DrawBucketing_ScreenSprite.$vertexArrayObj)) {
			return;
		}
		$Franca_DrawBucketing_ScreenSprite.$vertexArrayObj = new $Franca_OpenGL_VertexArrayObject();
		$Franca_DrawBucketing_ScreenSprite.$vertexArrayObj.bind();
		$Franca_DrawBucketing_ScreenSprite.$vertexArrayObj.enableVertexAttribArray$1($Franca_DrawBucketing_ScreenSprite.spriteVertexSpec);
		$Franca_DrawBucketing_ScreenSprite.$vertexArrayObj.unbind();
	};
	$Franca_DrawBucketing_ScreenSprite.createBaseMaterial = function() {
		if ($Franca_DrawBucketing_Material.op_Inequality($Franca_DrawBucketing_ScreenSprite.$baseMaterial, null)) {
			return;
		}
		$Franca_DrawBucketing_ScreenSprite.$baseMaterial = new $Franca_DrawBucketing_Material(0, [new $Franca_DrawBucketing_SamplerState.$ctor1(new $Franca_DrawBucketing_Sampler.$ctor1('texSampler', 0), $Franca_Texture.get_none(), 3, 12)]);
		$Franca_DrawBucketing_ScreenSprite.get_baseMaterial().effect = $Franca_GraphicsDevice.get_current().get_builtinAssets().get_basicEffect();
		$Franca_DrawBucketing_ScreenSprite.get_baseMaterial().programs.push('default');
		$Franca_DrawBucketing_ScreenSprite.get_baseMaterial().uniforms.push(new $Franca_DrawBucketing_ProgramUniforms.$ctor1('default'));
		$Franca_DrawBucketing_ScreenSprite.get_baseMaterial().uniforms[0].defaultUniforms.set_item('testAlpha', new $Franca_DrawBucketing_ProgramUniform.$ctor1('testAlpha', 0));
		// we set matrixTransform uniform when we set render state
	};
	$Franca_DrawBucketing_ScreenSprite.draw$1 = function(material, position, color, effects, depth, stencilState) {
		return $Franca_DrawBucketing_ScreenSprite.draw$2(material, new Franca.RectangleF.$ctor3(position.x, position.y, material.samplers[0].texture.get_width(), material.samplers[0].texture.get_height()), new Franca.RectangleF.$ctor3(0, 0, material.samplers[0].texture.get_width(), material.samplers[0].texture.get_height()), color, effects, depth, stencilState);
	};
	$Franca_DrawBucketing_ScreenSprite.draw = function(material, dest, color, effects, depth, stencilState) {
		return $Franca_DrawBucketing_ScreenSprite.draw$2(material, dest, new Franca.RectangleF.$ctor3(0, 0, material.samplers[0].texture.get_width(), material.samplers[0].texture.get_height()), color, effects, depth, stencilState);
	};
	$Franca_DrawBucketing_ScreenSprite.draw$2 = function(material, dest, source, color, effects, depth, stencilState) {
		return $Franca_DrawBucketing_ScreenSprite.drawRot$2(material, dest, source, color, 0, Franca.Vector2.zero, effects, depth, stencilState);
	};
	$Franca_DrawBucketing_ScreenSprite.drawRot$1 = function(material, position, color, angle, origin, effects, depth, stencilState) {
		return $Franca_DrawBucketing_ScreenSprite.drawRot$2(material, new Franca.RectangleF.$ctor3(position.x, position.y, material.samplers[0].texture.get_width(), material.samplers[0].texture.get_height()), new Franca.RectangleF.$ctor3(0, 0, material.samplers[0].texture.get_width(), material.samplers[0].texture.get_height()), color, angle, origin, effects, depth, stencilState);
	};
	$Franca_DrawBucketing_ScreenSprite.drawRot = function(material, dest, color, angle, origin, effects, depth, stencilState) {
		return $Franca_DrawBucketing_ScreenSprite.drawRot$2(material, dest, new Franca.RectangleF.$ctor3(0, 0, material.samplers[0].texture.get_width(), material.samplers[0].texture.get_height()), color, angle, origin, effects, depth, stencilState);
	};
	$Franca_DrawBucketing_ScreenSprite.drawRot$2 = function(material, dest, source, color, angle, origin, effects, depth, stencilState) {
		return $Franca_DrawBucketing_ScreenSprite.drawRot$3(material, dest, source, new $Franca_HdrColors.$ctor1(color), angle, origin, effects, depth, stencilState);
	};
	$Franca_DrawBucketing_ScreenSprite.drawRot$3 = function(material, dest, source, colors, angle, origin, effects, depth, stencilState) {
		if (effects !== 0) {
			if (System.EnumExtensions.hasFlag(effects, 1)) {
				source = new Franca.RectangleF.$ctor3(source.location.x + source.size.width, source.location.y, -source.size.width, source.size.height);
			}
			if (System.EnumExtensions.hasFlag(effects, 2)) {
				source = new Franca.RectangleF.$ctor3(source.location.x, source.location.y + source.size.height, source.size.width, -source.size.height);
			}
		}
		var hasAlpha = colors.topLeft.a < 1 || colors.topRight.a < 1 || colors.bottomLeft.a < 1 || colors.bottomRight.a < 1;
		var $t1 = new $Franca_DrawBucketing_ScreenSprite();
		$t1.viewport = $Franca_GraphicsDevice.get_current().get_viewport();
		$t1.material = material;
		$t1.sourceRect = source;
		$t1.destRect = dest;
		$t1.colors = colors;
		$t1.angle = angle;
		$t1.depth = depth;
		$t1.origin = origin;
		$t1.stencilState = (ss.isValue(stencilState) ? ss.unbox(stencilState) : material.stencilState);
		$t1.set_opacity(((material.opacity === 0) ? (hasAlpha ? 1 : material.opacity) : material.opacity));
		return $t1;
	};
	global.Franca.DrawBucketing.ScreenSprite = $Franca_DrawBucketing_ScreenSprite;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.ScreenSpriteVertex
	var $Franca_DrawBucketing_ScreenSpriteVertex = function() {
		$Franca_Vertices_VertexSpec.call(this);
		this.addElements([new $Franca_Vertices_VertexElement('inputPosition', 5126, 4, 3, false), new $Franca_Vertices_VertexElement('inputTexCoords', 5126, 4, 2, false), new $Franca_Vertices_VertexElement('inputColor', 5126, 4, 4, false), new $Franca_Vertices_VertexElement('inputRotation', 5126, 4, 3, false)]);
	};
	$Franca_DrawBucketing_ScreenSpriteVertex.__typeName = 'Franca.DrawBucketing.ScreenSpriteVertex';
	global.Franca.DrawBucketing.ScreenSpriteVertex = $Franca_DrawBucketing_ScreenSpriteVertex;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.DrawBucketing.TexturedDrawCall
	var $Franca_DrawBucketing_TexturedDrawCall = function() {
		this.material = null;
		this.depth = 0;
		this.$opacity = null;
	};
	$Franca_DrawBucketing_TexturedDrawCall.__typeName = 'Franca.DrawBucketing.TexturedDrawCall';
	global.Franca.DrawBucketing.TexturedDrawCall = $Franca_DrawBucketing_TexturedDrawCall;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifApplicationExtension
	var $Franca_Gif_$GifApplicationExtension = function() {
		this.$introducer = Franca.Text.UTF8.toBinaryData('NETSCAPE');
		this.$authentication = Franca.Text.UTF8.toBinaryData('2.0');
		this.$appBlock = new $Franca_$Gif_$GifApplicationExtension$GifApplicationBlock();
		$Franca_Gif_$GifExtension.call(this, 255);
		this.$size = 11;
	};
	$Franca_Gif_$GifApplicationExtension.__typeName = 'Franca.Gif.$GifApplicationExtension';
	$Franca_Gif_$GifApplicationExtension.$ctor1 = function(reader) {
		$Franca_Gif_$GifApplicationExtension.call(this);
		// assume the extension introducers have already been read
		var size = reader.readByte();
		if (this.$size !== size && size !== 0) {
			throw new ss.FormatException(ss.formatString("Application extension size didn't match, was {0}, expected {1} or 0.", size, this.$size));
		}
		if (size === 0) {
			return;
		}
		reader.read(this.$introducer, 0, this.$introducer.get_length());
		reader.read(this.$authentication, 0, this.$authentication.get_length());
		if (Franca.Text.UTF8.fromBinaryData(this.$introducer, true) !== 'NETSCAPE' || Franca.Text.UTF8.fromBinaryData(this.$authentication, true) !== '2.0') {
			var blockSize;
			do {
				blockSize = reader.readByte();
				if (blockSize > 0) {
					reader.skip(blockSize);
				}
			} while (blockSize > 0);
		}
		else {
			this.$appBlock = new $Franca_$Gif_$GifApplicationExtension$GifApplicationBlock.$ctor1(reader);
		}
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifColorTable
	var $Franca_Gif_$GifColorTable = function(reader, numColors) {
		this.$entries = null;
		this.$entries = new Array(numColors);
		for (var i = 0; i < numColors; i++) {
			var r = reader.readByte();
			var g = reader.readByte();
			var b = reader.readByte();
			this.$entries[i] = new Franca.Color.$ctor5(r, g, b, 255);
		}
	};
	$Franca_Gif_$GifColorTable.__typeName = 'Franca.Gif.$GifColorTable';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifCommentExtension
	var $Franca_Gif_$GifCommentExtension = function() {
		$Franca_Gif_$GifExtension.call(this, 254);
	};
	$Franca_Gif_$GifCommentExtension.__typeName = 'Franca.Gif.$GifCommentExtension';
	$Franca_Gif_$GifCommentExtension.$ctor1 = function(reader) {
		$Franca_Gif_$GifCommentExtension.call(this);
		var blockSize = reader.readByte();
		while (blockSize !== 0) {
			reader.skip(blockSize);
			blockSize = reader.readByte();
		}
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifExtension
	var $Franca_Gif_$GifExtension = function(type) {
		this.$extensionType = 0;
		this.$size = 0;
		this.$terminator = 0;
		this.$extensionType = type & 255;
	};
	$Franca_Gif_$GifExtension.__typeName = 'Franca.Gif.$GifExtension';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifExtensionType
	var $Franca_Gif_$GifExtensionType = function() {
	};
	$Franca_Gif_$GifExtensionType.__typeName = 'Franca.Gif.$GifExtensionType';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifGraphicsControlExtension
	var $Franca_Gif_$GifGraphicsControlExtension = function() {
		this.$flags = 0;
		this.$delay = 0;
		this.$transparentColor = 0;
		$Franca_Gif_$GifExtension.call(this, 249);
		this.$size = 4;
	};
	$Franca_Gif_$GifGraphicsControlExtension.__typeName = 'Franca.Gif.$GifGraphicsControlExtension';
	$Franca_Gif_$GifGraphicsControlExtension.$ctor1 = function(reader) {
		$Franca_Gif_$GifGraphicsControlExtension.call(this);
		// assume the extension introducers have already been read
		var size = reader.readByte();
		if (this.$size !== size) {
			throw new ss.FormatException(ss.formatString("Graphics control extension size didn't match, was {0}, expected {1}.", size, this.$size));
		}
		this.$flags = reader.readByte();
		this.$delay = reader.readUInt16();
		this.$transparentColor = reader.readByte();
		reader.readByte();
		// terminator
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifGraphicsControlFlags
	var $Franca_Gif_$GifGraphicsControlFlags = function() {
	};
	$Franca_Gif_$GifGraphicsControlFlags.__typeName = 'Franca.Gif.$GifGraphicsControlFlags';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifHeader
	var $Franca_Gif_$GifHeader = function() {
		this.$version = Franca.Text.UTF8.toBinaryData(System.EnumExtensions.getName($Franca_Gif_$GifVersion).call(null, 0));
	};
	$Franca_Gif_$GifHeader.__typeName = 'Franca.Gif.$GifHeader';
	$Franca_Gif_$GifHeader.$ctor1 = function(reader) {
		this.$version = Franca.Text.UTF8.toBinaryData(System.EnumExtensions.getName($Franca_Gif_$GifVersion).call(null, 0));
		reader.read(this.$version, 0, $Franca_Gif_$GifHeader.$maxVersionLen);
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifHelper
	var $Franca_Gif_$GifHelper = function() {
	};
	$Franca_Gif_$GifHelper.__typeName = 'Franca.Gif.$GifHelper';
	$Franca_Gif_$GifHelper.$entriesFromColorTableSize = function(size) {
		return ss.Int32.trunc(Math.pow(2, size + 1));
	};
	$Franca_Gif_$GifHelper.$colorTableSizeFromEntries = function(entries) {
		var entryNum = entries - 1 & 255;
		var mask = 128;
		// highest bit set
		var ret = 0;
		for (var i = 7; i > 0; i--) {
			if ((entryNum & mask) === mask) {
				ret = i;
				break;
			}
			mask = mask >>> 1;
		}
		return ret;
	};
	$Franca_Gif_$GifHelper.$isSet = function(val, flag) {
		return (val & flag) === flag;
	};
	$Franca_Gif_$GifHelper.$isSet$1 = function(value, flag) {
		return (value & flag) === flag;
	};
	$Franca_Gif_$GifHelper.$set$2 = function(val, mask, isSet) {
		if (isSet) {
			return $Franca_Gif_$GifHelper.$set(val, mask);
		}
		else {
			return $Franca_Gif_$GifHelper.$unset(val, mask);
		}
	};
	$Franca_Gif_$GifHelper.$set = function(val, mask) {
		val |= mask;
		return val;
	};
	$Franca_Gif_$GifHelper.$unset = function(val, mask) {
		val &= ~mask & 255;
		return val;
	};
	$Franca_Gif_$GifHelper.$set$3 = function(val, mask, isSet) {
		if (isSet) {
			return $Franca_Gif_$GifHelper.$set$1(val, mask);
		}
		else {
			return $Franca_Gif_$GifHelper.$unset$1(val, mask);
		}
	};
	$Franca_Gif_$GifHelper.$set$1 = function(val, mask) {
		val |= mask;
		return val;
	};
	$Franca_Gif_$GifHelper.$unset$1 = function(val, mask) {
		val &= ~mask >>> 0;
		return val;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifImageData
	var $Franca_Gif_$GifImageData = function(reader) {
		this.$codeSize = 0;
		this.$blocks = null;
		this.$blocks = [];
		this.$codeSize = reader.readByte();
		var blockSize = reader.readByte();
		while (blockSize !== 0) {
			var $t1 = new Franca.BinaryData.$ctor5(blockSize);
			$t1.set_endian(0);
			var data = $t1;
			reader.read(data, 0, data.get_length());
			this.$blocks.push(data);
			blockSize = reader.readByte();
		}
	};
	$Franca_Gif_$GifImageData.__typeName = 'Franca.Gif.$GifImageData';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifImageDescriptor
	var $Franca_Gif_$GifImageDescriptor = function() {
		this.$left = 0;
		this.$top = 0;
		this.$width = 0;
		this.$height = 0;
		this.$flags = 0;
	};
	$Franca_Gif_$GifImageDescriptor.__typeName = 'Franca.Gif.$GifImageDescriptor';
	$Franca_Gif_$GifImageDescriptor.$ctor1 = function(reader) {
		this.$left = 0;
		this.$top = 0;
		this.$width = 0;
		this.$height = 0;
		this.$flags = 0;
		// assume the seperator has already been read
		this.$left = reader.readUInt16();
		this.$top = reader.readUInt16();
		this.$width = reader.readUInt16();
		this.$height = reader.readUInt16();
		this.$flags = reader.readByte();
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifImageFlags
	var $Franca_Gif_$GifImageFlags = function() {
	};
	$Franca_Gif_$GifImageFlags.__typeName = 'Franca.Gif.$GifImageFlags';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifLogicalScreenDescriptor
	var $Franca_Gif_$GifLogicalScreenDescriptor = function() {
		this.$canvasWidth = 0;
		this.$canvasHeight = 0;
		this.$flags = 1;
		this.$bgColor = 0;
		this.$aspectRatio = 0;
	};
	$Franca_Gif_$GifLogicalScreenDescriptor.__typeName = 'Franca.Gif.$GifLogicalScreenDescriptor';
	$Franca_Gif_$GifLogicalScreenDescriptor.$ctor1 = function(reader) {
		this.$canvasWidth = 0;
		this.$canvasHeight = 0;
		this.$flags = 1;
		this.$bgColor = 0;
		this.$aspectRatio = 0;
		this.$canvasWidth = reader.readUInt16();
		this.$canvasHeight = reader.readUInt16();
		this.$flags = reader.readByte();
		this.$bgColor = reader.readByte();
		this.$aspectRatio = reader.readByte();
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifPlainTextExtension
	var $Franca_Gif_$GifPlainTextExtension = function() {
		$Franca_Gif_$GifExtension.call(this, 1);
	};
	$Franca_Gif_$GifPlainTextExtension.__typeName = 'Franca.Gif.$GifPlainTextExtension';
	$Franca_Gif_$GifPlainTextExtension.$ctor1 = function(reader) {
		$Franca_Gif_$GifPlainTextExtension.call(this);
		var size = reader.readByte();
		reader.skip(size);
		var blockSize = reader.readByte();
		while (blockSize !== 0) {
			reader.skip(blockSize);
			blockSize = reader.readByte();
		}
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifScreenFlags
	var $Franca_Gif_$GifScreenFlags = function() {
	};
	$Franca_Gif_$GifScreenFlags.__typeName = 'Franca.Gif.$GifScreenFlags';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifVersion
	var $Franca_Gif_$GifVersion = function() {
	};
	$Franca_Gif_$GifVersion.__typeName = 'Franca.Gif.$GifVersion';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.AnimatedGif
	var $Franca_Gif_AnimatedGif = function() {
		this.$1$FramesField = null;
		this.$1$WidthField = 0;
		this.$1$HeightField = 0;
		this.$1$LoopsField = false;
		this.$1$RepeatCountField = 0;
		this.$duration = null;
		this.$disposed = false;
	};
	$Franca_Gif_AnimatedGif.__typeName = 'Franca.Gif.AnimatedGif';
	$Franca_Gif_AnimatedGif.$ctor1 = function(data) {
		$Franca_Gif_AnimatedGif.$ctor2.call(this, $Franca_Gif_AnimatedGif.fromBinary(data));
		// this is a clunky way of doing it but oh well
	};
	$Franca_Gif_AnimatedGif.$ctor2 = function(cloneSource) {
		$Franca_Gif_AnimatedGif.call(this);
		$Franca_Gif_AnimatedGif.$copy(cloneSource, this);
	};
	$Franca_Gif_AnimatedGif.$ctor3 = function(screen, appExtension, frames) {
		this.$1$FramesField = null;
		this.$1$WidthField = 0;
		this.$1$HeightField = 0;
		this.$1$LoopsField = false;
		this.$1$RepeatCountField = 0;
		this.$duration = null;
		this.$disposed = false;
		this.set_frames(frames);
		this.set_width(screen.get_$width());
		this.set_height(screen.get_$height());
		if (ss.isValue(appExtension)) {
			this.set_loops(true);
			this.set_repeatCount(appExtension.get_$repeatCount());
		}
	};
	$Franca_Gif_AnimatedGif.$copy = function(cloneSource, cloneTarget) {
		cloneTarget.set_frames(cloneSource.get_frames());
		cloneTarget.set_width(cloneSource.get_width());
		cloneTarget.set_height(cloneSource.get_height());
		cloneTarget.set_loops(cloneSource.get_loops());
		cloneTarget.set_repeatCount(cloneSource.get_repeatCount());
	};
	$Franca_Gif_AnimatedGif.fromStream = function(stream) {
		var reader = new Franca.BinDataStreamReader(stream, 0);
		try {
			return $Franca_Gif_AnimatedGif.fromBinary$1(reader);
		}
		finally {
			if (ss.isValue(reader)) {
				reader.dispose();
			}
		}
	};
	$Franca_Gif_AnimatedGif.fromBinary = function(data) {
		var reader = new Franca.BinDataStreamReader(new Franca.BinaryStream.$ctor1(data), 0);
		try {
			return $Franca_Gif_AnimatedGif.fromBinary$1(reader);
		}
		finally {
			if (ss.isValue(reader)) {
				reader.dispose();
			}
		}
	};
	$Franca_Gif_AnimatedGif.fromBinary$1 = function(reader) {
		var gfxExtension = null;
		var screen;
		var appExtension = null;
		var frames = [];
		var header = new $Franca_Gif_$GifHeader.$ctor1(reader);
		screen = new $Franca_Gif_$GifLogicalScreenDescriptor.$ctor1(reader);
		var globalColorTable = null;
		if (screen.get_$hasGlobalColorTable()) {
			globalColorTable = new $Franca_Gif_$GifColorTable(reader, $Franca_Gif_$GifHelper.$entriesFromColorTableSize(screen.get_$globalColorTableSize()));
		}
		var id;
		while ((id = reader.readByte()) !== 59) {
			if (id === 44) {
				// image data
				var imgDesc = new $Franca_Gif_$GifImageDescriptor.$ctor1(reader);
				var colorTable = null;
				if (imgDesc.get_$hasLocalColorTable()) {
					colorTable = new $Franca_Gif_$GifColorTable(reader, $Franca_Gif_$GifHelper.$entriesFromColorTableSize(imgDesc.get_$localColorTableSize()));
					if (ss.isNullOrUndefined(globalColorTable)) {
						globalColorTable = colorTable;
					}
				}
				// img data table
				var pixels = $Franca_Gif_GifLZW.inflate(reader, imgDesc.get_$width(), imgDesc.get_$height());
				var frame = new $Franca_Gif_GifFrame(imgDesc, colorTable || globalColorTable, gfxExtension, pixels, screen, frames);
				frames.push(frame);
				gfxExtension = null;
			}
			else if (id === 33) {
				// extension
				if (id === 33) {
					var extensionType = reader.readByte();
					switch (extensionType) {
						case 1: {
							new $Franca_Gif_$GifPlainTextExtension.$ctor1(reader);
							// we don't give a
							break;
						}
						case 254: {
							new $Franca_Gif_$GifCommentExtension.$ctor1(reader);
							// shit about these
							break;
						}
						case 255: {
							appExtension = new $Franca_Gif_$GifApplicationExtension.$ctor1(reader);
							break;
						}
						case 249: {
							gfxExtension = new $Franca_Gif_$GifGraphicsControlExtension.$ctor1(reader);
							break;
						}
					}
				}
			}
		}
		return new $Franca_Gif_AnimatedGif.$ctor3(screen, appExtension, frames);
	};
	global.Franca.Gif.AnimatedGif = $Franca_Gif_AnimatedGif;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifData
	var $Franca_Gif_GifData = function() {
		this.palette = null;
		this.pixels = null;
		this.width = 0;
		this.height = 0;
	};
	$Franca_Gif_GifData.__typeName = 'Franca.Gif.GifData';
	$Franca_Gif_GifData.$ctor2 = function(width, height, palette, pixels) {
		this.palette = null;
		this.pixels = null;
		this.width = 0;
		this.height = 0;
		$Franca_Gif_GifData.create(this, width, height, palette, pixels);
	};
	$Franca_Gif_GifData.$ctor1 = function(data) {
		this.palette = null;
		this.pixels = null;
		this.width = 0;
		this.height = 0;
		{
			var stream = new Franca.BinaryStream.$ctor3(data, false);
			try {
				{
					var reader = new Franca.BinDataStreamReader(stream, 0);
					try {
						$Franca_Gif_GifImage.read$2(reader, this);
					}
					finally {
						if (ss.isValue(reader)) {
							reader.dispose();
						}
					}
				}
			}
			finally {
				if (ss.isValue(stream)) {
					stream.dispose();
				}
			}
		}
	};
	$Franca_Gif_GifData.create = function(gif, width, height, palette, pixels) {
		gif.width = width;
		gif.height = height;
		gif.palette = palette;
		gif.pixels = pixels;
	};
	global.Franca.Gif.GifData = $Franca_Gif_GifData;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifDisposalMethod
	var $Franca_Gif_GifDisposalMethod = function() {
	};
	$Franca_Gif_GifDisposalMethod.__typeName = 'Franca.Gif.GifDisposalMethod';
	global.Franca.Gif.GifDisposalMethod = $Franca_Gif_GifDisposalMethod;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifFormatException
	var $Franca_Gif_GifFormatException = function() {
		ss.Exception.call(this);
	};
	$Franca_Gif_GifFormatException.__typeName = 'Franca.Gif.GifFormatException';
	$Franca_Gif_GifFormatException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_Gif_GifFormatException.$ctor2 = function(message, inner) {
		ss.Exception.call(this, message, inner);
	};
	global.Franca.Gif.GifFormatException = $Franca_Gif_GifFormatException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifFrame
	var $Franca_Gif_GifFrame = function(imgDesc, colorTable, gfxExtension, pixels, screen, frames) {
		this.$1$ImageField = null;
		this.$1$DisposalField = 0;
		this.$1$DelayField = 0;
		this.$1$TransparencyField = false;
		this.$duration = null;
		this.$disposed = false;
		if (imgDesc.get_$interlaced()) {
			pixels = this.$deinterlace(pixels, imgDesc.get_$width(), imgDesc.get_$height());
		}
		this.set_image(new $Franca_Canvas.$ctor3(screen.get_$width(), screen.get_$height()));
		this.set_disposal((ss.isValue(gfxExtension) ? gfxExtension.get_$disposalMethod() : 65535));
		this.set_delay((ss.isValue(gfxExtension) ? gfxExtension.get_$delay() : 0));
		this.set_transparency((ss.isValue(gfxExtension) ? gfxExtension.get_$transparency() : false));
		if (frames.length > 0) {
			var lastFrame = frames[frames.length - 1];
			if (lastFrame.get_disposal() === 65535 || lastFrame.get_disposal() === 0 || lastFrame.get_disposal() === 1) {
				{
					var gfx = this.get_image().createContext();
					try {
						gfx.draw(lastFrame.get_image(), Franca.PointF.zero);
					}
					finally {
						if (ss.isValue(gfx)) {
							gfx.dispose();
						}
					}
				}
			}
			else if (lastFrame.get_disposal() === 3 && frames.length > 1) {
				{
					var gfx1 = this.get_image().createContext();
					try {
						gfx1.draw(frames[frames.length - 2].get_image(), Franca.PointF.zero);
					}
					finally {
						if (ss.isValue(gfx1)) {
							gfx1.dispose();
						}
					}
				}
			}
		}
		var bgra = this.get_image().getPixelData();
		var transColor = ((ss.isValue(gfxExtension) && gfxExtension.get_$transparency()) ? gfxExtension.get_$transparentColor() : -1);
		var srcIndex = 0;
		var right = imgDesc.get_$left() + imgDesc.get_$width();
		var bottom = imgDesc.get_$top() + imgDesc.get_$height();
		for (var y = imgDesc.get_$top(); y < bottom; y++) {
			for (var x = imgDesc.get_$left(); x < right; x++, srcIndex++) {
				var palIndex = pixels.get_item(srcIndex);
				if (palIndex !== transColor) {
					var c = colorTable.get_$entries()[palIndex];
					bgra.data[y * bgra.stride + x * 4 + 0] = c.get_r();
					bgra.data[y * bgra.stride + x * 4 + 1] = c.get_g();
					bgra.data[y * bgra.stride + x * 4 + 2] = c.get_b();
					bgra.data[y * bgra.stride + x * 4 + 3] = c.get_a();
				}
			}
		}
		bgra.setPixelData(this.get_image());
	};
	$Franca_Gif_GifFrame.__typeName = 'Franca.Gif.GifFrame';
	global.Franca.Gif.GifFrame = $Franca_Gif_GifFrame;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifImage
	var $Franca_Gif_GifImage = function() {
	};
	$Franca_Gif_GifImage.__typeName = 'Franca.Gif.GifImage';
	$Franca_Gif_GifImage.read$1 = function(stream) {
		var reader = new Franca.BinDataStreamReader(stream, 0);
		try {
			return $Franca_Gif_GifImage.read(reader);
		}
		finally {
			if (ss.isValue(reader)) {
				reader.dispose();
			}
		}
	};
	$Franca_Gif_GifImage.read = function(reader) {
		var gif = new $Franca_Gif_GifData();
		$Franca_Gif_GifImage.read$2(reader, gif);
		return gif;
	};
	$Franca_Gif_GifImage.read$2 = function(reader, gif) {
		var header = Franca.Text.UTF8.fromBinaryData(reader.readData(6), false);
		if (header !== 'GIF87a' && header !== 'GIF89a') {
			throw new $Franca_Gif_GifFormatException.$ctor1('File was not recognizable as a gif file');
		}
		var canvasWidth = reader.readUInt16();
		var canvasHeight = reader.readUInt16();
		var flags = reader.readByte();
		reader.readByte();
		// bg color
		reader.readByte();
		// aspect ratio
		var globalColorTable = null;
		if ((flags & $Franca_Gif_GifImage.hasColorTable) === $Franca_Gif_GifImage.hasColorTable) {
			var colorTableSize = ss.Int32.trunc(Math.pow(2, (flags & 7) + 1));
			globalColorTable = new Array(colorTableSize);
			for (var i = 0; i < globalColorTable.length; i++) {
				globalColorTable[i] = new Franca.Color.$ctor5(reader.readByte(), reader.readByte(), reader.readByte(), 255);
			}
		}
		var id;
		while ((id = reader.readByte()) !== $Franca_Gif_GifImage.trailerByte) {
			if (id === $Franca_Gif_GifImage.seperator) {
				// image data
				var left = reader.readUInt16();
				var top = reader.readUInt16();
				var width = reader.readUInt16();
				var height = reader.readUInt16();
				var imgFlags = reader.readByte();
				var colorTable = null;
				if ((imgFlags & $Franca_Gif_GifImage.hasColorTable) === $Franca_Gif_GifImage.hasColorTable) {
					var colorTableSize1 = ss.Int32.trunc(Math.pow(2, (imgFlags & 7) + 1));
					colorTable = new Array(colorTableSize1);
					for (var i1 = 0; i1 < colorTable.length; i1++) {
						colorTable[i1] = new Franca.Color.$ctor5(reader.readByte(), reader.readByte(), reader.readByte(), 255);
					}
					if (ss.isNullOrUndefined(globalColorTable)) {
						globalColorTable = colorTable;
					}
				}
				// get lzw image data
				var pixels;
				try {
					pixels = $Franca_Gif_GifLZW.inflate(reader, width, height);
				}
				catch ($t1) {
					$t1 = ss.Exception.wrap($t1);
					if (ss.isInstanceOfType($t1, $Franca_Gif_GifFormatException)) {
						throw $t1;
					}
					else {
						var e = $t1;
						throw new $Franca_Gif_GifFormatException.$ctor1('An error occurred while inflating gif LZW data: ' + e.get_message());
					}
				}
				// deinterlace and combine with canvas (if necessary)
				if ((imgFlags & $Franca_Gif_GifImage.isInterlaced) === $Franca_Gif_GifImage.isInterlaced) {
					pixels = $Franca_Gif_GifImage.$deinterlace(pixels, width, height);
				}
				if (left > 0 || top > 0 || width !== canvasWidth || height !== canvasHeight) {
					var finalWidth = Math.max(left + width, canvasWidth);
					var finalHeight = Math.max(top + height, canvasHeight);
					var canvas = new Franca.BinaryData.$ctor5(finalWidth * finalHeight);
					for (var y = 0; y < height; y++) {
						Franca.BinaryData.blockCopy(pixels, y * width, canvas, (top + y) * width + left, width);
					}
					pixels = canvas;
				}
				$Franca_Gif_GifData.create(gif, canvasWidth, canvasHeight, colorTable || globalColorTable, pixels);
				return;
			}
			else {
				// extension
				reader.readByte();
				// type
				// skip extension
				var blockSize = reader.readByte();
				while (blockSize !== 0) {
					if (reader.get_stream().get_canSeek()) {
						reader.get_stream().seek(blockSize, 1);
					}
					else {
						reader.readData(blockSize);
					}
					blockSize = reader.readByte();
				}
			}
		}
		throw new $Franca_Gif_GifFormatException.$ctor1('No image data found in gif file');
	};
	$Franca_Gif_GifImage.$deinterlace = function(interlaced, width, height) {
		var pixels = new Franca.BinaryData.$ctor5(interlaced.get_length());
		var y, step;
		var index = 0;
		for (var pass = 0; pass < 4; pass++) {
			if (pass === 0 || pass === 1) {
				y = ((pass === 0) ? 0 : 4);
				step = 8;
			}
			else if (pass === 2) {
				y = 2;
				step = 4;
			}
			else {
				y = 1;
				step = 2;
			}
			while (y < height) {
				Franca.BinaryData.blockCopy(interlaced, index, pixels, y * width, width);
				y += step;
				index += width;
			}
		}
		return pixels;
	};
	global.Franca.Gif.GifImage = $Franca_Gif_GifImage;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifInstance
	var $Franca_Gif_GifInstance = function(gif, time) {
		this.$frameTime = ss.getDefaultValue(ss.TimeSpan);
		this.$lastTime = ss.getDefaultValue(ss.TimeSpan);
		this.$frameIndex = 0;
		this.$time = null;
		this.$1$StateField = 0;
		this.$1$ParentField = null;
		this.set_parent(gif);
		this.set_state(0);
		this.$time = time || ss.mkdel(this, this.$platformTime);
	};
	$Franca_Gif_GifInstance.__typeName = 'Franca.Gif.GifInstance';
	global.Franca.Gif.GifInstance = $Franca_Gif_GifInstance;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifLZW
	var $Franca_Gif_GifLZW = function() {
	};
	$Franca_Gif_GifLZW.__typeName = 'Franca.Gif.GifLZW';
	$Franca_Gif_GifLZW.inflate = function(reader, width, height) {
		var dataSize = reader.readByte();
		if (dataSize < 2 || dataSize > 8) {
			throw new ss.InvalidOperationException('Gif data LZW code size was less than 2 or greater than 8');
		}
		// copy blocks into buffer
		var buffer;
		{
			var writer = new Franca.BinDataStreamWriter(new Franca.BinaryStream(), 0);
			try {
				var blockSize;
				do {
					blockSize = reader.readByte();
					if (blockSize > 0) {
						writer.write(reader.readData(blockSize));
					}
				} while (blockSize > 0);
				writer.get_stream().flush();
				buffer = ss.cast(writer.get_stream(), Franca.BinaryStream).toBinary();
			}
			finally {
				if (ss.isValue(writer)) {
					writer.dispose();
				}
			}
		}
		var clear = 1 << dataSize;
		var endOfInfo = clear + 1;
		var available = clear + 2;
		var oldCode = -1;
		var codeSize = dataSize + 1;
		var codeMask = (1 << codeSize) - 1;
		var prefix = new Int16Array(4096);
		var suffix = new Uint8Array(4096);
		var pixelStack = new Uint8Array(4097);
		var code;
		for (code = 0; code < clear; code++) {
			prefix[code] = 0;
			suffix[code] = code;
		}
		var first, top, pi, inCode;
		first = top = pi = 0;
		var pixelCount = width * height;
		var pixels = new Franca.BinaryData.$ctor5(pixelCount);
		var bit = { $: 0 };
		{
			var bufferReader = new Franca.BinDataStreamReader(new Franca.BinaryStream.$ctor1(buffer), 0);
			try {
				var b = { $: bufferReader.readByte() };
				for (var i = 0; i < pixelCount;) {
					if (top === 0) {
						//  Get the next code
						code = $Franca_Gif_GifLZW.$readBits(bufferReader, codeSize, bit, b);
						//  Interpret the code
						if (code > available || code === endOfInfo) {
							break;
						}
						if (code === clear) {
							//  Reset decoder.
							codeSize = dataSize + 1;
							codeMask = (1 << codeSize) - 1;
							available = clear + 2;
							oldCode = -1;
							continue;
						}
						if (oldCode === -1) {
							pixelStack[top++] = suffix[code];
							oldCode = code;
							first = code;
							continue;
						}
						inCode = code;
						if (code === available) {
							pixelStack[top++] = first;
							// No need for Cast. here cause ByteArray does the cast
							code = oldCode;
						}
						while (code > clear) {
							pixelStack[top++] = suffix[code];
							code = prefix[code];
						}
						first = suffix[code] & 255;
						//  Add a new string to the string table,
						if (available >= $Franca_Gif_GifLZW.$stackSize) {
							break;
						}
						pixelStack[top++] = first;
						// No need for Cast. here cause ByteArray does the cast
						prefix[available] = oldCode;
						// No need for Cast. here cause ShortArray does the cast
						suffix[available] = first;
						// No need for Cast. here cause ByteArray does the cast
						available++;
						if ((available & codeMask) === 0 && available < $Franca_Gif_GifLZW.$stackSize) {
							codeSize++;
							codeMask += available;
						}
						oldCode = inCode;
					}
					//  Pop a pixel off the pixel stack.
					top--;
					pixels.set_item(pi++, pixelStack[top]);
					i++;
				}
			}
			finally {
				if (ss.isValue(bufferReader)) {
					bufferReader.dispose();
				}
			}
		}
		for (var i1 = pi; i1 < pixelCount; i1++) {
			pixels.set_item(i1, 0);
			// clear missing pixels
		}
		return pixels;
	};
	$Franca_Gif_GifLZW.$readBits = function(reader, bits, curBit, b) {
		var ret = 0;
		for (var i = 0; i < bits; i++) {
			ret |= $Franca_Gif_GifLZW.$readBit(reader, curBit, i, b);
		}
		return ret;
	};
	$Franca_Gif_GifLZW.$readBit = function(reader, curBit, n, b) {
		var ret = (b.$ & 1 << curBit.$) >> curBit.$ << n;
		curBit.$ = (curBit.$ + 1) % 8;
		if (curBit.$ === 0) {
			b.$ = reader.readByte();
		}
		return ret;
	};
	global.Franca.Gif.GifLZW = $Franca_Gif_GifLZW;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.GifState
	var $Franca_Gif_GifState = function() {
	};
	$Franca_Gif_GifState.__typeName = 'Franca.Gif.GifState';
	global.Franca.Gif.GifState = $Franca_Gif_GifState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.TextureGif
	var $Franca_Gif_TextureGif = function() {
		this.$premultiplyAlpha = false;
		this.$mipmap = false;
		this.$textures = null;
		this.$fileRes = null;
		this.$disposeLoadedCanvas = false;
		this.$2$LoadedField = false;
		this.$2$NameField = null;
		this.$2$OnLoadField = null;
		this.$disposed$1 = false;
		$Franca_Gif_AnimatedGif.call(this);
		this.$textures = [];
	};
	$Franca_Gif_TextureGif.__typeName = 'Franca.Gif.TextureGif';
	$Franca_Gif_TextureGif.$ctor1 = function(data, premultiplyAlpha, mipmapped, disposeCanvas) {
		this.$premultiplyAlpha = false;
		this.$mipmap = false;
		this.$textures = null;
		this.$fileRes = null;
		this.$disposeLoadedCanvas = false;
		this.$2$LoadedField = false;
		this.$2$NameField = null;
		this.$2$OnLoadField = null;
		this.$disposed$1 = false;
		$Franca_Gif_AnimatedGif.$ctor1.call(this, data);
		this.$textures = [];
		var $t1 = this.get_frames();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var frame = $t1[$t2];
			var tex = new $Franca_Texture.$ctor3(frame.get_image(), premultiplyAlpha, mipmapped, disposeCanvas);
			this.$textures.push(tex);
		}
		this.set_loaded(true);
	};
	global.Franca.Gif.TextureGif = $Franca_Gif_TextureGif;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gif.TextureGifInstance
	var $Franca_Gif_TextureGifInstance = function(gif, time) {
		this.$tg = null;
		$Franca_Gif_GifInstance.call(this, gif, time);
		this.$tg = gif;
	};
	$Franca_Gif_TextureGifInstance.__typeName = 'Franca.Gif.TextureGifInstance';
	$Franca_Gif_TextureGifInstance.op_Implicit = function(gif) {
		return gif.get_texture();
	};
	global.Franca.Gif.TextureGifInstance = $Franca_Gif_TextureGifInstance;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.AutoSizing
	var $Franca_Gui_AutoSizing = function() {
	};
	$Franca_Gui_AutoSizing.__typeName = 'Franca.Gui.AutoSizing';
	global.Franca.Gui.AutoSizing = $Franca_Gui_AutoSizing;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.CaretPosition
	var $Franca_Gui_CaretPosition = function() {
		this.index = 0;
		this.position = ss.getDefaultValue(Franca.Vector2);
		this.line = null;
	};
	$Franca_Gui_CaretPosition.__typeName = 'Franca.Gui.CaretPosition';
	$Franca_Gui_CaretPosition.$ctor1 = function(index, pos, line) {
		this.index = 0;
		this.position = ss.getDefaultValue(Franca.Vector2);
		this.line = null;
		this.index = index;
		this.position = pos;
		this.line = line;
	};
	$Franca_Gui_CaretPosition.getDefaultValue = function() {
		return new $Franca_Gui_CaretPosition();
	};
	global.Franca.Gui.CaretPosition = $Franca_Gui_CaretPosition;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.ChildCollection
	var $Franca_Gui_ChildCollection = function() {
		this.$children = null;
		this.$children = [];
	};
	$Franca_Gui_ChildCollection.__typeName = 'Franca.Gui.ChildCollection';
	global.Franca.Gui.ChildCollection = $Franca_Gui_ChildCollection;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.FlowEvent
	var $Franca_Gui_FlowEvent = function() {
		this.$1$PreventDefaultField = false;
	};
	$Franca_Gui_FlowEvent.__typeName = 'Franca.Gui.FlowEvent';
	global.Franca.Gui.FlowEvent = $Franca_Gui_FlowEvent;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.FontCollection
	var $Franca_Gui_FontCollection = function(plain, bold, italic, boldItalic) {
		this.$1$PlainField = null;
		this.$1$BoldField = null;
		this.$1$ItalicField = null;
		this.$1$BoldItalicField = null;
		this.$plainSF = null;
		this.$boldSF = null;
		this.$italicSF = null;
		this.$boldItalicSF = null;
		this.$loaded = false;
		this.set_plain(plain);
		this.set_bold(bold);
		this.set_italic(italic);
		this.set_boldItalic(boldItalic);
		this.$loaded = true;
	};
	$Franca_Gui_FontCollection.__typeName = 'Franca.Gui.FontCollection';
	$Franca_Gui_FontCollection.$ctor1 = function(plain, bold, italic, boldItalic) {
		this.$1$PlainField = null;
		this.$1$BoldField = null;
		this.$1$ItalicField = null;
		this.$1$BoldItalicField = null;
		this.$plainSF = null;
		this.$boldSF = null;
		this.$italicSF = null;
		this.$boldItalicSF = null;
		this.$loaded = false;
		this.$plainSF = plain;
		this.$boldSF = bold;
		this.$italicSF = italic;
		this.$boldItalicSF = boldItalic;
		this.$onLoad();
	};
	global.Franca.Gui.FontCollection = $Franca_Gui_FontCollection;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.GuiEntryPointAttribute
	var $Franca_Gui_GuiEntryPointAttribute = function() {
	};
	$Franca_Gui_GuiEntryPointAttribute.__typeName = 'Franca.Gui.GuiEntryPointAttribute';
	global.Franca.Gui.GuiEntryPointAttribute = $Franca_Gui_GuiEntryPointAttribute;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.GuiEvent
	var $Franca_Gui_GuiEvent = function(e) {
		this.$2$XField = 0;
		this.$2$YField = 0;
		this.$2$ButtonField = null;
		this.$2$KeyField = null;
		this.$2$PreventDefaultField = false;
		$Franca_InputEvent.call(this, e.gameTime, e.device, e.info, e.mode, e.mouse, e.shift, e.control, e.alt);
	};
	$Franca_Gui_GuiEvent.__typeName = 'Franca.Gui.GuiEvent';
	$Franca_Gui_GuiEvent.$ctor1 = function(gameTime, device, mouse, shift, control, alt) {
		this.$2$XField = 0;
		this.$2$YField = 0;
		this.$2$ButtonField = null;
		this.$2$KeyField = null;
		this.$2$PreventDefaultField = false;
		$Franca_InputEvent.call(this, gameTime, device, 0, 0, mouse, shift, control, alt);
	};
	global.Franca.Gui.GuiEvent = $Franca_Gui_GuiEvent;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.GuiInput
	var $Franca_Gui_GuiInput = function(manager, input) {
		this.$manager = null;
		this.$input = null;
		this.$lastZones = null;
		this.$zones = null;
		this.$keyboardConsumers = null;
		this.$focusZone = null;
		this.$lastMouseOver = ss.getDefaultValue($Franca_Gui_InputZone);
		this.$mouseLock = null;
		this.$clearMouseLock = false;
		this.$events = null;
		this.$keyEvents = null;
		this.$shift = false;
		this.$control = false;
		this.$alt = false;
		this.$manager = manager;
		this.$input = input;
		this.$zones = [];
		this.$lastZones = [];
		this.$events = [];
		this.$keyEvents = [];
		this.$keyboardConsumers = [];
		input.add_onKeyDown(ss.mkdel(this, this.$onKey));
		input.add_onKeyUp(ss.mkdel(this, this.$onKey));
		input.add_onCopy(ss.mkdel(this, this.$onCopy));
		input.add_onNativeClick(ss.mkdel(this, this.$onNativeClick));
	};
	$Franca_Gui_GuiInput.__typeName = 'Franca.Gui.GuiInput';
	global.Franca.Gui.GuiInput = $Franca_Gui_GuiInput;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.GuiManager
	var $Franca_Gui_GuiManager = function() {
	};
	$Franca_Gui_GuiManager.__typeName = 'Franca.Gui.GuiManager';
	global.Franca.Gui.GuiManager = $Franca_Gui_GuiManager;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.GuiManager
	var $Franca_Gui_GuiManager$2 = function(TIGui, TIGameContext) {
		var $type = function(dynamic, context, guiDirectory, guiNamespace, assemblyReferences, namespaces, entryFunc, guiEntryType) {
			this.isDynamic = false;
			this.$gui = null;
			$Franca_Gui_GuiManager.call(this);
			if (ss.staticEquals(entryFunc, null)) {
				if (dynamic) {
					throw new $Franca_Gui_GuiManagerException.$ctor1('GuiManager was set to dynamic and did not have a valid entryFunc, even though dynamic GUI is not supported on JS');
				}
				else {
					throw new $Franca_Gui_GuiManagerException.$ctor1('GuiManager did not have a valid entryFunc');
				}
			}
			this.isDynamic = false;
			this.$setStaticGuiAssembly(guiEntryType);
			this.$gui = entryFunc(context);
		};
		ss.registerGenericClassInstance($type, $Franca_Gui_GuiManager$2, [TIGui, TIGameContext], {
			$setStaticGuiAssembly: function(type) {
				if (ss.isValue(type)) {
					$Franca_Gui_Widget.set_guiAssembly(ss.getTypeAssembly(type));
					$Franca_Gui_FlowLang_FlowState.set_assembly($Franca_Gui_Widget.get_guiAssembly());
					return;
				}
				var assemblies = [];
				var $t1 = ss.getEnumerator(ss.getAssemblies());
				try {
					while ($t1.moveNext()) {
						var a = $t1.current();
						var $t2 = ss.getEnumerator(System.Reflection.ReflectionExtensions.definedTypes(a));
						try {
							while ($t2.moveNext()) {
								var t = $t2.current();
								var attr = System.Reflection.ReflectionExtensions.getCustomAttribute($Franca_Gui_GuiEntryPointAttribute).call(null, t, false);
								if (ss.isValue(attr)) {
									assemblies.push(a);
								}
							}
						}
						finally {
							$t2.dispose();
						}
					}
				}
				finally {
					$t1.dispose();
				}
				if (assemblies.length === 1) {
					$Franca_Gui_Widget.set_guiAssembly(assemblies[0]);
					$Franca_Gui_FlowLang_FlowState.set_assembly($Franca_Gui_Widget.get_guiAssembly());
					return;
				}
				if (assemblies.length < 1) {
					throw new Franca.TypeReflectionException.$ctor1('Cannot determine gui assembly in GuiManager run in statically compiled mode: no type with GuiEntryPoint attribute was found. To fix this pass the guiEntryType parameter when constructing the GuiManager.');
				}
				else {
					throw new Franca.TypeReflectionException.$ctor1('Cannot determine gui assembly in GuiManager run in statically compiled mode: types in multiple assemblies with GuiEntryPoint attribute were found. To fix this pass the guiEntryType parameter when constructing the GuiManager.');
				}
			},
			update: function(time, elapsed) {
				if (this.isDynamic) {
					throw new $Franca_Gui_GuiManagerException.$ctor1('Dynamic Update in GuiManager on JS');
				}
				else if (ss.isValue(this.$gui)) {
					ss.cast(this.$gui, $Franca_IGameComponent).update(time, elapsed);
				}
			},
			render: function(time, elapsed) {
				if (this.isDynamic) {
					throw new $Franca_Gui_GuiManagerException.$ctor1('Dynamic Render in GuiManager on JS');
				}
				else if (ss.isValue(this.$gui)) {
					ss.cast(this.$gui, $Franca_IGameComponent).render(time, elapsed);
				}
			},
			dispose: function() {
				if (this.isDynamic) {
					throw new $Franca_Gui_GuiManagerException.$ctor1('Dynamic Dispose in GuiManager on JS');
				}
				else if (ss.isValue(this.$gui)) {
					this.$gui.dispose();
				}
			},
			get_instance: function() {
				if (this.isDynamic) {
					throw new $Franca_Gui_GuiManagerException.$ctor1('Dynamic Instance property in GuiManager on JS');
				}
				else {
					return this.$gui;
				}
			},
			get_guiAssembly: function() {
				var inst = this.get_instance();
				if (ss.isValue(inst)) {
					return ss.getTypeAssembly(ss.getInstanceType(inst));
				}
				return null;
			},
			get_interfaceAssemblies: function() {
				return new ss.IteratorBlockEnumerable(function() {
					return (function() {
						var $result, $state = 0, assA, assB;
						return new ss.IteratorBlockEnumerator(function() {
							$sm1:
							for (;;) {
								switch ($state) {
									case 0: {
										$state = -1;
										assA = ss.getTypeAssembly(TIGui);
										assB = ss.getTypeAssembly(TIGameContext);
										if (!ss.referenceEquals(assA, assB)) {
											$result = assA;
											$state = 1;
											return true;
										}
										else {
											$result = assA;
											$state = -1;
											return true;
										}
									}
									case 1: {
										$state = -1;
										$result = assB;
										$state = -1;
										return true;
									}
									default: {
										break $sm1;
									}
								}
							}
							return false;
						}, function() {
							return $result;
						}, null, this);
					}).call(this);
				}, this);
			},
			get_assemblies: function() {
				return new ss.IteratorBlockEnumerable(function() {
					return (function() {
						var $result, $state = 0, $t1, ass;
						var $finally = function() {
							$t1.dispose();
						};
						return new ss.IteratorBlockEnumerator(function() {
							$sm1:
							for (;;) {
								switch ($state) {
									case 0: {
										$state = -1;
										$result = this.get_guiAssembly();
										$state = 1;
										return true;
									}
									case 1: {
										$state = -1;
										$t1 = ss.getEnumerator(this.get_interfaceAssemblies());
										$state = 4;
										continue $sm1;
									}
									case 4: {
										$state = 2;
										if (!$t1.moveNext()) {
											$state = 3;
											continue $sm1;
										}
										ass = $t1.current();
										$result = ass;
										$state = 4;
										return true;
									}
									case 3: {
										$state = -1;
										$finally.call(this);
										$state = -1;
										break $sm1;
									}
									default: {
										break $sm1;
									}
								}
							}
							return false;
						}, function() {
							return $result;
						}, function() {
							try {
								switch ($state) {
									case 2:
									case 3:
									case 4: {
										try {
											break;
										}
										finally {
											$finally.call(this);
										}
									}
								}
							}
							finally {
								$state = -1;
							}
						}, this);
					}).call(this);
				}, this);
			},
			get_onCompileError: function() {
				return null;
			},
			set_onCompileError: function(value) {
			}
		}, function() {
			return $Franca_Gui_GuiManager;
		}, function() {
			return [ss.IDisposable];
		});
		var $t1 = [];
		$t1.push('FrancaDotNet.dll');
		$t1.push('FrancaCommon.dll');
		$t1.push('System.Drawing.dll');
		$t1.push('System.Core.dll');
		$t1.push('System.dll');
		$type.defaultReferences = $t1;
		var $t1 = [];
		$t1.push('Franca');
		$t1.push('Franca.Gui');
		$type.defaultNamespaces = $t1;
		return $type;
	};
	$Franca_Gui_GuiManager$2.__typeName = 'Franca.Gui.GuiManager$2';
	ss.initGenericClass($Franca_Gui_GuiManager$2, $asm, 2);
	global.Franca.Gui.GuiManager$2 = $Franca_Gui_GuiManager$2;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.GuiManagerException
	var $Franca_Gui_GuiManagerException = function() {
		ss.Exception.call(this);
	};
	$Franca_Gui_GuiManagerException.__typeName = 'Franca.Gui.GuiManagerException';
	$Franca_Gui_GuiManagerException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_Gui_GuiManagerException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.Gui.GuiManagerException = $Franca_Gui_GuiManagerException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.ICodeGeneratedWidget
	var $Franca_Gui_ICodeGeneratedWidget = function() {
	};
	$Franca_Gui_ICodeGeneratedWidget.__typeName = 'Franca.Gui.ICodeGeneratedWidget';
	global.Franca.Gui.ICodeGeneratedWidget = $Franca_Gui_ICodeGeneratedWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.IFont
	var $Franca_Gui_IFont = function() {
	};
	$Franca_Gui_IFont.__typeName = 'Franca.Gui.IFont';
	global.Franca.Gui.IFont = $Franca_Gui_IFont;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.IGuiContext
	var $Franca_Gui_IGuiContext = function() {
	};
	$Franca_Gui_IGuiContext.__typeName = 'Franca.Gui.IGuiContext';
	global.Franca.Gui.IGuiContext = $Franca_Gui_IGuiContext;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.Image
	var $Franca_Gui_Image = function(parent) {
		this.$texture = null;
		this.$file = null;
		this.$2$FitField = ss.getDefaultValue(ss.makeGenericType(Franca.ImplicitEnum$1, [$Franca_Gui_ImageFit]));
		$Franca_Gui_Widget.call(this, parent);
	};
	$Franca_Gui_Image.__typeName = 'Franca.Gui.Image';
	global.Franca.Gui.Image = $Franca_Gui_Image;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.ImageFit
	var $Franca_Gui_ImageFit = function() {
	};
	$Franca_Gui_ImageFit.__typeName = 'Franca.Gui.ImageFit';
	global.Franca.Gui.ImageFit = $Franca_Gui_ImageFit;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.InputZone
	var $Franca_Gui_InputZone = function() {
		this.source = null;
		this.rectangle = ss.getDefaultValue(Franca.RectangleF);
		this.id = ss.getDefaultValue(Franca.IncrementalID);
		this.canFocus = false;
		this.viewPosition = ss.getDefaultValue(Franca.Vector2);
		this.visible = false;
		this.onClick = null;
		this.onRightClick = null;
		this.onMouseMove = null;
		this.onMouseDown = null;
		this.onMouseUp = null;
		this.onMouseHoldDown = null;
		this.onMouseHoldUp = null;
		this.onCaptureKey = null;
		this.onKeyDown = null;
		this.onKeyUp = null;
		this.onKeyHoldDown = null;
		this.onFocus = null;
		this.onCopy = null;
		this.onNativeClick = null;
	};
	$Franca_Gui_InputZone.__typeName = 'Franca.Gui.InputZone';
	$Franca_Gui_InputZone.$ctor1 = function(source, rectangle, id, viewPosition, visible, onClick, onRightClick, onMouseMove, onMouseDown, onMouseUp, onMouseHoldDown, onMouseHoldUp, onCaptureKey, onKeyDown, onKeyUp, onKeyHoldDown, canFocus, onFocus, onCopy, onNativeClick) {
		this.source = null;
		this.rectangle = ss.getDefaultValue(Franca.RectangleF);
		this.id = ss.getDefaultValue(Franca.IncrementalID);
		this.canFocus = false;
		this.viewPosition = ss.getDefaultValue(Franca.Vector2);
		this.visible = false;
		this.onClick = null;
		this.onRightClick = null;
		this.onMouseMove = null;
		this.onMouseDown = null;
		this.onMouseUp = null;
		this.onMouseHoldDown = null;
		this.onMouseHoldUp = null;
		this.onCaptureKey = null;
		this.onKeyDown = null;
		this.onKeyUp = null;
		this.onKeyHoldDown = null;
		this.onFocus = null;
		this.onCopy = null;
		this.onNativeClick = null;
		this.source = source;
		this.rectangle = rectangle;
		this.id = id;
		this.viewPosition = viewPosition;
		this.visible = visible;
		this.onClick = onClick;
		this.onRightClick = onRightClick;
		this.onMouseMove = onMouseMove;
		this.onMouseDown = onMouseDown;
		this.onMouseUp = onMouseUp;
		this.onMouseHoldDown = onMouseHoldDown;
		this.onMouseHoldUp = onMouseHoldUp;
		this.onCaptureKey = onCaptureKey;
		this.onKeyDown = onKeyDown;
		this.onKeyUp = onKeyUp;
		this.onKeyHoldDown = onKeyHoldDown;
		//OnKeyHoldUp = onKeyHoldUp;
		this.canFocus = canFocus;
		this.onFocus = onFocus;
		this.onCopy = onCopy;
		this.onNativeClick = onNativeClick;
	};
	$Franca_Gui_InputZone.getDefaultValue = function() {
		return new $Franca_Gui_InputZone();
	};
	$Franca_Gui_InputZone.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_Gui_InputZone.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.Gui.InputZone = $Franca_Gui_InputZone;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.ITextSelectionSource
	var $Franca_Gui_ITextSelectionSource = function() {
	};
	$Franca_Gui_ITextSelectionSource.__typeName = 'Franca.Gui.ITextSelectionSource';
	global.Franca.Gui.ITextSelectionSource = $Franca_Gui_ITextSelectionSource;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.IWidget
	var $Franca_Gui_IWidget = function() {
	};
	$Franca_Gui_IWidget.__typeName = 'Franca.Gui.IWidget';
	global.Franca.Gui.IWidget = $Franca_Gui_IWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.IWidgetManager
	var $Franca_Gui_IWidgetManager = function() {
	};
	$Franca_Gui_IWidgetManager.__typeName = 'Franca.Gui.IWidgetManager';
	global.Franca.Gui.IWidgetManager = $Franca_Gui_IWidgetManager;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.KeyCaptureEvent
	var $Franca_Gui_KeyCaptureEvent = function(code, state, button) {
		this.$1$KeyCodeField = 0;
		this.$1$StateField = 0;
		this.$1$ButtonField = null;
		this.$1$PhysicalKeyField = 0;
		this.$1$VirtualKeyField = 0;
		this.set_keyCode(code);
		this.set_button(button);
		this.set_state(state);
		this.set_physicalKey($Franca_KeyboardButton.keyFromKeyCode$1(button.code, true));
		this.set_virtualKey($Franca_KeyboardButton.keyFromKeyCode$1(button.code, false));
	};
	$Franca_Gui_KeyCaptureEvent.__typeName = 'Franca.Gui.KeyCaptureEvent';
	global.Franca.Gui.KeyCaptureEvent = $Franca_Gui_KeyCaptureEvent;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.Label
	var $Franca_Gui_Label = function(parent) {
		this.$topColor = Franca.Color.white;
		this.$bottomColor = Franca.Color.white;
		this.$strokeTopColor = Franca.Color.black;
		this.$strokeBottomColor = Franca.Color.black;
		this.$font = null;
		this.$fontName = null;
		this.$stroke = false;
		this.$autoSize = ss.makeGenericType(Franca.ImplicitEnum$1, [$Franca_Gui_AutoSizing]).op_Implicit$2(3);
		this.$_wrapped = true;
		this.$textAlign = Franca.TextAlign.get_topLeft();
		this.wrapped = null;
		this.$_selection = null;
		this.$canSelect = false;
		this.$selectionColor = null;
		this.$multiLine = true;
		this.selecting = false;
		this.$2$PaddingField = ss.getDefaultValue($Franca_Gui_Padding);
		this.$2$KerningField = false;
		this.$2$VisibleTextStartField = 0;
		this.$2$VisibleTextLengthField = 0;
		$Franca_Gui_Widget.call(this, parent);
		this.set_canFocus(true);
		this.set_canCaptureKeys(true);
		this.wrapped = new $Franca_Gui_ScreenString(null, 14, null, (this.$autoSize.value === 0 || this.$autoSize.value === 2) && this.$multiLine, 1, this.get_kerning(), true, null);
		this.$_selection = new $Franca_Gui_TextSelection(this.wrapped);
		this.get_selection$1().add_onChange(ss.mkdel(this, this.$_SelectionChanged));
		this.set_visibleTextLength(-1);
	};
	$Franca_Gui_Label.__typeName = 'Franca.Gui.Label';
	$Franca_Gui_Label.get_defaultSelectionColor = function() {
		return $Franca_Gui_Label.$2$DefaultSelectionColorField;
	};
	$Franca_Gui_Label.set_defaultSelectionColor = function(value) {
		$Franca_Gui_Label.$2$DefaultSelectionColorField = value;
	};
	global.Franca.Gui.Label = $Franca_Gui_Label;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.MouseLock
	var $Franca_Gui_MouseLock = function(zone) {
		this.zone = ss.getDefaultValue($Franca_Gui_InputZone);
		this.zone = zone;
	};
	$Franca_Gui_MouseLock.__typeName = 'Franca.Gui.MouseLock';
	global.Franca.Gui.MouseLock = $Franca_Gui_MouseLock;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.MultiFont
	var $Franca_Gui_MultiFont = function(manager, fonts) {
		$Franca_Gui_MultiFont.$ctor1.call(this, manager, fonts);
	};
	$Franca_Gui_MultiFont.__typeName = 'Franca.Gui.MultiFont';
	$Franca_Gui_MultiFont.$ctor1 = function(manager, fonts) {
		this.$fonts = null;
		this.$defaultFont = null;
		this.$manager = null;
		this.$glyphs = null;
		this.$fonts = Enumerable.from(fonts).toArray();
		this.$manager = manager;
		this.$defaultFont = this.$fonts[0];
		//glyphs = new Dictionary<double, Dictionary<KeyValuePair<char, int>, SpriteFontGlyph>>();
		this.$glyphs = new (ss.makeGenericType(ss.Dictionary$2, [Number, ss.makeGenericType(ss.Dictionary$2, [ss.Int32, ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_SpriteFontGlyph])])]))();
	};
	global.Franca.Gui.MultiFont = $Franca_Gui_MultiFont;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.Padding
	var $Franca_Gui_Padding = function() {
		this.left = 0;
		this.top = 0;
		this.right = 0;
		this.bottom = 0;
	};
	$Franca_Gui_Padding.__typeName = 'Franca.Gui.Padding';
	$Franca_Gui_Padding.$ctor2 = function(padding) {
		$Franca_Gui_Padding.$ctor4.call(this, padding, padding, padding, padding);
	};
	$Franca_Gui_Padding.$ctor3 = function(horizontal, vertical) {
		$Franca_Gui_Padding.$ctor4.call(this, horizontal, vertical, horizontal, vertical);
	};
	$Franca_Gui_Padding.$ctor4 = function(left, top, right, bottom) {
		this.left = 0;
		this.top = 0;
		this.right = 0;
		this.bottom = 0;
		this.left = left;
		this.top = top;
		this.right = right;
		this.bottom = bottom;
	};
	$Franca_Gui_Padding.$ctor1 = function(reader) {
		this.left = 0;
		this.top = 0;
		this.right = 0;
		this.bottom = 0;
		this.left = 0;
		this.top = 0;
		this.right = 0;
		this.bottom = 0;
		if (!reader.isObject()) {
			throw new Franca.Serialization.Streaming.StreamingJsonTempException();
		}
		var $t1 = reader.readObject().getEnumerator();
		try {
			while ($t1.moveNext()) {
				var _objIter1 = $t1.current();
				switch (_objIter1.key) {
					default: {
						throw new Franca.Serialization.Streaming.StreamingJsonTempException();
					}
					case 'left': {
						{
							if (!reader.isNumber()) {
								throw new Franca.Serialization.Streaming.StreamingJsonTempException();
							}
							this.left = reader.readNumber(false);
						}
						break;
					}
					case 'top': {
						{
							if (!reader.isNumber()) {
								throw new Franca.Serialization.Streaming.StreamingJsonTempException();
							}
							this.top = reader.readNumber(false);
						}
						break;
					}
					case 'right': {
						{
							if (!reader.isNumber()) {
								throw new Franca.Serialization.Streaming.StreamingJsonTempException();
							}
							this.right = reader.readNumber(false);
						}
						break;
					}
					case 'bottom': {
						{
							if (!reader.isNumber()) {
								throw new Franca.Serialization.Streaming.StreamingJsonTempException();
							}
							this.bottom = reader.readNumber(false);
						}
						break;
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
	};
	$Franca_Gui_Padding.getDefaultValue = function() {
		return new $Franca_Gui_Padding();
	};
	$Franca_Gui_Padding.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_Gui_Padding.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	$Franca_Gui_Padding.op_Implicit = function(padding) {
		return new $Franca_Gui_Padding.$ctor2(padding);
	};
	$Franca_Gui_Padding.op_Implicit$4 = function(padding) {
		return new $Franca_Gui_Padding.$ctor2(padding);
	};
	$Franca_Gui_Padding.op_Implicit$2 = function(padding) {
		return new $Franca_Gui_Padding.$ctor2(padding);
	};
	$Franca_Gui_Padding.op_Implicit$7 = function(padding) {
		return new $Franca_Gui_Padding.$ctor2(padding);
	};
	$Franca_Gui_Padding.op_Implicit$3 = function(padding) {
		return new $Franca_Gui_Padding.$ctor2(padding);
	};
	$Franca_Gui_Padding.op_Implicit$8 = function(padding) {
		return new $Franca_Gui_Padding.$ctor2(padding);
	};
	$Franca_Gui_Padding.op_Implicit$5 = function(padding) {
		return new $Franca_Gui_Padding.$ctor2(padding);
	};
	$Franca_Gui_Padding.op_Implicit$1 = function(padding) {
		return new $Franca_Gui_Padding.$ctor2(padding);
	};
	$Franca_Gui_Padding.op_Implicit$6 = function(str) {
		if (ss.isNullOrUndefined(str)) {
			return $Franca_Gui_Padding.get_zero();
		}
		var tokens = ss.netSplit(str, $Franca_Gui_Padding.$commaCharArr.map(function(i) {
			return String.fromCharCode(i);
		}), 5);
		if (tokens.length === 5 || tokens.length === 3 || tokens.length === 0) {
			throw new ss.FormatException("Could not parse value '" + str + "' as Padding, incorrect number of tokens");
		}
		try {
			if (tokens.length === 1) {
				var val = {};
				if (!Franca.Calc.tryParseNumber(tokens[0], val)) {
					throw new ss.FormatException("Could not parse value '" + str + "' as Padding, value was not a number");
				}
				return new $Franca_Gui_Padding.$ctor2(val.$);
			}
			else if (tokens.length === 2) {
				var h = {};
				if (!Franca.Calc.tryParseNumber(tokens[0], h)) {
					throw new ss.FormatException("Could not parse value '" + str + "' as Padding, first value was not a number");
				}
				var v = {};
				if (!Franca.Calc.tryParseNumber(tokens[1], v)) {
					throw new ss.FormatException("Could not parse value '" + str + "' as Padding, second value was not a number");
				}
				return new $Franca_Gui_Padding.$ctor3(h.$, v.$);
			}
			else if (tokens.length === 4) {
				var l = {};
				if (!Franca.Calc.tryParseNumber(tokens[0], l)) {
					throw new ss.FormatException("Could not parse value '" + str + "' as Padding, first value was not a number");
				}
				var t = {};
				if (!Franca.Calc.tryParseNumber(tokens[1], t)) {
					throw new ss.FormatException("Could not parse value '" + str + "' as Padding, second value was not a number");
				}
				var r = {};
				if (!Franca.Calc.tryParseNumber(tokens[2], r)) {
					throw new ss.FormatException("Could not parse value '" + str + "' as Padding, third value was not a number");
				}
				var b = {};
				if (!Franca.Calc.tryParseNumber(tokens[3], b)) {
					throw new ss.FormatException("Could not parse value '" + str + "' as Padding, fourth value was not a number");
				}
				return new $Franca_Gui_Padding.$ctor4(l.$, t.$, r.$, b.$);
			}
			else {
				throw new ss.FormatException("Could not parse value '" + str + "' as Padding, incorrect number of tokens");
			}
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			if (ss.isInstanceOfType(e, ss.FormatException)) {
				throw $t1;
			}
			else {
				throw new ss.FormatException("Could not parse value '" + str + "' as Padding: " + e.get_message(), e);
			}
		}
	};
	$Franca_Gui_Padding.get_zero = function() {
		return $Franca_Gui_Padding.$zero;
	};
	global.Franca.Gui.Padding = $Franca_Gui_Padding;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.RectWidget
	var $Franca_Gui_RectWidget = function(parent) {
		this.colors = null;
		$Franca_Gui_Widget.call(this, parent);
	};
	$Franca_Gui_RectWidget.__typeName = 'Franca.Gui.RectWidget';
	global.Franca.Gui.RectWidget = $Franca_Gui_RectWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.ScreenString
	var $Franca_Gui_ScreenString = function(font, size, value, wrapped, scale, kerning, allowMarkup, color) {
		this.$font = null;
		this.$height = 0;
		this.$value = null;
		this.$wrapped = false;
		this.$maxWidth = 0;
		this.$maxHeight = 0;
		this.$defaultSize = 0;
		this.$scale = 0;
		this.$kerning = false;
		this.$bold = false;
		this.$italic = false;
		this.$widestLine = 0;
		this.$allowMarkup = false;
		this.$lines = null;
		this.$changed = true;
		this.$wrapWidth = 0;
		this.$color = null;
		this.$formatting = null;
		this.$color = color;
		this.$value = ss.coalesce(value, '');
		this.$wrapped = wrapped;
		this.$font = font;
		this.$defaultSize = size;
		this.$scale = scale;
		this.$kerning = kerning;
		this.$allowMarkup = allowMarkup;
	};
	$Franca_Gui_ScreenString.__typeName = 'Franca.Gui.ScreenString';
	global.Franca.Gui.ScreenString = $Franca_Gui_ScreenString;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.ScreenWidget
	var $Franca_Gui_ScreenWidget = function(manager) {
		this.$buttons = null;
		this.$caughtKeys = null;
		this.$lockedKeys = null;
		$Franca_Gui_Widget.call(this, null);
		this.set_manager(manager);
		this.set_canCaptureKeys(true);
		this.$buttons = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_MouseButtons, $Franca_MouseButton]))();
		this.$caughtKeys = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [ss.Int32]))();
		this.$lockedKeys = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [ss.Int32]))();
		var $t1 = ss.getEnumerator(this.get_input().get_handler().get_mouse().get_buttons());
		try {
			while ($t1.moveNext()) {
				var btn = $t1.current();
				this.$buttons.set_item(btn.type, new $Franca_MouseButton(btn.type));
			}
		}
		finally {
			$t1.dispose();
		}
		this.set_onMouseHoldDown(ss.mkdel(this, this.$setMouseStateDown));
		this.set_onMouseHoldUp(ss.mkdel(this, this.$setMouseStateUp));
		this.set_onCaptureKey(ss.mkdel(this, this.captureKey$1));
	};
	$Franca_Gui_ScreenWidget.__typeName = 'Franca.Gui.ScreenWidget';
	global.Franca.Gui.ScreenWidget = $Franca_Gui_ScreenWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.StringLine
	var $Franca_Gui_StringLine = function(parent, y, ascent, descent, linegap, index, formatting) {
		this.width = 0;
		this.trimmedWidth = 0;
		this.y = 0;
		this.ascent = 0;
		this.descent = 0;
		this.linegap = 0;
		this.parent = null;
		this.index = 0;
		this.length = 0;
		this.formatting = null;
		this.alignedX = 0;
		this.alignedY = 0;
		this.y = y;
		this.ascent = ascent;
		this.descent = descent;
		this.linegap = linegap;
		this.index = index;
		this.parent = parent;
		this.formatting = formatting;
	};
	$Franca_Gui_StringLine.__typeName = 'Franca.Gui.StringLine';
	global.Franca.Gui.StringLine = $Franca_Gui_StringLine;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.TextBox
	var $Franca_Gui_TextBox = function(parent) {
		this.$blinkTime = ss.getDefaultValue(ss.TimeSpan);
		this.$undo = null;
		this.$redo = null;
		this.$maxUndoStates = $Franca_Gui_TextBox.defaultMaxUndoStates;
		this.$lastMouseLocation = null;
		this.$caret = ss.getDefaultValue($Franca_Gui_CaretPosition);
		this.$lastCaretIndex = -1;
		this.$maxLength = -1;
		this.$3$CanPasteField = false;
		this.$3$ScrollToCursorField = false;
		$Franca_Gui_Label.call(this, parent);
		this.set_canFocus(true);
		this.set_autoSize(ss.makeGenericType(Franca.ImplicitEnum$1, [$Franca_Gui_AutoSizing]).op_Implicit$2(0));
		this.set_wordWrapped(false);
		this.set_clipContents(true);
		this.set_canPaste(true);
		this.set_canSelect(true);
		this.set_allowMarkup(false);
		this.set_scrollToCursor(true);
		this.set_hasID(true);
		this.$undo = new (ss.makeGenericType(System.Collections.Generic.LinkedList$1, [$Franca_Gui_TextUndoState]))();
		this.$redo = new (ss.makeGenericType(System.Collections.Generic.LinkedList$1, [$Franca_Gui_TextUndoState]))();
	};
	$Franca_Gui_TextBox.__typeName = 'Franca.Gui.TextBox';
	$Franca_Gui_TextBox.captures = function(keyCode) {
		var key = $Franca_KeyboardButton.keyFromKeyCode$1(keyCode, false);
		switch (key) {
			case 0:
			case 2097152:
			case 19:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123: {
				return false;
			}
		}
		return true;
	};
	global.Franca.Gui.TextBox = $Franca_Gui_TextBox;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.TextSelection
	var $Franca_Gui_TextSelection = function(str) {
		this.source = null;
		this.$textSource = null;
		this.$selStart = 0;
		this.$selEnd = 0;
		this.$1$OnChangeField = null;
		this.source = str;
		this.$textSource = ss.safeCast(this.source, $Franca_Gui_ITextSelectionSource);
	};
	$Franca_Gui_TextSelection.__typeName = 'Franca.Gui.TextSelection';
	$Franca_Gui_TextSelection.$ctor1 = function(str, start, end) {
		$Franca_Gui_TextSelection.call(this, str);
		this.$selStart = start;
		this.$selEnd = end;
	};
	global.Franca.Gui.TextSelection = $Franca_Gui_TextSelection;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.TextUndoState
	var $Franca_Gui_TextUndoState = function(text, selection) {
		this.text = null;
		this.selection = null;
		this.text = text;
		this.selection = selection;
	};
	$Franca_Gui_TextUndoState.__typeName = 'Franca.Gui.TextUndoState';
	global.Franca.Gui.TextUndoState = $Franca_Gui_TextUndoState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.Widget
	var $Franca_Gui_Widget = function(parent) {
		this.$x = 0;
		this.$y = 0;
		this.$width = 0;
		this.$height = 0;
		this.$alwaysOnTop = false;
		this.$parent = null;
		this.$manager = null;
		this.$color = Franca.Color.white;
		this.$id = null;
		this.$canFocus = false;
		this.$visible = true;
		this.$clickThrough = false;
		this.$prevViewport = ss.getDefaultValue(Franca.Rectangle);
		this.$viewX = 0;
		this.$viewY = 0;
		this.$children = null;
		this.$childOrder = null;
		this.$childNameIDGen = null;
		this.$initialized = false;
		this.$_layoutCallbacks = null;
		this.$_renderCallbacks = null;
		this.$1$OnClickField = null;
		this.$1$OnRightClickField = null;
		this.$1$OnMouseMoveField = null;
		this.$1$OnMouseDownField = null;
		this.$1$OnMouseUpField = null;
		this.$1$OnMouseHoldDownField = null;
		this.$1$OnMouseHoldUpField = null;
		this.$1$OnCaptureKeyField = null;
		this.$1$OnKeyDownField = null;
		this.$1$OnKeyUpField = null;
		this.$1$OnKeyHoldDownField = null;
		this.$1$OnFocusField = null;
		this.$1$OnCopyField = null;
		this.$1$OnLayoutField = null;
		this.$1$OnBeginRenderField = null;
		this.$1$OnRenderField = null;
		this.$1$OnNativeClickField = null;
		this.$1$StateField = null;
		this.$1$OnViewChangeField = null;
		this.$1$OnViewEnterField = null;
		this.$1$CanCaptureKeysField = false;
		this.$1$ClipContentsField = false;
		this.$children = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_Gui_IWidget]))();
		this.$childOrder = [];
		this.$parent = parent;
	};
	$Franca_Gui_Widget.__typeName = 'Franca.Gui.Widget';
	$Franca_Gui_Widget.get_idGenerator = function() {
		return $Franca_Gui_Widget.$1$IDGeneratorField;
	};
	$Franca_Gui_Widget.set_idGenerator = function(value) {
		$Franca_Gui_Widget.$1$IDGeneratorField = value;
	};
	$Franca_Gui_Widget.get_guiAssembly = function() {
		return $Franca_Gui_Widget.$1$GuiAssemblyField;
	};
	$Franca_Gui_Widget.set_guiAssembly = function(value) {
		$Franca_Gui_Widget.$1$GuiAssemblyField = value;
	};
	$Franca_Gui_Widget.create = function(fullName, parent) {
		return $Franca_Gui_Widget.createArgs(fullName, [parent]);
	};
	$Franca_Gui_Widget.create$1 = function(type, parent) {
		return $Franca_Gui_Widget.createArgs$1(type, [parent]);
	};
	$Franca_Gui_Widget.createArgs = function(fullName, args) {
		var assembly = $Franca_Gui_Widget.get_guiAssembly();
		if (ss.isNullOrUndefined(assembly)) {
			throw new $Franca_Gui_WidgetCreationException.$ctor1(ss.formatString("Couldn't create widget from name '{0}': gui assembly not found because Widget.GuiAssembly was null", fullName));
		}
		var type = ss.getType(fullName, assembly);
		if (ss.isNullOrUndefined(type)) {
			throw new $Franca_Gui_WidgetCreationException.$ctor1(ss.formatString("Couldn't create widget from name '{0}': type not found", fullName));
		}
		return $Franca_Gui_Widget.createArgs$1(type, args);
	};
	$Franca_Gui_Widget.createArgs$1 = function(type, args) {
		if (ss.isNullOrUndefined(type)) {
			throw new ss.ArgumentNullException('type', "Couldn't create widget: type was null");
		}
		try {
			return ss.cast(ss.applyConstructor(type, args), $Franca_Gui_IWidget);
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			throw new $Franca_Gui_WidgetCreationException.$ctor2(ss.formatString("Couldn't create widget '{0}': {1}", ss.getTypeFullName(type), e.get_message()), e);
		}
	};
	global.Franca.Gui.Widget = $Franca_Gui_Widget;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.WidgetAttribute
	var $Franca_Gui_WidgetAttribute = function(name) {
		this.$name = null;
		this.$name = name;
	};
	$Franca_Gui_WidgetAttribute.__typeName = 'Franca.Gui.WidgetAttribute';
	global.Franca.Gui.WidgetAttribute = $Franca_Gui_WidgetAttribute;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.WidgetCreationException
	var $Franca_Gui_WidgetCreationException = function() {
		ss.Exception.call(this);
	};
	$Franca_Gui_WidgetCreationException.__typeName = 'Franca.Gui.WidgetCreationException';
	$Franca_Gui_WidgetCreationException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_Gui_WidgetCreationException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.Gui.WidgetCreationException = $Franca_Gui_WidgetCreationException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.WidgetManager
	var $Franca_Gui_WidgetManager$1 = function(T) {
		var $type = function(context) {
			this.$context = ss.getDefaultValue(T);
			this.$children = null;
			this.$batch = null;
			this.$input = null;
			this.$screen = null;
			this.$autoResize = true;
			this.$width = 0;
			this.$height = 0;
			this.$disposed = false;
			this.$1$XField = 0;
			this.$1$YField = 0;
			this.$context = context;
			this.$children = new $Franca_Gui_ChildCollection();
			this.$batch = new $Franca_SpriteBatch(this.get_graphicsDevice());
			this.$input = new $Franca_Gui_GuiInput(this, context.get_input());
			this.set_autoResize(true);
			this.$screen = new $Franca_Gui_ScreenWidget(this);
			this.$screen.initialize();
			this.addChild(this.$screen);
		};
		ss.registerGenericClassInstance($type, $Franca_Gui_WidgetManager$1, [T], {
			update: function(gameTime, elapsed) {
				this.$screen.updateInputState();
				this.$input.determineEvents(gameTime);
				this.$input.dispatchEvents();
				this.$screen.processBinds(gameTime);
				this.$input.get_handler().setImeState();
				this.$input.newFrame();
				var $t1 = ss.getEnumerator(this.$children.backToFront());
				try {
					while ($t1.moveNext()) {
						var child = $t1.current();
						child.update(this.$context);
					}
				}
				finally {
					$t1.dispose();
				}
				this.$input.finishFrame();
			},
			render: function(gameTime, elapsed) {
				this.get_graphicsDevice().clear$1(1280);
				//input.NewFrame();
				var viewport = this.get_graphicsDevice().get_viewport();
				var $t1 = ss.getEnumerator(this.$children.backToFront());
				try {
					while ($t1.moveNext()) {
						var child = $t1.current();
						child.render(this.$context);
						if (Franca.Rectangle.op_Inequality(this.get_graphicsDevice().get_viewport(), viewport)) {
							this.get_graphicsDevice().set_viewport(viewport);
						}
					}
				}
				finally {
					$t1.dispose();
				}
				//input.FinishFrame();
			},
			addChild: function(widget) {
				widget.set_manager(this);
				this.$children.add(widget);
				widget.initialize();
				// makes sure all properties are set once before going into the Layout function again
				// Layout is called before any properties are set, so if Layout requires properties to be
				// set already, this will do it
				widget.layout(this.$context);
			},
			removeChild: function(widget) {
				widget.set_manager(null);
				this.$children.remove(widget);
			},
			clear: function() {
				var $t1 = ss.getEnumerator(this.$children.safeEnumerate());
				try {
					while ($t1.moveNext()) {
						var child = $t1.current();
						if (!ss.isInstanceOfType(child, $Franca_Gui_ScreenWidget)) {
							this.removeChild(child);
						}
					}
				}
				finally {
					$t1.dispose();
				}
			},
			dispose: function() {
				this.dispose$1(true);
				System.GC.suppressFinalize(this);
			},
			dispose$1: function(disposing) {
				if (this.$disposed) {
					return;
				}
				if (disposing) {
					// Free any other managed objects here.
					if (ss.isValue(this.$batch)) {
						this.$batch.dispose();
					}
				}
				// Free any unmanaged objects here.
				this.$disposed = true;
			},
			get_autoResize: function() {
				return this.$autoResize;
			},
			set_autoResize: function(value) {
				if (this.$autoResize !== value) {
					this.$autoResize = value;
					if (!this.$autoResize) {
						this.set_width($Franca_GraphicsDevice.get_current().get_backbufferWidth());
						this.set_height($Franca_GraphicsDevice.get_current().get_backbufferHeight());
					}
				}
			},
			get_x: function() {
				return this.$1$XField;
			},
			set_x: function(value) {
				this.$1$XField = value;
			},
			get_y: function() {
				return this.$1$YField;
			},
			set_y: function(value) {
				this.$1$YField = value;
			},
			get_width: function() {
				if (this.get_autoResize()) {
					return $Franca_GraphicsDevice.get_current().get_backbufferWidth();
				}
				return this.$width;
			},
			set_width: function(value) {
				this.$width = value;
			},
			get_height: function() {
				if (this.get_autoResize()) {
					return $Franca_GraphicsDevice.get_current().get_backbufferHeight();
				}
				return this.$height;
			},
			set_height: function(value) {
				this.$height = value;
			},
			get_graphicsDevice: function() {
				return this.$context.get_graphicsDevice();
			},
			get_batch: function() {
				return this.$batch;
			},
			get_input: function() {
				return this.$input;
			},
			set_input: function(value) {
				this.$input = value;
			},
			get_viewport: function() {
				return this.get_graphicsDevice().get_viewport();
			},
			get_content: function() {
				return this.$context.get_content();
			},
			get_screen: function() {
				return this.$screen;
			},
			get_children: function() {
				return this.$children;
			},
			get_context: function() {
				return this.$context;
			}
		}, function() {
			return null;
		}, function() {
			return [$Franca_Gui_IWidgetManager, $Franca_IGameComponent, ss.IDisposable, $Franca_IGameObserver];
		});
		return $type;
	};
	$Franca_Gui_WidgetManager$1.__typeName = 'Franca.Gui.WidgetManager$1';
	ss.initGenericClass($Franca_Gui_WidgetManager$1, $asm, 1);
	global.Franca.Gui.WidgetManager$1 = $Franca_Gui_WidgetManager$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.WordChunk
	var $Franca_Gui_WordChunk = function() {
		this.size = ss.getDefaultValue($Franca_Gui_WordSize);
		this.length = 0;
	};
	$Franca_Gui_WordChunk.__typeName = 'Franca.Gui.WordChunk';
	$Franca_Gui_WordChunk.$ctor1 = function(size, length) {
		this.size = ss.getDefaultValue($Franca_Gui_WordSize);
		this.length = 0;
		this.size = size;
		this.length = length;
	};
	$Franca_Gui_WordChunk.getDefaultValue = function() {
		return new $Franca_Gui_WordChunk();
	};
	global.Franca.Gui.WordChunk = $Franca_Gui_WordChunk;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.WordSize
	var $Franca_Gui_WordSize = function() {
		this.ascent = 0;
		this.descent = 0;
		this.linegap = 0;
		this.width = 0;
	};
	$Franca_Gui_WordSize.__typeName = 'Franca.Gui.WordSize';
	$Franca_Gui_WordSize.$ctor1 = function(ascent, descent, linegap, width) {
		this.ascent = 0;
		this.descent = 0;
		this.linegap = 0;
		this.width = 0;
		this.ascent = ascent;
		this.descent = descent;
		this.linegap = linegap;
		this.width = width;
	};
	$Franca_Gui_WordSize.getDefaultValue = function() {
		return new $Franca_Gui_WordSize();
	};
	global.Franca.Gui.WordSize = $Franca_Gui_WordSize;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.WordWrappingInfo
	var $Franca_Gui_WordWrappingInfo = function() {
		this.value = null;
		this.lines = [];
		this.lineIndex = -1;
		this.charIndex = 0;
		this.font = null;
		this.scale = 0;
		this.allowMarkup = false;
		this.format = null;
		this.formatCopy = null;
	};
	$Franca_Gui_WordWrappingInfo.__typeName = 'Franca.Gui.WordWrappingInfo';
	global.Franca.Gui.WordWrappingInfo = $Franca_Gui_WordWrappingInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.FlowLang.FlowAction
	var $Franca_Gui_FlowLang_FlowAction = function(func) {
		this.view = null;
		this.func = null;
		this.dialog = null;
		this.type = 0;
		this.attrFunc = null;
		if (ss.staticEquals(func, null)) {
			throw new ss.ArgumentNullException('func');
		}
		this.func = func;
		this.type = 1;
	};
	$Franca_Gui_FlowLang_FlowAction.__typeName = 'Franca.Gui.FlowLang.FlowAction';
	$Franca_Gui_FlowLang_FlowAction.$ctor1 = function(view, isDialog, attrFunc) {
		this.view = null;
		this.func = null;
		this.dialog = null;
		this.type = 0;
		this.attrFunc = null;
		if (ss.isNullOrUndefined(view)) {
			throw new ss.ArgumentNullException('view');
		}
		this.view = view;
		this.type = (isDialog ? 2 : 0);
		this.attrFunc = attrFunc;
	};
	global.Franca.Gui.FlowLang.FlowAction = $Franca_Gui_FlowLang_FlowAction;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.FlowLang.FlowActionType
	var $Franca_Gui_FlowLang_FlowActionType = function() {
	};
	$Franca_Gui_FlowLang_FlowActionType.__typeName = 'Franca.Gui.FlowLang.FlowActionType';
	global.Franca.Gui.FlowLang.FlowActionType = $Franca_Gui_FlowLang_FlowActionType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.FlowLang.FlowItem
	var $Franca_Gui_FlowLang_FlowItem = function(name, widget) {
		this.name = null;
		this.actions = null;
		this.widget = null;
		this.attributes = null;
		this.$1$IsDialogField = false;
		this.name = name;
		this.widget = widget;
		this.actions = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_Gui_FlowLang_FlowAction]))();
		this.attributes = new (ss.makeGenericType(ss.Dictionary$2, [String, Object]))();
	};
	$Franca_Gui_FlowLang_FlowItem.__typeName = 'Franca.Gui.FlowLang.FlowItem';
	$Franca_Gui_FlowLang_FlowItem.$ctor1 = function(name, widget, actions) {
		this.name = null;
		this.actions = null;
		this.widget = null;
		this.attributes = null;
		this.$1$IsDialogField = false;
		this.name = name;
		this.widget = widget;
		this.actions = actions || new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_Gui_FlowLang_FlowAction]))();
	};
	$Franca_Gui_FlowLang_FlowItem.get_$canCast = function() {
		if (ss.isValue($Franca_Gui_FlowLang_FlowItem.$_canCast)) {
			return $Franca_Gui_FlowLang_FlowItem.$_canCast;
		}
		$Franca_Gui_FlowLang_FlowItem.$_canCast = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_Gui_FlowLang_FlowItem$CastTypes, Boolean]))();
		return $Franca_Gui_FlowLang_FlowItem.$_canCast;
	};
	global.Franca.Gui.FlowLang.FlowItem = $Franca_Gui_FlowLang_FlowItem;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.FlowLang.FlowItem.CastTypes
	var $Franca_Gui_FlowLang_FlowItem$CastTypes = function() {
		this.lhs = null;
		this.rhs = null;
	};
	$Franca_Gui_FlowLang_FlowItem$CastTypes.__typeName = 'Franca.Gui.FlowLang.FlowItem$CastTypes';
	$Franca_Gui_FlowLang_FlowItem$CastTypes.$ctor1 = function(lhs, rhs) {
		this.lhs = null;
		this.rhs = null;
		this.lhs = lhs;
		this.rhs = rhs;
	};
	$Franca_Gui_FlowLang_FlowItem$CastTypes.getDefaultValue = function() {
		return new $Franca_Gui_FlowLang_FlowItem$CastTypes();
	};
	$Franca_Gui_FlowLang_FlowItem$CastTypes.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_Gui_FlowLang_FlowItem$CastTypes.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.Gui.FlowLang.FlowItem$CastTypes = $Franca_Gui_FlowLang_FlowItem$CastTypes;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Gui.FlowLang.FlowState
	var $Franca_Gui_FlowLang_FlowState = function(gui, context) {
		this.$stack = null;
		this.$context = null;
		this.$gui = null;
		this.$globalState = null;
		this.$gui = gui;
		this.$context = context;
		this.$stack = [];
	};
	$Franca_Gui_FlowLang_FlowState.__typeName = 'Franca.Gui.FlowLang.FlowState';
	$Franca_Gui_FlowLang_FlowState.get_assembly = function() {
		return $Franca_Gui_FlowLang_FlowState.$1$AssemblyField;
	};
	$Franca_Gui_FlowLang_FlowState.set_assembly = function(value) {
		$Franca_Gui_FlowLang_FlowState.$1$AssemblyField = value;
	};
	$Franca_Gui_FlowLang_FlowState.create = function(gui, context, flowName) {
		var type = null;
		var assembly = $Franca_Gui_FlowLang_FlowState.get_assembly();
		if (ss.isNullOrUndefined(assembly)) {
			var $t1 = ss.getEnumerator(ss.getAssemblies());
			try {
				while ($t1.moveNext()) {
					var a = $t1.current();
					type = Enumerable.from(System.Reflection.ReflectionExtensions.definedTypes(a)).where(function(t) {
						return ss.startsWithString(ss.getTypeFullName(t), 'FlowLang.Generated') && ss.referenceEquals(ss.getTypeName(t), flowName);
					}).firstOrDefault(null, ss.getDefaultValue(Function));
					if (ss.isValue(type)) {
						$Franca_Gui_FlowLang_FlowState.set_assembly(a);
						break;
					}
				}
			}
			finally {
				$t1.dispose();
			}
		}
		else {
			type = ss.getType('FlowLang.Generated.' + flowName, assembly);
		}
		if (ss.isNullOrUndefined(type)) {
			throw new Franca.TypeReflectionException.$ctor1("Couldn't create FlowState for flow '" + flowName + "': type " + flowName + ' not found');
		}
		var state = new $Franca_Gui_FlowLang_FlowState(gui, context);
		try {
			var initMethod = ss.getMembers(type, 8, 284, 'Initialize');
			ss.midel(initMethod, null)(state, context);
		}
		catch ($t2) {
			var e = ss.Exception.wrap($t2);
			throw new Franca.TypeReflectionException.$ctor2("Couldn't create FlowState for flow '" + flowName + "': " + e.get_message(), e);
		}
		return state;
	};
	global.Franca.Gui.FlowLang.FlowState = $Franca_Gui_FlowLang_FlowState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Ime.DummyImeProvider
	var $Franca_Ime_$DummyImeProvider = function() {
		this.$disposed = false;
	};
	$Franca_Ime_$DummyImeProvider.__typeName = 'Franca.Ime.$DummyImeProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Ime.IImeProvider
	var $Franca_Ime_$IImeProvider = function() {
	};
	$Franca_Ime_$IImeProvider.__typeName = 'Franca.Ime.$IImeProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Ime.ImeState
	var $Franca_Ime_ImeState = function(container) {
		this.$container = null;
		this.$enabled = false;
		this.$compositing = false;
		this.$imeProvider = null;
		this.$disposed = false;
		this.$container = container;
		this.$initialize();
	};
	$Franca_Ime_ImeState.__typeName = 'Franca.Ime.ImeState';
	global.Franca.Ime.ImeState = $Franca_Ime_ImeState;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.Base32Info
	var $Franca_JS_Base32Info = function() {
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$OnLoadField = null;
		this.$fileData = null;
		this.$content = null;
	};
	$Franca_JS_Base32Info.__typeName = 'Franca.JS.Base32Info';
	global.Franca.JS.Base32Info = $Franca_JS_Base32Info;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.CanvasContext
	var $Franca_JS_CanvasContext = function(canvas) {
		this.$canvas = null;
		this.$context = null;
		this.$canvas = canvas;
		this.$context = ss.safeCast(canvas.getContext('2d'), CanvasRenderingContext2D);
	};
	$Franca_JS_CanvasContext.__typeName = 'Franca.JS.CanvasContext';
	global.Franca.JS.CanvasContext = $Franca_JS_CanvasContext;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.NonBlockingAlert
	var $Franca_JS_NonBlockingAlert = function(text, uid, hideButton) {
		this.alertUID = null;
		this.div = null;
		this.id = ss.getDefaultValue(Franca.IncrementalID);
		this.alertUID = uid;
		text = ss.replaceAllString(ss.replaceAllString(text, '\r', ''), '\n', '\n<br>');
		this.id = $Franca_JS_NonBlockingAlert.$idGen.getID();
		var $t1 = document.createElement('div');
		this.div = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'DIV'));
		this.div.id = '__nonBlockingAlertDiv' + this.id;
		this.div.style.width = '300px';
		this.div.style.height = '180px';
		this.div.style.backgroundColor = 'lightgray';
		this.div.style.borderRadius = '8px';
		this.div.style.borderStyle = 'solid';
		this.div.style.borderColor = 'darkgray';
		this.div.style.borderWidth = '2px;';
		this.div.style.boxShadow = '3px 3px 15px rgba(0, 0, 0, 0.9);';
		this.div.style.position = 'relative';
		this.div.style.padding = '16px';
		this.div.style.fontFamily = 'Arial, Helvetica, sans-serif';
		this.div.style.margin = '0';
		this.div.innerHTML = ss.formatString('\r\n<div style="margin: auto; overflow-y: auto;" id="__nonBlockingAlertChildDiv{1}">\r\n    <span id="__nonBlockingAlertSpan{1}">{0}</span>\r\n</div>\r\n<div style="text-align: center; padding-top: 12px;{2}" id="__nonBlockingAlertButtonDiv{1}"><input type="button" value="OK" id="__nonBlockingAlertBtn{1}"></div>\r\n', text, this.id.toString(), (hideButton ? ' display: none;' : ''));
	};
	$Franca_JS_NonBlockingAlert.__typeName = 'Franca.JS.NonBlockingAlert';
	$Franca_JS_NonBlockingAlert.show = function(text, uid, hideButton) {
		var ret = new $Franca_JS_NonBlockingAlert(text, uid, hideButton);
		ret.show();
		return ret;
	};
	$Franca_JS_NonBlockingAlert.close = function(uid) {
		var alert = {};
		if ($Franca_JS_NonBlockingAlert.$uniqueAlerts.tryGetValue(uid, alert)) {
			alert.$.close();
		}
	};
	global.Franca.JS.NonBlockingAlert = $Franca_JS_NonBlockingAlert;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.SimpleAudio.StreamedMusic
	var $Franca_JS_SimpleAudio_StreamedMusic = function(name, fileWithoutExt) {
		$Franca_JS_SimpleAudio_StreamedMusic.$ctor1.call(this, name, fileWithoutExt, true);
	};
	$Franca_JS_SimpleAudio_StreamedMusic.__typeName = 'Franca.JS.SimpleAudio.StreamedMusic';
	$Franca_JS_SimpleAudio_StreamedMusic.$ctor1 = function(name, file, addExtension) {
		this.$manager = null;
		this.filename = null;
		this.$loaded = false;
		this.$loadingChannel = null;
		this.$channel = null;
		this.name = null;
		this.$duration = ss.getDefaultValue(ss.TimeSpan);
		this.$instance = null;
		this.$loops = false;
		this.$lastVolume = 0;
		this.$1$OnLoadField = null;
		this.$disposed = false;
		this.$1$LoopToField = ss.getDefaultValue(ss.TimeSpan);
		this.filename = (addExtension ? (file + $Franca_Audio_AudioContext.audioExtension) : file);
		this.name = name;
	};
	global.Franca.JS.SimpleAudio.StreamedMusic = $Franca_JS_SimpleAudio_StreamedMusic;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.SimpleAudio.StreamedSound
	var $Franca_JS_SimpleAudio_StreamedSound = function(name, fileWithoutExt, maxInstances) {
		$Franca_JS_SimpleAudio_StreamedSound.$ctor1.call(this, name, fileWithoutExt, true, maxInstances);
	};
	$Franca_JS_SimpleAudio_StreamedSound.__typeName = 'Franca.JS.SimpleAudio.StreamedSound';
	$Franca_JS_SimpleAudio_StreamedSound.$ctor1 = function(name, file, addExtension, maxInstances) {
		this.$manager = null;
		this.$maxInstances = 0;
		this.filename = null;
		this.$loaded = false;
		this.$loadingChannels = null;
		this.$channels = null;
		this.$currentChannel = 0;
		this.name = null;
		this.$duration = ss.getDefaultValue(ss.TimeSpan);
		this.$1$OnLoadField = null;
		this.$disposed = false;
		this.filename = (addExtension ? (file + $Franca_Audio_AudioContext.audioExtension) : file);
		this.name = name;
		this.$maxInstances = maxInstances;
		this.$loadingChannels = [];
		this.$channels = [];
	};
	global.Franca.JS.SimpleAudio.StreamedSound = $Franca_JS_SimpleAudio_StreamedSound;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.SimpleAudio.StreamedSoundChannel
	var $Franca_JS_SimpleAudio_StreamedSoundChannel = function(parent) {
		this.$parent = null;
		this.$audio = null;
		this.lastInstance = null;
		this.$loaded = false;
		this.$1$OnLoadField = null;
		this.$1$OnEndField = null;
		this.$1$OnStopField = null;
		this.$loadedInterval = 0;
		this.$disposed = false;
		this.$parent = parent;
		this.$audio = new Audio();
	};
	$Franca_JS_SimpleAudio_StreamedSoundChannel.__typeName = 'Franca.JS.SimpleAudio.StreamedSoundChannel';
	global.Franca.JS.SimpleAudio.StreamedSoundChannel = $Franca_JS_SimpleAudio_StreamedSoundChannel;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.SimpleAudio.StreamedSoundInstance
	var $Franca_JS_SimpleAudio_StreamedSoundInstance = function(channel, volume) {
		this.channel = null;
		this.$volume = 0;
		this.$state = 0;
		this.channel = channel;
		this.$volume = volume;
	};
	$Franca_JS_SimpleAudio_StreamedSoundInstance.__typeName = 'Franca.JS.SimpleAudio.StreamedSoundInstance';
	global.Franca.JS.SimpleAudio.StreamedSoundInstance = $Franca_JS_SimpleAudio_StreamedSoundInstance;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.WebAudio.BufferedSound
	var $Franca_JS_WebAudio_BufferedSound = function(buffer) {
		this.$buffer = null;
		this.$manager = null;
		this.$duration = ss.getDefaultValue(ss.TimeSpan);
		this.$disposed = false;
		this.$buffer = buffer;
		this.$duration = new ss.TimeSpan(buffer.duration * 10000000);
	};
	$Franca_JS_WebAudio_BufferedSound.__typeName = 'Franca.JS.WebAudio.BufferedSound';
	global.Franca.JS.WebAudio.BufferedSound = $Franca_JS_WebAudio_BufferedSound;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JS.WebAudio.BufferedSoundInstance
	var $Franca_JS_WebAudio_BufferedSoundInstance = function(parent, volume, pitch, loop) {
		this.$parent = null;
		this.$source = null;
		this.$gain = null;
		this.$volume = 0;
		this.$state = 0;
		this.$startTime = 0;
		this.$pausedTime = 0;
		this.$loop = false;
		this.$pitch = 0;
		this.$parent = parent;
		this.$volume = volume;
		this.$pitch = pitch;
		this.$loop = loop;
		this.$gain = this.get_$context().createGain();
		this.$gain.gain.value = volume * parent.get_manager().get_volume() * parent.get_manager().get_context().get_masterVolume();
		this.$gain.connect(this.get_$context().destination);
	};
	$Franca_JS_WebAudio_BufferedSoundInstance.__typeName = 'Franca.JS.WebAudio.BufferedSoundInstance';
	global.Franca.JS.WebAudio.BufferedSoundInstance = $Franca_JS_WebAudio_BufferedSoundInstance;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JsonData.EffectJson
	var $Franca_JsonData_EffectJson = function() {
		this.$1$ProgramsField = null;
	};
	$Franca_JsonData_EffectJson.__typeName = 'Franca.JsonData.EffectJson';
	global.Franca.JsonData.EffectJson = $Franca_JsonData_EffectJson;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.JsonData.EffectTechniqueJson
	var $Franca_JsonData_EffectTechniqueJson = function() {
		this.$1$NameField = null;
		this.$1$VertexShaderField = null;
		this.$1$FragmentShaderField = null;
		this.$1$VertexDefinesField = null;
		this.$1$FragmentDefinesField = null;
	};
	$Franca_JsonData_EffectTechniqueJson.__typeName = 'Franca.JsonData.EffectTechniqueJson';
	global.Franca.JsonData.EffectTechniqueJson = $Franca_JsonData_EffectTechniqueJson;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Localization.GameLanguage
	var $Franca_Localization_GameLanguage = function() {
		this.fields = null;
		this.$name = null;
		this.$fieldRow = 0;
		this.$formatRow = 1;
		this.$textRow = 3;
		this.$fileRes = null;
		this.$1$LoadedField = false;
		this.$hasHeader = false;
		this.$assetName = null;
		this.$1$OnLoadField = null;
		this.set_name('Unknown');
		this.fields = [];
	};
	$Franca_Localization_GameLanguage.__typeName = 'Franca.Localization.GameLanguage';
	$Franca_Localization_GameLanguage.$ctor1 = function(name) {
		$Franca_Localization_GameLanguage.call(this);
		this.set_name(name);
	};
	global.Franca.Localization.GameLanguage = $Franca_Localization_GameLanguage;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Localization.LocalizableField
	var $Franca_Localization_LocalizableField = function() {
		this.field = null;
		this.text = null;
		this.format = 0;
	};
	$Franca_Localization_LocalizableField.__typeName = 'Franca.Localization.LocalizableField';
	$Franca_Localization_LocalizableField.$ctor1 = function(field, text, format) {
		this.field = null;
		this.text = null;
		this.format = 0;
		this.field = field;
		this.text = text;
		this.format = format;
	};
	$Franca_Localization_LocalizableField.getDefaultValue = function() {
		return new $Franca_Localization_LocalizableField();
	};
	$Franca_Localization_LocalizableField.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$Franca_Localization_LocalizableField.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.Franca.Localization.LocalizableField = $Franca_Localization_LocalizableField;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Localization.Localizer
	var $Franca_Localization_Localizer = function() {
	};
	$Franca_Localization_Localizer.__typeName = 'Franca.Localization.Localizer';
	$Franca_Localization_Localizer.load = function(language) {
		console.log(ss.formatString("Loading language '{0}'", language.get_name$1()));
		for (var $t1 = 0; $t1 < language.fields.length; $t1++) {
			var field = language.fields[$t1];
			var className = {};
			var fieldName = {};
			$Franca_Localization_Localizer.$getClassName(field.field, className, fieldName);
			$Franca_Localization_Localizer.setField(language, className.$, fieldName.$, field.text, field.format);
		}
	};
	$Franca_Localization_Localizer.setField = function(language, clsName, fieldName, text, format) {
		var $t1 = ss.getEnumerator($Franca_Localization_Localizer.$fromFullName(clsName));
		try {
			while ($t1.moveNext()) {
				var type = $t1.current();
				if (ss.isNullOrUndefined(type)) {
					console.log(ss.formatString("Warning: unrecognized class name in language '{0}' for field {1}.{2}", language.get_name$1(), clsName, fieldName));
					return;
				}
				var field = ss.getMembers(type, 4, 24 | 256, fieldName);
				if (ss.isNullOrUndefined(field)) {
					console.log(ss.formatString("Warning: unrecognized field name in language '{0}' for field {1}.{2}", language.get_name$1(), clsName, fieldName));
					return;
				}
				var attr = Enumerable.from(System.Reflection.ReflectionExtensions.getCustomAttributes$5(Franca.Localization.LocalizableAttribute).call(null, field, true)).firstOrDefault(null, ss.getDefaultValue(Franca.Localization.LocalizableAttribute));
				var allowMarkup = (ss.isNullOrUndefined(attr) ? false : attr.get_allowMarkup());
				var convertedText = $Franca_Localization_Localizer.$transformFormat(text, format, allowMarkup);
				ss.fieldAccess(field, null, convertedText);
			}
		}
		finally {
			$t1.dispose();
		}
	};
	$Franca_Localization_Localizer.$transformFormat = function(text, format, allowMarkup) {
		var markedUp;
		switch (format) {
			default: {
				return text;
			}
			case 1: {
				markedUp = Franca.Text.Markup.toCode(text, 0);
				return (allowMarkup ? markedUp : Franca.Text.Markup.remove(markedUp));
			}
			case 2: {
				markedUp = Franca.Text.Markup.toCode(Franca.Text.Markup.fromLocalizableHtml(text), 0);
				return (allowMarkup ? markedUp : Franca.Text.Markup.remove(markedUp));
			}
		}
	};
	$Franca_Localization_Localizer.$getClassName = function(fullName, cls, fld) {
		if (ss.isNullOrUndefined(fullName)) {
			cls.$ = '';
			fld.$ = '';
			return;
		}
		var splitIndex = fullName.lastIndexOf(String.fromCharCode(46));
		if (splitIndex < 0) {
			cls.$ = '';
			fld.$ = '';
			return;
		}
		cls.$ = fullName.substr(0, Math.max(0, splitIndex));
		fld.$ = fullName.substring(Math.min(splitIndex + 1, fullName.length));
	};
	$Franca_Localization_Localizer.$fromFullName = function(name) {
		return new ss.IteratorBlockEnumerable(function() {
			return (function(name) {
				var $result, $state = 0, sepIndex, assemblyName, $t1, ass, t, $t2, ass1, t1;
				var $finally = function() {
					$t1.dispose();
				};
				var $finally1 = function() {
					$t2.dispose();
				};
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								sepIndex = name.indexOf(String.fromCharCode(46));
								if (sepIndex > 0) {
									assemblyName = name.substr(0, sepIndex);
									$t1 = ss.getEnumerator($Franca_Localization_Localizer.$getAssemblies());
									$state = 4;
									continue $sm1;
								}
								$state = 1;
								continue $sm1;
							}
							case 4: {
								$state = 2;
								if (!$t1.moveNext()) {
									$state = 3;
									continue $sm1;
								}
								ass = $t1.current();
								if (ss.startsWithString(ass.toString(), assemblyName)) {
									t = ss.getType(name, ass);
									if (ss.isValue(t)) {
										$result = t;
										$state = 4;
										return true;
									}
									$state = 4;
									continue $sm1;
								}
								$state = 4;
								continue $sm1;
							}
							case 3: {
								$state = -1;
								$finally.call(this);
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								$t2 = ss.getEnumerator($Franca_Localization_Localizer.$getAssemblies());
								$state = 8;
								continue $sm1;
							}
							case 8: {
								$state = 6;
								if (!$t2.moveNext()) {
									$state = 7;
									continue $sm1;
								}
								ass1 = $t2.current();
								t1 = ss.getType(name, ass1);
								if (ss.isValue(t1)) {
									$result = t1;
									$state = 8;
									return true;
								}
								$state = 8;
								continue $sm1;
							}
							case 7: {
								$state = -1;
								$finally1.call(this);
								$state = 5;
								continue $sm1;
							}
							case 5: {
								$state = -1;
								break $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, function() {
					try {
						switch ($state) {
							case 2:
							case 3:
							case 4: {
								try {
									break;
								}
								finally {
									$finally.call(this);
								}
							}
							case 6:
							case 7:
							case 8: {
								try {
									break;
								}
								finally {
									$finally1.call(this);
								}
							}
						}
					}
					finally {
						$state = -1;
					}
				}, this);
			}).call(this, name);
		}, this);
	};
	$Franca_Localization_Localizer.$getAssemblies = function() {
		if (ss.isNullOrUndefined($Franca_Localization_Localizer.$_assemblies)) {
			$Franca_Localization_Localizer.$_assemblies = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [Object]))();
		}
		else {
			$Franca_Localization_Localizer.$_assemblies.clear();
		}
		$Franca_Localization_Localizer.$addAssemblyIfNotNull($Franca_Localization_Localizer.$_assemblies, $Franca_FrancaFramework.get_entryAssembly());
		// assembly that called FrancaFramework.Init (should be the game exe)
		$Franca_Localization_Localizer.$addAssemblyIfNotNull($Franca_Localization_Localizer.$_assemblies, $asm);
		// franca
		$Franca_Localization_Localizer.$addAssemblyIfNotNull($Franca_Localization_Localizer.$_assemblies, ss.getTypeAssembly(Franca.Calc));
		// franca common
		if (ss.isValue($Franca_Localization_Localizer.guiManager)) {
			var $t1 = ss.getEnumerator($Franca_Localization_Localizer.guiManager.get_assemblies());
			try {
				while ($t1.moveNext()) {
					var ass = $t1.current();
					$Franca_Localization_Localizer.$addAssemblyIfNotNull($Franca_Localization_Localizer.$_assemblies, ass);
				}
			}
			finally {
				$t1.dispose();
			}
		}
		var $t2 = $Franca_Localization_Localizer.searchAssemblies.getEnumerator();
		try {
			while ($t2.moveNext()) {
				var ass1 = $t2.current();
				$Franca_Localization_Localizer.$_assemblies.add(ass1);
			}
		}
		finally {
			$t2.dispose();
		}
		return $Franca_Localization_Localizer.$_assemblies;
	};
	$Franca_Localization_Localizer.$addAssemblyIfNotNull = function(assemblies, assembly) {
		if (ss.isValue(assembly)) {
			assemblies.add(assembly);
		}
	};
	global.Franca.Localization.Localizer = $Franca_Localization_Localizer;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mode7.DynamicMode7Texture
	var $Franca_Mode7_DynamicMode7Texture = function(texture, zOrder, repeats) {
		$Franca_Mode7_DynamicMode7Texture.$ctor1.call(this, texture, zOrder, Franca.Vector2.zero, repeats);
	};
	$Franca_Mode7_DynamicMode7Texture.__typeName = 'Franca.Mode7.DynamicMode7Texture';
	$Franca_Mode7_DynamicMode7Texture.$ctor1 = function(texture, zOrder, offset, repeats) {
		this.$renderTarget = null;
		this.$2$OnUpdateField = null;
		this.$disposed = false;
		$Franca_Mode7_Mode7Texture.$ctor2.call(this, new $Franca_SubTexture(texture), zOrder, offset, repeats);
		this.$renderTarget = texture;
	};
	$Franca_Mode7_DynamicMode7Texture.$ctor2 = function(width, height, mipmapped, zOrder, repeats) {
		$Franca_Mode7_DynamicMode7Texture.$ctor3.call(this, width, height, mipmapped, zOrder, Franca.Vector2.zero, repeats);
	};
	$Franca_Mode7_DynamicMode7Texture.$ctor3 = function(width, height, mipmapped, zOrder, offset, repeats) {
		$Franca_Mode7_DynamicMode7Texture.$ctor1.call(this, new $Franca_RenderTarget(width, height, mipmapped), zOrder, offset, repeats);
	};
	global.Franca.Mode7.DynamicMode7Texture = $Franca_Mode7_DynamicMode7Texture;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mode7.EntityDrawMode
	var $Franca_Mode7_EntityDrawMode = function() {
	};
	$Franca_Mode7_EntityDrawMode.__typeName = 'Franca.Mode7.EntityDrawMode';
	global.Franca.Mode7.EntityDrawMode = $Franca_Mode7_EntityDrawMode;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mode7.HorizonTexture
	var $Franca_Mode7_HorizonTexture = function(texture, zOrder, verticalOffset, parallaxSpeed) {
		this.texture = null;
		this.zOrder = 0;
		this.parallaxSpeed = 0;
		this.verticalOffset = 0;
		this.texture = texture;
		this.zOrder = zOrder;
		this.parallaxSpeed = parallaxSpeed;
		this.verticalOffset = verticalOffset;
	};
	$Franca_Mode7_HorizonTexture.__typeName = 'Franca.Mode7.HorizonTexture';
	$Franca_Mode7_HorizonTexture.$ctor1 = function(texture, zOrder, verticalOffset, parallaxSpeed) {
		$Franca_Mode7_HorizonTexture.call(this, new $Franca_SubTexture(texture), zOrder, verticalOffset, parallaxSpeed);
	};
	global.Franca.Mode7.HorizonTexture = $Franca_Mode7_HorizonTexture;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mode7.IMode7Entity
	var $Franca_Mode7_IMode7Entity = function() {
	};
	$Franca_Mode7_IMode7Entity.__typeName = 'Franca.Mode7.IMode7Entity';
	global.Franca.Mode7.IMode7Entity = $Franca_Mode7_IMode7Entity;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mode7.Mode7
	var $Franca_Mode7_Mode7 = function(container, effect) {
		this.$container = null;
		this.$defaultFogCanvas = null;
		this.$fogCanvas = null;
		this.$fogTexture = null;
		this.$fogData = null;
		this.$textures = null;
		this.$horizons = null;
		this.$clearTex = null;
		this.$effect = null;
		this.$cameraPosition = new Franca.Vector3.$ctor4(0, 50, 0);
		this.$cameraLookAt = ss.getDefaultValue(Franca.Vector3);
		this.$zNear = 1;
		this.$zFar = 1000000;
		this.$angle = 0;
		this.$fogSpeed = 1;
		this.$horizonSize = 0.5;
		this.$minFogSize = 0.05;
		this.$terrainScale = 1;
		this.$entityScale = 1;
		this.$skyColor = null;
		this.$filter = 12;
		this.$fogEnabled = true;
		this.$skyEnabled = true;
		this.$aspectRatio = 0;
		this.$fov = 90;
		this.$maxHorizonSize = 0.9;
		this.$minHorizonSize = -5;
		this.$lastValidDirection = Franca.Vector3.unitZ;
		this.$fogColor = Franca.Color.white;
		this.$fogWalls = true;
		this.$fogEntities = true;
		this.spriteBatch = null;
		this.entities = null;
		this.vpTerrain = ss.getDefaultValue(Franca.Rectangle);
		this.vpMode7 = ss.getDefaultValue(Franca.Rectangle);
		this.$matTerrain = ss.getDefaultValue(Franca.Matrix4);
		this.$invMatTerrain = ss.getDefaultValue(Franca.Matrix4);
		this.$matEntity = ss.getDefaultValue(Franca.Matrix4);
		this.$invMatEntity = ss.getDefaultValue(Franca.Matrix4);
		this.$transparentEntities = null;
		this.$opaqueEntities = null;
		this.$quads = null;
		this.$quadVertices = null;
		this.$quadIndices = null;
		this.$quadVertSpec = null;
		this.$quadVertBuffer = null;
		this.$quadIndexBuffer = null;
		this.$quadVao = null;
		this.$quadEffect = null;
		this.$drawMode = 0;
		this.$bucket = null;
		this.$disposed = false;
		this.$container = container;
		this.$effect = effect;
		if (effect.get_ready()) {
			if (!effect.get_programs().hasProgram('repeat') || !effect.get_programs().hasProgram('norepeat') || !effect.get_programs().hasProgram('repeat_npot')) {
				throw new $Franca_ShaderException.$ctor1("Mode7 effect did not have one or more of 'repeat', 'repeat_npot', and 'norepeat' programs.");
			}
		}
		else {
			effect.add_onLoad(function(asset) {
				if (!effect.get_programs().hasProgram('repeat') || !effect.get_programs().hasProgram('norepeat') || !effect.get_programs().hasProgram('repeat_npot')) {
					throw new $Franca_ShaderException.$ctor1("Mode7 effect did not have one or more of 'repeat', 'repeat_npot', and 'norepeat' programs.");
				}
			});
		}
		this.entities = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [$Franca_Mode7_IMode7Entity]))();
		this.spriteBatch = new $Franca_SpriteBatch(container.get_graphicsDevice());
		this.$horizons = [];
		this.$textures = [];
		this.createTextures();
		this.$fogCanvas = this.$defaultFogCanvas;
		this.$transparentEntities = [];
		this.$opaqueEntities = [];
		this.$quads = [];
		this.setFogCanvas(null);
		this.$bucket = new $Franca_DrawBucketing_DrawBucket();
	};
	$Franca_Mode7_Mode7.__typeName = 'Franca.Mode7.Mode7';
	$Franca_Mode7_Mode7.mixFogColor = function(baseColor, fogColor) {
		if (fogColor.a === 0) {
			return baseColor;
		}
		else if (fogColor.a === 1) {
			return fogColor;
		}
		if (baseColor.a === 0) {
			return baseColor;
		}
		var baseFull = Franca.ColorHelper.unmultiply$1(baseColor);
		var fogFull = Franca.ColorHelper.unmultiply$1(fogColor);
		return Franca.HdrColor.op_Multiply$1(Franca.HdrColor.lerp(baseFull, fogFull, fogColor.a, false), baseColor.a);
	};
	global.Franca.Mode7.Mode7 = $Franca_Mode7_Mode7;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mode7.Mode7.TransformedEntity
	var $Franca_Mode7_Mode7$TransformedEntity = function() {
		this.entity = null;
		this.position = ss.getDefaultValue(Franca.Vector4);
		this.fogColor = ss.getDefaultValue(Franca.HdrColor);
	};
	$Franca_Mode7_Mode7$TransformedEntity.__typeName = 'Franca.Mode7.Mode7$TransformedEntity';
	$Franca_Mode7_Mode7$TransformedEntity.$ctor1 = function(entity, position, fogColor) {
		this.entity = null;
		this.position = ss.getDefaultValue(Franca.Vector4);
		this.fogColor = ss.getDefaultValue(Franca.HdrColor);
		this.entity = entity;
		this.position = position;
		this.fogColor = fogColor;
	};
	$Franca_Mode7_Mode7$TransformedEntity.getDefaultValue = function() {
		return new $Franca_Mode7_Mode7$TransformedEntity();
	};
	global.Franca.Mode7.Mode7$TransformedEntity = $Franca_Mode7_Mode7$TransformedEntity;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mode7.Mode7Quad
	var $Franca_Mode7_Mode7Quad = function(texture, p0, p1, height) {
		$Franca_Mode7_Mode7Quad.$ctor1.call(this, texture, new Franca.Vector3.$ctor4(p0.x, 0, p0.y), new Franca.Vector3.$ctor4(p1.x, 0, p1.y), height);
	};
	$Franca_Mode7_Mode7Quad.__typeName = 'Franca.Mode7.Mode7Quad';
	$Franca_Mode7_Mode7Quad.$ctor1 = function(texture, p0, p1, height) {
		$Franca_Mode7_Mode7Quad.$ctor2.call(this, texture, new Franca.Vector3.$ctor4(p0.x, p0.y + height, p0.z), new Franca.Vector3.$ctor4(p0.x, p0.y, p0.z), new Franca.Vector3.$ctor4(p1.x, p1.y, p1.z), new Franca.Vector3.$ctor4(p1.x, p1.y + height, p1.z));
	};
	$Franca_Mode7_Mode7Quad.$ctor2 = function(texture, p0, p1, p2, p3) {
		this.texture = null;
		this.p0 = ss.getDefaultValue(Franca.Vector3);
		this.p1 = ss.getDefaultValue(Franca.Vector3);
		this.p2 = ss.getDefaultValue(Franca.Vector3);
		this.p3 = ss.getDefaultValue(Franca.Vector3);
		this.uV0 = ss.getDefaultValue(Franca.Vector2);
		this.uV1 = ss.getDefaultValue(Franca.Vector2);
		this.uV2 = ss.getDefaultValue(Franca.Vector2);
		this.uV3 = ss.getDefaultValue(Franca.Vector2);
		this.texture = texture;
		this.p0 = p0;
		this.p1 = p1;
		this.p2 = p2;
		this.p3 = p3;
		this.setUVs(new Franca.RectangleF.$ctor3(0, 0, texture.source.size.width, texture.source.size.height));
	};
	global.Franca.Mode7.Mode7Quad = $Franca_Mode7_Mode7Quad;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mode7.Mode7Quad.UVType
	var $Franca_Mode7_Mode7Quad$UVType = function() {
	};
	$Franca_Mode7_Mode7Quad$UVType.__typeName = 'Franca.Mode7.Mode7Quad$UVType';
	global.Franca.Mode7.Mode7Quad$UVType = $Franca_Mode7_Mode7Quad$UVType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mode7.Mode7QuadVertexSpec
	var $Franca_Mode7_Mode7QuadVertexSpec = function() {
		$Franca_Vertices_VertexSpec.call(this);
		this.addElement(new $Franca_Vertices_VertexElement('inputPosition', 5126, 4, 3, false));
		this.addElement(new $Franca_Vertices_VertexElement('inputTexCoords', 5126, 4, 2, false));
		this.addElement(new $Franca_Vertices_VertexElement('inputWrapCoords', 5126, 4, 4, false));
		this.addElement(new $Franca_Vertices_VertexElement('inputColor', 5121, 1, 4, true));
	};
	$Franca_Mode7_Mode7QuadVertexSpec.__typeName = 'Franca.Mode7.Mode7QuadVertexSpec';
	global.Franca.Mode7.Mode7QuadVertexSpec = $Franca_Mode7_Mode7QuadVertexSpec;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Mode7.Mode7Texture
	var $Franca_Mode7_Mode7Texture = function(texture, zOrder, repeats) {
		this.repeats = false;
		this.zOrder = 0;
		this.texture = null;
		this.offset = ss.getDefaultValue(Franca.Vector2);
		this.$1$OnBeginRenderField = null;
		this.$1$OnEndRenderField = null;
		this.texture = texture;
		this.repeats = repeats;
		this.zOrder = zOrder;
		this.offset = Franca.Vector2.zero;
	};
	$Franca_Mode7_Mode7Texture.__typeName = 'Franca.Mode7.Mode7Texture';
	$Franca_Mode7_Mode7Texture.$ctor1 = function(texture, zOrder, repeats) {
		$Franca_Mode7_Mode7Texture.call(this, new $Franca_SubTexture(texture), zOrder, repeats);
	};
	$Franca_Mode7_Mode7Texture.$ctor3 = function(texture, zOrder, offset, repeats) {
		$Franca_Mode7_Mode7Texture.$ctor2.call(this, new $Franca_SubTexture(texture), zOrder, offset, repeats);
	};
	$Franca_Mode7_Mode7Texture.$ctor2 = function(texture, zOrder, offset, repeats) {
		this.repeats = false;
		this.zOrder = 0;
		this.texture = null;
		this.offset = ss.getDefaultValue(Franca.Vector2);
		this.$1$OnBeginRenderField = null;
		this.$1$OnEndRenderField = null;
		this.texture = texture;
		this.repeats = repeats;
		this.zOrder = zOrder;
		this.offset = offset;
	};
	global.Franca.Mode7.Mode7Texture = $Franca_Mode7_Mode7Texture;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.VertexArrayObject
	var $Franca_OpenGL_VertexArrayObject = function() {
		this.$curArrayBuffer = null;
		this.$elementBuffer = null;
		this.$calls = null;
		this.$attribs = null;
		this.$calls = [];
		this.$attribs = [];
		this.$create(null);
	};
	$Franca_OpenGL_VertexArrayObject.__typeName = 'Franca.OpenGL.VertexArrayObject';
	$Franca_OpenGL_VertexArrayObject.get_currentProgram = function() {
		return $Franca_OpenGL_VertexArrayObject.$prog;
	};
	$Franca_OpenGL_VertexArrayObject.set_currentProgram = function(value) {
		$Franca_OpenGL_VertexArrayObject.$prog = value;
	};
	global.Franca.OpenGL.VertexArrayObject = $Franca_OpenGL_VertexArrayObject;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.IGLProvider
	var $Franca_OpenGL_WebGL_$IGLProvider = function() {
	};
	$Franca_OpenGL_WebGL_$IGLProvider.__typeName = 'Franca.OpenGL.WebGL.$IGLProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.JSWebGL1
	var $Franca_OpenGL_WebGL_$JSWebGL1 = function() {
	};
	$Franca_OpenGL_WebGL_$JSWebGL1.__typeName = 'Franca.OpenGL.WebGL.$JSWebGL1';
	$Franca_OpenGL_WebGL_$JSWebGL1.get_$context = function() {
		if (ss.isNullOrUndefined($Franca_GraphicsDevice.get_current())) {
			throw new $Franca_GraphicsContextMissingException();
		}
		return ss.cast($Franca_GraphicsDevice.get_current().get_$graphicsDeviceProvider(), $Franca_$JSGraphicsDevice).get_$context();
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.Constants
	var $Franca_OpenGL_WebGL_Constants = function() {
	};
	$Franca_OpenGL_WebGL_Constants.__typeName = 'Franca.OpenGL.WebGL.Constants';
	global.Franca.OpenGL.WebGL.Constants = $Franca_OpenGL_WebGL_Constants;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.GL
	var $Franca_OpenGL_WebGL_GL = function() {
	};
	$Franca_OpenGL_WebGL_GL.__typeName = 'Franca.OpenGL.WebGL.GL';
	$Franca_OpenGL_WebGL_GL.init = function() {
		if ($Franca_OpenGL_WebGL_GL.$initialized) {
			return;
		}
		$Franca_OpenGL_WebGL_GL.$provider = new $Franca_OpenGL_WebGL_$JSWebGL1();
		$Franca_OpenGL_WebGL_GL.$initialized = true;
	};
	$Franca_OpenGL_WebGL_GL.get_canForceES3 = function() {
		if (ss.isNullOrUndefined($Franca_OpenGL_WebGL_GL.$provider)) {
			$Franca_OpenGL_WebGL_GL.init();
		}
		return $Franca_OpenGL_WebGL_GL.$provider.get_$canForceES3();
	};
	$Franca_OpenGL_WebGL_GL.forceES3 = function() {
		if (ss.isNullOrUndefined($Franca_OpenGL_WebGL_GL.$provider)) {
			$Franca_OpenGL_WebGL_GL.init();
		}
		$Franca_OpenGL_WebGL_GL.$provider.$forceES3();
	};
	$Franca_OpenGL_WebGL_GL.get_canForceANGLE = function() {
		if (ss.isNullOrUndefined($Franca_OpenGL_WebGL_GL.$provider)) {
			$Franca_OpenGL_WebGL_GL.init();
		}
		return $Franca_OpenGL_WebGL_GL.$provider.get_$canForceANGLE();
	};
	$Franca_OpenGL_WebGL_GL.forceANGLE = function() {
		if (ss.isNullOrUndefined($Franca_OpenGL_WebGL_GL.$provider)) {
			$Franca_OpenGL_WebGL_GL.init();
		}
		$Franca_OpenGL_WebGL_GL.$provider.$forceANGLE();
	};
	$Franca_OpenGL_WebGL_GL.get_debug = function() {
		return $Franca_OpenGL_WebGL_GL.$1$DebugField;
	};
	$Franca_OpenGL_WebGL_GL.set_debug = function(value) {
		$Franca_OpenGL_WebGL_GL.$1$DebugField = value;
	};
	$Franca_OpenGL_WebGL_GL.throwErrors = function(alwaysCheck) {
		if ($Franca_OpenGL_WebGL_GL.get_debug() || alwaysCheck) {
			var error = new $Franca_OpenGL_WebGL_GLError('OpenGL errors have occurred');
			var code;
			while ((code = $Franca_OpenGL_WebGL_GL.getError()) !== $Franca_OpenGL_WebGL_Constants.nO_ERROR) {
				error.add(code);
			}
			if (error.get_hasErrors()) {
				throw error;
			}
		}
	};
	$Franca_OpenGL_WebGL_GL.getVertexAttribPointerType = function(T) {
		return function() {
			if (ss.referenceEquals(T, Number)) {
				return $Franca_OpenGL_WebGL_Constants.FLOAT;
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return $Franca_OpenGL_WebGL_Constants.unsigneD_SHORT;
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return $Franca_OpenGL_WebGL_Constants.unsigneD_BYTE;
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return $Franca_OpenGL_WebGL_Constants.INT;
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return $Franca_OpenGL_WebGL_Constants.unsigneD_INT;
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return $Franca_OpenGL_WebGL_Constants.SHORT;
			}
			else if (ss.referenceEquals(T, ss.Int32)) {
				return $Franca_OpenGL_WebGL_Constants.BYTE;
			}
			throw new ss.ArgumentException('Cannot get OpenGL type for type ' + ss.getTypeName(T));
		};
	};
	$Franca_OpenGL_WebGL_GL.getShaderHeader = function() {
		return $Franca_OpenGL_WebGL_GL.$provider.$getShaderHeader();
	};
	$Franca_OpenGL_WebGL_GL.getUnclampedFloatingPointFormat = function(inFormat, type, format, pixelType) {
		$Franca_OpenGL_WebGL_GL.$provider.$getUnclampedFloatingPointFormat(inFormat, type, format, pixelType);
	};
	$Franca_OpenGL_WebGL_GL.stencilMask = function(mask) {
		$Franca_OpenGL_WebGL_GL.$provider.$stencilMask(mask);
	};
	$Franca_OpenGL_WebGL_GL.stencilFunc = function(func, sref, mask) {
		$Franca_OpenGL_WebGL_GL.$provider.$stencilFunc(func, sref, mask);
	};
	$Franca_OpenGL_WebGL_GL.stencilOp = function(fail, zfail, zpass) {
		$Franca_OpenGL_WebGL_GL.$provider.$stencilOp(fail, zfail, zpass);
	};
	$Franca_OpenGL_WebGL_GL.clearColor = function(color) {
		$Franca_OpenGL_WebGL_GL.clearColor$1(Franca.Color.op_Implicit(color));
	};
	$Franca_OpenGL_WebGL_GL.bufferData$9 = function(target, data, usage) {
		if (data.type === 0) {
			$Franca_OpenGL_WebGL_GL.bufferData$8(target, data.shorts, usage);
		}
		else {
			$Franca_OpenGL_WebGL_GL.bufferData$7(target, data.ints, usage);
		}
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$9 = function(target, offset, data) {
		if (data.type === 0) {
			$Franca_OpenGL_WebGL_GL.bufferSubData$j(target, offset, data.shorts.get_byteLength(), data.shorts);
		}
		else {
			$Franca_OpenGL_WebGL_GL.bufferSubData$i(target, offset, data.ints.get_byteLength(), data.ints);
		}
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$k = function(target, offset, size, data) {
		if (data.type === 0) {
			$Franca_OpenGL_WebGL_GL.bufferSubData$j(target, offset, size, data.shorts);
		}
		else {
			$Franca_OpenGL_WebGL_GL.bufferSubData$i(target, offset, size, data.ints);
		}
	};
	$Franca_OpenGL_WebGL_GL.bufferData$a = function(target, data, usage) {
		$Franca_OpenGL_WebGL_GL.bufferData(target, data.$getData(), usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$l = function(target, offset, size, data) {
		$Franca_OpenGL_WebGL_GL.bufferSubData$b(target, offset, size, data.$getData());
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$a = function(target, offset, data) {
		$Franca_OpenGL_WebGL_GL.bufferSubData$b(target, offset, data.get_$byteLength(), data.$getData());
	};
	$Franca_OpenGL_WebGL_GL.depthMask = function(writeDepth) {
		$Franca_OpenGL_WebGL_GL.$provider.$depthMask(writeDepth);
	};
	$Franca_OpenGL_WebGL_GL.drawBuffers = function(attachments) {
		$Franca_OpenGL_WebGL_GL.$provider.$drawBuffers(attachments);
	};
	$Franca_OpenGL_WebGL_GL.drawArrays = function(mode, first, count) {
		$Franca_OpenGL_WebGL_GL.$provider.$drawArrays(mode, first, count);
	};
	$Franca_OpenGL_WebGL_GL.createFramebuffer = function() {
		return $Franca_OpenGL_WebGL_GL.$provider.$createFramebuffer();
	};
	$Franca_OpenGL_WebGL_GL.bindFramebuffer = function(target, buffer) {
		$Franca_OpenGL_WebGL_GL.$provider.$bindFramebuffer(target, buffer);
	};
	$Franca_OpenGL_WebGL_GL.createRenderbuffer = function() {
		return $Franca_OpenGL_WebGL_GL.$provider.$createRenderbuffer();
	};
	$Franca_OpenGL_WebGL_GL.bindRenderbuffer = function(target, buffer) {
		$Franca_OpenGL_WebGL_GL.$provider.$bindRenderbuffer(target, buffer);
	};
	$Franca_OpenGL_WebGL_GL.renderbufferStorage = function(target, internalFormat, width, height) {
		$Franca_OpenGL_WebGL_GL.$provider.$renderbufferStorage(target, internalFormat, width, height);
	};
	$Franca_OpenGL_WebGL_GL.framebufferTexture2D = function(target, attachment, texTarget, texture, level) {
		$Franca_OpenGL_WebGL_GL.$provider.$framebufferTexture2D(target, attachment, texTarget, texture, level);
	};
	$Franca_OpenGL_WebGL_GL.framebufferRenderbuffer = function(target, attachment, renderbufferTarget, renderbuffer) {
		$Franca_OpenGL_WebGL_GL.$provider.$framebufferRenderbuffer(target, attachment, renderbufferTarget, renderbuffer);
	};
	$Franca_OpenGL_WebGL_GL.checkFramebufferStatus = function(target) {
		return $Franca_OpenGL_WebGL_GL.$provider.$checkFramebufferStatus(target);
	};
	$Franca_OpenGL_WebGL_GL.deleteFramebuffer = function(framebuffer) {
		$Franca_OpenGL_WebGL_GL.$provider.$deleteFramebuffer(framebuffer);
	};
	$Franca_OpenGL_WebGL_GL.deleteRenderbuffer = function(renderbuffer) {
		$Franca_OpenGL_WebGL_GL.$provider.$deleteRenderbuffer(renderbuffer);
	};
	$Franca_OpenGL_WebGL_GL.cullFace = function(mode) {
		if ($Franca_OpenGL_WebGL_GL.$cullFace !== mode) {
			$Franca_OpenGL_WebGL_GL.$cullFace = mode;
			$Franca_OpenGL_WebGL_GL.$provider.$cullFace(mode);
		}
	};
	$Franca_OpenGL_WebGL_GL.blendEquation = function(mode) {
		if ($Franca_OpenGL_WebGL_GL.$blendEquationRgb !== mode || $Franca_OpenGL_WebGL_GL.$blendEquationAlpha !== mode) {
			$Franca_OpenGL_WebGL_GL.$blendEquationRgb = mode;
			$Franca_OpenGL_WebGL_GL.$blendEquationAlpha = mode;
			$Franca_OpenGL_WebGL_GL.$provider.$blendEquation(mode);
		}
	};
	$Franca_OpenGL_WebGL_GL.blendEquationSeparate = function(modeRgb, modeAlpha) {
		if (modeRgb !== $Franca_OpenGL_WebGL_GL.$blendEquationRgb || modeAlpha !== $Franca_OpenGL_WebGL_GL.$blendEquationAlpha) {
			$Franca_OpenGL_WebGL_GL.$blendEquationRgb = modeRgb;
			$Franca_OpenGL_WebGL_GL.$blendEquationAlpha = modeAlpha;
			$Franca_OpenGL_WebGL_GL.$provider.$blendEquationSeparate(modeRgb, modeAlpha);
		}
	};
	$Franca_OpenGL_WebGL_GL.blendFunc = function(src, dest) {
		if ($Franca_OpenGL_WebGL_GL.$blendSrcRgb !== src || $Franca_OpenGL_WebGL_GL.$blendSrcAlpha !== src || $Franca_OpenGL_WebGL_GL.$blendDstRgb !== dest || $Franca_OpenGL_WebGL_GL.$blendDstAlpha !== dest) {
			$Franca_OpenGL_WebGL_GL.$blendSrcRgb = src;
			$Franca_OpenGL_WebGL_GL.$blendSrcAlpha = src;
			$Franca_OpenGL_WebGL_GL.$blendDstRgb = dest;
			$Franca_OpenGL_WebGL_GL.$blendDstAlpha = dest;
			$Franca_OpenGL_WebGL_GL.$provider.$blendFunc(src, dest);
		}
	};
	$Franca_OpenGL_WebGL_GL.blendFuncSeparate = function(srcRgb, dstRgb, srcAlpha, dstAlpha) {
		if ($Franca_OpenGL_WebGL_GL.$blendSrcRgb !== srcRgb || $Franca_OpenGL_WebGL_GL.$blendSrcAlpha !== srcAlpha || $Franca_OpenGL_WebGL_GL.$blendDstRgb !== dstRgb || $Franca_OpenGL_WebGL_GL.$blendDstAlpha !== dstAlpha) {
			$Franca_OpenGL_WebGL_GL.$blendSrcRgb = srcRgb;
			$Franca_OpenGL_WebGL_GL.$blendSrcAlpha = srcAlpha;
			$Franca_OpenGL_WebGL_GL.$blendDstRgb = dstRgb;
			$Franca_OpenGL_WebGL_GL.$blendDstAlpha = dstAlpha;
			$Franca_OpenGL_WebGL_GL.$provider.$blendFuncSeparate(srcRgb, dstRgb, srcAlpha, dstAlpha);
		}
	};
	$Franca_OpenGL_WebGL_GL.depthFunc = function(func) {
		$Franca_OpenGL_WebGL_GL.$provider.$depthFunc(func);
	};
	$Franca_OpenGL_WebGL_GL.enable = function(target) {
		$Franca_OpenGL_WebGL_GL.$provider.$enable(target);
	};
	$Franca_OpenGL_WebGL_GL.disable = function(target) {
		$Franca_OpenGL_WebGL_GL.$provider.$disable(target);
	};
	$Franca_OpenGL_WebGL_GL.uniformMatrix4 = function(location, transpose, matrix) {
		$Franca_OpenGL_WebGL_GL.$provider.$uniformMatrix4(location, transpose, matrix);
	};
	$Franca_OpenGL_WebGL_GL.uniform1 = function(location, value) {
		$Franca_OpenGL_WebGL_GL.$provider.$uniform1(location, value);
	};
	$Franca_OpenGL_WebGL_GL.uniform1$1 = function(location, value) {
		$Franca_OpenGL_WebGL_GL.$provider.$uniform1$1(location, value);
	};
	$Franca_OpenGL_WebGL_GL.uniform2 = function(location, v0, v1) {
		$Franca_OpenGL_WebGL_GL.$provider.$uniform2(location, v0, v1);
	};
	$Franca_OpenGL_WebGL_GL.uniform2$1 = function(location, v0, v1) {
		$Franca_OpenGL_WebGL_GL.$provider.$uniform2$1(location, v0, v1);
	};
	$Franca_OpenGL_WebGL_GL.uniform3 = function(location, v0, v1, v2) {
		$Franca_OpenGL_WebGL_GL.$provider.$uniform3(location, v0, v1, v2);
	};
	$Franca_OpenGL_WebGL_GL.uniform3$1 = function(location, v0, v1, v2) {
		$Franca_OpenGL_WebGL_GL.$provider.$uniform3$1(location, v0, v1, v2);
	};
	$Franca_OpenGL_WebGL_GL.uniform4 = function(location, v0, v1, v2, v3) {
		$Franca_OpenGL_WebGL_GL.$provider.$uniform4(location, v0, v1, v2, v3);
	};
	$Franca_OpenGL_WebGL_GL.uniform4$1 = function(location, v0, v1, v2, v3) {
		$Franca_OpenGL_WebGL_GL.$provider.$uniform4$1(location, v0, v1, v2, v3);
	};
	$Franca_OpenGL_WebGL_GL.drawElements = function(mode, indexCount, indexType, indexOffsetBytes) {
		$Franca_OpenGL_WebGL_GL.$provider.$drawElements(mode, indexCount, indexType, indexOffsetBytes);
	};
	$Franca_OpenGL_WebGL_GL.texParameter = function(target, pname, param) {
		$Franca_OpenGL_WebGL_GL.$provider.$texParameter(target, pname, param);
	};
	$Franca_OpenGL_WebGL_GL.texParameter$1 = function(target, pname, param) {
		$Franca_OpenGL_WebGL_GL.$provider.$texParameter$1(target, pname, param);
	};
	$Franca_OpenGL_WebGL_GL.activeTexture = function(unit) {
		$Franca_OpenGL_WebGL_GL.$provider.$activeTexture(unit);
	};
	$Franca_OpenGL_WebGL_GL.useProgram$1 = function(program) {
		$Franca_OpenGL_WebGL_GL.$provider.$useProgram$1(program);
	};
	$Franca_OpenGL_WebGL_GL.useProgram = function(program) {
		$Franca_OpenGL_WebGL_GL.$provider.$useProgram(program);
	};
	$Franca_OpenGL_WebGL_GL.viewport = function(rectangle) {
		$Franca_OpenGL_WebGL_GL.$provider.$viewport(rectangle);
	};
	$Franca_OpenGL_WebGL_GL.clearColor$1 = function(color) {
		$Franca_OpenGL_WebGL_GL.$provider.$clearColor(color);
	};
	$Franca_OpenGL_WebGL_GL.clearDepth = function(depth) {
		$Franca_OpenGL_WebGL_GL.$provider.$clearDepth(depth);
	};
	$Franca_OpenGL_WebGL_GL.clearStencil = function(stencil) {
		$Franca_OpenGL_WebGL_GL.$provider.$clearStencil(stencil);
	};
	$Franca_OpenGL_WebGL_GL.clear = function(mask) {
		$Franca_OpenGL_WebGL_GL.$provider.$clear(mask);
	};
	$Franca_OpenGL_WebGL_GL.createShader = function(type) {
		return $Franca_OpenGL_WebGL_GL.$provider.$createShader(type);
	};
	$Franca_OpenGL_WebGL_GL.shaderSource = function(shader, source) {
		$Franca_OpenGL_WebGL_GL.$provider.$shaderSource(shader, source);
	};
	$Franca_OpenGL_WebGL_GL.compileShader = function(shader) {
		$Franca_OpenGL_WebGL_GL.$provider.$compileShader(shader);
	};
	$Franca_OpenGL_WebGL_GL.getShaderParameter = function(shader, pname) {
		return $Franca_OpenGL_WebGL_GL.$provider.$getShaderParameter(shader, pname);
	};
	$Franca_OpenGL_WebGL_GL.getShaderInfoLog = function(shader) {
		return $Franca_OpenGL_WebGL_GL.$provider.$getShaderInfoLog(shader);
	};
	$Franca_OpenGL_WebGL_GL.createProgram = function() {
		return $Franca_OpenGL_WebGL_GL.$provider.$createProgram();
	};
	$Franca_OpenGL_WebGL_GL.attachShader = function(program, shader) {
		$Franca_OpenGL_WebGL_GL.$provider.$attachShader(program, shader);
	};
	$Franca_OpenGL_WebGL_GL.linkProgram = function(program) {
		$Franca_OpenGL_WebGL_GL.$provider.$linkProgram(program);
	};
	$Franca_OpenGL_WebGL_GL.getProgramParameter = function(program, pname) {
		return $Franca_OpenGL_WebGL_GL.$provider.$getProgramParameter(program, pname);
	};
	$Franca_OpenGL_WebGL_GL.getProgramInfoLog = function(program) {
		return $Franca_OpenGL_WebGL_GL.$provider.$getProgramInfoLog(program);
	};
	$Franca_OpenGL_WebGL_GL.getProgramLinkStatus = function(program) {
		return $Franca_OpenGL_WebGL_GL.getProgramParameter(program, $Franca_OpenGL_WebGL_Constants.linK_STATUS) !== 0;
	};
	$Franca_OpenGL_WebGL_GL.getUniformLocation = function(program, name) {
		return $Franca_OpenGL_WebGL_GL.$provider.$getUniformLocation(program, name);
	};
	$Franca_OpenGL_WebGL_GL.getAttribLocation = function(program, name) {
		return $Franca_OpenGL_WebGL_GL.$provider.$getAttribLocation(program, name);
	};
	$Franca_OpenGL_WebGL_GL.createTexture = function() {
		return $Franca_OpenGL_WebGL_GL.$provider.$createTexture();
	};
	$Franca_OpenGL_WebGL_GL.bindTexture = function(target, texture) {
		$Franca_OpenGL_WebGL_GL.$provider.$bindTexture(target, texture);
	};
	$Franca_OpenGL_WebGL_GL.pixelStore = function(pname, param) {
		$Franca_OpenGL_WebGL_GL.$provider.$pixelStore(pname, param);
	};
	$Franca_OpenGL_WebGL_GL.texSubImage2D$3 = function(T) {
		return function(target, level, x, y, width, height, format, type, pixels) {
			$Franca_OpenGL_WebGL_GL.$provider.$texSubImage2D$3(T).call($Franca_OpenGL_WebGL_GL.$provider, target, level, x, y, width, height, format, type, pixels);
		};
	};
	$Franca_OpenGL_WebGL_GL.texSubImage2D = function(target, level, x, y, pixels) {
		$Franca_OpenGL_WebGL_GL.$provider.$texSubImage2D(target, level, x, y, pixels);
	};
	$Franca_OpenGL_WebGL_GL.texSubImage2D$2 = function(target, level, x, y, pixels, premultiplyAlpha) {
		$Franca_OpenGL_WebGL_GL.$provider.$texSubImage2D$2(target, level, x, y, pixels, premultiplyAlpha);
	};
	$Franca_OpenGL_WebGL_GL.texSubImage2D$1 = function(target, level, x, y, canvas, premultiplyAlpha) {
		$Franca_OpenGL_WebGL_GL.$provider.$texSubImage2D$1(target, level, x, y, canvas, premultiplyAlpha);
	};
	$Franca_OpenGL_WebGL_GL.texImage2D$4 = function(T) {
		return function(target, level, internalFormat, width, height, format, type, pixels) {
			$Franca_OpenGL_WebGL_GL.$provider.$texImage2D$4(T).call($Franca_OpenGL_WebGL_GL.$provider, target, level, internalFormat, width, height, format, type, pixels);
		};
	};
	$Franca_OpenGL_WebGL_GL.texImage2D$3 = function(target, level, internalFormat, width, height, format, type) {
		$Franca_OpenGL_WebGL_GL.$provider.$texImage2D$3(target, level, internalFormat, width, height, format, type);
	};
	$Franca_OpenGL_WebGL_GL.texImage2D = function(target, level, internalFormat, pixels) {
		$Franca_OpenGL_WebGL_GL.$provider.$texImage2D(target, level, internalFormat, pixels);
	};
	$Franca_OpenGL_WebGL_GL.texImage2D$2 = function(target, level, internalFormat, pixels, premultiplyAlpha) {
		$Franca_OpenGL_WebGL_GL.$provider.$texImage2D$2(target, level, internalFormat, pixels, premultiplyAlpha);
	};
	$Franca_OpenGL_WebGL_GL.texImage2D$1 = function(target, level, internalFormat, canvas, premultiplyAlpha) {
		$Franca_OpenGL_WebGL_GL.$provider.$texImage2D$1(target, level, internalFormat, canvas, premultiplyAlpha);
	};
	$Franca_OpenGL_WebGL_GL.generateMipmap = function(target) {
		$Franca_OpenGL_WebGL_GL.$provider.$generateMipmap(target);
	};
	$Franca_OpenGL_WebGL_GL.getError = function() {
		return $Franca_OpenGL_WebGL_GL.$provider.$getError();
	};
	$Franca_OpenGL_WebGL_GL.deleteTexture = function(texture) {
		$Franca_OpenGL_WebGL_GL.$provider.$deleteTexture(texture);
	};
	$Franca_OpenGL_WebGL_GL.deleteShader = function(shader) {
		$Franca_OpenGL_WebGL_GL.$provider.$deleteShader(shader);
	};
	$Franca_OpenGL_WebGL_GL.deleteProgram = function(program) {
		$Franca_OpenGL_WebGL_GL.$provider.$deleteProgram(program);
	};
	$Franca_OpenGL_WebGL_GL.detachShader = function(program, shader) {
		$Franca_OpenGL_WebGL_GL.$provider.$detachShader(program, shader);
	};
	$Franca_OpenGL_WebGL_GL.createBuffer = function() {
		return $Franca_OpenGL_WebGL_GL.$provider.$createBuffer();
	};
	$Franca_OpenGL_WebGL_GL.deleteBuffer = function(buffer) {
		$Franca_OpenGL_WebGL_GL.$provider.$deleteBuffer(buffer);
	};
	$Franca_OpenGL_WebGL_GL.deleteBuffers = function(buffers) {
		$Franca_OpenGL_WebGL_GL.$provider.$deleteBuffers(buffers);
	};
	$Franca_OpenGL_WebGL_GL.bufferDataNull = function(target, size, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferDataNull(target, size, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$h = function(T) {
		return function(target, offset, size, data) {
			$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$f(T).call($Franca_OpenGL_WebGL_GL.$provider, target, offset, size, data);
		};
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$c = function(target, offset, size, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$a(target, offset, size, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$d = function(target, offset, size, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$b(target, offset, size, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$i = function(target, offset, size, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$g(target, offset, size, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$e = function(target, offset, size, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$c(target, offset, size, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$j = function(target, offset, size, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$h(target, offset, size, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$g = function(target, offset, size, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$e(target, offset, size, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$f = function(target, offset, size, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$d(target, offset, size, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$b = function(target, offset, size, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$9(target, offset, size, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$6 = function(T) {
		return function(target, offset, data) {
			$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$6(T).call($Franca_OpenGL_WebGL_GL.$provider, target, offset, data);
		};
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$1 = function(target, offset, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$1(target, offset, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$2 = function(target, offset, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$2(target, offset, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$7 = function(target, offset, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$7(target, offset, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$3 = function(target, offset, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$3(target, offset, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$8 = function(target, offset, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$8(target, offset, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$5 = function(target, offset, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$5(target, offset, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData$4 = function(target, offset, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData$4(target, offset, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferSubData = function(target, offset, data) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferSubData(target, offset, data);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$h = function(T) {
		return function(target, size, data, usage) {
			$Franca_OpenGL_WebGL_GL.$provider.$bufferData$f(T).call($Franca_OpenGL_WebGL_GL.$provider, target, size, data, usage);
		};
	};
	$Franca_OpenGL_WebGL_GL.bufferData$c = function(target, size, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$a(target, size, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$d = function(target, size, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$b(target, size, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$i = function(target, size, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$g(target, size, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$e = function(target, size, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$c(target, size, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$j = function(target, size, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$h(target, size, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$g = function(target, size, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$e(target, size, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$f = function(target, size, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$d(target, size, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$b = function(target, size, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$9(target, size, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$6 = function(T) {
		return function(target, data, usage) {
			$Franca_OpenGL_WebGL_GL.$provider.$bufferData$6(T).call($Franca_OpenGL_WebGL_GL.$provider, target, data, usage);
		};
	};
	$Franca_OpenGL_WebGL_GL.bufferData$1 = function(target, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$1(target, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$2 = function(target, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$2(target, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$7 = function(target, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$7(target, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$3 = function(target, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$3(target, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$8 = function(target, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$8(target, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$5 = function(target, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$5(target, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData$4 = function(target, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData$4(target, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bufferData = function(target, data, usage) {
		$Franca_OpenGL_WebGL_GL.$provider.$bufferData(target, data, usage);
	};
	$Franca_OpenGL_WebGL_GL.bindBuffer = function(target, buffer) {
		$Franca_OpenGL_WebGL_GL.$provider.$bindBuffer(target, buffer);
	};
	$Franca_OpenGL_WebGL_GL.enableVertexAttribArray = function(index) {
		$Franca_OpenGL_WebGL_GL.$provider.$enableVertexAttribArray(index);
	};
	$Franca_OpenGL_WebGL_GL.disableVertexAttribArray = function(index) {
		$Franca_OpenGL_WebGL_GL.$provider.$disableVertexAttribArray(index);
	};
	$Franca_OpenGL_WebGL_GL.vertexAttribPointer = function(index, size, type, normalized, stride, offset) {
		$Franca_OpenGL_WebGL_GL.$provider.$vertexAttribPointer(index, size, type, normalized, stride, offset);
	};
	$Franca_OpenGL_WebGL_GL.getParameter = function(pname) {
		switch (pname) {
			case 32970: {
				return $Franca_OpenGL_WebGL_GL.$blendDstAlpha;
			}
			case 32968: {
				return $Franca_OpenGL_WebGL_GL.$blendDstRgb;
			}
			case 32971: {
				return $Franca_OpenGL_WebGL_GL.$blendSrcAlpha;
			}
			case 32969: {
				return $Franca_OpenGL_WebGL_GL.$blendSrcRgb;
			}
			case 2885: {
				return $Franca_OpenGL_WebGL_GL.$cullFace;
			}
			case 32777: {
				return $Franca_OpenGL_WebGL_GL.$blendEquationRgb;
			}
			case 34877: {
				return $Franca_OpenGL_WebGL_GL.$blendEquationAlpha;
			}
		}
		return $Franca_OpenGL_WebGL_GL.$provider.$getParameter(pname);
	};
	global.Franca.OpenGL.WebGL.GL = $Franca_OpenGL_WebGL_GL;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.GLAttributeLocation
	var $Franca_OpenGL_WebGL_GLAttributeLocation = function(location) {
		this.$location = 0;
		this.$location = location;
	};
	$Franca_OpenGL_WebGL_GLAttributeLocation.__typeName = 'Franca.OpenGL.WebGL.GLAttributeLocation';
	$Franca_OpenGL_WebGL_GLAttributeLocation.op_Implicit$1 = function(loc) {
		return new $Franca_OpenGL_WebGL_GLAttributeLocation(loc);
	};
	$Franca_OpenGL_WebGL_GLAttributeLocation.op_Implicit = function(loc) {
		return (ss.isValue(loc) ? loc.$location : 0);
	};
	global.Franca.OpenGL.WebGL.GLAttributeLocation = $Franca_OpenGL_WebGL_GLAttributeLocation;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.GLBuffer
	var $Franca_OpenGL_WebGL_GLBuffer = function(buffer) {
		this.$buffer = null;
		this.$buffer = buffer;
	};
	$Franca_OpenGL_WebGL_GLBuffer.__typeName = 'Franca.OpenGL.WebGL.GLBuffer';
	$Franca_OpenGL_WebGL_GLBuffer.op_Implicit$1 = function(buf) {
		return new $Franca_OpenGL_WebGL_GLBuffer(buf);
	};
	$Franca_OpenGL_WebGL_GLBuffer.op_Implicit = function(buf) {
		return (ss.isValue(buf) ? buf.$buffer : null);
	};
	global.Franca.OpenGL.WebGL.GLBuffer = $Franca_OpenGL_WebGL_GLBuffer;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.GLError
	var $Franca_OpenGL_WebGL_GLError = function(message) {
		this.$errors = null;
		this.$baseMessage = null;
		ss.Exception.call(this);
		this.$baseMessage = message;
		this.$errors = [];
	};
	$Franca_OpenGL_WebGL_GLError.__typeName = 'Franca.OpenGL.WebGL.GLError';
	$Franca_OpenGL_WebGL_GLError.constantToString = function(constant) {
		switch (constant) {
			default: {
				return 'Unknown (' + constant + ')';
			}
			case 1280: {
				return 'Invalid Enum';
			}
			case 1286: {
				return 'Invalid Framebuffer Operation';
			}
			case 1282: {
				return 'Invalid Operation';
			}
			case 1281: {
				return 'Invalid Value';
			}
			case 1285: {
				return 'Out Of Memory';
			}
			case 1284: {
				return 'Stack Underflow';
			}
			case 1283: {
				return 'Stack Overflow';
			}
		}
	};
	global.Franca.OpenGL.WebGL.GLError = $Franca_OpenGL_WebGL_GLError;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.GLFramebuffer
	var $Franca_OpenGL_WebGL_GLFramebuffer = function(tex) {
		this.$tex = null;
		this.$tex = tex;
	};
	$Franca_OpenGL_WebGL_GLFramebuffer.__typeName = 'Franca.OpenGL.WebGL.GLFramebuffer';
	$Franca_OpenGL_WebGL_GLFramebuffer.op_Implicit$1 = function(t) {
		return new $Franca_OpenGL_WebGL_GLFramebuffer(t);
	};
	$Franca_OpenGL_WebGL_GLFramebuffer.op_Implicit = function(t) {
		return (ss.isValue(t) ? t.$tex : null);
	};
	global.Franca.OpenGL.WebGL.GLFramebuffer = $Franca_OpenGL_WebGL_GLFramebuffer;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.GLGetParameterInt
	var $Franca_OpenGL_WebGL_GLGetParameterInt = function() {
	};
	$Franca_OpenGL_WebGL_GLGetParameterInt.__typeName = 'Franca.OpenGL.WebGL.GLGetParameterInt';
	global.Franca.OpenGL.WebGL.GLGetParameterInt = $Franca_OpenGL_WebGL_GLGetParameterInt;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.GLProgram
	var $Franca_OpenGL_WebGL_GLProgram = function(program) {
		this.$program = null;
		this.$program = program;
	};
	$Franca_OpenGL_WebGL_GLProgram.__typeName = 'Franca.OpenGL.WebGL.GLProgram';
	$Franca_OpenGL_WebGL_GLProgram.op_Implicit$1 = function(s) {
		return new $Franca_OpenGL_WebGL_GLProgram(s);
	};
	$Franca_OpenGL_WebGL_GLProgram.op_Implicit = function(s) {
		return (ss.isValue(s) ? s.$program : null);
	};
	global.Franca.OpenGL.WebGL.GLProgram = $Franca_OpenGL_WebGL_GLProgram;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.GLRenderbuffer
	var $Franca_OpenGL_WebGL_GLRenderbuffer = function(tex) {
		this.$tex = null;
		this.$tex = tex;
	};
	$Franca_OpenGL_WebGL_GLRenderbuffer.__typeName = 'Franca.OpenGL.WebGL.GLRenderbuffer';
	$Franca_OpenGL_WebGL_GLRenderbuffer.op_Implicit$1 = function(t) {
		return new $Franca_OpenGL_WebGL_GLRenderbuffer(t);
	};
	$Franca_OpenGL_WebGL_GLRenderbuffer.op_Implicit = function(t) {
		return (ss.isValue(t) ? t.$tex : null);
	};
	global.Franca.OpenGL.WebGL.GLRenderbuffer = $Franca_OpenGL_WebGL_GLRenderbuffer;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.GLShader
	var $Franca_OpenGL_WebGL_GLShader = function(shader) {
		this.$shader = null;
		this.$shader = shader;
	};
	$Franca_OpenGL_WebGL_GLShader.__typeName = 'Franca.OpenGL.WebGL.GLShader';
	$Franca_OpenGL_WebGL_GLShader.op_Implicit$1 = function(s) {
		return new $Franca_OpenGL_WebGL_GLShader(s);
	};
	$Franca_OpenGL_WebGL_GLShader.op_Implicit = function(s) {
		return (ss.isValue(s) ? s.$shader : null);
	};
	global.Franca.OpenGL.WebGL.GLShader = $Franca_OpenGL_WebGL_GLShader;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.GLTexture
	var $Franca_OpenGL_WebGL_GLTexture = function(tex) {
		this.$tex = null;
		this.$tex = tex;
	};
	$Franca_OpenGL_WebGL_GLTexture.__typeName = 'Franca.OpenGL.WebGL.GLTexture';
	$Franca_OpenGL_WebGL_GLTexture.op_Implicit$1 = function(t) {
		return new $Franca_OpenGL_WebGL_GLTexture(t);
	};
	$Franca_OpenGL_WebGL_GLTexture.op_Implicit = function(t) {
		return (ss.isValue(t) ? t.$tex : null);
	};
	global.Franca.OpenGL.WebGL.GLTexture = $Franca_OpenGL_WebGL_GLTexture;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.OpenGL.WebGL.GLUniformLocation
	var $Franca_OpenGL_WebGL_GLUniformLocation = function(location) {
		this.$location = null;
		this.$location = location;
	};
	$Franca_OpenGL_WebGL_GLUniformLocation.__typeName = 'Franca.OpenGL.WebGL.GLUniformLocation';
	$Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit$1 = function(loc) {
		return new $Franca_OpenGL_WebGL_GLUniformLocation(loc);
	};
	$Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit = function(loc) {
		return (ss.isValue(loc) ? loc.$location : null);
	};
	global.Franca.OpenGL.WebGL.GLUniformLocation = $Franca_OpenGL_WebGL_GLUniformLocation;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.IPngDecompressor
	var $Franca_Png_$IPngDecompressor = function() {
	};
	$Franca_Png_$IPngDecompressor.__typeName = 'Franca.Png.$IPngDecompressor';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.JSPngDecompressor
	var $Franca_Png_$JSPngDecompressor = function() {
		this.$puffAvailable = false;
		this.$type = 0;
		this.$puffAvailable = $Franca_Png_$JSPngDecompressor.$testPuff();
		var compressorStrings = [];
		if (this.$puffAvailable) {
			compressorStrings.push('Puff');
		}
		if (compressorStrings.length === 0) {
			compressorStrings.push('None');
		}
		console.log('PNG decompressors available: ' + ss.arrayFromEnumerable(compressorStrings).join(', '));
		if (this.$puffAvailable) {
			console.log('Using Puff (managed puff.c) inflate for PNG decompression');
			this.$type = 1;
		}
		else {
			console.log('PNG decompression unavailable');
			this.$type = 0;
		}
	};
	$Franca_Png_$JSPngDecompressor.__typeName = 'Franca.Png.$JSPngDecompressor';
	$Franca_Png_$JSPngDecompressor.$testPuff = function() {
		try {
			return $Franca_Png_$JSPngDecompressor.$testPuffInner();
		}
		catch ($t1) {
			return false;
		}
	};
	$Franca_Png_$JSPngDecompressor.$testPuffInner = function() {
		var data = Franca.Compression.Deflate.inflate(new Franca.BinaryData.$ctor3($Franca_Png_$JSPngDecompressor.$testData), 0);
		var result = Franca.Text.UTF8.fromBinaryData(data, true);
		return ss.referenceEquals(result, $Franca_Png_$JSPngDecompressor.$testString);
	};
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.Adam7
	var $Franca_Png_Adam7 = function() {
	};
	$Franca_Png_Adam7.__typeName = 'Franca.Png.Adam7';
	$Franca_Png_Adam7.getPassWidth = function(pass, width) {
		switch (pass) {
			case 0: {
				return ss.Int32.div(width + 7, 8);
			}
			case 1: {
				return ss.Int32.div(width + 3, 8);
			}
			case 2: {
				return ss.Int32.div(width + 3, 4);
			}
			case 3: {
				return ss.Int32.div(width + 1, 4);
			}
			case 4: {
				return ss.Int32.div(width + 1, 2);
			}
			case 5: {
				return ss.Int32.div(width, 2);
			}
			case 6: {
				return width;
			}
			default: {
				throw new ss.ArgumentException(ss.formatString('Not a valid Adam7 pass {0}', System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, pass)));
			}
		}
	};
	$Franca_Png_Adam7.getPassHeight = function(pass, height) {
		switch (pass) {
			case 0: {
				return ss.Int32.div(height + 7, 8);
			}
			case 1: {
				return ss.Int32.div(height + 7, 8);
			}
			case 2: {
				return ss.Int32.div(height + 3, 8);
			}
			case 3: {
				return ss.Int32.div(height + 3, 4);
			}
			case 4: {
				return ss.Int32.div(height + 1, 4);
			}
			case 5: {
				return ss.Int32.div(height + 1, 2);
			}
			case 6: {
				return ss.Int32.div(height, 2);
			}
			default: {
				throw new ss.ArgumentException(ss.formatString('Not a valid Adam7 pass {0}', System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, pass)));
			}
		}
	};
	$Franca_Png_Adam7.getPassStepX = function(pass) {
		switch (pass) {
			case 0: {
				return 8;
			}
			case 1: {
				return 8;
			}
			case 2: {
				return 4;
			}
			case 3: {
				return 4;
			}
			case 4: {
				return 2;
			}
			case 5: {
				return 2;
			}
			case 6: {
				return 1;
			}
			default: {
				throw new ss.ArgumentException(ss.formatString('Not a valid Adam7 pass {0}', System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, pass)));
			}
		}
	};
	$Franca_Png_Adam7.getPassStepY = function(pass) {
		switch (pass) {
			case 0: {
				return 8;
			}
			case 1: {
				return 8;
			}
			case 2: {
				return 8;
			}
			case 3: {
				return 4;
			}
			case 4: {
				return 4;
			}
			case 5: {
				return 2;
			}
			case 6: {
				return 2;
			}
			default: {
				throw new ss.ArgumentException(ss.formatString('Not a valid Adam7 pass {0}', System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, pass)));
			}
		}
	};
	$Franca_Png_Adam7.getPassOffsetX = function(pass) {
		switch (pass) {
			case 0: {
				return 0;
			}
			case 1: {
				return 4;
			}
			case 2: {
				return 0;
			}
			case 3: {
				return 2;
			}
			case 4: {
				return 0;
			}
			case 5: {
				return 1;
			}
			case 6: {
				return 0;
			}
			default: {
				throw new ss.ArgumentException(ss.formatString('Not a valid Adam7 pass {0}', System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, pass)));
			}
		}
	};
	$Franca_Png_Adam7.getPassOffsetY = function(pass) {
		switch (pass) {
			case 0: {
				return 0;
			}
			case 1: {
				return 0;
			}
			case 2: {
				return 4;
			}
			case 3: {
				return 0;
			}
			case 4: {
				return 2;
			}
			case 5: {
				return 0;
			}
			case 6: {
				return 1;
			}
			default: {
				throw new ss.ArgumentException(ss.formatString('Not a valid Adam7 pass {0}', System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, pass)));
			}
		}
	};
	global.Franca.Png.Adam7 = $Franca_Png_Adam7;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.AncillaryChunk
	var $Franca_Png_AncillaryChunk = function() {
	};
	$Franca_Png_AncillaryChunk.__typeName = 'Franca.Png.AncillaryChunk';
	$Franca_Png_AncillaryChunk.getDefaultValue = function() {
		return new $Franca_Png_AncillaryChunk();
	};
	global.Franca.Png.AncillaryChunk = $Franca_Png_AncillaryChunk;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.HeaderChunk
	var $Franca_Png_HeaderChunk = function() {
		this.width = 0;
		this.height = 0;
		this.pixelFormat = 0;
		this.compression = 0;
		this.filter = 0;
		this.interlace = 0;
	};
	$Franca_Png_HeaderChunk.__typeName = 'Franca.Png.HeaderChunk';
	$Franca_Png_HeaderChunk.$ctor1 = function(width, height, pixelFormat, compression, filter, interlace) {
		this.width = 0;
		this.height = 0;
		this.pixelFormat = 0;
		this.compression = 0;
		this.filter = 0;
		this.interlace = 0;
		this.width = width;
		this.height = height;
		this.pixelFormat = pixelFormat;
		this.compression = compression;
		this.filter = filter;
		this.interlace = interlace;
	};
	$Franca_Png_HeaderChunk.getDefaultValue = function() {
		return new $Franca_Png_HeaderChunk();
	};
	global.Franca.Png.HeaderChunk = $Franca_Png_HeaderChunk;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.ImgDatChunk
	var $Franca_Png_ImgDatChunk = function() {
		this.writer = null;
	};
	$Franca_Png_ImgDatChunk.__typeName = 'Franca.Png.ImgDatChunk';
	$Franca_Png_ImgDatChunk.$ctor1 = function(writer) {
		this.writer = null;
		if (ss.isNullOrUndefined(writer)) {
			throw new ss.ArgumentNullException('writer');
		}
		this.writer = writer;
	};
	$Franca_Png_ImgDatChunk.getDefaultValue = function() {
		return new $Franca_Png_ImgDatChunk();
	};
	global.Franca.Png.ImgDatChunk = $Franca_Png_ImgDatChunk;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.IPngChunkData
	var $Franca_Png_IPngChunkData$1 = function(T) {
		var $type = function() {
		};
		ss.registerGenericInterfaceInstance($type, $Franca_Png_IPngChunkData$1, [T], { read: null, get_chunkType: null }, function() {
			return [];
		});
		return $type;
	};
	$Franca_Png_IPngChunkData$1.__typeName = 'Franca.Png.IPngChunkData$1';
	ss.initGenericInterface($Franca_Png_IPngChunkData$1, $asm, 1);
	global.Franca.Png.IPngChunkData$1 = $Franca_Png_IPngChunkData$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngChunk
	var $Franca_Png_PngChunk = function() {
	};
	$Franca_Png_PngChunk.__typeName = 'Franca.Png.PngChunk';
	$Franca_Png_PngChunk.read$2 = function(T) {
		return function(reader, dataLen, type) {
			if (dataLen > 2147483647) {
				throw new $Franca_Png_PngFormatException.$ctor1(ss.formatString('PNG chunk length for type {0} exceeded 2GB', System.EnumExtensions.getName($Franca_Png_PngChunkType).call(null, type)));
			}
			return $Franca_Png_PngChunk.read$1(T).call(null, reader, dataLen, type);
		};
	};
	$Franca_Png_PngChunk.read$1 = function(T) {
		return function(reader, dataLen, type) {
			return $Franca_Png_PngChunk.read$3(T).call(null, reader, ss.getDefaultValue(T), dataLen, type);
		};
	};
	$Franca_Png_PngChunk.read$3 = function(T) {
		return function(reader, data, dataLen, type) {
			if (ss.isNullOrUndefined(reader)) {
				throw new ss.ArgumentNullException('reader');
			}
			if (ss.isValue(data.get_chunkType()) && type !== ss.unbox(data.get_chunkType())) {
				throw new $Franca_Png_PngFormatException.$ctor1(ss.formatString('Unexpected type for PNG chunk {0}, expected {1}', System.EnumExtensions.getName($Franca_Png_PngChunkType).call(null, type), System.EnumExtensions.getName($Franca_Png_PngChunkType).call(null, ss.unbox(data.get_chunkType()))));
			}
			data = data.read(reader, dataLen);
			var crc = reader.readInt32$1(1);
			return new (ss.makeGenericType($Franca_Png_PngChunk$1, [T]).$ctor1)(type, data, crc);
		};
	};
	$Franca_Png_PngChunk.read = function(T) {
		return function(reader) {
			if (ss.isNullOrUndefined(reader)) {
				throw new ss.ArgumentNullException('reader');
			}
			var dataLen = reader.readUInt32$1(1);
			var type = reader.readUInt32$1(1);
			return $Franca_Png_PngChunk.read$2(T).call(null, reader, dataLen, type);
		};
	};
	$Franca_Png_PngChunk.readChunkInfo = function(reader, len, type) {
		if (ss.isNullOrUndefined(reader)) {
			throw new ss.ArgumentNullException('reader');
		}
		var dataLen = reader.readUInt32$1(1);
		type.$ = reader.readUInt32$1(1);
		if (dataLen > 2147483647) {
			throw new $Franca_Png_PngFormatException.$ctor1(ss.formatString('PNG chunk length for type {0} exceeded 2GB', System.EnumExtensions.getName($Franca_Png_PngChunkType).call(null, type.$)));
		}
		len.$ = dataLen;
	};
	$Franca_Png_PngChunk.readCrc = function(reader) {
		if (ss.isNullOrUndefined(reader)) {
			throw new ss.ArgumentNullException('reader');
		}
		return reader.readInt32$1(1);
	};
	global.Franca.Png.PngChunk = $Franca_Png_PngChunk;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngChunk
	var $Franca_Png_PngChunk$1 = function(T) {
		var $type = function() {
			this.type = 0;
			this.data = ss.getDefaultValue(T);
			this.crc = 0;
		};
		$type.$ctor1 = function(type, data, crc) {
			this.type = 0;
			this.data = ss.getDefaultValue(T);
			this.crc = 0;
			this.type = type;
			this.data = data;
			this.crc = crc;
		};
		$type.getDefaultValue = function() {
			return new $type();
		};
		ss.registerGenericClassInstance($type, $Franca_Png_PngChunk$1, [T], {
			getHashCode: function() {
				var h = this.type;
				h = h * 397 ^ ss.getHashCode(this.data);
				h = h * 397 ^ this.crc;
				return h;
			},
			equals: function(o) {
				if (!ss.isInstanceOfType(o, $type)) {
					return false;
				}
				return this.type === o.type && ss.equals(this.data, o.data) && this.crc === o.crc;
			}
		}, function() {
			return null;
		}, function() {
			return [];
		});
		$type.__class = false;
		return $type;
	};
	$Franca_Png_PngChunk$1.__typeName = 'Franca.Png.PngChunk$1';
	ss.initGenericClass($Franca_Png_PngChunk$1, $asm, 1);
	global.Franca.Png.PngChunk$1 = $Franca_Png_PngChunk$1;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngChunkType
	var $Franca_Png_PngChunkType = function() {
	};
	$Franca_Png_PngChunkType.__typeName = 'Franca.Png.PngChunkType';
	global.Franca.Png.PngChunkType = $Franca_Png_PngChunkType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngCompressionMethod
	var $Franca_Png_PngCompressionMethod = function() {
	};
	$Franca_Png_PngCompressionMethod.__typeName = 'Franca.Png.PngCompressionMethod';
	global.Franca.Png.PngCompressionMethod = $Franca_Png_PngCompressionMethod;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngData
	var $Franca_Png_PngData = function() {
		this.palette = null;
		this.data = null;
		this.format = 0;
		this.width = 0;
		this.height = 0;
	};
	$Franca_Png_PngData.__typeName = 'Franca.Png.PngData';
	$Franca_Png_PngData.$ctor2 = function(source) {
		this.palette = null;
		this.data = null;
		this.format = 0;
		this.width = 0;
		this.height = 0;
		var palCopy = new Array(source.palette.length);
		for (var i = 0; i < source.palette.length; i++) {
			palCopy[i] = source.palette[i];
		}
		var dataCopy = new Franca.BinaryData.$ctor5(source.data.get_length());
		Franca.BinaryData.blockCopy(source.data, 0, dataCopy, 0, source.data.get_length());
		$Franca_Png_PngData.create(this, source.format, source.width, source.height, palCopy, dataCopy);
	};
	$Franca_Png_PngData.$ctor3 = function(format, width, height, palette, data) {
		this.palette = null;
		this.data = null;
		this.format = 0;
		this.width = 0;
		this.height = 0;
		$Franca_Png_PngData.create(this, format, width, height, palette, data);
	};
	$Franca_Png_PngData.$ctor1 = function(data) {
		this.palette = null;
		this.data = null;
		this.format = 0;
		this.width = 0;
		this.height = 0;
		{
			var stream = new Franca.BinaryStream.$ctor3(data, false);
			try {
				{
					var reader = new Franca.BinDataStreamReader(stream, 0);
					try {
						$Franca_Png_PngImage.read$2(reader, this);
					}
					finally {
						if (ss.isValue(reader)) {
							reader.dispose();
						}
					}
				}
			}
			finally {
				if (ss.isValue(stream)) {
					stream.dispose();
				}
			}
		}
	};
	$Franca_Png_PngData.create = function(png, format, width, height, palette, pixels) {
		png.format = format;
		png.width = width;
		png.height = height;
		png.palette = palette;
		png.data = pixels;
	};
	global.Franca.Png.PngData = $Franca_Png_PngData;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngDecompressor
	var $Franca_Png_PngDecompressor = function() {
	};
	$Franca_Png_PngDecompressor.__typeName = 'Franca.Png.PngDecompressor';
	$Franca_Png_PngDecompressor.get_isAvailable = function() {
		return $Franca_Png_PngDecompressor.$1$IsAvailableField;
	};
	$Franca_Png_PngDecompressor.set_isAvailable = function(value) {
		$Franca_Png_PngDecompressor.$1$IsAvailableField = value;
	};
	$Franca_Png_PngDecompressor.inflate = function(data) {
		if (!$Franca_Png_PngDecompressor.get_isAvailable()) {
			throw new ss.InvalidOperationException('PNG decompression is not available on this platform');
		}
		return $Franca_Png_PngDecompressor.$provider.$inflate(data);
	};
	global.Franca.Png.PngDecompressor = $Franca_Png_PngDecompressor;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngFilterAlgorithm
	var $Franca_Png_PngFilterAlgorithm = function() {
	};
	$Franca_Png_PngFilterAlgorithm.__typeName = 'Franca.Png.PngFilterAlgorithm';
	global.Franca.Png.PngFilterAlgorithm = $Franca_Png_PngFilterAlgorithm;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngFormatException
	var $Franca_Png_PngFormatException = function() {
		ss.Exception.call(this);
	};
	$Franca_Png_PngFormatException.__typeName = 'Franca.Png.PngFormatException';
	$Franca_Png_PngFormatException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_Png_PngFormatException.$ctor2 = function(message, inner) {
		ss.Exception.call(this, message, inner);
	};
	global.Franca.Png.PngFormatException = $Franca_Png_PngFormatException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngImage
	var $Franca_Png_PngImage = function() {
	};
	$Franca_Png_PngImage.__typeName = 'Franca.Png.PngImage';
	$Franca_Png_PngImage.read$1 = function(stream) {
		var reader = new Franca.BinDataStreamReader(stream, 1);
		try {
			return $Franca_Png_PngImage.read(reader);
		}
		finally {
			if (ss.isValue(reader)) {
				reader.dispose();
			}
		}
	};
	$Franca_Png_PngImage.read = function(reader) {
		var png = new $Franca_Png_PngData();
		$Franca_Png_PngImage.read$2(reader, png);
		return png;
	};
	$Franca_Png_PngImage.read$2 = function(reader, png) {
		if (!$Franca_Png_PngDecompressor.get_isAvailable()) {
			throw new ss.InvalidOperationException('Unable to load PNG file: PNG decompression not available');
		}
		try {
			if (!$Franca_Png_PngImage.isPng(reader)) {
				throw new $Franca_Png_PngFormatException.$ctor1('Stream was not a valid PNG file');
			}
			var header = $Franca_Png_PngChunk.read($Franca_Png_HeaderChunk).call(null, reader).data;
			var isIndexed = header.pixelFormat >= 769 && header.pixelFormat <= 776;
			var palette = null;
			var compressedData;
			var type = {};
			{
				var stream = new Franca.BinaryStream();
				try {
					{
						var writer = new Franca.BinDataStreamWriter(stream, 2);
						try {
							do {
								var len = {};
								$Franca_Png_PngChunk.readChunkInfo(reader, len, type);
								if (isIndexed && type.$ === 1229209940 && ss.isNullOrUndefined(palette)) {
									throw new $Franca_Png_PngFormatException.$ctor1('PNG image data chunk found before palette chunk in indexed color image');
								}
								switch (type.$) {
									case 1229472850: {
										throw new $Franca_Png_PngFormatException.$ctor1('Unexpected duplicate header chunk in PNG image');
									}
									default: {
										$Franca_Png_PngChunk.read$1($Franca_Png_AncillaryChunk).call(null, reader, len.$, type.$);
										break;
									}
									case 1347179589: {
										palette = $Franca_Png_PngImage.$readPaletteChunk(reader, len.$, type.$);
										break;
									}
									case 1229209940: {
										$Franca_Png_PngImage.$readImageDataChunk(reader, len.$, type.$, writer);
										break;
									}
								}
							} while (type.$ !== 1229278788);
							compressedData = stream.toBinary();
						}
						finally {
							if (ss.isValue(writer)) {
								writer.dispose();
							}
						}
					}
				}
				finally {
					if (ss.isValue(stream)) {
						stream.dispose();
					}
				}
			}
			var result = $Franca_Png_PngImage.$readImageData($Franca_Png_PngDecompressor.inflate(compressedData), header);
			//
			//OutputTemp("test.tga", header.PixelFormat, header.Width, header.Height, result);
			$Franca_Png_PngData.create(png, header.pixelFormat, header.width, header.height, palette, result);
		}
		catch ($t1) {
			$t1 = ss.Exception.wrap($t1);
			if (ss.isInstanceOfType($t1, $Franca_Png_PngFormatException)) {
				throw $t1;
			}
			else {
				var e = $t1;
				throw new $Franca_Png_PngFormatException.$ctor2('Unable to load PNG file: ' + e.get_message(), e);
			}
		}
	};
	$Franca_Png_PngImage.$readImageData = function(data, header) {
		switch (header.interlace) {
			default: {
				throw new $Franca_Png_PngFormatException.$ctor1(ss.formatString('Unknown PNG interlace method {0}', System.EnumExtensions.getName($Franca_Png_PngInterlaceMethod).call(null, header.interlace)));
			}
			case 0: {
				var offset = {};
				return $Franca_Png_PngImage.$readImageData$1(data, 0, header.pixelFormat, header.width, header.height, offset);
			}
			case 1: {
				return $Franca_Png_PngImage.$readImageDataInterlaced(data, header);
			}
		}
	};
	$Franca_Png_PngImage.$readImageDataInterlaced = function(data, header) {
		var offset = { $: 0 };
		var scanlineByteSize = $Franca_Png_PngPixelFormatExtensions.getScanlineByteSize(header.pixelFormat, header.width);
		var result = new Franca.BinaryData.$ctor5(header.height * scanlineByteSize);
		var bpp = $Franca_Png_PngPixelFormatExtensions.getBitsPerPixel(header.pixelFormat);
		var bytesPerPixel = ss.Int32.div(bpp, 8);
		for (var pass = 0; pass < 7; pass++) {
			var subWidth = $Franca_Png_Adam7.getPassWidth(pass, header.width);
			var subHeight = $Franca_Png_Adam7.getPassHeight(pass, header.height);
			if (subWidth <= 0 || subHeight <= 0) {
				continue;
			}
			var subImage = $Franca_Png_PngImage.$readImageData$1(data, offset.$, header.pixelFormat, subWidth, subHeight, offset);
			//OutputTemp("test" + pass + ".tga", header.PixelFormat, subWidth, subHeight, subImage);
			if (bytesPerPixel > 0) {
				var stepx = $Franca_Png_Adam7.getPassStepX(pass);
				var stepy = $Franca_Png_Adam7.getPassStepY(pass);
				var offx = $Franca_Png_Adam7.getPassOffsetX(pass);
				var offy = $Franca_Png_Adam7.getPassOffsetY(pass);
				var xstepBytes = (stepx - 1) * bytesPerPixel;
				for (var y = 0, srci = 0; y < subHeight; y++) {
					var dsti = (y * stepy + offy) * scanlineByteSize;
					dsti += offx * bytesPerPixel;
					for (var x = 0; x < subWidth; x++) {
						var end = srci + bytesPerPixel;
						for (; srci < end; srci++, dsti++) {
							result.set_item(dsti, subImage.get_item(srci));
						}
						dsti += xstepBytes;
					}
				}
			}
			else {
				var stepx1 = $Franca_Png_Adam7.getPassStepX(pass);
				var stepy1 = $Franca_Png_Adam7.getPassStepY(pass);
				var offx1 = $Franca_Png_Adam7.getPassOffsetX(pass);
				var offy1 = $Franca_Png_Adam7.getPassOffsetY(pass);
				var subScanlineByteSize = $Franca_Png_PngPixelFormatExtensions.getScanlineByteSize(header.pixelFormat, subWidth);
				var srcScanStart = 0;
				var dstScanStart = offy1 * scanlineByteSize;
				var dstScanStep = stepy1 * scanlineByteSize;
				var mask, bitStep;
				if (bpp === 4) {
					mask = 15;
					//0b1111
					bitStep = 4;
				}
				else if (bpp === 2) {
					mask = 3;
					//0b11
					bitStep = 2;
				}
				else if (bpp === 1) {
					mask = 1;
					//0b1
					bitStep = 1;
				}
				else {
					throw new $Franca_Png_PngFormatException.$ctor1('Bad PNG bits per pixel ' + System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, bpp));
				}
				var bitWidth = subWidth * bitStep;
				var dstBitStep = stepx1 * bitStep;
				for (var y1 = 0; y1 < subHeight; y1++, srcScanStart += subScanlineByteSize, dstScanStart += dstScanStep) {
					for (var xbits = 0, dstx = offx1; xbits < bitWidth; xbits += bitStep, dstx += dstBitStep) {
						$Franca_Png_PngImage.$setPixelBits(subImage, xbits, srcScanStart, result, dstx, dstScanStart, bpp, mask);
					}
				}
			}
		}
		return result;
	};
	$Franca_Png_PngImage.$setPixelBits = function(source, srcbits, srcScanStart, dest, dstbits, dstScanStart, bpp, mask) {
		var srcShift = srcbits % 8;
		var srcByte = ss.Int32.div(srcbits, 8);
		var srcMask = mask << srcShift;
		var srcVal = (source.get_item(srcByte) & srcMask) >> srcShift;
		var dstShift = dstbits % 8;
		var dstByte = ss.Int32.div(dstbits, 8);
		dest.set_item(dstByte, dest.get_item(dstByte) | srcVal << dstShift);
	};
	$Franca_Png_PngImage.$readImageData$1 = function(data, dataOffset, format, width, height, dataOffsetResult) {
		var scanlineByteSize = $Franca_Png_PngPixelFormatExtensions.getScanlineByteSize(format, width);
		var result = new Franca.BinaryData.$ctor5(height * scanlineByteSize);
		var resultOffset = 0;
		for (var y = 0; y < height; y++) {
			var filter = data.get_item(dataOffset);
			dataOffset++;
			//Console.WriteLine(y + ": " + filter);
			dataOffset = $Franca_Png_PngImage.$filterScanline(data, dataOffset, result, resultOffset, filter, scanlineByteSize, format);
			resultOffset += scanlineByteSize;
		}
		dataOffsetResult.$ = dataOffset;
		return result;
	};
	$Franca_Png_PngImage.$filterScanline = function(data, src, result, dst, filter, bytes, format) {
		if (filter === 0) {
			for (var i = 0; i < bytes; i++, src++, dst++) {
				result.set_item(dst, data.get_item(src));
			}
		}
		else if (filter === 1) {
			var bpp = $Franca_Png_PngPixelFormatExtensions.getFilterBpp(format);
			for (var i1 = 0; i1 < bytes; i1++, src++, dst++) {
				var left = ((i1 >= bpp) ? result.get_item(dst - bpp) : 0);
				result.set_item(dst, data.get_item(src) + left & 255);
			}
		}
		else if (filter === 2) {
			var prevScanline = dst - bytes;
			if (prevScanline < 0) {
				src += bytes;
			}
			else {
				for (var i2 = 0; i2 < bytes; i2++, src++, dst++, prevScanline++) {
					result.set_item(dst, data.get_item(src) + result.get_item(prevScanline) & 255);
				}
			}
		}
		else if (filter === 3) {
			var bpp1 = $Franca_Png_PngPixelFormatExtensions.getFilterBpp(format);
			var prevScanline1 = dst - bytes;
			if (prevScanline1 < 0) {
				for (var i3 = 0; i3 < bytes; i3++, src++, dst++, prevScanline1++) {
					var left1 = ((i3 >= bpp1) ? result.get_item(dst - bpp1) : 0);
					result.set_item(dst, data.get_item(src) + (left1 / 2 >> 0) & 255);
				}
			}
			else {
				for (var i4 = 0; i4 < bytes; i4++, src++, dst++, prevScanline1++) {
					var left2 = ((i4 >= bpp1) ? result.get_item(dst - bpp1) : 0);
					result.set_item(dst, data.get_item(src) + ((left2 + result.get_item(prevScanline1)) / 2 >> 0) & 255);
				}
			}
		}
		else {
			// PngScanlineFilter.Paeth
			var bpp2 = $Franca_Png_PngPixelFormatExtensions.getFilterBpp(format);
			var prevScanline2 = dst - bytes;
			if (prevScanline2 < 0) {
				for (var i5 = 0; i5 < bytes; i5++, src++, dst++, prevScanline2++) {
					var a = ((i5 >= bpp2) ? result.get_item(dst - bpp2) : 0);
					// left
					// this rest of the paeth predictor becomes redundant, nearest is always a
					result.set_item(dst, data.get_item(src) + a & 255);
				}
			}
			else {
				for (var i6 = 0; i6 < bytes; i6++, src++, dst++, prevScanline2++) {
					// for paeth predictor function see http://www.libpng.org/pub/png/spec/1.2/PNG-Filters.html
					var a1 = ((i6 >= bpp2) ? result.get_item(dst - bpp2) : 0);
					// left
					var b = result.get_item(prevScanline2);
					// above
					var c = ((i6 >= bpp2) ? result.get_item(prevScanline2 - bpp2) : 0);
					// upper left
					var p = a1 + b - c;
					// initial estimate
					var pa = Math.abs(p - a1);
					// distances to a, b, c
					var pb = Math.abs(p - b);
					var pc = Math.abs(p - c);
					// return nearest of a,b,c,
					// breaking ties in order a,b,c.
					var nearest;
					if (pa <= pb && pa <= pc) {
						nearest = a1;
					}
					else if (pb <= pc) {
						nearest = b;
					}
					else {
						nearest = c;
					}
					result.set_item(dst, data.get_item(src) + nearest & 255);
				}
			}
		}
		return src;
	};
	$Franca_Png_PngImage.$readPaletteChunk = function(reader, dataLen, type) {
		$Franca_Png_PngChunk.read$1($Franca_Png_AncillaryChunk).call(null, reader, dataLen, type);
		return [];
	};
	$Franca_Png_PngImage.$readImageDataChunk = function(reader, dataLen, type, writer) {
		var data = new $Franca_Png_ImgDatChunk.$ctor1(writer);
		$Franca_Png_PngChunk.read$3($Franca_Png_ImgDatChunk).call(null, reader, data, dataLen, type);
	};
	$Franca_Png_PngImage.isPng$2 = function(stream, leaveOpen) {
		var reader = new Franca.BinDataStreamReader.$ctor1(stream, 1, leaveOpen);
		try {
			return $Franca_Png_PngImage.isPng(reader);
		}
		finally {
			if (ss.isValue(reader)) {
				reader.dispose();
			}
		}
	};
	$Franca_Png_PngImage.isPng = function(reader) {
		return $Franca_Png_PngImage.isPng$1(reader.readData(8), 0);
	};
	$Franca_Png_PngImage.isPng$1 = function(data, index) {
		if (ss.isNullOrUndefined(data) || data.get_length() < index + 8) {
			return false;
		}
		return data.get_item(index) === 137 && data.get_item(index + 1) === 80 && data.get_item(index + 2) === 78 && data.get_item(index + 3) === 71 && data.get_item(index + 4) === 13 && data.get_item(index + 5) === 10 && data.get_item(index + 6) === 26 && data.get_item(index + 7) === 10;
	};
	global.Franca.Png.PngImage = $Franca_Png_PngImage;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngInterlaceMethod
	var $Franca_Png_PngInterlaceMethod = function() {
	};
	$Franca_Png_PngInterlaceMethod.__typeName = 'Franca.Png.PngInterlaceMethod';
	global.Franca.Png.PngInterlaceMethod = $Franca_Png_PngInterlaceMethod;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngPixelFormat
	var $Franca_Png_PngPixelFormat = function() {
	};
	$Franca_Png_PngPixelFormat.__typeName = 'Franca.Png.PngPixelFormat';
	global.Franca.Png.PngPixelFormat = $Franca_Png_PngPixelFormat;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngPixelFormatExtensions
	var $Franca_Png_PngPixelFormatExtensions = function() {
	};
	$Franca_Png_PngPixelFormatExtensions.__typeName = 'Franca.Png.PngPixelFormatExtensions';
	$Franca_Png_PngPixelFormatExtensions.isIndexed = function(format) {
		return (format & 256) === 256;
	};
	$Franca_Png_PngPixelFormatExtensions.isColor = function(format) {
		return (format & 512) === 512;
	};
	$Franca_Png_PngPixelFormatExtensions.isRgb = function(format) {
		return (format & 768) === 512;
	};
	$Franca_Png_PngPixelFormatExtensions.isGrayscale = function(format) {
		return (format & 768) === 0;
	};
	$Franca_Png_PngPixelFormatExtensions.hasAlpha = function(format) {
		return (format & 1024) === 1024;
	};
	$Franca_Png_PngPixelFormatExtensions.getScanlineByteSize = function(format, width) {
		var bitDepth = format & 15;
		var isAlpha = (format & 1024) === 1024;
		var isRgb = (format & 768) === 512;
		var channels = (isRgb ? 3 : 1) + (isAlpha ? 1 : 0);
		return Math.ceil(width * channels * bitDepth / 8);
	};
	$Franca_Png_PngPixelFormatExtensions.getBitsPerPixel = function(format) {
		var bitDepth = format & 15;
		var isAlpha = (format & 1024) === 1024;
		var isRgb = (format & 768) === 512;
		var channels = (isRgb ? 3 : 1) + (isAlpha ? 1 : 0);
		return channels * bitDepth;
	};
	$Franca_Png_PngPixelFormatExtensions.getFilterBpp = function(format) {
		var bitDepth = format & 15;
		var isAlpha = (format & 1024) === 1024;
		var isRgb = (format & 768) === 512;
		var channels = (isRgb ? 3 : 1) + (isAlpha ? 1 : 0);
		return Math.ceil(channels * bitDepth / 8);
	};
	global.Franca.Png.PngPixelFormatExtensions = $Franca_Png_PngPixelFormatExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Png.PngScanlineFilter
	var $Franca_Png_PngScanlineFilter = function() {
	};
	$Franca_Png_PngScanlineFilter.__typeName = 'Franca.Png.PngScanlineFilter';
	global.Franca.Png.PngScanlineFilter = $Franca_Png_PngScanlineFilter;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Saves.SaveContainer
	var $Franca_Saves_SaveContainer = function() {
		this.image = null;
		this.game = null;
		this.description = null;
		this.date = ss.getDefaultValue(Franca.UtcDate);
		this.saveData = null;
	};
	$Franca_Saves_SaveContainer.__typeName = 'Franca.Saves.SaveContainer';
	$Franca_Saves_SaveContainer.$ctor1 = function(game, image, saveData, description) {
		$Franca_Saves_SaveContainer.$ctor2.call(this, game, image, Franca.UtcDate.get_now(), saveData, description);
	};
	$Franca_Saves_SaveContainer.$ctor2 = function(game, image, date, saveData, description) {
		this.image = null;
		this.game = null;
		this.description = null;
		this.date = ss.getDefaultValue(Franca.UtcDate);
		this.saveData = null;
		this.game = game;
		this.image = image;
		this.date = date;
		this.saveData = saveData;
		this.description = description;
	};
	global.Franca.Saves.SaveContainer = $Franca_Saves_SaveContainer;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Saves.SaveCorruptionException
	var $Franca_Saves_SaveCorruptionException = function() {
		ss.Exception.call(this);
	};
	$Franca_Saves_SaveCorruptionException.__typeName = 'Franca.Saves.SaveCorruptionException';
	$Franca_Saves_SaveCorruptionException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$Franca_Saves_SaveCorruptionException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	global.Franca.Saves.SaveCorruptionException = $Franca_Saves_SaveCorruptionException;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Serialization.JsonFile
	var $Franca_Serialization_JsonFile = function(json) {
		$Franca_Text_TextFile.$ctor1.call(this, json);
	};
	$Franca_Serialization_JsonFile.__typeName = 'Franca.Serialization.JsonFile';
	global.Franca.Serialization.JsonFile = $Franca_Serialization_JsonFile;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Targa.TargaImage
	var $Franca_Targa_TargaImage = function() {
	};
	$Franca_Targa_TargaImage.__typeName = 'Franca.Targa.TargaImage';
	$Franca_Targa_TargaImage.fromStream = function(stream) {
		return $Franca_Targa_TargaImage.fromData(Franca.StreamExtensions.toBinaryData(stream));
	};
	$Franca_Targa_TargaImage.fromData = function(data) {
		var prevEndian = data.get_endian();
		data.set_endian(0);
		try {
			// id field length
			var idFieldLength = data.readByte();
			// color map type
			var colorMapType = data.readByte();
			// data type
			var dataTypeByte = data.readByte();
			if (!Franca.EnumHelper.isDefined($Franca_Targa_TGADataType).call(null, dataTypeByte) || dataTypeByte === 8) {
				throw new System.IO.InvalidDataException.$ctor1('Invalid targa data type value, file was not a valid targa file.');
			}
			var dataType = dataTypeByte;
			if (dataType === 0) {
				data.set_endian(prevEndian);
				return new $Franca_CanvasPixelData.$ctor3(0, 0, 0);
			}
			else if (dataType !== 2 && dataType !== 10) {
				throw new ss.NotImplementedException(ss.formatString("Can't load targa images of type {0}.", System.EnumExtensions.getName($Franca_Targa_TGADataType).call(null, dataType)));
			}
			// set whether this image has RLE compression
			var isRLE = System.EnumExtensions.hasFlag(dataType, 8);
			// color map specification
			var colorMapSize = 0;
			if (colorMapType === 1) {
				data.seek(2);
				// skip first index of color map entries
				var colorMapEntryCount = data.readUInt16();
				var colorMapSizePerEntry = $Franca_Targa_TargaImage.$bytesPerPixel(data.readByte());
				colorMapSize = colorMapEntryCount * colorMapSizePerEntry;
			}
			else {
				data.seek(5);
			}
			// x and y origin
			data.seek(2);
			data.seek(2);
			var width = data.readUInt16();
			var height = data.readUInt16();
			var bitDepth = data.readByte();
			if (bitDepth !== 24 && bitDepth !== 32) {
				throw new System.IO.InvalidDataException.$ctor1(ss.formatString('Invalid bit depth {0}, bit depth unsupported (only 24 and 32 bit supported) or file was not a valid targa file.', bitDepth));
			}
			// image descriptor
			var descriptor = data.readByte();
			var origin = (descriptor & $Franca_Targa_TargaImage.$screenOriginMask) >> 4;
			// skip identification field
			data.seek(idFieldLength);
			// skip color map data
			data.seek(colorMapSize);
			// image data
			var pixelData = new $Franca_CanvasPixelData.$ctor3(width, height, 0);
			if (isRLE) {
				$Franca_Targa_TargaImage.$readPixelDataRLE(data, pixelData, bitDepth, origin);
			}
			else {
				$Franca_Targa_TargaImage.$readPixelData(data, pixelData, bitDepth, origin);
			}
			return pixelData;
		}
		finally {
			data.set_endian(prevEndian);
		}
	};
	$Franca_Targa_TargaImage.$readPixelDataRLE = function(data, pixelData, bitDepth, origin) {
		var bytesPerPixel = $Franca_Targa_TargaImage.$bytesPerPixel(bitDepth);
		var xStart = {}, xEnd = {}, xStep = {}, yStart = {}, yEnd = {}, yStep = {};
		$Franca_Targa_TargaImage.$getXYStartEnd(pixelData, origin, xStart, xEnd, xStep, yStart, yEnd, yStep);
		var x = xStart.$, y = yStart.$;
		while (!(data.location >= data.length || ((origin === 2 || origin === 3) ? (y >= pixelData.height) : (y < 0)))) {
			// read packet
			var packet = data.readByte();
			// set packet type and zero out high bit
			var isRLE = (packet & $Franca_Targa_TargaImage.$rleBit) !== 0;
			packet &= -129;
			// get count
			var count = packet + 1;
			// read pixels
			if (isRLE) {
				if (data.get_location() + bytesPerPixel >= data.get_length()) {
					return;
				}
				var b = data.readByte();
				var g = data.readByte();
				var r = data.readByte();
				var a = 255;
				if (bytesPerPixel > 3) {
					a = data.readByte();
				}
				for (var i = 0; i < count; i++, x += xStep.$) {
					if (x >= pixelData.width || x < 0) {
						x = xStart.$;
						y += yStep.$;
					}
					if (data.location >= data.length || ((origin === 2 || origin === 3) ? (y >= pixelData.height) : (y < 0))) {
						return;
					}
					pixelData.data[y * pixelData.stride + x * 4 + 0] = r;
					pixelData.data[y * pixelData.stride + x * 4 + 1] = g;
					pixelData.data[y * pixelData.stride + x * 4 + 2] = b;
					pixelData.data[y * pixelData.stride + x * 4 + 3] = a;
				}
			}
			else {
				for (var i1 = 0; i1 < count; i1++, x += xStep.$) {
					if (x >= pixelData.width || x < 0) {
						x = xStart.$;
						y += yStep.$;
					}
					if (data.location >= data.length || ((origin === 2 || origin === 3) ? (y >= pixelData.height) : (y < 0))) {
						return;
					}
					if (data.get_location() + bytesPerPixel >= data.get_length()) {
						return;
					}
					pixelData.data[y * pixelData.stride + x * 4 + 2] = data.readByte();
					pixelData.data[y * pixelData.stride + x * 4 + 1] = data.readByte();
					pixelData.data[y * pixelData.stride + x * 4 + 0] = data.readByte();
					if (bytesPerPixel > 3) {
						pixelData.data[y * pixelData.stride + x * 4 + 3] = data.readByte();
					}
				}
			}
		}
	};
	$Franca_Targa_TargaImage.$readPixelData = function(data, pixelData, bitDepth, origin) {
		var bytesPerPixel = $Franca_Targa_TargaImage.$bytesPerPixel(bitDepth);
		var xStart = {}, xEnd = {}, xStep = {}, yStart = {}, yEnd = {}, yStep = {};
		$Franca_Targa_TargaImage.$getXYStartEnd(pixelData, origin, xStart, xEnd, xStep, yStart, yEnd, yStep);
		for (var y = yStart.$; y >= 0 && y < pixelData.height; y += yStep.$) {
			for (var x = xStart.$; x >= 0 && x < pixelData.width; x += xStep.$) {
				if (data.get_location() + bytesPerPixel > data.get_length()) {
					// truncated TGA but we can still return what we got?
					return;
				}
				pixelData.data[y * pixelData.stride + x * 4 + 2] = data.readByte();
				pixelData.data[y * pixelData.stride + x * 4 + 1] = data.readByte();
				pixelData.data[y * pixelData.stride + x * 4 + 0] = data.readByte();
				pixelData.data[y * pixelData.stride + x * 4 + 3] = ((bytesPerPixel > 3) ? data.readByte() : 255);
			}
		}
	};
	$Franca_Targa_TargaImage.$getXYStartEnd = function(pixelData, origin, xStart, xEnd, xStep, yStart, yEnd, yStep) {
		switch (origin) {
			default:
			case 0: {
				xStart.$ = 0;
				xEnd.$ = pixelData.width - 1;
				xStep.$ = 1;
				yStart.$ = pixelData.height - 1;
				yEnd.$ = 0;
				yStep.$ = -1;
				return;
			}
			case 1: {
				xStart.$ = pixelData.width - 1;
				xEnd.$ = 0;
				xStep.$ = -1;
				yStart.$ = pixelData.height - 1;
				yEnd.$ = 0;
				yStep.$ = -1;
				return;
			}
			case 2: {
				xStart.$ = 0;
				xEnd.$ = pixelData.width - 1;
				xStep.$ = 1;
				yStart.$ = 0;
				yEnd.$ = pixelData.height - 1;
				yStep.$ = 1;
				return;
			}
			case 3: {
				xStart.$ = pixelData.width - 1;
				xEnd.$ = 0;
				xStep.$ = -1;
				yStart.$ = 0;
				yEnd.$ = pixelData.height - 1;
				yStep.$ = 1;
				return;
			}
		}
	};
	$Franca_Targa_TargaImage.$bytesPerPixel = function(bitDepth) {
		switch (bitDepth) {
			default: {
				throw new ss.NotImplementedException(ss.formatString('Unsupported targa bit depth {0}.', bitDepth));
			}
			case 15:
			case 16: {
				return 2;
			}
			case 24: {
				return 3;
			}
			case 32: {
				return 4;
			}
		}
	};
	$Franca_Targa_TargaImage.saveToStream$3 = function(pixelData, stream, type, includeAlpha) {
		var writer = new Franca.BinDataStreamWriter.$ctor1(stream, 0, true);
		try {
			$Franca_Targa_TargaImage.saveToStream$2(pixelData, writer, type, includeAlpha);
		}
		finally {
			if (ss.isValue(writer)) {
				writer.dispose();
			}
		}
	};
	$Franca_Targa_TargaImage.saveToStream = function(pixelData, stream, type, includeAlpha) {
		var writer = new Franca.BinDataStreamWriter.$ctor1(stream, 0, true);
		try {
			$Franca_Targa_TargaImage.saveToStream$2(pixelData, writer, type, includeAlpha);
		}
		finally {
			if (ss.isValue(writer)) {
				writer.dispose();
			}
		}
	};
	$Franca_Targa_TargaImage.saveToStream$1 = function(pixelData, stream, type, includeAlpha) {
		var writer = new Franca.BinDataStreamWriter.$ctor1(ss.cast(stream, Franca.BinaryStream), 0, true);
		try {
			$Franca_Targa_TargaImage.saveToStream$2(pixelData, writer, type, includeAlpha);
		}
		finally {
			if (ss.isValue(writer)) {
				writer.dispose();
			}
		}
	};
	$Franca_Targa_TargaImage.saveToStream$2 = function(pixelData, binWriter, type, includeAlpha) {
		// id field length
		binWriter.writeByte(0);
		// color map type
		binWriter.writeByte(0);
		// data type
		if (type !== 2 && type !== 10) {
			throw new ss.NotImplementedException(ss.formatString("Can't save targa images of type {0}.", System.EnumExtensions.getName($Franca_Targa_TGADataType).call(null, type)));
		}
		binWriter.writeByte(type);
		// color map
		binWriter.write$3([0, 0, 0, 0, 0], 0, 5);
		// x and y origin
		binWriter.writeUInt16(0);
		binWriter.writeUInt16(0);
		// width and height
		binWriter.writeUInt16(pixelData.width);
		binWriter.writeUInt16(pixelData.height);
		// bits per pixel
		binWriter.writeByte((includeAlpha ? 32 : 24));
		// image descriptor
		binWriter.writeByte((includeAlpha ? 8 : 0));
		// pixel data
		var isRLE = System.EnumExtensions.hasFlag(type, 8);
		if (isRLE) {
			$Franca_Targa_TargaImage.$writePixelDataRLE(pixelData, binWriter, includeAlpha);
		}
		else {
			$Franca_Targa_TargaImage.$writePixelData(pixelData, binWriter, includeAlpha);
		}
		binWriter.get_stream().flush();
	};
	$Franca_Targa_TargaImage.$writePixelDataRLE = function(pixelData, writer, includeAlpha) {
		var x = 0, y = pixelData.height - 1;
		while (y >= 0) {
			var rle;
			if (x === pixelData.width - 1) {
				rle = false;
			}
			else if (pixelData.data[y * pixelData.stride + x * 4 + 0] !== pixelData.data[y * pixelData.stride + (x + 1) * 4 + 0] || pixelData.data[y * pixelData.stride + x * 4 + 1] !== pixelData.data[y * pixelData.stride + (x + 1) * 4 + 1] || pixelData.data[y * pixelData.stride + x * 4 + 2] !== pixelData.data[y * pixelData.stride + (x + 1) * 4 + 2] || includeAlpha && pixelData.data[y * pixelData.stride + x * 4 + 3] !== pixelData.data[y * pixelData.stride + (x + 1) * 4 + 3]) {
				rle = false;
			}
			else {
				rle = true;
			}
			var runLength = $Franca_Targa_TargaImage.$getRunLength(pixelData, x, y, includeAlpha, rle);
			var packet = (rle ? (runLength - 1 | $Franca_Targa_TargaImage.$rleBit) : (runLength - 1));
			writer.writeByte(packet);
			if (rle) {
				writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 2]);
				writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 1]);
				writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 0]);
				if (includeAlpha) {
					writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 3]);
				}
				x += runLength;
			}
			else {
				for (var i = 0; i < runLength; i++, x++) {
					writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 2]);
					writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 1]);
					writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 0]);
					if (includeAlpha) {
						writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 3]);
					}
				}
			}
			if (x >= pixelData.width) {
				x = 0;
				y--;
			}
		}
	};
	$Franca_Targa_TargaImage.$getRunLength = function(pixelData, x, y, includeAlpha, rle) {
		var r = pixelData.data[y * pixelData.stride + x * 4 + 0];
		var g = pixelData.data[y * pixelData.stride + x * 4 + 1];
		var b = pixelData.data[y * pixelData.stride + x * 4 + 2];
		var a = pixelData.data[y * pixelData.stride + x * 4 + 3];
		var length = 1;
		if (rle) {
			while (x + 1 < pixelData.width && $Franca_Targa_TargaImage.$matchesNext(pixelData, x, y, includeAlpha)) {
				length++;
				if (length === 128) {
					return length;
				}
				x++;
			}
		}
		else {
			while (x + 1 < pixelData.width && !$Franca_Targa_TargaImage.$matchesNext(pixelData, x, y, includeAlpha)) {
				length++;
				if (length === 128) {
					return length;
				}
				x++;
			}
		}
		return length;
	};
	$Franca_Targa_TargaImage.$matchesNext = function(pixelData, x, y, includeAlpha) {
		return !(pixelData.data[y * pixelData.stride + x * 4 + 0] !== pixelData.data[y * pixelData.stride + (x + 1) * 4 + 0] || pixelData.data[y * pixelData.stride + x * 4 + 1] !== pixelData.data[y * pixelData.stride + (x + 1) * 4 + 1] || pixelData.data[y * pixelData.stride + x * 4 + 2] !== pixelData.data[y * pixelData.stride + (x + 1) * 4 + 2] || includeAlpha && pixelData.data[y * pixelData.stride + x * 4 + 3] !== pixelData.data[y * pixelData.stride + (x + 1) * 4 + 3]);
	};
	$Franca_Targa_TargaImage.$writePixelData = function(pixelData, writer, includeAlpha) {
		for (var y = pixelData.height - 1; y >= 0; y--) {
			for (var x = 0; x < pixelData.width; x++) {
				writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 2]);
				writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 1]);
				writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 0]);
				if (includeAlpha) {
					writer.writeByte(pixelData.data[y * pixelData.stride + x * 4 + 3]);
				}
			}
		}
	};
	$Franca_Targa_TargaImage.saveToBinary = function(pixelData, type, includeAlpha) {
		var stream = new Franca.BinaryStream();
		try {
			$Franca_Targa_TargaImage.saveToStream(pixelData, stream, type, includeAlpha);
			stream.flush();
			return stream.toBinary();
		}
		finally {
			if (ss.isValue(stream)) {
				stream.dispose();
			}
		}
	};
	global.Franca.Targa.TargaImage = $Franca_Targa_TargaImage;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Targa.TGAColorMapType
	var $Franca_Targa_TGAColorMapType = function() {
	};
	$Franca_Targa_TGAColorMapType.__typeName = 'Franca.Targa.TGAColorMapType';
	global.Franca.Targa.TGAColorMapType = $Franca_Targa_TGAColorMapType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Targa.TGADataType
	var $Franca_Targa_TGADataType = function() {
	};
	$Franca_Targa_TGADataType.__typeName = 'Franca.Targa.TGADataType';
	global.Franca.Targa.TGADataType = $Franca_Targa_TGADataType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Targa.TGAScreenOrigin
	var $Franca_Targa_TGAScreenOrigin = function() {
	};
	$Franca_Targa_TGAScreenOrigin.__typeName = 'Franca.Targa.TGAScreenOrigin';
	global.Franca.Targa.TGAScreenOrigin = $Franca_Targa_TGAScreenOrigin;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.TextFile
	var $Franca_Text_TextFile = function() {
		this.$contents = null;
	};
	$Franca_Text_TextFile.__typeName = 'Franca.Text.TextFile';
	$Franca_Text_TextFile.$ctor1 = function(contents) {
		this.$contents = null;
		this.$contents = contents;
	};
	$Franca_Text_TextFile.op_Implicit = function(text) {
		return text.$contents;
	};
	$Franca_Text_TextFile.op_Explicit = function(text) {
		return new $Franca_Text_TextFile.$ctor1(text);
	};
	global.Franca.Text.TextFile = $Franca_Text_TextFile;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.WordWrap
	var $Franca_Text_WordWrap = function() {
	};
	$Franca_Text_WordWrap.__typeName = 'Franca.Text.WordWrap';
	$Franca_Text_WordWrap.wrapString = function(str, font, size, maxWidth, scale, kerning, selStart, selEnd, cursorPos) {
		// This regex matches:
		//   One or more characters that aren't: \n, \r, \t, space or dash
		//   OR a \r\n style newline character combo
		//   OR a single \n, \r, \t, space or dash character
		var regex = $Franca_Text_WordWrap.$wordRegex;
		var wrapped = new ss.StringBuilder();
		var metrics = font.getFontMetrics(size);
		var linespace = metrics.get_linespace() * scale;
		selStart = Math.max(0, selStart);
		selEnd = Math.max(selStart, selEnd);
		var remainingWidth = maxWidth;
		var $t1 = [];
		$t1.push($Franca_Text_WordWrap.$measure(font, ' ', size, 1, true) * scale);
		$t1.push($Franca_Text_WordWrap.$measure(font, ss.stringFromChar(String.fromCharCode(32), 4), size, 1, true) * scale);
		var whiteSpaceSize = $t1;
		var maxLineWidth = 0;
		var height = metrics.get_linesize() * scale;
		var index = 0;
		var cursorIndex = -1;
		var selStartPos = Franca.Vector2.zero;
		var selEndPos = Franca.Vector2.zero;
		var addedCharacters = 0;
		var kerningScale = 1 / font.get_unitsPerEm() * size;
		if (cursorIndex === -1 && ss.isValue(cursorPos)) {
			if (ss.unbox(cursorPos).y < height - metrics.get_linesize() - metrics.get_linegap() / 2) {
				cursorIndex = 0;
			}
		}
		var $t2 = ss.getEnumerator(regex.match(str));
		try {
			while ($t2.moveNext()) {
				var match = $t2.current();
				// every match is either a single white space character (space, tab)
				// a new line (\n, \r, or \r\n)
				// a dash '-' (which we treat like a word), or a full word
				if ($Franca_Text_WordWrap.$isNewline(Franca.Text.Match.op_Implicit(match))) {
					if (index === selStart || match.value.length === 2 && index + 1 === selStart) {
						selStartPos = new Franca.Vector2.$ctor3(maxWidth - remainingWidth, height);
					}
					if (ss.isValue(cursorPos) && cursorIndex === -1) {
						if (ss.unbox(cursorPos).y >= height - metrics.get_linesize() - metrics.get_linegap() / 2 && ss.unbox(cursorPos).y < height + metrics.get_linegap() / 2) {
							cursorIndex = index;
						}
					}
					// if its a newline, append it and reset remaining width
					wrapped.append(Franca.Text.Match.op_Implicit(match));
					remainingWidth = maxWidth;
					height += linespace;
					index += match.value.length;
				}
				else if ($Franca_Text_WordWrap.$isWhiteSpace(Franca.Text.Match.op_Implicit(match))) {
					if (index === selStart) {
						selStartPos = new Franca.Vector2.$ctor3(maxWidth - remainingWidth, height);
					}
					if (ss.isValue(cursorPos) && cursorIndex === -1) {
						if (ss.unbox(cursorPos).y >= height - metrics.get_linesize() - metrics.get_linegap() / 2 && ss.unbox(cursorPos).y < height + metrics.get_linegap() / 2) {
							var x = maxWidth - remainingWidth;
							x += ((match.value === ' ') ? whiteSpaceSize[0] : whiteSpaceSize[1]) / 2;
							if (x >= ss.unbox(cursorPos).x) {
								cursorIndex = index;
							}
						}
					}
					// if its whitespace, reduce the remaining width then append
					switch (match) {
						case ' ': {
							remainingWidth -= whiteSpaceSize[0];
							break;
						}
						case '\t': {
							remainingWidth -= whiteSpaceSize[1];
							break;
						}
					}
					wrapped.append(Franca.Text.Match.op_Implicit(match));
					index++;
				}
				else {
					var wordSize = $Franca_Text_WordWrap.$measure(font, Franca.Text.Match.op_Implicit(match), size, scale, kerning);
					if (wordSize <= remainingWidth) {
						if (selStart === index) {
							selStartPos = new Franca.Vector2.$ctor3(maxWidth - remainingWidth, height);
						}
						else if (selStart > index && selStart < index + match.value.length) {
							var selString = match.value.substr(0, selStart - index);
							var selSize = $Franca_Text_WordWrap.$measure(font, selString, size, scale, kerning);
							selStartPos = new Franca.Vector2.$ctor3(maxWidth - remainingWidth + selSize, height);
						}
						if (ss.isValue(cursorPos) && cursorIndex === -1) {
							if (ss.unbox(cursorPos).y >= height - metrics.get_linesize() - metrics.get_linegap() / 2 && ss.unbox(cursorPos).y < height + metrics.get_linegap() / 2) {
								var x1 = maxWidth - remainingWidth;
								if (ss.unbox(cursorPos).x >= x1 && ss.unbox(cursorPos).x < x1 + wordSize) {
									cursorIndex = index;
									for (var j = 0; j < match.value.length; j++) {
										var cursorChar = match.value.charCodeAt(j);
										var advance = font.getGlyphMetrics(cursorChar, size).get_advanceWidth() * scale;
										if (x1 + advance / 2 >= ss.unbox(cursorPos).x) {
											break;
										}
										if (kerning && j + 1 < match.value.length) {
											advance += font.getKerningValue$2(cursorChar, match.value.charCodeAt(j + 1), kerningScale) * scale;
										}
										x1 += advance;
										cursorIndex++;
									}
								}
								else if (ss.unbox(cursorPos).x < x1) {
									cursorIndex = index;
								}
							}
						}
						// if word fits, reduce remaining width and append
						remainingWidth -= wordSize;
						wrapped.append(Franca.Text.Match.op_Implicit(match));
						maxLineWidth = Math.max(maxLineWidth, maxWidth - remainingWidth);
						index += match.value.length;
					}
					else {
						// if it doesn't we want to move it to the next line, with two possibilities
						if (wordSize <= remainingWidth) {
							if (ss.isValue(cursorPos) && cursorIndex === -1) {
								if (ss.unbox(cursorPos).y >= height - metrics.get_linesize() - metrics.get_linegap() / 2 && ss.unbox(cursorPos).y < height + metrics.get_linegap() / 2) {
									cursorIndex = index - 1;
								}
							}
							// if word fits in a full line, reduce remaining width and append
							height += linespace;
							wrapped.appendChar(10);
							selStart++;
							index++;
							if (ss.isValue(cursorPos) && cursorIndex === -1) {
								addedCharacters++;
							}
							if (selStart === index) {
								selStartPos = new Franca.Vector2.$ctor3(0, height);
							}
							else if (selStart > index && selStart < index + match.value.length) {
								var selString1 = match.value.substr(0, selStart - index);
								var selSize1 = $Franca_Text_WordWrap.$measure(font, selString1, size, scale, kerning);
								selStartPos = new Franca.Vector2.$ctor3(selSize1, height);
							}
							if (ss.isValue(cursorPos) && cursorIndex === -1) {
								if (ss.unbox(cursorPos).y >= height - metrics.get_linesize() - metrics.get_linegap() / 2 && ss.unbox(cursorPos).y < height + metrics.get_linegap() / 2) {
									var x2 = 0;
									if (ss.unbox(cursorPos).x >= x2 && ss.unbox(cursorPos).x < x2 + wordSize) {
										cursorIndex = index;
										for (var j1 = 0; j1 < match.value.length; j1++) {
											var cursorChar1 = match.value.charCodeAt(j1);
											var advance1 = font.getGlyphMetrics(cursorChar1, size).get_advanceWidth() * scale;
											if (x2 + advance1 / 2 >= ss.unbox(cursorPos).x) {
												break;
											}
											if (kerning && j1 + 1 < match.value.length) {
												advance1 += font.getKerningValue$2(cursorChar1, match.value.charCodeAt(j1 + 1), kerningScale) * scale;
											}
											x2 += advance1;
											cursorIndex++;
										}
									}
									else if (ss.unbox(cursorPos).x < x2) {
										cursorIndex = index;
									}
								}
							}
							remainingWidth = maxWidth - wordSize;
							wrapped.append(Franca.Text.Match.op_Implicit(match));
							maxLineWidth = Math.max(maxLineWidth, maxWidth - remainingWidth);
							index += match.value.length;
						}
						else {
							// if it's a word longer than a line it must be broken up
							var $t3 = ss.getEnumerator($Franca_Text_WordWrap.$breakWord(font, Franca.Text.Match.op_Implicit(match), size, maxWidth, scale, kerning));
							try {
								while ($t3.moveNext()) {
									var chunk = $t3.current();
									if (remainingWidth < maxWidth) {
										if (ss.isValue(cursorPos) && cursorIndex === -1) {
											if (ss.unbox(cursorPos).y >= height - metrics.get_linesize() - metrics.get_linegap() / 2 && ss.unbox(cursorPos).y < height + metrics.get_linegap() / 2) {
												cursorIndex = index - 1;
											}
										}
										wrapped.appendChar(10);
										height += linespace;
										selStart++;
										index++;
										if (ss.isValue(cursorPos) && cursorIndex === -1) {
											addedCharacters++;
										}
									}
									if (selStart === index) {
										selStartPos = new Franca.Vector2.$ctor3(0, height);
									}
									else if (selStart > index && selStart < index + match.value.length) {
										var selString2 = match.value.substr(0, selStart - index);
										var selSize2 = $Franca_Text_WordWrap.$measure(font, selString2, size, scale, kerning);
										selStartPos = new Franca.Vector2.$ctor3(selSize2, height);
									}
									if (ss.isValue(cursorPos) && cursorIndex === -1) {
										if (ss.unbox(cursorPos).y >= height - metrics.get_linesize() - metrics.get_linegap() / 2 && ss.unbox(cursorPos).y < height + metrics.get_linegap() / 2) {
											var x3 = 0;
											if (ss.unbox(cursorPos).x >= x3 && ss.unbox(cursorPos).x < x3 + chunk.$width) {
												cursorIndex = index;
												for (var j2 = 0; j2 < chunk.$chunk.length; j2++) {
													var cursorChar2 = chunk.$chunk.charCodeAt(j2);
													var advance2 = font.getGlyphMetrics(cursorChar2, size).get_advanceWidth() * scale;
													if (x3 + advance2 / 2 >= ss.unbox(cursorPos).x) {
														break;
													}
													if (kerning && j2 + 1 < chunk.$chunk.length) {
														advance2 += font.getKerningValue$2(cursorChar2, chunk.$chunk.charCodeAt(j2 + 1), kerningScale) * scale;
													}
													x3 += advance2;
													cursorIndex++;
												}
											}
											else if (ss.unbox(cursorPos).x < x3) {
												cursorIndex = index;
											}
										}
									}
									remainingWidth = maxWidth - chunk.$width;
									wrapped.append(chunk.$chunk);
									maxLineWidth = Math.max(maxLineWidth, maxWidth - remainingWidth);
									index += chunk.$chunk.length;
								}
							}
							finally {
								$t3.dispose();
							}
						}
					}
				}
			}
		}
		finally {
			$t2.dispose();
		}
		if (selStart === wrapped.length) {
			selStartPos = new Franca.Vector2.$ctor3(maxWidth - remainingWidth, height);
		}
		if (cursorIndex === -1 && ss.isValue(cursorPos)) {
			cursorIndex = str.length;
		}
		else {
			cursorIndex -= addedCharacters;
		}
		return new $Franca_Text_WrappedString(str, wrapped.toString(), maxLineWidth, height, selStart, Franca.Vector2.op_Subtraction(selStartPos, new Franca.Vector2.$ctor3(0, -metrics.get_descent() * scale)), selEnd, Franca.Vector2.op_Subtraction(selEndPos, new Franca.Vector2.$ctor3(0, -metrics.get_descent() * scale)), ((cursorIndex === -1) ? null : cursorIndex));
	};
	$Franca_Text_WordWrap.$isNewline = function(val) {
		return val.charCodeAt(0) === 10 || val.charCodeAt(0) === 13;
	};
	$Franca_Text_WordWrap.$isWhiteSpace = function(val) {
		return val.charCodeAt(0) === 32 || val.charCodeAt(0) === 9;
	};
	$Franca_Text_WordWrap.$breakWord = function(font, text, baseSize, maxWidth, scale, kerning) {
		return new ss.IteratorBlockEnumerable(function() {
			return (function(font, text, baseSize, maxWidth, scale, kerning) {
				var $result, $state = 0, fontScale, lastIndex, width, i, chr, metrics, advance, kern, newWidth, $t1, $t2;
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								fontScale = 1 / font.get_unitsPerEm() * baseSize;
								lastIndex = 0;
								width = 0;
								i = 0;
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								if (!(i < text.length)) {
									$state = 3;
									continue $sm1;
								}
								chr = text.charCodeAt(i);
								metrics = font.getGlyphMetrics(chr, baseSize);
								advance = metrics.get_advanceWidth();
								if (kerning && i < text.length - 1) {
									kern = font.getKerningValue$2(chr, text.charCodeAt(i + 1), fontScale);
									if (kern !== 0) {
										advance += kern;
									}
								}
								newWidth = width + advance * scale;
								if (newWidth > maxWidth) {
									$t1 = new $Franca_$Text_WordWrap$WordChunk();
									$t1.$chunk = text.substr(lastIndex, i - lastIndex);
									$t1.$width = width;
									$result = $t1;
									$state = 4;
									return true;
								}
								else {
									width = newWidth;
									$state = 2;
									continue $sm1;
								}
							}
							case 4: {
								$state = -1;
								lastIndex = i;
								i--;
								width = 0;
								$state = 2;
								continue $sm1;
							}
							case 2: {
								$state = -1;
								i++;
								$state = 1;
								continue $sm1;
							}
							case 3: {
								$state = -1;
								if (lastIndex < text.length) {
									$t2 = new $Franca_$Text_WordWrap$WordChunk();
									$t2.$chunk = text.substr(lastIndex, text.length - lastIndex);
									$t2.$width = width;
									$result = $t2;
									$state = -1;
									return true;
								}
								$state = -1;
								break $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, null, this);
			}).call(this, font, text, baseSize, maxWidth, scale, kerning);
		}, this);
	};
	$Franca_Text_WordWrap.$measure = function(font, text, baseSize, scale, kerning) {
		var fontScale = 1 / font.get_unitsPerEm() * baseSize;
		var width = 0;
		for (var i = 0; i < text.length; i++) {
			var chr = text.charCodeAt(i);
			var metrics = font.getGlyphMetrics(chr, baseSize);
			var advance = metrics.get_advanceWidth();
			if (kerning && i < text.length - 1) {
				var kern = font.getKerningValue$2(chr, text.charCodeAt(i + 1), fontScale);
				if (kern !== 0) {
					advance += kern;
				}
			}
			width += advance * scale;
		}
		return width;
	};
	global.Franca.Text.WordWrap = $Franca_Text_WordWrap;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Text.WrappedString
	var $Franca_Text_WrappedString = function(str, wrapped, width, height, selStart, selStartPos, selEnd, selEndPos, cursorIndex) {
		this.raw = null;
		this.wrapped = null;
		this.width = 0;
		this.height = 0;
		this.selStart = 0;
		this.selStartPos = ss.getDefaultValue(Franca.Vector2);
		this.selEnd = 0;
		this.selEndPos = ss.getDefaultValue(Franca.Vector2);
		this.cursorIndex = null;
		this.raw = str;
		this.wrapped = wrapped;
		this.width = width;
		this.height = height;
		this.selStart = selStart;
		this.selStartPos = selStartPos;
		this.selEnd = selEnd;
		this.selEndPos = selEndPos;
		this.cursorIndex = cursorIndex;
	};
	$Franca_Text_WrappedString.__typeName = 'Franca.Text.WrappedString';
	$Franca_Text_WrappedString.op_Equality = function(lhs, rhs) {
		if (ss.isNullOrUndefined(lhs)) {
			return ss.isNullOrUndefined(rhs);
		}
		return lhs.equalsT(rhs);
	};
	$Franca_Text_WrappedString.op_Inequality = function(lhs, rhs) {
		if (ss.isNullOrUndefined(lhs)) {
			return ss.isValue(rhs);
		}
		return !lhs.equalsT(rhs);
	};
	$Franca_Text_WrappedString.op_Implicit = function(str) {
		return str.wrapped;
	};
	global.Franca.Text.WrappedString = $Franca_Text_WrappedString;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Vertices._VertexBufferDataPrototype
	var $Franca_Vertices_$_VertexBufferDataPrototype = function() {
	};
	$Franca_Vertices_$_VertexBufferDataPrototype.__typeName = 'Franca.Vertices.$_VertexBufferDataPrototype';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Vertices.Component
	var $Franca_Vertices_Component = function() {
	};
	$Franca_Vertices_Component.__typeName = 'Franca.Vertices.Component';
	global.Franca.Vertices.Component = $Franca_Vertices_Component;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Vertices.IndexBufferData
	var $Franca_Vertices_IndexBufferData = function(type, size) {
		this.type = 0;
		this.shorts = null;
		this.ints = null;
		this.offset = 0;
		this.type = type;
		if (type === 1) {
			this.ints = new Franca.Collections.UIntArray.$ctor2(size);
		}
		else {
			this.shorts = new Franca.Collections.UShortArray.$ctor2(size);
		}
	};
	$Franca_Vertices_IndexBufferData.__typeName = 'Franca.Vertices.IndexBufferData';
	global.Franca.Vertices.IndexBufferData = $Franca_Vertices_IndexBufferData;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Vertices.IndexBufferType
	var $Franca_Vertices_IndexBufferType = function() {
	};
	$Franca_Vertices_IndexBufferType.__typeName = 'Franca.Vertices.IndexBufferType';
	global.Franca.Vertices.IndexBufferType = $Franca_Vertices_IndexBufferType;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Vertices.QuadIndexBufferData
	var $Franca_Vertices_QuadIndexBufferData = function(type, numberOfQuads) {
		$Franca_Vertices_IndexBufferData.call(this, type, numberOfQuads * 6);
		for (var i = 0, j = 0; i < numberOfQuads; i++, j += 4) {
			this.write$j(j, j + 1, j + 2, j, j + 2, j + 3);
		}
	};
	$Franca_Vertices_QuadIndexBufferData.__typeName = 'Franca.Vertices.QuadIndexBufferData';
	global.Franca.Vertices.QuadIndexBufferData = $Franca_Vertices_QuadIndexBufferData;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Vertices.VertexBufferData
	var $Franca_Vertices_VertexBufferData = function(components) {
		this.offset = 0;
		this.$uint8 = null;
		this.$int8 = null;
		this.$uint16 = null;
		this.$int16 = null;
		this.$uint32 = null;
		this.$int32 = null;
		this.$single = null;
		this.$single = new Float32Array(components);
		this.$int32 = new Int32Array(this.$single.buffer);
		this.$uint32 = new Uint32Array(this.$single.buffer);
		this.$int16 = new Int16Array(this.$single.buffer);
		this.$uint16 = new Uint16Array(this.$single.buffer);
		this.$int8 = new Int8Array(this.$single.buffer);
		this.$uint8 = new Uint8Array(this.$single.buffer);
	};
	$Franca_Vertices_VertexBufferData.__typeName = 'Franca.Vertices.VertexBufferData';
	global.Franca.Vertices.VertexBufferData = $Franca_Vertices_VertexBufferData;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Vertices.VertexElement
	var $Franca_Vertices_VertexElement = function(name, type, componentSize, componentCount, normalized) {
		this.attribute = null;
		this.type = 0;
		this.size = 0;
		this.padding = 0;
		this.componentSize = 0;
		this.componentCount = 0;
		this.isNormalized = false;
		this.offset = 0;
		this.stride = 0;
		this.attribute = name;
		this.type = type;
		this.componentSize = componentSize;
		this.componentCount = componentCount;
		this.isNormalized = normalized;
		// actual size in bytes
		var size = this.componentCount * this.componentSize;
		// calculate padding to make it 4 byte aligned
		var remainder = size % 4;
		this.padding = ((remainder !== 0) ? (4 - remainder) : 0);
		// set actual size with padding
		this.size = size + this.padding;
	};
	$Franca_Vertices_VertexElement.__typeName = 'Franca.Vertices.VertexElement';
	global.Franca.Vertices.VertexElement = $Franca_Vertices_VertexElement;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Vertices.VertexSpec
	var $Franca_Vertices_VertexSpec = function() {
		this.elements = null;
		this.size = 0;
		this.components = 0;
		this.elements = [];
	};
	$Franca_Vertices_VertexSpec.__typeName = 'Franca.Vertices.VertexSpec';
	global.Franca.Vertices.VertexSpec = $Franca_Vertices_VertexSpec;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Video.IVideoContextProvider
	var $Franca_Video_$IVideoContextProvider = function() {
	};
	$Franca_Video_$IVideoContextProvider.__typeName = 'Franca.Video.$IVideoContextProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Video.IVideoPlayerProvider
	var $Franca_Video_$IVideoPlayerProvider = function() {
	};
	$Franca_Video_$IVideoPlayerProvider.__typeName = 'Franca.Video.$IVideoPlayerProvider';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Video.JSVideoContext
	var $Franca_Video_$JSVideoContext = function(parent) {
		this.$parent = null;
		this.$videos = null;
		this.$disposed = false;
		this.$parent = parent;
		this.$videos = [];
	};
	$Franca_Video_$JSVideoContext.__typeName = 'Franca.Video.$JSVideoContext';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Video.JSVideoPlayer
	var $Franca_Video_$JSVideoPlayer = function(parent) {
		this.$parent = null;
		this.$video = null;
		this.$playing = false;
		this.$timeUpdate = false;
		this.$state = 0;
		this.$texture = null;
		this.$volume = 1;
		this.$disposed = false;
		this.$parent = parent;
		var $t1 = document.createElement('video');
		this.$video = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'VIDEO'));
		this.$video.addEventListener('playing', ss.mkdel(this, this.$onPlay), true);
		this.$video.addEventListener('timeupdate', ss.mkdel(this, this.$onTimeUpdate), true);
		this.$video.src = this.$parent.get_location() + '.mp4';
		this.$video.volume = this.$volume * parent.get_context().get_masterVolume();
		var pixels = new $Franca_CanvasPixelData.$ctor3(1, 1, 0);
		pixels.data[0 * pixels.stride + 0 * 4 + 2] = 0;
		null;
		pixels.data[0 * pixels.stride + 0 * 4 + 1] = 0;
		null;
		pixels.data[0 * pixels.stride + 0 * 4 + 0] = 0;
		pixels.data[0 * pixels.stride + 0 * 4 + 3] = 255;
		this.$texture = new $Franca_Texture.$ctor1(pixels, true, false);
	};
	$Franca_Video_$JSVideoPlayer.__typeName = 'Franca.Video.$JSVideoPlayer';
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Video.VideoContext
	var $Franca_Video_VideoContext = function(graphicsDevice) {
		this.$graphicsDevice = null;
		this.$provider = null;
		this.$masterVolume = 0;
		this.$disposed = false;
		this.$graphicsDevice = graphicsDevice;
		this.$provider = new $Franca_Video_$JSVideoContext(this);
	};
	$Franca_Video_VideoContext.__typeName = 'Franca.Video.VideoContext';
	global.Franca.Video.VideoContext = $Franca_Video_VideoContext;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Video.VideoPlayer
	var $Franca_Video_VideoPlayer = function(context, location) {
		this.$context = null;
		this.$provider = null;
		this.$batch = null;
		this.$rectBatch = null;
		this.$location = null;
		this.$disposed = false;
		if (ss.isNullOrUndefined(context)) {
			throw new ss.ArgumentNullException('Video context cannot be null');
		}
		this.$context = context;
		this.$location = location;
		this.$provider = new $Franca_Video_$JSVideoPlayer(this);
		this.$batch = this.$provider.$createBatch() || new $Franca_SpriteBatch(this.get_graphicsDevice());
		this.$rectBatch = new $Franca_SpriteBatch(this.get_graphicsDevice());
	};
	$Franca_Video_VideoPlayer.__typeName = 'Franca.Video.VideoPlayer';
	global.Franca.Video.VideoPlayer = $Franca_Video_VideoPlayer;
	////////////////////////////////////////////////////////////////////////////////
	// Franca.Video.VideoState
	var $Franca_Video_VideoState = function() {
	};
	$Franca_Video_VideoState.__typeName = 'Franca.Video.VideoState';
	global.Franca.Video.VideoState = $Franca_Video_VideoState;
	ss.initInterface($Franca_$IClipboardProvider, $asm, { $setText: null, get_$text: null });
	ss.initInterface($Franca_$IFontProvider, $asm, { $hasChar: null, $hasChar$1: null, $initialize: null, $getFontMetrics: null, $getGlyphMetrics: null, $getGlyphMetrics$1: null, $getKerningValue: null, $getKerningValue$1: null, $getKerningValue$2: null, $getKerningValue$3: null, get_$names: null }, [ss.IDisposable]);
	ss.initInterface($Franca_$IGraphicsDeviceProvider, $asm, { $swapBuffers: null, $finalizeGLCalls: null, $finalize: null, $finalize$5: null, $finalize$1: null, $finalize$3: null, $finalize$4: null, $finalize$2: null, get_$adaptiveVsyncSupported: null });
	ss.initInterface($Franca_$IInputProvider, $asm, { $registerEvents: null, $removeEvents: null, $updateState: null, $getKeyNameByPlatform: null, $locationalToActual: null, $addGamepadMappingsFromFile: null });
	ss.initInterface($Franca_$IWindowProvider, $asm, { $createGraphicsDevice: null, $setWindowBorder: null, $setResolution: null, $commitResolutionChange: null, $checkResolutionChanged: null, $close: null, $processEvents: null, $swapBuffers: null, $setIcon$3: null, $setIcon$1: null, $setIcon: null, $setIcon$2: null, $anchorChanged: null, $positionChanged: null, $messageBox: null, get_$width: null, set_$width: null, get_$height: null, set_$height: null, get_$containerWidth: null, get_$containerHeight: null, get_$x: null, set_$x: null, get_$y: null, set_$y: null, get_$visible: null, set_$visible: null, get_$vSync: null, set_$vSync: null, get_$vSyncStyle: null, set_$vSyncStyle: null, get_$hasFocus: null, get_$clientRect: null, get_$title: null, set_$title: null, get_$supportedResolutions: null, get_$monitorIndex: null, get_$mouseScaleX: null, get_$mouseScaleY: null, get_$container: null, get_$startMainLoopBeforeInit: null }, [ss.IDisposable]);
	ss.initClass($Franca_$JSClipboard, $asm, {
		$setText: function(text, fromKeyboardShortcut) {
			if (!fromKeyboardShortcut) {
				console.log('WARNING: Clipboard.SetText was called with fromKeyboardShortcut=false on JS, which does nothing');
			}
			else {
				this.$activeElement = document.activeElement;
				this.$textArea.focus();
				this.$textArea.value = text;
				this.$textArea.select();
			}
		},
		$domCopy: function(e) {
			window.setTimeout(ss.mkdel(this, function() {
				this.$textArea.blur();
				if (ss.isValue(this.$activeElement)) {
					this.$activeElement.focus();
					this.$activeElement = null;
				}
				else {
					document.body.focus();
				}
			}), 0);
		},
		$domPaste: function(e) {
			window.setTimeout(ss.mkdel(this, function() {
				this.$textArea.blur();
				if (ss.isValue(this.$activeElement)) {
					this.$activeElement.focus();
					this.$activeElement = null;
				}
				else {
					document.body.focus();
				}
				this.$pasteText = this.$textArea.value;
				if (!ss.staticEquals(this.$getPasteCallback, null)) {
					this.$getPasteCallback(this.$textArea.value);
					this.$getPasteCallback = null;
				}
			}), 0);
		},
		$getPasteText: function(callback) {
			this.$activeElement = document.activeElement;
			this.$getPasteCallback = callback;
			this.$textArea.focus();
			this.$textArea.select();
		},
		get_$text: function() {
			return this.$pasteText;
		}
	}, null, [$Franca_$IClipboardProvider]);
	ss.initClass($Franca_$JSGraphicsDevice, $asm, {
		$swapBuffers: function() {
		},
		get_$context: function() {
			return this.$context;
		},
		$finalizeGLCalls: function() {
		},
		$finalize: function(buffers) {
		},
		$finalize$5: function(texture) {
		},
		$finalize$1: function(framebuffer) {
		},
		$finalize$3: function(renderbuffer) {
		},
		$finalize$4: function(shader) {
		},
		$finalize$2: function(program) {
		},
		get_$adaptiveVsyncSupported: function() {
			return false;
		}
	}, null, [$Franca_$IGraphicsDeviceProvider]);
	ss.initClass($Franca_$JSWindow, $asm, {
		get_$startMainLoopBeforeInit: function() {
			return false;
		},
		$messageBox: function(text) {
			window.alert(text);
		},
		$fullscreen_changed: function() {
			var isFullscreen = this.$screenfull.isFullscreen;
			if (!!!isFullscreen) {
				if (this.$container.get_resizable()) {
					this.$container.setResolution(0);
				}
				else {
					this.$container.setResolution$1(0, this.$windowedWidth, this.$windowedHeight);
				}
			}
		},
		$checkFullscreen: function(e) {
			var evt = ss.safeCast(e, KeyboardEvent);
			if (ss.isValue(evt) && evt.key === 'Enter' && evt.altKey && !this.$container.get_disableAltEnter()) {
				if (this.$container.get_screenState() === 0) {
					this.$screenfull.request(this.fullscreenContainer);
					this.$container.setResolution(((this.$container.get_altEnterFullscreenMode() === 0) ? 2 : 1));
				}
				else {
					this.$screenfull.exit();
					this.$container.setResolution(0);
				}
			}
		},
		$checkResolutionChanged: function() {
			//if (container.Resizable) {
			//    var rect = parentEle.GetBoundingClientRect();
			//    if (Width != (int)rect.Width || Height != (int)rect.Height) {
			//        return new ResolutionSwitch(container.ScreenState, (int)rect.Width, (int)rect.Height);
			//    }
			//}
			return null;
		},
		$setWindowBorder: function(state) {
		},
		$setResolution: function(fullscreen, width, height) {
			//if ((fullscreen == ScreenState.Fullscreen || fullscreen == ScreenState.Borderless) && container.ScreenState == ScreenState.Windowed) {
			//    windowedWidth = Width;
			//    windowedHeight = Height;
			//    screenfull.request(container.Resizable ? parentEle : window);
			//}
			//else if (fullscreen == ScreenState.Windowed && (container.ScreenState == ScreenState.Fullscreen || container.ScreenState == ScreenState.Borderless)) {
			//    screenfull.exit();
			//}
			//container.ScreenState = fullscreen;
			if ((fullscreen === 1 || fullscreen === 2) && this.$container.get_screenState() === 0) {
				if (!Franca.ElementExtensions.containsChild(this.fullscreenContainer, this.$window)) {
					if (fullscreen === 1) {
						this.$windowedX = this.get_$x();
						this.$windowedY = this.get_$y();
						this.$window.style.position = 'relative';
					}
					this.$parentEle.removeChild(this.$window);
					this.fullscreenContainer.style.display = 'block';
					this.fullscreenContainer.appendChild(this.$window);
					//screenfull.request(fullscreenContainer);
				}
			}
			else if (fullscreen === 0 && (this.$container.get_screenState() === 1 || this.$container.get_screenState() === 2)) {
				if (Franca.ElementExtensions.containsChild(this.fullscreenContainer, this.$window)) {
					if (this.$container.get_screenState() === 1) {
						this.$positionChanged();
						this.set_$x(this.$windowedX);
						this.set_$y(this.$windowedY);
						this.$window.style.removeProperty('width');
						this.$window.style.removeProperty('height');
					}
					this.fullscreenContainer.style.display = 'none';
					this.fullscreenContainer.removeChild(this.$window);
					this.$parentEle.appendChild(this.$window);
					//screenfull.exit();
				}
			}
		},
		$setInternalSize: function(width, height) {
			this.$setInternalSize$1(width, height, this.$container.get_screenState());
		},
		$setInternalSize$1: function(width, height, state) {
			if (state === 0) {
				this.$internalWidth = width;
				this.$internalHeight = height;
				this.$windowedWidth = width;
				this.$windowedHeight = height;
				this.$window.width = width;
				this.$window.height = height;
			}
			else if (state === 2) {
				this.$internalWidth = this.get_$screenWidth();
				this.$internalHeight = this.get_$screenHeight();
				this.$window.width = this.get_$screenWidth();
				this.$window.height = this.get_$screenHeight();
			}
		},
		$commitResolutionChange: function(res) {
			if (res.$width >= 0 || res.$height >= 0) {
				var newSize = new Franca.Size.$ctor2(((res.$width >= 0) ? res.$width : this.get_$width()), ((res.$height >= 0) ? res.$height : this.get_$height()));
				this.$setInternalSize(newSize.width, newSize.height);
			}
			if (res.$fullscreen === 1) {
				var size = this.$calculateExclusiveFullscreenSize();
				this.$window.style.setProperty('width', size.width + 'px', 'important');
				this.$window.style.setProperty('height', size.height + 'px', 'important');
				this.set_$x(Franca.Calc.center(this.get_$screenWidth(), size.width, 0));
				this.set_$y(Franca.Calc.center(this.get_$screenHeight(), size.height, 0));
			}
			else if (res.$fullscreen === 2) {
				res.$width = this.get_$screenWidth();
				res.$height = this.get_$screenHeight();
				this.$setInternalSize$1(res.$width, res.$height, 2);
			}
			else if (res.$fullscreen === 0) {
				res.$width = this.$windowedWidth;
				res.$height = this.$windowedHeight;
				this.$setInternalSize$1(res.$width, res.$height, 0);
			}
			res.$width = this.$internalWidth;
			res.$height = this.$internalHeight;
		},
		$processEvents: function() {
			if (this.$container.get_screenState() === 2 && (this.get_$width() !== this.get_$screenWidth() || this.get_$height() !== this.get_$screenHeight())) {
				this.$container.setResolution$1(this.$container.get_screenState(), this.get_$screenWidth(), this.get_$screenHeight());
			}
			else if (this.$container.get_screenState() === 1) {
				var size = this.$calculateExclusiveFullscreenSize();
				if (!ss.referenceEquals(this.$window.style.width, size.width + 'px') || !ss.referenceEquals(this.$window.style.height, size.height + 'px')) {
					this.$container.setResolution$1(this.$container.get_screenState(), this.get_$width(), this.get_$height());
				}
			}
		},
		$calculateExclusiveFullscreenSize: function() {
			var height;
			var width = Math.round(this.get_$screenHeight() / this.$internalHeight * this.$internalWidth);
			if (width > this.get_$screenWidth()) {
				height = Math.round(this.get_$screenWidth() / this.$internalWidth * this.$internalHeight);
			}
			else {
				height = this.get_$screenHeight();
			}
			return new Franca.Size.$ctor2(width, height);
		},
		$swapBuffers: function() {
			// this does nothing right now on JS but we call it here anyway in case
			// we ever add any code to that function
			this.get_$graphicsDevice().swapBuffers();
		},
		$close: function() {
			// TODO: implement
		},
		$createGraphicsDevice: function() {
			//graphicsDevice = new GraphicsDevice(
			//window.GetContext("webgl") as WebGLRenderingContext ??
			//window.GetContext("experimental-webgl") as WebGLRenderingContext);
			var graphicsDevice = new $Franca_GraphicsDevice(this.$container, this.get_$width(), this.get_$height());
			return graphicsDevice;
		},
		$setIcon$3: function(path) {
		},
		$setIcon$1: function(bytes) {
		},
		$setIcon: function(data) {
		},
		$setIcon$2: function(stream) {
		},
		$setStylePosition: function(pos) {
			if (System.StringExtensions.hasValue(pos, false)) {
				pos = ss.replaceAllString(pos, '$1', '');
			}
			this.$window.style.position = pos;
		},
		$anchorChanged: function() {
			if (ss.isValue(this.$parentEle)) {
				this.$parentEle.removeChild(this.$window);
			}
			this.$parentEle = null;
			if (System.StringExtensions.hasValue(this.$container.get_anchor(), true)) {
				this.$parentEle = document.getElementById(this.$container.get_anchor());
			}
			if (ss.isNullOrUndefined(this.$parentEle)) {
				this.$parentEle = document.body;
			}
			this.$parentEle.appendChild(this.$window);
		},
		$positionChanged: function() {
			this.$setStylePosition(System.EnumExtensions.getName($Franca_ContainerPosition).call(null, this.$container.get_position()));
		},
		dispose: function() {
			this.$dispose(true);
			System.GC.suppressFinalize(this);
		},
		$dispose: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_$screenWidth: function() {
			return (this.$container.get_useAvailableScreenSize() ? Math.trunc(this.fullscreenContainer.getBoundingClientRect().width) : Math.trunc(Math.max(window.screen.width, window.screen.availWidth, this.fullscreenContainer.getBoundingClientRect().width)));
		},
		get_$screenHeight: function() {
			return (this.$container.get_useAvailableScreenSize() ? Math.trunc(this.fullscreenContainer.getBoundingClientRect().height) : Math.trunc(Math.max(window.screen.height, window.screen.availHeight, this.fullscreenContainer.getBoundingClientRect().height)));
		},
		get_$window: function() {
			return this.$window;
		},
		get_$width: function() {
			return this.$internalWidth;
		},
		set_$width: function(value) {
			this.$setInternalSize(value, this.$internalHeight);
			if (ss.isValue(this.get_$graphicsDevice())) {
				this.get_$graphicsDevice().setResolution(this.$internalWidth, this.$internalHeight);
			}
		},
		get_$height: function() {
			return this.$internalHeight;
		},
		set_$height: function(value) {
			this.$setInternalSize(this.$internalWidth, value);
			if (ss.isValue(this.get_$graphicsDevice())) {
				this.get_$graphicsDevice().setResolution(this.$internalWidth, this.$internalHeight);
			}
		},
		get_$containerWidth: function() {
			return this.$window.getBoundingClientRect().width;
		},
		get_$containerHeight: function() {
			return this.$window.getBoundingClientRect().height;
		},
		get_$x: function() {
			return parseFloat(ss.replaceAllString(this.$window.style.left, 'px', ''));
		},
		set_$x: function(value) {
			this.$window.style.left = value.toString() + 'px';
		},
		get_$y: function() {
			return parseFloat(ss.replaceAllString(this.$window.style.top, 'px', ''));
		},
		set_$y: function(value) {
			this.$window.style.top = value.toString() + 'px';
		},
		get_$visible: function() {
			return ((this.$window.style.visibility !== 'hidden') ? true : false);
		},
		set_$visible: function(value) {
			this.$window.style.visibility = (value ? 'visible' : 'hidden');
		},
		get_$vSync: function() {
			return true;
		},
		set_$vSync: function(value) {
		},
		get_$hasFocus: function() {
			return FrancaGlobals.isWindowActive;
		},
		get_$idleThrottle: function() {
			return true;
		},
		set_$idleThrottle: function(value) {
		},
		get_$clientRect: function() {
			var r = this.$window.getBoundingClientRect();
			return new Franca.RectangleF.$ctor3(r.left, r.top, r.width, r.height);
		},
		get_$title: function() {
			return this.$title;
		},
		set_$title: function(value) {
			this.$title = value;
		},
		get_$supportedResolutions: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									break $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		get_$monitorIndex: function() {
			return -1;
		},
		get_$mouseScaleX: function() {
			return this.get_$width() / this.get_$containerWidth();
		},
		get_$mouseScaleY: function() {
			return this.get_$height() / this.get_$containerHeight();
		},
		get_$graphicsDevice: function() {
			return this.$container.get_graphicsDevice();
		},
		get_$container: function() {
			return this.$container;
		},
		get_$vSyncStyle: function() {
			return 0;
		},
		set_$vSyncStyle: function(value) {
			if (value === 1) {
				console.log('Adaptive vsync is not supported on HTML5');
			}
		}
	}, null, [ss.IDisposable, $Franca_$IWindowProvider]);
	ss.initClass($Franca_$PixelFont$Glyph, $asm, {});
	ss.initClass($Franca_$ResolutionSwitch, $asm, {});
	ss.initClass($Franca_BatchDrawCall, $asm, {
		getHashCode: function() {
			var h = (this.texture ? ss.getHashCode(this.texture) : 0);
			h = h * 397 ^ (this.programs ? ss.getHashCode(this.programs) : 0);
			h = h * 397 ^ this.filter;
			h = h * 397 ^ this.wrap;
			h = h * 397 ^ ss.getHashCode(this.viewport);
			h = h * 397 ^ this.offset;
			h = h * 397 ^ this.items;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_BatchDrawCall)) {
				return false;
			}
			return ss.equals(this.texture, o.texture) && ss.equals(this.programs, o.programs) && this.filter === o.filter && this.wrap === o.wrap && ss.equals(this.viewport, o.viewport) && this.offset === o.offset && this.items === o.items;
		}
	});
	$Franca_BatchDrawCall.$ctor1.prototype = $Franca_BatchDrawCall.prototype;
	$Franca_BatchDrawCall.__class = false;
	ss.initEnum($Franca_BatchSortMode, $asm, { None: 0, Texture: 1, Default: 0 });
	ss.initClass($Franca_BufferObject, $asm, {
		swapBuffers: function() {
			this.curBuffer++;
			if (this.curBuffer >= this.buffers.length) {
				this.curBuffer = 0;
			}
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				// Free buffers here so destructor does not
				if (this.buffers.length > 0) {
					if (this.buffers.length === 1) {
						$Franca_OpenGL_WebGL_GL.deleteBuffer(this.buffers[0]);
					}
					else {
						$Franca_OpenGL_WebGL_GL.deleteBuffers(Array.prototype.slice.call(this.buffers));
					}
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_glBuffer: function() {
			return this.buffers[this.curBuffer];
		}
	}, null, [ss.IDisposable]);
	ss.initEnum($Franca_BufferTarget, $asm, { ArrayBuffer: 34962, ElementArrayBuffer: 34963, Unknown: 0 });
	ss.initEnum($Franca_BufferUsage, $asm, { Static: 35044, Dynamic: 35048, Stream: 35040, Unknown: 0 });
	ss.initClass($Franca_BuiltinAssets, $asm, {
		get_shaders: function() {
			return this.$1$ShadersField;
		},
		set_shaders: function(value) {
			this.$1$ShadersField = value;
		},
		get_shaderPrograms: function() {
			return this.$1$ShaderProgramsField;
		},
		set_shaderPrograms: function(value) {
			this.$1$ShaderProgramsField = value;
		},
		get_basicEffect: function() {
			return this.$1$BasicEffectField;
		},
		set_basicEffect: function(value) {
			this.$1$BasicEffectField = value;
		},
		get_fontEffect: function() {
			return this.$1$FontEffectField;
		},
		set_fontEffect: function(value) {
			this.$1$FontEffectField = value;
		},
		get_videoEffect: function() {
			return this.$1$VideoEffectField;
		},
		set_videoEffect: function(value) {
			this.$1$VideoEffectField = value;
		},
		get_noneTexture: function() {
			return this.$1$NoneTextureField;
		},
		set_noneTexture: function(value) {
			this.$1$NoneTextureField = value;
		},
		get_whiteTexture: function() {
			return this.$1$WhiteTextureField;
		},
		set_whiteTexture: function(value) {
			this.$1$WhiteTextureField = value;
		}
	});
	ss.initEnum($Franca_BuiltinProgram, $asm, { Batch: 0, BatchRectangle: 1, CompressedFont: 2, UncompressedFont: 3, VideoBatch: 4 });
	ss.initEnum($Franca_BuiltinShader, $asm, { BatchVertex: 0, BatchFragment: 1, BatchRectangle: 2, CompressedFontVertex: 3, CompressedFontFragment: 4, UncompressedFontVertex: 5, UncompressedFontFragment: 6, VideoBatchVertex: 7, VideoBatchFragment: 8 });
	ss.initEnum($Franca_ButtonState, $asm, { Up: 0, Down: 1 });
	ss.initClass($Franca_Canvas, $asm, {
		getPixelData: function() {
			return this.getPixelData$1(new Franca.Rectangle.$ctor3(0, 0, this.$width, this.$height));
		},
		getPixelData$1: function(rect) {
			return new $Franca_CanvasPixelData.$ctor1(this, rect);
		},
		setPixelData: function(pixels) {
			pixels.setPixelData$1(this, Franca.Point.zero);
		},
		setPixelData$1: function(pixels, pos) {
			pixels.setPixelData$1(this, pos);
		},
		createContext: function() {
			return this.$bitmap.createContext();
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				this.$bitmap.dispose();
			}
			// Free any unmanaged objects here.
			this.$bitmap = null;
			this.$disposed = true;
		},
		get_width: function() {
			return this.$width;
		},
		get_height: function() {
			return this.$height;
		},
		get_size: function() {
			return new Franca.Size.$ctor2(this.$width, this.$height);
		},
		get_bitmap: function() {
			return this.$bitmap;
		}
	}, null, [ss.IDisposable, Franca.IFileResult]);
	$Franca_Canvas.$ctor3.prototype = $Franca_Canvas.$ctor1.prototype = $Franca_Canvas.$ctor2.prototype = $Franca_Canvas.prototype;
	ss.initClass($Franca_CanvasPixelData, $asm, {
		setPixelData: function(canvas) {
			this.setPixelData$1(canvas, Franca.Point.zero);
		},
		get_$layout: function() {
			return $Franca_CanvasPixelData.internalLayout;
		},
		get_stride: function() {
			return this.stride;
		},
		setPixelData$1: function(canvas, pos) {
			if (pos.x + this.width > canvas.get_width()) {
				throw new ss.InvalidOperationException('CanvasPixelData width exceeds Canvas width.');
			}
			if (pos.y + this.height > canvas.get_height()) {
				throw new ss.InvalidOperationException('CanvasPixelData height exceeds Canvas height.');
			}
			if (ss.isNullOrUndefined(this.$imgData)) {
				if ($Franca_CanvasPixelData.$hasImageDataConstructor) {
					var clampedArray = new Uint8ClampedArray(this.data.buffer);
					this.$imgData = new ImageData(clampedArray, this.width, this.height);
					this.data = new Uint8Array(this.$imgData.data.buffer);
				}
				else {
					var tmpCanvas = new $Franca_Canvas.$ctor3(this.width, this.height);
					this.$imgData = tmpCanvas.getPixelData().$imgData;
					this.$imgData.data.set(this.data);
					tmpCanvas.dispose();
					this.data = new Uint8Array(this.$imgData.data.buffer);
				}
			}
			{
				var context = canvas.createContext();
				try {
					ss.cast(context, $Franca_JS_CanvasContext).get_htmlContext().putImageData(this.$imgData, pos.x, pos.y);
				}
				finally {
					if (ss.isValue(context)) {
						context.dispose();
					}
				}
			}
		},
		toByteArray: function() {
			return new Franca.Collections.ByteArray.$ctor1(this.data);
		}
	});
	$Franca_CanvasPixelData.$ctor2.prototype = $Franca_CanvasPixelData.$ctor1.prototype = $Franca_CanvasPixelData.$ctor3.prototype = $Franca_CanvasPixelData.prototype;
	ss.initEnum($Franca_CanvasPixelDataInternalLayout, $asm, { RGBA: 0, BGRA: 1 });
	ss.initEnum($Franca_ClearOptions, $asm, { Default: 17664, Color: 16384, Depth: 256, Stencil: 1024, ColorDepth: 16640, ColorStencil: 17408, DepthStencil: 1280, ColorDepthStencil: 17664, All: 17664 });
	ss.initClass($Franca_ClientMessage, $asm, {});
	$Franca_ClientMessage.$ctor1.prototype = $Franca_ClientMessage.prototype;
	ss.initClass($Franca_ClientSocket, $asm, {
		add_onConnect: function(value) {
			this.$1$OnConnectField = ss.delegateCombine(this.$1$OnConnectField, value);
		},
		remove_onConnect: function(value) {
			this.$1$OnConnectField = ss.delegateRemove(this.$1$OnConnectField, value);
		},
		add_onClose: function(value) {
			this.$1$OnCloseField = ss.delegateCombine(this.$1$OnCloseField, value);
		},
		remove_onClose: function(value) {
			this.$1$OnCloseField = ss.delegateRemove(this.$1$OnCloseField, value);
		},
		add_onError: function(value) {
			this.$1$OnErrorField = ss.delegateCombine(this.$1$OnErrorField, value);
		},
		remove_onError: function(value) {
			this.$1$OnErrorField = ss.delegateRemove(this.$1$OnErrorField, value);
		},
		add_onMessage: function(value) {
			this.$1$OnMessageField = ss.delegateCombine(this.$1$OnMessageField, value);
		},
		remove_onMessage: function(value) {
			this.$1$OnMessageField = ss.delegateRemove(this.$1$OnMessageField, value);
		},
		connecting: function() {
		},
		connected: function() {
			var onConnect = this.$1$OnConnectField;
			if (!ss.staticEquals(onConnect, null)) {
				onConnect(this);
			}
		},
		closing: function() {
		},
		closed: function(code, reason) {
			var onClose = this.$1$OnCloseField;
			if (!ss.staticEquals(onClose, null)) {
				if (ss.isValue(reason) && (reason.trim() === '' || reason.toLowerCase() === 'null')) {
					reason = null;
				}
				if (code === 0) {
					code = 1005;
				}
				onClose(this, code, reason);
			}
		},
		error: function(error) {
			var onError = this.$1$OnErrorField;
			if (!ss.staticEquals(onError, null)) {
				onError(this, error);
			}
		},
		message: function(message) {
			var onMessage = this.$1$OnMessageField;
			if (!ss.staticEquals(onMessage, null)) {
				onMessage(this, message);
			}
		},
		connect$1: function(host, port, ssl) {
			this._Connect((ssl ? 'wss://' : 'ws://') + host + ':' + port);
		},
		connect: function(address) {
			this._Connect(address);
		},
		send$1: function(message) {
			if (this.get_state() !== 1) {
				return;
			}
			this.$_Send(message);
		},
		send: function(data) {
			if (this.get_state() !== 1) {
				return;
			}
			this.$_Send(new $Franca_ClientMessage(data));
		},
		send$2: function(text) {
			if (this.get_state() !== 1) {
				return;
			}
			this.$_Send(new $Franca_ClientMessage.$ctor1(text));
		},
		close: function(code, reason) {
			this.$_Close(code, reason);
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		update: function() {
		},
		_Connect: function(address) {
			this.$sock = new WebSocket(address);
			this.$sock.binaryType = 'arraybuffer';
			this.$sock.onclose = ss.mkdel(this, function(res) {
				this.$sockClose(res);
			});
			this.$sock.onerror = ss.mkdel(this, function(evt) {
				this.$sockError(evt);
			});
			this.$sock.onopen = ss.mkdel(this, function(evt1) {
				this.$sockOpen(evt1);
			});
			this.$sock.onmessage = ss.mkdel(this, function(msg) {
				this.$sockMessage(ss.cast(msg, MessageEvent));
			});
			this.connecting();
		},
		$sockMessage: function(msg) {
			if (ss.isInstanceOfType(msg.data, ArrayBuffer)) {
				this.message(new $Franca_ClientMessage(new Franca.BinaryData.$ctor_fromArrayBuffer(ss.cast(msg.data, ArrayBuffer))));
			}
			else {
				this.message(new $Franca_ClientMessage.$ctor1(ss.cast(msg.data, String)));
			}
		},
		$sockOpen: function(evt) {
			this.connected();
		},
		$sockClose: function(res) {
			this.closed(res.code, res.reason);
		},
		$sockError: function(evt) {
			this.error(new $Franca_ClientSocketException.$ctor1('WebSocket error'));
		},
		$_Send: function(message) {
			if (message.type === 1) {
				this.$sock.send(ss.cast(message.data, String));
			}
			else {
				this.$sock.send(ss.cast(message.data, Franca.IBinaryDataJS).get_uint8Array());
			}
		},
		$_Close: function(code, reason) {
			this.$sock.close(code, reason);
		},
		get_state: function() {
			if (ss.isValue(this.$sock)) {
				if (this.$sock.readyState === 3) {
					return 3;
				}
				else if (this.$sock.readyState === 2) {
					return 2;
				}
				else if (this.$sock.readyState === 0) {
					return 0;
				}
				else {
					return 1;
				}
			}
			return 3;
		}
	}, null, [ss.IDisposable]);
	ss.initClass($Franca_ClientSocketException, $asm, {}, ss.Exception);
	$Franca_ClientSocketException.$ctor1.prototype = $Franca_ClientSocketException.$ctor2.prototype = $Franca_ClientSocketException.prototype;
	ss.initClass($Franca_Clipboard, $asm, {});
	ss.initEnum($Franca_CloseCode, $asm, { Unknown: 0, NormalClosure: 1000, GoingAway: 1001, ProtocolError: 1002, UnsupportedData: 1003, NoStatusRcvd: 1005, AbnormalClosure: 1006, InvalidFramePayloadData: 1007, PolicyViolation: 1008, MessageTooBig: 1009, MandatoryExt: 1010, InternalServerError: 1011, TLSHandshake: 1015 });
	ss.initClass($Franca_Colors, $asm, {
		fromJson: function(json) {
			return new $Franca_Colors.$ctor5(Franca.JsonValue.create(Franca.Color).call(null, json.get_item('color0')), Franca.JsonValue.create(Franca.Color).call(null, json.get_item('color1')), Franca.JsonValue.create(Franca.Color).call(null, json.get_item('color2')), Franca.JsonValue.create(Franca.Color).call(null, json.get_item('color3')));
		},
		toJson: function() {
			var json = new Franca.JObject();
			json.set_item('color0', this.topLeft.toJson());
			json.set_item('color1', this.topRight.toJson());
			json.set_item('color2', this.bottomLeft.toJson());
			json.set_item('color3', this.bottomRight.toJson());
			return json;
		},
		premultiply: function() {
			return new $Franca_Colors.$ctor5(this.topLeft.premultiply(), this.topRight.premultiply(), this.bottomLeft.premultiply(), this.bottomRight.premultiply());
		},
		getEnumerator: function() {
			var $result, $state = 0;
			return new ss.IteratorBlockEnumerator(function() {
				$sm1:
				for (;;) {
					switch ($state) {
						case 0: {
							$state = -1;
							$result = this.topLeft;
							$state = 1;
							return true;
						}
						case 1: {
							$state = -1;
							$result = this.topRight;
							$state = 2;
							return true;
						}
						case 2: {
							$state = -1;
							$result = this.bottomLeft;
							$state = 3;
							return true;
						}
						case 3: {
							$state = -1;
							$result = this.bottomRight;
							$state = -1;
							return true;
						}
						default: {
							break $sm1;
						}
					}
				}
				return false;
			}, function() {
				return $result;
			}, null, this);
		},
		$getColorByIndex: function(index) {
			switch (index) {
				case 0: {
					return this.topLeft;
				}
				case 1: {
					return this.topRight;
				}
				case 2: {
					return this.bottomLeft;
				}
				case 3: {
					return this.bottomRight;
				}
			}
			return ss.getDefaultValue(Franca.Color);
		},
		toString: function() {
			return ss.formatString('[Colors: {0}, {1}, {2}, {3}]', this.topLeft, this.topRight, this.bottomLeft, this.bottomRight);
		},
		get_item: function(index) {
			if (index < 0 || index > 3) {
				throw new System.IndexOutOfRangeException();
			}
			return this.$getColorByIndex(index);
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.writeStreamer(Franca.Color).call(writer, this.topLeft, 'color0', false);
				writer.writeStreamer(Franca.Color).call(writer, this.topRight, 'color1', false);
				writer.writeStreamer(Franca.Color).call(writer, this.bottomLeft, 'color2', false);
				writer.writeStreamer(Franca.Color).call(writer, this.bottomRight, 'color3', false);
			}
			finally {
				$t1.dispose();
			}
		},
		getHashCode: function() {
			var h = ss.getHashCode(this.topLeft);
			h = h * 397 ^ ss.getHashCode(this.topRight);
			h = h * 397 ^ ss.getHashCode(this.bottomLeft);
			h = h * 397 ^ ss.getHashCode(this.bottomRight);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Colors)) {
				return false;
			}
			return ss.equals(this.topLeft, o.topLeft) && ss.equals(this.topRight, o.topRight) && ss.equals(this.bottomLeft, o.bottomLeft) && ss.equals(this.bottomRight, o.bottomRight);
		}
	}, null, [ss.IEnumerable, ss.IEnumerable, Franca.IMappable, ss.makeGenericType(Franca.IMappable$1, [$Franca_Colors]), Franca.Serialization.Streaming.IJsonStreamWriter]);
	$Franca_Colors.$ctor1.prototype = $Franca_Colors.$ctor5.prototype = $Franca_Colors.$ctor4.prototype = $Franca_Colors.$ctor7.prototype = $Franca_Colors.$ctor3.prototype = $Franca_Colors.$ctor6.prototype = $Franca_Colors.$ctor2.prototype = $Franca_Colors.prototype;
	$Franca_Colors.__class = false;
	ss.initEnum($Franca_ContainerPosition, $asm, { Static: 0, Absolute: 1, Fixed: 2, Relative: 3, Initial: 4, Inherit: 5 });
	ss.initClass($Franca_ContentManager, $asm, {
		registerFont: function(font, family) {
			$Franca_ContentManager.$registeredFonts.set_item(family, font);
		},
		getFont: function(fileOrFamily) {
			var font = {};
			if ($Franca_ContentManager.$registeredFonts.tryGetValue(fileOrFamily, font)) {
				return font.$;
			}
			var res = {};
			if ($Franca_ContentManager.$fonts.tryGetValue(fileOrFamily, res)) {
				return new $Franca_Gui_MultiFont(this.get_graphicsDevice().get_defaultFontManager(), [new $Franca_Gui_FontCollection(res.$.get_value(), null, null, null)]);
			}
			return null;
		},
		hasAsset: function(T) {
			return function(filename) {
				var pathName = this.getAssetPath(T).call(this, filename);
				var assetName = this.getAssetName(pathName);
				if (this.$assets.containsKey(assetName)) {
					return true;
				}
				return false;
			};
		},
		finalizeContent: function() {
			for (var i = this.$loadingAssets.length - 1; i >= 0; i--) {
				var asset = this.$loadingAssets[i];
				asset.finalizeContent();
				if (asset.get_loaded()) {
					this.$assetLoaded(asset);
				}
			}
		},
		$assetLoaded: function(asset) {
			if (ss.contains(this.$loadingAssets, asset)) {
				ss.remove(this.$loadingAssets, asset);
			}
			if (ss.isInstanceOfType(asset, $Franca_SpriteFont)) {
				var font = ss.cast(asset, $Franca_SpriteFont);
				var $t1 = ss.getEnumerator(font.get_font().get_names());
				try {
					while ($t1.moveNext()) {
						var name = $t1.current();
						this.$spriteFonts.set_item(name, font);
					}
				}
				finally {
					$t1.dispose();
				}
				var filename = Franca.Platform.getFileName(font.get_name());
				this.$spriteFonts.set_item(filename, font);
			}
		},
		load$1: function(T) {
			return function(filename, onLoad, args) {
				var ret = this.load(T).call(this, filename, args);
				if (ret.get_loaded()) {
					onLoad(ret);
				}
				else {
					ret.add_onLoad(onLoad);
				}
				return ret;
			};
		},
		load: function(T) {
			return function(filename, args) {
				var pathName = this.getAssetPath(T).call(this, filename);
				var assetName = this.getAssetName(pathName);
				if (this.$assets.containsKey(assetName)) {
					//return (T)assets[assetName];
					var boxedAsset = this.$assets.get_item(assetName);
					var assetType = ss.getInstanceType(boxedAsset);
					if (ss.isAssignableFrom(T, assetType)) {
						return ss.cast(boxedAsset, T);
					}
					else {
						var casted = boxedAsset;
						return ss.cast(casted, T);
					}
				}
				var asset = ss.createInstance(T);
				this.$assets.set_item(assetName, asset);
				this.$loadingAssets.push(asset);
				asset.load(this, pathName, assetName, args);
				if (ss.isInstanceOfType(asset, $Franca_SpriteFont) && ss.isNullOrUndefined(this.get_defaultFont())) {
					var spriteFont = ss.cast(asset, $Franca_SpriteFont);
					this.set_defaultFont(new $Franca_Gui_MultiFont(spriteFont.get_manager(), [new $Franca_Gui_FontCollection.$ctor1(spriteFont, null, null, null)]));
				}
				return asset;
			};
		},
		loadTexture: function(filename, premultipliedAlpha, mipmapped, disposeCanvas) {
			return this.load($Franca_Texture).call(this, filename, [premultipliedAlpha, mipmapped, disposeCanvas]);
		},
		loadTexture$1: function(filename, onLoad, premultipliedAlpha, mipmapped, disposeCanvas) {
			return this.load$1($Franca_Texture).call(this, filename, onLoad, [premultipliedAlpha, mipmapped, disposeCanvas]);
		},
		loadTextureGif: function(filename, premultipliedAlpha, mipmapped, disposeCanvas) {
			return this.load($Franca_Gif_TextureGif).call(this, filename, [premultipliedAlpha, mipmapped, disposeCanvas]);
		},
		loadTextureGif$1: function(filename, onLoad, premultipliedAlpha, mipmapped, disposeCanvas) {
			return this.load$1($Franca_Gif_TextureGif).call(this, filename, onLoad, [premultipliedAlpha, mipmapped, disposeCanvas]);
		},
		loadBase64Texture: function(type, premultipliedAlpha, mipmapped) {
			var assetName = ss.getTypeFullName(type);
			if (this.$assets.containsKey(assetName)) {
				// skip reflection if already loaded
				return this.loadBase64Texture$1(assetName, null, premultipliedAlpha, mipmapped);
			}
			var base64;
			base64 = type.data;
			return this.loadBase64Texture$1(assetName, base64, premultipliedAlpha, mipmapped);
		},
		loadBase64Texture$1: function(name, base64, premultipliedAlpha, mipmapped) {
			var assetName = name;
			if (this.$assets.containsKey(assetName)) {
				var boxedAsset = this.$assets.get_item(assetName);
				var assetType = ss.getInstanceType(boxedAsset);
				if (ss.isAssignableFrom($Franca_Texture, assetType)) {
					return ss.cast(boxedAsset, $Franca_Texture);
				}
				else {
					var casted = boxedAsset;
					return ss.cast(casted, $Franca_Texture);
				}
			}
			var asset = new $Franca_Texture.$ctor3($Franca_Canvas.fromBase64(base64), premultipliedAlpha, mipmapped, true);
			this.$assets.set_item(assetName, asset);
			return asset;
		},
		loadFont: function(filename, manager, stroke) {
			var font = this.load($Franca_SpriteFont).call(this, filename, [manager]);
			font.set_strokeWidth(stroke);
			return font;
		},
		loadFont$1: function(filename, onLoad, manager, stroke) {
			var font = this.load$1($Franca_SpriteFont).call(this, filename, onLoad, [manager]);
			font.set_strokeWidth(stroke);
			return font;
		},
		loadPixelFont: function(fileWithoutExtension, imageExtension, premultipliedAlpha, mipmapped, disposeCanvas) {
			return this.load($Franca_PixelFont).call(this, fileWithoutExtension, [imageExtension, premultipliedAlpha, mipmapped, disposeCanvas]);
		},
		loadPixelFont$1: function(fileWithoutExtension, imageExtension, onLoad, premultipliedAlpha, mipmapped, disposeCanvas) {
			return this.load$1($Franca_PixelFont).call(this, fileWithoutExtension, onLoad, [imageExtension, premultipliedAlpha, mipmapped, disposeCanvas]);
		},
		loadSound: function(filename, manager) {
			return this.load($Franca_Audio_Sound).call(this, filename, [manager]);
		},
		loadSound$1: function(filename, onLoad, manager) {
			return this.load$1($Franca_Audio_Sound).call(this, filename, onLoad, [manager]);
		},
		loadMusic: function(filename, manager) {
			return this.load($Franca_Audio_Music).call(this, filename, [manager]);
		},
		loadMusic$1: function(filename, onLoad, manager) {
			return this.load$1($Franca_Audio_Music).call(this, filename, onLoad, [manager]);
		},
		loadShader: function(filename, defines) {
			return this.load($Franca_Shader).call(this, filename, defines);
		},
		loadShader$1: function(filename, onLoad, defines) {
			return this.load$1($Franca_Shader).call(this, filename, onLoad, defines);
		},
		loadLanguage: function(filename, languageName, hasHeader) {
			return this.load($Franca_Localization_GameLanguage).call(this, filename, [languageName, hasHeader]);
		},
		loadLanguage$1: function(filename, onLoad, languageName, hasHeader) {
			return this.load$1($Franca_Localization_GameLanguage).call(this, filename, onLoad, [languageName, hasHeader]);
		},
		unload$1: function(assetName, unloadShaderPrograms) {
			if (!this.$assets.containsKey(assetName)) {
				return;
			}
			var asset = this.$assets.get_item(assetName);
			this.$assets.remove(assetName);
			var obsoleteKeys = [];
			var $t1 = this.$spriteFonts.getEnumerator();
			try {
				while ($t1.moveNext()) {
					var kvp = $t1.current();
					if (ss.referenceEquals(kvp.value, asset)) {
						obsoleteKeys.push(kvp.key);
					}
				}
			}
			finally {
				$t1.dispose();
			}
			for (var $t2 = 0; $t2 < obsoleteKeys.length; $t2++) {
				var key = obsoleteKeys[$t2];
				this.$spriteFonts.remove(key);
			}
			var disposable = ss.safeCast(asset, ss.IDisposable);
			if (ss.isValue(disposable)) {
				var effect = (unloadShaderPrograms ? ss.safeCast(asset, $Franca_Effect) : null);
				if (ss.isValue(effect)) {
					effect.disposeAll();
				}
				else {
					disposable.dispose();
				}
			}
		},
		unload: function(asset, unloadShaderPrograms) {
			this.unload$1(asset.get_name(), unloadShaderPrograms);
		},
		unloadAll: function(unloadShaderPrograms) {
			var keys = Enumerable.from(this.$assets.get_keys()).toArray();
			for (var $t1 = 0; $t1 < keys.length; $t1++) {
				var key = keys[$t1];
				this.unload$1(key, unloadShaderPrograms);
			}
			this.$spriteFonts.clear();
		},
		getAssetName: function(assetPath) {
			//return assetPath;// Platform.GetFileNameWithoutExtension(assetPath);
			return assetPath.substring(this.$contentRoot.length + Franca.Platform.get_pathSeparator().length);
		},
		getAssetPath: function(T) {
			return function(assetWithExt) {
				var path = assetWithExt;
				var type = T;
				if (this.$typePaths.containsKey(type)) {
					path = this.$typePaths.get_item(type) + Franca.Platform.get_pathSeparator() + assetWithExt;
				}
				else {
					var $t1 = this.$typePaths.getEnumerator();
					try {
						while ($t1.moveNext()) {
							var kvp = $t1.current();
							if (ss.isAssignableFrom(kvp.key, T)) {
								path = kvp.value + Franca.Platform.get_pathSeparator() + assetWithExt;
							}
						}
					}
					finally {
						$t1.dispose();
					}
				}
				return this.$contentRoot + Franca.Platform.get_pathSeparator() + path;
			};
		},
		getTypePath: function(T) {
			return function() {
				var type = T;
				if (this.$typePaths.containsKey(type)) {
					return this.$typePaths.get_item(type);
				}
				return null;
			};
		},
		setTypePath: function(T) {
			return function(path) {
				var type = T;
				this.$typePaths.set_item(type, path);
			};
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				this.unloadAll(true);
				this.$graphicsDevice.$removeContentManager(this);
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_graphicsDevice: function() {
			return this.$graphicsDevice;
		},
		get_contentRoot: function() {
			return this.$contentRoot;
		},
		get_typePaths: function() {
			return this.$typePaths;
		},
		get_loadingContent: function() {
			return this.$loadingAssets.length !== 0;
		},
		get_isContentReady: function() {
			if (this.$loadingAssets.length === 0) {
				return true;
			}
			for (var i = 0; i < this.$loadingAssets.length; i++) {
				if (!this.$loadingAssets[i].get_ready()) {
					return false;
				}
			}
			return true;
		},
		get_defaultFont: function() {
			return this.$1$DefaultFontField;
		},
		set_defaultFont: function(value) {
			this.$1$DefaultFontField = value;
		}
	}, null, [ss.IDisposable]);
	ss.initEnum($Franca_DeadzoneProcessingStyle, $asm, { clamped: 0, circular: 1, square: 2, custom: 3, raw: 4 });
	ss.initClass($Franca_DebugGraph, $asm, {
		get_color: function() {
			return this.$1$ColorField;
		},
		set_color: function(value) {
			this.$1$ColorField = value;
		},
		get_label: function() {
			return this.$1$LabelField;
		},
		set_label: function(value) {
			this.$1$LabelField = value;
		},
		get_separatePeriods: function() {
			return this.$1$SeparatePeriodsField;
		},
		set_separatePeriods: function(value) {
			this.$1$SeparatePeriodsField = value;
		},
		update: function(count) {
			this.$counts.add(count);
		},
		render: function(x, y) {
			var pixelData = new $Franca_CanvasPixelData.$ctor3(this.$canvas.get_width(), this.$canvas.get_height(), 0);
			var max = ((this.$counts.get_count() > 0) ? Enumerable.from(this.$counts).max() : 0);
			this.$plotGraph(pixelData, this.$counts, max);
			pixelData.setPixelData(this.$canvas);
			this.$texture.updateRegion(null);
			$Franca_DebugGraph.$batch.begin(0, 3, 12, null);
			$Franca_DebugGraph.$batch.draw$3(this.$texture, new Franca.Vector2.$ctor3(x, y), $Franca_HdrColors.op_Implicit(Franca.Color.white), 0, 0);
			$Franca_DebugGraph.$batch.end();
			this.$drawNumberAndLabel(Enumerable.from(this.$counts).firstOrDefault(null, ss.getDefaultValue(ss.Int32)), max, x, y);
		},
		$drawNumberAndLabel: function(mostRecent, max, x, y) {
			if (ss.isNullOrUndefined($Franca_DebugGraph.$font) || !$Franca_DebugGraph.$font.get_loaded()) {
				return;
			}
			var bottomY = $Franca_DebugGraph.height;
			var str = (this.get_separatePeriods() ? Franca.NumberExtensions.toString$4(mostRecent, true, 0) : System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, mostRecent));
			var formatting = new Franca.Gui.Formatting(12, false, false, false, true, Franca.Color.white);
			var size = $Franca_DebugGraph.$font.measure$2(str, formatting, false);
			$Franca_DebugGraph.$font.draw$1(str, formatting, x + this.$texture.get_width() - size.width, y + bottomY + 3 + size.get_height(), Franca.Color.op_Implicit(Franca.Color.white), false, null, null, null, true, 1);
			str = (this.get_separatePeriods() ? Franca.NumberExtensions.toString$4(max, true, 0) : System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, max)) + ' max';
			size = $Franca_DebugGraph.$font.measure$2(str, formatting, false);
			$Franca_DebugGraph.$font.draw$1(str, formatting, x + this.$texture.get_width() - size.width, y + bottomY + 3 + size.get_height() * 2, Franca.Color.op_Implicit(Franca.Color.white), false, null, null, null, true, 1);
			if (ss.isValue(this.get_label())) {
				$Franca_DebugGraph.$font.draw$1(this.get_label(), formatting, x, y + bottomY + 3 + size.get_height(), Franca.Color.op_Implicit(Franca.Color.white), false, null, null, null, true, 1);
			}
		},
		$plotGraph: function(pixels, buffer, max) {
			var bottomY = $Franca_DebugGraph.height;
			var x = pixels.width - 1;
			var $t1 = buffer.getEnumerator();
			try {
				while ($t1.moveNext()) {
					var value = $t1.current();
					var height = ((max === 0) ? 1 : Math.round(value / max * 50));
					if (height === 0) {
						height = 1;
					}
					for (var y = bottomY - height; y < bottomY; y++) {
						pixels.data[y * pixels.stride + x * 4 + 0] = this.get_color().get_r();
						pixels.data[y * pixels.stride + x * 4 + 1] = this.get_color().get_g();
						pixels.data[y * pixels.stride + x * 4 + 2] = this.get_color().get_b();
						pixels.data[y * pixels.stride + x * 4 + 3] = this.get_color().get_a();
					}
					x--;
					if (x < 0) {
						break;
					}
				}
			}
			finally {
				$t1.dispose();
			}
		},
		get_size: function() {
			var formatting = new Franca.Gui.Formatting(12, false, false, false, true, Franca.Color.white);
			return new Franca.Size.$ctor2($Franca_DebugGraph.width, Math.ceil(53 + ((ss.isValue($Franca_DebugGraph.$font) && $Franca_DebugGraph.$font.get_loaded()) ? ($Franca_DebugGraph.$font.measure$2('M', formatting, true).get_height() * 2) : 0)));
		}
	});
	ss.initClass($Franca_DebugOptions, $asm, {
		get_openGL: function() {
			return this.$1$OpenGLField;
		},
		set_openGL: function(value) {
			this.$1$OpenGLField = value;
		}
	});
	ss.initEnum($Franca_DepthPrecision, $asm, { none: -3, bpp24NotSupported: -1, bpp32NotSupported: -2, bpp16: 33189, bpp24: -1, bpp32: -2 });
	ss.initInterface($Franca_IAsset, $asm, { get_ready: null, get_loaded: null, get_name: null, add_onLoad: null, remove_onLoad: null, load: null, finalizeContent: null });
	ss.initClass($Franca_Effect, $asm, {
		getProgram: function(name) {
			return this.$programs.get_item(name);
		},
		addProgram: function(name, program) {
			this.$programs.set_item(name, program);
			var $t1 = ss.getEnumerator(program.get_uniforms());
			try {
				while ($t1.moveNext()) {
					var u = $t1.current();
					if (!this.$parameters.containsKey(u.get_name())) {
						this.$parameters.set_item(u.get_name(), new $Franca_ShaderParamCollection.$ctor1(u.get_name()));
					}
					this.$parameters.get_item(u.get_name()).add(u);
				}
			}
			finally {
				$t1.dispose();
			}
			if (!ss.contains(this.$programOrder, name)) {
				this.$programOrder.push(name);
			}
		},
		removeProgram: function(name) {
			var program = this.$programs.get_item(name);
			var $t1 = ss.getEnumerator(program.get_uniforms());
			try {
				while ($t1.moveNext()) {
					var u = $t1.current();
					if (this.$parameters.containsKey(u.get_name())) {
						var col = this.$parameters.get_item(u.get_name());
						col.remove(u);
						if (col.get_count() === 0) {
							this.$parameters.remove(u.get_name());
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
			ss.remove(this.$programOrder, name);
			return this.$programs.remove(name);
		},
		applyProgram$1: function(programName, updateUniforms) {
			var program = this.$programs.get_item(programName);
			this.applyProgram(program, updateUniforms);
		},
		applyProgram: function(program, updateUniforms) {
			$Franca_OpenGL_WebGL_GL.useProgram$1(program);
			if (updateUniforms) {
				program.updateUniforms();
			}
		},
		getEnumerator: function() {
			var $result, $state = 0, $t1, prog;
			return new ss.IteratorBlockEnumerator(function() {
				$sm1:
				for (;;) {
					switch ($state) {
						case 0: {
							$state = -1;
							$t1 = 0;
							$state = 1;
							continue $sm1;
						}
						case 1: {
							$state = -1;
							if (!($t1 < this.$programOrder.length)) {
								$state = -1;
								break $sm1;
							}
							prog = this.$programOrder[$t1];
							$result = this.$programs.get_item(prog);
							$state = 2;
							return true;
						}
						case 2: {
							$state = -1;
							$t1++;
							$state = 1;
							continue $sm1;
						}
						default: {
							break $sm1;
						}
					}
				}
				return false;
			}, function() {
				return $result;
			}, null, this);
		},
		setSampler: function(index, texture, name, wrap, filter) {
			if (ss.isNullOrUndefined(name)) {
				name = 'texSampler' + index;
			}
			this.get_item(name).setSampler(index);
			$Franca_OpenGL_WebGL_GL.activeTexture($Franca_OpenGL_WebGL_Constants.texturE0 + index);
			$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_Texture.op_Implicit(texture));
			if (System.EnumExtensions.hasFlag(filter, 2)) {
				$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_MAG_FILTER, $Franca_OpenGL_WebGL_Constants.LINEAR);
			}
			else {
				$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_MAG_FILTER, $Franca_OpenGL_WebGL_Constants.NEAREST);
			}
			if (System.EnumExtensions.hasFlag(filter, 1)) {
				$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_MIN_FILTER, $Franca_OpenGL_WebGL_Constants.LINEAR);
			}
			else {
				$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_MIN_FILTER, $Franca_OpenGL_WebGL_Constants.NEAREST);
			}
			if (System.EnumExtensions.hasFlag(wrap, 1)) {
				$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_WRAP_S, $Franca_OpenGL_WebGL_Constants.clamP_TO_EDGE);
			}
			else {
				$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_WRAP_S, $Franca_OpenGL_WebGL_Constants.REPEAT);
			}
			if (System.EnumExtensions.hasFlag(wrap, 2)) {
				$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_WRAP_T, $Franca_OpenGL_WebGL_Constants.clamP_TO_EDGE);
			}
			else {
				$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_WRAP_T, $Franca_OpenGL_WebGL_Constants.REPEAT);
			}
		},
		get_ready: function() {
			return this.get_loaded();
		},
		get_loaded: function() {
			return this.$1$LoadedField;
		},
		set_loaded: function(value) {
			this.$1$LoadedField = value;
		},
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		load: function(content, file, name, args) {
			this.set_name(name);
			this.$fileRes = $Franca_File.load($Franca_Text_TextFile).call(null, file, null, null);
			this.$content = content;
		},
		$getDefines: function(defines) {
			if (ss.isNullOrUndefined(defines)) {
				return [];
			}
			return Enumerable.from(defines).toArray();
		},
		finalizeContent: function() {
			if (this.get_loaded()) {
				return;
			}
			if (this.$fileRes.get_loaded() && ss.isNullOrUndefined(this.$loadingShaders)) {
				this.$loadingShaders = new (ss.makeGenericType(ss.Dictionary$2, [String, Array]))();
				var json = Franca.Serialization.Json.convert($Franca_JsonData_EffectJson).call(null, Franca.Serialization.Json.parse($Franca_Text_TextFile.op_Implicit(this.$fileRes.get_value())));
				var $t1 = json.get_programs().getEnumerator();
				try {
					while ($t1.moveNext()) {
						var prog = $t1.current();
						this.$loadingShaders.set_item(prog.get_name(), []);
						this.$programOrder.push(prog.get_name());
						if (!System.StringExtensions.isNullOrEmpty(prog.get_vertexShader(), false)) {
							if (!this.$content.hasAsset($Franca_Shader).call(this.$content, prog.get_vertexShader())) {
								this.$loadingShaders.get_item(prog.get_name()).push(this.$content.loadShader(prog.get_vertexShader(), this.$getDefines(prog.get_vertexDefines())));
							}
							else {
								this.$loadingShaders.get_item(prog.get_name()).push(this.$content.loadShader(prog.get_vertexShader(), []).recompile(this.$getDefines(prog.get_vertexDefines())));
							}
						}
						else {
							this.$loadingShaders.get_item(prog.get_name()).push(this.$content.get_graphicsDevice().get_builtinAssets().get_shaders().get_item(0));
						}
						if (!System.StringExtensions.isNullOrEmpty(prog.get_fragmentShader(), false)) {
							if (!this.$content.hasAsset($Franca_Shader).call(this.$content, prog.get_fragmentShader())) {
								this.$loadingShaders.get_item(prog.get_name()).push(this.$content.loadShader(prog.get_fragmentShader(), this.$getDefines(prog.get_fragmentDefines())));
							}
							else {
								this.$loadingShaders.get_item(prog.get_name()).push(this.$content.loadShader(prog.get_fragmentShader(), []).recompile(this.$getDefines(prog.get_fragmentDefines())));
							}
						}
						else {
							this.$loadingShaders.get_item(prog.get_name()).push(this.$content.get_graphicsDevice().get_builtinAssets().get_shaders().get_item(1));
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
			if (ss.isValue(this.$loadingShaders)) {
				var $t2 = Enumerable.from(this.$loadingShaders.get_keys()).toArray();
				for (var $t3 = 0; $t3 < $t2.length; $t3++) {
					var key = $t2[$t3];
					var shaders = this.$loadingShaders.get_item(key);
					var loaded = true;
					for (var $t4 = 0; $t4 < shaders.length; $t4++) {
						var shader = shaders[$t4];
						if (!shader.get_loaded()) {
							loaded = false;
							break;
						}
					}
					if (loaded) {
						this.addProgram(key, new $Franca_ShaderProgram.$ctor1(this.$content.get_graphicsDevice(), shaders[0], shaders[1]));
						this.$loadingShaders.remove(key);
					}
				}
				if (this.$loadingShaders.get_count() === 0) {
					this.set_loaded(true);
					this.$content = null;
					this.$fileRes = null;
					this.$loadingShaders = null;
					var onLoad = this.$1$OnLoadField;
					if (!ss.staticEquals(onLoad, null)) {
						onLoad(this);
					}
				}
			}
		},
		disposeAll: function() {
			var $t1 = ss.getEnumerator(this.$programs.get_values());
			try {
				while ($t1.moveNext()) {
					var program = $t1.current();
					program.dispose();
					if (ss.isValue(program.get_vertexShader())) {
						program.get_vertexShader().dispose();
					}
					if (ss.isValue(program.get_fragmentShader())) {
						program.get_fragmentShader().dispose();
					}
				}
			}
			finally {
				$t1.dispose();
			}
			this.dispose();
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				var $t1 = ss.getEnumerator(this.$programs.get_values());
				try {
					while ($t1.moveNext()) {
						var program = $t1.current();
						program.dispose();
					}
				}
				finally {
					$t1.dispose();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_item: function(uniformName) {
			var paramCol = {};
			if (this.$parameters.tryGetValue(uniformName, paramCol)) {
				return paramCol.$;
			}
			// get and cache it
			paramCol.$ = new $Franca_ShaderParamCollection.$ctor1(uniformName);
			var $t1 = ss.getEnumerator(this.get_programs().get_values());
			try {
				while ($t1.moveNext()) {
					var program = $t1.current();
					var param = program.getUniform(uniformName);
					if (param.get_isValid()) {
						paramCol.$.add(param);
					}
				}
			}
			finally {
				$t1.dispose();
			}
			this.$parameters.set_item(uniformName, paramCol.$);
			return paramCol.$;
		},
		get_uniforms: function() {
			return Enumerable.from(this.$parameters.get_values()).select(function(p) {
				return p;
			});
		},
		get_programs: function() {
			return this.$programCol;
		},
		get_programOrder: function() {
			return this.$programOrder;
		},
		set_programOrder: function(value) {
			this.$programOrder = value;
		}
	}, null, [ss.IDisposable, $Franca_IAsset, ss.IEnumerable, ss.IEnumerable]);
	ss.initEnum($Franca_Features, $asm, { WebWorkers: 0, LocalStorage: 1, WebAudio: 2, Gamepad: 3 });
	ss.initClass($Franca_File, $asm, {});
	ss.initClass($Franca_FileLoadException, $asm, {}, ss.Exception);
	$Franca_FileLoadException.$ctor1.prototype = $Franca_FileLoadException.$ctor2.prototype = $Franca_FileLoadException.prototype;
	ss.initEnum($Franca_FileLocation, $asm, { appContent: 0, storage: 1, specificStorage: 2, direct: 3 });
	ss.initClass($Franca_FileResult, $asm, {
		$setValue: function(v) {
			this.value = v;
		},
		get_type: function() {
			return this.$type;
		},
		set_type: function(value) {
			this.$type = value;
		},
		get_name: function() {
			return this.$name;
		},
		set_name: function(value) {
			this.$name = value;
		},
		get_location: function() {
			return this.$location;
		},
		set_location: function(value) {
			this.$location = value;
		},
		get_loaded: function() {
			return this.$loaded;
		},
		set_loaded: function(value) {
			this.$loaded = value;
		},
		get_$onLoad: function() {
			return this.$onLoad;
		},
		set_$onLoad: function(value) {
			this.$onLoad = value;
		},
		get_$onError: function() {
			return this.$onError;
		},
		set_$onError: function(value) {
			this.$onError = value;
		},
		get_constructor: function() {
			return this.$constructor;
		},
		get_error: function() {
			return this.$error;
		},
		set_error: function(value) {
			this.$error = value;
		},
		$attachListeners: function() {
			var $t1 = this.$events.getEnumerator();
			try {
				while ($t1.moveNext()) {
					var kvp = $t1.current();
					this.$eventTarget.addEventListener(kvp.key, kvp.value);
				}
			}
			finally {
				$t1.dispose();
			}
		},
		$removeListeners: function() {
			var $t1 = this.$events.getEnumerator();
			try {
				while ($t1.moveNext()) {
					var kvp = $t1.current();
					this.$eventTarget.removeEventListener(kvp.key, kvp.value);
				}
			}
			finally {
				$t1.dispose();
			}
			this.$events.clear();
		},
		get_$events: function() {
			return this.$events;
		},
		get_$eventTarget: function() {
			return this.$eventTarget;
		},
		set_$eventTarget: function(value) {
			this.$eventTarget = value;
		},
		get_$extra: function() {
			return this.$extra;
		},
		set_$extra: function(value) {
			this.$extra = value;
		}
	});
	$Franca_FileResult.$ctor1.prototype = $Franca_FileResult.prototype;
	ss.initEnum($Franca_FloatType, $asm, { half: 0, single: 1 });
	ss.initClass($Franca_Font, $asm, {
		init: function(unitsPerEm, metrics) {
			this.$unitsPerEm = unitsPerEm;
			this.$metrics = metrics;
		},
		getFontMetrics: function(fontSize) {
			return this.$provider.$getFontMetrics(this.$metrics, this.$unitsPerEm, fontSize);
		},
		getGlyphMetrics: function(c, fontSize) {
			if (c === 9) {
				var metrics = this.$provider.$getGlyphMetrics(32, fontSize);
				return new $Franca_GlyphMetrics.$ctor3(metrics.get_bearingX(), metrics.get_bearingY(), metrics.get_advanceWidth() * 4, metrics.get_xMin(), metrics.get_yMin(), metrics.get_xMax(), metrics.get_yMax());
			}
			else {
				return this.$provider.$getGlyphMetrics(c, fontSize);
			}
		},
		getGlyphMetrics$1: function(c, fontSize) {
			if (c <= 65535) {
				return this.getGlyphMetrics(c, fontSize);
			}
			else {
				return this.$provider.$getGlyphMetrics$1(c, fontSize);
			}
		},
		draw: function(context, text, color, fontSize, position, kerning) {
			context.drawText(this, text, color, fontSize, position, kerning);
		},
		stroke: function(context, text, color, fontSize, position, strokeSize, kerning) {
			context.strokeText(this, text, color, fontSize, position, strokeSize, kerning);
		},
		hasChar: function(c) {
			return this.$provider.$hasChar(c);
		},
		hasChar$1: function(c) {
			return this.$provider.$hasChar$1(c);
		},
		getKerningValue: function(left, right) {
			return this.$provider.$getKerningValue(left, right);
		},
		getKerningValue$1: function(left, right) {
			return this.$provider.$getKerningValue$1(left, right);
		},
		getKerningValue$2: function(left, right, scale) {
			return this.$provider.$getKerningValue$2(left, right, scale);
		},
		getKerningValue$3: function(left, right, scale) {
			return this.$provider.$getKerningValue$3(left, right, scale);
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				if (ss.isValue(this.$provider)) {
					this.$provider.dispose();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_unitsPerEm: function() {
			return this.$unitsPerEm;
		},
		get_names: function() {
			return this.$provider.get_$names();
		},
		get_ready: function() {
			return this.get_loaded();
		},
		get_loaded: function() {
			return this.$1$LoadedField;
		},
		set_loaded: function(value) {
			this.$1$LoadedField = value;
		},
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		load: function(content, file, name, args) {
			this.set_name(name);
			this.$fileRes = $Franca_File.load($Franca_Font).call(null, file, null, null);
		},
		finalizeContent: function() {
			if (this.$fileRes.get_loaded() && !this.get_loaded()) {
				this.$provider = this.$fileRes.get_value().$provider;
				this.$metrics = this.$fileRes.get_value().$metrics;
				this.$unitsPerEm = this.$fileRes.get_value().$unitsPerEm;
				this.set_loaded(true);
				this.$fileRes = null;
				var onLoad = this.$1$OnLoadField;
				if (!ss.staticEquals(onLoad, null)) {
					onLoad(this);
				}
			}
		},
		get_strokeWidth: function() {
			return this.$strokeWidth;
		},
		set_strokeWidth: function(value) {
			this.$strokeWidth = value;
		},
		get_$provider: function() {
			return this.$provider;
		}
	}, null, [Franca.IFileResult, $Franca_IAsset, ss.IDisposable]);
	$Franca_Font.$ctor1.prototype = $Franca_Font.prototype;
	ss.initClass($Franca_FontMetrics, $asm, {
		get_ascent: function() {
			return this.$ascent;
		},
		get_descent: function() {
			return this.$descent;
		},
		get_linegap: function() {
			return this.$linegap;
		},
		get_linespace: function() {
			return this.$ascent - this.$descent + this.$linegap;
		},
		get_linesize: function() {
			return this.$ascent - this.$descent;
		},
		get_boundingBox: function() {
			return Franca.RectangleF.fromLTRB(this.$xMin, -this.$yMax, this.$xMax, -this.$yMin);
		},
		get_boundingSize: function() {
			return this.get_boundingBox().size;
		},
		get_width: function() {
			return this.$xMax - this.$xMin;
		},
		get_height: function() {
			return this.$yMax - this.$yMin;
		},
		get_xMin: function() {
			return this.$xMin;
		},
		get_xMax: function() {
			return this.$xMax;
		},
		get_yMax: function() {
			return this.$yMax;
		},
		get_yMin: function() {
			return this.$yMin;
		},
		getHashCode: function() {
			var h = this.$ascent;
			h = h * 397 ^ this.$descent;
			h = h * 397 ^ this.$linegap;
			h = h * 397 ^ this.$xMin;
			h = h * 397 ^ this.$yMin;
			h = h * 397 ^ this.$xMax;
			h = h * 397 ^ this.$yMax;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_FontMetrics)) {
				return false;
			}
			return this.$ascent === o.$ascent && this.$descent === o.$descent && this.$linegap === o.$linegap && this.$xMin === o.$xMin && this.$yMin === o.$yMin && this.$xMax === o.$xMax && this.$yMax === o.$yMax;
		}
	});
	$Franca_FontMetrics.$ctor3.prototype = $Franca_FontMetrics.$ctor1.prototype = $Franca_FontMetrics.$ctor2.prototype = $Franca_FontMetrics.prototype;
	$Franca_FontMetrics.__class = false;
	ss.initClass($Franca_FrancaFramework, $asm, {});
	ss.initEnum($Franca_FullscreenMode, $asm, { borderlessWindow: 0, exclusive: 1, desktop: 2 });
	ss.initInterface($Franca_Gui_IGuiContext, $asm, { get_graphicsDevice: null, get_content: null, get_input: null });
	ss.initClass($Franca_GameContainer, $asm, {
		add_onResolutionChanged: function(value) {
			this.$1$OnResolutionChangedField = ss.delegateCombine(this.$1$OnResolutionChangedField, value);
		},
		remove_onResolutionChanged: function(value) {
			this.$1$OnResolutionChangedField = ss.delegateRemove(this.$1$OnResolutionChangedField, value);
		},
		$createWindowProvider: function() {
			this.$window = new $Franca_$JSWindow(this, this.$anchor, this.$position);
		},
		messageBox: function(text) {
			this.$window.$messageBox(text);
		},
		run: function() {
			if (!$Franca_FrancaFramework.get_isInitialized()) {
				throw new ss.InvalidOperationException('Franca Framework not initialized, did you forget FrancaFramework.Init?');
			}
			if (this.$window.get_$startMainLoopBeforeInit()) {
				$Franca_MainLoop.set_gameContainer(this);
				$Franca_MainLoop.start();
			}
			else {
				this.$start(true);
			}
		},
		$start: function(startMainLoop) {
			var gameContainerOld = $Franca_MainLoop.get_gameContainer();
			$Franca_MainLoop.set_gameContainer(null);
			$Franca_MainLoop.set_gameContainer(this);
			this.init();
			this.bindKeys();
			this.loadContent();
			this.$customMainLoop = false;
			this.set_visible(true);
			$Franca_GraphicsDevice.set_current(null);
			$Franca_MainLoop.set_gameContainer(null);
			$Franca_MainLoop.set_gameContainer(gameContainerOld);
			if (startMainLoop) {
				$Franca_MainLoop.set_gameContainer(this);
				$Franca_MainLoop.start();
			}
		},
		init: function() {
			this.$graphicsDevice = this.get_$window().$createGraphicsDevice();
			if (ss.isNullOrUndefined($Franca_GraphicsDevice.get_default())) {
				$Franca_GraphicsDevice.set_default(this.$graphicsDevice);
			}
			this.$audioContext = new $Franca_Audio_AudioContext();
			this.$videoContext = new $Franca_Video_VideoContext(this.$graphicsDevice);
			this.$content = new $Franca_ContentManager(this.$graphicsDevice, 'Content');
			this.$input = new $Franca_InputHandler(this);
			$Franca_GraphicsDevice.set_current(this.$graphicsDevice);
			this.$graphicsDevice.$loadContent();
			this.$graphicsDevice.setDefaultState(true);
			this.$graphicsDevice.set_viewport(new Franca.Rectangle.$ctor3(0, 0, this.get_width(), this.get_height()));
			this.$graphicsDevice.clear();
		},
		setResolution: function(fullscreen) {
			this.setResolution$1(fullscreen, -1, -1);
		},
		setResolution$1: function(fullscreen, width, height) {
			this.$newResolution = new $Franca_$ResolutionSwitch(fullscreen, width, height);
			this.get_$window().$setResolution(fullscreen, width, height);
		},
		$checkResolution: function() {
			//#if DOTNET
			//            if (Window.WindowResized) {
			//                Window.WindowResized = false;
			//                if (expectedWidth != Width && expectedHeight != Height) {
			//                    newResolution = new ResolutionSwitch(ScreenState, Width, Height);
			//                }
			//            }
			//#endif
			var detectedResolution;
			if (ss.isValue(detectedResolution = this.get_$window().$checkResolutionChanged())) {
				this.$newResolution = new $Franca_$ResolutionSwitch(this.get_screenState(), this.get_width(), this.get_height());
			}
			if (ss.isValue(this.$newResolution)) {
				var res = this.$newResolution;
				this.$newResolution = null;
				var oldSize = new Franca.Size.$ctor2(this.get_width(), this.get_height());
				this.get_$window().$commitResolutionChange(res);
				this.$graphicsDevice.setResolution(res.$width, res.$height);
				this.$graphicsDevice.set_viewport(new Franca.Rectangle.$ctor3(Math.round(this.$graphicsDevice.get_viewport().location.x / oldSize.width * res.$width), Math.round(this.$graphicsDevice.get_viewport().location.y / oldSize.height * res.$height), Math.round(this.$graphicsDevice.get_viewport().size.width / oldSize.width * res.$width), Math.round(this.$graphicsDevice.get_viewport().size.height / oldSize.height * res.$height)));
				this.$screenState = res.$fullscreen;
				var onResChange = this.$1$OnResolutionChangedField;
				if (!ss.staticEquals(onResChange, null)) {
					onResChange(this, res.$width, res.$height);
				}
			}
		},
		bindKeys: function() {
		},
		loadContent: function() {
		},
		update: function(gameTime, elapsed) {
		},
		step: function(gameTime, elapsed) {
		},
		interpolate: function(frameAlpha) {
		},
		render: function(gameTime, elapsed) {
		},
		startFrame: function(gameTime, elapsed) {
			this.$lastFrameTime = gameTime;
		},
		redrawWindow: function() {
			if (this.$lastFrameTime.ticks > (new ss.TimeSpan(0)).ticks) {
				this.$checkResolution();
				this.processEvents();
				this.render(this.$lastFrameTime, new ss.TimeSpan(0));
				this.swapBuffers();
			}
		},
		close: function() {
			this.get_$window().$close();
		},
		exit: function() {
		},
		endFrame: function(gameTime, elapsed) {
			// clear text buffer for this frame
			ss.clear(this.get_input().get_textBuffer());
			// this will always tell GL to throw errors if debugging is turned on
			// when errors occur, GL.Debug is set to true so, if execution continues
			// beyond this point, errors checked elsewhere will throw immediately.
			if (this.get_debug().get_openGL().get_debug()) {
				if (this.get_debug().get_openGL().get_frequency() === 1 || this.get_debug().get_openGL().get_frequency() === 0 && this.$nextOGLDebugTime.ticks <= gameTime.ticks) {
					this.$nextOGLDebugTime = new ss.TimeSpan(gameTime.ticks + this.get_debug().get_openGL().get_interval().ticks);
					try {
						$Franca_OpenGL_WebGL_GL.throwErrors(true);
					}
					catch ($t1) {
						$t1 = ss.Exception.wrap($t1);
						if (ss.isInstanceOfType($t1, $Franca_OpenGL_WebGL_GLError)) {
							var glErr = ss.cast($t1, $Franca_OpenGL_WebGL_GLError);
							$Franca_OpenGL_WebGL_GL.set_debug(true);
							throw glErr;
						}
						else {
							throw $t1;
						}
					}
				}
			}
		},
		processEvents: function() {
			if (ss.isValue(this.$graphicsDevice.b32Message)) {
				if (Franca.UtcDate.op_Subtraction(Franca.UtcDate.get_now(), this.$_started).ticks / 10000 > 91386) {
					$Franca_JS_NonBlockingAlert.show(this.$graphicsDevice.b32Message, '__b32__', true);
					this.$graphicsDevice.b32Message = null;
				}
			}
			if (ss.isValue(this.$audioContext)) {
				this.$audioContext.checkEnded();
			}
			if (ss.isValue(this.$videoContext)) {
				this.$videoContext.update();
			}
			this.get_$window().$processEvents();
		},
		swapBuffers: function() {
			this.get_$window().$swapBuffers();
		},
		setIcon$3: function(path) {
			this.get_$window().$setIcon$3(path);
		},
		setIcon$1: function(bytes) {
			this.get_$window().$setIcon$1(bytes);
		},
		setIcon: function(data) {
			this.get_$window().$setIcon(data);
		},
		setIcon$2: function(stream) {
			this.get_$window().$setIcon$2(stream);
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			var prevContext = $Franca_GraphicsDevice.get_current();
			$Franca_GraphicsDevice.set_current(this.$graphicsDevice);
			if (disposing) {
				// Free any other managed objects here.
				if (ss.isValue(this.$content)) {
					this.$content.dispose();
				}
				if (ss.isValue(this.$audioContext)) {
					this.$audioContext.dispose();
				}
				if (ss.isValue(this.$videoContext)) {
					this.$videoContext.dispose();
				}
				if (ss.isValue(this.$input)) {
					this.$input.dispose();
				}
				this.$graphicsDevice.dispose();
				$Franca_Audio_AudioContext.exit();
				var $t1 = ss.getEnumerator($Franca_ContentManager.get_$fonts().get_values());
				try {
					while ($t1.moveNext()) {
						var r = $t1.current();
						var font = r.get_value();
						font.dispose();
					}
				}
				finally {
					$t1.dispose();
				}
				$Franca_ContentManager.get_$fonts().clear();
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
			$Franca_GraphicsDevice.set_current(prevContext);
		},
		get_closed: function() {
			return this.$closed;
		},
		set_closed: function(value) {
			this.$closed = value;
		},
		get_anchor: function() {
			return this.$anchor;
		},
		set_anchor: function(value) {
			this.$anchor = value;
			this.get_$window().$anchorChanged();
		},
		get_position: function() {
			return this.$position;
		},
		set_position: function(value) {
			this.$position = value;
			this.get_$window().$positionChanged();
		},
		get_screenState: function() {
			return this.$screenState;
		},
		set_screenState: function(value) {
			this.$screenState = value;
		},
		get_graphicsDevice: function() {
			return this.$graphicsDevice;
		},
		get_audioContext: function() {
			return this.$audioContext;
		},
		get_videoContext: function() {
			return this.$videoContext;
		},
		get_content: function() {
			return this.$content;
		},
		set_content: function(value) {
			this.$content = value;
		},
		get_input: function() {
			return this.$input;
		},
		set_input: function(value) {
			this.$input = value;
		},
		get_debug: function() {
			return this.$1$DebugField;
		},
		set_debug: function(value) {
			this.$1$DebugField = value;
		},
		get_FPS: function() {
			return this.$fps;
		},
		set_FPS: function(value) {
			this.$fps = value;
		},
		get_isFixedTimeStep: function() {
			return this.$1$IsFixedTimeStepField;
		},
		set_isFixedTimeStep: function(value) {
			this.$1$IsFixedTimeStepField = value;
		},
		get_timeStep: function() {
			return this.$timeStep;
		},
		set_timeStep: function(value) {
			if (value.ticks <= (new ss.TimeSpan(0)).ticks) {
				throw new ss.ArgumentOutOfRangeException('value', "GameContainer TimeStep can't be zero or less");
			}
			this.$timeStep = value;
		},
		get_maxFrameTime: function() {
			return this.$maxFrameTime;
		},
		set_maxFrameTime: function(value) {
			this.$maxFrameTime = value;
		},
		get_ime: function() {
			return this.$imeState;
		},
		get_resizable: function() {
			return this.$resizable;
		},
		set_resizable: function(value) {
			if (this.$resizable !== value) {
				this.$resizable = value;
				if (ss.isValue(this.get_$window())) {
					this.get_$window().$setWindowBorder(this.get_screenState());
				}
			}
		},
		get_idleThrottle: function() {
			return this.$idleThrottle;
		},
		set_idleThrottle: function(value) {
			this.$idleThrottle = value;
		},
		get_disableAltEnter: function() {
			return this.$1$DisableAltEnterField;
		},
		set_disableAltEnter: function(value) {
			this.$1$DisableAltEnterField = value;
		},
		get_altEnterExclusiveFullscreen: function() {
			return this.get_altEnterFullscreenMode() !== 0;
		},
		set_altEnterExclusiveFullscreen: function(value) {
			this.set_altEnterFullscreenMode((value ? 1 : 0));
		},
		get_altEnterFullscreenMode: function() {
			return this.$1$AltEnterFullscreenModeField;
		},
		set_altEnterFullscreenMode: function(value) {
			this.$1$AltEnterFullscreenModeField = value;
		},
		get_useAvailableScreenSize: function() {
			return this.$1$UseAvailableScreenSizeField;
		},
		set_useAvailableScreenSize: function(value) {
			this.$1$UseAvailableScreenSizeField = value;
		},
		get_width: function() {
			return this.get_$window().get_$width();
		},
		set_width: function(value) {
			this.get_$window().set_$width(value);
		},
		get_height: function() {
			return this.get_$window().get_$height();
		},
		set_height: function(value) {
			this.get_$window().set_$height(value);
		},
		get_containerWidth: function() {
			return this.get_$window().get_$containerWidth();
		},
		get_containerHeight: function() {
			return this.get_$window().get_$containerHeight();
		},
		get_x: function() {
			return this.get_$window().get_$x();
		},
		set_x: function(value) {
			this.get_$window().set_$x(value);
		},
		get_y: function() {
			return this.get_$window().get_$y();
		},
		set_y: function(value) {
			this.get_$window().set_$y(value);
		},
		get_visible: function() {
			return this.get_$window().get_$visible();
		},
		set_visible: function(value) {
			this.get_$window().set_$visible(value);
		},
		get_vSync: function() {
			return this.get_$window().get_$vSync();
		},
		set_vSync: function(value) {
			this.get_$window().set_$vSync(value);
		},
		get_hasFocus: function() {
			return this.$window.get_$hasFocus();
		},
		get_clientRect: function() {
			return this.get_$window().get_$clientRect();
		},
		get_title: function() {
			return this.get_$window().get_$title();
		},
		set_title: function(value) {
			this.get_$window().set_$title(value);
		},
		get_supportedResolutions: function() {
			return this.get_$window().get_$supportedResolutions();
		},
		get_monitorIndex: function() {
			return this.get_$window().get_$monitorIndex();
		},
		get_mouseScaleX: function() {
			return this.get_$window().get_$mouseScaleX();
		},
		get_mouseScaleY: function() {
			return this.get_$window().get_$mouseScaleY();
		},
		get_vSyncStyle: function() {
			return this.$window.get_$vSyncStyle();
		},
		set_vSyncStyle: function(value) {
			this.$window.set_$vSyncStyle(value);
		},
		get_$window: function() {
			return this.$window;
		}
	}, null, [ss.IDisposable, $Franca_Gui_IGuiContext]);
	$Franca_GameContainer.$ctor1.prototype = $Franca_GameContainer.prototype;
	ss.initClass($Franca_Gamepad, $asm, {
		toString: function() {
			var $t4 = System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.index);
			var $t3 = this.name;
			if (ss.isNullOrUndefined($t3)) {
				var $t2 = this.guid;
				if (ss.isNullOrUndefined($t2)) {
					var $t1 = this.rawID;
					if (ss.isNullOrUndefined($t1)) {
						$t1 = this.vendor + ' Gamepad';
					}
					$t2 = $t1;
				}
				$t3 = $t2;
			}
			return ss.formatString("Gamepad {0} '{1}'", $t4, $t3);
		},
		get_buttons: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, $t1, b;
					var $finally = function() {
						$t1.dispose();
					};
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									$t1 = ss.getEnumerator(this.$buttons.get_values());
									$state = 3;
									continue $sm1;
								}
								case 3: {
									$state = 1;
									if (!$t1.moveNext()) {
										$state = 2;
										continue $sm1;
									}
									b = $t1.current();
									$result = b;
									$state = 3;
									return true;
								}
								case 2: {
									$state = -1;
									$finally.call(this);
									$state = -1;
									break $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, function() {
						try {
							switch ($state) {
								case 1:
								case 2:
								case 3: {
									try {
										break;
									}
									finally {
										$finally.call(this);
									}
								}
							}
						}
						finally {
							$state = -1;
						}
					}, this);
				}).call(this);
			}, this);
		},
		get_axes: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, $t1, kvp;
					var $finally = function() {
						$t1.dispose();
					};
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									$t1 = this.$axes.getEnumerator();
									$state = 3;
									continue $sm1;
								}
								case 3: {
									$state = 1;
									if (!$t1.moveNext()) {
										$state = 2;
										continue $sm1;
									}
									kvp = $t1.current();
									$result = new $Franca_Gamepad$Axis.$ctor1(kvp.key, kvp.value);
									$state = 3;
									return true;
								}
								case 2: {
									$state = -1;
									$finally.call(this);
									$state = -1;
									break $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, function() {
						try {
							switch ($state) {
								case 1:
								case 2:
								case 3: {
									try {
										break;
									}
									finally {
										$finally.call(this);
									}
								}
							}
						}
						finally {
							$state = -1;
						}
					}, this);
				}).call(this);
			}, this);
		},
		get_a: function() {
			return this.$buttons.get_item(0);
		},
		get_b: function() {
			return this.$buttons.get_item(1);
		},
		get_x: function() {
			return this.$buttons.get_item(2);
		},
		get_y: function() {
			return this.$buttons.get_item(3);
		},
		get_l: function() {
			return this.$buttons.get_item(4);
		},
		get_r: function() {
			return this.$buttons.get_item(5);
		},
		get_lTrigger: function() {
			return this.$buttons.get_item(6);
		},
		get_rTrigger: function() {
			return this.$buttons.get_item(7);
		},
		get_select: function() {
			return this.$buttons.get_item(8);
		},
		get_start: function() {
			return this.$buttons.get_item(9);
		},
		get_lStick: function() {
			return this.$buttons.get_item(10);
		},
		get_rStick: function() {
			return this.$buttons.get_item(11);
		},
		get_up: function() {
			return this.$buttons.get_item(12);
		},
		get_down: function() {
			return this.$buttons.get_item(13);
		},
		get_left: function() {
			return this.$buttons.get_item(14);
		},
		get_right: function() {
			return this.$buttons.get_item(15);
		},
		get_home: function() {
			return this.$buttons.get_item(16);
		},
		get_leftX: function() {
			return this.$axes.get_item(0);
		},
		set_leftX: function(value) {
			this.$axes.set_item(0, value);
		},
		get_leftY: function() {
			return this.$axes.get_item(1);
		},
		set_leftY: function(value) {
			this.$axes.set_item(1, value);
		},
		get_rightX: function() {
			return this.$axes.get_item(2);
		},
		set_rightX: function(value) {
			this.$axes.set_item(2, value);
		},
		get_rightY: function() {
			return this.$axes.get_item(3);
		},
		set_rightY: function(value) {
			this.$axes.set_item(3, value);
		},
		get_connected: function() {
			return this.$connected;
		},
		set_connected: function(value) {
			this.$connected = value;
		},
		get_displayMappingWarning: function() {
			return this.$1$DisplayMappingWarningField;
		},
		set_displayMappingWarning: function(value) {
			this.$1$DisplayMappingWarningField = value;
		},
		get_item: function(b) {
			var btn = {};
			if (this.$buttons.tryGetValue(b, btn)) {
				return btn.$;
			}
			var btnName = Enumerable.from(Franca.EnumHelper.getValues($Franca_GamepadButtons).call(null)).where(function(e) {
				return e === b;
			}).select(function(e1) {
				return $Franca_GamepadButtonsExtensions.getName$1($Franca_GamepadButtons).call(null, e1);
			}).firstOrDefault(null, ss.getDefaultValue(String));
			var $t1 = btnName;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = ss.formatString('Button{0}', b);
			}
			btn.$ = new $Franca_GamepadButton(b, $t1);
			this.$buttons.set_item(b, btn.$);
			return btn.$;
		},
		get_item$1: function(a) {
			var v = {};
			if (this.$axes.tryGetValue(a, v)) {
				return v.$;
			}
			this.$axes.set_item(a, 0);
			return 0;
		},
		set_item: function(a, value) {
			this.$axes.set_item(a, value);
		}
	});
	ss.initClass($Franca_Gamepad$Axis, $asm, {
		toString: function() {
			return ss.formatString('{0}:{1}', System.EnumExtensions.getName($Franca_GamepadAxis).call(null, this.type), System.ObjectExtensions.toStringInvariant$1(Number).call(null, this.value));
		},
		getHashCode: function() {
			var h = this.type;
			h = h * 397 ^ this.value;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Gamepad$Axis)) {
				return false;
			}
			return this.type === o.type && this.value === o.value;
		}
	});
	$Franca_Gamepad$Axis.$ctor1.prototype = $Franca_Gamepad$Axis.prototype;
	$Franca_Gamepad$Axis.__class = false;
	ss.initEnum($Franca_GamepadAxis, $asm, { leftX: 0, leftY: 1, rightX: 2, rightY: 3 });
	ss.initInterface($Franca_IBind, $asm, { get_device: null, get_type: null, get_mode: null, get_info: null, process: null });
	ss.initClass($Franca_GamepadBind, $asm, {
		get_type: function() {
			return this.$type;
		},
		get_info: function() {
			return this.$info;
		},
		get_mode: function() {
			return this.$mode;
		},
		get_device: function() {
			return 3;
		},
		process: function(mouse, gameTime, mode, shift, control, alt, compositing) {
			for (var i = 0; i < $Franca_InputHandler.maxGamepads; i++) {
				var gamepad = this.getGamepad(i);
				if (ss.isValue(gamepad)) {
					this.process$1(gamepad, gamepad.get_item(this.button).get_isPressed(), gamepad.get_item(this.button).get_wasPressed(), mouse, gameTime, mode, compositing);
				}
			}
		},
		process$1: function(gamepad, pressed, wasPressed, mouse, gameTime, mode, compositing) {
			if (this.$mode > -1 && mode !== this.$mode || this.playerIndex > -1 && gamepad.index !== this.playerIndex) {
				return;
			}
			var call = false;
			if (this.$type === 1) {
				call = pressed && !wasPressed;
			}
			else if (this.$type === 0) {
				call = !pressed && wasPressed;
			}
			else if (this.$type === 2) {
				call = pressed;
			}
			else if (this.$type === 3) {
				call = !pressed;
			}
			if (call) {
				var evt = new $Franca_InputEvent.$ctor1(gameTime, 3, this.$info, mode, mouse, gamepad, false, false, false);
				evt.gamepadBind = this;
				this.callback(evt);
			}
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_GamepadBind);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).playerIndex === this.playerIndex && ss.unbox(b).button === this.button && ss.unbox(b).$type === this.$type && ss.unbox(b).$info === this.$info && ss.unbox(b).$mode === this.$mode;
		},
		equalsT: function(b) {
			return b.playerIndex === this.playerIndex && b.button === this.button && b.$type === this.$type && b.$info === this.$info && b.$mode === this.$mode;
		},
		getHashCode: function() {
			return ss.getHashCode(this.playerIndex) ^ ss.getHashCode(this.button) ^ ss.getHashCode(this.$type) ^ ss.getHashCode(this.$mode);
		}
	}, null, [$Franca_IBind, ss.IEquatable]);
	$Franca_GamepadBind.$ctor1.prototype = $Franca_GamepadBind.prototype;
	$Franca_GamepadBind.__class = false;
	ss.initClass($Franca_GamepadButton, $asm, {
		toString: function() {
			return this.name;
		},
		setPressThreshold: function(value) {
			this.$pressThreshold = value;
		},
		get_isPressed: function() {
			return this.state >= this.$pressThreshold;
		},
		get_wasPressed: function() {
			return this.lastState >= this.$pressThreshold;
		}
	});
	ss.initEnum($Franca_GamepadButtons, $asm, { A: 0, B: 1, X: 2, Y: 3, L: 4, R: 5, LTrigger: 6, RTrigger: 7, Select: 8, Start: 9, LStick: 10, RStick: 11, Up: 12, Down: 13, Left: 14, Right: 15, Home: 16, BottomFaceButton: 0, RightFaceButton: 1, LeftFaceButton: 2, TopFaceButton: 3, Back: 8, Any: -1 });
	ss.initClass($Franca_GamepadButtonsExtensions, $asm, {});
	ss.initClass($Franca_GamepadTypes, $asm, {});
	ss.initClass($Franca_GameReferenceException, $asm, {}, ss.Exception);
	$Franca_GameReferenceException.$ctor1.prototype = $Franca_GameReferenceException.$ctor2.prototype = $Franca_GameReferenceException.prototype;
	ss.initClass($Franca_GlyphMetrics, $asm, {
		get_bearingX: function() {
			return this.$bearingX;
		},
		get_bearingY: function() {
			return this.$bearingY;
		},
		get_advanceWidth: function() {
			return this.$advanceWidth;
		},
		get_boundingBox: function() {
			return Franca.RectangleF.fromLTRB(this.$xMin, -this.$yMax, this.$xMax, -this.$yMin);
		},
		get_boundingSize: function() {
			return this.get_boundingBox().size;
		},
		get_width: function() {
			return this.$xMax - this.$xMin;
		},
		get_height: function() {
			return this.$yMax - this.$yMin;
		},
		get_rightSideBearing: function() {
			return this.$advanceWidth - this.$bearingX - this.get_width();
		},
		get_xMin: function() {
			return this.$xMin;
		},
		get_xMax: function() {
			return this.$xMax;
		},
		get_yMax: function() {
			return this.$yMax;
		},
		get_yMin: function() {
			return this.$yMin;
		},
		getHashCode: function() {
			var h = this.$bearingX;
			h = h * 397 ^ this.$bearingY;
			h = h * 397 ^ this.$advanceWidth;
			h = h * 397 ^ this.$xMin;
			h = h * 397 ^ this.$yMin;
			h = h * 397 ^ this.$xMax;
			h = h * 397 ^ this.$yMax;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_GlyphMetrics)) {
				return false;
			}
			return this.$bearingX === o.$bearingX && this.$bearingY === o.$bearingY && this.$advanceWidth === o.$advanceWidth && this.$xMin === o.$xMin && this.$yMin === o.$yMin && this.$xMax === o.$xMax && this.$yMax === o.$yMax;
		}
	});
	$Franca_GlyphMetrics.$ctor3.prototype = $Franca_GlyphMetrics.$ctor4.prototype = $Franca_GlyphMetrics.$ctor5.prototype = $Franca_GlyphMetrics.$ctor1.prototype = $Franca_GlyphMetrics.$ctor2.prototype = $Franca_GlyphMetrics.prototype;
	$Franca_GlyphMetrics.__class = false;
	ss.initClass($Franca_GlyphRegion, $asm, {});
	ss.initClass($Franca_GraphicsContextException, $asm, {}, ss.Exception);
	$Franca_GraphicsContextException.$ctor1.prototype = $Franca_GraphicsContextException.prototype;
	ss.initClass($Franca_GraphicsContextMissingException, $asm, {}, $Franca_GraphicsContextException);
	$Franca_GraphicsContextMissingException.$ctor1.prototype = $Franca_GraphicsContextMissingException.prototype;
	ss.initClass($Franca_GraphicsDevice, $asm, {
		$createDevice: function() {
			if (ss.isValue(this.$container)) {
				this.$platformDevice = new $Franca_$JSGraphicsDevice(ss.cast(this.$container.get_$window(), $Franca_$JSWindow).get_$window());
			}
		},
		applyStencilState: function(state) {
			if (state.mode === 0) {
				return;
			}
			if (ss.isValue(this.$lastStencilState) && $Franca_StencilState.op_Equality(ss.unbox(this.$lastStencilState), state)) {
				return;
			}
			if (state.mode === 1) {
				if (!this.$stencilEnabled) {
					$Franca_OpenGL_WebGL_GL.enable($Franca_OpenGL_WebGL_Constants.stenciL_TEST);
					this.$stencilEnabled = true;
				}
				if (this.$stencilMask !== state.mask) {
					$Franca_OpenGL_WebGL_GL.stencilMask(state.mask);
					this.$stencilMask = state.mask;
				}
				if (this.$stencilFunc !== state.func || this.$stencilRef !== state.referenceValue || this.$stencilFuncMask !== state.funcMask) {
					$Franca_OpenGL_WebGL_GL.stencilFunc(state.func, state.referenceValue, state.funcMask);
					this.$stencilFunc = state.func;
					this.$stencilRef = state.referenceValue;
					this.$stencilFuncMask = state.funcMask;
				}
				if (this.$stencilOpFail !== state.stencilFail || this.$stencilOpZFail !== state.depthFail || this.$stencilOpZPass !== state.success) {
					$Franca_OpenGL_WebGL_GL.stencilOp(state.stencilFail, state.depthFail, state.success);
					this.$stencilOpFail = state.stencilFail;
					this.$stencilOpZFail = state.depthFail;
					this.$stencilOpZPass = state.success;
				}
			}
			else if (this.$stencilEnabled) {
				$Franca_OpenGL_WebGL_GL.disable($Franca_OpenGL_WebGL_Constants.stenciL_TEST);
				this.$stencilEnabled = false;
			}
			this.$lastStencilState = state;
		},
		swapBuffers: function() {
			this.$platformDevice.$swapBuffers();
		},
		setResolution: function(width, height) {
			this.$backbufferWidth = width;
			this.$backbufferHeight = height;
		},
		setRenderTarget$1: function(target, restorePrevious) {
			if (!restorePrevious) {
				this.setRenderTarget(target);
				return ss.getDefaultValue($Franca_RenderTargetState);
			}
			else {
				var state = new $Franca_RenderTargetState.$ctor1(this);
				this.setRenderTarget(target);
				return state;
			}
		},
		setRenderTarget: function(target) {
			if (ss.referenceEquals(this.$renderTarget, target)) {
				return;
			}
			this.$renderTarget = target;
			$Franca_OpenGL_WebGL_GL.bindFramebuffer($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, (ss.isValue(target) ? target.get_framebuffer() : null));
			// note 1: we did none of this block before flibit told us to and it always seemed to work
			// okay? just for future reference
			// note 2: things seemed to have broken under webgl due to this code flibit told us to add
			// note 3: what's going on is that because firefox and chrome are not accepting creating
			//   separate depth and stencil attachments we cannot attach depth and stencil separately
			//   here, but it works if we use DEPTH_STENCIL_ATTACHMENT, because of course it does
			//   
			//   for more information see the mountain of comments in Texture.cs lol
			if (ss.isValue(target)) {
				// quoth flibit: https://github.com/FNA-XNA/FNA3D/blob/56969f3401dd1bfb677344aef873815ca9beac36/src/FNA3D_Driver_OpenGL.c#L2675
				// FIXME: Notice that we do separate attach calls for the stencil.
				// We _should_ be able to do a single attach for depthstencil, but
				// some drivers (like Mesa) cannot into GL_DEPTH_STENCIL_ATTACHMENT.
				// Use XNAToGL.DepthStencilAttachment when this isn't a problem.
				// -flibit
				// detach stencil buffer
				$Franca_OpenGL_WebGL_GL.framebufferRenderbuffer($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, $Franca_OpenGL_WebGL_Constants.stenciL_ATTACHMENT, $Franca_OpenGL_WebGL_Constants.RENDERBUFFER, null);
				if (target.get_stencilBuffer()) {
					$Franca_OpenGL_WebGL_GL.framebufferRenderbuffer($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, $Franca_OpenGL_WebGL_Constants.deptH_STENCIL_ATTACHMENT, $Franca_OpenGL_WebGL_Constants.RENDERBUFFER, target.get_renderbuffer());
				}
				else {
					$Franca_OpenGL_WebGL_GL.framebufferRenderbuffer($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, $Franca_OpenGL_WebGL_Constants.deptH_ATTACHMENT, $Franca_OpenGL_WebGL_Constants.RENDERBUFFER, target.get_renderbuffer());
				}
			}
			if (ss.isValue(target)) {
				this.set_viewport(new Franca.Rectangle.$ctor3(0, 0, target.get_width(), target.get_height()));
			}
			else {
				this.set_viewport(new Franca.Rectangle.$ctor3(0, 0, this.$backbufferWidth, this.$backbufferHeight));
			}
		},
		$registerContentManager: function(manager) {
			if (!ss.contains(this.$contentManagers, manager)) {
				this.$contentManagers.push(manager);
			}
		},
		$removeContentManager: function(manager) {
			if (ss.contains(this.$contentManagers, manager)) {
				ss.remove(this.$contentManagers, manager);
			}
		},
		$finalizeContent: function() {
			this.$platformDevice.$finalizeGLCalls();
			for (var $t1 = 0; $t1 < this.$contentManagers.length; $t1++) {
				var manager = this.$contentManagers[$t1];
				manager.finalizeContent();
			}
		},
		finalize: function(buffers) {
			this.$platformDevice.$finalize(buffers);
		},
		finalize$5: function(texture) {
			this.$platformDevice.$finalize$5(texture);
		},
		finalize$1: function(framebuffer) {
			this.$platformDevice.$finalize$1(framebuffer);
		},
		finalize$3: function(renderbuffer) {
			this.$platformDevice.$finalize$3(renderbuffer);
		},
		finalize$4: function(shader) {
			this.$platformDevice.$finalize$4(shader);
		},
		finalize$2: function(program) {
			this.$platformDevice.$finalize$2(program);
		},
		clear: function() {
			this.clear$1(17664);
		},
		clear$2: function(color) {
			this.clear$4(color, 17664);
		},
		clear$3: function(color) {
			this.clear$5(color, 17664);
		},
		clear$1: function(options) {
			$Franca_OpenGL_WebGL_GL.clear(options);
		},
		clear$4: function(color, options) {
			this.set_clearColor(Franca.Color.op_Implicit(color));
			$Franca_OpenGL_WebGL_GL.clear(options);
		},
		clear$5: function(color, options) {
			this.set_clearColor(color);
			$Franca_OpenGL_WebGL_GL.clear(options);
		},
		clear$6: function(color, depth, stencil, options) {
			if (System.EnumExtensions.hasFlag(options, 256)) {
				this.set_clearDepth(depth);
			}
			if (System.EnumExtensions.hasFlag(options, 1024)) {
				this.set_clearStencil(stencil);
			}
			this.set_clearColor(Franca.Color.op_Implicit(color));
			$Franca_OpenGL_WebGL_GL.clear(options);
		},
		clear$7: function(color, depth, stencil, options) {
			if (System.EnumExtensions.hasFlag(options, 256)) {
				this.set_clearDepth(depth);
			}
			if (System.EnumExtensions.hasFlag(options, 1024)) {
				this.set_clearStencil(stencil);
			}
			this.set_clearColor(color);
			$Franca_OpenGL_WebGL_GL.clear(options);
		},
		$loadContent: function() {
			this.$maxTextureSize = $Franca_OpenGL_WebGL_GL.getParameter(3379);
			var builtinShaders = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_BuiltinShader, $Franca_Shader]))();
			var builtinPrograms = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_BuiltinProgram, $Franca_ShaderProgram]))();
			var shader;
			var currentShader = 0;
			try {
				shader = $Franca_Shader.compile$1(null, $Franca_Shader.get_batchVertexSource(), 35633, 'Internal: SpriteBatch vertex', []);
				builtinShaders.set_item(0, shader);
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				currentShader = 1;
				shader = $Franca_Shader.compile$1(null, $Franca_Shader.get_batchFragSource(), 35632, 'Internal: SpriteBatch fragment', []);
				builtinShaders.set_item(1, shader);
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				currentShader = 2;
				shader = $Franca_Shader.compile$1(null, $Franca_Shader.get_batchRectSource(), 35632, 'Internal: SpriteBatch rect fragment', []);
				builtinShaders.set_item(2, shader);
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				currentShader = 3;
				shader = $Franca_Shader.compile$1(null, $Franca_SpriteFontBatch.get_compressedGlyphVertexSource(), 35633, 'Internal: Compressed glyph vertex', []);
				builtinShaders.set_item(3, shader);
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				currentShader = 4;
				shader = $Franca_Shader.compile$1(null, $Franca_SpriteFontBatch.get_compressedGlyphFragSource(), 35632, 'Internal: Compressed glyph fragment', []);
				builtinShaders.set_item(4, shader);
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				currentShader = 5;
				shader = $Franca_Shader.compile$1(null, $Franca_SpriteFontBatch.get_uncompressedGlyphVertexSource(), 35633, 'Internal: Uncompressed glyph vertex', []);
				builtinShaders.set_item(5, shader);
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				currentShader = 6;
				shader = $Franca_Shader.compile$1(null, $Franca_SpriteFontBatch.get_uncompressedGlyphFragSource(), 35632, 'Internal: Uncompressed glyph vertex', []);
				builtinShaders.set_item(6, shader);
				$Franca_OpenGL_WebGL_GL.throwErrors(true);
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				var message = (ss.isInstanceOfType(e, $Franca_OpenGL_WebGL_GLError) ? ss.cast(e, $Franca_OpenGL_WebGL_GLError).getMessage(false) : e.get_message());
				if ($Franca_OpenGL_WebGL_GL.get_debug()) {
					throw new $Franca_OpenGLException.$ctor1(ss.formatString('An OpenGL error occurred while loading built-in shader {0}: {1}', System.EnumExtensions.getName($Franca_BuiltinShader).call(null, currentShader), message));
				}
				else {
					throw new $Franca_OpenGLException.$ctor1(ss.formatString('An OpenGL error occurred while loading built-in shaders: {0}', message));
				}
			}
			var effect;
			var currentProgram = 0;
			try {
				effect = new $Franca_ShaderProgram.$ctor1(this, builtinShaders.get_item(0), builtinShaders.get_item(1));
				builtinPrograms.set_item(0, effect);
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				currentProgram = 1;
				effect = new $Franca_ShaderProgram.$ctor1(this, builtinShaders.get_item(0), builtinShaders.get_item(2));
				builtinPrograms.set_item(1, effect);
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				currentProgram = 2;
				effect = new $Franca_ShaderProgram.$ctor1(this, builtinShaders.get_item(3), builtinShaders.get_item(4));
				builtinPrograms.set_item(2, effect);
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				currentProgram = 3;
				effect = new $Franca_ShaderProgram.$ctor1(this, builtinShaders.get_item(5), builtinShaders.get_item(6));
				builtinPrograms.set_item(3, effect);
				$Franca_OpenGL_WebGL_GL.throwErrors(true);
			}
			catch ($t2) {
				var e1 = ss.Exception.wrap($t2);
				var message1 = (ss.isInstanceOfType(e1, $Franca_OpenGL_WebGL_GLError) ? ss.cast(e1, $Franca_OpenGL_WebGL_GLError).getMessage(false) : e1.get_message());
				if ($Franca_OpenGL_WebGL_GL.get_debug()) {
					throw new $Franca_OpenGLException.$ctor1(ss.formatString('An OpenGL error occurred while loading built-in shader program {0}: {1}', System.EnumExtensions.getName($Franca_BuiltinProgram).call(null, currentProgram), message1));
				}
				else {
					throw new $Franca_OpenGLException.$ctor1(ss.formatString('An OpenGL error occurred while loading built-in shader programs: {0}', message1));
				}
			}
			var basicEffect, fontEffect;
			var currentEffect = 'basicEffect';
			try {
				basicEffect = new $Franca_Effect();
				basicEffect.addProgram('default', builtinPrograms.get_item(0));
				basicEffect.addProgram('rectangle', builtinPrograms.get_item(1));
				currentEffect = 'fontEffect';
				fontEffect = new $Franca_Effect();
				fontEffect.addProgram('compressed', builtinPrograms.get_item(2));
				fontEffect.addProgram('uncompressed', builtinPrograms.get_item(3));
				$Franca_OpenGL_WebGL_GL.throwErrors(true);
			}
			catch ($t3) {
				var e2 = ss.Exception.wrap($t3);
				var message2 = (ss.isInstanceOfType(e2, $Franca_OpenGL_WebGL_GLError) ? ss.cast(e2, $Franca_OpenGL_WebGL_GLError).getMessage(false) : e2.get_message());
				if ($Franca_OpenGL_WebGL_GL.get_debug()) {
					throw new $Franca_OpenGLException.$ctor1(ss.formatString('An OpenGL error occurred while loading built-in effect {0}: {1}', currentEffect, message2));
				}
				else {
					throw new $Franca_OpenGLException.$ctor1(ss.formatString('An OpenGL error occurred while loading built-in effects: {0}', message2));
				}
			}
			var noneTexture;
			try {
				noneTexture = new $Franca_Texture.$ctor4(1, 1, new Franca.Collections.ByteArray.$ctor2(4), $Franca_OpenGL_WebGL_Constants.RGBA, false);
			}
			catch ($t4) {
				var e3 = ss.Exception.wrap($t4);
				var message3 = (ss.isInstanceOfType(e3, $Franca_OpenGL_WebGL_GLError) ? ss.cast(e3, $Franca_OpenGL_WebGL_GLError).getMessage(false) : e3.get_message());
				throw new $Franca_OpenGLException.$ctor1('An OpenGL error occurred while loading built-in null texture: ' + message3);
			}
			var whiteTexture;
			try {
				var arr = new Franca.Collections.ByteArray.$ctor2(4);
				arr.set_item(3, 255);
				arr.set_item(2, 255);
				arr.set_item(1, 255);
				arr.set_item(0, 255);
				whiteTexture = new $Franca_Texture.$ctor4(1, 1, arr, $Franca_OpenGL_WebGL_Constants.RGBA, false);
			}
			catch ($t5) {
				var e4 = ss.Exception.wrap($t5);
				var message4 = (ss.isInstanceOfType(e4, $Franca_OpenGL_WebGL_GLError) ? ss.cast(e4, $Franca_OpenGL_WebGL_GLError).getMessage(false) : e4.get_message());
				throw new $Franca_OpenGLException.$ctor1('An OpenGL error occurred while loading built-in white texture: ' + message4);
			}
			this.$builtinAssets = new $Franca_BuiltinAssets(builtinShaders, builtinPrograms, basicEffect, fontEffect, noneTexture, whiteTexture);
			try {
				$Franca_SpriteBatch.$initializeIndexBuffer();
			}
			catch ($t6) {
				var e5 = ss.Exception.wrap($t6);
				var message5 = (ss.isInstanceOfType(e5, $Franca_OpenGL_WebGL_GLError) ? ss.cast(e5, $Franca_OpenGL_WebGL_GLError).getMessage(false) : e5.get_message());
				throw new $Franca_OpenGLException.$ctor1('An OpenGL error occurred while initializing SpriteBatch index buffer: ' + message5);
			}
		},
		setDefaultState: function(premultipliedAlpha) {
			try {
				$Franca_OpenGL_WebGL_GL.depthMask(true);
				this.$depthWrite = true;
				$Franca_OpenGL_WebGL_GL.enable($Franca_OpenGL_WebGL_Constants.deptH_TEST);
				$Franca_OpenGL_WebGL_GL.disable($Franca_OpenGL_WebGL_Constants.stenciL_TEST);
				this.$stencilEnabled = false;
				$Franca_OpenGL_WebGL_GL.blendEquation($Franca_OpenGL_WebGL_Constants.funC_ADD);
				$Franca_OpenGL_WebGL_GL.depthFunc($Franca_OpenGL_WebGL_Constants.LEQUAL);
				if (premultipliedAlpha) {
					$Franca_OpenGL_WebGL_GL.blendFunc($Franca_OpenGL_WebGL_Constants.ONE, $Franca_OpenGL_WebGL_Constants.onE_MINUS_SRC_ALPHA);
				}
				else {
					$Franca_OpenGL_WebGL_GL.blendFunc($Franca_OpenGL_WebGL_Constants.srC_ALPHA, $Franca_OpenGL_WebGL_Constants.onE_MINUS_SRC_ALPHA);
				}
				$Franca_OpenGL_WebGL_GL.enable($Franca_OpenGL_WebGL_Constants.BLEND);
				$Franca_OpenGL_WebGL_GL.disable($Franca_OpenGL_WebGL_Constants.culL_FACE);
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				throw new $Franca_OpenGLException.$ctor1("An OpenGL error occurred while setting the GraphicsDevice's default state: " + e.get_message());
			}
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				for (var i = this.$contentManagers.length - 1; i >= 0; i--) {
					this.$contentManagers[i].dispose();
				}
				var $t1 = ss.getEnumerator(this.get_builtinAssets().get_shaders().get_values());
				try {
					while ($t1.moveNext()) {
						var shader = $t1.current();
						shader.dispose();
					}
				}
				finally {
					$t1.dispose();
				}
				var $t2 = ss.getEnumerator(this.get_builtinAssets().get_shaderPrograms().get_values());
				try {
					while ($t2.moveNext()) {
						var program = $t2.current();
						program.dispose();
					}
				}
				finally {
					$t2.dispose();
				}
				this.$builtinAssets.get_basicEffect().dispose();
				if (ss.isValue(this.$defaultFontManager)) {
					this.$defaultFontManager.dispose();
				}
				this.$builtinAssets.get_noneTexture().dispose();
				if (ss.isValue(this.$builtinAssets.get_videoEffect())) {
					this.$builtinAssets.get_videoEffect().dispose();
				}
				$Franca_SpriteBatch.$destroyIndexBuffer();
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_container: function() {
			return this.$container;
		},
		get_depthWrite: function() {
			return this.$depthWrite;
			// cached value
		},
		set_depthWrite: function(value) {
			if (this.$depthWrite !== value) {
				this.$depthWrite = value;
				$Franca_OpenGL_WebGL_GL.depthMask(this.$depthWrite);
			}
		},
		get_viewport: function() {
			return this.$viewport;
		},
		set_viewport: function(value) {
			this.$viewport = value;
			var height = (ss.isValue(this.$renderTarget) ? this.$renderTarget.get_height() : this.$backbufferHeight);
			var oglvp = new Franca.Rectangle.$ctor3(this.$viewport.location.x, height - this.$viewport.location.y - this.$viewport.size.height, this.$viewport.size.width, this.$viewport.size.height);
			$Franca_OpenGL_WebGL_GL.viewport(oglvp);
		},
		get_clearColor: function() {
			return this.$lastClearColor;
		},
		set_clearColor: function(value) {
			if (Franca.HdrColor.op_Inequality(this.$lastClearColor, value)) {
				this.$lastClearColor = value;
				$Franca_OpenGL_WebGL_GL.clearColor$1(this.$lastClearColor);
			}
		},
		get_clearDepth: function() {
			return this.$lastClearDepth;
		},
		set_clearDepth: function(value) {
			if (this.$lastClearDepth !== value) {
				this.$lastClearDepth = value;
				$Franca_OpenGL_WebGL_GL.clearDepth(this.$lastClearDepth);
			}
		},
		get_clearStencil: function() {
			return this.$lastClearStencil;
		},
		set_clearStencil: function(value) {
			if (this.$lastClearStencil !== value) {
				this.$lastClearStencil = value;
				$Franca_OpenGL_WebGL_GL.clearStencil(this.$lastClearStencil);
			}
		},
		get_builtinAssets: function() {
			return this.$builtinAssets;
		},
		get_defaultFontManager: function() {
			if (ss.isValue(this.$defaultFontManager)) {
				return this.$defaultFontManager;
			}
			this.$defaultFontManager = new $Franca_SpriteFontManager(this, 2048, 2048, false, 0);
			return this.$defaultFontManager;
		},
		set_defaultFontManager: function(value) {
			this.$defaultFontManager = value;
		},
		get_adaptiveVsyncSupported: function() {
			return this.get_$graphicsDeviceProvider().get_$adaptiveVsyncSupported();
		},
		get_currentWidth: function() {
			return (ss.isNullOrUndefined(this.$renderTarget) ? this.$backbufferWidth : this.$renderTarget.get_width());
		},
		get_currentHeight: function() {
			return (ss.isNullOrUndefined(this.$renderTarget) ? this.$backbufferHeight : this.$renderTarget.get_height());
		},
		get_backbufferWidth: function() {
			return this.$backbufferWidth;
		},
		get_backbufferHeight: function() {
			return this.$backbufferHeight;
		},
		get_renderTarget: function() {
			return this.$renderTarget;
		},
		get_maxTextureSize: function() {
			return this.$maxTextureSize;
		},
		get_debugShaderSource: function() {
			return this.$1$DebugShaderSourceField;
		},
		set_debugShaderSource: function(value) {
			this.$1$DebugShaderSourceField = value;
		},
		get_$graphicsDeviceProvider: function() {
			return this.$platformDevice;
		}
	}, null, [ss.IDisposable]);
	ss.initClass($Franca_GraphicsDeviceException, $asm, {}, ss.Exception);
	$Franca_GraphicsDeviceException.$ctor1.prototype = $Franca_GraphicsDeviceException.$ctor2.prototype = $Franca_GraphicsDeviceException.prototype;
	ss.initClass($Franca_HdrColors, $asm, {
		fromJson: function(json) {
			return new $Franca_HdrColors.$ctor5(Franca.JsonValue.create(Franca.HdrColor).call(null, json.get_item('color0')), Franca.JsonValue.create(Franca.HdrColor).call(null, json.get_item('color1')), Franca.JsonValue.create(Franca.HdrColor).call(null, json.get_item('color2')), Franca.JsonValue.create(Franca.HdrColor).call(null, json.get_item('color3')));
		},
		toJson: function() {
			var json = new Franca.JObject();
			json.set_item('color0', this.topLeft.toJson());
			json.set_item('color1', this.topRight.toJson());
			json.set_item('color2', this.bottomLeft.toJson());
			json.set_item('color3', this.bottomRight.toJson());
			return json;
		},
		premultiply: function() {
			return new $Franca_HdrColors.$ctor5(this.topLeft.premultiply(), this.topRight.premultiply(), this.bottomLeft.premultiply(), this.bottomRight.premultiply());
		},
		getEnumerator: function() {
			var $result, $state = 0;
			return new ss.IteratorBlockEnumerator(function() {
				$sm1:
				for (;;) {
					switch ($state) {
						case 0: {
							$state = -1;
							$result = this.topLeft;
							$state = 1;
							return true;
						}
						case 1: {
							$state = -1;
							$result = this.topRight;
							$state = 2;
							return true;
						}
						case 2: {
							$state = -1;
							$result = this.bottomLeft;
							$state = 3;
							return true;
						}
						case 3: {
							$state = -1;
							$result = this.bottomRight;
							$state = -1;
							return true;
						}
						default: {
							break $sm1;
						}
					}
				}
				return false;
			}, function() {
				return $result;
			}, null, this);
		},
		$getColorByIndex: function(index) {
			switch (index) {
				case 0: {
					return this.topLeft;
				}
				case 1: {
					return this.topRight;
				}
				case 2: {
					return this.bottomLeft;
				}
				case 3: {
					return this.bottomRight;
				}
			}
			return ss.getDefaultValue(Franca.HdrColor);
		},
		toString: function() {
			return ss.formatString('[HdrColors: {0}, {1}, {2}, {3}]', this.topLeft, this.topRight, this.bottomLeft, this.bottomRight);
		},
		get_item: function(index) {
			if (index < 0 || index > 3) {
				throw new System.IndexOutOfRangeException();
			}
			return this.$getColorByIndex(index);
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.writeStreamer(Franca.HdrColor).call(writer, this.topLeft, 'color0', false);
				writer.writeStreamer(Franca.HdrColor).call(writer, this.topRight, 'color1', false);
				writer.writeStreamer(Franca.HdrColor).call(writer, this.bottomLeft, 'color2', false);
				writer.writeStreamer(Franca.HdrColor).call(writer, this.bottomRight, 'color3', false);
			}
			finally {
				$t1.dispose();
			}
		},
		getHashCode: function() {
			var h = ss.getHashCode(this.topLeft);
			h = h * 397 ^ ss.getHashCode(this.topRight);
			h = h * 397 ^ ss.getHashCode(this.bottomLeft);
			h = h * 397 ^ ss.getHashCode(this.bottomRight);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_HdrColors)) {
				return false;
			}
			return ss.equals(this.topLeft, o.topLeft) && ss.equals(this.topRight, o.topRight) && ss.equals(this.bottomLeft, o.bottomLeft) && ss.equals(this.bottomRight, o.bottomRight);
		}
	}, null, [ss.IEnumerable, ss.IEnumerable, Franca.IMappable, ss.makeGenericType(Franca.IMappable$1, [$Franca_HdrColors]), Franca.Serialization.Streaming.IJsonStreamWriter]);
	$Franca_HdrColors.$ctor1.prototype = $Franca_HdrColors.$ctor5.prototype = $Franca_HdrColors.$ctor4.prototype = $Franca_HdrColors.$ctor7.prototype = $Franca_HdrColors.$ctor3.prototype = $Franca_HdrColors.$ctor6.prototype = $Franca_HdrColors.$ctor2.prototype = $Franca_HdrColors.prototype;
	$Franca_HdrColors.__class = false;
	ss.initClass($Franca_HttpRequest, $asm, {
		add_onProgress: function(value) {
			this.$1$OnProgressField = ss.delegateCombine(this.$1$OnProgressField, value);
		},
		remove_onProgress: function(value) {
			this.$1$OnProgressField = ss.delegateRemove(this.$1$OnProgressField, value);
		},
		add_onUploadProgress: function(value) {
			this.$1$OnUploadProgressField = ss.delegateCombine(this.$1$OnUploadProgressField, value);
		},
		remove_onUploadProgress: function(value) {
			this.$1$OnUploadProgressField = ss.delegateRemove(this.$1$OnUploadProgressField, value);
		},
		add_onFinish: function(value) {
			this.$1$OnFinishField = ss.delegateCombine(this.$1$OnFinishField, value);
		},
		remove_onFinish: function(value) {
			this.$1$OnFinishField = ss.delegateRemove(this.$1$OnFinishField, value);
		},
		add_onUploadComplete: function(value) {
			this.$1$OnUploadCompleteField = ss.delegateCombine(this.$1$OnUploadCompleteField, value);
		},
		remove_onUploadComplete: function(value) {
			this.$1$OnUploadCompleteField = ss.delegateRemove(this.$1$OnUploadCompleteField, value);
		},
		add_onAbort: function(value) {
			this.$1$OnAbortField = ss.delegateCombine(this.$1$OnAbortField, value);
		},
		remove_onAbort: function(value) {
			this.$1$OnAbortField = ss.delegateRemove(this.$1$OnAbortField, value);
		},
		add_onError: function(value) {
			this.$1$OnErrorField = ss.delegateCombine(this.$1$OnErrorField, value);
		},
		remove_onError: function(value) {
			this.$1$OnErrorField = ss.delegateRemove(this.$1$OnErrorField, value);
		},
		$open: function() {
			this.$_Open();
		},
		abort: function() {
			this.$_Abort();
		},
		send: function() {
			this.$_Send();
		},
		send$1: function(data, contentType) {
			this.setHeader$1('Content-Length', data.get_length());
			this.setHeader$2('Content-Type', contentType);
			this.$_Send$1(data);
		},
		setHeader$1: function(name, value) {
			this.setHeader$2(name, System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, value));
		},
		setHeader: function(name, value) {
			this.setHeader$2(name, System.ObjectExtensions.toStringInvariant$1(Franca.UtcDate).call(null, value));
		},
		addRange: function(from, to) {
			this.addRange$1('bytes', from, to);
		},
		addRange$1: function(type, from, to) {
			if (ss.isValue(to) && ss.unbox(to) < 0) {
				throw new ss.ArgumentException('Value must be positive or null', 'to');
			}
			this._AddRange(type, from, to);
		},
		setHeader$2: function(name, value) {
			this.$_SetHeader(name, value);
		},
		get_response: function() {
			return this.$response;
		},
		$_Open: function() {
			this.$request = new XMLHttpRequest();
			this.$request.open(System.EnumExtensions.getName($Franca_HttpRequest$RequestType).call(null, this.$requestType), this.$url, true);
			this.$request.timeout = 100000;
			// same as C# default
			this.$request.responseType = ((this.$responseType === 0) ? 'arraybuffer' : 'text');
			this.$request.onabort = ss.delegateCombine(this.$request.onabort, ss.mkdel(this, this.$onAbort));
			this.$request.onerror = ss.delegateCombine(this.$request.onerror, ss.mkdel(this, this.$onError));
			this.$request.onload = ss.delegateCombine(this.$request.onload, ss.mkdel(this, function(e) {
				this.$onLoad(false, e);
			}));
			this.$request.onprogress = ss.delegateCombine(this.$request.onprogress, ss.mkdel(this, function(e1) {
				this.$onProgress(false, e1);
			}));
			this.$request.ontimeout = ss.delegateCombine(this.$request.ontimeout, ss.mkdel(this, function(e2) {
				this.$onTimeout(false, e2);
			}));
			this.$request.upload.onabort = ss.delegateCombine(this.$request.upload.onabort, ss.mkdel(this, this.$onAbort));
			this.$request.upload.onerror = ss.delegateCombine(this.$request.upload.onerror, ss.mkdel(this, this.$onError));
			this.$request.upload.onload = ss.delegateCombine(this.$request.upload.onload, ss.mkdel(this, function(e3) {
				this.$onLoad(true, e3);
			}));
			this.$request.upload.onprogress = ss.delegateCombine(this.$request.upload.onprogress, ss.mkdel(this, function(e4) {
				this.$onProgress(true, e4);
			}));
			this.$request.upload.ontimeout = ss.delegateCombine(this.$request.upload.ontimeout, ss.mkdel(this, function(e5) {
				this.$onTimeout(true, e5);
			}));
			this.$request.onreadystatechange = ss.delegateCombine(this.$request.onreadystatechange, ss.mkdel(this, this.$onStateChange));
		},
		$onStateChange: function(e) {
			if (this.$request.readyState === 4 && this.$request.status !== 200) {
				this.$onError(e);
			}
		},
		$onAbort: function(e) {
			this.$errorMessage = 'Request aborted';
		},
		$onError: function(e) {
			if (this.$request.status > 0) {
				this.$statusCode = this.$request.status;
				this.$statusDesc = this.$request.statusText;
				this.$errorMessage = this.$request.status + ' ' + this.$request.statusText;
			}
			else if (System.StringExtensions.isNullOrEmpty(this.$errorMessage, false)) {
				this.$errorMessage = 'Unknown';
			}
		},
		$onLoad: function(isUpload, e) {
			if (this.$request.readyState === 4 && this.$request.status !== 200) {
				this.$onError(e);
			}
			else if (isUpload) {
				this.$uploadDone = true;
				this.$uploadProgress = this.$uploadLength;
			}
			else {
				this.$done = true;
				this.$response = new $Franca_HttpRequest$ResponseData();
				if (this.$request.responseType === 'text') {
					this.$response.text = ss.cast(this.$request.response, String);
				}
				else {
					this.$response.binary = new Franca.BinaryData.$ctor_fromArrayBuffer(ss.cast(this.$request.response, ArrayBuffer));
				}
				if (this.$contentLength > -1) {
					this.$progress = this.$contentLength;
				}
				else if (ss.isValue(this.$response.text)) {
					this.$contentLength = this.$response.text.length;
					this.$progress = this.$contentLength;
				}
				else {
					this.$contentLength = this.$response.binary.get_length();
					this.$progress = this.$contentLength;
				}
			}
		},
		$onProgress: function(isUpload, e) {
			var evt = e;
			if (isUpload) {
				this.$uploadLength = ss.unbox(ss.cast(evt.total, ss.Int32));
			}
			else if (!!evt.LengthComputable) {
				this.$contentLength = ss.unbox(ss.cast(evt.total, ss.Int32));
			}
			if (isUpload) {
				this.$uploadProgress = ss.unbox(ss.cast(evt.loaded, ss.Int32));
			}
			else {
				this.$progress = ss.unbox(ss.cast(evt.loaded, ss.Int32));
			}
		},
		$onTimeout: function(isUpload, e) {
			this.$errorMessage = 'Request timed out';
		},
		$_Abort: function() {
			this.$aborted = true;
			this.$request.abort();
		},
		$_SetHeader: function(name, value) {
			if (name !== 'Content-Length') {
				this.$request.setRequestHeader(name, value);
			}
		},
		$_Send: function() {
			try {
				this.$request.send();
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				this.$errorMessage = e.toString();
			}
			$Franca_HttpRequest.$activeRequests.push(this);
		},
		$_Send$1: function(data) {
			try {
				this.$request.send(data.get_uint8Array());
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				this.$errorMessage = e.toString();
			}
			$Franca_HttpRequest.$activeRequests.push(this);
		},
		_AddRange: function(type, from, to) {
			// bytes=<from>-<to>,<from>-<to>,<from>
			if (ss.isValue(this.$rangeType) && !ss.referenceEquals(type, this.$rangeType)) {
				throw new ss.ArgumentException("HttpRequest.AddRange type '" + type + "' did not match previous type '" + this.$rangeType + "'.");
			}
			this.$rangeType = type;
			var firstRange;
			if (ss.isNullOrUndefined(this.$ranges)) {
				firstRange = true;
				this.$ranges = '';
			}
			else {
				firstRange = false;
			}
			if (from < 0) {
				this.$ranges += (firstRange ? '' : ',') + System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, from);
			}
			else {
				this.$ranges += (firstRange ? '' : ',') + System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, from) + '-';
				if (ss.isValue(to)) {
					this.$ranges += System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, ss.unbox(to));
				}
			}
			this.$request.setRequestHeader('Range', this.$rangeType + '-' + this.$ranges);
		}
	});
	ss.initClass($Franca_HttpRequest$AbortEventInfo, $asm, {});
	ss.initClass($Franca_HttpRequest$ErrorEventInfo, $asm, {});
	ss.initClass($Franca_HttpRequest$FinishedEventInfo, $asm, {});
	ss.initClass($Franca_HttpRequest$ProgressEventInfo, $asm, {});
	ss.initEnum($Franca_HttpRequest$RequestType, $asm, { GET: 0, POST: 1, PUT: 2, DELETE: 3 });
	ss.initClass($Franca_HttpRequest$ResponseData, $asm, {
		toString: function() {
			if (ss.isValue(this.text)) {
				return this.text;
			}
			else if (ss.isValue(this.binary)) {
				return this.binary.toString();
			}
			else {
				return Object.prototype.toString.call(this);
			}
		}
	});
	ss.initEnum($Franca_HttpRequest$ResponseType, $asm, { binary: 0, text: 1 });
	ss.initInterface($Franca_IBitmapProvider, $asm, { createContext: null, fromBinary: null, fromBase64: null, get_width: null, get_height: null, get_underlyingObject: null }, [ss.IDisposable]);
	ss.initInterface($Franca_ICanvasContext, $asm, { clear: null, clear$1: null, draw: null, draw$1: null, draw$3: null, draw$2: null, draw$4: null, drawText: null, strokeText: null }, [ss.IDisposable]);
	ss.initInterface($Franca_IGameComponent, $asm, { update: null, render: null });
	ss.initInterface($Franca_IGameObserver, $asm, {}, [ss.IDisposable]);
	ss.initEnum($Franca_InputCategory, $asm, { xboxOne: 0, switch$1: 1, pS4: 2, psVita: 3, kbMouse: 4, misc: 5 });
	ss.initEnum($Franca_InputDevice, $asm, { Keyboard: 0, Mouse: 1, Touch: 2, Gamepad: 3 });
	ss.initClass($Franca_InputEvent, $asm, {});
	$Franca_InputEvent.$ctor1.prototype = $Franca_InputEvent.prototype;
	ss.initClass($Franca_InputHandler, $asm, {
		add_onKeyDown: function(value) {
			this.$1$OnKeyDownField = ss.delegateCombine(this.$1$OnKeyDownField, value);
		},
		remove_onKeyDown: function(value) {
			this.$1$OnKeyDownField = ss.delegateRemove(this.$1$OnKeyDownField, value);
		},
		add_onKeyUp: function(value) {
			this.$1$OnKeyUpField = ss.delegateCombine(this.$1$OnKeyUpField, value);
		},
		remove_onKeyUp: function(value) {
			this.$1$OnKeyUpField = ss.delegateRemove(this.$1$OnKeyUpField, value);
		},
		add_onCopy: function(value) {
			this.$1$OnCopyField = ss.delegateCombine(this.$1$OnCopyField, value);
		},
		remove_onCopy: function(value) {
			this.$1$OnCopyField = ss.delegateRemove(this.$1$OnCopyField, value);
		},
		add_onNativeClick: function(value) {
			this.$1$OnNativeClickField = ss.delegateCombine(this.$1$OnNativeClickField, value);
		},
		remove_onNativeClick: function(value) {
			this.$1$OnNativeClickField = ss.delegateRemove(this.$1$OnNativeClickField, value);
		},
		add_onGamepadChanged: function(value) {
			this.$1$OnGamepadChangedField = ss.delegateCombine(this.$1$OnGamepadChangedField, value);
		},
		remove_onGamepadChanged: function(value) {
			this.$1$OnGamepadChangedField = ss.delegateRemove(this.$1$OnGamepadChangedField, value);
		},
		$createProvider: function() {
			this.$platformInput = new $Franca_JSInput(this, this.$container);
			$Franca_KeyExtensions.$platformInputProvider = this.$platformInput;
		},
		addGamepadMappingsFromFile: function(file) {
			return this.$platformInput.$addGamepadMappingsFromFile(file);
		},
		$copy: function(isCut) {
			var onCopy = this.$1$OnCopyField;
			if (!ss.staticEquals(onCopy, null)) {
				var text = onCopy(isCut);
				if (ss.isValue(text)) {
					$Franca_Clipboard.setText(text, true);
				}
			}
		},
		triggerKeyUp: function(e) {
			var keyUp = this.$1$OnKeyUpField;
			if (!ss.staticEquals(keyUp, null)) {
				keyUp(e);
			}
		},
		triggerKeyDown: function(e) {
			var keyDown = this.$1$OnKeyDownField;
			if (!ss.staticEquals(keyDown, null)) {
				keyDown(e);
			}
		},
		triggerNativeClick: function(e) {
			if (!ss.staticEquals(this.$1$OnNativeClickField, null)) {
				this.$1$OnNativeClickField(e);
			}
		},
		registerEvents: function() {
			this.$platformInput.$registerEvents();
		},
		removeEvents: function() {
			this.$platformInput.$removeEvents();
		},
		keyPress: function(chr) {
			this.$textBuffer.push(chr);
		},
		processInput: function(gameTime, mode) {
			var shift = {}, control = {}, alt = {};
			//UpdateState(gameTime, mode, out shift, out control, out alt);
			this.updateState(mode, shift, control, alt);
			this.processBinds(gameTime, mode, shift.$, control.$, alt.$);
			this.setImeState();
		},
		updateState$1: function(gameTime, mode, shift, control, alt) {
			this.updateState(mode, shift, control, alt);
		},
		updateState: function(mode, shift, control, alt) {
			this.$platformInput.$updateState();
			this.$mouse.lastX = this.$mouse.x;
			this.$mouse.lastY = this.$mouse.y;
			var clientRect = this.$container.get_clientRect();
			this.$mouse.x = Math.floor((this.$mouse.realTimeX - clientRect.location.x) * this.$container.get_mouseScaleX());
			this.$mouse.y = Math.floor((this.$mouse.realTimeY - clientRect.location.y) * this.$container.get_mouseScaleY());
			this.$mouse.inFrame = $Franca_Mouse.isInFrame(this.$mouse.x, this.$mouse.y, this.$container);
			var $t1 = ss.getEnumerator(this.$keyStates.get_values());
			try {
				while ($t1.moveNext()) {
					var key = $t1.current();
					key.lastState = key.state;
					key.state = key.realTimeState;
				}
			}
			finally {
				$t1.dispose();
			}
			this.$mouse.get_leftButton().lastState = this.$mouse.get_leftButton().state;
			this.$mouse.get_leftButton().state = this.$mouse.get_leftButton().realTimeState;
			this.$mouse.get_middleButton().lastState = this.$mouse.get_middleButton().state;
			this.$mouse.get_middleButton().state = this.$mouse.get_middleButton().realTimeState;
			this.$mouse.get_rightButton().lastState = this.$mouse.get_rightButton().state;
			this.$mouse.get_rightButton().state = this.$mouse.get_rightButton().realTimeState;
			this.$mouse.get_button4().lastState = this.$mouse.get_button4().state;
			this.$mouse.get_button4().state = this.$mouse.get_button4().realTimeState;
			this.$mouse.get_button5().lastState = this.$mouse.get_button5().state;
			this.$mouse.get_button5().state = this.$mouse.get_button5().realTimeState;
			shift.$ = this.getKey(16).state === 1;
			control.$ = this.getKey(17).state === 1;
			alt.$ = this.getKey(18).state === 1;
			for (var i = 0; i < $Franca_InputHandler.maxGamepads; i++) {
				var gamepad = this.$gamepads[i];
				gamepad.get_item(-1).realTimeState = 0;
				var $t2 = ss.getEnumerator(gamepad.get_buttons());
				try {
					while ($t2.moveNext()) {
						var btn = $t2.current();
						if (btn.type === -1) {
							continue;
						}
						btn.lastState = btn.state;
						btn.state = btn.realTimeState;
						if (btn.get_isPressed()) {
							gamepad.get_item(-1).realTimeState = 1;
						}
					}
				}
				finally {
					$t2.dispose();
				}
				gamepad.get_item(-1).lastState = gamepad.get_item(-1).state;
				gamepad.get_item(-1).state = gamepad.get_item(-1).realTimeState;
				var lx = { $: gamepad.get_leftX() }, ly = { $: gamepad.get_leftY() }, rx = { $: gamepad.get_rightX() }, ry = { $: gamepad.get_rightY() }, lt = { $: gamepad.get_lTrigger().state }, rt = { $: gamepad.get_rTrigger().state };
				this.$deadzoneProcessor(gamepad, lx, ly, rx, ry, lt, rt);
				gamepad.set_leftX(lx.$);
				gamepad.set_leftY(ly.$);
				gamepad.set_rightX(rx.$);
				gamepad.set_rightY(ry.$);
				gamepad.get_lTrigger().state = lt.$;
				gamepad.get_rTrigger().state = rt.$;
			}
		},
		processBinds: function(gameTime, mode, shift, control, alt) {
			var isShiftBound = false;
			var isAltBound = false;
			var isControlBound = false;
			for (var $t1 = 0; $t1 < this.$binds.length; $t1++) {
				var bind = this.$binds[$t1];
				var kb = ss.safeCast(bind, $Franca_KeyBind);
				if (ss.isValue(kb)) {
					if (ss.unbox(kb).physicalKey === 16) {
						isShiftBound = true;
					}
					else if (ss.unbox(kb).physicalKey === 17) {
						isControlBound = true;
					}
					else if (ss.unbox(kb).physicalKey === 18) {
						isAltBound = true;
					}
				}
			}
			for (var $t2 = 0; $t2 < this.$binds.length; $t2++) {
				var bind1 = this.$binds[$t2];
				bind1.process(this.$mouse, gameTime, mode, shift && !isShiftBound, control && !isControlBound, alt && !isAltBound, this.$wasCompositing);
			}
		},
		setImeState: function() {
			this.$wasCompositing = this.$ime.get_compositing() && this.$ime.get_enabled();
		},
		bind$3: function(button, type, callback, info, playerIndex, mode) {
			var i = -1;
			if (ss.isValue(info)) {
				i = System.EnumExtensions.toInt32(info);
			}
			this.bind$4(button, type, callback, playerIndex, i, mode);
		},
		bind$4: function(button, type, callback, playerIndex, info, mode) {
			this.bind(new $Franca_GamepadBind.$ctor1(ss.mkdel(this, this.gamepad), button, type, callback, playerIndex, info, mode));
		},
		bind: function(bind) {
			if (ss.contains(this.$binds, bind)) {
				this.unbind(this.$binds[ss.indexOf(this.$binds, bind)]);
			}
			this.$binds.push(bind);
		},
		unbind$1: function(button, type, callback, info, playerIndex, mode) {
			var i = -1;
			if (ss.isValue(info)) {
				i = System.EnumExtensions.toInt32(info);
			}
			this.unbind$2(button, type, callback, playerIndex, i, mode);
		},
		unbind$2: function(button, type, callback, playerIndex, info, mode) {
			this.unbind(new $Franca_GamepadBind.$ctor1(ss.mkdel(this, this.gamepad), button, type, callback, playerIndex, info, mode));
		},
		bind$7: function(button, type, callback, info, mode, shift, control, alt) {
			var i = -1;
			if (ss.isValue(info)) {
				i = System.EnumExtensions.toInt32(info);
			}
			this.bind$8(button, type, callback, i, mode, shift, control, alt);
		},
		bind$8: function(button, type, callback, info, mode, shift, control, alt) {
			this.bind$2(new $Franca_MouseBind.$ctor1(this.getButton(button), button, type, callback, info, mode, shift, control, alt));
		},
		bind$2: function(bind) {
			if (ss.contains(this.$binds, bind)) {
				this.unbind(this.$binds[ss.indexOf(this.$binds, bind)]);
			}
			this.$binds.push(bind);
		},
		unbind$5: function(button, type, callback, info, mode, shift, control, alt) {
			var i = -1;
			if (ss.isValue(info)) {
				i = System.EnumExtensions.toInt32(info);
			}
			this.unbind$6(button, type, callback, i, mode, shift, control, alt);
		},
		unbind$6: function(button, type, callback, info, mode, shift, control, alt) {
			this.unbind(new $Franca_MouseBind.$ctor1(this.getButton(button), button, type, callback, info, mode, shift, control, alt));
		},
		bind$5: function(key, type, callback, info, mode, shift, control, alt) {
			var i = -1;
			if (ss.isValue(info)) {
				i = System.EnumExtensions.toInt32(info);
			}
			var c = key;
			this.bind$a(c, type, callback, i, mode, shift, control, alt);
		},
		bind$9: function(keyCode, type, callback, info, mode, shift, control, alt) {
			var i = -1;
			if (ss.isValue(info)) {
				i = System.EnumExtensions.toInt32(info);
			}
			this.bind$a(keyCode, type, callback, i, mode, shift, control, alt);
		},
		bind$6: function(key, type, callback, info, mode, shift, control, alt) {
			var c = key;
			this.bind$a(c, type, callback, info, mode, shift, control, alt);
		},
		bind$a: function(keyCode, type, callback, info, mode, shift, control, alt) {
			this.bind$1(new $Franca_KeyBind.$ctor1(this.getKey$1(keyCode), keyCode, type, callback, info, mode, shift, control, alt));
		},
		bind$1: function(bind) {
			if (ss.contains(this.$binds, bind)) {
				this.unbind(this.$binds[ss.indexOf(this.$binds, bind)]);
			}
			this.$binds.push(bind);
			bind.key.bound = true;
		},
		unbind$3: function(key, type, callback, info, mode, shift, control, alt) {
			var i = -1;
			if (ss.isValue(info)) {
				i = System.EnumExtensions.toInt32(info);
			}
			var c = key;
			this.unbind$8(c, type, callback, i, mode, shift, control, alt);
		},
		unbind$7: function(keyCode, type, callback, info, mode, shift, control, alt) {
			var i = -1;
			if (ss.isValue(info)) {
				i = System.EnumExtensions.toInt32(info);
			}
			this.unbind$8(keyCode, type, callback, i, mode, shift, control, alt);
		},
		unbind$4: function(key, type, callback, info, mode, shift, control, alt) {
			var c = key;
			this.unbind$8(c, type, callback, info, mode, shift, control, alt);
		},
		unbind$8: function(keyCode, type, callback, info, mode, shift, control, alt) {
			this.unbind(new $Franca_KeyBind.$ctor1(this.getKey$1(keyCode), keyCode, type, callback, info, mode, shift, control, alt));
		},
		unbind: function(bind) {
			if (!ss.remove(this.$binds, bind)) {
				return;
			}
			var kb = ss.safeCast(bind, $Franca_KeyBind);
			if (ss.Nullable$1.liftne($Franca_KeyBind.op_Inequality, kb, null)) {
				var isBound = false;
				for (var $t1 = 0; $t1 < this.$binds.length; $t1++) {
					var b = this.$binds[$t1];
					if (b.get_device() === 0) {
						var kb2 = ss.unbox(ss.cast(b, $Franca_KeyBind));
						if (kb2.keyCode === ss.unbox(kb).keyCode) {
							isBound = true;
							break;
						}
					}
				}
				ss.unbox(kb).key.bound = isBound;
			}
		},
		getKey: function(key) {
			return this.getKey$1(key);
		},
		getKey$1: function(keyCode) {
			var k = {};
			if (this.$keyStates.tryGetValue(keyCode, k)) {
				return k.$;
			}
			k.$ = new $Franca_KeyboardButton(keyCode);
			this.$keyStates.set_item(keyCode, k.$);
			return k.$;
		},
		getButton: function(type) {
			switch (type) {
				case 0: {
					return this.$mouse.get_leftButton();
				}
				case 1: {
					return this.$mouse.get_middleButton();
				}
				case 2: {
					return this.$mouse.get_rightButton();
				}
				case 3: {
					return this.$mouse.get_button4();
				}
				case 4: {
					return this.$mouse.get_button5();
				}
			}
			return null;
		},
		$invokeOnGamepadChanged: function(index) {
			var onGamepadChanged = this.$1$OnGamepadChangedField;
			if (!ss.staticEquals(onGamepadChanged, null)) {
				onGamepadChanged(this.gamepad(index));
			}
		},
		setDeadzoneProcessing$1: function(style) {
			switch (style) {
				case 3: {
					throw new ss.ArgumentException('Called SetDeadzoneProcessing with DeadzoneProcessingStyle.Custom instead of supplying a DeadzoneProcessing delegate.', 'style');
				}
				case 4: {
					this.$setDeadzoneProcessing(style, null);
					break;
				}
				case 0: {
					this.$setDeadzoneProcessing(style, ss.mkdel(this, this.$deadzoneClamp));
					break;
				}
				case 1: {
					this.$setDeadzoneProcessing(style, ss.mkdel(this, this.$deadzoneCircular));
					break;
				}
				case 2: {
					this.$setDeadzoneProcessing(style, ss.mkdel(this, this.$deadzoneSquare));
					break;
				}
				default: {
					throw new ss.ArgumentException(ss.formatString("Unknown DeadzoneProcessingStyle '{0}' in InputHandler.SetDeadzoneProcessing.", System.EnumExtensions.getName($Franca_DeadzoneProcessingStyle).call(null, style)), 'style');
				}
			}
		},
		setDeadzoneProcessing: function(del) {
			this.$setDeadzoneProcessing(3, del);
		},
		$setDeadzoneProcessing: function(style, del) {
			this.$deadzoneStyle = style;
			this.$deadzoneProcessor = del;
		},
		$deadzoneClamp: function(gamepad, leftX, leftY, rightX, rightY, leftTrigger, rightTrigger) {
			leftX.$ = Franca.Calc.clamp$3(leftX.$, -1, 1);
			leftY.$ = Franca.Calc.clamp$3(leftY.$, -1, 1);
			rightX.$ = Franca.Calc.clamp$3(rightX.$, -1, 1);
			rightY.$ = Franca.Calc.clamp$3(rightY.$, -1, 1);
			leftTrigger.$ = Franca.Calc.clamp$3(leftTrigger.$, 0, 1);
			rightTrigger.$ = Franca.Calc.clamp$3(rightTrigger.$, 0, 1);
		},
		$deadzoneCircular: function(gamepad, leftX, leftY, rightX, rightY, leftTrigger, rightTrigger) {
			var left = $Franca_InputHandler.$excludeCircularDeadZone(new Franca.Vector2.$ctor3(leftX.$, leftY.$), $Franca_Gamepad.defaultLeftDeadZone);
			if (left.lengthSquared() > 1) {
				left.normalize();
			}
			var right = $Franca_InputHandler.$excludeCircularDeadZone(new Franca.Vector2.$ctor3(rightX.$, rightY.$), $Franca_Gamepad.defaultRightDeadZone);
			if (right.lengthSquared() > 1) {
				right.normalize();
			}
			leftX.$ = left.x;
			leftY.$ = left.y;
			rightX.$ = right.x;
			rightY.$ = right.y;
			leftTrigger.$ = Franca.Calc.clamp$3(leftTrigger.$, 0, 1);
			rightTrigger.$ = Franca.Calc.clamp$3(rightTrigger.$, 0, 1);
		},
		$deadzoneSquare: function(gamepad, leftX, leftY, rightX, rightY, leftTrigger, rightTrigger) {
			leftX.$ = this.$excludeAxisDeadzone(leftX.$, $Franca_Gamepad.defaultLeftDeadZone);
			leftY.$ = this.$excludeAxisDeadzone(leftY.$, $Franca_Gamepad.defaultLeftDeadZone);
			rightX.$ = this.$excludeAxisDeadzone(rightX.$, $Franca_Gamepad.defaultRightDeadZone);
			rightY.$ = this.$excludeAxisDeadzone(rightY.$, $Franca_Gamepad.defaultRightDeadZone);
			this.$deadzoneClamp(gamepad, leftX, leftY, rightX, rightY, leftTrigger, rightTrigger);
		},
		$excludeAxisDeadzone: function(value, deadzone) {
			if (value < -deadzone) {
				value += deadzone;
			}
			else if (value > deadzone) {
				value -= deadzone;
			}
			else {
				return 0;
			}
			return value / (1 - deadzone);
		},
		gamepad: function(gamepadIndex) {
			if (gamepadIndex < 0 || gamepadIndex >= this.$gamepads.length) {
				throw new ss.ArgumentOutOfRangeException('gamepadIndex');
			}
			return this.$gamepads[gamepadIndex];
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				this.removeEvents();
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_$gamepads: function() {
			return this.$gamepads;
		},
		set_$gamepads: function(value) {
			this.$gamepads = value;
		},
		get_deadzoneProcessor: function() {
			return this.$deadzoneProcessor;
		},
		get_deadzoneStyle: function() {
			return this.$deadzoneStyle;
		},
		get_mouse: function() {
			return this.$mouse;
		},
		get_textBuffer: function() {
			return this.$textBuffer;
		},
		get_binds: function() {
			return this.$binds;
		},
		get_ime: function() {
			return this.$ime;
		},
		get_wasCompositing: function() {
			return this.$wasCompositing;
		},
		get_globalFocus: function() {
			return this.$1$GlobalFocusField;
		},
		set_globalFocus: function(value) {
			this.$1$GlobalFocusField = value;
		},
		get_keyStates: function() {
			return this.$keyStates;
		},
		get_hasOnKeyDownSubscribers: function() {
			return !ss.staticEquals(this.$1$OnKeyDownField, null);
		},
		get_hasOnKeyUpSubscribers: function() {
			return !ss.staticEquals(this.$1$OnKeyUpField, null);
		},
		keyPress$1: function(key, control) {
			this.keyPress(this.getKeyPress(key, control));
		},
		getKeyPress: function(key, control) {
			var k = $Franca_KeyboardButton.keyFromKeyCode$1(key.code, false);
			if (control) {
				switch (k) {
					default: {
						return new $Franca_KeyPress.$ctor1(key.code, k, 0);
					}
					case 65: {
						return new $Franca_KeyPress.$ctor1(0, 0, 1);
					}
					case 66: {
						return new $Franca_KeyPress.$ctor1(0, 0, 2);
					}
					case 67: {
						return new $Franca_KeyPress.$ctor1(0, 0, 3);
					}
					case 68: {
						return new $Franca_KeyPress.$ctor1(0, 0, 4);
					}
					case 69: {
						return new $Franca_KeyPress.$ctor1(0, 0, 5);
					}
					case 70: {
						return new $Franca_KeyPress.$ctor1(0, 0, 6);
					}
					case 71: {
						return new $Franca_KeyPress.$ctor1(0, 0, 7);
					}
					case 72: {
						return new $Franca_KeyPress.$ctor1(0, 0, 8);
					}
					case 74: {
						return new $Franca_KeyPress.$ctor1(0, 0, 10);
					}
					case 75: {
						return new $Franca_KeyPress.$ctor1(0, 0, 11);
					}
					case 76: {
						return new $Franca_KeyPress.$ctor1(0, 0, 12);
					}
					case 77: {
						return new $Franca_KeyPress.$ctor1(0, 0, 13);
					}
					case 78: {
						return new $Franca_KeyPress.$ctor1(0, 0, 14);
					}
					case 79: {
						return new $Franca_KeyPress.$ctor1(0, 0, 15);
					}
					case 80: {
						return new $Franca_KeyPress.$ctor1(0, 0, 16);
					}
					case 81: {
						return new $Franca_KeyPress.$ctor1(0, 0, 17);
					}
					case 82: {
						return new $Franca_KeyPress.$ctor1(0, 0, 18);
					}
					case 83: {
						return new $Franca_KeyPress.$ctor1(0, 0, 19);
					}
					case 84: {
						return new $Franca_KeyPress.$ctor1(0, 0, 20);
					}
					case 85: {
						return new $Franca_KeyPress.$ctor1(0, 0, 21);
					}
					case 86: {
						return new $Franca_KeyPress.$ctor1(0, 0, 22);
					}
					case 87: {
						return new $Franca_KeyPress.$ctor1(0, 0, 23);
					}
					case 88: {
						return new $Franca_KeyPress.$ctor1(0, 0, 24);
					}
					case 89: {
						return new $Franca_KeyPress.$ctor1(0, 0, 25);
					}
					case 90: {
						return new $Franca_KeyPress.$ctor1(0, 0, 26);
					}
					case 36: {
						return new $Franca_KeyPress.$ctor1(0, 0, 134);
					}
					case 35: {
						return new $Franca_KeyPress.$ctor1(0, 0, 135);
					}
				}
			}
			else {
				switch (k) {
					default: {
						return new $Franca_KeyPress.$ctor1(key.code, k, 0);
					}
					case 9: {
						return new $Franca_KeyPress.$ctor1(0, 0, 9);
					}
					case 27: {
						return new $Franca_KeyPress.$ctor1(0, 0, 27);
					}
					case 8: {
						return new $Franca_KeyPress.$ctor1(0, 0, 28);
					}
					case 32: {
						return new $Franca_KeyPress.$ctor1(key.code, k, 32);
					}
				}
			}
		}
	}, null, [ss.IDisposable]);
	ss.initEnum($Franca_InputType, $asm, { Up: 0, Down: 1, RepeatWhileDown: 2, RepeatWhileUp: 3 });
	ss.initClass($Franca_JSBitmap, $asm, {
		createContext: function() {
			return new $Franca_JS_CanvasContext(this.$bitmap);
		},
		fromBinary: function(data, mimeType) {
			if (ss.isValue(this.$bitmap)) {
				throw new ss.InvalidOperationException('Cannot call FromBinary on initialized IBitmapProvider');
			}
			if (mimeType === 'image/x-targa' || mimeType === 'image/x-tga') {
				var pixels = $Franca_Targa_TargaImage.fromData(data);
				var $t1 = document.createElement('canvas');
				this.$bitmap = ss.safeCast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'CANVAS'));
				this.$bitmap.width = pixels.width;
				this.$bitmap.height = pixels.height;
				var canvas = new $Franca_Canvas.$ctor2(this);
				pixels.setPixelData(canvas);
				return canvas;
			}
			else {
				var str = ss.formatString('data:{0};base64,{1}', mimeType, Franca.Text.Base64.encode(data));
				return this.fromBase64(str, -1);
			}
		},
		fromBase64: function(base64, dataStartLoc) {
			if (ss.isValue(this.$bitmap)) {
				throw new ss.InvalidOperationException('Cannot call FromBase64 on initialized IBitmapProvider');
			}
			var img = new Image();
			img.src = base64;
			var $t1 = document.createElement('canvas');
			var bitmap = ss.safeCast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'CANVAS'));
			bitmap.width = img.width;
			bitmap.height = img.height;
			var context = ss.safeCast(bitmap.getContext('2d'), CanvasRenderingContext2D);
			context.drawImage(img, 0, 0);
			this.$bitmap = bitmap;
			return new $Franca_Canvas.$ctor2(this);
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
			}
			// Free any unmanaged objects here.
			this.$bitmap = null;
			this.$disposed = true;
		},
		get_width: function() {
			return this.$bitmap.width;
		},
		get_height: function() {
			return this.$bitmap.height;
		},
		get_underlyingObject: function() {
			return this.$bitmap;
		},
		get_bitmap: function() {
			return this.$bitmap;
		}
	}, null, [ss.IDisposable, $Franca_IBitmapProvider]);
	$Franca_JSBitmap.$ctor2.prototype = $Franca_JSBitmap.$ctor1.prototype = $Franca_JSBitmap.prototype;
	ss.initClass($Franca_JSFontProvider, $asm, {
		$hasChar$1: function(c) {
			var glyph = this.$font.charToGlyph(Franca.StringHelper.fromCodePoint(c));
			return glyph.xMax - glyph.xMin !== 0;
		},
		$hasChar: function(c) {
			var glyph = this.$font.charToGlyph(String.fromCharCode(c));
			return glyph.xMax - glyph.xMin !== 0;
		},
		$initialize: function(parent, data) {
			this.$font = opentype.parse(data.get_uint8Array().buffer);
			var metrics = new $Franca_FontMetrics.$ctor3(this.$font.tables.hhea.ascender, this.$font.tables.hhea.descender, this.$font.tables.hhea.lineGap, this.$font.tables.head.xMin, this.$font.tables.head.yMin, this.$font.tables.head.xMax, this.$font.tables.head.yMax);
			this.$unitsPerEm = this.$font.tables.head.unitsPerEm;
			parent.init(this.$unitsPerEm, metrics);
		},
		$getFontMetrics: function(baseMetrics, unitsPerEm, fontSize) {
			var scale = 1 / unitsPerEm * fontSize;
			return new $Franca_FontMetrics.$ctor3(Math.round(baseMetrics.get_ascent() * scale), Math.round(baseMetrics.get_descent() * scale), Math.round(baseMetrics.get_linegap() * scale), baseMetrics.get_xMin() * scale, baseMetrics.get_yMin() * scale, baseMetrics.get_xMax() * scale, baseMetrics.get_yMax() * scale);
		},
		$getGlyphMetrics: function(c, fontSize) {
			return this.$getGlyphMetrics$2(String.fromCharCode(c), fontSize);
		},
		$getGlyphMetrics$1: function(c, fontSize) {
			return this.$getGlyphMetrics$2(Franca.StringHelper.fromCodePoint(c), fontSize);
		},
		$getGlyphMetrics$2: function(c, fontSize) {
			var glyph = this.$font.charToGlyph(c);
			// old method
			//return new GlyphMetrics(glyph.LeftSideBearing, glyph.YMax, glyph.AdvanceWidth, glyph.XMin, glyph.YMin, glyph.XMax, glyph.YMax, unitsPerEm, fontSize);
			// new integer method
			var scale = 1 / this.$unitsPerEm * fontSize;
			var hBearingX = Math.round(glyph.leftSideBearing * scale);
			var hBearingY = Math.round(glyph.yMax * scale);
			var hAdvance = Math.round(glyph.advanceWidth * scale);
			var height = Math.round((glyph.yMax - glyph.yMin) * scale);
			var width = Math.round((glyph.xMax - glyph.xMin) * scale);
			var metrics = new $Franca_GlyphMetrics.$ctor3(hBearingX, hBearingY, hAdvance, hBearingX, hBearingY - height, hBearingX + width, hBearingY);
			return metrics;
		},
		$getKerningValue: function(left, right) {
			return this.$font.getKerningValue(left, right);
		},
		$getKerningValue$1: function(left, right) {
			return this.$font.getKerningValue(left, right);
		},
		$getKerningValue$2: function(left, right, scale) {
			// int instead of floor so a small adjustment left (-0.05) doesn't turn into a big adjustment (-1)
			return ss.Int32.trunc(this.$font.getKerningValue(left, right) * scale);
		},
		$getKerningValue$3: function(left, right, scale) {
			// int instead of floor so a small adjustment left (-0.05) doesn't turn into a big adjustment (-1)
			return ss.Int32.trunc(this.$font.getKerningValue(left, right) * scale);
		},
		get_$names: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, tables, name, fontFamily, fullName;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									tables = this.$font.tables;
									name = tables['name'];
									if (!!ss.isValue(name)) {
										fontFamily = name['fontFamily'];
										if (!!(ss.isValue(fontFamily) && fontFamily !== '')) {
											$result = ss.cast(fontFamily, String);
											$state = 1;
											return true;
										}
										$state = 1;
										continue $sm1;
									}
									$state = -1;
									break $sm1;
								}
								case 1: {
									$state = -1;
									fullName = name['fullName'];
									if (!!(ss.isValue(fullName) && fullName !== '')) {
										$result = ss.cast(fullName, String);
										$state = -1;
										return true;
									}
									$state = -1;
									break $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_otFont: function() {
			return this.$font;
		}
	}, null, [ss.IDisposable, $Franca_$IFontProvider]);
	ss.initClass($Franca_JSInput, $asm, {
		get_$containerWindow: function() {
			var jsWindow = ss.safeCast(this.$container.get_$window(), $Franca_$JSWindow);
			if (ss.isValue(jsWindow)) {
				return jsWindow.get_$window();
			}
			return null;
		},
		$registerEvents: function() {
			this.$keyDownHandler = ss.mkdel(this, function(e) {
				this.$domKeyDown(ss.cast(e, KeyboardEvent));
			});
			window.addEventListener('keydown', this.$keyDownHandler, false);
			this.$keyUpHandler = ss.mkdel(this, function(e1) {
				this.$domKeyUp(ss.cast(e1, KeyboardEvent));
			});
			window.addEventListener('keyup', this.$keyUpHandler, false);
			this.$keyPressHandler = ss.mkdel(this, function(e2) {
				this.$domKeyPress(ss.cast(e2, KeyboardEvent));
			});
			window.addEventListener('keypress', this.$keyPressHandler, false);
			this.$mouseMoveHandler = ss.mkdel(this, function(e3) {
				this.$domMouseMove(ss.cast(e3, MouseEvent));
			});
			window.addEventListener('mousemove', this.$mouseMoveHandler, false);
			this.$mouseDownHandler = ss.mkdel(this, function(e4) {
				this.$domMouseDown(ss.cast(e4, MouseEvent));
			});
			window.addEventListener('mousedown', this.$mouseDownHandler, false);
			this.$mouseUpHandler = ss.mkdel(this, function(e5) {
				this.$domMouseUp(ss.cast(e5, MouseEvent));
			});
			window.addEventListener('mouseup', this.$mouseUpHandler, false);
			this.$focusHandler = ss.mkdel(this, function(e6) {
				this.$domFocus(ss.safeCast(e6, FocusEvent));
			});
			window.addEventListener('focus', this.$focusHandler, false);
			this.$blurHandler = ss.mkdel(this, function(e7) {
				this.$domBlur(ss.safeCast(e7, FocusEvent));
			});
			window.addEventListener('blur', this.$blurHandler, false);
			if ($Franca_FrancaFramework.isSupported(3)) {
				this.$gamepadPlayerMapping = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, ss.Int32]))();
				this.$gamepadConnectedHandler = ss.mkdel(this, function(e8) {
					this.$gamepadConnected(e8);
				});
				window.addEventListener('gamepadconnected', this.$gamepadConnectedHandler, false);
				this.$gamepadDisconnectedHandler = ss.mkdel(this, function(e9) {
					this.$gamepadDisconnected(e9);
				});
				window.addEventListener('gamepaddisconnected', this.$gamepadDisconnectedHandler, false);
			}
			this.$oldContextHandler = document.body.oncontextmenu;
			document.body.oncontextmenu = ss.mkdel(this, function(e10) {
				if (this.$inputHandler.get_mouse().inFrame) {
					e10.preventDefault();
					return;
				}
				if (!ss.staticEquals(this.$oldContextHandler, null)) {
					this.$oldContextHandler(e10);
				}
			});
			// this exists so the GUI can consume click events that come directly from the DOM
			// which is necessary for GUI elements to do stuff like request fullscreen status
			this.get_$containerWindow().addEventListener('click', ss.mkdel(this, this.$nativeClick));
			this.get_$containerWindow().tabIndex = -1;
			// so focus() call will work
		},
		$nativeClick: function(e) {
			this.$inputHandler.triggerNativeClick(ss.cast(e, MouseEvent));
		},
		$removeEvents: function() {
			window.removeEventListener('keydown', this.$keyDownHandler);
			window.removeEventListener('keyup', this.$keyUpHandler);
			window.removeEventListener('keypress', this.$keyPressHandler);
			window.removeEventListener('mousemove', this.$mouseMoveHandler);
			window.removeEventListener('mousedown', this.$mouseDownHandler);
			window.removeEventListener('mouseup', this.$mouseUpHandler);
			if ($Franca_FrancaFramework.isSupported(3)) {
				window.removeEventListener('gamepadconnected', this.$gamepadConnectedHandler);
				window.removeEventListener('gamepaddisconnected', this.$gamepadDisconnectedHandler);
			}
			document.body.oncontextmenu = this.$oldContextHandler;
		},
		$updateState: function() {
			this.$wasBlurred = this.$blurred;
			if (document.hasFocus()) {
				this.$blurred = false;
				this.$pollGamepads();
			}
			else if (!this.$blurred) {
				this.$blurred = true;
				var $t1 = ss.getEnumerator(this.$inputHandler.get_mouse().get_buttons());
				try {
					while ($t1.moveNext()) {
						var button = $t1.current();
						button.realTimeState = 0;
					}
				}
				finally {
					$t1.dispose();
				}
				var $t2 = ss.getEnumerator(this.$inputHandler.get_keyStates().get_values());
				try {
					while ($t2.moveNext()) {
						var key = $t2.current();
						key.realTimeState = 0;
						this.$inputHandler.triggerKeyUp(new $Franca_KeyInputEvent(key));
					}
				}
				finally {
					$t2.dispose();
				}
				for (var i = 0; i < $Franca_InputHandler.maxGamepads; i++) {
					var gamepad = this.$inputHandler.gamepad(i);
					var $t3 = ss.getEnumerator(gamepad.get_buttons());
					try {
						while ($t3.moveNext()) {
							var btn = $t3.current();
							gamepad.get_item(btn.type).realTimeState = 0;
						}
					}
					finally {
						$t3.dispose();
					}
					var $t4 = Enumerable.from(gamepad.get_axes()).toArray();
					for (var $t5 = 0; $t5 < $t4.length; $t5++) {
						var axis = $t4[$t5];
						gamepad.set_item(axis.type, 0);
					}
				}
			}
			if (!this.$blurred && this.$wasBlurred) {
				// Chrome fucking sucks
				// When a tab is blurred it sets the gamepad input to 0, but when the tab is then
				// focussed again, for one frame, the gamepad API reports the state of buttons as
				// they were when the window got blurred, which can cause double keypresses if a
				// button is used to do something like open an url
				//
				// By checking whether we got unblurred this frame and assuming all input received
				// that frame is invalid and nuking it from orbit if so we avoid this bug.
				//
				// I love web game programming -_-
				for (var i1 = 0; i1 < $Franca_InputHandler.maxGamepads; i1++) {
					var gamepad1 = this.$inputHandler.gamepad(i1);
					var $t6 = ss.getEnumerator(gamepad1.get_buttons());
					try {
						while ($t6.moveNext()) {
							var btn1 = $t6.current();
							gamepad1.get_item(btn1.type).realTimeState = 0;
						}
					}
					finally {
						$t6.dispose();
					}
					var $t7 = Enumerable.from(gamepad1.get_axes()).toArray();
					for (var $t8 = 0; $t8 < $t7.length; $t8++) {
						var axis1 = $t7[$t8];
						gamepad1.set_item(axis1.type, 0);
					}
				}
			}
		},
		$getFreePlayerIndex: function() {
			var players = new Array(4);
			var $t1 = ss.getEnumerator(this.$gamepadPlayerMapping.get_values());
			try {
				while ($t1.moveNext()) {
					var v = $t1.current();
					if (v >= 0 && v < $Franca_InputHandler.maxGamepads) {
						players[v] = true;
					}
				}
			}
			finally {
				$t1.dispose();
			}
			for (var i = 0; i < $Franca_InputHandler.maxGamepads; i++) {
				if (!players[i]) {
					return i;
				}
			}
			return -1;
		},
		$gamepadConnected: function(e) {
			if (!$Franca_FrancaFramework.isSupported(3)) {
				return;
			}
			var playerIndex;
			if (!!!this.$gamepadPlayerMapping.containsKey(ss.unbox(ss.cast(e.gamepad.index, ss.Int32)))) {
				playerIndex = this.$getFreePlayerIndex();
				if (playerIndex < 0 || playerIndex >= $Franca_InputHandler.maxGamepads) {
					return;
				}
			}
			else {
				playerIndex = this.$gamepadPlayerMapping.get_item(ss.unbox(ss.cast(e.gamepad.index, ss.Int32)));
			}
			console.log(ss.cast(ss.formatString('Player {0} connected at gamepad index {1}', playerIndex, e.gamepad.index), String));
			this.$gamepadPlayerMapping.set_item(ss.unbox(ss.cast(e.gamepad.index, ss.Int32)), playerIndex);
		},
		$gamepadDisconnected: function(e) {
			if (!$Franca_FrancaFramework.isSupported(3)) {
				return;
			}
			if (!!!this.$gamepadPlayerMapping.containsKey(ss.unbox(ss.cast(e.gamepad.index, ss.Int32)))) {
				return;
			}
			var index = this.$gamepadPlayerMapping.get_item(ss.unbox(ss.cast(e.gamepad.index, ss.Int32)));
			console.log(ss.cast(ss.formatString('Player {0} disconnected at gamepad index {1}', index, e.gamepad.index), String));
			this.$gamepadPlayerMapping.remove(ss.unbox(ss.cast(e.gamepad.index, ss.Int32)));
			var $t2 = this.$inputHandler.get_$gamepads();
			var $t1 = new $Franca_Gamepad(index, '', null, null);
			$t1.set_displayMappingWarning(this.$inputHandler.get_$gamepads()[index].get_displayMappingWarning());
			$t2[index] = $t1;
			this.$checkGamepadMapping(index, null);
		},
		$checkGamepadMapping: function(index, jsGamepad) {
			if (!!(ss.isValue(jsGamepad) && ss.cast(jsGamepad.mapping, String) !== 'standard' && this.$inputHandler.get_$gamepads()[index].get_displayMappingWarning())) {
				// check localstorage to see if we should re-warn about the gamepad
				var warnUser = true;
				if (warnUser) {
					$Franca_JS_NonBlockingAlert.show(ss.formatString("The browser could not map player {0}'s gamepad '{1}' to a known layout and it may not function properly.\r\n                        \r\nIf possible switch your device to XInput mode, or connect an XInput compatible gamepad.", this.$inputHandler.get_$gamepads()[index].index + 1, this.$inputHandler.get_$gamepads()[index].name), ss.formatString($Franca_JSInput.mappingWarningFmt, index), false);
				}
			}
			else {
				$Franca_JS_NonBlockingAlert.close(ss.formatString($Franca_JSInput.mappingWarningFmt, index));
			}
		},
		$pollGamepads: function() {
			if (!$Franca_FrancaFramework.isSupported(3)) {
				return;
			}
			var gamepads = navigator.getGamepads();
			for (var i = 0; i < gamepads.length; i++) {
				var jsGamepad = gamepads[i];
				if (!!ss.isNullOrUndefined(jsGamepad)) {
					continue;
				}
				var index = {};
				if (!!!this.$gamepadPlayerMapping.tryGetValue(ss.unbox(ss.cast(jsGamepad.index, ss.Int32)), index)) {
					continue;
				}
				if (index.$ < 0 || index.$ >= $Franca_InputHandler.maxGamepads) {
					continue;
				}
				if (!!!ss.referenceEquals(jsGamepad.id, this.$inputHandler.get_$gamepads()[index.$].rawID)) {
					var guid = {}, bestGuess = {};
					$Franca_JSInput.parseGamepadID(ss.cast(jsGamepad.id, String), guid, bestGuess);
					var $t2 = this.$inputHandler.get_$gamepads();
					var $t3 = index.$;
					var $t1 = new $Franca_Gamepad(index.$, guid.$, bestGuess.$, ss.cast(jsGamepad.id, String));
					$t1.set_displayMappingWarning(this.$inputHandler.get_$gamepads()[index.$].get_displayMappingWarning());
					$t2[$t3] = $t1;
					this.$checkGamepadMapping(index.$, jsGamepad);
					this.$inputHandler.$invokeOnGamepadChanged(index.$);
				}
				if (!!jsGamepad.connected) {
					if (!this.$inputHandler.gamepad(index.$).get_connected()) {
						this.$inputHandler.get_$gamepads()[index.$].set_connected(true);
					}
					var gamepad = this.$inputHandler.gamepad(index.$);
					var $t5 = gamepad.get_a();
					var $t4 = jsGamepad.buttons[0];
					$t5.realTimeState = ss.unbox(ss.cast((($t4 !== null && typeof($t4) === 'object') ? ((typeof($t4.value) === 'undefined') ? ($t4.pressed ? 1 : 0) : $t4.value) : 0) || 0, Number));
					var $t7 = gamepad.get_b();
					var $t6 = jsGamepad.buttons[1];
					$t7.realTimeState = ss.unbox(ss.cast((($t6 !== null && typeof($t6) === 'object') ? ((typeof($t6.value) === 'undefined') ? ($t6.pressed ? 1 : 0) : $t6.value) : 0) || 0, Number));
					var $t9 = gamepad.get_x();
					var $t8 = jsGamepad.buttons[2];
					$t9.realTimeState = ss.unbox(ss.cast((($t8 !== null && typeof($t8) === 'object') ? ((typeof($t8.value) === 'undefined') ? ($t8.pressed ? 1 : 0) : $t8.value) : 0) || 0, Number));
					var $t11 = gamepad.get_y();
					var $t10 = jsGamepad.buttons[3];
					$t11.realTimeState = ss.unbox(ss.cast((($t10 !== null && typeof($t10) === 'object') ? ((typeof($t10.value) === 'undefined') ? ($t10.pressed ? 1 : 0) : $t10.value) : 0) || 0, Number));
					var $t13 = gamepad.get_l();
					var $t12 = jsGamepad.buttons[4];
					$t13.realTimeState = ss.unbox(ss.cast((($t12 !== null && typeof($t12) === 'object') ? ((typeof($t12.value) === 'undefined') ? ($t12.pressed ? 1 : 0) : $t12.value) : 0) || 0, Number));
					var $t15 = gamepad.get_r();
					var $t14 = jsGamepad.buttons[5];
					$t15.realTimeState = ss.unbox(ss.cast((($t14 !== null && typeof($t14) === 'object') ? ((typeof($t14.value) === 'undefined') ? ($t14.pressed ? 1 : 0) : $t14.value) : 0) || 0, Number));
					var $t17 = gamepad.get_select();
					var $t16 = jsGamepad.buttons[8];
					$t17.realTimeState = ss.unbox(ss.cast((($t16 !== null && typeof($t16) === 'object') ? ((typeof($t16.value) === 'undefined') ? ($t16.pressed ? 1 : 0) : $t16.value) : 0) || 0, Number));
					var $t19 = gamepad.get_start();
					var $t18 = jsGamepad.buttons[9];
					$t19.realTimeState = ss.unbox(ss.cast((($t18 !== null && typeof($t18) === 'object') ? ((typeof($t18.value) === 'undefined') ? ($t18.pressed ? 1 : 0) : $t18.value) : 0) || 0, Number));
					var $t21 = gamepad.get_lStick();
					var $t20 = jsGamepad.buttons[10];
					$t21.realTimeState = ss.unbox(ss.cast((($t20 !== null && typeof($t20) === 'object') ? ((typeof($t20.value) === 'undefined') ? ($t20.pressed ? 1 : 0) : $t20.value) : 0) || 0, Number));
					var $t23 = gamepad.get_rStick();
					var $t22 = jsGamepad.buttons[11];
					$t23.realTimeState = ss.unbox(ss.cast((($t22 !== null && typeof($t22) === 'object') ? ((typeof($t22.value) === 'undefined') ? ($t22.pressed ? 1 : 0) : $t22.value) : 0) || 0, Number));
					var $t25 = gamepad.get_up();
					var $t24 = jsGamepad.buttons[12];
					$t25.realTimeState = ss.unbox(ss.cast((($t24 !== null && typeof($t24) === 'object') ? ((typeof($t24.value) === 'undefined') ? ($t24.pressed ? 1 : 0) : $t24.value) : 0) || 0, Number));
					var $t27 = gamepad.get_down();
					var $t26 = jsGamepad.buttons[13];
					$t27.realTimeState = ss.unbox(ss.cast((($t26 !== null && typeof($t26) === 'object') ? ((typeof($t26.value) === 'undefined') ? ($t26.pressed ? 1 : 0) : $t26.value) : 0) || 0, Number));
					var $t29 = gamepad.get_left();
					var $t28 = jsGamepad.buttons[14];
					$t29.realTimeState = ss.unbox(ss.cast((($t28 !== null && typeof($t28) === 'object') ? ((typeof($t28.value) === 'undefined') ? ($t28.pressed ? 1 : 0) : $t28.value) : 0) || 0, Number));
					var $t31 = gamepad.get_right();
					var $t30 = jsGamepad.buttons[15];
					$t31.realTimeState = ss.unbox(ss.cast((($t30 !== null && typeof($t30) === 'object') ? ((typeof($t30.value) === 'undefined') ? ($t30.pressed ? 1 : 0) : $t30.value) : 0) || 0, Number));
					var $t33 = gamepad.get_home();
					var $t32 = jsGamepad.buttons[16];
					$t33.realTimeState = ss.unbox(ss.cast((($t32 !== null && typeof($t32) === 'object') ? ((typeof($t32.value) === 'undefined') ? ($t32.pressed ? 1 : 0) : $t32.value) : 0) || 0, Number));
					var $t35 = gamepad.get_lTrigger();
					var $t34 = jsGamepad.buttons[6];
					$t35.realTimeState = ss.unbox(ss.cast((($t34 !== null && typeof($t34) === 'object') ? ((typeof($t34.value) === 'undefined') ? ($t34.pressed ? 1 : 0) : $t34.value) : 0) || 0, Number));
					var $t37 = gamepad.get_rTrigger();
					var $t36 = jsGamepad.buttons[7];
					$t37.realTimeState = ss.unbox(ss.cast((($t36 !== null && typeof($t36) === 'object') ? ((typeof($t36.value) === 'undefined') ? ($t36.pressed ? 1 : 0) : $t36.value) : 0) || 0, Number));
					gamepad.set_leftX(ss.unbox(ss.cast(jsGamepad.axes[0], Number)));
					gamepad.set_leftY(ss.unbox(ss.cast(jsGamepad.axes[1], Number)));
					gamepad.set_rightX(ss.unbox(ss.cast(jsGamepad.axes[2], Number)));
					gamepad.set_rightY(ss.unbox(ss.cast(jsGamepad.axes[3], Number)));
				}
				else if (this.$inputHandler.gamepad(index.$).get_connected()) {
					this.$inputHandler.get_$gamepads()[index.$].set_connected(false);
				}
			}
		},
		$domFocus: function(e) {
		},
		$domBlur: function(e) {
		},
		$copyPaste: function(kp) {
			// if GlobalFocus is false we only want to capture events while our canvas is
			// actually focussed, so return if it's not.
			if (!this.$inputHandler.get_globalFocus() && !this.$hasFocus) {
				return;
			}
			var activeElement = document.activeElement;
			var chr = kp.char$1;
			var isCopy = chr === 3 || chr === 24;
			var isCut = chr === 24;
			var isPaste = chr === 22;
			if (isCopy) {
				this.$inputHandler.$copy(isCut);
			}
			else if (isPaste) {
				ss.cast($Franca_Clipboard.get_$provider(), $Franca_$JSClipboard).$getPasteText(ss.mkdel(this, this.$afterPaste));
			}
		},
		$afterPaste: function(text) {
			var keyPress = new $Franca_KeyPress.$ctor1(0, 0, 22);
			this.$inputHandler.keyPress(keyPress);
		},
		$isCopyPaste: function(kp) {
			var chr = kp.char$1;
			return kp.get_isCharacter() && System.CharExtensions.isControl(kp.char$1) && (chr === 3 || chr === 22 || chr === 24);
		},
		$domKeyDown: function(e) {
			if (this.$blurred) {
				return;
			}
			var kbEvent = e;
			// if GlobalFocus is false we only want to capture events while our canvas is
			// actually focussed, so return if it's not.
			if (!this.$inputHandler.get_globalFocus() && !this.$hasFocus) {
				return;
			}
			var key = this.$inputHandler.getKey($Franca_JSInput.$getKeyFromJs(ss.cast(kbEvent.code, String), ss.cast(kbEvent.key, String), e.which));
			key.realTimeState = 1;
			var keyPress = this.$inputHandler.getKeyPress(key, e.ctrlKey);
			var evt = new $Franca_KeyInputEvent(key);
			if (this.$inputHandler.get_hasOnKeyDownSubscribers()) {
				this.$inputHandler.triggerKeyDown(evt);
				if (evt.get_preventDefault()) {
					if (keyPress.get_isKey() && ss.contains($Franca_JSInput.$specialKeys, keyPress.key) || keyPress.get_isCharacter() && System.CharExtensions.isControl(keyPress.char$1)) {
						// never prevent default for copy and paste
						if (!this.$isCopyPaste(keyPress)) {
							e.preventDefault();
						}
					}
				}
			}
			else if (key.bound) {
				e.preventDefault();
			}
			if (!this.$isCopyPaste(keyPress)) {
				this.$inputHandler.keyPress(keyPress);
			}
			else {
				this.$copyPaste(keyPress);
			}
			key = this.$inputHandler.getKey$1(2097152);
			key.realTimeState = 1;
		},
		$domKeyUp: function(e) {
			if (this.$blurred) {
				return;
			}
			var kbEvent = e;
			var key = this.$inputHandler.getKey($Franca_JSInput.$getKeyFromJs(ss.cast(kbEvent.code, String), ss.cast(kbEvent.key, String), e.which));
			key.realTimeState = 0;
			if (key.bound) {
				e.preventDefault();
			}
			var evt = new $Franca_KeyInputEvent(key);
			this.$inputHandler.triggerKeyUp(evt);
			if (this.$inputHandler.get_hasOnKeyUpSubscribers() && evt.get_preventDefault()) {
				e.preventDefault();
			}
			key = this.$inputHandler.getKey$1(2097152);
			key.realTimeState = 0;
		},
		$domKeyPress: function(e) {
			if (this.$blurred) {
				return;
			}
			var kbEvent = e;
			// if GlobalFocus is false we only want to capture events while our canvas is
			// actually focussed, so return if it's not.
			if (!this.$inputHandler.get_globalFocus() && !this.$hasFocus) {
				return;
			}
			var key = $Franca_JSInput.$getKeyFromJs(ss.cast(kbEvent.code, String), ss.cast(kbEvent.key, String), e.keyCode);
			var evt = new $Franca_KeyPress.$ctor1(key, key, e.charCode);
			//var isControl = e.CtrlKey && (evt.Char == 'x' || evt.Char == 'v' || evt.Char == 'c' || evt.Char == 'a');
			//
			//if (!isControl) {
			//    KeyPress(evt);
			//}
			// fuck it just block all key presses when control is held what could possibly go wrong?
			if (!e.ctrlKey) {
				this.$inputHandler.keyPress(evt);
			}
		},
		$domMouseMove: function(e) {
			this.$inputHandler.get_mouse().realTimeX = e.clientX;
			this.$inputHandler.get_mouse().realTimeY = e.clientY;
		},
		$domMouseDown: function(e) {
			if (this.$blurred) {
				return;
			}
			if (!this.$inputHandler.get_mouse().inFrame) {
				this.$hasFocus = false;
				return;
			}
			this.$hasFocus = true;
			this.get_$containerWindow().focus();
			switch (e.button || e.which) {
				case 1: {
					this.$inputHandler.get_mouse().get_leftButton().realTimeState = 1;
					e.preventDefault();
					break;
				}
				case 2: {
					this.$inputHandler.get_mouse().get_middleButton().realTimeState = 1;
					e.preventDefault();
					break;
				}
				case 3: {
					this.$inputHandler.get_mouse().get_rightButton().realTimeState = 1;
					e.preventDefault();
					break;
				}
				case 4: {
					// not actually supported
					this.$inputHandler.get_mouse().get_button4().realTimeState = 1;
					e.preventDefault();
					break;
				}
				case 5: {
					// not actually supported
					this.$inputHandler.get_mouse().get_button5().realTimeState = 1;
					e.preventDefault();
					break;
				}
			}
		},
		$domMouseUp: function(e) {
			if (this.$blurred) {
				return;
			}
			switch (e.button || e.which) {
				case 1: {
					this.$inputHandler.get_mouse().get_leftButton().realTimeState = 0;
					break;
				}
				case 2: {
					this.$inputHandler.get_mouse().get_middleButton().realTimeState = 0;
					break;
				}
				case 3: {
					this.$inputHandler.get_mouse().get_rightButton().realTimeState = 0;
					break;
				}
				case 4: {
					// not actually supported
					this.$inputHandler.get_mouse().get_button4().realTimeState = 0;
					break;
				}
				case 5: {
					// not actually supported
					this.$inputHandler.get_mouse().get_button5().realTimeState = 0;
					break;
				}
			}
			if (this.$inputHandler.get_mouse().inFrame) {
				e.preventDefault();
			}
		},
		$getKeyNameByPlatform: function(key, shortened) {
			var platform = null;
			try {
				platform = (ss.startsWithString(System.StringExtensions.toUpperInvariant(navigator.platform), 'MAC') ? 'Mac' : null);
			}
			catch ($t1) {
			}
			if (platform === 'Mac') {
				switch (key) {
					case 144: {
						return 'Clear';
					}
					case 91: {
						return (shortened ? 'LCmd' : 'Left Command');
					}
					case 92: {
						return (shortened ? 'RCmd' : 'Right Command');
					}
					case 18: {
						return (shortened ? 'Alt' : 'Option');
					}
				}
			}
			return null;
		},
		$locationalToActual: function(key) {
			return key;
		},
		$addGamepadMappingsFromFile: function(file) {
			return 0;
		}
	}, null, [$Franca_$IInputProvider]);
	ss.initEnum($Franca_Key, $asm, { Unknown: 0, Any: 2097152, Backspace: 8, Tab: 9, Enter: 13, Shift: 16, Control: 17, Alt: 18, PauseBreak: 19, CapsLock: 20, Escape: 27, Space: 32, PageUp: 33, PageDown: 34, End: 35, Home: 36, Left: 37, Up: 38, Right: 39, Down: 40, Insert: 45, Delete: 46, N0: 48, N1: 49, N2: 50, N3: 51, N4: 52, N5: 53, N6: 54, N7: 55, N8: 56, N9: 57, Minus: 189, Equals: 187, Semicolon: 186, A: 65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90, LWin: 91, RWin: 92, Menu: 93, Numpad0: 96, Numpad1: 97, Numpad2: 98, Numpad3: 99, Numpad4: 100, Numpad5: 101, Numpad6: 102, Numpad7: 103, Numpad8: 104, Numpad9: 105, Multiply: 106, NumpadMultiply: 106, Add: 107, NumpadPlus: 107, Subtract: 109, NumpadMinus: 109, Decimal: 110, NumpadPeriod: 110, Divide: 111, NumpadSlash: 111, F1: 112, F2: 113, F3: 114, F4: 115, F5: 116, F6: 117, F7: 118, F8: 119, F9: 120, F10: 121, F11: 122, F12: 123, NumLock: 144, ScrollLock: 145, Comma: 188, Period: 190, Slash: 191, Tilde: 192, LBracket: 219, RBracket: 221, Backslash: 220, Quote: 222 });
	ss.initClass($Franca_KeyBind, $asm, {
		get_type: function() {
			return this.$type;
		},
		get_info: function() {
			return this.$info;
		},
		get_mode: function() {
			return this.$mode;
		},
		get_device: function() {
			return 0;
		},
		process: function(mouse, gameTime, mode, shift, control, alt, compositing) {
			this.process$1(this.key.state, this.key.lastState, mouse, gameTime, mode, shift, control, alt, compositing);
		},
		process$1: function(state, lastState, mouse, gameTime, mode, shift, control, alt, compositing) {
			if (compositing || this.$mode > -1 && mode !== this.$mode || this.shift !== shift || this.control !== control || this.alt !== alt) {
				return;
			}
			var call = false;
			if (this.$type === 1) {
				call = state === 1 && lastState === 0;
			}
			else if (this.$type === 0) {
				call = state === 0 && lastState === 1;
			}
			else if (this.$type === 2) {
				call = state === 1;
			}
			else if (this.$type === 3) {
				call = state === 0;
			}
			if (call) {
				var evt = new $Franca_InputEvent(gameTime, 0, this.$info, mode, mouse, shift, control, alt);
				evt.keyBind = this;
				this.callback(evt);
			}
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_KeyBind);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).keyCode === this.keyCode && ss.unbox(b).$type === this.$type && ss.unbox(b).$info === this.$info && ss.unbox(b).$mode === this.$mode && ss.unbox(b).control === this.control && ss.unbox(b).alt === this.alt && ss.unbox(b).shift === this.shift;
		},
		equalsT: function(b) {
			return b.keyCode === this.keyCode && b.$type === this.$type && b.$info === this.$info && b.$mode === this.$mode && b.control === this.control && b.alt === this.alt && b.shift === this.shift;
		},
		getHashCode: function() {
			return ss.getHashCode(this.keyCode) ^ ss.getHashCode(this.$type) ^ ss.getHashCode(this.$mode);
		},
		get_virtualKey: function() {
			return $Franca_KeyboardButton.keyFromKeyCode$1(this.keyCode, false);
		}
	}, null, [$Franca_IBind, ss.IEquatable]);
	$Franca_KeyBind.$ctor1.prototype = $Franca_KeyBind.prototype;
	$Franca_KeyBind.__class = false;
	ss.initClass($Franca_KeyboardButton, $asm, {
		getName: function(shortened, physical, scancodeFormat, unknownFormat) {
			var k = $Franca_KeyboardButton.keyFromKeyCode$1(this.code, true);
			return $Franca_KeyExtensions.getName(k, shortened, physical, scancodeFormat, unknownFormat);
		},
		toString: function() {
			return this.getName(false, true, null, null);
		}
	});
	ss.initClass($Franca_KeyExtensions, $asm, {});
	ss.initEnum($Franca_KeyImageType, $asm, { light: 0, dark: 1, blank: 2 });
	ss.initClass($Franca_KeyInputEvent, $asm, {
		get_preventDefault: function() {
			return this.$1$PreventDefaultField;
		},
		set_preventDefault: function(value) {
			this.$1$PreventDefaultField = value;
		}
	});
	ss.initClass($Franca_KeyPress, $asm, {
		get_isKey: function() {
			return this.keyCode !== 0;
		},
		get_isCharacter: function() {
			return this.char$1 !== 0;
		},
		toString: function() {
			return ss.formatString('[KeyPress: KeyCode={0}, Key={1}, Char={2}]', this.keyCode, $Franca_KeyExtensions.getName(this.key, true, false, 'Scan #{0}', 'Unknown #{0}'), this.char$1);
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_KeyPress);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).keyCode === this.keyCode && ss.unbox(b).char$1 === this.char$1;
		},
		equalsT: function(b) {
			return b.keyCode === this.keyCode && b.char$1 === this.char$1;
		},
		getHashCode: function() {
			return ss.getHashCode(this.keyCode) ^ ss.getHashCode(this.char$1);
		}
	}, null, [ss.IEquatable]);
	$Franca_KeyPress.$ctor1.prototype = $Franca_KeyPress.prototype;
	$Franca_KeyPress.__class = false;
	ss.initEnum($Franca_KeyState, $asm, { Up: 0, Down: 1 });
	ss.initClass($Franca_MainLoop, $asm, {});
	ss.initEnum($Franca_MessageType, $asm, { Binary: 0, Text: 1 });
	ss.initClass($Franca_MissingAttributeException, $asm, {}, ss.Exception);
	$Franca_MissingAttributeException.$ctor2.prototype = $Franca_MissingAttributeException.$ctor3.prototype = $Franca_MissingAttributeException.$ctor1.prototype = $Franca_MissingAttributeException.prototype;
	ss.initClass($Franca_MissingConstructorException, $asm, {}, ss.Exception);
	$Franca_MissingConstructorException.$ctor2.prototype = $Franca_MissingConstructorException.$ctor3.prototype = $Franca_MissingConstructorException.$ctor1.prototype = $Franca_MissingConstructorException.prototype;
	ss.initClass($Franca_Mouse, $asm, {
		get_leftButton: function() {
			return this.$leftButton;
		},
		get_middleButton: function() {
			return this.$middleButton;
		},
		get_rightButton: function() {
			return this.$rightButton;
		},
		get_button4: function() {
			return this.$button4;
		},
		get_button5: function() {
			return this.$button5;
		},
		get_buttons: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									$result = this.get_leftButton();
									$state = 1;
									return true;
								}
								case 1: {
									$state = -1;
									$result = this.get_middleButton();
									$state = 2;
									return true;
								}
								case 2: {
									$state = -1;
									$result = this.get_rightButton();
									$state = 3;
									return true;
								}
								case 3: {
									$state = -1;
									$result = this.get_button4();
									$state = 4;
									return true;
								}
								case 4: {
									$state = -1;
									$result = this.get_button5();
									$state = -1;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		buttonFromIndex: function(index) {
			switch (index) {
				default: {
					return null;
				}
				case 0: {
					return this.get_leftButton();
				}
				case 1: {
					return this.get_middleButton();
				}
				case 2: {
					return this.get_rightButton();
				}
				case 3: {
					return this.get_button4();
				}
				case 4: {
					return this.get_button5();
				}
			}
		},
		get_location: function() {
			return new Franca.Point.$ctor2(this.x, this.y);
		}
	});
	ss.initClass($Franca_MouseBind, $asm, {
		get_type: function() {
			return this.$type;
		},
		get_info: function() {
			return this.$info;
		},
		get_mode: function() {
			return this.$mode;
		},
		get_device: function() {
			return 1;
		},
		process: function(mouse, gameTime, mode, shift, control, alt, compositing) {
			this.process$1(this.button.state, this.button.lastState, mouse, gameTime, mode, shift, control, alt, compositing);
		},
		process$1: function(state, lastState, mouse, gameTime, mode, shift, control, alt, compositing) {
			if (this.$mode > -1 && mode !== this.$mode || this.shift !== shift || this.control !== control || this.alt !== alt) {
				return;
			}
			var call = false;
			if (this.$type === 1) {
				call = state === 1 && lastState === 0;
			}
			else if (this.$type === 0) {
				call = state === 0 && lastState === 1;
			}
			else if (this.$type === 2) {
				call = state === 1;
			}
			else if (this.$type === 3) {
				call = state === 0;
			}
			if (call) {
				var evt = new $Franca_InputEvent(gameTime, 1, this.$info, mode, mouse, shift, control, alt);
				evt.mouseBind = this;
				this.callback(evt);
			}
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_MouseBind);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).buttonType === this.buttonType && ss.unbox(b).$type === this.$type && ss.unbox(b).$info === this.$info && ss.unbox(b).$mode === this.$mode && ss.unbox(b).control === this.control && ss.unbox(b).alt === this.alt && ss.unbox(b).shift === this.shift;
		},
		equalsT: function(b) {
			return b.buttonType === this.buttonType && b.$type === this.$type && b.$info === this.$info && b.$mode === this.$mode && b.control === this.control && b.alt === this.alt && b.shift === this.shift;
		},
		getHashCode: function() {
			return ss.getHashCode(this.buttonType) ^ ss.getHashCode(this.$type) ^ ss.getHashCode(this.$mode);
		}
	}, null, [$Franca_IBind, ss.IEquatable]);
	$Franca_MouseBind.$ctor1.prototype = $Franca_MouseBind.prototype;
	$Franca_MouseBind.__class = false;
	ss.initClass($Franca_MouseButton, $asm, {
		toString: function() {
			return this.name;
		}
	});
	ss.initEnum($Franca_MouseButtons, $asm, { Left: 0, Middle: 1, Right: 2, Button4: 3, Button5: 4 });
	ss.initEnum($Franca_OpenGLDebugFrequency, $asm, { Interval: 0, EveryFrame: 1 });
	ss.initClass($Franca_OpenGLDebugOptions, $asm, {
		get_debug: function() {
			return this.$1$DebugField;
		},
		set_debug: function(value) {
			this.$1$DebugField = value;
		},
		get_frequency: function() {
			return this.$1$FrequencyField;
		},
		set_frequency: function(value) {
			this.$1$FrequencyField = value;
		},
		get_interval: function() {
			return this.$1$IntervalField;
		},
		set_interval: function(value) {
			this.$1$IntervalField = value;
		}
	});
	ss.initClass($Franca_OpenGLException, $asm, {}, ss.Exception);
	$Franca_OpenGLException.$ctor1.prototype = $Franca_OpenGLException.$ctor2.prototype = $Franca_OpenGLException.prototype;
	ss.initInterface($Franca_Gui_IFont, $asm, { getStrokeSize: null, draw: null, measure: null, measure$1: null, getFontMetrics$1: null, getFontMetrics: null, getGlyphMetrics$2: null, getGlyphMetrics: null, getKerning$2: null, getKerning: null, getGlyphMetrics$3: null, getGlyphMetrics$1: null, getKerning$3: null, getKerning$1: null, getChunks: null });
	ss.initClass($Franca_PixelFont, $asm, {
		get_$spriteBatch: function() {
			if (ss.isValue(this.$_batch)) {
				return this.$_batch;
			}
			this.$_batch = new $Franca_SpriteBatch($Franca_GraphicsDevice.get_current());
			return this.$_batch;
		},
		init: function(texture, json) {
			var xMin = 0, yMin = Franca.JsonValue.op_Implicit$3(json.get_item('descent')), yMax = Franca.JsonValue.op_Implicit$3(json.get_item('ascent')), xMax = 0;
			for (var i = 0; i < json.get_item('glyphs').get_count(); i++) {
				var glyph = json.get_item('glyphs').get_item$1(i);
				xMax = Math.max(xMax, Franca.JsonValue.op_Implicit$3(glyph.get_item('width')));
			}
			this.$fontMetrics = new $Franca_FontMetrics.$ctor3(Franca.JsonValue.op_Implicit$3(json.get_item('ascent')), Franca.JsonValue.op_Implicit$3(json.get_item('descent')), Franca.JsonValue.op_Implicit$3(json.get_item('linegap')), xMin, yMin, xMax, yMax);
			this.$glyphMetrics = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_GlyphMetrics]))();
			this.$glyphs = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_$PixelFont$Glyph]))();
			var x = 1;
			var y = 0;
			for (var i1 = 0; i1 < json.get_item('glyphs').get_count(); i1++) {
				var glyph1 = json.get_item('glyphs').get_item$1(i1);
				var chr = Franca.StringHelper.getCodePointAt(Franca.JsonValue.op_Implicit$k(glyph1.get_item('chr')), 0, false);
				var blank = false;
				if (glyph1.containsKey('blank')) {
					blank = Franca.JsonValue.op_Implicit$1(glyph1.get_item('blank'));
				}
				else if (chr === 32 || chr === 12288) {
					blank = true;
				}
				var ignoreColor = false;
				if (glyph1.containsKey('ignoreColor')) {
					ignoreColor = Franca.JsonValue.op_Implicit$1(glyph1.get_item('ignoreColor'));
				}
				var bearingX = 0;
				if (glyph1.containsKey('bearingX')) {
					bearingX = Franca.JsonValue.op_Implicit$3(glyph1.get_item('bearingX'));
				}
				var newRow = false;
				if (glyph1.containsKey('newRow')) {
					newRow = Franca.JsonValue.op_Implicit$1(glyph1.get_item('newRow'));
				}
				if (!blank && x + Franca.JsonValue.op_Implicit$3(glyph1.get_item('width')) >= texture.source.size.width || newRow) {
					x = 1;
					y += Math.round(this.$fontMetrics.get_height());
				}
				var metrics = new $Franca_GlyphMetrics.$ctor3(bearingX, this.$fontMetrics.get_ascent(), Franca.JsonValue.op_Addition$d(bearingX + Franca.JsonValue.op_Implicit$3(glyph1.get_item('width')), json.get_item('advance')), bearingX, this.$fontMetrics.get_descent(), Franca.JsonValue.op_Addition$d(bearingX, glyph1.get_item('width')), this.$fontMetrics.get_ascent());
				this.$glyphMetrics.set_item(chr, metrics);
				this.$glyphs.set_item(chr, new $Franca_$PixelFont$Glyph((blank ? null : new $Franca_SubTexture.$ctor1(texture, new Franca.Rectangle.$ctor3(Math.round(x), Math.round(y), Math.round(Franca.JsonValue.op_Implicit$3(glyph1.get_item('width'))), Math.round(this.$fontMetrics.get_height())))), metrics, ignoreColor));
				if (!blank) {
					x += Franca.JsonValue.op_Addition$4(glyph1.get_item('width'), 1);
				}
			}
			y += Math.round(this.$fontMetrics.get_height());
			if (json.containsKey('stroke')) {
				this.$strokeMetrics = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_GlyphMetrics]))();
				this.$strokes = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_$PixelFont$Glyph]))();
				x = 1;
				for (var i2 = 0; i2 < json.get_item('stroke').get_count(); i2++) {
					var glyph2 = json.get_item('stroke').get_item$1(i2);
					var chr1 = Franca.StringHelper.getCodePointAt(Franca.JsonValue.op_Implicit$k(glyph2.get_item('chr')), 0, false);
					var blank1 = false;
					if (glyph2.containsKey('blank')) {
						blank1 = Franca.JsonValue.op_Implicit$1(glyph2.get_item('blank'));
					}
					else if (chr1 === 32 || chr1 === 12288) {
						blank1 = true;
					}
					if (blank1) {
						continue;
					}
					var ignoreColor1 = false;
					if (glyph2.containsKey('ignoreColor')) {
						ignoreColor1 = Franca.JsonValue.op_Implicit$1(glyph2.get_item('ignoreColor'));
					}
					var glyphWidth = 0;
					var glyphAdvance = 0;
					if (this.$glyphs.containsKey(chr1)) {
						glyphWidth = this.$glyphs.get_item(chr1).$texture.source.size.width;
						glyphAdvance = this.$glyphs.get_item(chr1).$metrics.get_advanceWidth();
					}
					var bearingX1 = (glyphWidth - Franca.JsonValue.op_Implicit$3(glyph2.get_item('width'))) / 2;
					if (glyph2.containsKey('bearingX')) {
						bearingX1 = Franca.JsonValue.op_Implicit$3(glyph2.get_item('bearingX'));
					}
					var newRow1 = false;
					if (glyph2.containsKey('newRow')) {
						newRow1 = Franca.JsonValue.op_Implicit$1(glyph2.get_item('newRow'));
					}
					if (!blank1 && x + Franca.JsonValue.op_Implicit$3(glyph2.get_item('width')) >= texture.source.size.width || newRow1) {
						x = 1;
						y += Math.round(this.$fontMetrics.get_height());
					}
					var metrics1 = new $Franca_GlyphMetrics.$ctor3(bearingX1, this.$fontMetrics.get_ascent(), ((glyphAdvance === 0) ? (bearingX1 + glyphWidth + Franca.JsonValue.op_Implicit$3(json.get_item('advance'))) : glyphAdvance), bearingX1, this.$fontMetrics.get_descent(), Franca.JsonValue.op_Addition$d(bearingX1, glyph2.get_item('width')), this.$fontMetrics.get_ascent());
					this.$strokeMetrics.set_item(chr1, metrics1);
					this.$strokes.set_item(chr1, new $Franca_$PixelFont$Glyph((blank1 ? null : new $Franca_SubTexture.$ctor1(texture, new Franca.Rectangle.$ctor3(Math.round(x), Math.round(y), Math.round(Franca.JsonValue.op_Implicit$3(glyph2.get_item('width'))), Math.round(this.$fontMetrics.get_height())))), metrics1, ignoreColor1));
					if (!blank1) {
						x += Franca.JsonValue.op_Addition$4(glyph2.get_item('width'), 1);
					}
				}
			}
		},
		getStrokeSize: function(fontSize) {
			return 0;
		},
		$getGlyph: function(chr, stroke) {
			if (!stroke) {
				var glyph = {};
				if (!this.$glyphs.tryGetValue(chr, glyph)) {
					if (chr === 63) {
						return null;
					}
					else {
						return this.$getGlyph(63, stroke);
					}
				}
				return glyph.$;
			}
			else {
				var glyph1 = {};
				if (!this.$strokes.tryGetValue(chr, glyph1)) {
					if (this.$glyphs.containsKey(chr)) {
						this.$strokes.set_item(chr, new $Franca_$PixelFont$Glyph(null, this.$glyphs.get_item(chr).$metrics, false));
						return this.$strokes.get_item(chr);
					}
					else {
						return this.$getGlyph(63, true);
					}
				}
				return glyph1.$;
			}
		},
		draw$2: function(text, x, y, color, size, allowMarkup, visibleStartIndex, visibleEndIndex, stroke, strokeColor) {
			this.draw$1(text, new Franca.Vector2.$ctor3(x, y), color, size, allowMarkup, visibleStartIndex, visibleEndIndex, stroke, strokeColor);
		},
		draw$1: function(text, pos, color, size, allowMarkup, visibleStartIndex, visibleEndIndex, stroke, strokeColor) {
			var formatting = new Franca.Gui.Formatting(size, false, false, false, false, color);
			this.draw(text, 0, text.length, formatting, 1, pos.x, pos.y, Franca.HdrColor.get_white(), Franca.HdrColor.get_white(), stroke, Franca.Color.op_Implicit(strokeColor || color), Franca.Color.op_Implicit(strokeColor || color), null, null, allowMarkup, visibleStartIndex, visibleEndIndex);
		},
		drawInto: function(text, area, color, hAlign, vAlign, size, allowMarkup, visibleStartIndex, visibleEndIndex, wrapped, stroke, strokeColor) {
			var $t1 = new $Franca_Gui_ScreenString(this, size, text, true, 1, false, false, null);
			$t1.set_wrapped(wrapped);
			$t1.set_maxWidth(area.size.width);
			$t1.set_maxHeight(area.size.height);
			$t1.set_color(color);
			var str = $t1;
			str.set_allowMarkup(allowMarkup);
			str.wordWrap();
			var $t2 = new Franca.Vector2.$ctor3(area.location.x, area.location.y);
			var $t3 = Franca.HdrColor.get_white();
			var $t4 = new Franca.TextAlign(hAlign, vAlign);
			var $t5 = ((visibleEndIndex < 0) ? text.length : visibleEndIndex);
			str.draw($t2, $t3, stroke, Franca.Color.op_Implicit(strokeColor || color), null, null, $t4, visibleStartIndex, $t5);
		},
		drawAligned$1: function(text, x, y, color, hAlign, vAlign, size, allowMarkup, visibleStartIndex, visibleEndIndex, stroke, strokeColor) {
			this.drawAligned(text, new Franca.Vector2.$ctor3(x, y), color, hAlign, vAlign, size, allowMarkup, visibleStartIndex, visibleEndIndex, true, null);
		},
		drawAligned: function(text, pos, color, hAlign, vAlign, size, allowMarkup, visibleStartIndex, visibleEndIndex, stroke, strokeColor) {
			this.drawInto(text, new Franca.Rectangle.$ctor3(Math.round(pos.x), Math.round(pos.y), 0, 0), color, hAlign, vAlign, size, allowMarkup, visibleStartIndex, visibleEndIndex, false, true, null);
		},
		draw: function(text, index, length, formatting, scale, x, y, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, selection, selectionColor, allowMarkup, visibleStartIndex, visibleEndIndex) {
			// we don't use scale in pixel font
			scale = formatting.size;
			// no stroke either
			stroke = stroke && ss.isValue(this.$strokes) && this.$strokes.get_count() > 0;
			// force x and y to integer values
			x = Math.floor(x);
			y = Math.floor(y);
			if (visibleEndIndex < 0) {
				visibleEndIndex = index + length;
			}
			var batch = this.get_$spriteBatch();
			var batchBegun = false;
			var hasSelection = ss.isValue(selection) && selection.get_length() > 0 && selection.get_end() >= index && selection.get_start() < index + length && ss.isValue(selectionColor);
			var format = null;
			for (var pass = 0; pass < 3; pass++) {
				if (pass === 0 && !hasSelection) {
					continue;
				}
				else if (pass === 1 && !stroke) {
					continue;
				}
				if (pass === 0) {
					batch.begin(0, 3, 12, null);
				}
				else if (!batchBegun) {
					batchBegun = true;
					if (hasSelection) {
						batch.end();
					}
					this.beginBatch(batch, scale);
				}
				format = ((stroke || hasSelection) ? formatting.clone$1() : formatting);
				var maxMetrics = this.getFontMetrics(format, scale);
				var curMetrics = this.getFontMetrics(format, scale);
				var drawSelection = pass === 0;
				var drawStroke = pass === 1;
				var top = Franca.HdrColor.op_Multiply(Franca.Color.op_Implicit(format.color || Franca.Color.white), (drawStroke ? (strokeTopColor || Franca.Color.op_Implicit(Franca.Color.white)) : topColor));
				var bottom = Franca.HdrColor.op_Multiply(Franca.Color.op_Implicit(format.color || Franca.Color.white), (drawStroke ? (strokeBottomColor || Franca.Color.op_Implicit(Franca.Color.white)) : bottomColor));
				var startX = x;
				var curx = startX;
				var cury = y;
				var end = index + length;
				//for (int i = index; i < end; i++) {
				//    var chr = text[i];
				{
					var enumerator = Franca.StringHelper.codePoints(text, index, end, false).getEnumerator$1();
					try {
						while (enumerator.moveNext()) {
							var chr = enumerator.current();
							if (!Franca.Text.UnicodeExtensions.UintCharExtensions.isNonPrintableControl(chr)) {
								if (chr !== 10 && chr !== 13) {
									if (!drawSelection) {
										var glyph = this.$getGlyph(chr, drawStroke);
										if (ss.isNullOrUndefined(glyph)) {
											continue;
										}
										var advance = glyph.$metrics.get_advanceWidth() * scale;
										if (format.kerning && enumerator.get_next() > 0) {
											var kern = this.getKerning$1(chr, enumerator.get_next(), format, scale);
											if (kern !== 0) {
												advance += kern * scale;
											}
										}
										if (ss.isValue(glyph.$texture)) {
											var colors;
											if (top.a === 1 && bottom.a === 1) {
												colors = (glyph.$ignoreColor ? $Franca_PixelFont.$defaultColors : new $Franca_HdrColors.$ctor5(top, top, bottom, bottom));
											}
											else {
												colors = (glyph.$ignoreColor ? new $Franca_HdrColors.$ctor5(Franca.HdrColor.op_Multiply$1(Franca.HdrColor.get_white(), top.a), Franca.HdrColor.op_Multiply$1(Franca.HdrColor.get_white(), top.a), Franca.HdrColor.op_Multiply$1(Franca.HdrColor.get_white(), bottom.a), Franca.HdrColor.op_Multiply$1(Franca.HdrColor.get_white(), bottom.a)) : new $Franca_HdrColors.$ctor5(top, top, bottom, bottom));
											}
											var rect = new Franca.RectangleF.$ctor3(curx + glyph.$metrics.get_bearingX() * scale, cury - glyph.$metrics.get_bearingY() * scale, glyph.$texture.source.size.width * scale, glyph.$texture.source.size.height * scale);
											if (enumerator.get_index() >= visibleStartIndex && enumerator.get_index() < visibleEndIndex) {
												//batch.DrawGlyph(glyph, rect, glyphTop, glyphBottom, drawStroke);
												batch.draw(glyph.$texture, rect, colors, 0, 0);
											}
										}
										curx = curx + advance;
									}
									else {
										var glyph1 = this.getGlyphMetrics$1(chr, format, scale);
										var advance1 = glyph1.get_advanceWidth() * scale;
										if (format.kerning && enumerator.get_next() > 0) {
											var kern1 = this.getKerning$1(chr, enumerator.get_next(), format, scale);
											if (kern1 !== 0) {
												advance1 += kern1;
											}
										}
										if (enumerator.get_index() >= selection.get_start() && enumerator.get_index() < selection.get_end()) {
											var rect1 = new Franca.RectangleF.$ctor3(curx, cury - curMetrics.get_ascent(), advance1 * scale, curMetrics.get_linespace());
											if (enumerator.get_index() >= visibleStartIndex && enumerator.get_index() < visibleEndIndex) {
												batch.drawRectangle(rect1, $Franca_HdrColors.op_Implicit(ss.unbox(selectionColor)), 0);
											}
										}
										curx = curx + advance1;
									}
								}
								else {
									curx = startX;
									cury += maxMetrics.get_linespace();
									if (chr === 13 && enumerator.get_next() === 10) {
										enumerator.moveNext();
										// skip the newline in the \r\n sequence
									}
								}
							}
							else if (allowMarkup && chr === 6) {
								var markup = Franca.Text.Markup.read$1(text, enumerator.get_index());
								if (ss.isValue(markup) && !markup.get_isSize()) {
									format.applyMarkup(markup);
									var resetAll = markup.get_resetAll();
									if (markup.get_isColor() || resetAll) {
										top = Franca.HdrColor.op_Multiply(Franca.Color.op_Implicit(format.color || Franca.Color.white), (drawStroke ? (strokeTopColor || Franca.Color.op_Implicit(Franca.Color.white)) : topColor));
										bottom = Franca.HdrColor.op_Multiply(Franca.Color.op_Implicit(format.color || Franca.Color.white), (drawStroke ? (strokeBottomColor || Franca.Color.op_Implicit(Franca.Color.white)) : bottomColor));
									}
									//i += markup.Length - 1;
									enumerator.skip(markup.get_length() - 1);
								}
							}
						}
					}
					finally {
						if (ss.isValue(enumerator)) {
							enumerator.dispose();
						}
					}
				}
			}
			batch.end();
		},
		measure: function(text, formatting, scale, allowMarkup) {
			return this.measure$1(text, 0, text.length, formatting, scale, allowMarkup);
		},
		measure$1: function(text, index, length, formatting, scale, allowMarkup) {
			// we don't use scale in pixel font
			scale = 1;
			return Enumerable.from(this.getChunks(text, index, length, 4294967295, formatting, scale, allowMarkup)).firstOrDefault(null, ss.getDefaultValue($Franca_Gui_WordChunk)).size;
		},
		getFontMetrics$1: function(size, scale, bold, italic) {
			// we don't use scale in pixel font
			scale = 1;
			// integer size
			size = Math.round(size);
			return ((size === 1) ? this.$fontMetrics : new $Franca_FontMetrics.$ctor1(this.$fontMetrics, size));
		},
		getFontMetrics: function(formatting, scale) {
			return this.getFontMetrics$1(formatting.size, scale, formatting.bold, formatting.italic);
		},
		getGlyphMetrics$2: function(c, size, scale, bold, italic) {
			return this.getGlyphMetrics$3(c, size, scale, bold, italic);
		},
		getGlyphMetrics$3: function(c, size, scale, bold, italic) {
			// we don't use scale in pixel font
			scale = 1;
			// integer size
			size = Math.round(size);
			var metrics = {};
			if (c === 9) {
				metrics.$ = this.getGlyphMetrics$2(32, size, scale, bold, italic);
				return new $Franca_GlyphMetrics.$ctor3(metrics.$.get_bearingX(), metrics.$.get_bearingY(), metrics.$.get_advanceWidth() * 4 + metrics.$.get_bearingX() * 3, metrics.$.get_xMin(), metrics.$.get_yMin(), metrics.$.get_xMax(), metrics.$.get_yMax());
			}
			else {
				if (!this.$glyphMetrics.tryGetValue(c, metrics)) {
					if (c === 63) {
						return new $Franca_GlyphMetrics();
					}
					else {
						return this.getGlyphMetrics$2(63, size, scale, bold, italic);
					}
				}
				return ((size === 1) ? metrics.$ : new $Franca_GlyphMetrics.$ctor1(metrics.$, size));
			}
		},
		getGlyphMetrics: function(c, formatting, scale) {
			return this.getGlyphMetrics$3(c, formatting.size, scale, formatting.bold, formatting.italic);
		},
		getGlyphMetrics$1: function(c, formatting, scale) {
			return this.getGlyphMetrics$3(c, formatting.size, scale, formatting.bold, formatting.italic);
		},
		getKerning$2: function(left, right, size, scale, bold, italic) {
			return this.getKerning$3(left, right, size, scale, bold, italic);
		},
		getKerning$3: function(left, right, size, scale, bold, italic) {
			// we don't use scale in pixel font
			scale = 1;
			// what's a kerning?
			return 0;
		},
		getKerning: function(left, right, formatting, scale) {
			return this.getKerning$3(left, right, formatting.size, scale, formatting.bold, formatting.italic);
		},
		getKerning$1: function(left, right, formatting, scale) {
			return this.getKerning$3(left, right, formatting.size, scale, formatting.bold, formatting.italic);
		},
		getChunks: function(text, index, length, maxWidth, formatting, scale, allowMarkup) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(text, index, length, maxWidth, formatting, scale, allowMarkup) {
					var $result, $state = 0, end, metrics, width, lastChunk, enumerator, chr, glyph, advance, markup;
					var $finally = function() {
						if (ss.isValue(enumerator)) {
							enumerator.dispose();
						}
					};
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									// we don't use scale in pixel font
									scale = formatting.size;
									end = index + length;
									metrics = this.getFontMetrics(formatting, scale);
									width = 0;
									lastChunk = index;
									//for (int i = index; i < end; i++) {
									enumerator = Franca.StringHelper.codePoints(text, index, end, false).getEnumerator$1();
									$state = 4;
									continue $sm1;
								}
								case 4: {
									$state = 2;
									if (!enumerator.moveNext()) {
										$state = 3;
										continue $sm1;
									}
									chr = enumerator.current();
									if (!Franca.Text.UnicodeExtensions.UintCharExtensions.isNonPrintableControl(chr)) {
										glyph = this.getGlyphMetrics$1(chr, formatting, 1);
										advance = glyph.get_advanceWidth();
										if (formatting.kerning && enumerator.get_next() > 0) {
											advance += this.getKerning$1(chr, enumerator.get_next(), formatting, 1);
										}
										advance *= scale;
										if (width + advance >= maxWidth) {
											$result = new $Franca_Gui_WordChunk.$ctor1(new $Franca_Gui_WordSize.$ctor1(metrics.get_ascent(), metrics.get_descent(), metrics.get_linegap(), width), enumerator.get_index() - lastChunk);
											$state = 6;
											return true;
										}
										$state = 5;
										continue $sm1;
									}
									else {
										if (allowMarkup && chr === 6) {
											markup = Franca.Text.Markup.read$1(text, enumerator.get_index());
											if (ss.isValue(markup) && !markup.get_isSize()) {
												formatting.applyMarkup(markup);
												//if (markup.IsSize || markup.ResetAll) {
												//    metrics = CombineFontMetrics(metrics, GetFontMetrics(formatting, scale));
												//}
												enumerator.skip(markup.get_length() - 1);
												//i += markup.Length - 1;
											}
										}
										$state = 4;
										continue $sm1;
									}
								}
								case 3: {
									$state = -1;
									$finally.call(this);
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (end - lastChunk > 0) {
										$result = new $Franca_Gui_WordChunk.$ctor1(new $Franca_Gui_WordSize.$ctor1(metrics.get_ascent(), metrics.get_descent(), metrics.get_linegap(), width), end - lastChunk);
										$state = -1;
										return true;
									}
									$state = -1;
									break $sm1;
								}
								case 6: {
									$state = 2;
									width = 0;
									lastChunk = enumerator.get_index();
									$state = 5;
									continue $sm1;
								}
								case 5: {
									$state = 2;
									width += advance;
									$state = 4;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, function() {
						try {
							switch ($state) {
								case 2:
								case 3:
								case 4:
								case 5:
								case 6: {
									try {
										break;
									}
									finally {
										$finally.call(this);
									}
								}
							}
						}
						finally {
							$state = -1;
						}
					}, this);
				}).call(this, text, index, length, maxWidth, formatting, scale, allowMarkup);
			}, this);
		},
		beginBatch: function(batch, scale) {
			batch.begin(1, 12, 12, null);
		},
		get_ready: function() {
			return this.get_loaded();
		},
		get_loaded: function() {
			return this.$1$LoadedField;
		},
		set_loaded: function(value) {
			this.$1$LoadedField = value;
		},
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		load: function(content, file, name, args) {
			if (ss.isNullOrUndefined(args) || args.length === 0) {
				this.$load(content, file, '.png', name, true, false, true);
			}
			else if (args.length === 1) {
				this.$load(content, file, ss.cast(args[0], String), name, true, false, true);
			}
			else {
				this.$load(content, file, ss.cast(args[0], String), name, ss.unbox(ss.cast(args[1], Boolean)), ss.unbox(ss.cast(args[2], Boolean)), ss.unbox(ss.cast(args[3], Boolean)));
			}
		},
		$load: function(content, file, ext, name, premultiplyAlpha, mipmapped, disposeCanvas) {
			if (!ss.startsWithString(ext, '.')) {
				ext = '.' + ext;
			}
			var imageFile = file + ext;
			if (ss.startsWithString(imageFile, content.get_contentRoot()) && imageFile.length > content.get_contentRoot().length) {
				imageFile = imageFile.substring(content.get_contentRoot().length + 1);
			}
			this.set_name(name);
			this.$assetTexture = content.loadTexture(imageFile, premultiplyAlpha, mipmapped, disposeCanvas);
			this.$assetJson = $Franca_File.load($Franca_Text_TextFile).call(null, file + '.json', null, null);
		},
		finalizeContent: function() {
			if (this.$assetJson.get_loaded() && this.$assetTexture.get_loaded()) {
				this.init($Franca_SubTexture.op_Implicit(this.$assetTexture), Franca.Serialization.Json.parse(this.$assetJson.get_value().get_contents()));
				this.set_loaded(true);
				this.$assetTexture = null;
				this.$assetJson = null;
				var onLoad = this.$1$OnLoadField;
				if (!ss.staticEquals(onLoad, null)) {
					onLoad(this);
				}
			}
		}
	}, null, [$Franca_Gui_IFont, $Franca_IAsset]);
	$Franca_PixelFont.$ctor2.prototype = $Franca_PixelFont.$ctor1.prototype = $Franca_PixelFont.prototype;
	ss.initClass($Franca_RenderAttachments, $asm, {
		get_item: function(index) {
			return this.$attachments.get_item(index);
		},
		set_item: function(index, value) {
			if (index === 0) {
				throw new ss.ArgumentException('Cannot assign to RenderTarget attachment with index 0');
			}
			this.$attachments.set_item(index, value);
			this.$dirty = true;
		},
		getEnumerator: function() {
			var $result, $state = 0, $t1, k;
			var $finally = function() {
				$t1.dispose();
			};
			return new ss.IteratorBlockEnumerator(function() {
				$sm1:
				for (;;) {
					switch ($state) {
						case 0: {
							$state = -1;
							$t1 = Enumerable.from(this.$attachments.get_keys()).orderBy(function(key) {
								return key;
							}).getEnumerator();
							$state = 3;
							continue $sm1;
						}
						case 3: {
							$state = 1;
							if (!$t1.moveNext()) {
								$state = 2;
								continue $sm1;
							}
							k = $t1.current();
							$result = { key: k, value: this.$attachments.get_item(k) };
							$state = 3;
							return true;
						}
						case 2: {
							$state = -1;
							$finally.call(this);
							$state = -1;
							break $sm1;
						}
						default: {
							break $sm1;
						}
					}
				}
				return false;
			}, function() {
				return $result;
			}, function() {
				try {
					switch ($state) {
						case 1:
						case 2:
						case 3: {
							try {
								break;
							}
							finally {
								$finally.call(this);
							}
						}
					}
				}
				finally {
					$state = -1;
				}
			}, this);
		},
		getIndices: function() {
			if (this.$dirty) {
				this.$indices = Enumerable.from(this.$attachments.get_keys()).orderBy(function(i) {
					return i;
				}).toArray();
				this.$dirty = false;
			}
			return this.$indices;
		},
		get_count: function() {
			return this.$attachments.get_count();
		}
	}, null, [ss.IEnumerable, ss.IEnumerable]);
	ss.initClass($Franca_Texture, $asm, {
		loadFromData: function(width, height, data, srcDataFormat, glDataFormat, type) {
			if (this.renderTarget) {
				this.framebuffer = $Franca_OpenGL_WebGL_GL.createFramebuffer();
				$Franca_OpenGL_WebGL_GL.bindFramebuffer($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, this.framebuffer);
			}
			this.$width = width;
			this.$height = height;
			this.$isPowerOfTwo = Franca.Calc.isPowerOfTwo(width) && Franca.Calc.isPowerOfTwo(height);
			if (this.$mipmap && !this.$isPowerOfTwo) {
				throw new ss.ArgumentException('mipmapped', 'Cannot mipmap non-power of two textures.');
			}
			try {
				this.$glTexture = $Franca_OpenGL_WebGL_GL.createTexture();
				$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, this.$glTexture);
				if (ss.isInstanceOfType(data, Franca.Collections.ByteArray)) {
					$Franca_OpenGL_WebGL_GL.texImage2D$4(ss.Int32).call(null, $Franca_OpenGL_WebGL_Constants.texturE_2D, 0, glDataFormat, width, height, srcDataFormat, type, data);
				}
				else if (ss.isInstanceOfType(data, Franca.Collections.FloatArray)) {
					$Franca_OpenGL_WebGL_GL.texImage2D$4(Number).call(null, $Franca_OpenGL_WebGL_Constants.texturE_2D, 0, glDataFormat, width, height, srcDataFormat, type, data);
				}
				else if (ss.isNullOrUndefined(data)) {
					$Franca_OpenGL_WebGL_GL.texImage2D$3($Franca_OpenGL_WebGL_Constants.texturE_2D, 0, glDataFormat, width, height, srcDataFormat, type);
				}
				else {
					throw new ss.NotImplementedException();
				}
				//int[] parms = new int[1];
				//OpenTK.Graphics.OpenGL.GL.GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget.Texture2D, 0, OpenTK.Graphics.OpenGL.GetTextureParameter.TextureWidth, parms);
				//var actualWidth = parms[0];
				//OpenTK.Graphics.OpenGL.GL.GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget.Texture2D, 0, OpenTK.Graphics.OpenGL.GetTextureParameter.TextureHeight, parms);
				//var actualHeight = parms[0];
				//if (width != actualWidth || height != actualHeight) {
				//    Console.WriteLine("Width, Height was ({0}, {1}), ({2}, {3}) expected", actualWidth, actualHeight, width, height);
				//}
				if (this.renderTarget) {
					$Franca_OpenGL_WebGL_GL.framebufferTexture2D($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, $Franca_OpenGL_WebGL_Constants.coloR_ATTACHMENT0, $Franca_OpenGL_WebGL_Constants.texturE_2D, this.$glTexture, 0);
					if (this.depthPrecision !== -3) {
						if (this.depthPrecision === -1) {
							throw new ss.ArgumentException('24 bit per pixel depth precision is not supported on the current platform.');
						}
						else if (this.depthPrecision === -2) {
							throw new ss.ArgumentException('32 bit per pixel depth precision is not supported on the current platform.');
						}
						this.renderbuffer = $Franca_OpenGL_WebGL_GL.createRenderbuffer();
						$Franca_OpenGL_WebGL_GL.bindRenderbuffer($Franca_OpenGL_WebGL_Constants.RENDERBUFFER, this.renderbuffer);
						if (this.stencilBuffer) {
							// use DEPTH24_STENCIL8 here because while WebGL1 doesn't know it, we just redefine it there
							// to be DEPTH_STENCIL. desktop OpenGL takes DEPTH_STENCIL but ES3 and ANGLE both choke on
							// DEPTH_STENCIL and require DEPTH24_STENCIL8, jesus fuck
							$Franca_OpenGL_WebGL_GL.renderbufferStorage($Franca_OpenGL_WebGL_Constants.RENDERBUFFER, $Franca_OpenGL_WebGL_Constants.deptH24_STENCIL8, width, height);
							// turns out that the more robust way of doing things does, in fact, cause a webgl error:
							// CheckFramebufferStatus did not return FRAMEBUFFER_COMPLETE, instead returned
							// FRAMEBUFFER_INCOMPLETE_ATTACHMENT
							//
							// quoth flibit:
							// man fuck web people, not only is what i said correct, but what they cited in their error
							// message is literally the opposite of the spec
							// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus
							//
							// okay, so here are your unit tests:
							// - allocate a depth-stencil buffer. call FramebufferRenderbuffer with DEPTH_STENCIL_ATTACH.
							//   this is valid behavior
							// - allocate a depth-stencil buffer. call FramebufferRenderbuffer with DEPTH_ATTACH and
							//   STENCIL_ATTACH. this is also valid behavior but falsely claims the formats don't match.
							// - allocate a depth buffer and stencil buffer. call FramebufferRenderbuffer with
							//   DEPTH_ATTACH and STENCIL_ATTACH. this is not valid behavior and rightfuly should print
							//   an error, but contradicts the error in test 2
							//
							// the bug is that they need to make test 2 not error. that's the whole explanation, it's in
							// no way technical, it's just a ridiculous spec violation that anyone with experience should
							// know about
							//
							// end quoth
							//
							// so because i'm using a combined DEPTH_STENCIL as opposed to one (1) depth attachment and
							// one (1) stencil attachment, they made calling FramebufferRenderbuffer with DEPTH_ATTACHMENT
							// and STENCIL_ATTACHMENT and attaching to the same renderbuffer an error when it shouldnt be
							$Franca_OpenGL_WebGL_GL.framebufferRenderbuffer($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, $Franca_OpenGL_WebGL_Constants.deptH_STENCIL_ATTACHMENT, $Franca_OpenGL_WebGL_Constants.RENDERBUFFER, this.renderbuffer);
						}
						else {
							$Franca_OpenGL_WebGL_GL.renderbufferStorage($Franca_OpenGL_WebGL_Constants.RENDERBUFFER, this.depthPrecision, width, height);
							$Franca_OpenGL_WebGL_GL.framebufferRenderbuffer($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, $Franca_OpenGL_WebGL_Constants.deptH_ATTACHMENT, $Franca_OpenGL_WebGL_Constants.RENDERBUFFER, this.renderbuffer);
						}
					}
					var fbStatus = $Franca_OpenGL_WebGL_GL.checkFramebufferStatus($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER);
					this.$canRead = fbStatus === $Franca_OpenGL_WebGL_Constants.framebuffeR_COMPLETE;
					if (!this.$canRead) {
						var constName;
						switch (fbStatus) {
							case 36054: {
								constName = 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';
								break;
							}
							case 36057: {
								constName = 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';
								break;
							}
							case 36055: {
								constName = 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';
								break;
							}
							case 36061: {
								constName = 'FRAMEBUFFER_UNSUPPORTED';
								break;
							}
							default: {
								constName = ss.formatString('an unknown constant ({0})', System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, fbStatus));
								break;
							}
						}
						throw new $Franca_OpenGLException.$ctor1('CheckFramebufferStatus did not return FRAMEBUFFER_COMPLETE, instead returned ' + constName);
					}
				}
				if (this.$mipmap) {
					$Franca_OpenGL_WebGL_GL.generateMipmap($Franca_OpenGL_WebGL_Constants.texturE_2D);
				}
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, null);
				if (this.renderTarget) {
					$Franca_GraphicsDevice.get_current().clear$2(Franca.Color.transparentBlack);
					$Franca_OpenGL_WebGL_GL.bindRenderbuffer($Franca_OpenGL_WebGL_Constants.RENDERBUFFER, null);
					$Franca_OpenGL_WebGL_GL.bindFramebuffer($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, null);
				}
			}
			catch ($t1) {
				$Franca_OpenGL_WebGL_GL.deleteTexture(this.$glTexture);
				if (this.renderTarget) {
					$Franca_OpenGL_WebGL_GL.deleteFramebuffer(this.framebuffer);
					$Franca_OpenGL_WebGL_GL.deleteRenderbuffer(this.renderbuffer);
				}
				throw $t1;
			}
		},
		loadFromCanvas: function(disposeCanvas) {
			if (ss.isNullOrUndefined(this.$canvas)) {
				throw new ss.ArgumentNullException('image', 'Cannot create a Texture from a null Canvas.');
			}
			this.$width = this.$canvas.get_width();
			this.$height = this.$canvas.get_height();
			this.$isPowerOfTwo = Franca.Calc.isPowerOfTwo(this.$width) && Franca.Calc.isPowerOfTwo(this.$height);
			if (this.$mipmap && !this.$isPowerOfTwo) {
				throw new ss.ArgumentException('mipmapped', 'Cannot mipmap non-power of two textures.');
			}
			try {
				this.$glTexture = $Franca_OpenGL_WebGL_GL.createTexture();
				$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, this.$glTexture);
				$Franca_OpenGL_WebGL_GL.texImage2D$1($Franca_OpenGL_WebGL_Constants.texturE_2D, 0, $Franca_OpenGL_WebGL_Constants.RGBA, this.$canvas, this.$premultiplyAlpha);
				if (this.$mipmap) {
					$Franca_OpenGL_WebGL_GL.generateMipmap($Franca_OpenGL_WebGL_Constants.texturE_2D);
				}
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, null);
			}
			catch ($t1) {
				$Franca_OpenGL_WebGL_GL.deleteTexture(this.$glTexture);
				throw $t1;
			}
			if (disposeCanvas) {
				this.$canvas.dispose();
				this.$canvas = null;
			}
		},
		updateRegion: function(rect) {
			if (ss.isNullOrUndefined(this.$canvas)) {
				throw new ss.InvalidOperationException('Cannot update region for textures that have a disposed internal Canvas without providing a canvas argument');
			}
			rect = (ss.isValue(rect) ? rect : new Franca.Rectangle.$ctor3(0, 0, this.$width, this.$height));
			this.updateRegion$3(this.$canvas, ss.unbox(rect), ss.unbox(rect).location);
		},
		updateRegion$2: function(srcRect, destLoc) {
			if (ss.isNullOrUndefined(this.$canvas)) {
				throw new ss.InvalidOperationException('Cannot update region for textures that have a disposed internal Canvas without providing a canvas argument');
			}
			this.updateRegion$3(this.$canvas, srcRect, destLoc);
		},
		updateRegion$1: function(canvas, rect) {
			rect = (ss.isValue(rect) ? rect : new Franca.Rectangle.$ctor3(0, 0, this.$width, this.$height));
			this.updateRegion$3(canvas, ss.unbox(rect), ss.unbox(rect).location);
		},
		updateRegion$3: function(canvas, sourceRect, destLoc) {
			if (this.get_isRenderTarget()) {
				throw new ss.NotImplementedException('Cannot call Texture.UpdateRegion on RenderTarget texture');
			}
			if (ss.isNullOrUndefined(canvas)) {
				throw new ss.ArgumentNullException('canvas');
			}
			if (sourceRect.location.x < 0 || sourceRect.location.y < 0 || sourceRect.location.x + sourceRect.size.width > canvas.get_width() || sourceRect.location.y + sourceRect.size.height > canvas.get_height()) {
				throw new ss.ArgumentException('Source rectangle passed to Texture.UpdateRegion extended beyond canvas bounds');
			}
			var destRect = new Franca.Rectangle.$ctor2(destLoc, sourceRect.size);
			if (destRect.location.x < 0 || destRect.location.y < 0 || destRect.location.x + destRect.size.width > this.get_width() || destRect.location.y + destRect.size.height > this.get_height()) {
				throw new ss.ArgumentException('Destination rectangle passed to Texture.UpdateRegion extended beyond texture bounds');
			}
			var isInternalCanvas = ss.referenceEquals(canvas, this.$canvas);
			var sourcePixels = canvas.getPixelData$1(sourceRect);
			if (ss.isValue(this.$canvas) && !isInternalCanvas) {
				// update our internal canvas
				sourcePixels.setPixelData$1(this.$canvas, destRect.location);
			}
			try {
				$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, this.$glTexture);
				$Franca_OpenGL_WebGL_GL.texSubImage2D$2($Franca_OpenGL_WebGL_Constants.texturE_2D, 0, destRect.location.x, destRect.location.y, sourcePixels, this.$premultiplyAlpha);
				if (this.$mipmap) {
					$Franca_OpenGL_WebGL_GL.generateMipmap($Franca_OpenGL_WebGL_Constants.texturE_2D);
				}
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, null);
			}
			catch ($t1) {
				$Franca_OpenGL_WebGL_GL.deleteTexture(this.$glTexture);
				throw $t1;
			}
		},
		getPixelData: function(rect) {
			if (ss.isNullOrUndefined(this.$canvas)) {
				if (this.get_isRenderTarget()) {
					throw new ss.NotImplementedException('GetPixelData is not implemented for render textures');
				}
				else {
					throw new ss.InvalidOperationException('Could not GetPixelData on Texture with null Canvas (did you forget to set disposeCanvas to false?)');
				}
			}
			if (!ss.isValue(rect)) {
				rect = new Franca.Rectangle.$ctor3(0, 0, this.get_width(), this.get_height());
			}
			return this.$canvas.getPixelData$1(ss.unbox(rect));
		},
		get_ready: function() {
			return this.get_loaded();
		},
		get_loaded: function() {
			return this.$1$LoadedField;
		},
		set_loaded: function(value) {
			this.$1$LoadedField = value;
		},
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		load: function(content, file, name, args) {
			this.$load(file, name, ss.unbox(ss.cast(args[0], Boolean)), ss.unbox(ss.cast(args[1], Boolean)), ss.unbox(ss.cast(args[2], Boolean)));
		},
		$load: function(file, name, premultiplyAlpha, mipmapped, disposeCanvas) {
			this.$premultiplyAlpha = premultiplyAlpha;
			this.$mipmap = mipmapped;
			this.$disposeLoadedCanvas = disposeCanvas;
			this.set_name(name);
			if (ss.endsWithString(System.StringExtensions.toLowerInvariant(file), '.tga')) {
				this.$binaryRes = $Franca_File.load(Franca.BinaryData).call(null, file, null, null);
			}
			else {
				this.$fileRes = $Franca_File.load($Franca_Canvas).call(null, file, null, null);
			}
		},
		finalizeContent: function() {
			if (ss.isValue(this.$fileRes)) {
				if (this.$fileRes.get_loaded() && !this.get_loaded()) {
					this.$canvas = this.$fileRes.get_value();
					this.loadFromCanvas(this.$disposeLoadedCanvas);
					this.set_loaded(true);
					this.$fileRes = null;
					var onLoad = this.$1$OnLoadField;
					if (!ss.staticEquals(onLoad, null)) {
						onLoad(this);
					}
				}
			}
			else if (ss.isValue(this.$binaryRes)) {
				if (this.$binaryRes.get_loaded() && !this.get_loaded()) {
					var binary = this.$binaryRes.get_value();
					var data = $Franca_Targa_TargaImage.fromData(binary);
					if (this.$premultiplyAlpha) {
						// if we have to premultiply the alpha we're basically transforming the
						// source data anyway, so we might as well use an intermediate canvas
						this.$canvas = new $Franca_Canvas.$ctor1(data);
						this.loadFromCanvas(true);
					}
					else {
						this.loadFromData(data.width, data.height, data.toByteArray(), 6408, 6408, 5121);
					}
					this.set_loaded(true);
					this.$binaryRes = null;
					var onLoad1 = this.$1$OnLoadField;
					if (!ss.staticEquals(onLoad1, null)) {
						onLoad1(this);
					}
				}
			}
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				// Free GL resources here to prevent destructor from calling this
				$Franca_OpenGL_WebGL_GL.deleteTexture(this.$glTexture);
				if (this.renderTarget) {
					$Franca_OpenGL_WebGL_GL.deleteFramebuffer(this.framebuffer);
					$Franca_OpenGL_WebGL_GL.deleteRenderbuffer(this.renderbuffer);
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_image: function() {
			return this.$canvas;
		},
		get_premultipliedAlpha: function() {
			return this.$premultiplyAlpha;
		},
		get_mipmapped: function() {
			return this.$mipmap;
		},
		get_isPowerOfTwo: function() {
			return this.$isPowerOfTwo;
		},
		get_isRenderTarget: function() {
			return this.renderTarget;
		},
		get_width: function() {
			return this.$width;
		},
		get_height: function() {
			return this.$height;
		},
		get_canRead: function() {
			return this.$canRead;
		},
		get_$glTexture: function() {
			return this.$glTexture;
		}
	}, null, [$Franca_IAsset, ss.IDisposable]);
	$Franca_Texture.$ctor8.prototype = $Franca_Texture.$ctor7.prototype = $Franca_Texture.$ctor2.prototype = $Franca_Texture.$ctor4.prototype = $Franca_Texture.$ctor5.prototype = $Franca_Texture.$ctor3.prototype = $Franca_Texture.$ctor1.prototype = $Franca_Texture.$ctor6.prototype = $Franca_Texture.prototype;
	ss.initClass($Franca_RenderAttachmentTexture, $asm, {}, $Franca_Texture, [$Franca_IAsset, ss.IDisposable]);
	$Franca_RenderAttachmentTexture.$ctor1.prototype = $Franca_RenderAttachmentTexture.prototype;
	ss.initClass($Franca_RenderTarget, $asm, {
		setAttachment: function(index, texture, filter) {
			if (index < 0 || index > 15) {
				throw new ss.ArgumentOutOfRangeException('RenderTarget attachment indices range from 0 through 15');
			}
			this.attachments.set_item(index, texture);
			$Franca_OpenGL_WebGL_GL.bindFramebuffer($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, this.framebuffer);
			$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_Texture.op_Implicit(texture));
			var glFilter;
			switch (filter) {
				case 3: {
					glFilter = $Franca_OpenGL_WebGL_Constants.LINEAR;
					break;
				}
				default:
				case 12: {
					glFilter = $Franca_OpenGL_WebGL_Constants.NEAREST;
					break;
				}
			}
			$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_MIN_FILTER, glFilter);
			$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_MAG_FILTER, glFilter);
			$Franca_OpenGL_WebGL_GL.framebufferTexture2D($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, $Franca_OpenGL_WebGL_Constants.coloR_ATTACHMENT0 + index, $Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_Texture.op_Implicit(texture), 0);
			$Franca_OpenGL_WebGL_GL.drawBuffers(this.attachments.getIndices());
			$Franca_OpenGL_WebGL_GL.throwErrors(false);
			$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, null);
			$Franca_OpenGL_WebGL_GL.bindFramebuffer($Franca_OpenGL_WebGL_Constants.FRAMEBUFFER, null);
		},
		dispose$1: function(disposing) {
			if (this.$disposed$1) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				var $t1 = this.attachments.getEnumerator();
				try {
					while ($t1.moveNext()) {
						var kvp = $t1.current();
						if (kvp.key !== 0) {
							kvp.value.dispose();
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed$1 = true;
			$Franca_Texture.prototype.dispose$1.call(this, disposing);
		},
		get_framebuffer: function() {
			return this.framebuffer;
		},
		get_renderbuffer: function() {
			return this.renderbuffer;
		},
		get_stencilBuffer: function() {
			return this.stencilBuffer;
		},
		get_depthType: function() {
			return this.depthPrecision;
		}
	}, $Franca_Texture, [$Franca_IAsset, ss.IDisposable]);
	$Franca_RenderTarget.$ctor1.prototype = $Franca_RenderTarget.$ctor3.prototype = $Franca_RenderTarget.$ctor2.prototype = $Franca_RenderTarget.prototype;
	ss.initClass($Franca_RenderTargetState, $asm, {
		restore: function() {
			if (this.get_$restored()) {
				return;
			}
			this._b_restored = true;
			if (ss.isNullOrUndefined(this.$graphicsDevice)) {
				// null if this is a default RenderTargetState instance
				return;
			}
			this.$graphicsDevice.setRenderTarget(this.$renderTarget);
			this.$graphicsDevice.set_viewport(this.$viewport);
		},
		dispose: function() {
			this.restore();
		},
		get_$restored: function() {
			return this.$_b_restored;
		},
		get_device: function() {
			return this.$graphicsDevice;
		},
		get_renderTarget: function() {
			return this.$renderTarget;
		},
		get_viewport: function() {
			return this.$viewport;
		},
		getHashCode: function() {
			var h = (this.$renderTarget ? ss.getHashCode(this.$renderTarget) : 0);
			h = h * 397 ^ ss.getHashCode(this.$viewport);
			h = h * 397 ^ (this.$graphicsDevice ? ss.getHashCode(this.$graphicsDevice) : 0);
			h = h * 397 ^ (this.$_b_restored ? 1 : 0);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_RenderTargetState)) {
				return false;
			}
			return ss.equals(this.$renderTarget, o.$renderTarget) && ss.equals(this.$viewport, o.$viewport) && ss.equals(this.$graphicsDevice, o.$graphicsDevice) && this.$_b_restored === o.$_b_restored;
		}
	}, null, [ss.IDisposable]);
	$Franca_RenderTargetState.$ctor1.prototype = $Franca_RenderTargetState.prototype;
	$Franca_RenderTargetState.__class = false;
	ss.initClass($Franca_Resolution, $asm, {
		toString: function() {
			if (this.refreshRate > 0 && this.bitsPerPixel > 0) {
				return ss.formatString('{0}x{1}:{2} ({3} bit)', this.width, this.height, this.refreshRate, this.bitsPerPixel);
			}
			else if (this.refreshRate > 0) {
				return ss.formatString('{0}x{1}:{2}', this.width, this.height, this.refreshRate);
			}
			else if (this.bitsPerPixel > 0) {
				return ss.formatString('{0}x{1} ({2} bit)', this.width, this.height, this.bitsPerPixel);
			}
			else {
				return ss.formatString('{0}x{1}', this.width, this.height);
			}
		},
		fromJson: function(json) {
			return new $Franca_Resolution.$ctor2(Franca.JsonValue.op_Implicit$5(json.get_item('width')), Franca.JsonValue.op_Implicit$5(json.get_item('height')), Franca.JsonValue.op_Implicit$j(json.get_item('refreshRate')), Franca.JsonValue.op_Implicit$5(json.get_item('bitsPerPixel')));
		},
		toJson: function() {
			var json = new Franca.JObject();
			json.set_item('width', Franca.JsonValue.op_Implicit$s(this.width));
			json.set_item('height', Franca.JsonValue.op_Implicit$s(this.height));
			json.set_item('refreshRate', Franca.JsonValue.op_Implicit$q(this.refreshRate));
			json.set_item('bitsPerPixel', Franca.JsonValue.op_Implicit$s(this.bitsPerPixel));
			return json;
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.write$4(this.width >> 0, 'width');
				writer.write$4(this.height >> 0, 'height');
				writer.write$6(this.refreshRate, 'refreshRate');
				writer.write$1(this.bitsPerPixel & 255, 'bitsPerPixel');
			}
			finally {
				$t1.dispose();
			}
		},
		getHashCode: function() {
			var h = this.width;
			h = h * 397 ^ this.height;
			h = h * 397 ^ this.refreshRate;
			h = h * 397 ^ this.bitsPerPixel;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Resolution)) {
				return false;
			}
			return this.width === o.width && this.height === o.height && this.refreshRate === o.refreshRate && this.bitsPerPixel === o.bitsPerPixel;
		}
	}, null, [Franca.IMappable, ss.makeGenericType(Franca.IMappable$1, [$Franca_Resolution]), Franca.Serialization.Streaming.IJsonStreamWriter]);
	$Franca_Resolution.$ctor2.prototype = $Franca_Resolution.$ctor1.prototype = $Franca_Resolution.prototype;
	$Franca_Resolution.__class = false;
	ss.initEnum($Franca_ScreenState, $asm, { windowed: 0, fullscreen: 1, exclusiveFullscreen: 1, fullscreenDesktop: 1, borderless: 2 });
	ss.initClass($Franca_ShaderInclude, $asm, {
		get_code: function() {
			return this.$1$CodeField;
		},
		set_code: function(value) {
			this.$1$CodeField = value;
		},
		get_fullPath: function() {
			return this.$1$FullPathField;
		},
		set_fullPath: function(value) {
			this.$1$FullPathField = value;
		},
		get_filename: function() {
			return this.$1$FilenameField;
		},
		set_filename: function(value) {
			this.$1$FilenameField = value;
		},
		get_ready: function() {
			return this.get_loaded();
		},
		get_loaded: function() {
			return this.$loaded;
		},
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		setLoaded: function(value) {
			this.$loaded = value;
		},
		load: function(content, file, name, args) {
			this.content = content;
			this.set_filename(file);
			this.set_name(name);
			this.fileRes = $Franca_File.load($Franca_Text_TextFile).call(null, file, null, null);
		},
		finalizeContent: function() {
			if (ss.isNullOrUndefined(this.fileRes) && this.$loaded) {
				return;
			}
			if (this.fileRes.get_loaded() && !this.$loaded) {
				this.set_code($Franca_Text_TextFile.op_Implicit(this.fileRes.get_value()));
				if (ss.isNullOrUndefined(this.$includes)) {
					var root = Franca.Platform.combinePaths$2(Franca.Platform.get_appContentPath(), this.content.get_contentRoot()) + Franca.Platform.get_pathSeparator();
					this.$includes = [];
					var includeFiles = $Franca_Shader.getIncludes($Franca_Text_TextFile.op_Implicit(this.fileRes.get_value()), this.fileRes.get_location());
					if (includeFiles.length > 0) {
						for (var $t1 = 0; $t1 < includeFiles.length; $t1++) {
							var f = includeFiles[$t1];
							if (!ss.startsWithString(System.StringExtensions.toLowerInvariant(f), System.StringExtensions.toLowerInvariant(root))) {
								throw new $Franca_FileLoadException.$ctor1(ss.formatString("Couldn't load shader include '{0}', path was outside content root '{1}'.", f, root));
							}
							var relFile = f.substring(root.length);
							var include = this.content.load($Franca_ShaderInclude).call(this.content, relFile, []);
							include.set_fullPath(f);
							this.$includes.push(include);
						}
						this.finalizeContent();
						return;
					}
				}
				var done = true;
				for (var $t2 = 0; $t2 < this.$includes.length; $t2++) {
					var incl = this.$includes[$t2];
					if (!incl.get_loaded()) {
						// try to see if it's done
						incl.finalizeContent();
						if (!incl.get_loaded()) {
							done = false;
							break;
						}
					}
				}
				if (!done) {
					return;
				}
				this.$loaded = true;
				this.fileRes = null;
				this.content = null;
				var onLoad = this.$1$OnLoadField;
				if (!ss.staticEquals(onLoad, null)) {
					onLoad(this);
				}
			}
		},
		get_includes: function() {
			return this.$includes;
		},
		set_includes: function(value) {
			this.$includes = value;
		}
	}, null, [$Franca_IAsset]);
	$Franca_ShaderInclude.$ctor1.prototype = $Franca_ShaderInclude.prototype;
	ss.initClass($Franca_Shader, $asm, {
		get_defines: function() {
			return this.$defines;
		},
		get_source: function() {
			return this.$2$SourceField;
		},
		set_source: function(value) {
			this.$2$SourceField = value;
		},
		recompile: function(defines) {
			if (!this.get_loaded()) {
				if (ss.isNullOrUndefined(this.$recompilationRequests)) {
					this.$recompilationRequests = [];
				}
				var shader = new $Franca_Shader();
				shader.setLoaded(false);
				var self = this;
				this.$recompilationRequests.push(ss.mkdel(this, function() {
					if (System.StringExtensions.isNullOrEmpty(this.get_source(), false)) {
						throw new $Franca_ShaderException.$ctor1('Could not recompile shader: source was null or empty');
					}
					$Franca_Shader.compileInto$1(this.content, self.get_source(), this.$shaderType, shader, this.$sourceFile, self.get_includes(), defines);
				}));
				return shader;
			}
			if (System.StringExtensions.isNullOrEmpty(this.get_source(), false)) {
				throw new $Franca_ShaderException.$ctor1('Could not recompile shader: source was null or empty');
			}
			return $Franca_Shader.compile$2(this.content, this.get_source(), this.$shaderType, this.$sourceFile, this.get_includes(), defines);
		},
		definesEqual: function(defs) {
			if (ss.isNullOrUndefined(this.$defines)) {
				if (ss.isValue(defs) && defs.length > 0) {
					return false;
				}
				else {
					return true;
				}
			}
			if (ss.isNullOrUndefined(defs)) {
				if (ss.isValue(this.$defines) && this.$defines.length > 0) {
					return false;
				}
				else {
					return true;
				}
			}
			for (var $t1 = 0; $t1 < defs.length; $t1++) {
				var d = defs[$t1];
				if (!ss.contains(this.$defines, d)) {
					return false;
				}
			}
			for (var $t2 = 0; $t2 < this.$defines.length; $t2++) {
				var d1 = this.$defines[$t2];
				if (!ss.contains(this.$defines, d1)) {
					return false;
				}
			}
			return true;
		},
		add_onLoad: function(value) {
			this.$2$OnLoadField = ss.delegateCombine(this.$2$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$2$OnLoadField = ss.delegateRemove(this.$2$OnLoadField, value);
		},
		setLoaded: function(value) {
			$Franca_ShaderInclude.prototype.setLoaded.call(this, value);
			this.$loaded$1 = value;
		},
		get_loaded: function() {
			return $Franca_ShaderInclude.prototype.get_loaded.call(this) && this.$loaded$1;
		},
		load: function(content, file, name, args) {
			this.$sourceFile = file;
			if (ss.isValue(args) && args.length > 0 && ss.isValue(args)) {
				this.$defines = args;
			}
			this.content = content;
			switch (System.StringExtensions.toLowerInvariant(Franca.Platform.getExtension(file))) {
				case 'vert': {
					this.$shaderType = 35633;
					break;
				}
				default:
				case 'frag': {
					this.$shaderType = 35632;
					break;
				}
				case 'geom': {
					this.$shaderType = 0;
					break;
				}
			}
			this.set_name(name);
			this.fileRes = $Franca_File.load($Franca_Text_TextFile).call(null, file, null, null);
		},
		finalizeContent: function() {
			var fRes = this.fileRes;
			$Franca_ShaderInclude.prototype.finalizeContent.call(this);
			this.fileRes = fRes;
			if (ss.isNullOrUndefined(this.fileRes) && this.$loaded$1) {
				return;
			}
			if (this.fileRes.get_loaded() && !this.$loaded$1) {
				if (!$Franca_ShaderInclude.prototype.get_loaded.call(this)) {
					return;
				}
				$Franca_Shader.compileInto$1(this.content, $Franca_Text_TextFile.op_Implicit(this.fileRes.get_value()), this.$shaderType, this, this.$sourceFile, this.get_includes(), this.$defines);
				if (ss.isValue(this.$recompilationRequests)) {
					for (var $t1 = 0; $t1 < this.$recompilationRequests.length; $t1++) {
						var f = this.$recompilationRequests[$t1];
						f();
					}
					this.$recompilationRequests = null;
				}
				this.$loaded$1 = true;
				this.fileRes = null;
				this.content = null;
				var onLoad = this.$2$OnLoadField;
				if (!ss.staticEquals(onLoad, null)) {
					onLoad(this);
				}
			}
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				// Free GL resources here so finalizer doesn't do it.
				$Franca_OpenGL_WebGL_GL.deleteShader(this.$glShader);
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_glShader: function() {
			return this.$glShader;
		},
		get_attributes: function() {
			return this.$attributes;
		},
		get_uniforms: function() {
			return this.$uniforms;
		}
	}, $Franca_ShaderInclude, [$Franca_IAsset, ss.IDisposable]);
	$Franca_Shader.$ctor1.prototype = $Franca_Shader.prototype;
	ss.initClass($Franca_ShaderException, $asm, {}, ss.Exception);
	$Franca_ShaderException.$ctor1.prototype = $Franca_ShaderException.$ctor2.prototype = $Franca_ShaderException.prototype;
	ss.initClass($Franca_ShaderParamCollection, $asm, {
		setValue$7: function(obj) {
			if (ss.isInstanceOfType(obj, Number)) {
				this.setValue$8(ss.unbox(ss.cast(obj, Number)));
			}
			else if (ss.isInstanceOfType(obj, Number)) {
				this.setValue$8(ss.unbox(ss.cast(obj, Number)));
			}
			else if (ss.isInstanceOfType(obj, Franca.Vector2)) {
				this.setValue$2(ss.unbox(ss.cast(obj, Franca.Vector2)));
			}
			else if (ss.isInstanceOfType(obj, Franca.Vector3)) {
				this.setValue$3(ss.unbox(ss.cast(obj, Franca.Vector3)));
			}
			else if (ss.isInstanceOfType(obj, Franca.Vector4)) {
				this.setValue$4(ss.unbox(ss.cast(obj, Franca.Vector4)));
			}
			else if (ss.isInstanceOfType(obj, $Franca_DrawBucketing_Sampler)) {
				this.setValue(ss.unbox(ss.cast(obj, $Franca_DrawBucketing_Sampler)));
			}
			else if (ss.isInstanceOfType(obj, Franca.Matrix4)) {
				this.setValue$1(ss.unbox(ss.cast(obj, Franca.Matrix4)));
			}
			else if (ss.isInstanceOfType(obj, Boolean)) {
				this.setValue$5(ss.unbox(ss.cast(obj, Boolean)));
			}
			else {
				throw new ss.NotImplementedException('Cannot determine SetValue call for object value of type ' + ss.getInstanceType(obj));
			}
		},
		setMatrix4: function(value) {
			this.$cachedValue = value;
			for (var $t1 = 0; $t1 < this.$parameters.length; $t1++) {
				var p = this.$parameters[$t1];
				p.setValue$1(value);
			}
		},
		setValue$1: function(value) {
			this.$cachedValue = value;
			for (var $t1 = 0; $t1 < this.$parameters.length; $t1++) {
				var p = this.$parameters[$t1];
				p.setValue$1(value);
			}
		},
		getMatrix4: function() {
			var $t1 = this.$cachedValue;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = ss.getDefaultValue(Franca.Matrix4);
			}
			return ss.unbox(ss.cast($t1, Franca.Matrix4));
		},
		setSampler: function(value) {
			this.$cachedValue = value;
			for (var $t1 = 0; $t1 < this.$parameters.length; $t1++) {
				var p = this.$parameters[$t1];
				p.setSampler(value);
			}
		},
		getSampler2D: function() {
			return ss.unbox(ss.cast(ss.coalesce(this.$cachedValue, 0), ss.Int32));
		},
		getSampler: function() {
			return ss.unbox(ss.cast(ss.coalesce(this.$cachedValue, 0), ss.Int32));
		},
		setValue$6: function(value) {
			this.setValue$8(value);
		},
		setValue$8: function(value) {
			this.$cachedValue = value;
			for (var $t1 = 0; $t1 < this.$parameters.length; $t1++) {
				var p = this.$parameters[$t1];
				p.setValue$7(value);
			}
		},
		getFloat: function() {
			return ss.unbox(ss.cast(ss.coalesce(this.$cachedValue, 0), Number));
		},
		setValue$2: function(value) {
			this.$cachedValue = value;
			for (var $t1 = 0; $t1 < this.$parameters.length; $t1++) {
				var p = this.$parameters[$t1];
				p.setValue$2(value);
			}
		},
		getVector2: function() {
			var $t1 = this.$cachedValue;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = ss.getDefaultValue(Franca.Vector2);
			}
			return ss.unbox(ss.cast($t1, Franca.Vector2));
		},
		setValue$3: function(value) {
			this.$cachedValue = value;
			for (var $t1 = 0; $t1 < this.$parameters.length; $t1++) {
				var p = this.$parameters[$t1];
				p.setValue$3(value);
			}
		},
		getVector3: function() {
			var $t1 = this.$cachedValue;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = ss.getDefaultValue(Franca.Vector3);
			}
			return ss.unbox(ss.cast($t1, Franca.Vector3));
		},
		setValue$4: function(value) {
			this.$cachedValue = value;
			for (var $t1 = 0; $t1 < this.$parameters.length; $t1++) {
				var p = this.$parameters[$t1];
				p.setValue$4(value);
			}
		},
		getVector4: function() {
			var $t1 = this.$cachedValue;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = ss.getDefaultValue(Franca.Vector4);
			}
			return ss.unbox(ss.cast($t1, Franca.Vector4));
		},
		setValue$5: function(value) {
			this.$cachedValue = value;
			for (var $t1 = 0; $t1 < this.$parameters.length; $t1++) {
				var p = this.$parameters[$t1];
				p.setValue$5(value);
			}
		},
		getBool: function() {
			return ss.unbox(ss.cast(ss.coalesce(this.$cachedValue, false), Boolean));
		},
		setValue: function(sampler) {
			this.setSampler(sampler.index);
		},
		getEnumerator: function() {
			return ss.getEnumerator(this.$parameters);
		},
		add: function(item) {
			this.$parameters.push(item);
		},
		clear: function() {
			ss.clear(this.$parameters);
		},
		contains: function(item) {
			return ss.contains(this.$parameters, item);
		},
		copyTo: function(array, arrayIndex) {
			throw new ss.NotImplementedException();
		},
		get_count: function() {
			return this.$parameters.length;
		},
		get_isReadOnly: function() {
			return false;
		},
		remove: function(item) {
			return ss.remove(this.$parameters, item);
		},
		get_name: function() {
			return this.$name;
		},
		set_name: function(value) {
			this.$name = value;
		}
	}, null, [ss.IEnumerable, ss.IEnumerable, ss.ICollection]);
	$Franca_ShaderParamCollection.$ctor1.prototype = $Franca_ShaderParamCollection.prototype;
	ss.initClass($Franca_ShaderParameter, $asm, {
		setValue$6: function(obj) {
			if (!this.get_isValid()) {
				return;
			}
			if (ss.isInstanceOfType(obj, Number)) {
				this.setValue$7(ss.unbox(ss.cast(obj, Number)));
			}
			else if (ss.isInstanceOfType(obj, Franca.Vector2)) {
				this.setValue$2(ss.unbox(ss.cast(obj, Franca.Vector2)));
			}
			else if (ss.isInstanceOfType(obj, Franca.Vector3)) {
				this.setValue$3(ss.unbox(ss.cast(obj, Franca.Vector3)));
			}
			else if (ss.isInstanceOfType(obj, Franca.Vector4)) {
				this.setValue$4(ss.unbox(ss.cast(obj, Franca.Vector4)));
			}
			else if (ss.isInstanceOfType(obj, $Franca_DrawBucketing_Sampler)) {
				this.setValue(ss.unbox(ss.cast(obj, $Franca_DrawBucketing_Sampler)));
			}
			else if (ss.isInstanceOfType(obj, Franca.Matrix4)) {
				this.setValue$1(ss.unbox(ss.cast(obj, Franca.Matrix4)));
			}
			else if (ss.isInstanceOfType(obj, Boolean)) {
				this.setValue$5(ss.unbox(ss.cast(obj, Boolean)));
			}
			else {
				throw new ss.NotImplementedException('Cannot determine SetValue call for object value of type ' + ss.getInstanceType(obj));
			}
		},
		setMatrix4: function(value) {
			if (!this.get_isValid()) {
				return;
			}
			this.$setValue = ss.mkdel(this, function() {
				$Franca_OpenGL_WebGL_GL.uniformMatrix4($Franca_ShaderParamLocation.op_Implicit$3(this.get_location()), false, value);
			});
			this.$dirty = true;
		},
		setValue$1: function(value) {
			if (!this.get_isValid()) {
				return;
			}
			this.$setValue = ss.mkdel(this, function() {
				$Franca_OpenGL_WebGL_GL.uniformMatrix4($Franca_ShaderParamLocation.op_Implicit$3(this.get_location()), false, value);
			});
			this.$dirty = true;
		},
		setSampler: function(value) {
			if (!this.get_isValid()) {
				return;
			}
			this.$setValue = ss.mkdel(this, function() {
				$Franca_OpenGL_WebGL_GL.uniform1($Franca_ShaderParamLocation.op_Implicit$3(this.get_location()), value);
			});
			this.$dirty = true;
		},
		setValue$7: function(value) {
			if (!this.get_isValid()) {
				return;
			}
			this.$setValue = ss.mkdel(this, function() {
				$Franca_OpenGL_WebGL_GL.uniform1$1($Franca_ShaderParamLocation.op_Implicit$3(this.get_location()), value);
			});
			this.$dirty = true;
		},
		setValue$2: function(value) {
			if (!this.get_isValid()) {
				return;
			}
			this.$setValue = ss.mkdel(this, function() {
				$Franca_OpenGL_WebGL_GL.uniform2$1($Franca_ShaderParamLocation.op_Implicit$3(this.get_location()), value.x, value.y);
			});
			this.$dirty = true;
		},
		setValue$3: function(value) {
			if (!this.get_isValid()) {
				return;
			}
			this.$setValue = ss.mkdel(this, function() {
				$Franca_OpenGL_WebGL_GL.uniform3$1($Franca_ShaderParamLocation.op_Implicit$3(this.get_location()), value.x, value.y, value.z);
			});
			this.$dirty = true;
		},
		setValue$4: function(value) {
			if (!this.get_isValid()) {
				return;
			}
			this.$setValue = ss.mkdel(this, function() {
				$Franca_OpenGL_WebGL_GL.uniform4$1($Franca_ShaderParamLocation.op_Implicit$3(this.get_location()), value.x, value.y, value.z, value.w);
			});
			this.$dirty = true;
		},
		setValue$5: function(value) {
			if (!this.get_isValid()) {
				return;
			}
			this.setValue$7((value ? 1 : 0));
		},
		setValue: function(sampler) {
			if (!this.get_isValid()) {
				return;
			}
			this.setSampler(sampler.index);
		},
		update: function() {
			if (!this.$dirty) {
				return;
			}
			if (!this.get_isValid()) {
				return;
			}
			this.$dirty = false;
			if (!ss.staticEquals(this.$setValue, null) && ss.isValue(this.get_location()) && this.get_location().get_isValid()) {
				this.$setValue();
				this.$setValue = null;
			}
		},
		get_location: function() {
			return this.$1$LocationField;
		},
		set_location: function(value) {
			this.$1$LocationField = value;
		},
		get_name: function() {
			return this.$name;
		},
		get_type: function() {
			return this.$type;
		},
		get_dirty: function() {
			return this.$dirty;
		},
		get_isValid: function() {
			return (ss.isValue(this.get_location()) ? this.get_location().get_isValid() : false);
		}
	});
	ss.initClass($Franca_ShaderParamLocation, $asm, {
		get_uniform: function() {
			return this.$uLoc;
		},
		get_attribute: function() {
			return this.$aLoc;
		},
		get_isValid: function() {
			if (ss.isValue(this.$uLoc)) {
				return this.$uLoc.get_isValid();
			}
			if (ss.isValue(this.$aLoc)) {
				return this.$aLoc.get_isValid();
			}
			return false;
		}
	});
	$Franca_ShaderParamLocation.$ctor1.prototype = $Franca_ShaderParamLocation.prototype;
	ss.initEnum($Franca_ShaderParamType, $asm, { Uniform: 0, Attribute: 1 });
	ss.initClass($Franca_ShaderProgram, $asm, {
		initialize: function(linkPrograms) {
			if (linkPrograms) {
				var stage = 0;
				try {
					this.$program = $Franca_OpenGL_WebGL_GL.createProgram();
					stage++;
					if (ss.isValue(this.$vertexShader)) {
						$Franca_OpenGL_WebGL_GL.attachShader(this.$program, $Franca_Shader.op_Implicit(this.$vertexShader));
						stage++;
					}
					if (ss.isValue(this.$fragmentShader)) {
						$Franca_OpenGL_WebGL_GL.attachShader(this.$program, $Franca_Shader.op_Implicit(this.$fragmentShader));
						stage++;
					}
					$Franca_OpenGL_WebGL_GL.linkProgram(this.$program);
					if (!$Franca_OpenGL_WebGL_GL.getProgramLinkStatus(this.$program)) {
						var info = $Franca_OpenGL_WebGL_GL.getProgramInfoLog(this.$program);
						throw new $Franca_OpenGLException.$ctor1((System.StringExtensions.isNullOrEmpty(info, false) ? 'OpenGL program failed to link (no info available)' : ('OpenGL program failed to link: ' + info)));
					}
					$Franca_OpenGL_WebGL_GL.throwErrors(false);
				}
				catch ($t1) {
					$t1 = ss.Exception.wrap($t1);
					if (ss.isInstanceOfType($t1, $Franca_OpenGLException)) {
						$Franca_OpenGL_WebGL_GL.deleteProgram(this.$program);
						throw $t1;
					}
					else {
						var e = $t1;
						$Franca_OpenGL_WebGL_GL.deleteProgram(this.$program);
						var cause;
						switch (stage) {
							default:
							case 0: {
								cause = 'program creation';
								break;
							}
							case 1: {
								cause = 'attachment of vertex shader';
								break;
							}
							case 2: {
								cause = 'attachment of fragment shader';
								break;
							}
							case 3: {
								cause = 'program linking';
								break;
							}
						}
						var message = (ss.isInstanceOfType(e, $Franca_OpenGL_WebGL_GLError) ? ss.cast(e, $Franca_OpenGL_WebGL_GLError).getMessage(false) : e.get_message());
						throw new $Franca_OpenGLException.$ctor1(ss.formatString('Errors occurred during {0} of a shader program: {1}', cause, message));
					}
				}
			}
			this.$attributes = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_ShaderParameter]))();
			this.$uniforms = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_ShaderParameter]))();
			this.$parameters = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_ShaderParameter]))();
		},
		updateUniforms: function() {
			var $t1 = ss.getEnumerator(this.$uniforms.get_values());
			try {
				while ($t1.moveNext()) {
					var uniform = $t1.current();
					if (uniform.get_isValid()) {
						uniform.update();
					}
				}
			}
			finally {
				$t1.dispose();
			}
		},
		getUniform: function(name) {
			var p = {};
			if (this.$uniforms.tryGetValue(name, p)) {
				return p.$;
			}
			var loc = new $Franca_ShaderParamLocation.$ctor1($Franca_OpenGL_WebGL_GL.getUniformLocation(this.$program, name));
			var $t1 = new $Franca_ShaderParameter(name, 0);
			$t1.set_location(loc);
			p.$ = $t1;
			this.$uniforms.set_item(name, p.$);
			if (p.$.get_isValid() || !this.$parameters.containsKey(name)) {
				this.$parameters.set_item(name, p.$);
			}
			return p.$;
		},
		getAttribute: function(name) {
			var p = {};
			if (this.$attributes.tryGetValue(name, p)) {
				return p.$;
			}
			var loc = new $Franca_ShaderParamLocation($Franca_OpenGL_WebGL_GL.getAttribLocation(this.$program, name));
			var $t1 = new $Franca_ShaderParameter(name, 1);
			$t1.set_location(loc);
			p.$ = $t1;
			this.$attributes.set_item(name, p.$);
			if (p.$.get_isValid() || !this.$parameters.containsKey(name)) {
				this.$parameters.set_item(name, p.$);
			}
			return p.$;
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				// Free GL stuff here so finalizer doesn't get there
				$Franca_OpenGL_WebGL_GL.detachShader(this.$program, $Franca_Shader.op_Implicit(this.$vertexShader));
				$Franca_OpenGL_WebGL_GL.detachShader(this.$program, $Franca_Shader.op_Implicit(this.$fragmentShader));
				$Franca_OpenGL_WebGL_GL.deleteProgram(this.$program);
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_graphicsDevice: function() {
			return this.$graphicsDevice;
		},
		get_item: function(name) {
			var p = {};
			if (this.$parameters.tryGetValue(name, p)) {
				return p.$;
			}
			p.$ = this.getUniform(name);
			if (p.$.get_isValid()) {
				return p.$;
			}
			p.$ = this.getAttribute(name);
			return p.$;
		},
		get_uniforms: function() {
			return this.$uniforms.get_values();
		},
		get_attributes: function() {
			return this.$attributes.get_values();
		},
		get_parameters: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, $t1, uniform, $t2, attribute;
					var $finally = function() {
						$t1.dispose();
					};
					var $finally1 = function() {
						$t2.dispose();
					};
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									$t1 = ss.getEnumerator(this.$uniforms.get_values());
									$state = 4;
									continue $sm1;
								}
								case 4: {
									$state = 2;
									if (!$t1.moveNext()) {
										$state = 3;
										continue $sm1;
									}
									uniform = $t1.current();
									$result = uniform;
									$state = 4;
									return true;
								}
								case 3: {
									$state = -1;
									$finally.call(this);
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									$t2 = ss.getEnumerator(this.$attributes.get_values());
									$state = 7;
									continue $sm1;
								}
								case 7: {
									$state = 5;
									if (!$t2.moveNext()) {
										$state = 6;
										continue $sm1;
									}
									attribute = $t2.current();
									$result = attribute;
									$state = 7;
									return true;
								}
								case 6: {
									$state = -1;
									$finally1.call(this);
									$state = -1;
									break $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, function() {
						try {
							switch ($state) {
								case 2:
								case 3:
								case 4: {
									try {
										break;
									}
									finally {
										$finally.call(this);
									}
								}
								case 5:
								case 6:
								case 7: {
									try {
										break;
									}
									finally {
										$finally1.call(this);
									}
								}
							}
						}
						finally {
							$state = -1;
						}
					}, this);
				}).call(this);
			}, this);
		},
		get_glProgram: function() {
			return this.$program;
		},
		get_vertexShader: function() {
			return this.$vertexShader;
		},
		get_fragmentShader: function() {
			return this.$fragmentShader;
		}
	}, null, [ss.IDisposable]);
	$Franca_ShaderProgram.$ctor1.prototype = $Franca_ShaderProgram.prototype;
	ss.initClass($Franca_ShaderProgramCollection, $asm, {
		getEnumerator: function() {
			return this.$programs.getEnumerator();
		},
		hasProgram: function(name) {
			return this.$programs.containsKey(name);
		},
		get_item: function(name) {
			return this.$programs.get_item(name);
		},
		get_values: function() {
			return this.$programs.get_values();
		},
		get_names: function() {
			return this.$programs.get_keys();
		}
	}, null, [ss.IEnumerable, ss.IEnumerable]);
	$Franca_ShaderProgramCollection.$ctor1.prototype = $Franca_ShaderProgramCollection.prototype;
	ss.initEnum($Franca_ShaderType, $asm, { Vertex: 35633, Fragment: 35632, Geometry: 0 });
	ss.initEnum($Franca_SocketState, $asm, { Connecting: 0, Open: 1, Closing: 2, Closed: 3 });
	ss.initClass($Franca_SpriteBatch, $asm, {
		begin: function(sorting, filter, wrapping, effect) {
			this.$sortMode = sorting;
			this.$filter = filter;
			this.$wrap = wrapping;
			this.$customEffect = effect;
			this.$cachedCustomProgram = null;
			this.$cachedCustomProgramList = null;
			this.vertexOffset = 0;
			this.indexOffset = 0;
			this.glVertexOffset = 0;
			this.glIndexOffset = 0;
			if (ss.isValue(this.$customEffect)) {
				ss.arrayAddRange(this.$programs, this.$customEffect.get_programs().get_values());
				for (var $t1 = 0; $t1 < this.$programs.length; $t1++) {
					var program = this.$programs[$t1];
					var u;
					if ((u = program.getUniform('testAlpha')).get_isValid()) {
						u.setValue$7($Franca_SpriteBatch.defaultTestAlpha);
					}
				}
			}
		},
		end: function() {
			if (this.$sortMode === 0 || this.$sortMode === 1) {
				this.flush();
			}
			this.drawAll();
			this.$customEffect = null;
			ss.clear(this.$programs);
			this.$cachedCustomProgram = null;
			this.$cachedCustomProgramList = null;
			if (this.$sortMode === 1) {
				var $t1 = ss.getEnumerator(this.$textureBatches.get_values());
				try {
					while ($t1.moveNext()) {
						var index = $t1.current();
						this.$batches[index].end();
					}
				}
				finally {
					$t1.dispose();
				}
				this.$textureBatches.clear();
				this.$batchIndex = 0;
			}
		},
		flush: function() {
			if (this.vertexOffset === 0) {
				return;
			}
			// nothing to do!
			var vertices = this.vertexOffset - this.glVertexOffset;
			var indices = this.indexOffset - this.glIndexOffset;
			if (indices === 0) {
				return;
			}
			if (this.glVertexOffset + vertices > $Franca_SpriteBatch.maxVertices) {
				this.drawAll();
			}
			var progs;
			if (ss.isNullOrUndefined(this.$customEffect)) {
				if (ss.isValue(this.$texture)) {
					progs = this.$texturePrograms;
				}
				else {
					progs = this.$rectPrograms;
				}
			}
			else if (System.StringExtensions.isNullOrEmpty(this.$currentProgram, false)) {
				if (ss.isValue(this.$cachedCustomProgramList) && ss.referenceEquals(this.$currentProgram, this.$cachedCustomProgram)) {
					progs = this.$cachedCustomProgramList;
				}
				else {
					progs = [];
					for (var i = 0; i < this.$customEffect.get_programOrder().length; i++) {
						progs.push(this.$customEffect.get_programs().get_item(this.$customEffect.get_programOrder()[i]));
					}
					this.$cachedCustomProgram = this.$currentProgram;
					this.$cachedCustomProgramList = progs;
				}
			}
			else if (ss.isValue(this.$cachedCustomProgramList) && ss.referenceEquals(this.$currentProgram, this.$cachedCustomProgram)) {
				progs = this.$cachedCustomProgramList;
			}
			else {
				var $t1 = [];
				$t1.push(this.$customEffect.get_programs().get_item(this.$currentProgram));
				progs = $t1;
				this.$cachedCustomProgram = this.$currentProgram;
				this.$cachedCustomProgramList = progs;
			}
			this.$drawCalls.push(new $Franca_BatchDrawCall.$ctor1(this.$texture, progs, this.$filter, this.$wrap, this.$graphicsDevice.get_viewport(), indices, this.glIndexOffset));
			this.$texture = null;
			this.glVertexOffset = this.vertexOffset;
			this.glIndexOffset = this.indexOffset;
		},
		drawAll: function() {
			if (this.glVertexOffset === 0) {
				return;
			}
			var hasUvs = this.$drawCalls.length > 0 && ss.isValue(this.$drawCalls[0].texture);
			this.$vertexBuffer.bind$1(0, this.glVertexOffset * $Franca_SpriteBatch.vertexComponentCount);
			this.$rotBuffer.bind$1(0, this.glVertexOffset * $Franca_SpriteBatch.rotComponentCount);
			this.$colorBuffer.bind$1(0, this.glVertexOffset * $Franca_SpriteBatch.colorComponentCount);
			if (hasUvs) {
				this.$uvBuffer.bind$1(0, this.glVertexOffset * $Franca_SpriteBatch.uvComponentCount);
			}
			$Franca_SpriteBatch.$indexBuffer.bind();
			for (var $t1 = 0; $t1 < this.$drawCalls.length; $t1++) {
				var dc = this.$drawCalls[$t1];
				this.$draw(dc);
			}
			ss.clear(this.$drawCalls);
			this.glVertexOffset = 0;
			this.glIndexOffset = 0;
			this.vertexOffset = 0;
			this.indexOffset = 0;
			this.$lastTexture = null;
			this.$lastProgram = null;
			this.$lastViewport = new Franca.Rectangle.$ctor3(-1, -1, 0, 0);
			this.$vertexBuffer.swapBuffers();
			this.$rotBuffer.swapBuffers();
			this.$colorBuffer.swapBuffers();
			if (hasUvs) {
				this.$uvBuffer.swapBuffers();
			}
		},
		enableVertexAttributes: function(program, drawCall) {
			var posParam, colParam, uvsParam, rotParam;
			var pos = null, col = null, uvs = null, rot = null;
			if ((posParam = program.getAttribute('inputPosition')).get_isValid()) {
				pos = posParam.get_location();
			}
			if ((colParam = program.getAttribute('inputColor')).get_isValid()) {
				col = colParam.get_location();
			}
			if ((rotParam = program.getAttribute('inputRotation')).get_isValid()) {
				rot = rotParam.get_location();
			}
			if (ss.isValue(pos)) {
				this.$vertexBuffer.enableVertexAttribute($Franca_ShaderParamLocation.op_Implicit$2(pos), $Franca_SpriteBatch.vertexComponentCount, 0, 0);
			}
			if (ss.isValue(rot)) {
				this.$rotBuffer.enableVertexAttribute($Franca_ShaderParamLocation.op_Implicit$2(rot), $Franca_SpriteBatch.rotComponentCount, 0, 0);
			}
			if (ss.isValue(col)) {
				this.$colorBuffer.enableVertexAttribute($Franca_ShaderParamLocation.op_Implicit$2(col), $Franca_SpriteBatch.colorComponentCount, 0, 0);
			}
			if (ss.isValue(drawCall.texture)) {
				if ((uvsParam = program.getAttribute('inputTexCoords')).get_isValid()) {
					uvs = uvsParam.get_location();
				}
				if (ss.isValue(uvs)) {
					this.$uvBuffer.enableVertexAttribute($Franca_ShaderParamLocation.op_Implicit$2(uvs), $Franca_SpriteBatch.uvComponentCount, 0, 0);
				}
				program.get_item('texSampler').setSampler(0);
			}
		},
		$draw: function(drawCall) {
			for (var $t1 = 0; $t1 < drawCall.programs.length; $t1++) {
				var program = drawCall.programs[$t1];
				if (!ss.referenceEquals(this.$lastProgram, program)) {
					this.enableVertexAttributes(program, drawCall);
					$Franca_OpenGL_WebGL_GL.useProgram$1(program);
					this.$lastProgram = program;
				}
				if (Franca.Rectangle.op_Inequality(this.$lastViewport, drawCall.viewport)) {
					//matProj = Matrix4.Ortho(0, drawCall.Viewport.Width, drawCall.Viewport.Height, 0, 0, -1);
					this.$matProj = Franca.Matrix4.createOrthographicOffCenter(0, drawCall.viewport.size.width, drawCall.viewport.size.height, 0, 0, -1);
					program.get_item('matrixTransform').setValue$1(this.$matProj);
					this.$lastViewport = drawCall.viewport;
				}
				if (ss.isValue(drawCall.texture) && !ss.referenceEquals(this.$lastTexture, drawCall.texture)) {
					$Franca_OpenGL_WebGL_GL.activeTexture($Franca_OpenGL_WebGL_Constants.texturE0);
					$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_Texture.op_Implicit(drawCall.texture));
					var magFilter, minFilter, wrapS, wrapT;
					var linearMinFilter = (drawCall.texture.get_mipmapped() ? $Franca_OpenGL_WebGL_Constants.lineaR_MIPMAP_LINEAR : $Franca_OpenGL_WebGL_Constants.LINEAR);
					var nearestMinFilter = (drawCall.texture.get_mipmapped() ? $Franca_OpenGL_WebGL_Constants.nearesT_MIPMAP_NEAREST : $Franca_OpenGL_WebGL_Constants.NEAREST);
					if (drawCall.filter === 12) {
						magFilter = $Franca_OpenGL_WebGL_Constants.NEAREST;
						minFilter = nearestMinFilter;
					}
					else if (drawCall.filter === 3) {
						magFilter = $Franca_OpenGL_WebGL_Constants.LINEAR;
						minFilter = linearMinFilter;
					}
					else {
						if (System.EnumExtensions.hasFlag(drawCall.filter, 1)) {
							minFilter = linearMinFilter;
						}
						else {
							minFilter = nearestMinFilter;
						}
						if (System.EnumExtensions.hasFlag(drawCall.filter, 2)) {
							magFilter = $Franca_OpenGL_WebGL_Constants.LINEAR;
						}
						else {
							magFilter = $Franca_OpenGL_WebGL_Constants.NEAREST;
						}
					}
					if (!drawCall.texture.get_isPowerOfTwo()) {
						wrapT = wrapS = $Franca_OpenGL_WebGL_Constants.clamP_TO_EDGE;
					}
					else if (drawCall.wrap === 12) {
						wrapT = wrapS = $Franca_OpenGL_WebGL_Constants.REPEAT;
					}
					else if (drawCall.wrap === 3) {
						wrapT = wrapS = $Franca_OpenGL_WebGL_Constants.clamP_TO_EDGE;
					}
					else {
						if (System.EnumExtensions.hasFlag(drawCall.wrap, 1)) {
							wrapS = $Franca_OpenGL_WebGL_Constants.clamP_TO_EDGE;
						}
						else {
							wrapS = $Franca_OpenGL_WebGL_Constants.REPEAT;
						}
						if (System.EnumExtensions.hasFlag(drawCall.wrap, 2)) {
							wrapT = $Franca_OpenGL_WebGL_Constants.clamP_TO_EDGE;
						}
						else {
							wrapT = $Franca_OpenGL_WebGL_Constants.REPEAT;
						}
					}
					$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_MAG_FILTER, magFilter);
					$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_MIN_FILTER, minFilter);
					$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_WRAP_S, wrapS);
					$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_WRAP_T, wrapT);
					this.$lastTexture = drawCall.texture;
				}
				else {
					this.$lastTexture = null;
				}
				program.updateUniforms();
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				$Franca_OpenGL_WebGL_GL.drawElements($Franca_OpenGL_WebGL_Constants.TRIANGLES, drawCall.items, $Franca_OpenGL_WebGL_Constants.unsigneD_SHORT, drawCall.offset * 2);
				$Franca_OpenGL_WebGL_GL.throwErrors(false);
				//if (pos != null)
				//GL.DisableVertexAttribArray(pos);
				//if (rot != null)
				//GL.DisableVertexAttribArray(rot);
				//if (col != null)
				//GL.DisableVertexAttribArray(col);
				//
				//if (drawCall.Texture != null) {
				//if (uvs != null)
				//GL.DisableVertexAttribArray(uvs);
				//GL.BindTexture(Constants.TEXTURE_2D, null);
				//}
				//GL.ThrowErrors();
			}
		},
		checkFlush: function(texture, redirectBatch) {
			// TODO: other sort modes
			if (!ss.referenceEquals(this.$texture, texture)) {
				if (ss.isNullOrUndefined(this.$texture) || ss.isNullOrUndefined(texture)) {
					// flush and draw all because otherwise the number of elements
					// in the uv buffer won't be consistent (rectangles don't add UVs)
					this.flush();
					this.drawAll();
					this.$texture = texture;
				}
				else if (this.$sortMode === 1 && ss.isValue(this.$texture)) {
					var index = {};
					if (this.$textureBatches.tryGetValue(texture, index)) {
						redirectBatch.$ = this.$batches[index.$];
						return;
					}
					else {
						if (this.$batchIndex === this.$batches.length) {
							this.$batches.push(new $Franca_SpriteBatch(this.$graphicsDevice));
						}
						redirectBatch.$ = this.$batches[this.$batchIndex];
						redirectBatch.$.begin(this.$sortMode, this.$filter, this.$wrap, this.$customEffect);
						redirectBatch.$.set_currentProgram(this.get_currentProgram());
						this.$textureBatches.set_item(texture, this.$batchIndex);
						this.$batchIndex++;
						return;
					}
				}
				else {
					this.flush();
					this.$texture = texture;
				}
			}
			redirectBatch.$ = null;
			if (this.vertexOffset + 4 > $Franca_SpriteBatch.maxVertices) {
				this.flush();
				this.drawAll();
				this.$texture = texture;
			}
		},
		drawTextured: function(texture, src, dest, colors, effects, origin, angle, z) {
			//if (IntersectionOptimization && !dest.Intersects(0, 0, graphicsDevice.Viewport.Width, graphicsDevice.Viewport.Height)) {
			if (this.intersectionOptimization) {
				var extend = Math.max(dest.size.width, dest.size.height) * 1.5;
				if (!dest.intersects$1(-extend, -extend, this.$graphicsDevice.get_viewport().size.width + extend, this.$graphicsDevice.get_viewport().size.height + extend)) {
					return;
				}
			}
			var redirect = {};
			this.checkFlush(texture, redirect);
			if (ss.isValue(redirect.$)) {
				redirect.$.drawTextured(texture, src, dest, colors, effects, origin, angle, z);
				return;
			}
			if (effects !== 0) {
				if (System.EnumExtensions.hasFlag(effects, 1)) {
					src = new Franca.RectangleF.$ctor3(src.location.x + src.size.width, src.location.y, -src.size.width, src.size.height);
				}
				if (System.EnumExtensions.hasFlag(effects, 2)) {
					src = new Franca.RectangleF.$ctor3(src.location.x, src.location.y + src.size.height, src.size.width, -src.size.height);
				}
			}
			var left = src.location.x / this.$texture.get_width();
			var right = (src.location.x + src.size.width) / this.$texture.get_width();
			var top = src.location.y / this.$texture.get_height();
			var bottom = (src.location.y + src.size.height) / this.$texture.get_height();
			if (texture.get_isRenderTarget()) {
				top = 1 - top;
				bottom = 1 - bottom;
				this.$uvBuffer.setData$8(this.vertexOffset * $Franca_SpriteBatch.uvComponentCount, left, top, right, top, left, bottom, right, bottom);
			}
			else {
				this.$uvBuffer.setData$8(this.vertexOffset * $Franca_SpriteBatch.uvComponentCount, left, top, right, top, left, bottom, right, bottom);
			}
			this.addQuad(dest, colors, z, origin, angle);
		},
		drawRectangle$1: function(dest, colors, angle, origin, z) {
			//if (IntersectionOptimization && !dest.Intersects(0, 0, graphicsDevice.Viewport.Width, graphicsDevice.Viewport.Height)) {
			if (this.intersectionOptimization) {
				var extend = Math.max(dest.size.width, dest.size.height) * 1.5;
				if (!dest.intersects$1(-extend, -extend, this.$graphicsDevice.get_viewport().size.width + extend, this.$graphicsDevice.get_viewport().size.height + extend)) {
					return;
				}
			}
			var redirect = {};
			this.checkFlush(null, redirect);
			// redirect should never not be null in this case
			this.addQuad(dest, colors, z, origin, angle);
		},
		addQuad: function(rect, colors, z, origin, angle) {
			angle = Franca.Calc.wrap$5(angle, -Math.PI, Math.PI);
			//int index = vertexOffset;
			//indexBuffer.SetData(indexOffset,
			//(ushort)(index), (ushort)(index + 1), (ushort)(index + 2), // first triangle
			//(ushort)(index + 1), (ushort)(index + 3), (ushort)(index + 2)); // second triangle
			this.$vertexBuffer.setData$c(this.vertexOffset * $Franca_SpriteBatch.vertexComponentCount, rect.location.x, rect.location.y, z, rect.location.x + rect.size.width, rect.location.y, z, rect.location.x, rect.location.y + rect.size.height, z, rect.location.x + rect.size.width, rect.location.y + rect.size.height, z);
			var rotX = rect.location.x + origin.x;
			var rotY = rect.location.y + origin.y;
			this.$rotBuffer.setData$c(this.vertexOffset * $Franca_SpriteBatch.rotComponentCount, rotX, rotY, angle, rotX, rotY, angle, rotX, rotY, angle, rotX, rotY, angle);
			this.$colorBuffer.setData$g(this.vertexOffset * $Franca_SpriteBatch.colorComponentCount, colors.topLeft.r, colors.topLeft.g, colors.topLeft.b, colors.topLeft.a, colors.topRight.r, colors.topRight.g, colors.topRight.b, colors.topRight.a, colors.bottomLeft.r, colors.bottomLeft.g, colors.bottomLeft.b, colors.bottomLeft.a, colors.bottomLeft.r, colors.bottomLeft.g, colors.bottomLeft.b, colors.bottomLeft.a);
			this.vertexOffset += 4;
			this.indexOffset += 6;
		},
		draw$3: function(texture, dest, colors, effects, z) {
			this.drawTextured(texture, new Franca.RectangleF.$ctor3(0, 0, texture.get_width(), texture.get_height()), new Franca.RectangleF.$ctor3(dest.x, dest.y, texture.get_width(), texture.get_height()), colors, effects, Franca.Vector2.zero, 0, z);
		},
		draw$2: function(texture, dest, colors, effects, z) {
			this.drawTextured(texture, new Franca.RectangleF.$ctor3(0, 0, texture.get_width(), texture.get_height()), dest, colors, effects, Franca.Vector2.zero, 0, z);
		},
		draw$7: function(texture, dest, colors, angle, origin, effects, z) {
			this.drawTextured(texture, new Franca.RectangleF.$ctor3(0, 0, texture.get_width(), texture.get_height()), new Franca.RectangleF.$ctor3(dest.x, dest.y, texture.get_width(), texture.get_height()), colors, effects, origin, angle, z);
		},
		draw$6: function(texture, dest, colors, angle, origin, effects, z) {
			this.drawTextured(texture, new Franca.RectangleF.$ctor3(0, 0, texture.get_width(), texture.get_height()), dest, colors, effects, origin, angle, z);
		},
		drawSrc$3: function(texture, src, dest, colors, effects, z) {
			this.drawTextured(texture, src, new Franca.RectangleF.$ctor3(dest.x, dest.y, src.size.width, src.size.height), colors, effects, Franca.Vector2.zero, 0, z);
		},
		drawSrc$2: function(texture, src, dest, colors, effects, z) {
			this.drawTextured(texture, src, dest, colors, effects, Franca.Vector2.zero, 0, z);
		},
		drawSrc$7: function(texture, src, dest, colors, angle, origin, effects, z) {
			this.drawTextured(texture, src, new Franca.RectangleF.$ctor3(dest.x, dest.y, src.size.width, src.size.height), colors, effects, origin, angle, z);
		},
		drawSrc$6: function(texture, src, dest, colors, angle, origin, effects, z) {
			this.drawTextured(texture, src, dest, colors, effects, origin, angle, z);
		},
		drawRectangle: function(dest, colors, z) {
			this.drawRectangle$1(dest, colors, 0, Franca.Vector2.zero, z);
		},
		draw$1: function(texture, dest, colors, effects, z) {
			this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), new Franca.RectangleF.$ctor3(dest.x, dest.y, texture.source.size.width, texture.source.size.height), colors, effects, Franca.Vector2.zero, 0, z);
		},
		draw: function(texture, dest, colors, effects, z) {
			this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), dest, colors, effects, Franca.Vector2.zero, 0, z);
		},
		draw$5: function(texture, dest, colors, angle, origin, effects, z) {
			this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), new Franca.RectangleF.$ctor3(dest.x, dest.y, texture.source.size.width, texture.source.size.height), colors, effects, origin, angle, z);
		},
		draw$4: function(texture, dest, colors, angle, origin, effects, z) {
			this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), dest, colors, effects, origin, angle, z);
		},
		drawSrc$1: function(texture, src, dest, colors, effects, z) {
			this.drawTextured(texture.baseTex, new Franca.RectangleF.$ctor3(src.location.x + texture.source.location.x, src.location.y + texture.source.location.y, src.size.width, src.size.height), new Franca.RectangleF.$ctor3(dest.x, dest.y, src.size.width, src.size.height), colors, effects, Franca.Vector2.zero, 0, z);
		},
		drawSrc: function(texture, src, dest, colors, effects, z) {
			this.drawTextured(texture.baseTex, new Franca.RectangleF.$ctor3(src.location.x + texture.source.location.x, src.location.y + texture.source.location.y, src.size.width, src.size.height), dest, colors, effects, Franca.Vector2.zero, 0, z);
		},
		drawSrc$5: function(texture, src, dest, colors, angle, origin, effects, z) {
			this.drawTextured(texture.baseTex, new Franca.RectangleF.$ctor3(src.location.x + texture.source.location.x, src.location.y + texture.source.location.y, src.size.width, src.size.height), new Franca.RectangleF.$ctor3(dest.x, dest.y, src.size.width, src.size.height), colors, effects, origin, angle, z);
		},
		drawSrc$4: function(texture, src, dest, colors, angle, origin, effects, z) {
			this.drawTextured(texture.baseTex, new Franca.RectangleF.$ctor3(src.location.x + texture.source.location.x, src.location.y + texture.source.location.y, src.size.width, src.size.height), dest, colors, effects, origin, angle, z);
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				this.$vertexBuffer.dispose();
				this.$colorBuffer.dispose();
				this.$uvBuffer.dispose();
				this.$rotBuffer.dispose();
				for (var $t1 = 0; $t1 < this.$batches.length; $t1++) {
					var batch = this.$batches[$t1];
					batch.dispose();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_graphicsDevice: function() {
			return this.$graphicsDevice;
		},
		get_currentProgram: function() {
			return this.$currentProgram;
		},
		set_currentProgram: function(value) {
			if (!ss.referenceEquals(this.$currentProgram, value)) {
				this.flush();
				this.$currentProgram = value;
			}
		}
	}, null, [ss.IDisposable]);
	ss.initEnum($Franca_SpriteEffects, $asm, { None: 0, Mirror: 1, Flip: 2 });
	ss.initClass($Franca_SpriteFont, $asm, {
		init: function(font, manager) {
			this.$font = font;
			this.$manager = manager;
			this.$glyphs = new (ss.makeGenericType(ss.Dictionary$2, [Number, ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_SpriteFontGlyph])]))();
			this.$font.set_strokeWidth(this.$strokeWidth);
		},
		beginBatch: function(batch, scale) {
			if (this.get_compressed()) {
				batch.begin$2(true, 0, 12, 12, null);
			}
			else {
				//batch.Begin(false, filter: scale == 1.0 ? TextureFilter.Nearest : TextureFilter.Default);
				batch.begin$2(false, 0, 3, 12, null);
			}
		},
		measure: function(text, baseSize, scale, kerning) {
			var fontScale = 1 / this.$font.get_unitsPerEm() * baseSize;
			var fontMetrics = this.$font.getFontMetrics(baseSize);
			text = ss.replaceAllString(text, '\t', ss.stringFromChar(String.fromCharCode(32), 4));
			var maxWidth = 0;
			var width = 0;
			var height = fontMetrics.get_linesize() * scale;
			//for (int i = 0; i < text.Length; i++) {
			//    var chr = text[i];
			{
				var enumerator = Franca.StringHelper.codePoints(text, 0, -1, false).getEnumerator$1();
				try {
					while (enumerator.moveNext()) {
						var chr = enumerator.current();
						if (chr !== 10 && chr !== 13) {
							var metrics = this.$font.getGlyphMetrics$1(chr, baseSize);
							var advance = metrics.get_advanceWidth();
							if (kerning && enumerator.get_next() > 0) {
								var kern = this.$font.getKerningValue$3(chr, enumerator.get_next(), fontScale);
								if (kern !== 0) {
									advance += kern * scale;
								}
							}
							width += advance * scale;
						}
						else {
							height += fontMetrics.get_linespace() * scale;
							maxWidth = Math.max(width, maxWidth);
							width = 0;
							if (chr === 13 && enumerator.get_next() === 10) {
								enumerator.moveNext();
								// skip the newline in the \r\n sequence
							}
						}
					}
				}
				finally {
					if (ss.isValue(enumerator)) {
						enumerator.dispose();
					}
				}
			}
			return new Franca.Vector2.$ctor3(Math.max(maxWidth, width), height);
		},
		$getGlyphDictionary: function(size) {
			var glyphDict = {};
			if (!this.$glyphs.tryGetValue(size, glyphDict)) {
				glyphDict.$ = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_SpriteFontGlyph]))();
				this.$glyphs.set_item(size, glyphDict.$);
			}
			return glyphDict.$;
		},
		draw: function(text, size, position, color, stroke, strokeColor, kerning) {
			this.draw$2(text, size, position, color, color, stroke, strokeColor, strokeColor, kerning);
		},
		draw$1: function(text, baseSize, scale, position, color, stroke, strokeColor, kerning) {
			this.draw$3(text, baseSize, scale, position, color, color, stroke, strokeColor, strokeColor, kerning);
		},
		draw$2: function(text, size, position, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning) {
			this.draw$3(text, size, 1, position, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning);
		},
		draw$3: function(text, baseSize, scale, position, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning) {
			if (stroke && (!ss.isValue(strokeTopColor) || !ss.isValue(strokeBottomColor))) {
				throw new ss.ArgumentNullException('Stroke top or bottom color values cannot be null when calling Draw with stroke = true');
			}
			position = position.floor();
			var batch = this.$manager.get_fontBatch();
			this.beginBatch(batch, scale);
			var glyphDict = this.$getGlyphDictionary(baseSize);
			var fontScale = 1 / this.$font.get_unitsPerEm() * baseSize;
			var metrics = this.$font.getFontMetrics(baseSize);
			text = ss.replaceAllString(text, '\t', ss.stringFromChar(String.fromCharCode(32), 4));
			for (var pass = 0; pass < 2; pass++) {
				if (pass === 0 && !stroke) {
					continue;
				}
				var drawStroke = pass === 0;
				var top = (drawStroke ? ss.unbox(strokeTopColor) : topColor);
				var bottom = (drawStroke ? ss.unbox(strokeBottomColor) : bottomColor);
				//double startX = Compressed ? Calc.Floor(position.X) : position.X;
				var startX = position.x;
				var x = startX;
				var y = position.y;
				//for (int i = 0; i < text.Length; i++) {
				//    var chr = text[i];
				{
					var enumerator = Franca.StringHelper.codePoints(text, 0, -1, false).getEnumerator$1();
					try {
						while (enumerator.moveNext()) {
							var chr = enumerator.current();
							if (chr !== 10 && chr !== 13) {
								var glyph = {};
								if (!glyphDict.tryGetValue(chr, glyph) || glyph.$.invalidated) {
									glyph.$ = this.get_manager().requestGlyph$1(this.$font, chr, baseSize);
									if (ss.isNullOrUndefined(glyph.$)) {
										batch.end();
										this.get_manager().invalidateRegionLRU();
										glyph.$ = this.get_manager().requestGlyph$1(this.$font, chr, baseSize);
										this.beginBatch(batch, scale);
									}
									glyphDict.set_item(chr, glyph.$);
								}
								var advance = glyph.$.metrics.get_advanceWidth();
								if (kerning && enumerator.get_next() > 0) {
									var kern = this.$font.getKerningValue$3(chr, enumerator.get_next(), fontScale);
									if (kern !== 0) {
										advance += kern;
									}
								}
								var glyphTop, glyphBottom;
								if (Franca.HdrColor.op_Equality(top, bottom)) {
									glyphTop = top;
									glyphBottom = bottom;
								}
								else {
									glyphTop = Franca.HdrColor.lerp(top, bottom, glyph.$.topAlpha, false);
									glyphBottom = Franca.HdrColor.lerp(top, bottom, glyph.$.bottomAlpha, false);
								}
								batch.drawGlyph$3(glyph.$, new Franca.RectangleF.$ctor3(x + glyph.$.bearingX * scale, y - glyph.$.ascent * scale, glyph.$.texture.source.size.width * scale, glyph.$.texture.source.size.height * scale), glyphTop, glyphBottom, drawStroke, 0, 0);
								glyph.$.region.lastUsed = Franca.Platform.get_time();
								x = x + advance * scale;
							}
							else {
								x = startX;
								y += metrics.get_linespace() * scale;
								if (chr === 13 && enumerator.get_next() === 10) {
									enumerator.moveNext();
									// skip the newline in the \r\n sequence
								}
							}
						}
					}
					finally {
						if (ss.isValue(enumerator)) {
							enumerator.dispose();
						}
					}
				}
			}
			batch.end();
		},
		drawAligned: function(text, size, area, align, color, stroke, strokeColor, kerning) {
			this.drawAligned$4(text, size, area, align, color, color, stroke, strokeColor, strokeColor, kerning);
		},
		drawAligned$2: function(text, baseSize, scale, area, align, color, stroke, strokeColor, kerning) {
			this.drawAligned$6(text, baseSize, scale, area, align, color, color, stroke, strokeColor, strokeColor, kerning);
		},
		drawAligned$4: function(text, size, area, align, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning) {
			this.drawAligned$6(text, size, 1, area, align, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning);
		},
		drawAligned$6: function(text, baseSize, scale, area, align, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning) {
			this.drawAligned$7(text, baseSize, scale, area, align, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning);
		},
		drawAligned$1: function(text, size, area, align, color, stroke, strokeColor, kerning) {
			this.drawAligned$5(text, size, area, align, color, color, stroke, strokeColor, strokeColor, kerning);
		},
		drawAligned$3: function(text, baseSize, scale, area, align, color, stroke, strokeColor, kerning) {
			this.drawAligned$8(text, baseSize, scale, area, align, color, color, stroke, strokeColor, strokeColor, kerning);
		},
		drawAligned$5: function(text, size, area, align, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning) {
			this.drawAligned$8(text, size, 1, area, align, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning);
		},
		drawAligned$8: function(text, baseSize, scale, area, align, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning) {
			this.drawAligned$7(text, baseSize, scale, area, align, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning);
		},
		drawAligned$7: function(textObj, baseSize, scale, area, align, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, kerning) {
			var batch = this.$manager.get_fontBatch();
			this.beginBatch(batch, scale);
			var glyphDict = this.$getGlyphDictionary(baseSize);
			var fontScale = 1 / this.$font.get_unitsPerEm() * baseSize;
			var metrics = this.$font.getFontMetrics(baseSize);
			//string text =
			//textObj is string ?
			//text = (string)textObj :
			//((WrappedString)textObj).Wrapped;
			var text;
			if (ss.isInstanceOfType(textObj, String)) {
				text = ss.cast(textObj, String);
			}
			else {
				text = ss.cast(textObj, $Franca_Text_WrappedString).wrapped;
			}
			text = ss.replaceAllString(text, '\t', ss.stringFromChar(String.fromCharCode(32), 4));
			var lines = ss.netSplit(text, $Franca_SpriteFont.$newLines, null, 0);
			var halign = align.get_horizontal();
			var valign = align.get_vertical();
			var height = (ss.isInstanceOfType(textObj, $Franca_Text_WrappedString) ? ss.cast(textObj, $Franca_Text_WrappedString).height : (lines.length * metrics.get_linespace() * scale));
			for (var pass = 0; pass < 2; pass++) {
				if (pass === 0 && !stroke) {
					continue;
				}
				var drawStroke = pass === 0;
				var top = (drawStroke ? ss.unbox(strokeTopColor) : topColor);
				var bottom = (drawStroke ? ss.unbox(strokeBottomColor) : bottomColor);
				var startX;
				if (halign !== 1) {
					startX = ((halign === 0) ? area.location.x : (area.location.x + area.size.width));
				}
				else {
					startX = area.location.x;
				}
				var x = startX;
				var y;
				if (valign !== 1) {
					y = ((valign === 0) ? (area.location.y + metrics.get_ascent()) : (area.location.y + area.size.height + metrics.get_descent()));
				}
				else {
					y = (area.size.height - height) / 2 + area.location.y + metrics.get_ascent();
				}
				for (var j = ((valign !== 2) ? 0 : (lines.length - 1)); ((valign !== 2) ? (j < lines.length) : (j >= 0)); j = j + ((valign !== 2) ? 1 : -1)) {
					var line = lines[j];
					if (halign === 1) {
						var lineWidth = this.measure(line, baseSize, scale, kerning).x;
						x += (area.size.width - lineWidth) / 2;
					}
					x = Math.floor(x);
					y = Math.floor(y);
					//for (int i = halign != HAlign.Right ? 0 : line.Length - 1; halign != HAlign.Right ? i < line.Length : i >= 0; i = i + (halign != HAlign.Right ? 1 : -1)) {
					//    var chr = line[i];
					var reversed = halign === 2;
					{
						var enumerator = Franca.StringHelper.codePoints(text, 0, -1, reversed).getEnumerator$1();
						try {
							while (enumerator.moveNext()) {
								var chr = enumerator.current();
								var glyph = {};
								if (!glyphDict.tryGetValue(chr, glyph) || glyph.$.invalidated) {
									glyph.$ = this.get_manager().requestGlyph$1(this.$font, chr, baseSize);
									if (ss.isNullOrUndefined(glyph.$)) {
										batch.end();
										this.get_manager().invalidateRegionLRU();
										glyph.$ = this.get_manager().requestGlyph$1(this.$font, chr, baseSize);
										this.beginBatch(batch, scale);
									}
									glyphDict.set_item(chr, glyph.$);
								}
								var advance = glyph.$.metrics.get_advanceWidth();
								var kern = 0;
								//if (kerning && (halign != HAlign.Right ? i < line.Length - 1 : i > 0)) {
								//    if (halign != HAlign.Right) {
								//        kern = font.GetKerningValue(chr, line[i + 1], fontScale);
								//    }
								//    else {
								//        kern = font.GetKerningValue(line[i - 1], chr, fontScale);
								//    }
								//}
								if (kerning && enumerator.get_next() > 0) {
									if (reversed) {
										kern = this.$font.getKerningValue$3(enumerator.get_next(), chr, fontScale);
									}
									else {
										kern = this.$font.getKerningValue$3(chr, enumerator.get_next(), fontScale);
									}
								}
								var glyphTop, glyphBottom;
								if (Franca.HdrColor.op_Equality(top, bottom)) {
									glyphTop = top;
									glyphBottom = bottom;
								}
								else {
									glyphTop = Franca.HdrColor.lerp(top, bottom, glyph.$.topAlpha, false);
									glyphBottom = Franca.HdrColor.lerp(top, bottom, glyph.$.bottomAlpha, false);
								}
								if (halign === 2) {
									x -= advance * scale;
								}
								batch.drawGlyph$3(glyph.$, new Franca.RectangleF.$ctor3(x + glyph.$.bearingX * scale, y - glyph.$.ascent * scale, glyph.$.texture.source.size.width * scale, glyph.$.texture.source.size.height * scale), glyphTop, glyphBottom, drawStroke, 0, 0);
								glyph.$.region.lastUsed = Franca.Platform.get_time();
								if (halign !== 2) {
									x += (advance + kern) * scale;
								}
								else {
									x -= kern * scale;
								}
							}
						}
						finally {
							if (ss.isValue(enumerator)) {
								enumerator.dispose();
							}
						}
					}
					x = startX;
					y += ((valign !== 2) ? (metrics.get_linespace() * scale) : (-metrics.get_linespace() * scale));
				}
			}
			batch.end();
		},
		get_ready: function() {
			return this.get_loaded();
		},
		get_loaded: function() {
			return this.$1$LoadedField;
		},
		set_loaded: function(value) {
			this.$1$LoadedField = value;
		},
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		load: function(content, file, name, args) {
			this.$file = file;
			var manager = ((args.length > 0) ? ss.cast(args[0], $Franca_SpriteFontManager) : null);
			if (ss.isNullOrUndefined(manager)) {
				manager = content.get_graphicsDevice().get_defaultFontManager();
			}
			if ($Franca_ContentManager.get_$fonts().containsKey(file)) {
				var fontRes = $Franca_ContentManager.get_$fonts().get_item(file);
				if (fontRes.get_loaded()) {
					this.$load$1(fontRes.get_value(), name, manager);
				}
				else {
					this.$load(fontRes, name, manager);
				}
			}
			else {
				this.$load$2(file, name, manager);
			}
		},
		$load$1: function(font, name, manager) {
			this.set_name(name);
			this.init(font, manager);
			this.set_loaded(true);
		},
		$load: function(fontRes, name, manager) {
			this.set_name(name);
			this.$manager = manager;
			this.$fileRes = fontRes;
		},
		$load$2: function(file, name, manager) {
			this.set_name(name);
			this.$manager = manager;
			this.$fileRes = $Franca_File.load($Franca_Font).call(null, file, null, null);
			$Franca_ContentManager.get_$fonts().set_item(file, this.$fileRes);
		},
		finalizeContent: function() {
			if (this.$fileRes.get_loaded() && !this.get_loaded()) {
				var font = this.$fileRes.get_value();
				$Franca_ContentManager.get_$fonts().set_item(this.$file, this.$fileRes);
				this.init(font, this.$manager);
				this.set_loaded(true);
				this.$fileRes = null;
				this.$file = null;
				var onLoad = this.$1$OnLoadField;
				if (!ss.staticEquals(onLoad, null)) {
					onLoad(this);
				}
			}
		},
		get_font: function() {
			return this.$font;
		},
		get_manager: function() {
			return this.$manager;
		},
		get_compressed: function() {
			return this.$manager.get_compressed();
		},
		get_strokeWidth: function() {
			return (ss.isValue(this.$font) ? this.$font.get_strokeWidth() : this.$strokeWidth);
		},
		set_strokeWidth: function(value) {
			if (ss.isNullOrUndefined(this.$font)) {
				this.$strokeWidth = value;
			}
			else {
				this.$font.set_strokeWidth(value);
			}
		}
	}, null, [$Franca_IAsset]);
	$Franca_SpriteFont.$ctor2.prototype = $Franca_SpriteFont.$ctor1.prototype = $Franca_SpriteFont.prototype;
	ss.initClass($Franca_SpriteFontBatch, $asm, {
		dispose$1: function(disposing) {
			if (this.$disposed$1) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				this.$channelBuffer.dispose();
			}
			// Free any unmanaged objects here.
			this.$disposed$1 = true;
			$Franca_SpriteBatch.prototype.dispose$1.call(this, disposing);
		},
		begin$2: function(compressed, sorting, filter, wrapping, effect) {
			var customEffect = (ss.isNullOrUndefined(effect) ? this.get_graphicsDevice().get_builtinAssets().get_fontEffect() : effect);
			$Franca_SpriteBatch.prototype.begin.call(this, sorting, filter, wrapping, customEffect);
			var program = (compressed ? 'compressed' : 'uncompressed');
			if (Enumerable.from(customEffect.get_programs().get_names()).contains(program)) {
				this.set_currentProgram(program);
			}
			else {
				this.set_currentProgram(null);
			}
		},
		begin$1: function(sorting, filter, wrapping, effect) {
			$Franca_SpriteBatch.prototype.begin.call(this, sorting, filter, wrapping, effect);
		},
		drawAll: function() {
			this.$channelBuffer.bind$1(0, this.glVertexOffset);
			$Franca_SpriteBatch.prototype.drawAll.call(this);
			this.$channelBuffer.swapBuffers();
		},
		enableVertexAttributes: function(program, drawCall) {
			$Franca_SpriteBatch.prototype.enableVertexAttributes.call(this, program, drawCall);
			var chanParam;
			var chan = null;
			if ((chanParam = program.getAttribute('inputChannel')).get_isValid()) {
				chan = chanParam.get_location();
			}
			if (ss.isValue(chan)) {
				this.$channelBuffer.enableVertexAttribute($Franca_ShaderParamLocation.op_Implicit$2(chan), $Franca_SpriteFontBatch.channelComponentCount, 0, 0);
			}
		},
		drawGlyph: function(texture, channel, stroke) {
			var redirect = {};
			this.checkFlush(texture, redirect);
			if (ss.isValue(redirect.$)) {
				throw new ss.NotImplementedException();
			}
			var c = channel & 255;
			if (stroke) {
				c++;
			}
			this.$channelBuffer.setData$4(this.vertexOffset * $Franca_SpriteFontBatch.channelComponentCount, c, c, c, c);
		},
		drawGlyph$2: function(glyph, dest, color, stroke, effects, z) {
			var texture = glyph.texture;
			var rect = new Franca.RectangleF.$ctor3(dest.x, dest.y, texture.source.size.width, texture.source.size.height);
			if (!this.intersectionOptimization || rect.intersects$1(0, 0, this.get_graphicsDevice().get_viewport().size.width, this.get_graphicsDevice().get_viewport().size.height)) {
				this.drawGlyph(glyph.texture.baseTex, glyph.channel, stroke);
				this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), rect, $Franca_HdrColors.op_Implicit$1(color), effects, Franca.Vector2.zero, 0, z);
			}
		},
		drawGlyph$1: function(glyph, dest, color, stroke, effects, z) {
			var texture = glyph.texture;
			if (!this.intersectionOptimization || dest.intersects$1(0, 0, this.get_graphicsDevice().get_viewport().size.width, this.get_graphicsDevice().get_viewport().size.height)) {
				this.drawGlyph(glyph.texture.baseTex, glyph.channel, stroke);
				this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), dest, $Franca_HdrColors.op_Implicit$1(color), effects, Franca.Vector2.zero, 0, z);
			}
		},
		drawGlyph$6: function(glyph, dest, color, angle, origin, stroke, effects, z) {
			var texture = glyph.texture;
			var rect = new Franca.RectangleF.$ctor3(dest.x, dest.y, texture.source.size.width, texture.source.size.height);
			if (!this.intersectionOptimization || rect.intersects$1(0, 0, this.get_graphicsDevice().get_viewport().size.width, this.get_graphicsDevice().get_viewport().size.height)) {
				this.drawGlyph(glyph.texture.baseTex, glyph.channel, stroke);
				this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), rect, $Franca_HdrColors.op_Implicit$1(color), effects, origin, angle, z);
			}
		},
		drawGlyph$5: function(glyph, dest, color, angle, origin, stroke, effects, z) {
			var texture = glyph.texture;
			if (!this.intersectionOptimization || dest.intersects$1(0, 0, this.get_graphicsDevice().get_viewport().size.width, this.get_graphicsDevice().get_viewport().size.height)) {
				this.drawGlyph(glyph.texture.baseTex, glyph.channel, stroke);
				this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), dest, $Franca_HdrColors.op_Implicit$1(color), effects, origin, angle, z);
			}
		},
		drawGlyph$4: function(glyph, dest, topColor, bottomColor, stroke, effects, z) {
			var texture = glyph.texture;
			var rect = new Franca.RectangleF.$ctor3(dest.x, dest.y, texture.source.size.width, texture.source.size.height);
			if (!this.intersectionOptimization || rect.intersects$1(0, 0, this.get_graphicsDevice().get_viewport().size.width, this.get_graphicsDevice().get_viewport().size.height)) {
				this.drawGlyph(glyph.texture.baseTex, glyph.channel, stroke);
				topColor = Franca.HdrColor.lerp(topColor, bottomColor, glyph.topAlpha, false);
				bottomColor = Franca.HdrColor.lerp(topColor, bottomColor, glyph.bottomAlpha, false);
				this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), rect, new $Franca_HdrColors.$ctor5(topColor, topColor, bottomColor, bottomColor), effects, Franca.Vector2.zero, 0, z);
			}
		},
		drawGlyph$3: function(glyph, dest, topColor, bottomColor, stroke, effects, z) {
			var texture = glyph.texture;
			if (!this.intersectionOptimization || dest.intersects$1(0, 0, this.get_graphicsDevice().get_viewport().size.width, this.get_graphicsDevice().get_viewport().size.height)) {
				this.drawGlyph(glyph.texture.baseTex, glyph.channel, stroke);
				this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), dest, new $Franca_HdrColors.$ctor5(topColor, topColor, bottomColor, bottomColor), effects, Franca.Vector2.zero, 0, z);
			}
		},
		drawGlyph$8: function(glyph, dest, topColor, bottomColor, angle, origin, stroke, effects, z) {
			var texture = glyph.texture;
			var rect = new Franca.RectangleF.$ctor3(dest.x, dest.y, texture.source.size.width, texture.source.size.height);
			if (!this.intersectionOptimization || rect.intersects$1(0, 0, this.get_graphicsDevice().get_viewport().size.width, this.get_graphicsDevice().get_viewport().size.height)) {
				this.drawGlyph(glyph.texture.baseTex, glyph.channel, stroke);
				this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), rect, new $Franca_HdrColors.$ctor5(topColor, topColor, bottomColor, bottomColor), effects, origin, angle, z);
			}
		},
		drawGlyph$7: function(glyph, dest, topColor, bottomColor, angle, origin, stroke, effects, z) {
			var texture = glyph.texture;
			if (!this.intersectionOptimization || dest.intersects$1(0, 0, this.get_graphicsDevice().get_viewport().size.width, this.get_graphicsDevice().get_viewport().size.height)) {
				this.drawGlyph(glyph.texture.baseTex, glyph.channel, stroke);
				this.drawTextured(texture.baseTex, Franca.Rectangle.op_Implicit(texture.source), dest, new $Franca_HdrColors.$ctor5(topColor, topColor, bottomColor, bottomColor), effects, origin, angle, z);
			}
		}
	}, $Franca_SpriteBatch, [ss.IDisposable]);
	ss.initClass($Franca_SpriteFontGlyph, $asm, {
		get_character: function() {
			return this.codePoint;
		}
	});
	ss.initClass($Franca_SpriteFontManager, $asm, {
		$init: function(textureWidth, textureHeight, maxGlyphSize) {
			if (ss.isValue(this.$glyphsTexture)) {
				this.$glyphsTexture.dispose();
			}
			if (ss.isValue(this.$renderArea)) {
				this.$renderArea.dispose();
			}
			this.$glyphsTexture = new $Franca_Texture.$ctor2(textureWidth, textureHeight, false);
			this.$freeSpace = ss.Int32.div(this.$glyphsTexture.get_width(), 16) * ss.Int32.div(this.$glyphsTexture.get_height(), 16) * this.$glyphsPerPixel;
			this.$maxFreeSpace = this.$freeSpace;
			var renderAreaSize = ((maxGlyphSize <= 0) ? Math.min(Math.min(textureWidth, textureHeight), Math.max(256, ss.Int32.div(Math.max(textureWidth, textureHeight), 4))) : Math.min(Math.min(textureWidth, textureHeight), maxGlyphSize));
			this.$renderArea = new $Franca_Canvas.$ctor3(renderAreaSize, renderAreaSize);
			this.$wipData = new Array(5);
			this.$wipPosition = new Array(5);
			this.$wipChannel = new Array(5);
			this.$wipClaim = new Array(5);
			for (var i = 0; i < this.$wipData.length; i++) {
				var size = Franca.Calc.pow$1(2, i + 4);
				this.$wipPosition[i] = new Franca.Rectangle.$ctor3(0, 0, size, size);
				this.$wipChannel[i] = -1;
			}
			var minWidth = this.$wipPosition[0].size.width;
			var minHeight = this.$wipPosition[0].size.height;
			var maxWidth = this.$wipPosition[this.$wipPosition.length - 1].size.width;
			var maxHeight = this.$wipPosition[this.$wipPosition.length - 1].size.height;
			var xRegions = ss.Int32.div(textureWidth, maxWidth);
			var yRegions = ss.Int32.div(textureHeight, maxHeight);
			this.$regions = ss.multidimArray(null, xRegions, yRegions);
			for (var y = 0; y < yRegions; y++) {
				for (var x = 0; x < xRegions; x++) {
					var $t2 = this.$regions;
					var $t1 = new $Franca_GlyphRegion();
					$t1.x = ss.Int32.div(x * maxWidth, minWidth);
					$t1.y = ss.Int32.div(y * maxHeight, minHeight);
					$t1.width = ss.Int32.div(maxWidth, minWidth);
					$t1.height = ss.Int32.div(maxHeight, minHeight);
					ss.arraySet($t2, x, y, $t1);
				}
			}
			this.$claims = ss.multidimArray(null, ss.Int32.div(textureWidth, 16), ss.Int32.div(textureWidth, 16));
		},
		resizeTexture: function(width, height, maxGlyphSize) {
			if (maxGlyphSize > 0 && !Franca.Calc.isPowerOfTwo(maxGlyphSize)) {
				throw new ss.ArgumentException('Maximum glyph size must be 0 or less, or a power of 2, was ' + maxGlyphSize, 'maxGlyphSize');
			}
			this.invalidate();
			this.$init(width, height, maxGlyphSize);
		},
		invalidate: function() {
			for (var $t1 = 0; $t1 < this.$regions.length; $t1++) {
				var region = this.$regions[$t1];
				this.invalidateRegion(region);
			}
		},
		invalidateRegionLRU: function() {
			var region = Enumerable.from(this.$regions).select(function(x) {
				return ss.cast(x, $Franca_GlyphRegion);
			}).where(function(r) {
				return r.lastUsed.ticks >= 0;
			}).orderBy(function(r1) {
				return r1.lastUsed;
			}).firstOrDefault(null, ss.getDefaultValue($Franca_GlyphRegion));
			if (ss.isNullOrUndefined(region)) {
				throw new ss.InvalidOperationException('Could not find region to invalidate.');
			}
			this.invalidateRegion(region);
		},
		invalidateRegion: function(region) {
			for (var $t1 = 0; $t1 < region.glyphs.length; $t1++) {
				var glyph = region.glyphs[$t1];
				glyph.invalidated = true;
			}
			region.size = 0;
			region.full = false;
			ss.clear(region.glyphs);
			region.lastUsed = new ss.TimeSpan(-1);
			for (var y = region.y; y < region.y + region.height; y++) {
				for (var x = region.x; x < region.x + region.width; x++) {
					ss.arraySet(this.$claims, x, y, null);
				}
			}
			this.$freeSpace += region.width * region.height * this.$glyphsPerPixel;
			for (var i = 0; i < this.$wipClaim.length; i++) {
				if (ss.isValue(this.$wipClaim[i]) && ss.referenceEquals(this.$wipClaim[i].region, region)) {
					this.$wipChannel[i] = -1;
					this.$wipClaim[i] = null;
					this.$wipData[i] = null;
				}
			}
		},
		getStrokeSize: function(font, fontSize) {
			return 250 * (1 / font.get_unitsPerEm() * fontSize) * ((font.get_strokeWidth() >= 0) ? font.get_strokeWidth() : this.$strokeWidth);
		},
		requestGlyph: function(font, glyph, fontSize) {
			return this.$requestGlyph(font, glyph, System.CharExtensions.toStringInvariant(glyph), fontSize);
		},
		requestGlyph$1: function(font, glyph, fontSize) {
			return this.$requestGlyph(font, glyph, Franca.StringHelper.fromCodePoint(glyph), fontSize);
		},
		$requestGlyph: function(font, glyph, glyphStr, fontSize) {
			var fontMetrics = font.getFontMetrics(fontSize);
			var metrics = font.getGlyphMetrics$1(glyph, fontSize);
			if ((metrics.get_width() <= 0 || metrics.get_height() <= 0) && metrics.get_advanceWidth() <= 0) {
				return null;
				// TODO: unicode fallback? something more useful?
			}
			var strokeSize = this.getStrokeSize(font, fontSize);
			var padding = strokeSize * 3;
			var index = {};
			var size = this.sizeFromMetrics(metrics, padding, index);
			var claim;
			// use existing claimed area if one is available, otherwise claim a new one
			if (this.$wipChannel[index.$] < 0) {
				claim = this.claimArea(size);
				if (ss.isNullOrUndefined(claim)) {
					//throw new NotImplementedException("Could not find empty area to claim.");
					return null;
				}
				this.$wipPosition[index.$] = new Franca.Rectangle.$ctor3(claim.x * 16, claim.y * 16, size, size);
				this.$wipChannel[index.$] = 0;
				this.$wipClaim[index.$] = claim;
				this.$wipData[index.$] = new $Franca_CanvasPixelData.$ctor3(size, size, 0);
			}
			else {
				claim = this.$wipClaim[index.$];
			}
			var glyphData;
			var strokeData;
			var glyphRect;
			var glyphAscent;
			// draw glyph
			{
				var context = this.$renderArea.createContext();
				try {
					var ascent = metrics.get_yMax() + padding / 2;
					var descent = -(metrics.get_yMin() - padding / 2);
					var height = Math.ceil(ascent) + Math.ceil(descent);
					var width = Math.ceil(metrics.get_width()) + Math.ceil(padding / 2) * 2;
					var yOffset = Math.ceil(ascent);
					var xOffset = (width - metrics.get_width()) / 2 - metrics.get_bearingX();
					var x = ss.Int32.div(size - width, 2);
					var y = ss.Int32.div(size - height, 2);
					var pos = new Franca.PointF.$ctor2(x + xOffset, y + yOffset);
					context.drawText(font, glyphStr, Franca.Color.white, fontSize, pos, false);
					glyphData = this.$renderArea.getPixelData$1(new Franca.Rectangle.$ctor3(0, 0, this.$wipPosition[index.$].size.width, this.$wipPosition[index.$].size.height));
					context.clear(null);
					context.strokeText(font, glyphStr, Franca.Color.white, fontSize, pos, strokeSize, false);
					strokeData = this.$renderArea.getPixelData$1(new Franca.Rectangle.$ctor3(0, 0, this.$wipPosition[index.$].size.width, this.$wipPosition[index.$].size.height));
					context.clear(null);
					glyphRect = new Franca.Rectangle.$ctor3(x, y, width, height);
					glyphAscent = Math.ceil(ascent);
				}
				finally {
					if (ss.isValue(context)) {
						context.dispose();
					}
				}
			}
			// combine with working canvas
			var canvasData = this.$wipData[index.$];
			var channel = this.$wipChannel[index.$];
			var rgbaChannel = (this.$compressed ? Math.floor(ss.Int32.div(channel, 2)) : channel);
			this.combineData(canvasData, glyphData, strokeData, rgbaChannel);
			// upload data to OpenGL texture
			$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_Texture.op_Implicit(this.$glyphsTexture));
			$Franca_OpenGL_WebGL_GL.texSubImage2D$2($Franca_OpenGL_WebGL_Constants.texturE_2D, 0, this.$wipPosition[index.$].location.x, this.$wipPosition[index.$].location.y, canvasData, false);
			// increase channel, reset area if full
			this.$freeSpace -= Franca.Calc.pow$1(2, index.$ + index.$);
			this.$wipChannel[index.$] += 2;
			if (this.$wipChannel[index.$] >= (this.$compressed ? 8 : 4)) {
				this.$wipChannel[index.$] = -1;
				this.$wipClaim[index.$] = null;
				this.$wipData[index.$] = null;
			}
			var ret = new $Franca_SpriteFontGlyph(new $Franca_SubTexture.$ctor3(this.$glyphsTexture, this.$wipPosition[index.$]), glyph, fontMetrics, metrics, padding, channel, glyphRect, glyphAscent, claim.region);
			claim.region.glyphs.push(ret);
			return ret;
		},
		combineData: function(canvasData, glyphData, strokeData, rgbaChannel) {
			if (this.$compressed) {
				for (var y = 0; y < canvasData.height; y++) {
					for (var x = 0; x < canvasData.width; x++) {
						var final1 = 0;
						var glyphVal = glyphData.data[y * glyphData.stride + x * 4 + 3];
						if (glyphVal > 0) {
							final1 = ss.Int32.div(glyphVal, 16) & 15;
						}
						var strokeVal = strokeData.data[y * strokeData.stride + x * 4 + 3];
						if (strokeVal > 0) {
							var compressedVal = ss.Int32.div(strokeVal, 16) << 4 & 240;
							final1 = final1 | compressedVal;
						}
						canvasData.data[y * canvasData.stride + x * 4 + rgbaChannel] = final1;
					}
				}
			}
			else {
				for (var y1 = 0; y1 < canvasData.height; y1++) {
					for (var x1 = 0; x1 < canvasData.width; x1++) {
						var glyphVal1 = glyphData.data[y1 * glyphData.stride + x1 * 4 + 3];
						var strokeVal1 = strokeData.data[y1 * strokeData.stride + x1 * 4 + 3];
						canvasData.data[y1 * canvasData.stride + x1 * 4 + rgbaChannel] = glyphVal1;
						canvasData.data[y1 * canvasData.stride + x1 * 4 + (rgbaChannel + 1)] = strokeVal1;
					}
				}
			}
		},
		getRegion: function(arrSize) {
			for (var $t1 = 0; $t1 < this.$regions.length; $t1++) {
				var region = this.$regions[$t1];
				if (!region.full) {
					if (region.size === arrSize) {
						return region;
					}
					if (region.size === 0) {
						region.size = arrSize;
						return region;
					}
				}
			}
			return null;
		},
		claimArea: function(size) {
			var arrSize = Math.max(1, ss.Int32.div(size, 16));
			var claim = null;
			var region = this.getRegion(arrSize);
			if (ss.isValue(region)) {
				var regionBottom = region.y + region.height;
				var regionRight = region.x + region.width;
				for (var y = region.y; y <= regionBottom - arrSize; y++) {
					for (var x = region.x; x <= regionRight - arrSize; x++) {
						if (ss.isNullOrUndefined(ss.arrayGet(this.$claims, x, y))) {
							var $t1 = new $Franca_SpriteFontManager$ClaimedRect();
							$t1.x = x;
							$t1.y = y;
							$t1.width = arrSize;
							$t1.height = arrSize;
							$t1.region = region;
							claim = $t1;
							for (var y2 = y; y2 < y + arrSize; y2++) {
								for (var x2 = x; x2 < x + arrSize; x2++) {
									if (ss.isValue(ss.arrayGet(this.$claims, x2, y2))) {
										claim = null;
										x = ss.arrayGet(this.$claims, x2, y2).x + ss.arrayGet(this.$claims, x2, y2).width - 1;
										break;
									}
								}
								if (ss.isNullOrUndefined(claim)) {
									break;
								}
							}
							if (ss.isNullOrUndefined(claim)) {
								continue;
							}
							else {
								if (claim.x + claim.width === regionRight && claim.y + claim.height === regionBottom) {
									region.full = true;
								}
								break;
							}
						}
					}
					if (ss.isValue(claim)) {
						break;
					}
				}
			}
			if (ss.isValue(claim)) {
				for (var y1 = 0; y1 < arrSize; y1++) {
					for (var x1 = 0; x1 < arrSize; x1++) {
						ss.arraySet(this.$claims, x1 + claim.x, y1 + claim.y, claim);
					}
				}
			}
			else if (ss.isValue(region)) {
				region.full = true;
				// technically we're not supposed to get here
				return this.claimArea(size);
			}
			return claim;
		},
		sizeFromMetrics: function(metrics, strokeSize, index) {
			var width = Math.ceil(metrics.get_width() + strokeSize);
			var height = Math.ceil(metrics.get_height() + strokeSize);
			for (var i = 4; i < 9; i++) {
				var size = Franca.Calc.pow$1(2, i);
				if (size >= width && size >= height) {
					index.$ = i - 4;
					return size;
				}
			}
			throw new ss.NotImplementedException('Could not fit glyph.');
		},
		reportFreeSpace: function() {
			return 'Using ' + (this.$maxFreeSpace - this.$freeSpace) + ' of ' + this.$maxFreeSpace + ' glyph regions, ' + this.$freeSpace + ' available (' + ss.Int32.trunc(this.$freeSpace / this.$maxFreeSpace * 100) + '%)';
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				if (ss.isValue(this.$glyphsTexture)) {
					this.$glyphsTexture.dispose();
				}
				if (ss.isValue(this.$renderArea)) {
					this.$renderArea.dispose();
				}
				if (ss.isValue(this.$batch)) {
					this.$batch.dispose();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_fontBatch: function() {
			return this.$batch;
		},
		get_graphicsDevice: function() {
			return this.$graphicsDevice;
		},
		get_freeSpace: function() {
			return this.$freeSpace;
		},
		get_maxFreeSpace: function() {
			return this.$maxFreeSpace;
		},
		get_compressed: function() {
			return this.$compressed;
		},
		get_strokeWidth: function() {
			return this.$strokeWidth;
		},
		set_strokeWidth: function(value) {
			this.$strokeWidth = value;
		},
		get_glyphsTexture: function() {
			return this.$glyphsTexture;
		}
	}, null, [ss.IDisposable]);
	ss.initClass($Franca_SpriteFontManager$ClaimedRect, $asm, {});
	ss.initEnum($Franca_StencilFunc, $asm, { default$1: 0, never: 512, less: 513, lessEqual: 515, greater: 516, greaterEqual: 518, equal: 514, notEqual: 517, always: 519 });
	ss.initEnum($Franca_StencilMode, $asm, { dontCare: 0, enabled: 1, disabled: 2 });
	ss.initEnum($Franca_StencilOp, $asm, { default$1: 0, keep: 7680, zero: 0, replace: 7681, increment: 7682, incrementWrap: 34055, decrement: 7683, decrementWrap: 34056, invert: 5386 });
	ss.initClass($Franca_StencilState, $asm, {
		apply: function() {
			var graphicsDevice = $Franca_GraphicsDevice.get_current() || $Franca_GraphicsDevice.get_default();
			if (ss.isNullOrUndefined(graphicsDevice)) {
				throw new $Franca_GraphicsContextMissingException.$ctor1('Cannot apply StencilState.');
			}
			this.apply$1(graphicsDevice);
		},
		apply$1: function(graphicsDevice) {
			graphicsDevice.applyStencilState(this);
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_StencilState);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).$masks === this.$masks && ss.unbox(b).$funcOps === this.$funcOps;
		},
		equalsT: function(b) {
			return b.$masks === this.$masks && b.$funcOps === this.$funcOps;
		},
		getHashCode: function() {
			return this.$hashcode;
		},
		compareTo: function(other) {
			if (this.$hashcode === other.$hashcode) {
				return 0;
			}
			else if (this.mode === 0 || other.mode === 0) {
				return 0;
			}
			else if (this.$masks > other.$masks) {
				return 1;
			}
			else if (this.$masks < other.$masks) {
				return -1;
			}
			else if (this.$funcOps > other.$funcOps) {
				return 1;
			}
			else if (this.$funcOps < other.$funcOps) {
				return -1;
			}
			else {
				return 0;
			}
		}
	}, null, [ss.IEquatable, ss.IComparable]);
	$Franca_StencilState.$ctor1.prototype = $Franca_StencilState.$ctor2.prototype = $Franca_StencilState.prototype;
	$Franca_StencilState.__class = false;
	ss.initClass($Franca_SubTexture, $asm, {
		replace$1: function(texture, source) {
			this.baseTex = texture;
			this.source = source;
		},
		replace: function(texture, source) {
			this.baseTex = texture.baseTex;
			this.source = new Franca.Rectangle.$ctor3(texture.source.location.x + source.location.x, texture.source.location.y + source.location.y, source.size.width, source.size.height);
		},
		getPixelData: function(rect) {
			if (!ss.isValue(rect)) {
				rect = this.source;
			}
			else {
				rect = new Franca.Rectangle.$ctor3(ss.unbox(rect).location.x + this.source.location.x, ss.unbox(rect).location.y + this.source.location.y, ss.unbox(rect).size.width, ss.unbox(rect).size.height);
			}
			return this.baseTex.getPixelData(ss.unbox(rect));
		},
		get_ready: function() {
			return (ss.isValue(this.baseTex) ? this.baseTex.get_ready() : false);
		},
		get_loaded: function() {
			return (ss.isValue(this.baseTex) ? this.baseTex.get_loaded() : false);
		}
	});
	$Franca_SubTexture.$ctor4.prototype = $Franca_SubTexture.$ctor2.prototype = $Franca_SubTexture.$ctor3.prototype = $Franca_SubTexture.$ctor1.prototype = $Franca_SubTexture.prototype;
	ss.initEnum($Franca_TextureFilter, $asm, { MinLinear: 1, MagLinear: 2, MinNearest: 4, MagNearest: 8, Linear: 3, Nearest: 12, Default: 3 });
	ss.initEnum($Franca_TextureWrap, $asm, { ClampS: 1, ClampT: 2, RepeatS: 4, RepeatT: 8, Clamp: 3, Repeat: 12, Default: 12 });
	ss.initEnum($Franca_VSyncStyle, $asm, { default$1: 0, adaptive: 1 });
	ss.initClass($Franca_$Gif_$GifApplicationExtension$GifApplicationBlock, $asm, {
		$write: function(writer) {
			writer.writeByte(this.$size);
			writer.writeByte(this.$unknown);
			writer.writeUInt16(this.$repeatCount);
			writer.writeByte(0);
		},
		get_$repeatCount: function() {
			return this.$repeatCount;
		},
		set_$repeatCount: function(value) {
			this.$repeatCount = value;
		}
	});
	$Franca_$Gif_$GifApplicationExtension$GifApplicationBlock.$ctor1.prototype = $Franca_$Gif_$GifApplicationExtension$GifApplicationBlock.prototype;
	ss.initEnum($Franca_$Png_$JSPngDecompressor$DecompressorType, $asm, { $none: 0, $puff: 1 });
	ss.initClass($Franca_$Text_WordWrap$WordChunk, $asm, {});
	ss.initEnum($Franca_Audio_$CanPlayMedia, $asm, { $no: 0, $maybe: 1, $probably: 2 });
	ss.initInterface($Franca_Audio_$IAudioProvider, $asm, { get_$defaultAvailableAudioFormats: null, $createContext: null, $setAudioExtension: null, $checkEnded: null, $update: null, $loadSound: null, $loadMusic: null, $loadSound$1: null, $loadSound$2: null, $loadMusic$1: null, $loadMusic$2: null }, [ss.IDisposable]);
	ss.initClass($Franca_Audio_$JSAudio, $asm, {
		get_$defaultAvailableAudioFormats: function() {
			return this.$defaultAvailableFormats;
		},
		$createContext: function() {
			if ($Franca_FrancaFramework.isSupported(2)) {
				this.$webAudioContext = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext || window.oAudioContext)();
			}
		},
		$setAudioExtension: function(availableAudioFormats) {
			var ogg = $Franca_Audio_$JSAudio.$canPlayOgg();
			var mp3 = $Franca_Audio_$JSAudio.$canPlayMp3();
			// 0 is no, 1 is maybe, 2 is probably
			if (ogg === 2 && availableAudioFormats.contains('ogg')) {
				return '.ogg';
			}
			else if (mp3 === 2 && availableAudioFormats.contains('mp3')) {
				return '.mp3';
			}
			if (Franca.Platform.get_type() === 2 || Franca.Platform.get_type() === 4) {
				if (availableAudioFormats.contains('mp3')) {
					return '.mp3';
				}
				else {
					return null;
				}
			}
			else if (Franca.Platform.get_type() === 3 || Franca.Platform.get_type() === 1 || Franca.Platform.get_type() === 5) {
				if (availableAudioFormats.contains('ogg')) {
					return '.ogg';
				}
				else {
					return null;
				}
			}
			else {
				if (ogg === 1 && availableAudioFormats.contains('ogg')) {
					return '.ogg';
				}
				else if (mp3 === 1 && availableAudioFormats.contains('mp3')) {
					return '.mp3';
				}
				return null;
			}
		},
		dispose: function() {
		},
		$update: function() {
		},
		$checkEnded: function(context) {
		},
		$loadSound: function(file) {
			throw new ss.NotImplementedException();
		},
		$loadMusic: function(file) {
			throw new ss.NotImplementedException();
		},
		$loadSound$1: function(manager, data) {
			return this.$loadSound$2(manager, data, $Franca_File.mimeTypeFromFile('foobar' + $Franca_Audio_AudioContext.audioExtension));
		},
		$loadSound$2: function(manager, data, mimeType) {
			if (ss.isNullOrUndefined($Franca_Audio_AudioContext.audioExtension)) {
				var s = new $Franca_Audio_Sound.$ctor1(null);
				if (ss.isValue(manager)) {
					s.attachToManager(manager);
				}
				return s;
			}
			// have to use non-webaudio because decoding audio is done asynchronously
			var virt = ss.formatString('data:{0};base64,{1}', mimeType, Franca.Text.Base64.encode(data));
			var snd = new $Franca_JS_SimpleAudio_StreamedSound.$ctor1(null, virt, false, 2);
			var sound = new $Franca_Audio_Sound.$ctor1(snd);
			if (ss.isValue(manager)) {
				sound.attachToManager(manager);
			}
			return sound;
		},
		$loadMusic$1: function(manager, data) {
			return this.$loadMusic$2(manager, data, $Franca_File.mimeTypeFromFile('foobar' + $Franca_Audio_AudioContext.audioExtension));
		},
		$loadMusic$2: function(manager, data, mimeType) {
			if (ss.isNullOrUndefined($Franca_Audio_AudioContext.audioExtension)) {
				var m = new $Franca_Audio_Music.$ctor1(null);
				if (ss.isValue(manager)) {
					m.attachToManager(manager);
				}
				return m;
			}
			var virt = null;
			if ($Franca_FrancaFramework.isSupported(2)) {
				// if web audio is supported assume we're on a relatively recent browser
				virt = data.toUrl(mimeType);
			}
			else {
				virt = ss.formatString('data:{0};base64,{1}', mimeType, Franca.Text.Base64.encode(data));
			}
			var mus = new $Franca_JS_SimpleAudio_StreamedMusic.$ctor1(null, virt, false);
			var music = new $Franca_Audio_Music.$ctor1(mus);
			if (ss.isValue(manager)) {
				music.attachToManager(manager);
			}
			return music;
		}
	}, null, [ss.IDisposable, $Franca_Audio_$IAudioProvider]);
	ss.initInterface($Franca_Audio_IAudioContext, $asm, { addManager: null, removeManager: null, get_masterVolume: null, set_masterVolume: null }, [ss.IEnumerable, ss.IEnumerable]);
	ss.initClass($Franca_Audio_AudioContext, $asm, {
		addManager: function(manager) {
			this.$managersLock;
			{
				if (!ss.contains(this.$managers, manager)) {
					this.$managers.push(manager);
				}
			}
		},
		removeManager: function(manager) {
			this.$managersLock;
			{
				ss.remove(this.$managers, manager);
			}
		},
		getEnumerator: function() {
			var $result, $state = 0, i;
			return new ss.IteratorBlockEnumerator(function() {
				$sm1:
				for (;;) {
					switch ($state) {
						case 0: {
							$state = -1;
							this.$managersLock;
							i = this.$managers.length - 1;
							$state = 1;
							continue $sm1;
						}
						case 1: {
							$state = -1;
							if (!(i >= 0)) {
								$state = -1;
								break $sm1;
							}
							$result = this.$managers[i];
							$state = 2;
							return true;
						}
						case 2: {
							$state = -1;
							i--;
							$state = 1;
							continue $sm1;
						}
						default: {
							break $sm1;
						}
					}
				}
				return false;
			}, function() {
				return $result;
			}, null, this);
		},
		update: function() {
			if (ss.isValue($Franca_Audio_AudioContext.$platformAudio)) {
				$Franca_Audio_AudioContext.$platformAudio.$update();
			}
		},
		checkEnded: function() {
			if (ss.isValue($Franca_Audio_AudioContext.$platformAudio)) {
				$Franca_Audio_AudioContext.$platformAudio.$checkEnded(this);
			}
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				for (var i = this.$managers.length - 1; i >= 0; i--) {
					this.$managers[i].dispose();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_masterVolume: function() {
			return this.$masterVolume;
		},
		set_masterVolume: function(value) {
			this.$masterVolume = Franca.Calc.clamp$3(value, 0, 1);
			this.$managersLock;
			{
				for (var i = this.$managers.length - 1; i >= 0; i--) {
					var man = this.$managers[i];
					man.set_volume(man.get_volume());
				}
			}
		},
		get_synchronizationObject: function() {
			return this.$managersLock;
		}
	}, null, [ss.IEnumerable, ss.IEnumerable, $Franca_Audio_IAudioContext, ss.IDisposable]);
	ss.initInterface($Franca_Audio_IAudioManager, $asm, { addInstance: null, removeInstance: null, stopAllInstances: null, get_volume: null, set_volume: null, get_context: null }, [ss.IEnumerable, ss.IEnumerable, ss.IDisposable]);
	ss.initClass($Franca_Audio_AudioManager, $asm, {
		stopAllInstances: function() {
			this.$instLock;
			{
				for (var i = this.$instances.length - 1; i >= 0; i--) {
					this.$instances[i].stop();
				}
				ss.clear(this.$instances);
			}
		},
		removeInstance: function(instance) {
			this.$instLock;
			{
				ss.remove(this.$instances, instance);
			}
		},
		addInstance: function(instance) {
			this.$instLock;
			{
				if (!ss.contains(this.$instances, instance)) {
					this.$instances.push(instance);
				}
				while (this.$instances.length > this.$maxInstances) {
					this.$instances[0].stop();
				}
			}
		},
		getEnumerator: function() {
			var $result, $state = 0, i;
			return new ss.IteratorBlockEnumerator(function() {
				$sm1:
				for (;;) {
					switch ($state) {
						case 0: {
							$state = -1;
							this.$instLock;
							i = this.$instances.length - 1;
							$state = 1;
							continue $sm1;
						}
						case 1: {
							$state = -1;
							if (!(i >= 0)) {
								$state = -1;
								break $sm1;
							}
							$result = this.$instances[i];
							$state = 2;
							return true;
						}
						case 2: {
							$state = -1;
							i--;
							$state = 1;
							continue $sm1;
						}
						default: {
							break $sm1;
						}
					}
				}
				return false;
			}, function() {
				return $result;
			}, null, this);
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				for (var i = this.$instances.length - 1; i >= 0; i--) {
					this.$instances[i].stop();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_volume: function() {
			return this.$volume;
		},
		set_volume: function(value) {
			this.$volume = Franca.Calc.clamp$3(value, 0, 1);
			this.$instLock;
			{
				for (var i = this.$instances.length - 1; i >= 0; i--) {
					var inst = this.$instances[i];
					inst.set_volume(inst.get_volume());
				}
			}
		},
		get_context: function() {
			return this.$context;
		},
		get_synchronizationObject: function() {
			return this.$instLock;
		}
	}, null, [ss.IEnumerable, ss.IEnumerable, ss.IDisposable, $Franca_Audio_IAudioManager]);
	ss.initEnum($Franca_Audio_AudioState, $asm, { Stopped: 0, Playing: 1, Paused: 2 });
	ss.initInterface($Franca_Audio_ISoundInstance, $asm, { play: null, stop: null, pause: null, resume: null, get_volume: null, set_volume: null, get_state: null });
	ss.initClass($Franca_Audio_EmptySoundInstance, $asm, {
		play: function() {
		},
		stop: function() {
		},
		pause: function() {
		},
		resume: function() {
		},
		get_volume: function() {
			return 0;
		},
		set_volume: function(value) {
		},
		get_state: function() {
			return 0;
		}
	}, null, [$Franca_Audio_ISoundInstance]);
	ss.initInterface($Franca_Audio_ISound, $asm, { attachToManager: null, get_duration: null, get_manager: null }, [ss.IDisposable]);
	ss.initInterface($Franca_Audio_IBufferedSound, $asm, { play: null }, [ss.IDisposable, $Franca_Audio_ISound]);
	ss.initInterface($Franca_Audio_IStreamedSound, $asm, { play$1: null, get_loopTo: null, set_loopTo: null }, [ss.IDisposable, $Franca_Audio_ISound, $Franca_Audio_ISoundInstance]);
	ss.initClass($Franca_Audio_Music, $asm, {
		play$1: function(volume, loop) {
			this.$setLoopPoint();
			if (ss.isValue(this.stream)) {
				this.stream.play$1(volume, loop);
			}
			else {
				console.log('Attempted to play Music with null stream ' + this.toString());
			}
		},
		play: function() {
			this.play$1(1, false);
		},
		stop: function() {
			if (ss.isValue(this.stream)) {
				this.stream.stop();
			}
		},
		pause: function() {
			if (ss.isValue(this.stream)) {
				this.stream.pause();
			}
		},
		resume: function() {
			this.$setLoopPoint();
			if (ss.isValue(this.stream)) {
				this.stream.resume();
			}
		},
		attachToManager: function(manager) {
			this.$setLoopPoint();
			if (ss.isValue(this.stream)) {
				this.stream.attachToManager(manager);
			}
		},
		$setLoopPoint: function() {
			if (ss.isNullOrUndefined(this.stream)) {
				return;
			}
			if (ss.isValue(this.$bufferedLoopTo)) {
				this.stream.set_loopTo(ss.unbox(this.$bufferedLoopTo));
				this.$bufferedLoopTo = null;
			}
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				if (ss.isValue(this.stream)) {
					this.stream.dispose();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_ready: function() {
			return this.get_loaded();
		},
		get_loaded: function() {
			return this.$1$LoadedField;
		},
		set_loaded: function(value) {
			this.$1$LoadedField = value;
		},
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		load: function(content, file, name, args) {
			this.$load(file, name, ss.cast(args[0], $Franca_Audio_IAudioManager));
		},
		$load: function(file, name, manager) {
			this.set_name(name);
			this.$loadManager = manager;
			this.$fileRes = $Franca_File.load($Franca_Audio_Music).call(null, file, null, null);
		},
		finalizeContent: function() {
			if (this.$fileRes.get_loaded() && !this.get_loaded()) {
				this.stream = this.$fileRes.get_value().stream;
				this.attachToManager(this.$loadManager);
				this.$loadManager = null;
				this.set_loaded(true);
				this.$fileRes = null;
				var onLoad = this.$1$OnLoadField;
				if (!ss.staticEquals(onLoad, null)) {
					onLoad(this);
				}
			}
		},
		get_volume: function() {
			if (ss.isValue(this.stream)) {
				return this.stream.get_volume();
			}
			return 1;
		},
		set_volume: function(value) {
			if (ss.isValue(this.stream)) {
				this.stream.set_volume(value);
			}
		},
		get_loopTo: function() {
			if (ss.isValue(this.stream)) {
				return this.stream.get_loopTo();
			}
			return (ss.isValue(this.$bufferedLoopTo) ? ss.unbox(this.$bufferedLoopTo) : new ss.TimeSpan(0));
		},
		set_loopTo: function(value) {
			if (ss.isValue(this.stream)) {
				this.stream.set_loopTo(value);
				this.$bufferedLoopTo = null;
			}
			else {
				this.$bufferedLoopTo = value;
			}
		},
		get_state: function() {
			return (ss.isValue(this.stream) ? this.stream.get_state() : 0);
		},
		get_duration: function() {
			return (ss.isValue(this.stream) ? this.stream.get_duration() : new ss.TimeSpan(0));
		},
		get_manager: function() {
			return (ss.isValue(this.stream) ? this.stream.get_manager() : (ss.isValue(this.$loadManager) ? this.$loadManager : null));
		}
	}, null, [ss.IDisposable, $Franca_Audio_ISound, $Franca_Audio_ISoundInstance, $Franca_Audio_IStreamedSound, Franca.IFileResult, $Franca_IAsset]);
	$Franca_Audio_Music.$ctor2.prototype = $Franca_Audio_Music.$ctor1.prototype = $Franca_Audio_Music.prototype;
	ss.initClass($Franca_Audio_Sound, $asm, {
		attachToManager: function(manager) {
			if (ss.isValue(this.buffer)) {
				this.buffer.attachToManager(manager);
			}
		},
		play$1: function() {
			return this.play(1, 1, 0, false);
		},
		play: function(volume, pitch, pan, loop) {
			if (ss.isValue(this.buffer)) {
				return this.buffer.play(volume, pitch, pan, loop);
			}
			return $Franca_Audio_Sound.$emptyInstance;
		},
		get_ready: function() {
			return this.get_loaded();
		},
		get_loaded: function() {
			return this.$1$LoadedField;
		},
		set_loaded: function(value) {
			this.$1$LoadedField = value;
		},
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		load: function(content, file, name, args) {
			this.$load(file, name, ss.cast(args[0], $Franca_Audio_IAudioManager));
		},
		$load: function(file, name, manager) {
			this.set_name(name);
			this.$loadManager = manager;
			this.$fileRes = $Franca_File.load($Franca_Audio_Sound).call(null, file, null, null);
		},
		finalizeContent: function() {
			if (this.$fileRes.get_loaded() && !this.get_loaded()) {
				this.buffer = this.$fileRes.get_value().buffer;
				this.attachToManager(this.$loadManager);
				this.$loadManager = null;
				this.set_loaded(true);
				this.$fileRes = null;
				var onLoad = this.$1$OnLoadField;
				if (!ss.staticEquals(onLoad, null)) {
					onLoad(this);
				}
			}
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				if (ss.isValue(this.buffer)) {
					this.buffer.dispose();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_manager: function() {
			return (ss.isValue(this.buffer) ? this.buffer.get_manager() : (ss.isValue(this.$loadManager) ? this.$loadManager : null));
		},
		get_duration: function() {
			return (ss.isValue(this.buffer) ? this.buffer.get_duration() : new ss.TimeSpan(0));
		}
	}, null, [ss.IDisposable, $Franca_Audio_ISound, $Franca_Audio_IBufferedSound, Franca.IFileResult, $Franca_IAsset]);
	$Franca_Audio_Sound.$ctor2.prototype = $Franca_Audio_Sound.$ctor1.prototype = $Franca_Audio_Sound.prototype;
	ss.initClass($Franca_Collections_BinFileCollection, $asm, {
		decompress: function() {
			this.$decompressor = new (ss.makeGenericType(Franca.Resumable$1, [$Franca_Collections_BinFileDecompressor]))(new $Franca_Collections_BinFileDecompressor(this));
			return this.$decompressor;
		},
		$decompressed: function() {
			this.$data = null;
		},
		indexData: function() {
			if (ss.isNullOrUndefined(this.$data)) {
				return;
			}
			var header = Franca.Text.ASCII.fromBinaryData(this.$data, 0, 3, false);
			if (header !== 'BIN' || this.$data.get_item(3) !== 0) {
				throw new Franca.InvalidFormatException.$ctor1('Invalid header, BIN followed by null expected');
			}
			this.$data.seek(4);
			var version = this.$data.readInt32();
			switch (version) {
				default: {
					throw new Franca.InvalidFormatException.$ctor1('Unsupported BIN version ' + System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, version));
				}
				case 0: {
					this.indexV0Data();
					break;
				}
				case 1: {
					this.indexV1Data();
					break;
				}
			}
		},
		indexV0Data: function() {
			var count = this.$data.readInt32();
			for (var i = 0; i < count; i++) {
				var offset = this.$data.readInt32();
				if (offset < 0) {
					throw new Franca.InvalidFormatException.$ctor1('Invalid offset for entry ' + i + ': ' + offset);
				}
				var size = this.$data.readInt32();
				if (size < 0) {
					throw new Franca.InvalidFormatException.$ctor1('Invalid size for entry ' + i + ': ' + size);
				}
				var nameSize = this.$data.readInt32();
				if (nameSize < 0) {
					throw new Franca.InvalidFormatException.$ctor1('Invalid filename size for entry ' + i + ': ' + nameSize);
				}
				var name = Franca.Text.ASCII.fromBinaryData(this.$data, this.$data.get_location(), nameSize, false);
				this.$data.seek(nameSize);
				if (this.$index.containsKey(name)) {
					throw new Franca.InvalidFormatException.$ctor1("Duplicate entry for file '" + name + "'");
				}
				// v0 entries cannot be compressed so set compressed to false
				this.$index.set_item(name, new $Franca_Collections_BinFileEntry(this.$data, name, offset, size, false));
			}
		},
		indexV1Data: function() {
			var count = this.$data.readInt32();
			for (var i = 0; i < count; i++) {
				var offset = this.$data.readInt32();
				if (offset < 0) {
					throw new Franca.InvalidFormatException.$ctor1('Invalid offset for entry ' + i + ': ' + offset);
				}
				var gzipCompressed = this.$data.readByte() !== 0;
				var size = this.$data.readInt32();
				if (size < 0) {
					throw new Franca.InvalidFormatException.$ctor1('Invalid size for entry ' + i + ': ' + size);
				}
				var nameSize = this.$data.readInt32();
				if (nameSize < 0) {
					throw new Franca.InvalidFormatException.$ctor1('Invalid filename size for entry ' + i + ': ' + nameSize);
				}
				var name = Franca.Text.ASCII.fromBinaryData(this.$data, this.$data.get_location(), nameSize, false);
				this.$data.seek(nameSize);
				if (this.$index.containsKey(name)) {
					throw new Franca.InvalidFormatException.$ctor1("Duplicate entry for file '" + name + "'");
				}
				this.$index.set_item(name, new $Franca_Collections_BinFileEntry(this.$data, name, offset, size, gzipCompressed));
			}
		},
		get_item: function(name) {
			return this.$index.get_item(name);
		},
		getEnumerator: function() {
			var $result, $state = 0, $t1, file;
			var $finally = function() {
				$t1.dispose();
			};
			return new ss.IteratorBlockEnumerator(function() {
				$sm1:
				for (;;) {
					switch ($state) {
						case 0: {
							$state = -1;
							$t1 = ss.getEnumerator(this.$index.get_values());
							$state = 3;
							continue $sm1;
						}
						case 3: {
							$state = 1;
							if (!$t1.moveNext()) {
								$state = 2;
								continue $sm1;
							}
							file = $t1.current();
							$result = file;
							$state = 3;
							return true;
						}
						case 2: {
							$state = -1;
							$finally.call(this);
							$state = -1;
							break $sm1;
						}
						default: {
							break $sm1;
						}
					}
				}
				return false;
			}, function() {
				return $result;
			}, function() {
				try {
					switch ($state) {
						case 1:
						case 2:
						case 3: {
							try {
								break;
							}
							finally {
								$finally.call(this);
							}
						}
					}
				}
				finally {
					$state = -1;
				}
			}, this);
		}
	}, null, [ss.IEnumerable, ss.IEnumerable]);
	$Franca_Collections_BinFileCollection.$ctor_fromBinaryData.prototype = $Franca_Collections_BinFileCollection.prototype;
	ss.initClass($Franca_Collections_BinFileDecompressionException, $asm, {}, ss.Exception);
	$Franca_Collections_BinFileDecompressionException.$ctor1.prototype = $Franca_Collections_BinFileDecompressionException.$ctor2.prototype = $Franca_Collections_BinFileDecompressionException.prototype;
	ss.initClass($Franca_Collections_BinFileDecompressor, $asm, {
		start: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, entries, $t1, entry, decompressor;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									entries = Enumerable.from(this.$bin).toArray();
									this.$filesDecompressed = 0;
									this.$filesTotal = entries.length;
									$t1 = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!($t1 < entries.length)) {
										$state = -1;
										break $sm1;
									}
									entry = entries[$t1];
									if (entry.compressed && !entry.get_decompressed()) {
										decompressor = entry.createDecompressor();
										$state = 4;
										continue $sm1;
									}
									$state = 3;
									continue $sm1;
								}
								case 4: {
									$state = -1;
									if (!decompressor.tick()) {
										$state = 3;
										continue $sm1;
									}
									$result = this.$filesDecompressed;
									$state = 4;
									return true;
								}
								case 3: {
									$state = -1;
									this.$filesDecompressed++;
									if (this.$filesDecompressed === this.$filesTotal) {
										this.$bin.$decompressed();
									}
									$result = this.$filesDecompressed;
									$state = 2;
									return true;
								}
								case 2: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		get_progress: function() {
			return this.$filesDecompressed / this.$filesTotal;
		},
		get_completed: function() {
			return this.$filesDecompressed === this.$filesTotal;
		}
	}, null, [Franca.IResumable]);
	ss.initClass($Franca_Collections_BinFileEntry, $asm, {
		read: function() {
			if (this.compressed) {
				if (!this.$decompressed) {
					this.decompress();
				}
				return this.$decompressedData;
			}
			else if (this.offset !== 0 || this.size !== this.get_data().get_length()) {
				return this.get_data().slice(this.offset, this.size);
			}
			else {
				return this.get_data();
			}
		},
		createDecompressor: function() {
			if (this.$decompressed) {
				throw new $Franca_Collections_BinFileDecompressionException.$ctor1('BinFileEntry was already decompressed');
			}
			var decompressor = Franca.Compression.GZip.beginInflate(this.get_data(), this.offset, this.size);
			decompressor.add_onFinish(ss.mkdel(this, this.$finishedDecompressing));
			return decompressor;
		},
		$finishedDecompressing: function(decompressor) {
			this.$decompressedData = decompressor.get_value().get_result();
			this.$decompressed = true;
			this.$data = null;
		},
		decompress: function() {
			if (this.$decompressed) {
				return;
			}
			this.$decompressedData = Franca.Compression.GZip.inflate(this.get_data(), this.offset, this.size);
			this.$decompressed = true;
			this.$data = null;
		},
		toString: function() {
			if (this.compressed) {
				if (this.get_decompressed()) {
					return ss.formatString('[{0}: {1}, size: {2}, uncompressed]', Object.prototype.toString.call(this), this.name, this.get_data().get_length());
				}
				else {
					return ss.formatString('[{0}: {1}, offset: {2}, size: {3}, compressed]', Object.prototype.toString.call(this), this.name, this.offset, this.size);
				}
			}
			else {
				return ss.formatString('[{0}: {1}, offset: {2}, size: {3}]', Object.prototype.toString.call(this), this.name, this.offset, this.size);
			}
		},
		get_data: function() {
			return this.$data || this.$decompressedData;
		},
		get_decompressed: function() {
			return this.$decompressed;
		}
	});
	ss.initClass($Franca_DrawBucketing_BucketBatch, $asm, {
		getHashCode: function() {
			var h = (this.vertexData ? ss.getHashCode(this.vertexData) : 0);
			h = h * 397 ^ (this.indexData ? ss.getHashCode(this.indexData) : 0);
			h = h * 397 ^ (this.calls ? ss.getHashCode(this.calls) : 0);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_DrawBucketing_BucketBatch)) {
				return false;
			}
			return ss.equals(this.vertexData, o.vertexData) && ss.equals(this.indexData, o.indexData) && ss.equals(this.calls, o.calls);
		}
	});
	$Franca_DrawBucketing_BucketBatch.$ctor1.prototype = $Franca_DrawBucketing_BucketBatch.prototype;
	$Franca_DrawBucketing_BucketBatch.__class = false;
	ss.initClass($Franca_DrawBucketing_BucketBatchCall, $asm, {
		getHashCode: function() {
			var h = this.indexOffset;
			h = h * 397 ^ this.elements;
			h = h * 397 ^ this.callIndex;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_DrawBucketing_BucketBatchCall)) {
				return false;
			}
			return this.indexOffset === o.indexOffset && this.elements === o.elements && this.callIndex === o.callIndex;
		}
	});
	$Franca_DrawBucketing_BucketBatchCall.$ctor1.prototype = $Franca_DrawBucketing_BucketBatchCall.prototype;
	$Franca_DrawBucketing_BucketBatchCall.__class = false;
	ss.initInterface($Franca_DrawBucketing_IDrawCall, $asm, { canMergeWith: null, drawElements: null, setData: null, get_vertexComponents: null, get_indexType: null, get_vertexCount: null, get_indexCount: null, get_vertexSpec: null }, [ss.IComparable]);
	ss.initClass($Franca_DrawBucketing_CallBatch, $asm, {
		canMergeWith: function(next) {
			if (this.$calls.length === 0) {
				return false;
			}
			var batch = ss.safeCast(next, $Franca_DrawBucketing_CallBatch);
			if (ss.isValue(batch)) {
				if (batch.$calls.length === 0) {
					return false;
				}
				return this.$calls[0].canMergeWith(batch.$calls[0]);
			}
			return this.$calls[0].canMergeWith(next);
		},
		compareTo: function(other) {
			if (this.$calls.length === 0) {
				return 0;
			}
			var batch = ss.safeCast(other, $Franca_DrawBucketing_CallBatch);
			if (ss.isValue(batch)) {
				if (batch.$calls.length === 0) {
					return 0;
				}
				return ss.compare(this.$calls[0], batch.$calls[0]);
			}
			return ss.compare(this.$calls[0], other);
		},
		drawElements: function(elements, indexOffsetBytes) {
			if (this.$calls.length === 0) {
				return;
			}
			this.$calls[0].drawElements(elements, indexOffsetBytes);
		},
		setData: function(vertex, index, vertexIndex) {
			for (var i = 0; i < this.$calls.length; i++) {
				this.$calls[i].setData(vertex, index, vertexIndex);
				vertexIndex += this.$calls[i].get_vertexCount();
			}
		},
		add: function(call) {
			if (this.$calls.length === 0) {
				this.$maxVertices = ((this.$indexType === 0) ? 65535 : 2147483647);
				this.$indexType = call.get_indexType();
				this.$vertexSpec = call.get_vertexSpec();
			}
			this.$calls.push(call);
			this.$vertexComponents += call.get_vertexComponents();
			this.$vertexCount += call.get_vertexCount();
			this.$indexCount += call.get_indexCount();
		},
		clear: function() {
			ss.clear(this.$calls);
			this.$vertexComponents = 0;
			this.$vertexCount = 0;
			this.$indexCount = 0;
			this.$maxVertices = 1024;
			this.$indexType = 0;
			this.$vertexSpec = null;
		},
		get_vertexComponents: function() {
			return this.$vertexComponents;
		},
		get_vertexCount: function() {
			return this.$vertexCount;
		},
		get_indexCount: function() {
			return this.$indexCount;
		},
		get_indexType: function() {
			return this.$indexType;
		},
		get_vertexSpec: function() {
			return this.$vertexSpec;
		}
	}, null, [ss.IComparable, $Franca_DrawBucketing_IDrawCall]);
	ss.initClass($Franca_DrawBucketing_DrawBucket, $asm, {
		add: function(item) {
			this.$calls.push(item);
		},
		clear: function() {
			ss.clear(this.$calls);
		},
		sort: function() {
			this.$calls.sort();
		},
		setData: function(call, indexData, vertices) {
			// resize if either buffer won't fit
			while (this.$vertexData.offset + call.get_vertexComponents() >= this.$vertexData.get_$length()) {
				this.$vertexData.$resize(this.$vertexData.get_$length() * 2);
			}
			while (indexData.offset + call.get_indexCount() >= indexData.get_length()) {
				indexData.resize(indexData.get_length() * 2);
			}
			// set our data
			call.setData(this.$vertexData, indexData, vertices);
		},
		getBatches: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, indexData, i, elements, elementOffset, vertices, call, canMerge;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									ss.clear(this.$drawCalls);
									i = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!(i < this.$calls.length)) {
										$state = -1;
										break $sm1;
									}
									// reset our stuff
									elements = 0;
									elementOffset = 0;
									vertices = 0;
									this.$vertexData.offset = 0;
									this.$indexDataUInt.offset = 0;
									this.$indexDataUShort.offset = 0;
									// set our index buffer depending on type
									indexData = ((this.$calls[i].get_indexType() === 0) ? this.$indexDataUShort : this.$indexDataUInt);
									// set data until either we run out of calls or something happens
									// if we can't merge calls, we need to add a BucketBatchCall
									// that will end a batch. things that will end a batch:
									// - different index buffer type
									// - number of vertices exceed capacity of index buffer type
									// - vertex specs are incompatible
									while (i < this.$calls.length) {
										call = this.$calls[i];
										// check to see if this call is a different index type
										if (call.get_indexType() !== indexData.type) {
											break;
										}
										// check to see if we're overflowing the index buffer type
										if (vertices + call.get_vertexCount() > indexData.get_maxVertices()) {
											if (vertices === 0) {
												throw new System.OverflowException.$ctor1(ss.formatString('IDrawCall contained {0} vertices but has an index buffer which holds at most {1}.', call.get_vertexCount(), indexData.get_maxVertices()));
											}
											break;
										}
										// add our data
										this.setData(call, indexData, vertices);
										vertices += call.get_vertexCount();
										elements += call.get_indexCount();
										// check if we can merge, if we can't we need to add a draw call
										canMerge = i < this.$calls.length - 1 && call.canMergeWith(this.$calls[i + 1]);
										if (!canMerge) {
											this.$drawCalls.push(new $Franca_DrawBucketing_BucketBatchCall.$ctor1(elementOffset, elements, i));
											// set elements back to 0 because we're starting a new draw call
											elements = 0;
											// set elementOffset to where we are in the index array now for next draw call
											elementOffset = indexData.get_byteOffset();
										}
										i++;
										// check if vertex specs match
										// TODO(Eni, Medium): specs can match even if their references don't, implement?
										if (i < this.$calls.length && !ss.referenceEquals(call.get_vertexSpec(), this.$calls[i].get_vertexSpec())) {
											break;
										}
									}
									$result = new $Franca_DrawBucketing_BucketBatch.$ctor1(this.$vertexData, indexData, this.$drawCalls);
									$state = 2;
									return true;
								}
								case 2: {
									$state = -1;
									ss.clear(this.$drawCalls);
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		$initGLBuffers: function() {
			for (var i = 0; i < $Franca_DrawBucketing_DrawBucket.$bufferCount; i++) {
				$Franca_OpenGL_WebGL_GL.bindBuffer(34962, this.$vertexBuffers[i]);
				$Franca_OpenGL_WebGL_GL.bufferDataNull(34962, this.$maxVertexBufferSize, this.bufferUsage);
			}
			for (var i1 = 0; i1 < $Franca_DrawBucketing_DrawBucket.$bufferCount; i1++) {
				$Franca_OpenGL_WebGL_GL.bindBuffer(34963, this.$indexBuffers[i1]);
				$Franca_OpenGL_WebGL_GL.bufferDataNull(34963, this.$maxIndexBufferSize, this.bufferUsage);
			}
		},
		$resizeGLBuffers: function(vertexSize, indexSize) {
			if (vertexSize > this.$maxVertexBufferSize) {
				while (vertexSize > this.$maxVertexBufferSize) {
					this.$maxVertexBufferSize *= 2;
				}
				// resize our buffers
				for (var i = 0; i < $Franca_DrawBucketing_DrawBucket.$bufferCount; i++) {
					$Franca_OpenGL_WebGL_GL.bindBuffer(34962, this.$vertexBuffers[i]);
					$Franca_OpenGL_WebGL_GL.bufferDataNull(34962, this.$maxVertexBufferSize, this.bufferUsage);
				}
				console.log('Bucket vertex buffer size: ' + this.$maxVertexBufferSize);
			}
			if (indexSize > this.$maxIndexBufferSize) {
				while (indexSize > this.$maxIndexBufferSize) {
					this.$maxIndexBufferSize *= 2;
				}
				// resize our buffers
				for (var i1 = 0; i1 < $Franca_DrawBucketing_DrawBucket.$bufferCount; i1++) {
					$Franca_OpenGL_WebGL_GL.bindBuffer(34963, this.$indexBuffers[i1]);
					$Franca_OpenGL_WebGL_GL.bufferDataNull(34963, this.$maxIndexBufferSize, this.bufferUsage);
				}
				console.log('Bucket index buffer size: ' + this.$maxIndexBufferSize);
			}
		},
		swapBuffers: function() {
			this.$curBuffer++;
			if (this.$curBuffer >= $Franca_DrawBucketing_DrawBucket.$bufferCount) {
				this.$curBuffer = 0;
			}
		},
		draw: function() {
			// save blendfunc and equation
			var srcRgb = $Franca_OpenGL_WebGL_GL.getParameter(32969);
			var dstRgb = $Franca_OpenGL_WebGL_GL.getParameter(32968);
			var srcAlpha = $Franca_OpenGL_WebGL_GL.getParameter(32971);
			var dstAlpha = $Franca_OpenGL_WebGL_GL.getParameter(32970);
			var equationRgb = $Franca_OpenGL_WebGL_GL.getParameter(32777);
			var equationAlpha = $Franca_OpenGL_WebGL_GL.getParameter(34877);
			this.set_batchCount(0);
			this.set_drawCallCount(0);
			var $t1 = ss.getEnumerator(this.getBatches());
			try {
				while ($t1.moveNext()) {
					var batch = $t1.current();
					var swapBuffers = false;
					// if either of these is 0 we consider this an empty draw call
					if (batch.vertexData.get_$byteOffset() > 0 && batch.indexData.get_byteOffset() > 0) {
						// make sure our OpenGL buffers are big enough to hold the data
						this.$resizeGLBuffers(batch.vertexData.get_$byteLength(), batch.indexData.get_byteLength());
						// upload data to buffers using subdata
						$Franca_OpenGL_WebGL_GL.bindBuffer(34962, this.get_currentVertexBuffer());
						$Franca_OpenGL_WebGL_GL.bufferSubData$l(34962, 0, batch.vertexData.get_$byteOffset(), batch.vertexData);
						$Franca_OpenGL_WebGL_GL.bindBuffer(34963, this.get_currentIndexBuffer());
						$Franca_OpenGL_WebGL_GL.bufferSubData$k(34963, 0, batch.indexData.get_byteOffset(), batch.indexData);
						// swap our buffers cause we did modify them
						swapBuffers = true;
					}
					// call DrawElements on all the things
					// we still call this on potentially empty calls because they still might do something
					for (var $t2 = 0; $t2 < batch.calls.length; $t2++) {
						var call = batch.calls[$t2];
						var c = this.$calls[call.callIndex];
						c.drawElements(call.elements, call.indexOffset);
						this.set_drawCallCount(this.get_drawCallCount() + 1);
					}
					if (swapBuffers) {
						this.swapBuffers();
					}
					this.set_batchCount(this.get_batchCount() + 1);
				}
			}
			finally {
				$t1.dispose();
			}
			// restore blendfunc
			$Franca_OpenGL_WebGL_GL.blendFuncSeparate(srcRgb, dstRgb, srcAlpha, dstAlpha);
			$Franca_OpenGL_WebGL_GL.blendEquationSeparate(equationRgb, equationAlpha);
		},
		get_item: function(index) {
			return this.$calls[index];
		},
		set_item: function(index, value) {
			this.$calls[index] = value;
		},
		get_batchCount: function() {
			return this.$1$BatchCountField;
		},
		set_batchCount: function(value) {
			this.$1$BatchCountField = value;
		},
		get_drawCallCount: function() {
			return this.$1$DrawCallCountField;
		},
		set_drawCallCount: function(value) {
			this.$1$DrawCallCountField = value;
		},
		getEnumerator: function() {
			return ss.getEnumerator(this.$calls);
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				// Free GL resources here to prevent destructor from calling this
				$Franca_OpenGL_WebGL_GL.deleteBuffers(this.$vertexBuffers);
				$Franca_OpenGL_WebGL_GL.deleteBuffers(this.$indexBuffers);
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_currentVertexBuffer: function() {
			return this.$vertexBuffers[this.$curBuffer];
		},
		get_currentIndexBuffer: function() {
			return this.$indexBuffers[this.$curBuffer];
		},
		get_count: function() {
			return this.$calls.length;
		}
	}, null, [ss.IEnumerable, ss.IEnumerable, ss.IDisposable]);
	$Franca_DrawBucketing_DrawBucket.$ctor1.prototype = $Franca_DrawBucketing_DrawBucket.$ctor2.prototype = $Franca_DrawBucketing_DrawBucket.prototype;
	ss.initClass($Franca_DrawBucketing_DrawCall64, $asm, {
		get_key: function() {
			return this.$key;
		},
		compareTo: function(other) {
			var call = ss.safeCast(other, $Franca_DrawBucketing_DrawCall64);
			if (ss.isNullOrUndefined(call)) {
				throw new ss.InvalidOperationException('Cannot compare IDrawCall: was not a DrawCall64');
			}
			return this.$key.compareTo(call.$key);
		},
		drawElements: function(elements, indexOffsetBytes) {
			$Franca_OpenGL_WebGL_GL.drawElements($Franca_OpenGL_WebGL_Constants.TRIANGLES, elements, $Franca_OpenGL_WebGL_Constants.unsigneD_SHORT, indexOffsetBytes);
		},
		canMergeWith: null,
		setData: null,
		get_vertexComponents: null,
		get_indexType: null,
		get_vertexCount: null,
		get_indexCount: null,
		get_vertexSpec: null
	}, null, [ss.IComparable, $Franca_DrawBucketing_IDrawCall]);
	ss.initInterface($Franca_DrawBucketing_IDrawKey, $asm, { packValue: null, clear: null });
	ss.initClass($Franca_DrawBucketing_DrawKey64, $asm, {
		packValue$1: function(normalized, bitIndex, bitCount) {
			var maxInt = $Franca_DrawBucketing_DrawKey64.$bitCountMask[bitCount - 1];
			this.packValue(ss.Int32.trunc(normalized * maxInt), bitIndex, bitCount);
		},
		packValue$3: function(value, bitIndex, bitCount, min, max) {
			value = Franca.Calc.clamp$3((value - min) / max, 0, 1);
			this.packValue$1(value, bitIndex, bitCount);
		},
		packValue$2: function(value, bitIndex, bitCount) {
			this.packValue(ss.Int32.trunc(value - -2147483648), bitIndex, bitCount);
		},
		packValue: function(value, bitIndex, bitCount) {
			value &= $Franca_DrawBucketing_DrawKey64.$bitCountMask[bitCount - 1];
			if (bitIndex >= 32) {
				// fits entirely into upper32 bits
				this.$upper32 |= value << bitIndex - 32;
			}
			else if (bitIndex + bitCount <= 32) {
				// fits entirely into lower32 bits
				this.$lower32 |= value << bitIndex;
			}
			else {
				// split across values
				var lowerCount = 32 - bitIndex;
				var upperCount = bitCount - lowerCount;
				var lowerVal = value & $Franca_DrawBucketing_DrawKey64.$bitCountMask[lowerCount - 1];
				var upperVal = value >>> lowerCount;
				this.$lower32 |= lowerVal << bitIndex;
				this.$upper32 |= upperVal;
			}
		},
		compareTo: function(other) {
			if (this.$upper32 > other.$upper32) {
				return 1;
			}
			else if (this.$upper32 < other.$upper32) {
				return -1;
			}
			if (this.$lower32 > other.$lower32) {
				return 1;
			}
			else if (this.$lower32 < other.$lower32) {
				return -1;
			}
			return 0;
		},
		clear: function() {
			this.$lower32 = 0;
			this.$upper32 = 0;
		},
		toStringBits: function() {
			var mask;
			var str = new ss.StringBuilder();
			mask = 2147483648;
			for (var i = 0; i < 32; i++) {
				if (i > 0 && i % 8 === 0) {
					str.appendChar(32);
				}
				str.appendChar((((this.$upper32 & mask) === 0) ? 48 : 49));
				mask >>>= 1;
			}
			mask = 2147483648;
			for (var i1 = 0; i1 < 32; i1++) {
				if (i1 % 8 === 0) {
					str.appendChar(32);
				}
				str.appendChar((((this.$lower32 & mask) === 0) ? 48 : 49));
				mask >>>= 1;
			}
			return str.toString();
		}
	}, null, [$Franca_DrawBucketing_IDrawKey, ss.IComparable]);
	ss.initClass($Franca_DrawBucketing_Material, $asm, {
		toString: function() {
			return ss.formatString('{0}({1})', ss.getTypeName(ss.getInstanceType(this)), this.id);
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_DrawBucketing_Material);
			if (ss.isValue(b)) {
				return Franca.IncrementalID.op_Equality(this.id, b.id);
			}
			return false;
		},
		equalsT: function(b) {
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return Franca.IncrementalID.op_Equality(this.id, b.id);
		},
		getHashCode: function() {
			return this.id.getHashCode();
		}
	}, null, [ss.IEquatable]);
	$Franca_DrawBucketing_Material.$ctor1.prototype = $Franca_DrawBucketing_Material.$ctor2.prototype = $Franca_DrawBucketing_Material.prototype;
	ss.initEnum($Franca_DrawBucketing_OpacityType, $asm, { opaque: 0, alphaBlend: 1, add: 2, multiply: 3 });
	ss.initClass($Franca_DrawBucketing_ProgramUniform, $asm, {
		getHashCode: function() {
			var h = (this.name ? ss.getHashCode(this.name) : 0);
			h = h * 397 ^ (this.value ? ss.getHashCode(this.value) : 0);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_DrawBucketing_ProgramUniform)) {
				return false;
			}
			return ss.equals(this.name, o.name) && ss.equals(this.value, o.value);
		}
	});
	$Franca_DrawBucketing_ProgramUniform.$ctor1.prototype = $Franca_DrawBucketing_ProgramUniform.prototype;
	$Franca_DrawBucketing_ProgramUniform.__class = false;
	ss.initClass($Franca_DrawBucketing_ProgramUniforms, $asm, {
		clone$1: function() {
			return new $Franca_DrawBucketing_ProgramUniforms(this);
		},
		clone: function() {
			return this.clone$1();
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_DrawBucketing_ProgramUniforms);
			if (ss.isValue(b)) {
				if (!ss.referenceEquals(this.program, b.program) || !ss.referenceEquals(this.defaultUniforms, b.defaultUniforms)) {
					return false;
				}
				if (this.customUniforms.get_count() === 0 && b.customUniforms.get_count() === 0) {
					return true;
				}
				else if (ss.referenceEquals(this.customUniforms, b.customUniforms)) {
					return true;
				}
			}
			return false;
		},
		equalsT: function(b) {
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			if (!ss.referenceEquals(this.program, b.program) || !ss.referenceEquals(this.defaultUniforms, b.defaultUniforms)) {
				return false;
			}
			if (this.customUniforms.get_count() === 0 && b.customUniforms.get_count() === 0) {
				return true;
			}
			else if (ss.referenceEquals(this.customUniforms, b.customUniforms)) {
				return true;
			}
			return false;
		},
		getHashCode: function() {
			return ss.getHashCode(this.program) ^ (ss.isValue(this.defaultUniforms) ? ss.getHashCode(this.defaultUniforms) : 0) ^ (ss.isValue(this.customUniforms) ? ss.getHashCode(this.customUniforms) : 0);
		}
	}, null, [System.ICloneable, ss.IEquatable]);
	$Franca_DrawBucketing_ProgramUniforms.$ctor1.prototype = $Franca_DrawBucketing_ProgramUniforms.prototype;
	ss.initClass($Franca_DrawBucketing_Sampler, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_DrawBucketing_Sampler);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.referenceEquals(this.name, ss.unbox(b).name) && this.index === ss.unbox(b).index;
		},
		equalsT: function(b) {
			return ss.referenceEquals(this.name, b.name) && this.index === b.index;
		},
		getHashCode: function() {
			return ss.getHashCode(this.name) ^ ss.getHashCode(this.index);
		}
	}, null, [ss.IEquatable]);
	$Franca_DrawBucketing_Sampler.$ctor1.prototype = $Franca_DrawBucketing_Sampler.prototype;
	$Franca_DrawBucketing_Sampler.__class = false;
	ss.initClass($Franca_DrawBucketing_SamplerState, $asm, {
		set: function(effect) {
			effect.get_item(this.sampler.name).setSampler(this.sampler.index);
			$Franca_OpenGL_WebGL_GL.activeTexture($Franca_OpenGL_WebGL_Constants.texturE0 + this.sampler.index);
			$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_Texture.op_Implicit(this.texture));
			var magFilter, minFilter, wrapS, wrapT;
			var linearMinFilter = (this.texture.get_mipmapped() ? $Franca_OpenGL_WebGL_Constants.lineaR_MIPMAP_LINEAR : $Franca_OpenGL_WebGL_Constants.LINEAR);
			var nearestMinFilter = (this.texture.get_mipmapped() ? $Franca_OpenGL_WebGL_Constants.nearesT_MIPMAP_NEAREST : $Franca_OpenGL_WebGL_Constants.NEAREST);
			if (this.filter === 12) {
				magFilter = $Franca_OpenGL_WebGL_Constants.NEAREST;
				minFilter = nearestMinFilter;
			}
			else if (this.filter === 3) {
				magFilter = $Franca_OpenGL_WebGL_Constants.LINEAR;
				minFilter = linearMinFilter;
			}
			else {
				if (System.EnumExtensions.hasFlag(this.filter, 1)) {
					minFilter = linearMinFilter;
				}
				else {
					minFilter = nearestMinFilter;
				}
				if (System.EnumExtensions.hasFlag(this.filter, 2)) {
					magFilter = $Franca_OpenGL_WebGL_Constants.LINEAR;
				}
				else {
					magFilter = $Franca_OpenGL_WebGL_Constants.NEAREST;
				}
			}
			if (!this.texture.get_isPowerOfTwo()) {
				wrapT = wrapS = $Franca_OpenGL_WebGL_Constants.clamP_TO_EDGE;
			}
			else if (this.wrap === 12) {
				wrapT = wrapS = $Franca_OpenGL_WebGL_Constants.REPEAT;
			}
			else if (this.wrap === 3) {
				wrapT = wrapS = $Franca_OpenGL_WebGL_Constants.clamP_TO_EDGE;
			}
			else {
				if (System.EnumExtensions.hasFlag(this.wrap, 1)) {
					wrapS = $Franca_OpenGL_WebGL_Constants.clamP_TO_EDGE;
				}
				else {
					wrapS = $Franca_OpenGL_WebGL_Constants.REPEAT;
				}
				if (System.EnumExtensions.hasFlag(this.wrap, 2)) {
					wrapT = $Franca_OpenGL_WebGL_Constants.clamP_TO_EDGE;
				}
				else {
					wrapT = $Franca_OpenGL_WebGL_Constants.REPEAT;
				}
			}
			$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_MAG_FILTER, magFilter);
			$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_MIN_FILTER, minFilter);
			$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_WRAP_S, wrapS);
			$Franca_OpenGL_WebGL_GL.texParameter($Franca_OpenGL_WebGL_Constants.texturE_2D, $Franca_OpenGL_WebGL_Constants.texturE_WRAP_T, wrapT);
		},
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_DrawBucketing_SamplerState);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return $Franca_DrawBucketing_Sampler.op_Equality(this.sampler, ss.unbox(b).sampler) && ss.referenceEquals(this.texture, ss.unbox(b).texture) && this.filter === ss.unbox(b).filter && this.wrap === ss.unbox(b).wrap;
		},
		equalsT: function(b) {
			return $Franca_DrawBucketing_Sampler.op_Equality(this.sampler, b.sampler) && ss.referenceEquals(this.texture, b.texture) && this.filter === b.filter && this.wrap === b.wrap;
		},
		getHashCode: function() {
			return this.sampler.getHashCode() ^ ss.getHashCode(this.texture);
		}
	}, null, [ss.IEquatable]);
	$Franca_DrawBucketing_SamplerState.$ctor1.prototype = $Franca_DrawBucketing_SamplerState.prototype;
	$Franca_DrawBucketing_SamplerState.__class = false;
	ss.initClass($Franca_DrawBucketing_TexturedDrawCall, $asm, {
		canMergeWith: function(next) {
			var b = ss.safeCast(next, $Franca_DrawBucketing_TexturedDrawCall);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return this.canMergeWith$1(b);
		},
		canMergeWith$1: function(next) {
			if (next.get_opacity() !== this.get_opacity()) {
				return false;
			}
			if (this.get_opacity() === 1 && this.depth > next.depth) {
				return false;
			}
			return $Franca_DrawBucketing_Material.op_Equality(next.material, this.material);
		},
		drawElements: function(elements, indexOffsetBytes) {
			switch (this.get_opacity()) {
				case 1:
				case 0: {
					$Franca_OpenGL_WebGL_GL.blendFunc($Franca_OpenGL_WebGL_Constants.ONE, $Franca_OpenGL_WebGL_Constants.onE_MINUS_SRC_ALPHA);
					$Franca_OpenGL_WebGL_GL.blendEquation($Franca_OpenGL_WebGL_Constants.funC_ADD);
					break;
				}
				case 2: {
					$Franca_OpenGL_WebGL_GL.blendFunc($Franca_OpenGL_WebGL_Constants.ONE, $Franca_OpenGL_WebGL_Constants.ONE);
					$Franca_OpenGL_WebGL_GL.blendEquation($Franca_OpenGL_WebGL_Constants.funC_ADD);
					break;
				}
				case 3: {
					$Franca_OpenGL_WebGL_GL.blendFunc($Franca_OpenGL_WebGL_Constants.dsT_COLOR, $Franca_OpenGL_WebGL_Constants.onE_MINUS_SRC_ALPHA);
					$Franca_OpenGL_WebGL_GL.blendEquation($Franca_OpenGL_WebGL_Constants.funC_ADD);
					break;
				}
			}
			var type = ((this.get_indexType() === 0) ? $Franca_OpenGL_WebGL_Constants.unsigneD_SHORT : $Franca_OpenGL_WebGL_Constants.unsigneD_INT);
			$Franca_OpenGL_WebGL_GL.drawElements($Franca_OpenGL_WebGL_Constants.TRIANGLES, elements, type, indexOffsetBytes);
		},
		compareTo: null,
		setData: null,
		get_vertexComponents: null,
		get_indexType: null,
		get_vertexCount: null,
		get_indexCount: null,
		get_vertexSpec: null,
		toString: function() {
			return ss.formatString('{0}({1}, {2}, {3})', ss.getTypeName(ss.getInstanceType(this)), this.material, this.get_opacity(), this.depth);
		},
		get_opacity: function() {
			if (ss.isValue(this.$opacity)) {
				return ss.unbox(this.$opacity);
			}
			return this.material.opacity;
		},
		set_opacity: function(value) {
			this.$opacity = value;
		}
	}, null, [ss.IComparable, $Franca_DrawBucketing_IDrawCall]);
	ss.initClass($Franca_DrawBucketing_ScreenSprite, $asm, {
		canMergeWith$1: function(next) {
			var sprite = ss.safeCast(next, $Franca_DrawBucketing_ScreenSprite);
			if (ss.isValue(sprite) && $Franca_StencilState.op_Inequality(sprite.stencilState, this.stencilState)) {
				// add other conditions with || inside the parentheses
				return false;
			}
			return $Franca_DrawBucketing_TexturedDrawCall.prototype.canMergeWith$1.call(this, next);
		},
		compareTo: function(other) {
			var sprite = ss.safeCast(other, $Franca_DrawBucketing_ScreenSprite);
			if (ss.isNullOrUndefined(sprite)) {
				throw new ss.NotImplementedException(ss.formatString('Could not compare {0} to {1}: was not of type {0}', ss.getTypeName(ss.getInstanceType(this)), ss.getTypeName($Franca_DrawBucketing_IDrawCall)));
			}
			return $Franca_DrawBucketing_ScreenSprite.compare(this.get_opacity(), this.stencilState, this.material, this.depth, sprite.get_opacity(), sprite.stencilState, sprite.material, sprite.depth);
		},
		setData: function(vertex, index, vertexIndex) {
			// write indices
			index.write$i(vertexIndex, vertexIndex + 1, vertexIndex + 2, vertexIndex + 1, vertexIndex + 3, vertexIndex + 2);
			// texcoords
			var texture = this.material.samplers[0].texture;
			var left = this.sourceRect.location.x / texture.get_width();
			var right = (this.sourceRect.location.x + this.sourceRect.size.width) / texture.get_width();
			var top = this.sourceRect.location.y / texture.get_height();
			var bottom = (this.sourceRect.location.y + this.sourceRect.size.height) / texture.get_height();
			if (this.effects !== 0) {
				if (System.EnumExtensions.hasFlag(this.effects, 1)) {
					var tmp = left;
					left = right;
					right = tmp;
				}
				if (System.EnumExtensions.hasFlag(this.effects, 2)) {
					var tmp1 = top;
					top = bottom;
					bottom = top;
				}
			}
			if (texture.get_isRenderTarget()) {
				top = 1 - top;
				bottom = 1 - bottom;
			}
			// rotation
			var angle = Franca.Calc.wrap$5(this.angle, -3.14159274101257, 3.14159274101257);
			var rotX = this.destRect.location.x + this.origin.x;
			var rotY = this.destRect.location.y + this.origin.y;
			var rot = new Franca.Vector3.$ctor4(rotX, rotY, angle);
			// write vertices
			$Franca_DrawBucketing_ScreenSprite.spriteVertexSpec.writeVertex(vertex, new Franca.Vector3.$ctor4(this.destRect.location.x, this.destRect.location.y, this.depth), new Franca.Vector2.$ctor3(left, top), this.colors.topLeft, rot);
			$Franca_DrawBucketing_ScreenSprite.spriteVertexSpec.writeVertex(vertex, new Franca.Vector3.$ctor4(this.destRect.location.x + this.destRect.size.width, this.destRect.location.y, this.depth), new Franca.Vector2.$ctor3(right, top), this.colors.topRight, rot);
			$Franca_DrawBucketing_ScreenSprite.spriteVertexSpec.writeVertex(vertex, new Franca.Vector3.$ctor4(this.destRect.location.x, this.destRect.location.y + this.destRect.size.height, this.depth), new Franca.Vector2.$ctor3(left, bottom), this.colors.bottomLeft, rot);
			$Franca_DrawBucketing_ScreenSprite.spriteVertexSpec.writeVertex(vertex, new Franca.Vector3.$ctor4(this.destRect.location.x + this.destRect.size.width, this.destRect.location.y + this.destRect.size.height, this.depth), new Franca.Vector2.$ctor3(right, bottom), this.colors.bottomRight, rot);
		},
		drawElements: function(elements, indexOffsetBytes) {
			for (var $t1 = 0; $t1 < this.material.samplers.length; $t1++) {
				var sampler = this.material.samplers[$t1];
				sampler.set(this.material.effect);
			}
			var $t2 = ss.getEnumerator(this.material.uniforms[0].defaultUniforms.get_values());
			try {
				while ($t2.moveNext()) {
					var uniform = $t2.current();
					this.material.effect.get_item(uniform.name).setValue$7(uniform.value);
				}
			}
			finally {
				$t2.dispose();
			}
			var $t3 = ss.getEnumerator(this.material.uniforms[0].customUniforms.get_values());
			try {
				while ($t3.moveNext()) {
					var uniform1 = $t3.current();
					this.material.effect.get_item(uniform1.name).setValue$7(uniform1.value);
				}
			}
			finally {
				$t3.dispose();
			}
			if ($Franca_StencilState.op_Inequality(this.stencilState, $Franca_StencilState.get_dontCare())) {
				this.stencilState.apply();
			}
			var matProj = Franca.Matrix4.createOrthographicOffCenter(0, this.viewport.size.width, this.viewport.size.height, 0, 0, -1);
			this.material.effect.get_item('matrixTransform').setValue$1(matProj);
			this.material.effect.applyProgram$1(this.material.programs[0], true);
			// Use a VAO here to call EnableVertexAttribArray for all the elements in the spec
			$Franca_DrawBucketing_ScreenSprite.get_vertexArrayObj().bind();
			$Franca_DrawBucketing_TexturedDrawCall.prototype.drawElements.call(this, elements, indexOffsetBytes);
			$Franca_DrawBucketing_ScreenSprite.get_vertexArrayObj().unbind();
		},
		get_indexType: function() {
			return 0;
		},
		get_vertexComponents: function() {
			return this.$vertexSize;
		},
		get_vertexCount: function() {
			return 4;
		},
		get_indexCount: function() {
			return 6;
		},
		get_vertexSpec: function() {
			return $Franca_DrawBucketing_ScreenSprite.spriteVertexSpec;
		}
	}, $Franca_DrawBucketing_TexturedDrawCall, [ss.IComparable, $Franca_DrawBucketing_IDrawCall]);
	ss.initClass($Franca_Vertices_VertexSpec, $asm, {
		get_size: function() {
			return this.size;
		},
		get_components: function() {
			return this.components;
		},
		addElement: function(element) {
			this.elements.push(element);
			this.update();
		},
		addElements: function(elements) {
			ss.arrayAddRange(this.elements, elements);
			this.update();
		},
		update: function() {
			this.$computeSize();
			var offset = 0;
			for (var i = 0; i < this.elements.length; i++) {
				this.elements[i].stride = this.size;
				this.elements[i].offset = offset;
				offset += this.elements[i].size;
			}
		},
		$computeSize: function() {
			this.size = 0;
			for (var i = 0; i < this.elements.length; i++) {
				this.size += this.elements[i].size;
			}
			this.components = ss.Int32.div(this.size, 4);
		}
	});
	ss.initClass($Franca_DrawBucketing_ScreenSpriteVertex, $asm, {
		writeVertex: function(data, position, texCoords, color, rot) {
			// write position
			data.$writeSingle$3(position.x, position.y, position.z);
			// write texcoords
			data.$writeSingle$2(texCoords.x, texCoords.y);
			// write color
			data.$writeSingle$4(color.r, color.g, color.b, color.a);
			// write rotation
			data.$writeSingle$3(rot.x, rot.y, rot.z);
		},
		writeVertex$1: function(data, vertexIndex, position, texCoords, color, rot) {
			if (vertexIndex >= 0) {
				data.offset = vertexIndex * this.size;
			}
			this.writeVertex(data, position, texCoords, color, rot);
		}
	}, $Franca_Vertices_VertexSpec);
	ss.initClass($Franca_Gif_$GifExtension, $asm, {
		$write: function(writer) {
			writer.writeByte($Franca_Gif_$GifExtension.$introducer);
			writer.writeByte(this.$extensionType);
			writer.writeByte(this.$size);
		},
		get_$extensionType: function() {
			return this.$extensionType;
		},
		get_$size: function() {
			return this.$size;
		}
	});
	ss.initClass($Franca_Gif_$GifApplicationExtension, $asm, {
		$write: function(writer) {
			$Franca_Gif_$GifExtension.prototype.$write.call(this, writer);
			writer.write$2(this.$introducer, 0, this.$introducer.get_length());
			writer.write$2(this.$authentication, 0, this.$authentication.get_length());
			this.$appBlock.$write(writer);
		},
		get_$repeatCount: function() {
			return this.$appBlock.get_$repeatCount();
		},
		set_$repeatCount: function(value) {
			this.$appBlock.set_$repeatCount(value);
		}
	}, $Franca_Gif_$GifExtension);
	$Franca_Gif_$GifApplicationExtension.$ctor1.prototype = $Franca_Gif_$GifApplicationExtension.prototype;
	ss.initClass($Franca_Gif_$GifColorTable, $asm, {
		$write: function(writer) {
			for (var $t1 = 0; $t1 < this.$entries.length; $t1++) {
				var c = this.$entries[$t1];
				writer.writeByte(c.get_r());
				writer.writeByte(c.get_g());
				writer.writeByte(c.get_b());
			}
		},
		get_$entries: function() {
			return this.$entries;
		},
		set_$entries: function(value) {
			this.$entries = value;
		}
	});
	ss.initClass($Franca_Gif_$GifCommentExtension, $asm, {
		$write: function(writer) {
			throw new ss.NotImplementedException('Comment extensions are not supported.');
		}
	}, $Franca_Gif_$GifExtension);
	$Franca_Gif_$GifCommentExtension.$ctor1.prototype = $Franca_Gif_$GifCommentExtension.prototype;
	ss.initEnum($Franca_Gif_$GifExtensionType, $asm, { $graphics: 249, $plainText: 1, $application: 255, $comment: 254 });
	ss.initClass($Franca_Gif_$GifGraphicsControlExtension, $asm, {
		$write: function(writer) {
			$Franca_Gif_$GifExtension.prototype.$write.call(this, writer);
			writer.writeByte(this.$flags);
			writer.writeUInt16(this.$delay);
			writer.writeByte(this.$transparentColor);
			writer.writeByte(this.$terminator);
		},
		get_$transparentColor: function() {
			return this.$transparentColor;
		},
		set_$transparentColor: function(value) {
			this.$transparentColor = value;
		},
		get_$delay: function() {
			return this.$delay;
		},
		set_$delay: function(value) {
			this.$delay = value;
		},
		get_$transparency: function() {
			return $Franca_Gif_$GifHelper.$isSet(this.$flags, 1);
		},
		set_$transparency: function(value) {
			this.$flags = $Franca_Gif_$GifHelper.$set$2(this.$flags, 1, value);
		},
		get_$waitForUserInput: function() {
			return $Franca_Gif_$GifHelper.$isSet(this.$flags, 2);
		},
		set_$waitForUserInput: function(value) {
			this.$flags = $Franca_Gif_$GifHelper.$set$2(this.$flags, 2, value);
		},
		get_$disposalMethod: function() {
			var masked = this.$flags & 28;
			return masked >>> 2;
		},
		set_$disposalMethod: function(value) {
			if (value === 65535) {
				throw new ss.ArgumentException(ss.formatString('{0}.{1} is not part of the GIF specification.', ss.getInstanceType(value).toString(), System.EnumExtensions.getName($Franca_Gif_GifDisposalMethod).call(null, value)));
			}
			var shifted = value << 2 & 255;
			var masked = shifted & 28;
			this.$flags = $Franca_Gif_$GifHelper.$unset(this.$flags, $Franca_Gif_$GifGraphicsControlExtension.$disposalMethodMask);
			this.$flags = $Franca_Gif_$GifHelper.$set(this.$flags, masked);
		}
	}, $Franca_Gif_$GifExtension);
	$Franca_Gif_$GifGraphicsControlExtension.$ctor1.prototype = $Franca_Gif_$GifGraphicsControlExtension.prototype;
	ss.initEnum($Franca_Gif_$GifGraphicsControlFlags, $asm, { $transparentColor: 1, $userInput: 2 });
	ss.initClass($Franca_Gif_$GifHeader, $asm, {
		$write: function(writer) {
			writer.write$2(this.$version, 0, $Franca_Gif_$GifHeader.$maxVersionLen);
		},
		get_$version: function() {
			return Franca.Text.UTF8.fromBinaryData(this.$version, true);
		},
		set_$version: function(value) {
			if (value.length > $Franca_Gif_$GifHeader.$maxVersionLen) {
				throw new ss.FormatException(ss.formatString('Version must be {0} characters or less.', $Franca_Gif_$GifHeader.$maxVersionLen));
			}
			if (value.length < $Franca_Gif_$GifHeader.$maxVersionLen) {
				value = value + ss.stringFromChar(String.fromCharCode(0), $Franca_Gif_$GifHeader.$maxVersionLen - value.length);
			}
			this.$version = Franca.Text.UTF8.toBinaryData(value);
		}
	});
	$Franca_Gif_$GifHeader.$ctor1.prototype = $Franca_Gif_$GifHeader.prototype;
	ss.initClass($Franca_Gif_$GifHelper, $asm, {});
	ss.initClass($Franca_Gif_$GifImageData, $asm, {
		$write: function(writer) {
			writer.writeByte(this.$codeSize);
			for (var $t1 = 0; $t1 < this.$blocks.length; $t1++) {
				var bytes = this.$blocks[$t1];
				writer.writeByte(bytes.get_length());
				writer.write$2(bytes, 0, bytes.get_length());
			}
			writer.writeByte(0);
		}
	});
	ss.initClass($Franca_Gif_$GifImageDescriptor, $asm, {
		$write: function(writer) {
			writer.writeByte($Franca_Gif_$GifImageDescriptor.$seperator);
			writer.writeUInt16(this.$left);
			writer.writeUInt16(this.$top);
			writer.writeUInt16(this.$width);
			writer.writeUInt16(this.$height);
			writer.writeByte(this.$flags);
		},
		get_$hasLocalColorTable: function() {
			return $Franca_Gif_$GifHelper.$isSet(this.$flags, 128);
		},
		set_$hasLocalColorTable: function(value) {
			this.$flags = $Franca_Gif_$GifHelper.$set$2(this.$flags, 128, value);
		},
		get_$localColorTableSize: function() {
			var masked = this.$flags & 7;
			return masked;
		},
		set_$localColorTableSize: function(value) {
			var masked = value & 7;
			this.$flags = $Franca_Gif_$GifHelper.$unset(this.$flags, $Franca_Gif_$GifImageDescriptor.$colorTableSizeMask);
			this.$flags = $Franca_Gif_$GifHelper.$set(this.$flags, masked);
		},
		get_$sorted: function() {
			return $Franca_Gif_$GifHelper.$isSet(this.$flags, 32);
		},
		set_$sorted: function(value) {
			this.$flags = $Franca_Gif_$GifHelper.$set$2(this.$flags, 32, value);
		},
		get_$interlaced: function() {
			return $Franca_Gif_$GifHelper.$isSet(this.$flags, 64);
		},
		set_$interlaced: function(value) {
			this.$flags = $Franca_Gif_$GifHelper.$set$2(this.$flags, 64, value);
		},
		get_$left: function() {
			return this.$left;
		},
		set_$left: function(value) {
			this.$left = value;
		},
		get_$top: function() {
			return this.$top;
		},
		set_$top: function(value) {
			this.$top = value;
		},
		get_$width: function() {
			return this.$width;
		},
		set_$width: function(value) {
			this.$width = value;
		},
		get_$height: function() {
			return this.$height;
		},
		set_$height: function(value) {
			this.$height = value;
		}
	});
	$Franca_Gif_$GifImageDescriptor.$ctor1.prototype = $Franca_Gif_$GifImageDescriptor.prototype;
	ss.initEnum($Franca_Gif_$GifImageFlags, $asm, { $localColorTable: 128, $interlaced: 64, $sorted: 32 });
	ss.initClass($Franca_Gif_$GifLogicalScreenDescriptor, $asm, {
		$write: function(writer) {
			writer.writeUInt16(this.$canvasWidth);
			writer.writeUInt16(this.$canvasHeight);
			writer.writeByte(this.$flags);
			writer.writeByte(this.$bgColor);
			writer.writeByte(this.$aspectRatio);
		},
		get_$width: function() {
			return this.$canvasWidth;
		},
		set_$width: function(value) {
			this.$canvasWidth = value;
		},
		get_$height: function() {
			return this.$canvasHeight;
		},
		set_$height: function(value) {
			this.$canvasHeight = value;
		},
		get_$hasGlobalColorTable: function() {
			return $Franca_Gif_$GifHelper.$isSet(this.$flags, 128);
		},
		set_$hasGlobalColorTable: function(value) {
			this.$flags = $Franca_Gif_$GifHelper.$set$2(this.$flags, 128, value);
		},
		get_$sorted: function() {
			return $Franca_Gif_$GifHelper.$isSet(this.$flags, 8);
		},
		set_$sorted: function(value) {
			this.$flags = $Franca_Gif_$GifHelper.$set$2(this.$flags, 8, value);
		},
		get_$colorResolution: function() {
			var masked = this.$flags & 112;
			return masked >>> 4;
		},
		set_$colorResolution: function(value) {
			var shifted = value << 4 & 255;
			var masked = shifted & 112;
			this.$flags = $Franca_Gif_$GifHelper.$unset(this.$flags, $Franca_Gif_$GifLogicalScreenDescriptor.$colorResolutionMask);
			this.$flags = $Franca_Gif_$GifHelper.$set(this.$flags, masked);
		},
		get_$globalColorTableSize: function() {
			var masked = this.$flags & 7;
			return masked;
		},
		set_$globalColorTableSize: function(value) {
			var masked = value & 7;
			this.$flags = $Franca_Gif_$GifHelper.$unset(this.$flags, $Franca_Gif_$GifLogicalScreenDescriptor.$colorTableSizeMask);
			this.$flags = $Franca_Gif_$GifHelper.$set(this.$flags, masked);
		},
		get_$backgroundColor: function() {
			return this.$bgColor;
		},
		set_$backgroundColor: function(value) {
			this.$bgColor = value;
		},
		get_$aspectRatio: function() {
			return this.$aspectRatio;
		},
		set_$aspectRatio: function(value) {
			this.$aspectRatio = value;
		}
	});
	$Franca_Gif_$GifLogicalScreenDescriptor.$ctor1.prototype = $Franca_Gif_$GifLogicalScreenDescriptor.prototype;
	ss.initClass($Franca_Gif_$GifPlainTextExtension, $asm, {
		$write: function(writer) {
			throw new ss.NotImplementedException('Plain text extensions are not supported.');
		}
	}, $Franca_Gif_$GifExtension);
	$Franca_Gif_$GifPlainTextExtension.$ctor1.prototype = $Franca_Gif_$GifPlainTextExtension.prototype;
	ss.initEnum($Franca_Gif_$GifScreenFlags, $asm, { $globalColorTable: 128, $sorted: 8 });
	ss.initEnum($Franca_Gif_$GifVersion, $asm, { $GIF89a: 0, $GIF87a: 1 });
	ss.initClass($Franca_Gif_AnimatedGif, $asm, {
		get_frames: function() {
			return this.$1$FramesField;
		},
		set_frames: function(value) {
			this.$1$FramesField = value;
		},
		get_width: function() {
			return this.$1$WidthField;
		},
		set_width: function(value) {
			this.$1$WidthField = value;
		},
		get_height: function() {
			return this.$1$HeightField;
		},
		set_height: function(value) {
			this.$1$HeightField = value;
		},
		get_loops: function() {
			return this.$1$LoopsField;
		},
		set_loops: function(value) {
			this.$1$LoopsField = value;
		},
		get_repeatCount: function() {
			return this.$1$RepeatCountField;
		},
		set_repeatCount: function(value) {
			this.$1$RepeatCountField = value;
		},
		createInstance: function(time) {
			return new $Franca_Gif_GifInstance(this, time);
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				for (var i = 0; i < this.get_frames().length; i++) {
					this.get_frames()[i].dispose();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_duration: function() {
			if (ss.isValue(this.$duration)) {
				return ss.unbox(this.$duration);
			}
			var dur = new ss.TimeSpan(0);
			for (var i = 0; i < this.get_frames().length; i++) {
				dur = new ss.TimeSpan(dur.ticks + this.get_frames()[i].get_duration().ticks);
			}
			this.$duration = dur;
			return ss.unbox(this.$duration);
		}
	}, null, [ss.IDisposable, Franca.IFileResult]);
	$Franca_Gif_AnimatedGif.$ctor1.prototype = $Franca_Gif_AnimatedGif.$ctor2.prototype = $Franca_Gif_AnimatedGif.$ctor3.prototype = $Franca_Gif_AnimatedGif.prototype;
	ss.initClass($Franca_Gif_GifData, $asm, {}, null, [Franca.IFileResult]);
	$Franca_Gif_GifData.$ctor2.prototype = $Franca_Gif_GifData.$ctor1.prototype = $Franca_Gif_GifData.prototype;
	ss.initEnum($Franca_Gif_GifDisposalMethod, $asm, { none: 0, doNotDispose: 1, restoreBackground: 2, restorePrevious: 3, dontCare: 65535 });
	ss.initClass($Franca_Gif_GifFormatException, $asm, {}, ss.Exception);
	$Franca_Gif_GifFormatException.$ctor1.prototype = $Franca_Gif_GifFormatException.$ctor2.prototype = $Franca_Gif_GifFormatException.prototype;
	ss.initClass($Franca_Gif_GifFrame, $asm, {
		get_image: function() {
			return this.$1$ImageField;
		},
		set_image: function(value) {
			this.$1$ImageField = value;
		},
		get_disposal: function() {
			return this.$1$DisposalField;
		},
		set_disposal: function(value) {
			this.$1$DisposalField = value;
		},
		get_delay: function() {
			return this.$1$DelayField;
		},
		set_delay: function(value) {
			this.$1$DelayField = value;
		},
		get_transparency: function() {
			return this.$1$TransparencyField;
		},
		set_transparency: function(value) {
			this.$1$TransparencyField = value;
		},
		$deinterlace: function(interlaced, width, height) {
			var pixels = new Franca.BinaryData.$ctor5(interlaced.get_length());
			var y, step;
			var index = 0;
			for (var pass = 0; pass < 4; pass++) {
				if (pass === 0 || pass === 1) {
					y = ((pass === 0) ? 0 : 4);
					step = 8;
				}
				else if (pass === 2) {
					y = 2;
					step = 4;
				}
				else {
					y = 1;
					step = 2;
				}
				while (y < height) {
					Franca.BinaryData.blockCopy(interlaced, index, pixels, y * width, width);
					y += step;
					index += width;
				}
			}
			return pixels;
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				this.get_image().dispose();
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_duration: function() {
			if (ss.isValue(this.$duration)) {
				return ss.unbox(this.$duration);
			}
			this.$duration = new ss.TimeSpan(ss.Int32.trunc(Math.trunc(this.get_delay() / 100 * 10000000)));
			return ss.unbox(this.$duration);
		}
	}, null, [ss.IDisposable]);
	ss.initClass($Franca_Gif_GifImage, $asm, {});
	ss.initClass($Franca_Gif_GifInstance, $asm, {
		$platformTime: function() {
			return Franca.Platform.get_time();
		},
		play: function() {
			if (this.get_state() === 2) {
				return;
			}
			if (this.get_state() !== 1) {
				this.$frameIndex = 0;
				this.$frameTime = new ss.TimeSpan(0);
			}
			this.$lastTime = this.$time();
			this.set_state(2);
		},
		pause: function() {
			if (this.get_state() !== 2) {
				return;
			}
			this.set_state(1);
		},
		stop: function() {
			if (this.get_state() === 0) {
				return;
			}
			this.$frameIndex = 0;
			this.$lastTime = this.$frameTime = new ss.TimeSpan(0);
			this.set_state(0);
		},
		update: function() {
			if (this.get_state() !== 2) {
				return;
			}
			var curTime = this.$time();
			var elapsed = new ss.TimeSpan(curTime.ticks - this.$lastTime.ticks);
			// we mod the elapsed time but if we do that and the gif doesn't loop we might get incorrect results
			if (elapsed.ticks >= this.get_parent().get_duration().ticks && !this.get_parent().get_loops()) {
				this.$frameIndex = Math.max(0, this.get_parent().get_frames().length - 1);
				this.set_state(3);
				return;
			}
			elapsed = System.TimeSpanExtensions.mod(elapsed, this.get_parent().get_duration());
			this.$frameTime = new ss.TimeSpan(this.$frameTime.ticks + elapsed.ticks);
			while (this.$frameTime.ticks >= this.get_frame().get_duration().ticks) {
				this.$frameTime = new ss.TimeSpan(this.$frameTime.ticks - this.get_frame().get_duration().ticks);
				this.$frameIndex++;
				if (this.$frameIndex >= this.get_parent().get_frames().length) {
					if (this.get_parent().get_loops()) {
						this.$frameIndex %= this.get_parent().get_frames().length;
					}
					else {
						this.set_state(3);
						this.$frameIndex = Math.max(0, this.get_parent().get_frames().length - 1);
						break;
					}
				}
			}
			this.$lastTime = curTime;
		},
		coUpdate: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									if (!(this.get_state() !== 3)) {
										$state = -1;
										break $sm1;
									}
									this.update();
									$result = this.$frameIndex;
									$state = 0;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		get_state: function() {
			return this.$1$StateField;
		},
		set_state: function(value) {
			this.$1$StateField = value;
		},
		get_parent: function() {
			return this.$1$ParentField;
		},
		set_parent: function(value) {
			this.$1$ParentField = value;
		},
		get_frameIndex: function() {
			return this.$frameIndex;
		},
		set_frameIndex: function(value) {
			this.$frameIndex = value;
		},
		get_frameTime: function() {
			return this.$frameTime;
		},
		set_frameTime: function(value) {
			this.$frameTime = value;
		},
		get_frame: function() {
			return this.get_parent().get_frames()[this.get_frameIndex()];
		},
		get_canvas: function() {
			return this.get_parent().get_frames()[this.get_frameIndex()].get_image();
		}
	});
	ss.initClass($Franca_Gif_GifLZW, $asm, {});
	ss.initEnum($Franca_Gif_GifState, $asm, { stopped: 0, paused: 1, playing: 2, ended: 3 });
	ss.initClass($Franca_Gif_TextureGif, $asm, {
		createInstance: function(time) {
			return new $Franca_Gif_TextureGifInstance(this, time);
		},
		get_ready: function() {
			return this.get_loaded();
		},
		get_loaded: function() {
			return this.$2$LoadedField;
		},
		set_loaded: function(value) {
			this.$2$LoadedField = value;
		},
		get_name: function() {
			return this.$2$NameField;
		},
		set_name: function(value) {
			this.$2$NameField = value;
		},
		add_onLoad: function(value) {
			this.$2$OnLoadField = ss.delegateCombine(this.$2$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$2$OnLoadField = ss.delegateRemove(this.$2$OnLoadField, value);
		},
		load: function(content, file, name, args) {
			this.$load(file, name, ss.unbox(ss.cast(args[0], Boolean)), ss.unbox(ss.cast(args[1], Boolean)), ss.unbox(ss.cast(args[2], Boolean)));
		},
		$load: function(file, name, premultiplyAlpha, mipmapped, disposeCanvas) {
			this.$premultiplyAlpha = premultiplyAlpha;
			this.$mipmap = mipmapped;
			this.$disposeLoadedCanvas = disposeCanvas;
			this.set_name(name);
			this.$fileRes = $Franca_File.load($Franca_Gif_AnimatedGif).call(null, file, null, null);
		},
		finalizeContent: function() {
			if (ss.isValue(this.$fileRes)) {
				if (this.$fileRes.get_loaded() && !this.get_loaded()) {
					var gif = this.$fileRes.get_value();
					// FromBinary(fileRes.Value);
					$Franca_Gif_AnimatedGif.$copy(gif, this);
					this.$textures = [];
					var $t1 = this.get_frames();
					for (var $t2 = 0; $t2 < $t1.length; $t2++) {
						var frame = $t1[$t2];
						var tex = new $Franca_Texture.$ctor3(frame.get_image(), this.$premultiplyAlpha, this.$mipmap, this.$disposeLoadedCanvas);
						this.$textures.push(tex);
					}
					this.set_loaded(true);
					this.$fileRes = null;
					var onLoad = this.$2$OnLoadField;
					if (!ss.staticEquals(onLoad, null)) {
						onLoad(this);
					}
				}
			}
		},
		dispose$1: function(disposing) {
			if (this.$disposed$1) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				for (var i = 0; i < this.get_textures().length; i++) {
					this.get_textures()[i].dispose();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed$1 = true;
			$Franca_Gif_AnimatedGif.prototype.dispose$1.call(this, disposing);
		},
		get_textures: function() {
			return this.$textures;
		},
		set_textures: function(value) {
			this.$textures = value;
		}
	}, $Franca_Gif_AnimatedGif, [ss.IDisposable, Franca.IFileResult, $Franca_IAsset]);
	$Franca_Gif_TextureGif.$ctor1.prototype = $Franca_Gif_TextureGif.prototype;
	ss.initClass($Franca_Gif_TextureGifInstance, $asm, {
		get_texture: function() {
			return this.$tg.get_textures()[this.get_frameIndex()];
		}
	}, $Franca_Gif_GifInstance);
	ss.initEnum($Franca_Gui_AutoSizing, $asm, { none: 0, neither: 0, width: 1, height: 2, both: 3 });
	ss.initClass($Franca_Gui_CaretPosition, $asm, {
		getHashCode: function() {
			var h = this.index;
			h = h * 397 ^ ss.getHashCode(this.position);
			h = h * 397 ^ (this.line ? ss.getHashCode(this.line) : 0);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Gui_CaretPosition)) {
				return false;
			}
			return this.index === o.index && ss.equals(this.position, o.position) && ss.equals(this.line, o.line);
		}
	});
	$Franca_Gui_CaretPosition.$ctor1.prototype = $Franca_Gui_CaretPosition.prototype;
	$Franca_Gui_CaretPosition.__class = false;
	ss.initClass($Franca_Gui_ChildCollection, $asm, {
		add: function(item) {
			this.$children.push(item);
		},
		remove: function(item) {
			return ss.remove(this.$children, item);
		},
		clear: function() {
			while (this.$children.length > 0) {
				this.remove(this.$children[0]);
			}
		},
		moveToTop: function(child) {
			if (!this.remove(child)) {
				throw new ss.InvalidOperationException('Child not found');
			}
			var index = (child.get_alwaysOnTop() ? this.$children.length : Math.max(0, System.Linq.LinqExtensions.findIndex($Franca_Gui_IWidget).call(null, this.$children, function(w) {
				return w.get_alwaysOnTop();
			}) - 1));
			ss.insert(this.$children, index, child);
		},
		moveBefore: function(child, target) {
			if (!this.remove(child)) {
				throw new ss.InvalidOperationException('Child not found');
			}
			this.insertBefore(target);
		},
		moveAfter: function(child, target) {
			if (!this.remove(child)) {
				throw new ss.InvalidOperationException('Child not found');
			}
			this.insertAfter(target);
		},
		insertBefore: function(item) {
			var index = ss.indexOf(this.$children, item);
			if (index < 0) {
				this.add(item);
				return;
			}
			ss.insert(this.$children, index, item);
		},
		insertAfter: function(item) {
			var index = ss.indexOf(this.$children, item);
			if (index < 0 || index === this.$children.length - 1) {
				this.add(item);
				return;
			}
			ss.insert(this.$children, index + 1, item);
		},
		contains: function(item) {
			return ss.contains(this.$children, item);
		},
		getEnumerator: function() {
			return ss.getEnumerator(this.$children);
		},
		safeEnumerate: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, i;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									i = this.$children.length - 1;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!(i >= 0)) {
										$state = -1;
										break $sm1;
									}
									if (i >= this.$children.length) {
										$state = -1;
										break $sm1;
									}
									$result = this.$children[i];
									$state = 2;
									return true;
								}
								case 2: {
									$state = -1;
									i--;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		frontToBack: function() {
			return this.safeEnumerate();
		},
		backToFront: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, i;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									i = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!(i < this.$children.length)) {
										$state = -1;
										break $sm1;
									}
									if (i >= this.$children.length) {
										$state = -1;
										break $sm1;
									}
									$result = this.$children[i];
									$state = 2;
									return true;
								}
								case 2: {
									$state = -1;
									i++;
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		get_count: function() {
			return this.$children.length;
		},
		get_isReadOnly: function() {
			return false;
		}
	}, null, [ss.IEnumerable, ss.IEnumerable, ss.ICollection]);
	ss.initClass($Franca_Gui_FlowEvent, $asm, {
		get_preventDefault: function() {
			return this.$1$PreventDefaultField;
		},
		set_preventDefault: function(value) {
			this.$1$PreventDefaultField = value;
		}
	});
	ss.initClass($Franca_Gui_FontCollection, $asm, {
		get_plain: function() {
			return this.$1$PlainField;
		},
		set_plain: function(value) {
			this.$1$PlainField = value;
		},
		get_bold: function() {
			return this.$1$BoldField;
		},
		set_bold: function(value) {
			this.$1$BoldField = value;
		},
		get_italic: function() {
			return this.$1$ItalicField;
		},
		set_italic: function(value) {
			this.$1$ItalicField = value;
		},
		get_boldItalic: function() {
			return this.$1$BoldItalicField;
		},
		set_boldItalic: function(value) {
			this.$1$BoldItalicField = value;
		},
		get: function(bold, italic) {
			this.$onLoad();
			if (!bold && !italic) {
				return this.get_plain();
			}
			else if (bold && italic) {
				return this.get_boldItalic() || (this.get_bold() || (this.get_italic() || this.get_plain()));
			}
			else if (bold) {
				return this.get_bold() || this.get_plain();
			}
			else {
				return this.get_italic() || this.get_plain();
			}
		},
		$onLoad: function() {
			if (!this.$loaded && this.$plainSF.get_loaded() && (ss.isValue(this.$boldSF) ? this.$boldSF.get_loaded() : true) && (ss.isValue(this.$italicSF) ? this.$italicSF.get_loaded() : true) && (ss.isValue(this.$boldItalicSF) ? this.$boldItalicSF.get_loaded() : true)) {
				this.set_plain(this.$plainSF.get_font());
				this.set_bold((ss.isValue(this.$boldSF) ? this.$boldSF.get_font() : null));
				this.set_italic((ss.isValue(this.$italicSF) ? this.$italicSF.get_font() : null));
				this.set_boldItalic((ss.isValue(this.$boldItalicSF) ? this.$boldItalicSF.get_font() : null));
				this.$loaded = true;
			}
		},
		get_loaded: function() {
			if (this.$loaded) {
				return true;
			}
			this.$onLoad();
			return this.$loaded;
		}
	});
	$Franca_Gui_FontCollection.$ctor1.prototype = $Franca_Gui_FontCollection.prototype;
	ss.initClass($Franca_Gui_GuiEntryPointAttribute, $asm, {});
	ss.initClass($Franca_Gui_GuiEvent, $asm, {
		get_x: function() {
			return this.$2$XField;
		},
		set_x: function(value) {
			this.$2$XField = value;
		},
		get_y: function() {
			return this.$2$YField;
		},
		set_y: function(value) {
			this.$2$YField = value;
		},
		get_button: function() {
			return this.$2$ButtonField;
		},
		set_button: function(value) {
			this.$2$ButtonField = value;
		},
		get_key: function() {
			return this.$2$KeyField;
		},
		set_key: function(value) {
			this.$2$KeyField = value;
		},
		get_preventDefault: function() {
			return this.$2$PreventDefaultField;
		},
		set_preventDefault: function(value) {
			this.$2$PreventDefaultField = value;
		}
	}, $Franca_InputEvent);
	$Franca_Gui_GuiEvent.$ctor1.prototype = $Franca_Gui_GuiEvent.prototype;
	ss.initClass($Franca_Gui_GuiInput, $asm, {
		$onNativeClick: function(e) {
			var shift = e.shiftKey;
			var alt = e.altKey;
			var control = e.ctrlKey;
			var mouse = this.$input.get_mouse();
			var mouseZone;
			if (ss.isValue(this.$mouseLock)) {
				mouseZone = this.$mouseLock.zone;
				for (var i = this.$zones.length - 1; i >= 0; i--) {
					var z = this.$zones[i];
					if ($Franca_Gui_InputZone.op_Equality(z, this.$mouseLock.zone)) {
						mouseZone = z;
						this.$mouseLock.zone = z;
						break;
					}
				}
			}
			else {
				mouseZone = this.$getMouseZone(mouse);
			}
			if (ss.isValue(this.$mouseLock) && $Franca_Gui_InputZone.op_Equality(this.$mouseLock.zone, mouseZone) && mouseZone.rectangle.contains$2(mouse.x, mouse.y) && mouseZone.get_active()) {
				if (!ss.staticEquals(mouseZone.onNativeClick, null)) {
					mouseZone.onNativeClick();
				}
			}
		},
		setFocus: function(zone) {
			this.$focusZone = zone;
		},
		$onCopy: function(cut) {
			// TODO(Eni, Low): should this check if the zone's widget is focussed?
			for (var i = this.$zones.length - 1; i >= 0; i--) {
				var zone = this.$zones[i];
				if (!ss.staticEquals(zone.onCopy, null)) {
					var ret = zone.onCopy(cut);
					if (ss.isValue(ret)) {
						return ret;
					}
				}
			}
			return null;
		},
		$onKey: function(e) {
			var captureEvent = new $Franca_Gui_KeyCaptureEvent(e.key.code, e.key.realTimeState, e.key);
			for (var i = this.$keyboardConsumers.length - 1; i >= 0; i--) {
				var zone = this.$keyboardConsumers[i];
				if (!zone.get_active()) {
					continue;
				}
				if (!ss.staticEquals(zone.onCaptureKey, null) && zone.onCaptureKey(captureEvent)) {
					e.set_preventDefault(true);
					break;
				}
			}
		},
		$onKey$1: function(key) {
			var captureEvent = new $Franca_Gui_KeyCaptureEvent(key.code, key.state, key);
			for (var i = this.$keyboardConsumers.length - 1; i >= 0; i--) {
				var zone = { $: this.$keyboardConsumers[i] };
				if (!zone.$.get_active()) {
					continue;
				}
				if (!ss.staticEquals(zone.$.onCaptureKey, null) && zone.$.onCaptureKey(captureEvent)) {
					// inform the screen this key was captured which (if it wasn't caught by the screen) will
					// set the key's state back to up
					if (key.bound) {
						this.$manager.get_screen().keyCapturedByWidget(captureEvent);
					}
					// delegate event to this zone
					if (key.lastState === 0 && key.state === 1) {
						if (!ss.staticEquals(zone.$.onKeyDown, null)) {
							this.$keyEvents.push(ss.mkdel({ zone: zone, $this: this }, function(t, m) {
								var $t2 = this.zone.$.onKeyDown;
								var $t1 = new $Franca_Gui_GuiEvent.$ctor1(t, 0, m, this.$this.$shift, this.$this.$control, this.$this.$alt);
								$t1.set_key(key);
								$t2($t1);
							}));
						}
					}
					else if (key.lastState === 1 && key.state === 0) {
						if (!ss.staticEquals(zone.$.onKeyUp, null)) {
							this.$keyEvents.push(ss.mkdel({ zone: zone, $this: this }, function(t1, m1) {
								var $t4 = this.zone.$.onKeyUp;
								var $t3 = new $Franca_Gui_GuiEvent.$ctor1(t1, 0, m1, this.$this.$shift, this.$this.$control, this.$this.$alt);
								$t3.set_key(key);
								$t4($t3);
							}));
						}
					}
					if (key.state === 1) {
						if (!ss.staticEquals(zone.$.onKeyHoldDown, null)) {
							this.$keyEvents.push(ss.mkdel({ zone: zone, $this: this }, function(t2, m2) {
								var $t6 = this.zone.$.onKeyHoldDown;
								var $t5 = new $Franca_Gui_GuiEvent.$ctor1(t2, 0, m2, this.$this.$shift, this.$this.$control, this.$this.$alt);
								$t5.set_key(key);
								$t6($t5);
							}));
						}
					}
					//else if (key.State == KeyState.Up) {
					//    if (zone.OnKeyHoldUp != null) {
					//        keyEvents.Add(
					//            (t, m) => { zone.OnKeyHoldUp(new GuiEvent(t, InputDevice.Keyboard, m, shift, control, alt) { Key = key }); }
					//        );
					//    }
					//}
					break;
				}
			}
		},
		$getMouseZone: function(mouse) {
			for (var i = this.$zones.length - 1; i >= 0; i--) {
				var z = this.$zones[i];
				if (z.visible && z.rectangle.contains$2(mouse.x, mouse.y)) {
					return z;
				}
			}
			return ss.getDefaultValue($Franca_Gui_InputZone);
		},
		determineEvents: function(gameTime) {
			var oShift = {}, oControl = {}, oAlt = {};
			this.$input.updateState(-1, oShift, oControl, oAlt);
			this.$shift = oShift.$;
			this.$control = oControl.$;
			this.$alt = oAlt.$;
			var $t1 = ss.getEnumerator(this.$input.get_keyStates().get_values());
			try {
				while ($t1.moveNext()) {
					var keyState = $t1.current();
					if (ss.isValue(keyState)) {
						if (keyState.state === 1 || keyState.lastState === 1) {
							this.$onKey$1(keyState);
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
			var mouse = this.$input.get_mouse();
			var mouseZone;
			if (ss.isValue(this.$mouseLock)) {
				mouseZone = this.$mouseLock.zone;
				for (var i = this.$zones.length - 1; i >= 0; i--) {
					var z = this.$zones[i];
					if ($Franca_Gui_InputZone.op_Equality(z, this.$mouseLock.zone)) {
						mouseZone = z;
						this.$mouseLock.zone = z;
						break;
					}
				}
			}
			else {
				mouseZone = this.$getMouseZone(mouse);
			}
			if (ss.isValue(this.$focusZone)) {
				if (!ss.contains(this.$zones, ss.unbox(this.$focusZone))) {
					if (!ss.staticEquals(ss.unbox(this.$focusZone).onFocus, null)) {
						// TODO: is this necessary or even desirable?
						ss.unbox(this.$focusZone).onFocus(false);
					}
					this.$focusZone = null;
				}
			}
			for (var i1 = 0; i1 < this.$keyEvents.length; i1++) {
				var keyEvent = this.$keyEvents[i1];
				keyEvent(gameTime, mouse);
			}
			var $t2 = ss.getEnumerator(mouse.get_buttons());
			try {
				while ($t2.moveNext()) {
					var button = { $: $t2.current() };
					// mouse down
					if (button.$.state === 1 && mouseZone.get_active()) {
						// once
						if (button.$.lastState === 0) {
							this.$mouseLock = new $Franca_Gui_MouseLock(mouseZone);
							var lastFocus = this.$focusZone;
							this.$focusZone = (mouseZone.canFocus ? mouseZone : null);
							if (ss.Nullable$1.liftne($Franca_Gui_InputZone.op_Inequality, lastFocus, this.$focusZone)) {
								if (ss.isValue(lastFocus) && !ss.staticEquals(ss.unbox(lastFocus).onFocus, null)) {
									ss.unbox(lastFocus).onFocus(false);
								}
								if (ss.isValue(this.$focusZone) && !ss.staticEquals(ss.unbox(this.$focusZone).onFocus, null)) {
									ss.unbox(this.$focusZone).onFocus(true);
								}
							}
							if (!ss.staticEquals(mouseZone.onMouseDown, null)) {
								this.$events.push(ss.mkdel({ button: button, $this: this }, function() {
									var $t4 = mouseZone.onMouseDown;
									var $t3 = new $Franca_Gui_GuiEvent.$ctor1(gameTime, 1, mouse, this.$this.$shift, this.$this.$control, this.$this.$alt);
									$t3.set_button(this.button.$);
									$t3.set_x(mouse.x - mouseZone.rectangle.location.x + mouseZone.viewPosition.x);
									$t3.set_y(mouse.y - mouseZone.rectangle.location.y + mouseZone.viewPosition.y);
									$t4($t3);
								}));
							}
						}
						// repeat
						if (!ss.staticEquals(mouseZone.onMouseHoldDown, null)) {
							this.$events.push(ss.mkdel({ button: button, $this: this }, function() {
								var $t6 = mouseZone.onMouseHoldDown;
								var $t5 = new $Franca_Gui_GuiEvent.$ctor1(gameTime, 1, mouse, this.$this.$shift, this.$this.$control, this.$this.$alt);
								$t5.set_button(this.button.$);
								$t5.set_x(mouse.x - mouseZone.rectangle.location.x + mouseZone.viewPosition.x);
								$t5.set_y(mouse.y - mouseZone.rectangle.location.y + mouseZone.viewPosition.y);
								$t6($t5);
							}));
						}
					}
					else if (button.$.state === 0) {
						// once
						if (button.$.lastState === 1) {
							this.$clearMouseLock = true;
							if (mouseZone.get_active()) {
								if (ss.isValue(this.$mouseLock) && $Franca_Gui_InputZone.op_Equality(this.$mouseLock.zone, mouseZone) && mouseZone.rectangle.contains$2(mouse.x, mouse.y)) {
									if (button.$.type === 0) {
										if (!ss.staticEquals(mouseZone.onClick, null)) {
											this.$events.push(ss.mkdel(this, function() {
												var $t8 = mouseZone.onClick;
												var $t7 = new $Franca_Gui_GuiEvent.$ctor1(gameTime, 1, mouse, this.$shift, this.$control, this.$alt);
												$t7.set_x(mouse.x - mouseZone.rectangle.location.x + mouseZone.viewPosition.x);
												$t7.set_y(mouse.y - mouseZone.rectangle.location.y + mouseZone.viewPosition.y);
												$t8($t7);
											}));
										}
									}
									else if (button.$.type === 2) {
										if (!ss.staticEquals(mouseZone.onRightClick, null)) {
											this.$events.push(ss.mkdel(this, function() {
												var $t10 = mouseZone.onRightClick;
												var $t9 = new $Franca_Gui_GuiEvent.$ctor1(gameTime, 1, mouse, this.$shift, this.$control, this.$alt);
												$t9.set_x(mouse.x - mouseZone.rectangle.location.x + mouseZone.viewPosition.x);
												$t9.set_y(mouse.y - mouseZone.rectangle.location.y + mouseZone.viewPosition.y);
												$t10($t9);
											}));
										}
									}
								}
								if (!ss.staticEquals(mouseZone.onMouseUp, null)) {
									this.$events.push(ss.mkdel({ button: button, $this: this }, function() {
										var $t12 = mouseZone.onMouseUp;
										var $t11 = new $Franca_Gui_GuiEvent.$ctor1(gameTime, 1, mouse, this.$this.$shift, this.$this.$control, this.$this.$alt);
										$t11.set_button(this.button.$);
										$t11.set_x(mouse.x - mouseZone.rectangle.location.x + mouseZone.viewPosition.x);
										$t11.set_y(mouse.y - mouseZone.rectangle.location.y + mouseZone.viewPosition.y);
										$t12($t11);
									}));
								}
							}
						}
						// repeat
						if (mouseZone.get_active() && !ss.staticEquals(mouseZone.onMouseHoldUp, null)) {
							this.$events.push(ss.mkdel({ button: button, $this: this }, function() {
								var $t14 = mouseZone.onMouseHoldUp;
								var $t13 = new $Franca_Gui_GuiEvent.$ctor1(gameTime, 1, mouse, this.$this.$shift, this.$this.$control, this.$this.$alt);
								$t13.set_button(this.button.$);
								$t13.set_x(mouse.x - mouseZone.rectangle.location.x + mouseZone.viewPosition.x);
								$t13.set_y(mouse.y - mouseZone.rectangle.location.y + mouseZone.viewPosition.y);
								$t14($t13);
							}));
						}
					}
				}
			}
			finally {
				$t2.dispose();
			}
			if (!ss.staticEquals(mouseZone.onMouseMove, null) && mouseZone.get_active()) {
				this.$events.push(ss.mkdel(this, function() {
					var $t16 = mouseZone.onMouseMove;
					var $t15 = new $Franca_Gui_GuiEvent.$ctor1(gameTime, 1, mouse, this.$shift, this.$control, this.$alt);
					$t15.set_x(mouse.x - mouseZone.rectangle.location.x + mouseZone.viewPosition.x);
					$t15.set_y(mouse.y - mouseZone.rectangle.location.y + mouseZone.viewPosition.y);
					$t16($t15);
				}));
			}
			if ($Franca_Gui_InputZone.op_Inequality(this.$lastMouseOver, mouseZone) && !ss.staticEquals(this.$lastMouseOver.onMouseMove, null) && this.$lastMouseOver.get_active()) {
				var mouseOut = this.$lastMouseOver;
				this.$events.push(ss.mkdel(this, function() {
					var $t18 = mouseOut.onMouseMove;
					var $t17 = new $Franca_Gui_GuiEvent.$ctor1(gameTime, 1, mouse, this.$shift, this.$control, this.$alt);
					$t17.set_x(mouse.x - mouseOut.rectangle.location.x + mouseZone.viewPosition.x);
					$t17.set_y(mouse.y - mouseOut.rectangle.location.y + mouseZone.viewPosition.y);
					$t18($t17);
				}));
			}
			this.$lastMouseOver = mouseZone;
		},
		dispatchEvents: function() {
			for (var i = 0; i < this.$events.length; i++) {
				var e = this.$events[i];
				e();
			}
		},
		newFrame: function() {
			if (this.$clearMouseLock) {
				this.$mouseLock = null;
				this.$clearMouseLock = false;
			}
			// make our current zones our lastZones by flipping the references
			// and then cleaning our zones reference
			var next = this.$lastZones;
			this.$lastZones = this.$zones;
			this.$zones = next;
			ss.clear(this.$zones);
			ss.clear(this.$events);
			ss.clear(this.$keyEvents);
			ss.clear(this.$keyboardConsumers);
		},
		isMouseOver: function(zone) {
			return zone.rectangle.contains$2(this.$input.get_mouse().x, this.$input.get_mouse().y);
		},
		isPressed: function(zone) {
			return ss.isValue(this.$mouseLock) && $Franca_Gui_InputZone.op_Equality(this.$mouseLock.zone, zone) && this.isMouseOver(zone) && this.$input.get_mouse().get_leftButton().state === 1 && this.$mouseLock.zone.get_active();
		},
		hasMouseLock: function(zone) {
			return ss.isValue(this.$mouseLock) && $Franca_Gui_InputZone.op_Equality(this.$mouseLock.zone, zone) && this.$mouseLock.zone.get_active();
		},
		hasFocus: function(zone) {
			return ss.isValue(this.$focusZone) && $Franca_Gui_InputZone.op_Equality(ss.unbox(this.$focusZone), zone) && ss.unbox(this.$focusZone).get_active();
		},
		confirmZone: function(zone) {
			this.$zones.push(zone);
			ss.remove(this.$lastZones, zone);
			if (!ss.staticEquals(zone.onCaptureKey, null)) {
				this.$keyboardConsumers.push(zone);
			}
		},
		finishFrame: function() {
			for (var i = 0; i < this.$lastZones.length; i++) {
				var zone = this.$lastZones[i];
				this.$invalidateZone(zone);
			}
		},
		$invalidateZone: function(zone) {
		},
		get_handler: function() {
			return this.$input;
		}
	});
	ss.initClass($Franca_Gui_GuiManager, $asm, { update: null, render: null, dispose: null, get_guiAssembly: null, get_interfaceAssemblies: null, get_assemblies: null, get_onCompileError: null, set_onCompileError: null }, null, [ss.IDisposable]);
	ss.initClass($Franca_Gui_GuiManagerException, $asm, {}, ss.Exception);
	$Franca_Gui_GuiManagerException.$ctor1.prototype = $Franca_Gui_GuiManagerException.$ctor2.prototype = $Franca_Gui_GuiManagerException.prototype;
	ss.initInterface($Franca_Gui_ICodeGeneratedWidget, $asm, { addLayoutCallback: null, removeLayoutCallbacksFor: null, addRenderCallback: null, removeRenderCallbacksFor: null });
	ss.initInterface($Franca_Gui_IWidget, $asm, { get_x: null, set_x: null, get_y: null, set_y: null, get_right: null, set_right: null, get_bottom: null, set_bottom: null, get_width: null, set_width: null, get_height: null, set_height: null, get_screenX: null, get_screenY: null, get_color: null, set_color: null, get_parent: null, get_alwaysOnTop: null, set_alwaysOnTop: null, get_manager: null, set_manager: null, get_id: null, set_id: null, get_hasID: null, set_hasID: null, get_zone: null, get_clipContents: null, set_clipContents: null, get_clipBounds: null, get_children: null, get_visible: null, get_clickThrough: null, get_state: null, set_state: null, stateViewChange: null, stateViewEnter: null, addChild: null, addChild$1: null, removeChild: null, layout: null, postLayout: null, render: null, confirmZone: null, update: null, initialize: null });
	ss.initClass($Franca_Gui_Widget, $asm, {
		get_$layoutCallbacks: function() {
			if (ss.isValue(this.$_layoutCallbacks)) {
				return this.$_layoutCallbacks;
			}
			this.$_layoutCallbacks = [];
			return this.$_layoutCallbacks;
		},
		get_$renderCallbacks: function() {
			if (ss.isValue(this.$_renderCallbacks)) {
				return this.$_renderCallbacks;
			}
			this.$_renderCallbacks = [];
			return this.$_renderCallbacks;
		},
		get_onClick: function() {
			return this.$1$OnClickField;
		},
		set_onClick: function(value) {
			this.$1$OnClickField = value;
		},
		get_onRightClick: function() {
			return this.$1$OnRightClickField;
		},
		set_onRightClick: function(value) {
			this.$1$OnRightClickField = value;
		},
		get_onMouseMove: function() {
			return this.$1$OnMouseMoveField;
		},
		set_onMouseMove: function(value) {
			this.$1$OnMouseMoveField = value;
		},
		get_onMouseDown: function() {
			return this.$1$OnMouseDownField;
		},
		set_onMouseDown: function(value) {
			this.$1$OnMouseDownField = value;
		},
		get_onMouseUp: function() {
			return this.$1$OnMouseUpField;
		},
		set_onMouseUp: function(value) {
			this.$1$OnMouseUpField = value;
		},
		get_onMouseHoldDown: function() {
			return this.$1$OnMouseHoldDownField;
		},
		set_onMouseHoldDown: function(value) {
			this.$1$OnMouseHoldDownField = value;
		},
		get_onMouseHoldUp: function() {
			return this.$1$OnMouseHoldUpField;
		},
		set_onMouseHoldUp: function(value) {
			this.$1$OnMouseHoldUpField = value;
		},
		get_onCaptureKey: function() {
			return this.$1$OnCaptureKeyField;
		},
		set_onCaptureKey: function(value) {
			this.$1$OnCaptureKeyField = value;
		},
		get_onKeyDown: function() {
			return this.$1$OnKeyDownField;
		},
		set_onKeyDown: function(value) {
			this.$1$OnKeyDownField = value;
		},
		get_onKeyUp: function() {
			return this.$1$OnKeyUpField;
		},
		set_onKeyUp: function(value) {
			this.$1$OnKeyUpField = value;
		},
		get_onKeyHoldDown: function() {
			return this.$1$OnKeyHoldDownField;
		},
		set_onKeyHoldDown: function(value) {
			this.$1$OnKeyHoldDownField = value;
		},
		get_onFocus: function() {
			return this.$1$OnFocusField;
		},
		set_onFocus: function(value) {
			this.$1$OnFocusField = value;
		},
		get_onCopy: function() {
			return this.$1$OnCopyField;
		},
		set_onCopy: function(value) {
			this.$1$OnCopyField = value;
		},
		get_onLayout: function() {
			return this.$1$OnLayoutField;
		},
		set_onLayout: function(value) {
			this.$1$OnLayoutField = value;
		},
		get_onBeginRender: function() {
			return this.$1$OnBeginRenderField;
		},
		set_onBeginRender: function(value) {
			this.$1$OnBeginRenderField = value;
		},
		get_onRender: function() {
			return this.$1$OnRenderField;
		},
		set_onRender: function(value) {
			this.$1$OnRenderField = value;
		},
		get_onNativeClick: function() {
			return this.$1$OnNativeClickField;
		},
		set_onNativeClick: function(value) {
			this.$1$OnNativeClickField = value;
		},
		get_state: function() {
			return this.$1$StateField;
		},
		set_state: function(value) {
			this.$1$StateField = value;
		},
		get_onViewChange: function() {
			return this.$1$OnViewChangeField;
		},
		set_onViewChange: function(value) {
			this.$1$OnViewChangeField = value;
		},
		get_onViewEnter: function() {
			return this.$1$OnViewEnterField;
		},
		set_onViewEnter: function(value) {
			this.$1$OnViewEnterField = value;
		},
		get_state$1: function() {
			return this.get_state();
		},
		initialize: function() {
			if (!this.$initialized) {
				this.$initialized = true;
				this.init();
				var $t1 = ss.getEnumerator(this.$children.get_values());
				try {
					while ($t1.moveNext()) {
						var child = $t1.current();
						child.initialize();
					}
				}
				finally {
					$t1.dispose();
				}
			}
		},
		init: function() {
		},
		update: function(context) {
			this.layout(context);
			this.postLayout(context);
			this.confirmZone(context);
		},
		layout: function(context) {
			this.layoutSelf(context);
			var $t1 = this.get_$layoutCallbacks();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var del = $t1[$t2];
				del.delegate(context);
			}
			for (var $t3 = 0; $t3 < this.$childOrder.length; $t3++) {
				var name = this.$childOrder[$t3];
				var child = {};
				if (this.$children.tryGetValue(name, child)) {
					child.$.layout(context);
				}
			}
		},
		layoutSelf: function(context) {
		},
		postLayout: function(context) {
			if (!ss.staticEquals(this.get_onLayout(), null)) {
				this.get_onLayout()(this);
			}
			for (var $t1 = 0; $t1 < this.$childOrder.length; $t1++) {
				var name = this.$childOrder[$t1];
				var child = {};
				if (this.$children.tryGetValue(name, child)) {
					child.$.postLayout(context);
				}
			}
		},
		confirmZone: function(context) {
			if (this.get_visible()) {
				this.get_input().confirmZone(this.get_zone());
				for (var $t1 = 0; $t1 < this.$childOrder.length; $t1++) {
					var name = this.$childOrder[$t1];
					var child = {};
					if (this.$children.tryGetValue(name, child)) {
						child.$.confirmZone(context);
					}
				}
			}
		},
		render: function(context) {
			if (this.get_visible()) {
				this.beginRender(context);
				this.renderSelf(context);
				var $t1 = this.get_$renderCallbacks();
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var del = $t1[$t2];
					del.delegate(context);
				}
				for (var $t3 = 0; $t3 < this.$childOrder.length; $t3++) {
					var name = this.$childOrder[$t3];
					var child = {};
					if (this.$children.tryGetValue(name, child)) {
						child.$.render(context);
					}
				}
				this.postRender(context);
			}
		},
		beginRender: function(context) {
			if (this.get_clipContents()) {
				var clipBounds = this.get_clipBounds();
				var newViewport = Franca.Rectangle.intersect(context.get_graphicsDevice().get_viewport(), Franca.Rectangle.fromLTRB(Math.floor(clipBounds.location.x), Math.floor(clipBounds.location.y), Math.ceil(clipBounds.location.x + clipBounds.size.width), Math.ceil(clipBounds.location.y + clipBounds.size.height)));
				this.$prevViewport = context.get_graphicsDevice().get_viewport();
				if (Franca.Rectangle.op_Inequality(newViewport, this.$prevViewport)) {
					context.get_graphicsDevice().set_viewport(newViewport);
				}
			}
			var onBeginRender = this.get_onBeginRender();
			if (!ss.staticEquals(onBeginRender, null)) {
				onBeginRender(this);
			}
		},
		renderSelf: function(context) {
		},
		postRender: function(context) {
			if (this.get_clipContents() && Franca.Rectangle.op_Inequality(context.get_graphicsDevice().get_viewport(), this.$prevViewport)) {
				context.get_graphicsDevice().set_viewport(this.$prevViewport);
			}
			var onRender = this.get_onRender();
			if (!ss.staticEquals(onRender, null)) {
				onRender(this);
			}
		},
		addChild: function(widget) {
			this.addChild$1(null, widget);
		},
		addChild$1: function(name, widget) {
			if (ss.isNullOrUndefined(name)) {
				if (ss.isNullOrUndefined(this.$childNameIDGen)) {
					this.$childNameIDGen = new Franca.IDGenerator();
				}
				name = '__unnamed' + this.$childNameIDGen.getID().toString();
			}
			if (this.$children.containsKey(name)) {
				throw new Franca.DuplicateItemException.$ctor1(ss.formatString("Cannot add child widget to '{0}': child with name {1} already exists.", this, name));
			}
			if (ss.contains(this.$children.get_values(), widget)) {
				throw new Franca.DuplicateItemException.$ctor1(ss.formatString("Cannot add child widget to '{0}': child already added.", this));
			}
			this.$children.set_item(name, widget);
			this.$childOrder.push(name);
		},
		removeChild: function(name) {
			var child = {};
			if (this.$children.tryGetValue(name, child)) {
				var cgWidget = ss.safeCast(child.$, $Franca_Gui_ICodeGeneratedWidget);
				if (ss.isValue(cgWidget)) {
					cgWidget.removeLayoutCallbacksFor(this);
					cgWidget.removeRenderCallbacksFor(this);
				}
			}
			ss.remove(this.$childOrder, name);
			this.$children.remove(name);
		},
		addLayoutCallback: function(callback) {
			this.get_$layoutCallbacks().push(callback);
		},
		removeLayoutCallbacksFor: function(target) {
			for (var i = this.get_$layoutCallbacks().length - 1; i >= 0; i--) {
				var cb = this.get_$layoutCallbacks()[i];
				if (ss.referenceEquals(cb.target, target)) {
					ss.removeAt(this.get_$layoutCallbacks(), i);
				}
			}
		},
		addRenderCallback: function(callback) {
			this.get_$renderCallbacks().push(callback);
		},
		removeRenderCallbacksFor: function(target) {
			for (var i = this.get_$renderCallbacks().length - 1; i >= 0; i--) {
				var cb = this.get_$renderCallbacks()[i];
				if (ss.referenceEquals(cb.target, target)) {
					ss.removeAt(this.get_$renderCallbacks(), i);
				}
			}
		},
		stateViewChange: function(e) {
			if (!ss.staticEquals(this.get_onViewChange(), null)) {
				this.get_onViewChange()(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		stateViewEnter: function(e) {
			if (!ss.staticEquals(this.get_onViewEnter(), null)) {
				this.get_onViewEnter()(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		click: function(e, handler) {
			if (!ss.staticEquals(handler, null)) {
				handler(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		rightClick: function(e, handler) {
			if (!ss.staticEquals(handler, null)) {
				handler(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		mouseMove: function(e, handler) {
			if (!ss.staticEquals(handler, null)) {
				handler(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		mouseDown: function(e, handler) {
			if (!ss.staticEquals(handler, null)) {
				handler(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		mouseUp: function(e, handler) {
			if (!ss.staticEquals(handler, null)) {
				handler(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		mouseHoldDown: function(e, handler) {
			if (!ss.staticEquals(handler, null)) {
				handler(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		mouseHoldUp: function(e, handler) {
			if (!ss.staticEquals(handler, null)) {
				handler(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		captureKey: function(e, handler) {
			if (!ss.staticEquals(handler, null)) {
				return handler(e);
			}
			return false;
		},
		keyDown: function(e, handler) {
			if (!ss.staticEquals(handler, null)) {
				handler(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		keyUp: function(e, handler) {
			if (!ss.staticEquals(handler, null)) {
				handler(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		keyHoldDown: function(e, handler) {
			if (!ss.staticEquals(handler, null)) {
				handler(e);
			}
			if (e.get_preventDefault()) {
				return;
			}
		},
		focus: function(value, handler) {
			if (!ss.staticEquals(handler, null)) {
				handler(value);
			}
		},
		copy: function(cut, handler) {
			if (!ss.staticEquals(handler, null)) {
				return handler(cut);
			}
			return null;
		},
		nativeClick: function() {
			// native click doesn't get a handler because it has to proceed directly inline
			if (!ss.staticEquals(this.get_onNativeClick(), null)) {
				this.get_onNativeClick()();
			}
			// there should never be default behavior for native click
			//if (e.PreventDefault) {
			//    return;
			//}
		},
		get_canCaptureKeys: function() {
			return this.$1$CanCaptureKeysField;
		},
		set_canCaptureKeys: function(value) {
			this.$1$CanCaptureKeysField = value;
		},
		get_children: function() {
			return this.$children;
		},
		get_viewX: function() {
			return this.$viewX;
		},
		set_viewX: function(value) {
			this.$viewX = value;
		},
		get_viewY: function() {
			return this.$viewY;
		},
		set_viewY: function(value) {
			this.$viewY = value;
		},
		get_viewPosition: function() {
			return new Franca.Vector2.$ctor3(this.$viewX, this.$viewY);
		},
		set_viewPosition: function(value) {
			this.$viewX = value.x;
			this.$viewY = value.y;
		},
		get_color: function() {
			return this.$color;
		},
		set_color: function(value) {
			this.$color = value;
		},
		get_alwaysOnTop: function() {
			return this.$alwaysOnTop;
		},
		set_alwaysOnTop: function(value) {
			this.$alwaysOnTop = value;
		},
		get_x: function() {
			return this.$x;
		},
		set_x: function(value) {
			this.$x = value;
		},
		get_y: function() {
			return this.$y;
		},
		set_y: function(value) {
			this.$y = value;
		},
		get_right: function() {
			return this.get_x() + this.get_width();
		},
		set_right: function(value) {
			this.set_x(value - this.get_width());
		},
		get_bottom: function() {
			return this.get_y() + this.get_height();
		},
		set_bottom: function(value) {
			this.set_y(value - this.get_height());
		},
		get_screenX: function() {
			return (ss.isValue(this.$parent) ? (this.$parent.get_screenX() + this.get_x()) : (this.get_manager().get_x() + this.get_x()));
		},
		get_screenY: function() {
			return (ss.isValue(this.$parent) ? (this.$parent.get_screenY() + this.get_y()) : (this.get_manager().get_y() + this.get_y()));
		},
		get_drawX: function() {
			return this.get_screenX() - $Franca_GraphicsDevice.get_current().get_viewport().location.x - this.get_viewX();
		},
		get_drawY: function() {
			return this.get_screenY() - $Franca_GraphicsDevice.get_current().get_viewport().location.y - this.get_viewY();
		},
		get_width: function() {
			return this.$width;
		},
		set_width: function(value) {
			this.$width = value;
		},
		get_height: function() {
			return this.$height;
		},
		set_height: function(value) {
			this.$height = value;
		},
		get_position: function() {
			return new Franca.PointF.$ctor2(this.get_x(), this.get_y());
		},
		set_position: function(value) {
			this.set_x(value.x);
			this.set_y(value.y);
		},
		get_screenPos: function() {
			return new Franca.PointF.$ctor2(this.get_screenX(), this.get_screenY());
		},
		get_drawPos: function() {
			return new Franca.PointF.$ctor2(this.get_drawX(), this.get_drawY());
		},
		get_screenBounds: function() {
			return new Franca.RectangleF.$ctor2(this.get_screenPos(), this.get_size());
		},
		get_drawBounds: function() {
			return new Franca.RectangleF.$ctor2(this.get_drawPos(), this.get_size());
		},
		get_size: function() {
			return new Franca.SizeF.$ctor2(this.get_width(), this.get_height());
		},
		set_size: function(value) {
			this.set_width(value.width);
			this.set_height(value.height);
		},
		get_bounds: function() {
			return new Franca.RectangleF.$ctor3(this.get_x(), this.get_y(), this.get_width(), this.get_height());
		},
		set_bounds: function(value) {
			this.set_x(value.location.x);
			this.set_y(value.location.y);
			this.set_width(value.size.width);
			this.set_height(value.size.height);
		},
		get_hasID: function() {
			return ss.isValue(this.$id);
		},
		set_hasID: function(value) {
			if (value) {
				if (!ss.isValue(this.$id)) {
					this.$id = $Franca_Gui_Widget.get_idGenerator().getID();
				}
			}
			else {
				this.$id = null;
			}
		},
		get_id: function() {
			if (!this.get_hasID()) {
				return (ss.isValue(this.$parent) ? this.$parent.get_id() : Franca.IncrementalID.op_Implicit$3(0));
			}
			else {
				return ss.unbox(this.$id);
			}
		},
		set_id: function(value) {
			this.$id = value;
		},
		get_clipBounds: function() {
			var thisClipBounds = (this.get_clipContents() ? this.get_screenBounds() : new Franca.RectangleF.$ctor3(-65535, -65535, 131070, 131070));
			if (ss.isValue(this.get_parent())) {
				return Franca.RectangleF.intersect(thisClipBounds, this.get_parent().get_clipBounds());
			}
			else {
				return thisClipBounds;
			}
		},
		get_zone: function() {
			// bind delegates so handlers reflect their current value in case it gets changed later
			var onClick = this.get_onClick();
			var onRightClick = this.get_onRightClick();
			var onMouseMove = this.get_onMouseMove();
			var onMouseDown = this.get_onMouseDown();
			var onMouseUp = this.get_onMouseUp();
			var onMouseHoldDown = this.get_onMouseHoldDown();
			var onMouseHoldUp = this.get_onMouseHoldUp();
			var onCaptureKey = this.get_onCaptureKey();
			var onKeyDown = this.get_onKeyDown();
			var onKeyUp = this.get_onKeyUp();
			var onKeyHoldDown = this.get_onKeyHoldDown();
			//var onKeyHoldUp = OnKeyHoldUp;
			var onFocus = this.get_onFocus();
			var onCopy = this.get_onCopy();
			var bounds = (!this.get_clickThrough() ? Franca.RectangleF.intersect(this.get_clipBounds(), this.get_screenBounds()) : new Franca.RectangleF.$ctor3(this.get_x() - this.get_viewX(), this.get_y() - this.get_viewY(), 0, 0));
			return new $Franca_Gui_InputZone.$ctor1(this, bounds, this.get_id(), this.get_viewPosition(), this.get_visible(), ss.mkdel(this, function(e) {
				this.click(e, onClick);
			}), ss.mkdel(this, function(e1) {
				this.rightClick(e1, onRightClick);
			}), ss.mkdel(this, function(e2) {
				this.mouseMove(e2, onMouseMove);
			}), ss.mkdel(this, function(e3) {
				this.mouseDown(e3, onMouseDown);
			}), ss.mkdel(this, function(e4) {
				this.mouseUp(e4, onMouseUp);
			}), ss.mkdel(this, function(e5) {
				this.mouseHoldDown(e5, onMouseHoldDown);
			}), ss.mkdel(this, function(e6) {
				this.mouseHoldUp(e6, onMouseHoldUp);
			}), (this.get_canCaptureKeys() ? ss.mkdel(this, function(e7) {
				return this.captureKey(e7, onCaptureKey);
			}) : null), ss.mkdel(this, function(e8) {
				this.keyDown(e8, onKeyDown);
			}), ss.mkdel(this, function(e9) {
				this.keyUp(e9, onKeyUp);
			}), ss.mkdel(this, function(e10) {
				this.keyHoldDown(e10, onKeyHoldDown);
			}), this.get_canFocus(), ss.mkdel(this, function(e11) {
				this.focus(e11, onFocus);
			}), ss.mkdel(this, function(e12) {
				return this.copy(e12, onCopy);
			}), ss.mkdel(this, this.nativeClick));
		},
		get_isMouseOver: function() {
			return this.get_input().isMouseOver(this.get_zone());
		},
		get_isPressed: function() {
			return this.get_input().isPressed(this.get_zone());
		},
		get_hasFocus: function() {
			return this.get_visible() && this.get_input().hasFocus(this.get_zone());
		},
		get_canFocus: function() {
			return this.$canFocus;
		},
		set_canFocus: function(value) {
			this.$canFocus = value;
		},
		get_visible: function() {
			if (ss.isValue(this.get_parent()) && !this.get_parent().get_visible()) {
				return false;
			}
			return this.$visible;
		},
		set_visible: function(value) {
			this.$visible = value;
		},
		get_clickThrough: function() {
			if (ss.isValue(this.get_parent()) && this.get_parent().get_clickThrough()) {
				return true;
			}
			return this.$clickThrough;
		},
		set_clickThrough: function(value) {
			this.$clickThrough = value;
		},
		get_parent: function() {
			return this.$parent;
		},
		get_clipContents: function() {
			return this.$1$ClipContentsField;
		},
		set_clipContents: function(value) {
			this.$1$ClipContentsField = value;
		},
		get_manager: function() {
			// return our manager, our parent's manager, or null
			return this.$manager || (ss.isValue(this.$parent) ? this.$parent.get_manager() : null);
		},
		set_manager: function(value) {
			this.$manager = value;
		},
		get_input: function() {
			return (ss.isValue(this.get_manager()) ? this.get_manager().get_input() : null);
		},
		get_content: function() {
			return (ss.isValue(this.get_manager()) ? this.get_manager().get_content() : null);
		},
		get_screen: function() {
			return (ss.isValue(this.get_manager()) ? this.get_manager().get_screen() : null);
		}
	}, null, [$Franca_Gui_IWidget, $Franca_Gui_ICodeGeneratedWidget]);
	ss.initClass($Franca_Gui_Image, $asm, {
		layoutSelf: function(context) {
			$Franca_Gui_Widget.prototype.layoutSelf.call(this, context);
			if (ss.isValue(this.$texture) && this.get_fit().value === 0) {
				if (this.get_width() === 0) {
					this.set_width(this.$texture.source.size.width);
				}
				if (this.get_height() === 0) {
					this.set_height(this.$texture.source.size.height);
				}
			}
		},
		renderSelf: function(context) {
			$Franca_Gui_Widget.prototype.renderSelf.call(this, context);
			if (ss.isValue(this.$texture) && this.$texture.baseTex.get_loaded()) {
				var rect;
				var scalar;
				var size;
				switch (this.get_fit().value) {
					case 0:
					case 1:
					default: {
						rect = new Franca.RectangleF.$ctor2(this.get_drawPos(), new Franca.SizeF.$ctor2(this.$texture.source.size.width, this.$texture.source.size.height));
						break;
					}
					case 4: {
						rect = this.get_drawBounds();
						break;
					}
					case 2: {
						scalar = this.get_width() / this.$texture.source.size.width;
						if (scalar * this.$texture.source.size.height > this.get_height()) {
							scalar = this.get_height() / this.$texture.source.size.height;
						}
						size = new Franca.SizeF.$ctor2(scalar * this.$texture.source.size.width, scalar * this.$texture.source.size.height);
						rect = new Franca.RectangleF.$ctor2(new Franca.PointF.$ctor2(this.get_drawX() + Math.floor(this.get_width() - size.width) / 2, this.get_drawY() + Math.floor(this.get_height() - size.height) / 2), size);
						break;
					}
					case 3: {
						scalar = this.get_width() / this.$texture.source.size.width;
						if (scalar * this.$texture.source.size.height < this.get_height()) {
							scalar = this.get_height() / this.$texture.source.size.height;
						}
						size = new Franca.SizeF.$ctor2(scalar * this.$texture.source.size.width, scalar * this.$texture.source.size.height);
						rect = new Franca.RectangleF.$ctor2(new Franca.PointF.$ctor2(this.get_drawX() + Math.floor(this.get_width() - size.width) / 2, this.get_drawY() + Math.floor(this.get_height() - size.height) / 2), size);
						break;
					}
				}
				this.get_manager().get_batch().begin(0, 3, 12, null);
				this.get_manager().get_batch().draw(this.$texture, rect, $Franca_HdrColors.op_Implicit(this.get_color()), 0, 0);
				this.get_manager().get_batch().end();
			}
		},
		get_texture: function() {
			return this.$texture;
		},
		set_texture: function(value) {
			this.$texture = value;
		},
		get_file: function() {
			return this.$file;
		},
		set_file: function(value) {
			if (!ss.referenceEquals(this.$file, value)) {
				this.$file = value;
				this.set_texture($Franca_SubTexture.op_Implicit(this.get_content().loadTexture(value, true, false, true)));
			}
		},
		get_fit: function() {
			return this.$2$FitField;
		},
		set_fit: function(value) {
			this.$2$FitField = value;
		}
	}, $Franca_Gui_Widget, [$Franca_Gui_IWidget, $Franca_Gui_ICodeGeneratedWidget]);
	ss.initEnum($Franca_Gui_ImageFit, $asm, { auto: 0, none: 1, fit: 2, fill: 3, stretch: 4 });
	ss.initClass($Franca_Gui_InputZone, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_Gui_InputZone);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return Franca.RectangleF.op_Equality(ss.unbox(b).rectangle, this.rectangle) && Franca.IncrementalID.op_Equality(ss.unbox(b).id, this.id);
		},
		equalsT: function(b) {
			return Franca.RectangleF.op_Equality(this.rectangle, b.rectangle) && Franca.IncrementalID.op_Equality(this.id, b.id);
		},
		getHashCode: function() {
			return this.rectangle.getHashCode() ^ this.id.getHashCode();
		},
		toString: function() {
			return ss.formatString('{0}:{1}', ss.getTypeName($Franca_Gui_InputZone), (ss.isValue(this.source) ? ss.getTypeFullName(ss.getInstanceType(this.source)) : 'null'));
		},
		get_active: function() {
			return this.visible;
		}
	}, null, [ss.IEquatable]);
	$Franca_Gui_InputZone.$ctor1.prototype = $Franca_Gui_InputZone.prototype;
	$Franca_Gui_InputZone.__class = false;
	ss.initInterface($Franca_Gui_ITextSelectionSource, $asm, { getText: null });
	ss.initInterface($Franca_Gui_IWidgetManager, $asm, { addChild: null, removeChild: null, get_autoResize: null, set_autoResize: null, get_x: null, set_x: null, get_y: null, set_y: null, get_width: null, set_width: null, get_height: null, set_height: null, get_batch: null, get_input: null, get_graphicsDevice: null, get_content: null, get_screen: null, get_children: null });
	ss.initClass($Franca_Gui_KeyCaptureEvent, $asm, {
		get_keyCode: function() {
			return this.$1$KeyCodeField;
		},
		set_keyCode: function(value) {
			this.$1$KeyCodeField = value;
		},
		get_state: function() {
			return this.$1$StateField;
		},
		set_state: function(value) {
			this.$1$StateField = value;
		},
		get_button: function() {
			return this.$1$ButtonField;
		},
		set_button: function(value) {
			this.$1$ButtonField = value;
		},
		get_physicalKey: function() {
			return this.$1$PhysicalKeyField;
		},
		set_physicalKey: function(value) {
			this.$1$PhysicalKeyField = value;
		},
		get_virtualKey: function() {
			return this.$1$VirtualKeyField;
		},
		set_virtualKey: function(value) {
			this.$1$VirtualKeyField = value;
		}
	});
	ss.initClass($Franca_Gui_Label, $asm, {
		get_selection$1: function() {
			return this.$_selection;
		},
		set_selection: function(value) {
			if (!ss.referenceEquals(this.$_selection, value)) {
				this.$_selection = value;
				this.$_selection.remove_onChange(ss.mkdel(this, this.$_SelectionChanged));
				this.$_selection.add_onChange(ss.mkdel(this, this.$_SelectionChanged));
				this.$_SelectionChanged(value);
			}
		},
		$_SelectionChanged: function(selection) {
			if (ss.referenceEquals(this.get_selection$1(), selection)) {
				this.selectionChanged();
			}
		},
		selectionChanged: function() {
			//Clipboard.HideCopyPasteButtons();
		},
		captureKey: function(e, handler) {
			if (this.get_canSelect() && this.get_hasFocus() && this.get_selection$1().get_length() > 0 && e.get_virtualKey() === 67) {
				return true;
			}
			return $Franca_Gui_Widget.prototype.captureKey.call(this, e, handler);
		},
		keyDown: function(e, handler) {
			$Franca_Gui_Widget.prototype.keyDown.call(this, e, handler);
			if (e.get_preventDefault()) {
				return;
			}
			// this is called via GetCopyText now
			//if (KeyboardButton.KeyFromKeyCode(e.Key.Code) == Key.C && Manager.Input.Handler.GetKey(Key.Control).State == KeyState.Down) {
			//    Copy();
			//}
		},
		copy: function(cut, handler) {
			if (this.get_hasFocus()) {
				var ret = $Franca_Gui_Widget.prototype.copy.call(this, cut, handler);
				if (ss.isValue(ret)) {
					return ret;
				}
			}
			if (this.get_canSelect() && this.get_hasFocus() && this.get_selection$1().get_length() > 0) {
				if (this.get_allowMarkup()) {
					var text = this.get_selection$1().get_text();
					return Franca.Text.Markup.remove(text);
				}
				else {
					return this.get_selection$1().get_text();
				}
			}
			return null;
		},
		mouseDown: function(e, handler) {
			$Franca_Gui_Widget.prototype.mouseDown.call(this, e, handler);
			if (e.get_preventDefault()) {
				return;
			}
			if (this.get_canSelect() && e.get_button().type === 0) {
				this.selecting = true;
				this.get_selection$1().set_initialIndex(this.wrapped.indexFromPosition(new Franca.Vector2.$ctor3(e.get_x() - this.get_padding().left, e.get_y() - this.get_padding().top), this.get_align()));
				this.get_selection$1().set_finalIndex(this.wrapped.indexFromPosition(new Franca.Vector2.$ctor3(e.get_x() - this.get_padding().left, e.get_y() - this.get_padding().top), this.get_align()));
			}
		},
		mouseHoldDown: function(e, handler) {
			$Franca_Gui_Widget.prototype.mouseHoldDown.call(this, e, handler);
			if (e.get_preventDefault()) {
				return;
			}
			if (this.get_canSelect() && e.get_button().type === 0) {
				this.get_selection$1().set_finalIndex(this.wrapped.indexFromPosition(new Franca.Vector2.$ctor3(e.get_x() - this.get_padding().left, e.get_y() - this.get_padding().top), this.get_align()));
			}
		},
		mouseUp: function(e, handler) {
			$Franca_Gui_Widget.prototype.mouseUp.call(this, e, handler);
			if (e.get_preventDefault()) {
				return;
			}
			this.selecting = false;
		},
		focus: function(value, handler) {
			if (!value) {
				this.get_selection$1().clear(null);
			}
			$Franca_Gui_Widget.prototype.focus.call(this, value, handler);
		},
		resize: function() {
			if (ss.isValue(this.get_spriteFont()) && this.get_spriteFont().get_loaded()) {
				if (this.$autoSize.value === 3) {
					this.set_width(this.wrapped.get_width() + this.get_padding().get_horizontal());
					this.set_height(this.wrapped.get_height() + this.get_padding().get_vertical());
				}
				else if (this.$autoSize.value === 1) {
					this.set_width(this.wrapped.get_width() + this.get_padding().get_horizontal());
				}
				else {
					this.set_height(this.wrapped.get_height() + this.get_padding().get_vertical());
				}
			}
			else if (this.$autoSize.value === 3) {
				this.set_width(this.get_padding().get_horizontal());
				this.set_height(this.get_padding().get_vertical());
			}
			else if (this.$autoSize.value === 1) {
				this.set_width(this.get_padding().get_horizontal());
			}
			else {
				this.set_height(this.get_padding().get_vertical());
			}
		},
		layoutSelf: function(context) {
			$Franca_Gui_Widget.prototype.layoutSelf.call(this, context);
			this.wrapped.set_font(this.get_spriteFont());
			if (ss.isValue(this.get_spriteFont()) && this.get_spriteFont().get_loaded()) {
				this.wrapped.wordWrap();
			}
			if (this.$autoSize.value !== 0) {
				this.resize();
			}
		},
		postLayout: function(context) {
			$Franca_Gui_Widget.prototype.postLayout.call(this, context);
			if (this.$autoSize.value !== 0) {
				if (this.$autoSize.value === 3) {
					this.wrapped.set_maxWidth(this.wrapped.get_width());
					this.wrapped.set_maxHeight(this.wrapped.get_height());
				}
				else if (this.$autoSize.value === 1) {
					this.wrapped.set_maxWidth(this.wrapped.get_width());
					this.wrapped.set_maxHeight(this.get_height() - this.get_padding().get_vertical());
				}
				else {
					this.wrapped.set_maxWidth(this.get_width() - this.get_padding().get_horizontal());
					this.wrapped.set_maxHeight(this.wrapped.get_height());
				}
			}
			else {
				this.wrapped.set_maxWidth(this.get_width() - this.get_padding().get_horizontal());
				this.wrapped.set_maxHeight(this.get_height() - this.get_padding().get_vertical());
			}
		},
		renderSelf: function(context) {
			$Franca_Gui_Widget.prototype.renderSelf.call(this, context);
			if (!System.StringExtensions.isEmpty(this.get_text(), false)) {
				if (ss.isValue(this.get_spriteFont()) && this.get_spriteFont().get_loaded()) {
					this.wrapped.draw$1(Franca.Vector2.op_Explicit$1(this.get_textBounds().location), Franca.Color.op_Implicit(Franca.Color.op_Multiply(this.$topColor, this.get_color())), Franca.Color.op_Implicit(Franca.Color.op_Multiply(this.$bottomColor, this.get_color())), this.$stroke, Franca.Color.op_Implicit(Franca.Color.op_Multiply(this.$strokeTopColor, this.get_color())), Franca.Color.op_Implicit(Franca.Color.op_Multiply(this.$strokeBottomColor, this.get_color())), this.get_selection$1(), this.get_selectionColor(), this.$textAlign, this.get_visibleTextStart(), this.get_visibleTextLength());
				}
			}
		},
		get_spriteFont: function() {
			return this.$font || this.get_content().get_defaultFont();
		},
		get_text: function() {
			return this.wrapped.get_value();
		},
		set_text: function(value) {
			this.wrapped.set_value((this.$multiLine ? value : System.StringExtensions.removeNewlines(value)));
		},
		get_selection: function() {
			return this.get_selection$1();
		},
		get_font: function() {
			return this.$fontName;
		},
		set_font: function(value) {
			this.$fontName = value;
			this.$font = this.get_content().getFont(this.$fontName);
		},
		get_fontColor: function() {
			return this.$topColor;
		},
		set_fontColor: function(value) {
			this.$topColor = value;
			this.$bottomColor = value;
		},
		get_topColor: function() {
			return this.$topColor;
		},
		set_topColor: function(value) {
			this.$topColor = value;
		},
		get_bottomColor: function() {
			return this.$bottomColor;
		},
		set_bottomColor: function(value) {
			this.$bottomColor = value;
		},
		get_strokeColor: function() {
			return this.$strokeTopColor;
		},
		set_strokeColor: function(value) {
			this.$strokeTopColor = value;
			this.$strokeBottomColor = value;
		},
		get_strokeTopColor: function() {
			return this.$strokeTopColor;
		},
		set_strokeTopColor: function(value) {
			this.$strokeTopColor = value;
		},
		get_strokeBottomColor: function() {
			return this.$strokeBottomColor;
		},
		set_strokeBottomColor: function(value) {
			this.$strokeBottomColor = value;
		},
		get_fontSize: function() {
			return this.wrapped.get_size();
		},
		set_fontSize: function(value) {
			this.wrapped.set_size(value);
		},
		get_stroke: function() {
			return this.$stroke;
		},
		set_stroke: function(value) {
			this.$stroke = value;
		},
		get_autoSize: function() {
			return this.$autoSize;
		},
		set_autoSize: function(value) {
			this.$autoSize = value;
			if (this.$multiLine && (this.$autoSize.value === 0 || this.$autoSize.value === 2)) {
				this.wrapped.set_wrapped(this.$_wrapped);
			}
			else {
				this.wrapped.set_wrapped(false);
			}
		},
		get_wordWrapped: function() {
			return this.wrapped.get_wrapped() && (this.$autoSize.value === 0 || this.$autoSize.value === 2) && this.$multiLine;
		},
		set_wordWrapped: function(value) {
			if (value) {
				if ((this.$autoSize.value === 0 || this.$autoSize.value === 2) && this.$multiLine) {
					this.wrapped.set_wrapped(true);
				}
				this.$_wrapped = true;
			}
			else {
				this.wrapped.set_wrapped(false);
				this.$_wrapped = false;
			}
		},
		get_multiLine: function() {
			return this.$multiLine;
		},
		set_multiLine: function(value) {
			if (this.$multiLine !== value) {
				this.$multiLine = value;
				if (!this.$multiLine) {
					var end = ss.indexOfAnyString(this.get_text(), $Franca_Gui_Label.newLineChars);
					if (end > -1) {
						this.set_text(this.get_text().substr(0, end));
					}
				}
				if (this.$multiLine && (this.$autoSize.value === 0 || this.$autoSize.value === 2)) {
					this.wrapped.set_wrapped(this.$_wrapped);
				}
				else {
					this.wrapped.set_wrapped(false);
				}
			}
		},
		get_align: function() {
			return this.$textAlign;
		},
		set_align: function(value) {
			this.$textAlign = value;
		},
		get_padding: function() {
			return this.$2$PaddingField;
		},
		set_padding: function(value) {
			this.$2$PaddingField = value;
		},
		get_textBounds: function() {
			var $t2 = this.get_drawBounds().location.x + this.get_padding().left;
			var $t3 = this.get_drawBounds().location.y + this.get_padding().top;
			var $t1 = this.get_drawBounds();
			var $t5 = $t1.location.x + $t1.size.width - this.get_padding().right;
			var $t4 = this.get_drawBounds();
			return Franca.RectangleF.fromLTRB($t2, $t3, $t5, $t4.location.y + $t4.size.height - this.get_padding().bottom);
		},
		get_bold: function() {
			return this.wrapped.get_bold();
		},
		set_bold: function(value) {
			this.wrapped.set_bold(value);
		},
		get_italic: function() {
			return this.wrapped.get_italic();
		},
		set_italic: function(value) {
			this.wrapped.set_italic(value);
		},
		get_kerning: function() {
			return this.$2$KerningField;
		},
		set_kerning: function(value) {
			this.$2$KerningField = value;
		},
		get_allowMarkup: function() {
			return this.wrapped.get_allowMarkup();
		},
		set_allowMarkup: function(value) {
			this.wrapped.set_allowMarkup(value);
		},
		get_multiplyColor: function() {
			return this.wrapped.get_color();
		},
		set_multiplyColor: function(value) {
			this.wrapped.set_color(value);
		},
		get_canSelect: function() {
			return this.$canSelect && this.get_canFocus();
		},
		set_canSelect: function(value) {
			this.$canSelect = value;
		},
		get_selectionColor: function() {
			return (ss.isValue(this.$selectionColor) ? ss.unbox(this.$selectionColor) : $Franca_Gui_Label.get_defaultSelectionColor());
		},
		set_selectionColor: function(value) {
			this.$selectionColor = value;
		},
		get_visibleTextStart: function() {
			return this.$2$VisibleTextStartField;
		},
		set_visibleTextStart: function(value) {
			this.$2$VisibleTextStartField = value;
		},
		get_visibleTextLength: function() {
			return this.$2$VisibleTextLengthField;
		},
		set_visibleTextLength: function(value) {
			this.$2$VisibleTextLengthField = value;
		},
		get_screenString: function() {
			return this.wrapped;
		}
	}, $Franca_Gui_Widget, [$Franca_Gui_IWidget, $Franca_Gui_ICodeGeneratedWidget]);
	ss.initClass($Franca_Gui_MouseLock, $asm, {});
	ss.initClass($Franca_Gui_MultiFont, $asm, {
		getFontMetrics: function(formatting, scale) {
			return this.getFontMetrics$1(formatting.size, scale, formatting.bold, formatting.italic);
		},
		getFontMetrics$1: function(size, scale, bold, italic) {
			var metrics = this.$defaultFont.get(bold, italic).getFontMetrics(size);
			return ((scale === 1) ? metrics : $Franca_FontMetrics.op_Multiply(metrics, scale));
		},
		getGlyphMetrics: function(c, formatting, scale) {
			return this.getGlyphMetrics$3(c, formatting.size, scale, formatting.bold, formatting.italic);
		},
		getGlyphMetrics$1: function(c, formatting, scale) {
			return this.getGlyphMetrics$3(c, formatting.size, scale, formatting.bold, formatting.italic);
		},
		getGlyphMetrics$2: function(c, size, scale, bold, italic) {
			return this.getGlyphMetrics$3(c, size, scale, bold, italic);
		},
		getGlyphMetrics$3: function(c, size, scale, bold, italic) {
			var metrics;
			for (var i = 0; i < this.$fonts.length; i++) {
				var fnt = this.$fonts[i].get(bold, italic);
				if (fnt.hasChar$1(c)) {
					metrics = fnt.getGlyphMetrics$1(c, size);
					return ((scale === 1) ? metrics : $Franca_GlyphMetrics.op_Multiply(metrics, scale));
				}
			}
			metrics = this.$defaultFont.get(bold, italic).getGlyphMetrics$1(c, size);
			return ((scale === 1) ? metrics : $Franca_GlyphMetrics.op_Multiply(metrics, scale));
		},
		getKerning: function(left, right, formatting, scale) {
			return this.getKerning$3(left, right, formatting.size, scale, formatting.bold, formatting.italic);
		},
		getKerning$1: function(left, right, formatting, scale) {
			return this.getKerning$3(left, right, formatting.size, scale, formatting.bold, formatting.italic);
		},
		getKerning$2: function(left, right, size, scale, bold, italic) {
			return this.getKerning$3(left, right, size, scale, bold, italic);
		},
		getKerning$3: function(left, right, size, scale, bold, italic) {
			for (var i = 0; i < this.$fonts.length; i++) {
				var fnt = this.$fonts[i].get(bold, italic);
				if (fnt.hasChar$1(left)) {
					var fontScale = 1 / fnt.get_unitsPerEm() * size;
					var kern = fnt.getKerningValue$3(left, right, fontScale);
					return ((scale === 1) ? kern : (kern * scale));
				}
			}
			return 0;
		},
		measure$2: function(text, formatting, allowMarkup) {
			return this.measure$1(text, 0, text.length, formatting, 1, allowMarkup);
		},
		measure: function(text, formatting, scale, allowMarkup) {
			return this.measure$1(text, 0, text.length, formatting, scale, allowMarkup);
		},
		measure$1: function(text, index, length, formatting, scale, allowMarkup) {
			return Enumerable.from(this.getChunks(text, index, length, 4294967295, formatting, scale, allowMarkup)).firstOrDefault(null, ss.getDefaultValue($Franca_Gui_WordChunk)).size;
		},
		$combineFontMetrics: function(a, b) {
			return new $Franca_FontMetrics.$ctor3(Math.max(a.get_ascent(), b.get_ascent()), Math.min(a.get_descent(), b.get_descent()), Math.max(a.get_linegap(), b.get_linegap()), Math.min(a.get_xMin(), b.get_xMin()), Math.min(a.get_yMin(), b.get_yMin()), Math.max(a.get_xMax(), b.get_xMax()), Math.max(a.get_yMax(), b.get_yMax()));
		},
		getChunks: function(text, index, length, maxWidth, formatting, scale, allowMarkup) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(text, index, length, maxWidth, formatting, scale, allowMarkup) {
					var $result, $state = 0, end, metrics, width, lastChunk, enumerator, chr, glyph, advance, markup;
					var $finally = function() {
						if (ss.isValue(enumerator)) {
							enumerator.dispose();
						}
					};
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									end = index + length;
									metrics = this.getFontMetrics(formatting, scale);
									width = 0;
									lastChunk = index;
									//for (int i = index; i < end; i++) {
									enumerator = Franca.StringHelper.codePoints(text, index, end, false).getEnumerator$1();
									$state = 4;
									continue $sm1;
								}
								case 4: {
									$state = 2;
									if (!enumerator.moveNext()) {
										$state = 3;
										continue $sm1;
									}
									chr = enumerator.current();
									if (!Franca.Text.UnicodeExtensions.UintCharExtensions.isNonPrintableControl(chr)) {
										glyph = this.getGlyphMetrics$1(chr, formatting, 1);
										advance = glyph.get_advanceWidth();
										if (formatting.kerning && enumerator.get_next() > 0) {
											advance += this.getKerning$1(enumerator.current(), enumerator.get_next(), formatting, 1);
										}
										advance *= scale;
										if (width + advance >= maxWidth) {
											$result = new $Franca_Gui_WordChunk.$ctor1(new $Franca_Gui_WordSize.$ctor1(metrics.get_ascent(), metrics.get_descent(), metrics.get_linegap(), width), enumerator.get_index() - lastChunk);
											$state = 6;
											return true;
										}
										$state = 5;
										continue $sm1;
									}
									else {
										if (allowMarkup && chr === 6) {
											markup = Franca.Text.Markup.read$1(text, enumerator.get_index());
											if (ss.isValue(markup)) {
												formatting.applyMarkup(markup);
												if (markup.get_isSize() || markup.get_resetAll()) {
													metrics = this.$combineFontMetrics(metrics, this.getFontMetrics(formatting, scale));
												}
												//i += markup.Length - 1;
												enumerator.skip(markup.get_length() - 1);
											}
										}
										$state = 4;
										continue $sm1;
									}
								}
								case 3: {
									$state = -1;
									$finally.call(this);
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (end - lastChunk > 0) {
										$result = new $Franca_Gui_WordChunk.$ctor1(new $Franca_Gui_WordSize.$ctor1(metrics.get_ascent(), metrics.get_descent(), metrics.get_linegap(), width), end - lastChunk);
										$state = -1;
										return true;
									}
									$state = -1;
									break $sm1;
								}
								case 6: {
									$state = 2;
									width = 0;
									lastChunk = enumerator.get_index();
									$state = 5;
									continue $sm1;
								}
								case 5: {
									$state = 2;
									width += advance;
									$state = 4;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, function() {
						try {
							switch ($state) {
								case 2:
								case 3:
								case 4:
								case 5:
								case 6: {
									try {
										break;
									}
									finally {
										$finally.call(this);
									}
								}
							}
						}
						finally {
							$state = -1;
						}
					}, this);
				}).call(this, text, index, length, maxWidth, formatting, scale, allowMarkup);
			}, this);
		},
		getStrokeSize: function(fontSize) {
			if (ss.isNullOrUndefined(this.$defaultFont) || !this.$defaultFont.get_loaded()) {
				return 0;
			}
			return this.$manager.getStrokeSize(this.$defaultFont.get_plain(), fontSize);
		},
		beginBatch: function(batch, scale) {
			//if (Compressed) {
			//    batch.Begin(true, filter: TextureFilter.Nearest);
			//}
			//else {
			batch.begin$2(false, 0, ((scale === 1) ? 12 : 3), 12, null);
			//batch.Begin(false);
			//}
		},
		$getGlyphDictionary: function(size) {
			var glyphDict = {};
			if (!this.$glyphs.tryGetValue(size, glyphDict)) {
				glyphDict.$ = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_SpriteFontGlyph])]))();
				this.$glyphs.set_item(size, glyphDict.$);
			}
			return glyphDict.$;
		},
		$getGlyph: function(batch, chr, formatting, scale) {
			var glyph = {};
			var glyphDict = this.$getGlyphDictionary(formatting.size);
			//var kvp = new KeyValuePair<char, int>(chr, 0 + (formatting.Bold ? 1 : 0) + (formatting.Italic ? 2 : 0) + (formatting.Underline ? 4 : 0));
			var key = (formatting.bold ? 1 : 0) + (formatting.italic ? 2 : 0) + (formatting.underline ? 4 : 0);
			var charDict = { $: null };
			if (!glyphDict.tryGetValue(chr, charDict) || !charDict.$.tryGetValue(key, glyph) || glyph.$.invalidated) {
				var fnt;
				if (!glyphDict.containsKey(chr)) {
					glyphDict.set_item(chr, new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $Franca_SpriteFontGlyph]))());
				}
				for (var fontIndex = 0; fontIndex < this.$fonts.length; fontIndex++) {
					fnt = this.$fonts[fontIndex].get(formatting.bold, formatting.italic);
					if (fnt.hasChar$1(chr)) {
						glyph.$ = this.get_manager().requestGlyph$1(fnt, chr, formatting.size);
						if (ss.isNullOrUndefined(glyph.$)) {
							batch.end();
							this.get_manager().invalidateRegionLRU();
							glyph.$ = this.get_manager().requestGlyph$1(fnt, chr, formatting.size);
							this.beginBatch(batch, scale);
						}
						glyphDict.get_item(chr).set_item(key, glyph.$);
						return glyph.$;
					}
				}
				fnt = this.$defaultFont.get(formatting.bold, formatting.italic);
				glyph.$ = this.get_manager().requestGlyph$1(fnt, chr, formatting.size);
				if (ss.isNullOrUndefined(glyph.$)) {
					batch.end();
					this.get_manager().invalidateRegionLRU();
					glyph.$ = this.get_manager().requestGlyph$1(fnt, chr, formatting.size);
					this.beginBatch(batch, scale);
				}
				glyphDict.get_item(chr).set_item(key, glyph.$);
				return glyph.$;
			}
			return glyph.$;
		},
		draw$1: function(text, formatting, x, y, color, stroke, strokeColor, selection, selectionColor, allowMarkup, scale) {
			this.draw(text, 0, text.length, formatting, scale, x, y, color, color, stroke, strokeColor, strokeColor, selection, selectionColor, allowMarkup, 0, -1);
		},
		draw$2: function(text, formatting, x, y, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, selection, selectionColor, allowMarkup, scale) {
			this.draw(text, 0, text.length, formatting, scale, x, y, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, selection, selectionColor, allowMarkup, 0, -1);
		},
		draw: function(text, index, length, formatting, scale, x, y, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, selection, selectionColor, allowMarkup, visibleStartIndex, visibleEndIndex) {
			x = Math.floor(x);
			y = Math.floor(y);
			if (visibleEndIndex < 0) {
				visibleEndIndex = index + length;
			}
			var batch = this.$manager.get_fontBatch();
			var batchBegun = false;
			var hasSelection = ss.isValue(selection) && selection.get_length() > 0 && selection.get_end() >= index && selection.get_start() < index + length && ss.isValue(selectionColor);
			var format = null;
			for (var pass = 0; pass < 3; pass++) {
				if (pass === 0 && !hasSelection) {
					continue;
				}
				else if (pass === 1 && !stroke) {
					continue;
				}
				if (pass === 0) {
					// disable the obsolete message, we know what we're doing (we want the default underlying spritebatch behavior for rects)
					batch.begin$1(0, 3, 12, null);
				}
				else if (!batchBegun) {
					batchBegun = true;
					if (hasSelection) {
						batch.end();
					}
					this.beginBatch(batch, scale);
				}
				format = ((stroke || hasSelection) ? formatting.clone$1() : formatting);
				var maxMetrics = this.getFontMetrics(format, scale);
				var curMetrics = this.getFontMetrics(format, scale);
				var drawSelection = pass === 0;
				var drawStroke = pass === 1;
				var top = Franca.HdrColor.op_Multiply(Franca.Color.op_Implicit(format.color || Franca.Color.white), (drawStroke ? ss.unbox(strokeTopColor) : topColor));
				var bottom = Franca.HdrColor.op_Multiply(Franca.Color.op_Implicit(format.color || Franca.Color.white), (drawStroke ? ss.unbox(strokeBottomColor) : bottomColor));
				var startX = x;
				var curx = startX;
				var cury = y;
				var end = index + length;
				//for (int i = index; i < end; i++) {
				//    var chr = text[i];
				{
					var enumerator = Franca.StringHelper.codePoints(text, index, end, false).getEnumerator$1();
					try {
						while (enumerator.moveNext()) {
							var chr = enumerator.current();
							if (!Franca.Text.UnicodeExtensions.UintCharExtensions.isNonPrintableControl(chr)) {
								if (chr !== 10 && chr !== 13) {
									if (!drawSelection) {
										var glyph = this.$getGlyph(batch, chr, format, scale);
										if (ss.isNullOrUndefined(glyph)) {
											continue;
										}
										var advance = glyph.metrics.get_advanceWidth();
										if (format.kerning && enumerator.get_next() > 0) {
											var kern = this.getKerning$1(chr, enumerator.get_next(), format, scale);
											if (kern !== 0) {
												advance += kern * scale;
											}
										}
										var glyphTop, glyphBottom;
										if (Franca.HdrColor.op_Equality(top, bottom)) {
											glyphTop = top;
											glyphBottom = bottom;
										}
										else {
											glyphTop = Franca.HdrColor.lerp(top, bottom, glyph.topAlpha, false);
											glyphBottom = Franca.HdrColor.lerp(top, bottom, glyph.bottomAlpha, false);
										}
										var rect = new Franca.RectangleF.$ctor3(curx + glyph.bearingX * scale, cury - glyph.ascent * scale, glyph.texture.source.size.width * scale, glyph.texture.source.size.height * scale);
										if (enumerator.get_index() >= visibleStartIndex && enumerator.get_index() < visibleEndIndex) {
											batch.drawGlyph$3(glyph, rect, glyphTop, glyphBottom, drawStroke, 0, 0);
										}
										glyph.region.lastUsed = Franca.Platform.get_time();
										curx = curx + advance;
									}
									else {
										var glyph1 = this.getGlyphMetrics$1(chr, format, scale);
										var advance1 = glyph1.get_advanceWidth();
										if (format.kerning && enumerator.get_next() > 0) {
											var kern1 = this.getKerning$1(chr, enumerator.get_next(), format, scale);
											if (kern1 !== 0) {
												advance1 += kern1;
											}
										}
										if (enumerator.get_index() >= selection.get_start() && enumerator.get_index() < selection.get_end()) {
											var rect1 = new Franca.RectangleF.$ctor3(curx, cury - curMetrics.get_ascent() * scale, advance1 * scale, curMetrics.get_linespace() * scale);
											if (enumerator.get_index() >= visibleStartIndex && enumerator.get_index() < visibleEndIndex) {
												batch.drawRectangle(rect1, $Franca_HdrColors.op_Implicit(ss.unbox(selectionColor)), 0);
											}
										}
										curx = curx + advance1;
									}
								}
								else {
									curx = startX;
									cury += maxMetrics.get_linespace() * scale;
									if (chr === 13 && enumerator.get_next() === 10) {
										enumerator.moveNext();
										// skip the newline in the \r\n sequence
									}
								}
							}
							else if (allowMarkup && chr === 6) {
								var markup = Franca.Text.Markup.read$1(text, enumerator.get_index());
								if (ss.isValue(markup)) {
									format.applyMarkup(markup);
									var resetAll = markup.get_resetAll();
									if (markup.get_isSize() || resetAll) {
										curMetrics = this.getFontMetrics(format, scale);
										maxMetrics = this.$combineFontMetrics(maxMetrics, curMetrics);
									}
									if (markup.get_isColor() || resetAll) {
										top = Franca.HdrColor.op_Multiply(Franca.Color.op_Implicit(format.color || Franca.Color.white), (drawStroke ? ss.unbox(strokeTopColor) : topColor));
										bottom = Franca.HdrColor.op_Multiply(Franca.Color.op_Implicit(format.color || Franca.Color.white), (drawStroke ? ss.unbox(strokeBottomColor) : bottomColor));
									}
									//i += markup.Length - 1;
									enumerator.skip(markup.get_length() - 1);
								}
							}
						}
					}
					finally {
						if (ss.isValue(enumerator)) {
							enumerator.dispose();
						}
					}
				}
			}
			if (stroke) {
				formatting.copyFrom(format);
			}
			batch.end();
		},
		get_fonts: function() {
			return this.$fonts;
		},
		get_manager: function() {
			return this.$manager;
		},
		get_loaded: function() {
			return this.$defaultFont.get_loaded();
		}
	}, null, [$Franca_Gui_IFont]);
	$Franca_Gui_MultiFont.$ctor1.prototype = $Franca_Gui_MultiFont.prototype;
	ss.initClass($Franca_Gui_Padding, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_Gui_Padding);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).left === this.left && ss.unbox(b).top === this.top && ss.unbox(b).right === this.right && ss.unbox(b).bottom === this.bottom;
		},
		equalsT: function(b) {
			return b.left === this.left && b.top === this.top && b.right === this.right && b.bottom === this.bottom;
		},
		getHashCode: function() {
			return ss.getHashCode(this.left) ^ ss.getHashCode(this.top) ^ ss.getHashCode(this.right) ^ ss.getHashCode(this.bottom);
		},
		fromJson: function(json) {
			var left = 0;
			var leftJson = {};
			if (json.tryGetValue('left', leftJson) && leftJson.$.get_isDouble()) {
				left = Franca.JsonValue.op_Implicit$3(leftJson.$);
			}
			var top = 0;
			var topJson = {};
			if (json.tryGetValue('top', topJson) && topJson.$.get_isDouble()) {
				top = Franca.JsonValue.op_Implicit$3(topJson.$);
			}
			var right = 0;
			var rightJson = {};
			if (json.tryGetValue('right', rightJson) && rightJson.$.get_isDouble()) {
				right = Franca.JsonValue.op_Implicit$3(rightJson.$);
			}
			var bottom = 0;
			var bottomJson = {};
			if (json.tryGetValue('bottom', bottomJson) && bottomJson.$.get_isDouble()) {
				bottom = Franca.JsonValue.op_Implicit$3(bottomJson.$);
			}
			return new $Franca_Gui_Padding.$ctor4(Franca.JsonValue.op_Implicit$3(json.get_item('left')), Franca.JsonValue.op_Implicit$3(json.get_item('top')), Franca.JsonValue.op_Implicit$3(json.get_item('right')), Franca.JsonValue.op_Implicit$3(json.get_item('bottom')));
		},
		toJson: function() {
			var json = new Franca.JObject();
			json.set_item('left', Franca.JsonValue.op_Implicit$q(this.left));
			json.set_item('top', Franca.JsonValue.op_Implicit$q(this.top));
			json.set_item('right', Franca.JsonValue.op_Implicit$q(this.right));
			json.set_item('bottom', Franca.JsonValue.op_Implicit$q(this.bottom));
			return json;
		},
		toString: function() {
			if (this.left === this.top && this.top === this.right && this.right === this.bottom) {
				return System.ObjectExtensions.toStringInvariant$1(Number).call(null, this.left);
			}
			else if (this.left === this.right && this.top === this.bottom) {
				return this.left + ', ' + this.top;
			}
			else {
				return this.left + ', ' + this.top + ', ' + this.right + ', ' + this.bottom;
			}
		},
		get_horizontal: function() {
			return this.left + this.right;
		},
		get_vertical: function() {
			return this.top + this.bottom;
		},
		writeJson: function(writer) {
			var $t1 = writer.writeObject(null);
			try {
				writer.writeNumber(this.left, 'left');
				writer.writeNumber(this.top, 'top');
				writer.writeNumber(this.right, 'right');
				writer.writeNumber(this.bottom, 'bottom');
			}
			finally {
				$t1.dispose();
			}
		}
	}, null, [ss.IEquatable, Franca.IMappable, ss.makeGenericType(Franca.IMappable$1, [$Franca_Gui_Padding]), Franca.Serialization.Streaming.IJsonStreamWriter]);
	$Franca_Gui_Padding.$ctor2.prototype = $Franca_Gui_Padding.$ctor3.prototype = $Franca_Gui_Padding.$ctor4.prototype = $Franca_Gui_Padding.$ctor1.prototype = $Franca_Gui_Padding.prototype;
	$Franca_Gui_Padding.__class = false;
	ss.initClass($Franca_Gui_RectWidget, $asm, {
		renderSelf: function(context) {
			$Franca_Gui_Widget.prototype.renderSelf.call(this, context);
			if (this.get_hasColor()) {
				this.get_manager().get_batch().begin(0, 3, 12, null);
				this.get_manager().get_batch().drawRectangle(this.get_drawBounds(), $Franca_Colors.op_Implicit$1(ss.unbox(this.colors)), 0);
				this.get_manager().get_batch().end();
			}
		},
		get_hasColor: function() {
			return ss.isValue(this.colors);
		},
		get_colors: function() {
			return this.colors;
		},
		set_colors: function(value) {
			this.colors = value;
		},
		get_color: function() {
			if (this.get_hasColor()) {
				return ss.unbox(this.colors).topLeft;
			}
			return Franca.Color.transparent;
		},
		set_color: function(value) {
			this.colors = new $Franca_Colors.$ctor1(value);
		}
	}, $Franca_Gui_Widget, [$Franca_Gui_IWidget, $Franca_Gui_ICodeGeneratedWidget]);
	ss.initClass($Franca_Gui_ScreenString, $asm, {
		wordWrap: function() {
			if (!this.$changed) {
				return;
			}
			this.$wrapWidth = (this.$wrapped ? this.$maxWidth : 4294967295);
			this.$formatting = new Franca.Gui.Formatting(this.$defaultSize, this.$bold, this.$italic, false, this.$kerning, this.$color);
			var $t1 = new $Franca_Gui_WordWrappingInfo();
			$t1.value = this.$value;
			$t1.font = this.$font;
			$t1.scale = this.$scale;
			$t1.format = this.$formatting;
			$t1.allowMarkup = this.$allowMarkup;
			var info = $t1;
			info.newline();
			var $t2 = Franca.Text.Words.split(this.$value, true);
			for (var $t3 = 0; $t3 < $t2.length; $t3++) {
				var word = $t2[$t3];
				switch (word.type) {
					case 0: {
						this.$wrapNewline(info, word);
						break;
					}
					case 1: {
						this.$wrapWord(info, word, true);
						break;
					}
					case 2: {
						this.$wrapWord(info, word, false);
						break;
					}
				}
			}
			info.get_currentLine().length = this.$value.length - info.get_currentLine().index;
			this.$lines = info.lines;
			this.$height = info.get_currentLine().get_bottom() - info.get_currentLine().linegap;
			this.$changed = false;
		},
		$wrapNewline: function(info, word) {
			var line = info.get_currentLine();
			this.$widestLine = Math.max(this.$widestLine, line.trimmedWidth);
			line.length = info.charIndex - line.index;
			info.charIndex += word.length;
			info.newline();
		},
		$wrapWord: function(info, word, whitespace) {
			var line = info.get_currentLine();
			var size = info.measure(word);
			line.ascent = Math.max(size.ascent, line.ascent);
			line.descent = Math.min(size.descent, line.descent);
			line.linegap = Math.max(size.linegap, line.linegap);
			if (!whitespace) {
				if (line.width + size.width < this.$wrapWidth) {
					// fits on line
					line.width += size.width;
					line.trimmedWidth = line.width;
					this.$widestLine = Math.max(this.$widestLine, line.trimmedWidth);
					// handle markup
					this.$handleCommand(info, info.charIndex, word.length);
					info.charIndex += word.length;
				}
				else {
					// needs to be broken up
					var $t1 = ss.getEnumerator(info.getChunks(word, this.$wrapWidth));
					try {
						while ($t1.moveNext()) {
							var chunk = $t1.current();
							this.$addChunk(info, chunk);
						}
					}
					finally {
						$t1.dispose();
					}
				}
			}
			else {
				line.width += size.width;
				info.charIndex += word.length;
			}
		},
		$addChunk: function(info, chunk) {
			// only add a newline when wrapping very long words after the first line
			if (info.charIndex > 0) {
				this.$widestLine = Math.max(this.$widestLine, info.get_currentLine().trimmedWidth);
				info.get_currentLine().length = info.charIndex - info.get_currentLine().index;
				info.newline();
			}
			// handle markup
			this.$handleCommand(info, info.charIndex, chunk.length);
			// add word chunk
			info.charIndex += chunk.length;
			info.get_currentLine().width = info.get_currentLine().trimmedWidth = chunk.size.width;
			this.$widestLine = Math.max(this.$widestLine, info.get_currentLine().trimmedWidth);
		},
		$handleCommand: function(info, index, length) {
			if (!this.$allowMarkup) {
				return;
			}
			// handle markup
			var $t1 = Franca.Text.Markup.readAll$1(this.$value, index, length);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var markup = $t1[$t2];
				if (ss.isValue(markup)) {
					var isCurrent = markup.get_index() === info.get_currentLine().index;
					info.format.applyMarkup(markup);
					if (isCurrent) {
						info.get_currentLine().formatting.copyFrom(info.format);
					}
				}
			}
		},
		alignedLines: function(align) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(align) {
					var $result, $state = 0, top, $t1, $t2, $t3, line, line1, line2;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									align = align || Franca.TextAlign.get_topLeft();
									this.wordWrap();
									switch (align.get_vertical()) {
										default:
										case 0: {
											top = 0;
											break;
										}
										case 1: {
											top = (this.$maxHeight - this.$height) / 2;
											break;
										}
										case 2: {
											top = this.$maxHeight - this.$height;
											break;
										}
									}
									if (align.get_horizontal() === 0) {
										$t1 = 0;
										$state = 1;
										continue $sm1;
									}
									else if (align.get_horizontal() === 2) {
										$t2 = 0;
										$state = 2;
										continue $sm1;
									}
									else {
										if (align.get_horizontal() === 1) {
											$t3 = 0;
											$state = 3;
											continue $sm1;
										}
										$state = -1;
										break $sm1;
									}
								}
								case 1: {
									$state = -1;
									if (!($t1 < this.$lines.length)) {
										$state = -1;
										break $sm1;
									}
									line = this.$lines[$t1];
									line.alignedY = line.y + top;
									line.alignedX = 0;
									$result = line;
									$state = 4;
									return true;
								}
								case 2: {
									$state = -1;
									if (!($t2 < this.$lines.length)) {
										$state = -1;
										break $sm1;
									}
									line1 = this.$lines[$t2];
									line1.alignedY = line1.y + top;
									line1.alignedX = this.$maxWidth - line1.trimmedWidth;
									$result = line1;
									$state = 5;
									return true;
								}
								case 3: {
									$state = -1;
									if (!($t3 < this.$lines.length)) {
										$state = -1;
										break $sm1;
									}
									line2 = this.$lines[$t3];
									line2.alignedY = line2.y + top;
									line2.alignedX = (this.$maxWidth - line2.trimmedWidth) / 2;
									$result = line2;
									$state = 6;
									return true;
								}
								case 4: {
									$state = -1;
									$t1++;
									$state = 1;
									continue $sm1;
								}
								case 5: {
									$state = -1;
									$t2++;
									$state = 2;
									continue $sm1;
								}
								case 6: {
									$state = -1;
									$t3++;
									$state = 3;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, align);
			}, this);
		},
		draw: function(position, color, stroke, strokeColor, selection, selectionColor, align, startIndex, length) {
			this.draw$1(position, color, color, stroke, strokeColor, strokeColor, selection, selectionColor, align, startIndex, length);
		},
		draw$1: function(position, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, selection, selectionColor, align, startIndex, length) {
			align = align || Franca.TextAlign.get_topLeft();
			startIndex = Franca.Calc.clamp$5(startIndex, 0, this.$value.length);
			if (length < 0) {
				length = this.$value.length - startIndex;
			}
			var endIndex = startIndex + length;
			this.$formatting.reset();
			var $t1 = ss.getEnumerator(this.alignedLines(align));
			try {
				while ($t1.moveNext()) {
					var line = $t1.current();
					this.$font.draw(this.$value, line.index, line.length, this.$formatting, this.$scale, position.x + line.alignedX, position.y + line.alignedY + line.ascent, topColor, bottomColor, stroke, strokeTopColor, strokeBottomColor, selection, selectionColor, this.$allowMarkup, startIndex, endIndex);
				}
			}
			finally {
				$t1.dispose();
			}
		},
		indexToCursor: function(index, align, mousePos) {
			align = align || Franca.TextAlign.get_topLeft();
			var position = mousePos || Franca.Vector2.zero;
			var alines = Enumerable.from(this.alignedLines(align)).toArray();
			for (var i = 0; i < alines.length; i++) {
				var line = alines[i];
				if (line.index > index) {
					if (i - 1 >= 0) {
						return new $Franca_Gui_CaretPosition.$ctor1(index, new Franca.Vector2.$ctor3(this.$lines[i - 1].alignedX + this.$lines[i - 1].width, this.$lines[i - 1].alignedY + this.$lines[i - 1].ascent), this.$lines[i - 1]);
					}
					else {
						return new $Franca_Gui_CaretPosition.$ctor1(index, new Franca.Vector2.$ctor3(line.alignedX, line.alignedY + line.ascent), line);
					}
				}
				else if (index === line.index && ss.isValue(mousePos) && i - 1 >= 0) {
					var lastLine = this.$lines[i - 1];
					if (position.y >= lastLine.alignedY && position.y < lastLine.alignedY + lastLine.get_height()) {
						return new $Franca_Gui_CaretPosition.$ctor1(index, new Franca.Vector2.$ctor3(lastLine.alignedX + lastLine.width, lastLine.alignedY + lastLine.ascent), lastLine);
					}
					else {
						var size = this.$font.measure$1(this.$value, line.index, index - line.index, line.formatting.clone$1(), this.$scale, this.$allowMarkup);
						return new $Franca_Gui_CaretPosition.$ctor1(index, new Franca.Vector2.$ctor3(line.alignedX + size.width, line.alignedY + line.ascent), line);
					}
				}
				else if (index >= line.index && index < line.index + line.length) {
					var size1 = this.$font.measure$1(this.$value, line.index, index - line.index, line.formatting.clone$1(), this.$scale, this.$allowMarkup);
					return new $Franca_Gui_CaretPosition.$ctor1(index, new Franca.Vector2.$ctor3(line.alignedX + size1.width, line.alignedY + line.ascent), line);
				}
			}
			var last = alines[alines.length - 1];
			return new $Franca_Gui_CaretPosition.$ctor1(index, new Franca.Vector2.$ctor3(last.alignedX + last.width, last.alignedY + last.ascent), last);
		},
		indexFromPosition: function(position, align) {
			align = align || Franca.TextAlign.get_topLeft();
			var alines = Enumerable.from(this.alignedLines(align)).toArray();
			for (var i = 0; i < alines.length; i++) {
				var line = alines[i];
				if (position.y < line.alignedY) {
					if (i - 1 >= 0) {
						return alines[i - 1].index + alines[i - 1].length;
					}
					else {
						return -1;
					}
				}
				else if (position.y >= line.alignedY && position.y < line.alignedY + line.get_height()) {
					if (position.x < line.alignedX) {
						return line.index;
					}
					else if (position.x >= line.alignedX + line.width) {
						return line.index + line.length;
					}
					else {
						var end = line.index + line.length;
						var x = line.alignedX;
						var formatting = line.formatting.clone$1();
						//for (int j = line.Index; j < end; j++) {
						{
							var enumerator = Franca.StringHelper.codePoints(this.$value, line.index, end, false).getEnumerator$1();
							try {
								while (enumerator.moveNext()) {
									var chr = enumerator.current();
									if (!Franca.Text.UnicodeExtensions.UintCharExtensions.isNonPrintableControl(chr)) {
										var metrics = this.$font.getGlyphMetrics$1(chr, formatting, this.$scale);
										var advance = metrics.get_advanceWidth();
										if (position.x <= x + advance * 0.67) {
											return enumerator.get_index();
										}
										if (this.$kerning && enumerator.get_next() > 0) {
											var kern = this.$font.getKerning$1(chr, enumerator.get_next(), formatting, this.$scale);
											advance += kern;
										}
										x += advance;
									}
									else if (this.$allowMarkup && chr === 6) {
										var markup = Franca.Text.Markup.read$1(this.$value, enumerator.get_index());
										if (ss.isValue(markup)) {
											formatting.applyMarkup(markup);
											//j += markup.Length - 1;
											enumerator.skip(markup.get_length() - 1);
										}
									}
								}
							}
							finally {
								if (ss.isValue(enumerator)) {
									enumerator.dispose();
								}
							}
						}
						return line.index + line.length;
					}
				}
			}
			return this.$value.length;
		},
		formattingAtIndex: function(index) {
			if (!this.get_allowMarkup()) {
				return this.$formatting.clone$1();
			}
			var line = this.lineFromIndex(index);
			var end = Math.min(this.$value.length - 1, index);
			var format = line.formatting.clone$1();
			format.reset();
			for (var i = line.index; i < end; i++) {
				if (this.$value.charCodeAt(i) === 6) {
					format.applyMarkup(Franca.Text.Markup.read$1(this.$value, i));
				}
			}
			return format;
		},
		lineFromIndex: function(index) {
			for (var i = 0; i < this.$lines.length; i++) {
				var line = this.$lines[i];
				if (line.index > index) {
					return line;
				}
				else if (index >= line.index && index < line.index + line.length) {
					return line;
				}
			}
			return this.$lines[this.$lines.length - 1];
		},
		nextPrintableIndex: function(index, positive) {
			var cpEnum;
			if (positive) {
				index += (Franca.StringHelper.isSurrogatePair$1(this.$value, index, false) ? 2 : 1);
				cpEnum = Franca.StringHelper.codePoints(this.$value, index, -1, false);
			}
			else {
				cpEnum = Franca.StringHelper.codePoints(this.$value, 0, index, true);
			}
			var markup = {};
			{
				var enumerator = cpEnum.getEnumerator$1();
				try {
					while (enumerator.moveNext()) {
						if (this.$allowMarkup && Franca.Text.Markup.isMarkup(this.$value, enumerator.get_index(), markup)) {
							enumerator.skip(markup.$.get_length() - 1);
						}
						else if (!Franca.Text.UnicodeExtensions.UintCharExtensions.isNonPrintableControl(enumerator.current())) {
							var nl = {};
							if (System.StringExtensions.isNewline(this.$value, enumerator.get_index(), nl) && nl.$.length > 1) {
								if (enumerator.get_index() === nl.$.startIndex || enumerator.get_index() === nl.$.startIndex + nl.$.length) {
									return enumerator.get_index();
								}
							}
							else {
								return enumerator.get_index();
							}
						}
					}
				}
				finally {
					if (ss.isValue(enumerator)) {
						enumerator.dispose();
					}
				}
			}
			return (positive ? this.$value.length : 0);
		},
		getText: function() {
			return this.$value;
		},
		toString: function() {
			if (this.$allowMarkup) {
				return System.StringExtensions.escape(Franca.Text.Markup.remove(this.$value), 0);
			}
			else {
				return System.StringExtensions.escape(this.$value, 0);
			}
		},
		getHashCode: function() {
			return ss.getHashCode(this.$value);
		},
		get_width: function() {
			return this.$widestLine;
		},
		get_height: function() {
			return this.$height;
		},
		get_maxWidth: function() {
			return this.$maxWidth;
		},
		set_maxWidth: function(value) {
			if (this.$maxWidth !== value) {
				this.$maxWidth = Math.max(0, value);
				if (this.$wrapped) {
					this.$changed = true;
				}
			}
		},
		get_maxHeight: function() {
			return this.$maxHeight;
		},
		set_maxHeight: function(value) {
			this.$maxHeight = Math.max(0, value);
		},
		get_value: function() {
			return this.$value;
		},
		set_value: function(value) {
			var val = ss.coalesce(value, '');
			if (!ss.referenceEquals(this.$value, val)) {
				this.$value = val;
				this.$changed = true;
			}
		},
		get_wrapped: function() {
			return this.$wrapped;
		},
		set_wrapped: function(value) {
			if (this.$wrapped !== value) {
				this.$wrapped = value;
				this.$changed = true;
			}
		},
		get_bold: function() {
			return this.$bold;
		},
		set_bold: function(value) {
			if (this.$bold !== value) {
				this.$bold = value;
				this.$changed = true;
			}
		},
		get_italic: function() {
			return this.$italic;
		},
		set_italic: function(value) {
			if (this.$italic !== value) {
				this.$italic = value;
				this.$changed = true;
			}
		},
		get_kerning: function() {
			return this.$kerning;
		},
		set_kerning: function(value) {
			if (this.$kerning !== value) {
				this.$kerning = value;
				this.$changed = true;
			}
		},
		get_size: function() {
			return this.$defaultSize;
		},
		set_size: function(value) {
			if (this.$defaultSize !== value) {
				this.$defaultSize = value;
				this.$changed = true;
			}
		},
		get_allowMarkup: function() {
			return this.$allowMarkup;
		},
		set_allowMarkup: function(value) {
			if (this.$allowMarkup !== value) {
				this.$allowMarkup = value;
				this.$changed = true;
			}
		},
		get_lines: function() {
			return this.$lines;
		},
		get_font: function() {
			return this.$font;
		},
		set_font: function(value) {
			if (!ss.referenceEquals(this.$font, value)) {
				this.$font = value;
				this.$changed = true;
			}
		},
		get_color: function() {
			return this.$color;
		},
		set_color: function(value) {
			if (ss.Nullable$1.liftne(Franca.Color.op_Inequality, this.$color, value)) {
				this.$color = value;
				this.$changed = true;
			}
		}
	}, null, [$Franca_Gui_ITextSelectionSource]);
	ss.initClass($Franca_Gui_ScreenWidget, $asm, {
		keyCapturedByWidget: function(e) {
			// if this screen widget wasn't the widget that captured this event,
			// the code won't be in caughtKeys, so lock the key, locked keys are
			// reported to the game's input as always having their state set to
			// up and they're unlocked when the key is released
			if (!this.$caughtKeys.contains(e.get_button().code)) {
				this.$lockedKeys.add(e.get_button().code);
			}
		},
		captureKey$1: function(e) {
			if (e.get_button().bound) {
				this.$caughtKeys.add(e.get_button().code);
				return true;
			}
			return false;
		},
		processBinds: function(gameTime) {
			var mouse = this.get_input().get_handler().get_mouse();
			var shift = this.get_input().get_handler().getKey(16).state === 1;
			var control = this.get_input().get_handler().getKey(17).state === 1;
			var alt = this.get_input().get_handler().getKey(18).state === 1;
			var compositing = this.get_input().get_handler().get_wasCompositing();
			var isShiftBound = false;
			var isAltBound = false;
			var isControlBound = false;
			var $t1 = this.get_input().get_handler().get_binds();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var bind = $t1[$t2];
				var kb = ss.safeCast(bind, $Franca_KeyBind);
				if (ss.isValue(kb)) {
					if (ss.unbox(kb).physicalKey === 16) {
						isShiftBound = true;
					}
					else if (ss.unbox(kb).physicalKey === 17) {
						isControlBound = true;
					}
					else if (ss.unbox(kb).physicalKey === 18) {
						isAltBound = true;
					}
				}
			}
			var $t3 = this.get_input().get_handler().get_binds();
			for (var $t4 = 0; $t4 < $t3.length; $t4++) {
				var bind1 = $t3[$t4];
				if (ss.isInstanceOfType(bind1, $Franca_KeyBind)) {
					var kb1 = ss.unbox(ss.cast(bind1, $Franca_KeyBind));
					var key = {};
					if (this.get_input().get_handler().get_keyStates().tryGetValue(kb1.keyCode, key)) {
						var state, lastState;
						if (!this.$lockedKeys.contains(kb1.keyCode)) {
							lastState = key.$.lastState;
							state = key.$.state;
						}
						else {
							state = lastState = 0;
						}
						kb1.process$1(state, lastState, mouse, gameTime, -1, shift && !isShiftBound, control && !isControlBound, alt && !isAltBound, compositing);
					}
				}
				else if (ss.isInstanceOfType(bind1, $Franca_MouseBind)) {
					var mb = ss.unbox(ss.cast(bind1, $Franca_MouseBind));
					var btn = {};
					if (this.$buttons.tryGetValue(mb.buttonType, btn)) {
						mb.process$1(btn.$.state, btn.$.lastState, mouse, gameTime, -1, shift && !isShiftBound, control && !isControlBound, alt && !isAltBound, compositing);
					}
				}
				else {
					bind1.process(mouse, gameTime, -1, shift && !isShiftBound, control && !isControlBound, alt && !isAltBound, compositing);
				}
			}
		},
		updateInputState: function() {
			this.$caughtKeys.clear();
			var $t1 = ss.getEnumerator(this.$buttons.get_values());
			try {
				while ($t1.moveNext()) {
					var btn = $t1.current();
					btn.lastState = btn.state;
				}
			}
			finally {
				$t1.dispose();
			}
			var $t2 = ss.getEnumerator(this.get_input().get_handler().get_keyStates().get_values());
			try {
				while ($t2.moveNext()) {
					var key = $t2.current();
					if (key.state === 0 && key.lastState === 1) {
						this.$lockedKeys.remove(key.code);
					}
				}
			}
			finally {
				$t2.dispose();
			}
		},
		$setMouseStateDown: function(e) {
			this.setMouseStateDown(e.get_button().type);
		},
		setMouseStateDown: function(type) {
			var btn = this.$buttons.get_item(type);
			btn.state = 1;
		},
		$setMouseStateUp: function(e) {
			this.setMouseStateUp(e.get_button().type);
		},
		setMouseStateUp: function(type) {
			var btn = this.$buttons.get_item(type);
			btn.state = 0;
		},
		get_hasID: function() {
			return true;
		},
		set_hasID: function(value) {
		},
		get_id: function() {
			return Franca.IncrementalID.op_Implicit$3(0);
		},
		set_id: function(value) {
		},
		get_x: function() {
			return 0;
		},
		set_x: function(value) {
		},
		get_y: function() {
			return 0;
		},
		set_y: function(value) {
		},
		get_width: function() {
			return this.get_manager().get_width();
		},
		set_width: function(value) {
		},
		get_height: function() {
			return this.get_manager().get_height();
		},
		set_height: function(value) {
		}
	}, $Franca_Gui_Widget, [$Franca_Gui_IWidget, $Franca_Gui_ICodeGeneratedWidget]);
	ss.initClass($Franca_Gui_StringLine, $asm, {
		get_bottom: function() {
			return this.y + this.get_height();
		},
		get_height: function() {
			return this.ascent - this.descent + this.linegap;
		},
		get_linesize: function() {
			return this.ascent - this.descent;
		},
		get_value: function() {
			return this.parent.substr(this.index, this.length);
		}
	});
	ss.initClass($Franca_Gui_TextBox, $asm, {
		captureKey: function(e, handler) {
			return this.get_hasFocus() && $Franca_Gui_TextBox.captures(e.get_keyCode()) || $Franca_Gui_Label.prototype.captureKey.call(this, e, handler);
		},
		mouseDown: function(e, handler) {
			var initial = this.get_selection$1().get_initialIndex();
			$Franca_Gui_Label.prototype.mouseDown.call(this, e, handler);
			if (this.get_canSelect() && e.get_button().type === 0 && e.shift) {
				this.get_selection$1().set_initialIndex(initial);
			}
		},
		mouseUp: function(e, handler) {
			$Franca_Gui_Label.prototype.mouseUp.call(this, e, handler);
		},
		mouseHoldDown: function(e, handler) {
			//var cursorLocation = selStartPos.HasValue ?
			//    new Vector2(e.X - Padding.Left - ViewX + selStartPos.Value.X, e.Y - Padding.Top - ViewY + selStartPos.Value.Y) :
			//    new Vector2(e.X - Padding.Left, e.Y - Padding.Top);
			//e.X = cursorLocation.X + Padding.Left;
			//e.Y = cursorLocation.Y + Padding.Top;
			$Franca_Gui_Label.prototype.mouseHoldDown.call(this, e, handler);
			if (e.get_preventDefault()) {
				return;
			}
			var cursorLocation = new Franca.Vector2.$ctor3(e.get_x() - this.get_padding().left, e.get_y() - this.get_padding().top);
			if (ss.Nullable$1.liftne(Franca.Vector2.op_Inequality, cursorLocation, this.$lastMouseLocation)) {
				this.$resetCaret();
				if (ss.isValue(this.get_spriteFont()) && this.get_spriteFont().get_loaded()) {
					this.$caret = this.wrapped.indexToCursor(this.get_selection().get_cursor(), this.get_align(), cursorLocation);
					this.$lastCaretIndex = this.$caret.index;
				}
				this.$lastMouseLocation = cursorLocation;
			}
		},
		layoutSelf: function(context) {
			this.processInput();
			$Franca_Gui_Label.prototype.layoutSelf.call(this, context);
		},
		pushUndoState: function() {
			if (this.$maxUndoStates <= 0) {
				return;
			}
			this.$undo.addFirst$1(new $Franca_Gui_TextUndoState(this.get_text(), this.get_selection().clone$1()));
			this.$redo.clear();
			while (this.$undo.get_count() > this.$maxUndoStates) {
				this.$undo.removeLast();
			}
		},
		selectAll: function() {
			this.get_selection().selectAll();
			this.$resetCaret();
		},
		insertCharacter: function(c) {
			this.insertCharacter$1(System.CharExtensions.toStringInvariant(c));
		},
		insertCharacter$1: function(s) {
			if (this.$maxLength >= 0 && this.get_text().length >= this.$maxLength) {
				return;
			}
			var newStr = new ss.StringBuilder();
			System.StringBuilderFixes.append(newStr, this.get_text(), 0, this.get_selection().get_start());
			newStr.append(s);
			System.StringBuilderFixes.append(newStr, this.get_text(), this.get_selection().get_end(), this.get_text().length - this.get_selection().get_end());
			this.get_selection().clear(this.get_selection().get_start() + s.length);
			if (this.$maxLength >= 0 && newStr.length >= this.$maxLength) {
				this.set_text(System.StringBuilderFixes.toString(newStr, 0, this.$maxLength));
			}
			else {
				this.set_text(newStr.toString());
			}
			this.$resetCaret();
		},
		copy: function(cut, handler) {
			var ret = $Franca_Gui_Label.prototype.copy.call(this, cut, handler);
			if (cut) {
				if (this.get_selection().get_length() <= 0 || !this.get_canSelect() || !this.get_hasFocus()) {
					return ret;
				}
				this.delete$1();
			}
			return ret;
		},
		paste: function() {
			//PushUndoState();
			//Clipboard.GetText((Point)(wrapped.IndexToCursor(selection.End, Align).Position + (Vector2)this.ScreenPos), OnPaste);
			this.onPaste($Franca_Clipboard.get_text());
		},
		onPaste: function(text) {
			this.pushUndoState();
			var cleanedBuilder = new ss.StringBuilder();
			for (var i = 0; i < text.length; i++) {
				if (!System.CharExtensions.isNonPrintableControl(text.charCodeAt(i))) {
					cleanedBuilder.appendChar(text.charCodeAt(i));
				}
			}
			var cleaned = cleanedBuilder.toString();
			if (!this.get_multiLine()) {
				var end = ss.indexOfAnyString(cleaned, $Franca_Gui_Label.newLineChars);
				if (end > -1) {
					cleaned = cleaned.substr(0, end);
				}
			}
			this.insertCharacter$1(cleaned);
		},
		undo: function() {
			if (ss.isNullOrUndefined(this.$undo.get_first())) {
				return;
			}
			var state = this.$undo.get_first().get_value();
			this.$undo.removeFirst();
			this.$redo.addFirst$1(new $Franca_Gui_TextUndoState(this.get_text(), this.get_selection()));
			this.set_text(state.text);
			this.set_selection(state.selection);
			this.$resetCaret();
		},
		redo: function() {
			if (ss.isNullOrUndefined(this.$redo.get_first())) {
				return;
			}
			var state = this.$redo.get_first().get_value();
			this.$redo.removeFirst();
			this.$undo.addFirst$1(new $Franca_Gui_TextUndoState(this.get_text(), this.get_selection()));
			this.set_text(state.text);
			this.set_selection(state.selection);
			this.$resetCaret();
		},
		escape: function() {
		},
		backspace: function() {
			if (this.get_selection().get_length() === 0 && this.get_selection().get_cursor() <= 0) {
				return;
			}
			this.pushUndoState();
			var newStr = new ss.StringBuilder();
			if (this.get_selection().get_length() > 0) {
				System.StringBuilderFixes.append(newStr, this.get_text(), 0, this.get_selection().get_start());
				System.StringBuilderFixes.append(newStr, this.get_text(), this.get_selection().get_end(), this.get_text().length - this.get_selection().get_end());
				this.get_selection().clear(this.get_selection().get_start());
			}
			else {
				var nl = {};
				if (System.StringExtensions.isNewline(this.get_text(), this.get_selection().get_cursor() - 1, nl) && nl.$.length > 1) {
					System.StringBuilderFixes.append(newStr, this.get_text(), 0, Math.max(0, this.get_selection().get_cursor() - nl.$.length));
					System.StringBuilderFixes.append(newStr, this.get_text(), this.get_selection().get_cursor(), this.get_text().length - this.get_selection().get_cursor());
					this.get_selection().clear(this.get_selection().get_cursor() - nl.$.length);
				}
				else {
					var charLen = (Franca.StringHelper.isSurrogatePair$1(this.get_text(), this.get_selection().get_cursor() - 1, true) ? 2 : 1);
					System.StringBuilderFixes.append(newStr, this.get_text(), 0, Math.max(0, this.get_selection().get_cursor() - charLen));
					System.StringBuilderFixes.append(newStr, this.get_text(), this.get_selection().get_cursor(), this.get_text().length - this.get_selection().get_cursor());
					this.get_selection().clear(this.get_selection().get_cursor() - charLen);
				}
			}
			this.set_text(newStr.toString());
			this.$resetCaret();
		},
		documentHome: function(shift) {
			if (shift) {
				this.get_selection().set_finalIndex(0);
			}
			else {
				this.get_selection().clear(0);
			}
			this.$resetCaret();
		},
		documentEnd: function(shift) {
			if (shift) {
				this.get_selection().set_finalIndex(this.get_text().length);
			}
			else {
				this.get_selection().clear(this.get_text().length);
			}
			this.$resetCaret();
		},
		navigateVertical: function(positive, shift) {
			if (ss.isNullOrUndefined(this.get_spriteFont()) || !this.get_spriteFont().get_loaded() || !this.get_multiLine()) {
				return;
			}
			if (ss.isNullOrUndefined(this.$caret.line)) {
				this.$caret = this.wrapped.indexToCursor(this.get_selection().get_cursor(), this.get_align(), null);
			}
			if (ss.isValue(this.$caret.line)) {
				if (positive && ss.referenceEquals(this.$caret.line, this.wrapped.get_lines()[this.wrapped.get_lines().length - 1]) || !positive && ss.referenceEquals(this.$caret.line, this.wrapped.get_lines()[0])) {
					return;
				}
			}
			var line = this.$caret.line;
			this.$resetCaret();
			var newLocation = new Franca.Vector2.$ctor3(this.$caret.position.x, (positive ? (this.$caret.position.y - line.descent + 1) : (this.$caret.position.y - line.ascent - 1)));
			var newIndex = this.wrapped.indexFromPosition(newLocation, this.get_align());
			this.$caret = this.wrapped.indexToCursor(newIndex, this.get_align(), newLocation);
			if (shift) {
				this.get_selection().set_finalIndex(this.$caret.index);
			}
			else {
				this.get_selection().clear(this.$caret.index);
			}
			this.$lastCaretIndex = this.$caret.index;
		},
		navigateHorizontal: function(positive, shift) {
			if (ss.isNullOrUndefined(this.get_spriteFont()) || !this.get_spriteFont().get_loaded()) {
				return;
			}
			if (shift) {
				this.get_selection().set_finalIndex(this.wrapped.nextPrintableIndex(this.get_selection().get_cursor(), positive));
			}
			else if (this.get_selection().get_length() === 0) {
				this.get_selection().clear(this.wrapped.nextPrintableIndex(this.get_selection().get_cursor(), positive));
			}
			else {
				this.get_selection().clear(null);
			}
			this.$resetCaret();
		},
		delete$1: function() {
			if (this.get_selection().get_length() === 0 && this.get_selection().get_cursor() >= this.get_text().length) {
				return;
			}
			this.pushUndoState();
			var newStr = new ss.StringBuilder();
			if (this.get_selection().get_length() > 0) {
				System.StringBuilderFixes.append(newStr, this.get_text(), 0, this.get_selection().get_start());
				System.StringBuilderFixes.append(newStr, this.get_text(), this.get_selection().get_end(), this.get_text().length - this.get_selection().get_end());
				this.get_selection().clear(this.get_selection().get_start());
			}
			else {
				var nl = {};
				if (System.StringExtensions.isNewline(this.get_text(), this.get_selection().get_cursor(), nl) && nl.$.length > 1) {
					System.StringBuilderFixes.append(newStr, this.get_text(), 0, Math.max(0, this.get_selection().get_cursor()));
					System.StringBuilderFixes.append(newStr, this.get_text(), this.get_selection().get_cursor() + nl.$.length, this.get_text().length - (this.get_selection().get_cursor() + nl.$.length));
					this.get_selection().clear(this.get_selection().get_cursor());
				}
				else {
					var charLen = (Franca.StringHelper.isSurrogatePair$1(this.get_text(), this.get_selection().get_cursor(), false) ? 2 : 1);
					System.StringBuilderFixes.append(newStr, this.get_text(), 0, Math.max(0, this.get_selection().get_cursor() + charLen - 1));
					System.StringBuilderFixes.append(newStr, this.get_text(), this.get_selection().get_cursor() + charLen, this.get_text().length - (this.get_selection().get_cursor() + charLen));
					this.get_selection().clear(this.get_selection().get_cursor());
				}
			}
			this.set_text(newStr.toString());
			this.$resetCaret();
		},
		lineHome: function(shift) {
			if (ss.isNullOrUndefined(this.get_spriteFont()) || !this.get_spriteFont().get_loaded()) {
				return;
			}
			if (ss.isNullOrUndefined(this.$caret.line)) {
				this.$caret = this.wrapped.indexToCursor(this.get_selection().get_cursor(), this.get_align(), null);
			}
			var line = this.$caret.line;
			this.$resetCaret();
			this.$caret = this.wrapped.indexToCursor(line.index, this.get_align(), new Franca.Vector2.$ctor3(line.alignedX, line.alignedY + line.get_height() / 2));
			if (shift) {
				this.get_selection().set_finalIndex(this.$caret.index);
			}
			else {
				this.get_selection().clear(this.$caret.index);
			}
			this.$lastCaretIndex = this.$caret.index;
		},
		lineEnd: function(shift) {
			if (ss.isNullOrUndefined(this.get_spriteFont()) || !this.get_spriteFont().get_loaded()) {
				return;
			}
			if (ss.isNullOrUndefined(this.$caret.line)) {
				this.$caret = this.wrapped.indexToCursor(this.get_selection().get_cursor(), this.get_align(), null);
			}
			var line = this.$caret.line;
			this.$resetCaret();
			this.$caret = this.wrapped.indexToCursor(line.index + line.length, this.get_align(), new Franca.Vector2.$ctor3(line.alignedX + line.width, line.alignedY + line.get_height() / 2));
			if (shift) {
				this.get_selection().set_finalIndex(this.$caret.index);
			}
			else {
				this.get_selection().clear(this.$caret.index);
			}
			this.$lastCaretIndex = this.$caret.index;
		},
		handleKeyPress: function(k) {
			if (k.get_isCharacter()) {
				if (System.CharExtensions.isControl(k.char$1)) {
					// copy and cut are done via the Copy function
					switch (k.char$1) {
						case 1: {
							this.selectAll();
							break;
						}
						case 9: {
							this.pushUndoState();
							this.insertCharacter(9);
							break;
						}
						case 22: {
							this.paste();
							break;
						}
						case 26: {
							this.undo();
							break;
						}
						case 25: {
							this.redo();
							break;
						}
						case 27: {
							this.escape();
							break;
						}
						case 28: {
							this.backspace();
							break;
						}
						case 134: {
							this.documentHome(this.get_manager().get_input().get_handler().getKey(16).state === 1);
							break;
						}
						case 135: {
							this.documentEnd(this.get_manager().get_input().get_handler().getKey(16).state === 1);
							break;
						}
					}
				}
				else {
					if (k.char$1 === 32 || this.$undo.get_count() === 0) {
						this.pushUndoState();
					}
					this.insertCharacter(k.char$1);
				}
			}
			else if (k.get_isKey()) {
				switch (k.key) {
					case 40: {
						this.navigateVertical(true, this.get_manager().get_input().get_handler().getKey(16).state === 1);
						break;
					}
					case 38: {
						this.navigateVertical(false, this.get_manager().get_input().get_handler().getKey(16).state === 1);
						break;
					}
					case 37: {
						this.navigateHorizontal(false, this.get_manager().get_input().get_handler().getKey(16).state === 1);
						break;
					}
					case 39: {
						this.navigateHorizontal(true, this.get_manager().get_input().get_handler().getKey(16).state === 1);
						break;
					}
					case 46: {
						this.delete$1();
						break;
					}
					case 13: {
						if (this.get_multiLine()) {
							this.pushUndoState();
							this.insertCharacter$1('\n');
						}
						break;
					}
					case 36: {
						this.lineHome(this.get_manager().get_input().get_handler().getKey(16).state === 1);
						break;
					}
					case 35: {
						this.lineEnd(this.get_manager().get_input().get_handler().getKey(16).state === 1);
						break;
					}
				}
			}
		},
		processInput: function() {
			if (this.get_hasFocus()) {
				var buffer = this.get_input().get_handler().get_textBuffer();
				while (buffer.length > 0) {
					var k = buffer.shift();
					this.handleKeyPress(k);
				}
			}
		},
		$resetCaret: function() {
			this.$blinkTime = Franca.Platform.get_time();
			this.$lastCaretIndex = -1;
		},
		renderSelf: function(context) {
			var showCursor = ss.Int32.trunc((new ss.TimeSpan(Franca.Platform.get_time().ticks - this.$blinkTime.ticks)).ticks / 10000000 * 2) % 2 === 0;
			if (!showCursor) {
				$Franca_Gui_Label.prototype.renderSelf.call(this, context);
			}
			else if (this.get_hasFocus() && ss.isValue(this.get_spriteFont()) && this.get_spriteFont().get_loaded()) {
				if (ss.isNullOrUndefined(this.$caret.line) || this.$lastCaretIndex !== this.$caret.index) {
					this.$caret = this.wrapped.indexToCursor(this.get_selection().get_cursor(), this.get_align(), null);
				}
				var formatting = this.wrapped.formattingAtIndex(this.get_selection().get_cursor());
				var metrics = this.wrapped.get_font().getFontMetrics(formatting, 1);
				var batch = this.get_manager().get_batch();
				var strokeSize = this.wrapped.get_font().getStrokeSize(formatting.size);
				var caretRect = new Franca.RectangleF.$ctor3(this.get_drawX() + this.$caret.position.x + this.get_padding().left, this.get_drawY() + this.$caret.position.y - this.$caret.line.ascent + this.get_padding().top, 1, metrics.get_linesize());
				var changed = false;
				if (this.get_scrollToCursor()) {
					if (caretRect.location.x + caretRect.size.width > this.get_width() - this.get_padding().right) {
						this.set_viewX(this.get_viewX() + (caretRect.location.x + caretRect.size.width) - (this.get_width() - this.get_padding().right) + (this.selecting ? 0 : (this.get_width() * 0.3)));
						changed = true;
					}
					else if (caretRect.location.x < this.get_padding().left) {
						this.set_viewX(Math.max(0, this.get_viewX() + caretRect.location.x - this.get_padding().left - (this.selecting ? 0 : (this.get_width() * 0.3))));
						changed = true;
					}
					if (caretRect.location.y + caretRect.size.height > this.get_height() - this.get_padding().bottom) {
						this.set_viewY(this.get_viewY() + (caretRect.location.y + caretRect.size.height) - (this.get_height() - this.get_padding().bottom));
						changed = true;
					}
					else if (caretRect.location.y < this.get_padding().top) {
						this.set_viewY(Math.max(0, this.get_viewY() + caretRect.location.y - this.get_padding().top));
						changed = true;
					}
				}
				if (this.get_stroke() && !changed) {
					batch.begin(0, 3, 12, null);
					batch.drawRectangle(new Franca.RectangleF.$ctor3(caretRect.location.x - strokeSize / 2, caretRect.location.y - strokeSize / 2, 1 + strokeSize, metrics.get_linesize() + strokeSize), $Franca_Colors.op_Implicit$1(new $Franca_Colors.$ctor5(Franca.Color.op_Multiply(this.get_strokeTopColor(), this.get_multiplyColor() || Franca.Color.white), Franca.Color.op_Multiply(this.get_strokeTopColor(), this.get_multiplyColor() || Franca.Color.white), Franca.Color.op_Multiply(this.get_strokeBottomColor(), this.get_multiplyColor() || Franca.Color.white), Franca.Color.op_Multiply(this.get_strokeBottomColor(), this.get_multiplyColor() || Franca.Color.white))), 0);
					batch.end();
				}
				$Franca_Gui_Label.prototype.renderSelf.call(this, context);
				if (!changed) {
					batch.begin(0, 3, 12, null);
					batch.drawRectangle(caretRect, $Franca_Colors.op_Implicit$1(new $Franca_Colors.$ctor5(Franca.Color.op_Multiply(this.get_topColor(), this.get_multiplyColor() || Franca.Color.white), Franca.Color.op_Multiply(this.get_topColor(), this.get_multiplyColor() || Franca.Color.white), Franca.Color.op_Multiply(this.get_bottomColor(), this.get_multiplyColor() || Franca.Color.white), Franca.Color.op_Multiply(this.get_bottomColor(), this.get_multiplyColor() || Franca.Color.white))), 0);
					batch.end();
				}
			}
			else {
				$Franca_Gui_Label.prototype.renderSelf.call(this, context);
			}
		},
		get_canPaste: function() {
			return this.$3$CanPasteField;
		},
		set_canPaste: function(value) {
			this.$3$CanPasteField = value;
		},
		get_maxUndoStates: function() {
			return this.$maxUndoStates;
		},
		set_maxUndoStates: function(value) {
			this.$maxUndoStates = value;
		},
		get_maxLength: function() {
			return this.$maxLength;
		},
		set_maxLength: function(value) {
			if (this.$maxLength !== value) {
				this.$maxLength = value;
				if (this.$maxLength >= 0 && this.get_text().length >= this.$maxLength) {
					this.set_text(this.get_text().substr(0, this.$maxLength));
				}
			}
		},
		get_scrollToCursor: function() {
			return this.$3$ScrollToCursorField;
		},
		set_scrollToCursor: function(value) {
			this.$3$ScrollToCursorField = value;
		},
		get_multiLine: function() {
			return $Franca_Gui_Label.prototype.get_multiLine.call(this);
		},
		set_multiLine: function(value) {
			if ($Franca_Gui_Label.prototype.get_multiLine.call(this) !== value) {
				this.$undo.clear();
				this.$redo.clear();
			}
			$Franca_Gui_Label.prototype.set_multiLine.call(this, value);
		}
	}, $Franca_Gui_Label, [$Franca_Gui_IWidget, $Franca_Gui_ICodeGeneratedWidget]);
	ss.initClass($Franca_Gui_TextSelection, $asm, {
		add_onChange: function(value) {
			this.$1$OnChangeField = ss.delegateCombine(this.$1$OnChangeField, value);
		},
		remove_onChange: function(value) {
			this.$1$OnChangeField = ss.delegateRemove(this.$1$OnChangeField, value);
		},
		selectAll: function() {
			var length = this.get_sourceString().length;
			if (this.$selStart !== 0 || this.$selEnd !== length) {
				this.$selStart = 0;
				this.$selEnd = length;
				var onChange = this.$1$OnChangeField;
				if (!ss.staticEquals(onChange, null)) {
					onChange(this);
				}
			}
		},
		clear: function(index) {
			if (ss.isValue(index)) {
				this.$selEnd = ss.unbox(index);
			}
			this.$selStart = this.$selEnd;
			var onChange = this.$1$OnChangeField;
			if (!ss.staticEquals(onChange, null)) {
				onChange(this);
			}
		},
		clone$1: function() {
			var $t1 = new $Franca_Gui_TextSelection.$ctor1(this.source, this.$selStart, this.$selEnd);
			$t1.$1$OnChangeField = this.$1$OnChangeField;
			return $t1;
		},
		clone: function() {
			return this.clone$1();
		},
		toString: function() {
			return this.get_text();
		},
		get_initialIndex: function() {
			return this.$selStart;
		},
		set_initialIndex: function(value) {
			if (this.$selStart !== value) {
				this.$selStart = value;
				var onChange = this.$1$OnChangeField;
				if (!ss.staticEquals(onChange, null)) {
					onChange(this);
				}
			}
		},
		get_finalIndex: function() {
			return this.$selEnd;
		},
		set_finalIndex: function(value) {
			if (this.$selEnd !== value) {
				this.$selEnd = value;
				var onChange = this.$1$OnChangeField;
				if (!ss.staticEquals(onChange, null)) {
					onChange(this);
				}
			}
		},
		get_start: function() {
			return Franca.Calc.clamp$5(Math.min(this.$selStart, this.$selEnd), 0, (ss.isValue(this.source) ? this.get_sourceString().length : 0));
		},
		get_end: function() {
			return Franca.Calc.clamp$5(Math.max(this.$selStart, this.$selEnd), 0, (ss.isValue(this.source) ? this.get_sourceString().length : 0));
		},
		get_length: function() {
			return this.get_end() - this.get_start();
		},
		get_text: function() {
			return this.get_sourceString().substr(this.get_start(), this.get_length());
		},
		get_cursor: function() {
			return Franca.Calc.clamp$5(this.$selEnd, 0, (ss.isValue(this.source) ? this.get_sourceString().length : 0));
		},
		get_sourceString: function() {
			if (ss.isValue(this.$textSource)) {
				return this.$textSource.getText();
			}
			return System.ObjectExtensions.toStringInvariant(this.source);
		}
	}, null, [System.ICloneable]);
	$Franca_Gui_TextSelection.$ctor1.prototype = $Franca_Gui_TextSelection.prototype;
	ss.initClass($Franca_Gui_TextUndoState, $asm, {});
	ss.initClass($Franca_Gui_WidgetAttribute, $asm, {
		get_name: function() {
			return this.$name;
		}
	});
	ss.initClass($Franca_Gui_WidgetCreationException, $asm, {}, ss.Exception);
	$Franca_Gui_WidgetCreationException.$ctor1.prototype = $Franca_Gui_WidgetCreationException.$ctor2.prototype = $Franca_Gui_WidgetCreationException.prototype;
	ss.initClass($Franca_Gui_WordChunk, $asm, {
		getHashCode: function() {
			var h = ss.getHashCode(this.size);
			h = h * 397 ^ this.length;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Gui_WordChunk)) {
				return false;
			}
			return ss.equals(this.size, o.size) && this.length === o.length;
		}
	});
	$Franca_Gui_WordChunk.$ctor1.prototype = $Franca_Gui_WordChunk.prototype;
	$Franca_Gui_WordChunk.__class = false;
	ss.initClass($Franca_Gui_WordSize, $asm, {
		get_height: function() {
			return this.ascent - this.descent + this.linegap;
		},
		getHashCode: function() {
			var h = this.ascent;
			h = h * 397 ^ this.descent;
			h = h * 397 ^ this.linegap;
			h = h * 397 ^ this.width;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Gui_WordSize)) {
				return false;
			}
			return this.ascent === o.ascent && this.descent === o.descent && this.linegap === o.linegap && this.width === o.width;
		}
	});
	$Franca_Gui_WordSize.$ctor1.prototype = $Franca_Gui_WordSize.prototype;
	$Franca_Gui_WordSize.__class = false;
	ss.initClass($Franca_Gui_WordWrappingInfo, $asm, {
		newline: function() {
			var current = this.get_currentLine();
			var metrics = this.font.getFontMetrics(this.format, this.scale);
			var line = new $Franca_Gui_StringLine(this.value, (ss.isValue(current) ? current.get_bottom() : 0), metrics.get_ascent(), metrics.get_descent(), metrics.get_linegap(), this.charIndex, this.format.clone$1());
			this.lines.push(line);
			this.lineIndex++;
		},
		measure: function(word) {
			if (ss.isNullOrUndefined(this.formatCopy)) {
				this.formatCopy = this.format.clone$1();
			}
			else {
				this.formatCopy.copyFrom(this.format);
			}
			return this.font.measure$1(word.text, word.index, word.length, this.formatCopy, this.scale, this.allowMarkup);
		},
		getChunks: function(word, maxWidth) {
			if (ss.isNullOrUndefined(this.formatCopy)) {
				this.formatCopy = this.format.clone$1();
			}
			else {
				this.formatCopy.copyFrom(this.format);
			}
			return this.font.getChunks(word.text, word.index, word.length, maxWidth, this.formatCopy, this.scale, this.allowMarkup);
		},
		get_currentLine: function() {
			return ((this.lineIndex > -1) ? this.lines[this.lineIndex] : null);
		},
		get_lastLine: function() {
			return this.lines[this.lineIndex - 1];
		}
	});
	ss.initClass($Franca_Gui_FlowLang_FlowAction, $asm, {
		createView: function(state, context) {
			if (this.type !== 0 && this.type !== 2) {
				throw new ss.InvalidOperationException("Can't create FlowItem view for FlowAction of type '" + System.EnumExtensions.getName($Franca_Gui_FlowLang_FlowActionType).call(null, this.type) + "'");
			}
			var ret;
			try {
				ret = ss.safeCast(ss.createInstance(this.view), $Franca_Gui_FlowLang_FlowItem);
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				throw new Franca.TypeReflectionException.$ctor2("Can't create FlowItem view for FlowAction: " + e.get_message(), e);
			}
			if (ss.isNullOrUndefined(ret)) {
				throw new Franca.TypeReflectionException.$ctor1("Can't create FlowItem view for FlowAction: Type " + ss.getTypeFullName(this.view) + ' was not a FlowItem');
			}
			if (this.type === 2) {
				ret.set_isDialog(true);
			}
			ret.widget.set_state(state);
			if (!ss.staticEquals(this.attrFunc, null)) {
				this.attrFunc(ret, state, context);
			}
			return ret;
		}
	});
	$Franca_Gui_FlowLang_FlowAction.$ctor1.prototype = $Franca_Gui_FlowLang_FlowAction.prototype;
	ss.initEnum($Franca_Gui_FlowLang_FlowActionType, $asm, { view: 0, func: 1, dialog: 2 });
	ss.initClass($Franca_Gui_FlowLang_FlowItem, $asm, {
		getAction: function(action) {
			var a = {};
			if (!this.actions.tryGetValue(action, a)) {
				throw new ss.KeyNotFoundException("Action '" + action + "' not found in FlowItem '" + this.name + "'");
			}
			return a.$;
		},
		attribute: function(T) {
			return function(name) {
				return this.attr(T).call(this, name);
			};
		},
		attr: function(T) {
			return function(name) {
				var o = {};
				if (!this.attributes.tryGetValue(name, o)) {
					return ss.getDefaultValue(T);
				}
				if (ss.referenceEquals(o.$, null)) {
					return ss.getDefaultValue(T);
				}
				if (ss.isInstanceOfType(o.$, T)) {
					return ss.cast(o.$, T);
				}
				var types = new $Franca_Gui_FlowLang_FlowItem$CastTypes.$ctor1(ss.getInstanceType(o.$), T);
				var castable = {};
				if ($Franca_Gui_FlowLang_FlowItem.get_$canCast().tryGetValue(types, castable) && !castable.$) {
					return ss.getDefaultValue(T);
				}
				var converted;
				try {
					converted = Franca.TypeHelper.convert(T).call(null, o.$);
					castable.$ = true;
				}
				catch ($t1) {
					converted = ss.getDefaultValue(T);
					castable.$ = false;
				}
				$Franca_Gui_FlowLang_FlowItem.get_$canCast().set_item(types, castable.$);
				return converted;
			};
		},
		get_isDialog: function() {
			return this.$1$IsDialogField;
		},
		set_isDialog: function(value) {
			this.$1$IsDialogField = value;
		},
		get_item: function(attributeName) {
			var o = {};
			if (!this.attributes.tryGetValue(attributeName, o)) {
				return Franca.JsonValue.get_null();
			}
			var converted = {};
			if (Franca.JsonValue.tryConvertValue(o.$, converted)) {
				return new Franca.JsonValue.$ctoro(converted.$, false);
			}
			return Franca.JsonValue.get_null();
		}
	});
	$Franca_Gui_FlowLang_FlowItem.$ctor1.prototype = $Franca_Gui_FlowLang_FlowItem.prototype;
	ss.initClass($Franca_Gui_FlowLang_FlowItem$CastTypes, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_Gui_FlowLang_FlowItem$CastTypes);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.referenceEquals(ss.unbox(b).lhs, this.lhs) && ss.referenceEquals(ss.unbox(b).rhs, this.rhs);
		},
		equalsT: function(b) {
			return ss.referenceEquals(b.lhs, this.lhs) && ss.referenceEquals(b.rhs, this.rhs);
		},
		getHashCode: function() {
			return ss.getHashCode(this.lhs) ^ ss.getHashCode(this.rhs);
		}
	}, null, [ss.IEquatable]);
	$Franca_Gui_FlowLang_FlowItem$CastTypes.$ctor1.prototype = $Franca_Gui_FlowLang_FlowItem$CastTypes.prototype;
	$Franca_Gui_FlowLang_FlowItem$CastTypes.__class = false;
	ss.initClass($Franca_Gui_FlowLang_FlowState, $asm, {
		action: function(name) {
			if (ss.isNullOrUndefined(this.get_current())) {
				throw new ss.InvalidOperationException("Cannot perform action '" + name + "' on FlowState: stack is empty");
			}
			if (System.StringExtensions.toLowerInvariant(name) === 'back' || System.StringExtensions.toLowerInvariant(name) === 'return') {
				this.pop();
			}
			else {
				var action = this.get_current().getAction(name);
				switch (action.type) {
					default: {
						throw new ss.NotImplementedException("Unknown FlowAction action type '" + System.EnumExtensions.getName($Franca_Gui_FlowLang_FlowActionType).call(null, action.type) + "'");
					}
					case 2:
					case 0: {
						var view = action.createView(this, this.$context);
						this.push(view);
						break;
					}
					case 1: {
						if (this.$invokeOnViewChange(this.get_current())) {
							action.func(this, this.$context);
							this.clear();
						}
						break;
					}
				}
			}
		},
		clear: function() {
			var current = this.get_current();
			for (var i = 0; i < this.$stack.length; i++) {
				this.$gui.removeChild(this.$stack[i].widget);
			}
			ss.clear(this.$stack);
			this.get_global().clear();
		},
		$removePrevious: function() {
			if (this.get_count() > 1) {
				this.$gui.removeChild(this.get_item(this.$stack.length - 2).widget);
			}
		},
		push: function(item) {
			if (ss.isValue(this.get_current()) && this.get_current().get_isDialog()) {
				if (!this.$invokeOnViewChange(this.get_current())) {
					return;
				}
				// first remove the dialog
				this.pop();
			}
			if (!this.$invokeOnViewChange(this.get_current())) {
				return;
			}
			this.$stack.push(item);
			this.$gui.addChild(item.widget);
			if (!item.get_isDialog()) {
				this.$removePrevious();
			}
			if (ss.isValue(this.get_current())) {
				this.$invokeOnViewEnter(this.get_current());
			}
		},
		pop: function() {
			var item = this.get_current();
			if (ss.isValue(item) && this.$invokeOnViewChange(item)) {
				var dialog = this.get_current().get_isDialog();
				this.$gui.removeChild(this.get_current().widget);
				ss.removeAt(this.$stack, this.$stack.length - 1);
				if (!dialog && this.get_count() > 0) {
					// only re-add the previous widget if this view
					// wasn't a dialog window, otherwise it'll be added twice
					this.$gui.addChild(this.get_current().widget);
				}
			}
			if (ss.isValue(this.get_current())) {
				this.$invokeOnViewEnter(this.get_current());
			}
			return item;
		},
		$invokeOnViewChange: function(item) {
			if (ss.isValue(item) && ss.isValue(item.widget)) {
				var evt = new $Franca_Gui_FlowEvent();
				item.widget.stateViewChange(evt);
				return !evt.get_preventDefault();
			}
			return true;
		},
		$invokeOnViewEnter: function(item) {
			if (ss.isValue(item) && ss.isValue(item.widget)) {
				var evt = new $Franca_Gui_FlowEvent();
				item.widget.stateViewEnter(evt);
			}
		},
		attribute: function(T) {
			return function(name) {
				return this.attr(T).call(this, name);
			};
		},
		attr: function(T) {
			return function(name) {
				if (ss.isNullOrUndefined(this.get_current())) {
					return ss.getDefaultValue(T);
				}
				var $t1 = this.get_current();
				return $t1.attr(T).call($t1, name);
			};
		},
		get_current: function() {
			return ((this.$stack.length > 0) ? this.$stack[this.$stack.length - 1] : null);
		},
		get_previous: function() {
			return ((this.$stack.length > 1) ? this.$stack[this.$stack.length - 2] : null);
		},
		get_count: function() {
			return this.$stack.length;
		},
		get_item: function(index) {
			if (index >= this.$stack.length || index < -this.$stack.length) {
				throw new ss.ArgumentOutOfRangeException('FlowState index out of range');
			}
			if (index >= 0) {
				return this.$stack[index];
			}
			else {
				return this.$stack[this.$stack.length - index];
			}
		},
		get_item$1: function(attributeName) {
			if (ss.isNullOrUndefined(this.get_current())) {
				return Franca.JsonValue.get_null();
			}
			return this.get_current().get_item(attributeName);
		},
		get_global: function() {
			if (Franca.JsonValue.op_Inequality(this.$globalState, null)) {
				return this.$globalState;
			}
			this.$globalState = Franca.JsonValue.get_dict();
			return this.$globalState;
		}
	});
	ss.initInterface($Franca_Ime_$IImeProvider, $asm, { $initialize: null, $setDefaultCompositionPos: null, $setCompositionPos: null, $getCompositionPos: null, $enabledChanged: null }, [ss.IDisposable]);
	ss.initClass($Franca_Ime_$DummyImeProvider, $asm, {
		$initialize: function() {
		},
		$setDefaultCompositionPos: function() {
		},
		$setCompositionPos: function(position) {
		},
		$getCompositionPos: function() {
			return Franca.Point.zero;
		},
		dispose: function() {
			this.$dispose(true);
			System.GC.suppressFinalize(this);
		},
		$dispose: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
			}
			this.$disposed = true;
		},
		$enabledChanged: function(enabled) {
			enabled.$ = false;
		}
	}, null, [ss.IDisposable, $Franca_Ime_$IImeProvider]);
	ss.initClass($Franca_Ime_ImeState, $asm, {
		$initialize: function() {
			this.$imeProvider = new $Franca_Ime_$DummyImeProvider();
		},
		setCompositionPos: function() {
			this.$imeProvider.$setDefaultCompositionPos();
		},
		setCompositionPos$1: function(position) {
			this.$imeProvider.$setCompositionPos(position);
		},
		getCompositionPos: function() {
			return this.$imeProvider.$getCompositionPos();
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				this.$imeProvider.dispose();
			}
			this.$imeProvider = null;
			this.$disposed = true;
		},
		get_compositing: function() {
			return this.$compositing;
		},
		set_compositing: function(value) {
			this.$compositing = value;
		},
		get_enabled: function() {
			return this.$enabled;
		},
		set_enabled: function(value) {
			if (this.$enabled !== value) {
				var refVal = { $: value };
				this.$imeProvider.$enabledChanged(refVal);
				this.$enabled = refVal.$;
			}
		},
		get_container: function() {
			return this.$container;
		},
		get_$provider: function() {
			return this.$imeProvider;
		}
	}, null, [ss.IDisposable]);
	ss.initClass($Franca_JS_Base32Info, $asm, {
		get_ready: function() {
			return this.get_loaded();
		},
		get_loaded: function() {
			return this.$1$LoadedField;
		},
		set_loaded: function(value) {
			this.$1$LoadedField = value;
		},
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		load: function(content, file, name, args) {
			this.$content = content;
			this.$fileData = $Franca_File.load(Franca.BinaryData).call(null, Franca.Platform.getFileName(file), null, name);
		},
		finalizeContent: function() {
			if (this.$fileData.get_loaded()) {
				var data = Franca.Text.UTF8.fromBinaryData(this.$fileData.get_value(), true);
				var tokens = ss.netSplit(data, [32].map(function(i) {
					return String.fromCharCode(i);
				}), 9);
				var k0 = System.StringExtensions.toLowerInvariant(Franca.Text.UTF8.fromBinaryData(Franca.Text.Base32.decode(tokens[0], false), true));
				var k1 = System.StringExtensions.toLowerInvariant(Franca.Text.UTF8.fromBinaryData(Franca.Text.Base32.decode(tokens[1], false), true));
				var k2 = System.StringExtensions.toLowerInvariant(Franca.Text.UTF8.fromBinaryData(Franca.Text.Base32.decode(tokens[2], false), true));
				var k3 = System.StringExtensions.toLowerInvariant(Franca.Text.UTF8.fromBinaryData(Franca.Text.Base32.decode(tokens[3], false), true));
				var k4 = System.StringExtensions.toLowerInvariant(Franca.Text.UTF8.fromBinaryData(Franca.Text.Base32.decode(tokens[4], false), true));
				var k5 = System.StringExtensions.toLowerInvariant(Franca.Text.UTF8.fromBinaryData(Franca.Text.Base32.decode(tokens[5], false), true));
				var k6 = System.StringExtensions.toLowerInvariant(Franca.Text.UTF8.fromBinaryData(Franca.Text.Base32.decode(tokens[6], false), true));
				if (ss.referenceEquals(System.StringExtensions.toLowerInvariant(Franca.Text.UTF8.fromBinaryData(Franca.Text.Base32.decode(tokens[7], false), true)), k6)) {
					// TODO(Eni, Medium): Implement
					throw new ss.NotImplementedException();
					//content.GraphicsDevice.B32Message = UTF8.FromBinaryData(Base32.Decode(tokens[8], false));
				}
				else {
					var b32Data = $Franca_FrancaFramework.$b32Dict();
					var b32Hash = ss.cast((!!ss.referenceEquals(b32Data[k0], b32Data[k2][k0]) ? b32Data[k3][k0][k1] : b32Data[k3][k4]).toLowerCase(), String);
					var match;
					if ((match = $Franca_JS_Base32Info.$regex.exec(b32Hash)).success) {
						b32Hash = match.value;
					}
					else {
						b32Hash = null;
					}
					var isMatch = false;
					if (ss.isValue(b32Hash)) {
						var expected = System.StringExtensions.toLowerInvariant(Franca.Text.UTF8.fromBinaryData(Franca.Text.Base32.decode(tokens[7], false), true)).split(String.fromCharCode(124));
						for (var $t1 = 0; $t1 < expected.length; $t1++) {
							var ex = expected[$t1];
							if (ss.endsWithString(b32Hash, ex)) {
								isMatch = true;
							}
						}
					}
					if (!isMatch && ss.startsWithString(b32Hash, k5)) {
						isMatch = true;
					}
					if (!isMatch) {
						this.$content.get_graphicsDevice().b32Message = Franca.Text.UTF8.fromBinaryData(Franca.Text.Base32.decode(tokens[8], false), true);
					}
				}
				this.set_loaded(true);
			}
		}
	}, null, [$Franca_IAsset]);
	ss.initClass($Franca_JS_CanvasContext, $asm, {
		clear: function(rectangle) {
			if (!ss.isValue(rectangle)) {
				rectangle = new Franca.RectangleF.$ctor3(0, 0, this.$canvas.width, this.$canvas.height);
			}
			this.$context.clearRect(ss.unbox(rectangle).location.x, ss.unbox(rectangle).location.y, ss.unbox(rectangle).size.width, ss.unbox(rectangle).size.height);
		},
		clear$1: function(color, rectangle) {
			if (!ss.isValue(rectangle)) {
				rectangle = new Franca.RectangleF.$ctor3(0, 0, this.$canvas.width, this.$canvas.height);
			}
			var jsc = Franca.JS.JsColor.op_Implicit(color);
			this.$context.save();
			this.$context.fillStyle = jsc.get_code();
			this.$context.globalAlpha = jsc.get_alpha();
			if (jsc.get_alpha() < 1) {
				this.$context.clearRect(ss.unbox(rectangle).location.x, ss.unbox(rectangle).location.y, ss.unbox(rectangle).size.width, ss.unbox(rectangle).size.height);
			}
			this.$context.fillRect(ss.unbox(rectangle).location.x, ss.unbox(rectangle).location.y, ss.unbox(rectangle).size.width, ss.unbox(rectangle).size.height);
			this.$context.restore();
		},
		draw: function(source, destination) {
			this.$context.globalAlpha = 1;
			this.$context.drawImage(ss.cast(source.get_bitmap(), $Franca_JSBitmap).get_bitmap(), destination.x, destination.y);
		},
		draw$1: function(source, destination, sourceRect) {
			if (!ss.isValue(sourceRect)) {
				sourceRect = new Franca.RectangleF.$ctor3(0, 0, source.get_width(), source.get_height());
			}
			this.$context.globalAlpha = 1;
			this.$context.drawImage(ss.cast(source.get_bitmap(), $Franca_JSBitmap).get_bitmap(), ss.unbox(sourceRect).location.x, ss.unbox(sourceRect).location.y, ss.unbox(sourceRect).size.width, ss.unbox(sourceRect).size.height, destination.x, destination.y, ss.unbox(sourceRect).size.width, ss.unbox(sourceRect).size.height);
		},
		draw$2: function(source, destRect, sourceRect) {
			if (!ss.isValue(sourceRect)) {
				sourceRect = new Franca.RectangleF.$ctor3(0, 0, source.get_width(), source.get_height());
			}
			this.$context.globalAlpha = 1;
			this.$context.drawImage(ss.cast(source.get_bitmap(), $Franca_JSBitmap).get_bitmap(), ss.unbox(sourceRect).location.x, ss.unbox(sourceRect).location.y, ss.unbox(sourceRect).size.width, ss.unbox(sourceRect).size.height, destRect.location.x, destRect.location.y, destRect.size.width, destRect.size.height);
		},
		draw$3: function(source, destination, opacity, sourceRect) {
			if (!ss.isValue(sourceRect)) {
				sourceRect = new Franca.RectangleF.$ctor3(0, 0, source.get_width(), source.get_height());
			}
			this.draw$4(source, new Franca.Rectangle.$ctor3(destination.x, destination.y, Math.round(ss.unbox(sourceRect).size.width), Math.round(ss.unbox(sourceRect).size.height)), opacity, sourceRect);
		},
		draw$4: function(source, destRect, opacity, sourceRect) {
			if (!ss.isValue(sourceRect)) {
				sourceRect = new Franca.RectangleF.$ctor3(0, 0, source.get_width(), source.get_height());
			}
			this.$context.globalAlpha = opacity;
			this.$context.drawImage(ss.cast(source.get_bitmap(), $Franca_JSBitmap).get_bitmap(), ss.unbox(sourceRect).location.x, ss.unbox(sourceRect).location.y, ss.unbox(sourceRect).size.width, ss.unbox(sourceRect).size.height, destRect.location.x, destRect.location.y, destRect.size.width, destRect.size.height);
		},
		drawText: function(font, text, color, fontSize, position, kerning) {
			var path = ss.cast(font.get_$provider(), $Franca_JSFontProvider).get_otFont().getPath(text, position.x + 0.5, position.y + 0.5, fontSize, new FontOptions(kerning));
			var c = new Franca.JS.JsColor.$ctor1(color);
			this.$context.globalAlpha = c.get_alpha();
			path.fill = c.get_code();
			path.draw(this.$context);
		},
		strokeText: function(font, text, color, fontSize, position, strokeSize, kerning) {
			var path = ss.cast(font.get_$provider(), $Franca_JSFontProvider).get_otFont().getPath(text, position.x + 0.5, position.y + 0.5, fontSize, new FontOptions(kerning));
			var c = new Franca.JS.JsColor.$ctor1(color);
			var prevLineCap = this.$context.lineCap;
			var prevLineJoin = this.$context.lineJoin;
			this.$context.lineCap = 'round';
			this.$context.lineJoin = 'round';
			this.$context.globalAlpha = c.get_alpha();
			path.fill = null;
			path.stroke = c.get_code();
			path.strokeWidth = strokeSize;
			path.draw(this.$context);
			this.$context.lineCap = prevLineCap;
			this.$context.lineJoin = prevLineJoin;
		},
		dispose: function() {
			this.$context = null;
			this.$canvas = null;
		},
		get_htmlContext: function() {
			return this.$context;
		}
	}, null, [ss.IDisposable, $Franca_ICanvasContext]);
	ss.initClass($Franca_JS_NonBlockingAlert, $asm, {
		show: function() {
			var parent = document.getElementById($Franca_MainLoop.get_gameContainer().get_anchor());
			parent.appendChild(this.div);
			var canvas = ss.cast($Franca_MainLoop.get_gameContainer().get_$window(), $Franca_$JSWindow).get_$window();
			// resize alert window
			this.resizeToContents();
			// position Div relative to the game's canvas
			var canvasRect = canvas.getBoundingClientRect();
			var divRect = this.div.getBoundingClientRect();
			var relX = canvasRect.left - divRect.left;
			var relY = canvasRect.top - divRect.top;
			this.div.style.left = Math.trunc(relX + Franca.Calc.center(canvasRect.width, divRect.width, 0)) + 'px';
			this.div.style.top = Math.trunc(relY + Franca.Calc.center(canvasRect.height, divRect.height, 0)) + 'px';
			// attach click handler
			var btn = document.getElementById('__nonBlockingAlertBtn' + this.id);
			btn.onclick = ss.mkdel(this, this.close$1);
			// attach mouse handlers to stop event propagation
			this.div.onmousedown = function(e) {
				e.stopPropagation();
			};
			this.div.onmouseup = function(e1) {
				e1.stopPropagation();
			};
			this.div.oncontextmenu = function(e2) {
				e2.stopPropagation();
			};
			// remove previous alert of same uid
			if (ss.isValue(this.alertUID)) {
				var prev = {};
				if ($Franca_JS_NonBlockingAlert.$uniqueAlerts.tryGetValue(this.alertUID, prev)) {
					prev.$.close();
				}
				$Franca_JS_NonBlockingAlert.$uniqueAlerts.set_item(this.alertUID, this);
			}
		},
		resizeToContents: function() {
			// set the size of the alert to a percentage of the canvas width
			var canvas = ss.cast($Franca_MainLoop.get_gameContainer().get_$window(), $Franca_$JSWindow).get_$window();
			var canvasRect = canvas.getBoundingClientRect();
			this.div.style.width = Math.min(600, Math.floor(canvasRect.width * 0.67)) + 'px';
			this.div.style.height = Math.floor(canvasRect.height * 0.67) + 'px';
			// resize button
			var btn = document.getElementById('__nonBlockingAlertBtn' + this.id);
			var btnRect = btn.getBoundingClientRect();
			btn.style.width = Math.trunc(btnRect.width + 16) + 'px';
			btn.style.height = Math.trunc(btnRect.height + 6) + 'px';
			// get text span information
			var span = document.getElementById('__nonBlockingAlertSpan' + this.id);
			var spanRect = span.getBoundingClientRect();
			// get the inner size (without padding) of the parent div
			var style = window.getComputedStyle(this.div, null);
			var innerSize = new Franca.SizeF.$ctor2(Franca.Calc.parseNumber(ss.replaceAllString(style.getPropertyValue('width'), 'px', '')), Franca.Calc.parseNumber(ss.replaceAllString(style.getPropertyValue('height'), 'px', '')));
			// get the size of the button div
			var buttonDiv = document.getElementById('__nonBlockingAlertButtonDiv' + this.id);
			var buttonDivRect = buttonDiv.getBoundingClientRect();
			var buttonDivSize = new Franca.SizeF.$ctor2(buttonDivRect.width, buttonDivRect.height);
			// available height for text div
			var availableHeight = innerSize.height - buttonDivSize.height;
			// set text size, use div height instead of span height cause the span is slightly smaller
			var childDiv = document.getElementById('__nonBlockingAlertChildDiv' + this.id);
			var childDivRect = childDiv.getBoundingClientRect();
			var textSize = new Franca.SizeF.$ctor2(spanRect.width, childDivRect.height);
			// set child div width and height
			childDiv.style.width = textSize.width + 'px';
			var resizedTextHeight = Franca.Calc.min$i(availableHeight, textSize.height);
			var overflow = resizedTextHeight < textSize.height;
			childDiv.style.height = resizedTextHeight + 'px';
			// set parent size
			this.div.style.height = resizedTextHeight + buttonDivSize.height + 'px';
			this.div.style.width = Franca.Calc.max$i(textSize.width, 150) + 'px';
		},
		close$1: function(e) {
			this.close();
		},
		close: function() {
			this.div.parentElement.removeChild(this.div);
			if (ss.isValue(this.alertUID) && $Franca_JS_NonBlockingAlert.$uniqueAlerts.containsKey(this.alertUID) && ss.referenceEquals($Franca_JS_NonBlockingAlert.$uniqueAlerts.get_item(this.alertUID), this)) {
				$Franca_JS_NonBlockingAlert.$uniqueAlerts.remove(this.alertUID);
			}
		}
	});
	ss.initClass($Franca_JS_SimpleAudio_StreamedMusic, $asm, {
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		load: function() {
			if (this.$loaded) {
				return;
			}
			this.$loadingChannel = new $Franca_JS_SimpleAudio_StreamedSoundChannel(this);
			this.$loadingChannel.add_onLoad(ss.mkdel(this, this.$instance_OnLoad));
			this.$loadingChannel.add_onEnd(ss.mkdel(this, this.$instance_OnEnd));
			this.$loadingChannel.add_onStop(ss.mkdel(this, this.$instance_OnStop));
			this.$loadingChannel.loadFrom(this.filename);
		},
		$instance_OnLoad: function(instance) {
			this.$channel = instance;
			this.$loadingChannel = null;
			this.$duration = new ss.TimeSpan(this.$channel.get_audio().duration * 10000000);
			this.$loaded = true;
			if (!ss.staticEquals(this.$1$OnLoadField, null)) {
				this.$1$OnLoadField(this);
			}
		},
		play$2: function(loop) {
			this.play$1(1, loop);
		},
		play$1: function(volume, loop) {
			this.play$3(volume, new ss.TimeSpan(0), loop);
		},
		play$3: function(volume, playFrom, loop) {
			if (ss.isNullOrUndefined(this.$channel)) {
				return;
			}
			if (ss.isValue(this.$channel) && ss.isValue(this.$channel.lastInstance)) {
				this.$channel.lastInstance.stop();
			}
			this.$loops = loop;
			this.$lastVolume = volume;
			this.$instance = new $Franca_JS_SimpleAudio_StreamedSoundInstance(this.$channel, volume);
			this.$channel.lastInstance = this.$instance;
			//channel.Audio.Loop = loop;
			if (playFrom.ticks > (new ss.TimeSpan(0)).ticks) {
				this.$channel.get_audio().currentTime = playFrom.ticks / 10000000;
			}
			this.$manager.addInstance(this.$instance);
			this.$instance.play();
		},
		attachToManager: function(manager) {
			this.$manager = manager;
		},
		$instance_OnEnd: function(channel) {
			if (this.$loops) {
				this.$instance.stop();
				if (this.get_loopTo().ticks > (new ss.TimeSpan(0)).ticks) {
					channel.get_audio().currentTime = this.get_loopTo().ticks / 10000000;
				}
				this.$instance.play();
				this.$manager.addInstance(this.$instance);
			}
			else if (ss.isValue(channel.lastInstance)) {
				channel.lastInstance.stop();
			}
		},
		$instance_OnStop: function(instance) {
			if (ss.isValue(instance.lastInstance)) {
				this.$manager.removeInstance(instance.lastInstance);
				instance.lastInstance = null;
			}
		},
		dispose: function() {
			if (this.$disposed) {
				return;
			}
			if (ss.isValue(this.$loadingChannel)) {
				this.$loadingChannel.dispose();
			}
			this.$loadingChannel = null;
			if (ss.isValue(this.$instance)) {
				this.$instance.stop();
			}
			this.$instance = null;
			if (ss.isValue(this.$channel)) {
				this.$channel.dispose();
			}
			this.$channel = null;
			this.$disposed = true;
		},
		get_loaded: function() {
			return this.$loaded;
		},
		get_manager: function() {
			return this.$manager;
		},
		get_duration: function() {
			return this.$duration;
		},
		get_loopTo: function() {
			return this.$1$LoopToField;
		},
		set_loopTo: function(value) {
			this.$1$LoopToField = value;
		},
		play: function() {
			this.play$1(1, false);
		},
		stop: function() {
			if (ss.isValue(this.$instance)) {
				this.$instance.stop();
			}
		},
		pause: function() {
			if (ss.isValue(this.$instance)) {
				this.$instance.pause();
			}
		},
		resume: function() {
			if (ss.isValue(this.$instance)) {
				this.$instance.resume();
			}
		},
		get_volume: function() {
			if (ss.isValue(this.$instance)) {
				return this.$instance.get_volume();
			}
			return 1;
		},
		set_volume: function(value) {
			if (ss.isValue(this.$instance)) {
				this.$instance.set_volume(value);
			}
		},
		get_state: function() {
			return (ss.isValue(this.$instance) ? this.$instance.get_state() : 0);
		}
	}, null, [ss.IDisposable, $Franca_Audio_ISound, $Franca_Audio_ISoundInstance, $Franca_Audio_IStreamedSound]);
	$Franca_JS_SimpleAudio_StreamedMusic.$ctor1.prototype = $Franca_JS_SimpleAudio_StreamedMusic.prototype;
	ss.initClass($Franca_JS_SimpleAudio_StreamedSound, $asm, {
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		load: function() {
			if (this.$loaded) {
				return;
			}
			if (this.$maxInstances === 0) {
				if (!ss.staticEquals(this.$1$OnLoadField, null)) {
					this.$1$OnLoadField(this);
				}
				return;
			}
			for (var i = 0; i < this.$maxInstances; i++) {
				var inst = new $Franca_JS_SimpleAudio_StreamedSoundChannel(this);
				inst.add_onLoad(ss.mkdel(this, this.$instance_OnLoad));
				inst.add_onEnd(ss.mkdel(this, this.$instance_OnEnd));
				inst.add_onStop(ss.mkdel(this, this.$instance_OnStop));
				this.$loadingChannels.push(inst);
			}
			for (var i1 = this.$maxInstances - 1; i1 >= 0; i1--) {
				this.$loadingChannels[i1].loadFrom(this.filename);
			}
		},
		$instance_OnLoad: function(instance) {
			if (ss.remove(this.$loadingChannels, instance)) {
				this.$channels.push(instance);
				if (this.$loadingChannels.length === 0) {
					this.$duration = new ss.TimeSpan(instance.get_audio().duration * 10000000);
					this.$loaded = true;
					if (!ss.staticEquals(this.$1$OnLoadField, null)) {
						this.$1$OnLoadField(this);
					}
				}
			}
		},
		play$1: function(loop) {
			return this.play$2(1, loop);
		},
		play$2: function(volume, loop) {
			if (this.$maxInstances <= 0) {
				return null;
			}
			var inst = null;
			var channel = this.$channels[this.$currentChannel];
			if (ss.isValue(channel) && ss.isValue(channel.lastInstance)) {
				channel.lastInstance.stop();
			}
			inst = new $Franca_JS_SimpleAudio_StreamedSoundInstance(channel, volume);
			//channel.Audio.Volume = inst.Volume * manager.Volume * manager.Context.MasterVolume;
			channel.lastInstance = inst;
			channel.get_audio().loop = loop;
			this.$manager.addInstance(inst);
			inst.play();
			this.$currentChannel++;
			if (this.$currentChannel >= this.$channels.length) {
				this.$currentChannel = 0;
			}
			return inst;
		},
		play: function(volume, pitch, pan, loop) {
			return this.play$2(volume, loop);
		},
		attachToManager: function(manager) {
			this.$manager = manager;
		},
		$instance_OnEnd: function(instance) {
			if (ss.isValue(instance.lastInstance)) {
				instance.lastInstance.stop();
			}
		},
		$instance_OnStop: function(instance) {
			if (ss.isValue(instance.lastInstance)) {
				this.$manager.removeInstance(instance.lastInstance);
				instance.lastInstance = null;
			}
		},
		dispose: function() {
			if (this.$disposed) {
				return;
			}
			for (var i = this.$loadingChannels.length - 1; i >= 0; i--) {
				this.$loadingChannels[i].dispose();
				ss.removeAt(this.$loadingChannels, i);
			}
			for (var i1 = this.$channels.length - 1; i1 >= 0; i1--) {
				if (ss.isValue(this.$channels[i1].lastInstance)) {
					this.$channels[i1].lastInstance.stop();
				}
				this.$channels[i1].dispose();
				ss.removeAt(this.$channels, i1);
			}
			this.$disposed = true;
		},
		get_loaded: function() {
			return this.$loaded;
		},
		get_manager: function() {
			return this.$manager;
		},
		get_duration: function() {
			return this.$duration;
		}
	}, null, [ss.IDisposable, $Franca_Audio_ISound, $Franca_Audio_IBufferedSound]);
	$Franca_JS_SimpleAudio_StreamedSound.$ctor1.prototype = $Franca_JS_SimpleAudio_StreamedSound.prototype;
	ss.initClass($Franca_JS_SimpleAudio_StreamedSoundChannel, $asm, {
		get_parent: function() {
			return this.$parent;
		},
		get_audio: function() {
			return this.$audio;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		add_onEnd: function(value) {
			this.$1$OnEndField = ss.delegateCombine(this.$1$OnEndField, value);
		},
		remove_onEnd: function(value) {
			this.$1$OnEndField = ss.delegateRemove(this.$1$OnEndField, value);
		},
		add_onStop: function(value) {
			this.$1$OnStopField = ss.delegateCombine(this.$1$OnStopField, value);
		},
		remove_onStop: function(value) {
			this.$1$OnStopField = ss.delegateRemove(this.$1$OnStopField, value);
		},
		loadFrom: function(file) {
			this.get_audio().addEventListener('canplaythrough', ss.mkdel(this, this.$canPlayThrough), false);
			this.get_audio().addEventListener('ended', ss.mkdel(this, this.$ended), false);
			this.get_audio().addEventListener('error', ss.mkdel(this, this.$error), false);
			this.get_audio().addEventListener('load', ss.mkdel(this, this.$canPlayThrough), false);
			this.get_audio().preload = 'auto';
			this.get_audio().src = file;
			this.get_audio().load();
			if (Franca.Platform.get_type() === 4) {
				this.get_audio().play();
				this.get_audio().pause();
			}
			this.$loadedInterval = window.setInterval(ss.mkdel(this, function() {
				if (this.get_audio().readyState === 4) {
					this.$canPlayThrough();
				}
			}), 16);
			if (this.get_audio().readyState === 4) {
				this.$canPlayThrough();
			}
			// canplaythrough broke on Firefox when using CreateObjectUrl so uhh I guess just force check
			// if it's a virtual file (which is in memory anyway) and if it is we know it can play through
			if ($Franca_File.isVirtualFile(file, 0) || ss.startsWithString(file, 'blob:')) {
				this.$canPlayThrough();
			}
		},
		$canPlayThrough: function() {
			window.clearInterval(this.$loadedInterval);
			this.get_audio().removeEventListener('canplaythrough', ss.mkdel(this, this.$canPlayThrough));
			this.get_audio().removeEventListener('load', ss.mkdel(this, this.$canPlayThrough));
			if (!this.$loaded) {
				this.$loaded = true;
				if (!ss.staticEquals(this.$1$OnLoadField, null)) {
					this.$1$OnLoadField(this);
				}
			}
		},
		$error: function() {
			if (ss.isValue(this.get_audio()) && ss.isValue(this.get_audio().error)) {
				console.log('Error loading streamed sound channel: ' + this.get_audio().src + ' (code ' + this.get_audio().error.code + ')');
			}
			else if (ss.isValue(this.get_audio())) {
				console.log('Error loading streamed sound channel: ' + this.get_audio().src);
			}
			else {
				console.log('Error loading streamed sound channel');
			}
			this.$canPlayThrough();
		},
		$ended: function() {
			if (!ss.staticEquals(this.$1$OnEndField, null)) {
				this.$1$OnEndField(this);
			}
		},
		stop: function() {
			this.get_audio().pause();
			this.get_audio().currentTime = 0;
			if (!ss.staticEquals(this.$1$OnStopField, null)) {
				this.$1$OnStopField(this);
			}
		},
		pause: function() {
			this.get_audio().pause();
		},
		play: function() {
			this.get_audio().play();
		},
		dispose: function() {
			if (this.$disposed) {
				return;
			}
			this.$parent = null;
			this.$audio = null;
			this.$disposed = true;
		}
	}, null, [ss.IDisposable]);
	ss.initClass($Franca_JS_SimpleAudio_StreamedSoundInstance, $asm, {
		pause: function() {
			if (this.$state === 0 || this.$state === 2) {
				return;
			}
			this.channel.pause();
			this.$state = 2;
		},
		stop: function() {
			if (this.$state === 0) {
				return;
			}
			this.channel.stop();
			this.$state = 0;
		},
		resume: function() {
			if (this.$state === 1 || this.$state === 0) {
				return;
			}
			this.channel.play();
			this.$state = 1;
		},
		play: function() {
			if (this.$state === 1) {
				return;
			}
			this.channel.play();
			this.$state = 1;
			this.set_volume(this.$volume);
		},
		get_volume: function() {
			return this.$volume;
		},
		set_volume: function(value) {
			this.$volume = Franca.Calc.clamp$3(value, 0, 1);
			if (this.$state === 0) {
				return;
			}
			this.channel.get_audio().volume = this.$volume * this.channel.get_parent().get_manager().get_volume() * this.channel.get_parent().get_manager().get_context().get_masterVolume();
		},
		get_state: function() {
			return this.$state;
		}
	}, null, [$Franca_Audio_ISoundInstance]);
	ss.initClass($Franca_JS_WebAudio_BufferedSound, $asm, {
		get_buffer: function() {
			return this.$buffer;
		},
		play: function(volume, pitch, pan, loop) {
			var inst = new $Franca_JS_WebAudio_BufferedSoundInstance(this, volume, pitch, loop);
			inst.play();
			return inst;
		},
		attachToManager: function(manager) {
			this.$manager = manager;
		},
		dispose: function() {
			if (this.$disposed) {
				return;
			}
			this.$buffer = null;
			this.$disposed = true;
		},
		get_manager: function() {
			return this.$manager;
		},
		get_duration: function() {
			return this.$duration;
		}
	}, null, [ss.IDisposable, $Franca_Audio_ISound, $Franca_Audio_IBufferedSound]);
	ss.initClass($Franca_JS_WebAudio_BufferedSoundInstance, $asm, {
		get_$context: function() {
			return ss.cast($Franca_Audio_AudioContext.$platformAudio, $Franca_Audio_$JSAudio).$webAudioContext;
		},
		pause: function() {
			if (this.$state === 0 || this.$state === 2) {
				return;
			}
			this.$pausedTime = (Franca.Platform.get_time().ticks / 10000000 - this.$startTime) * this.$source.playbackRate.value;
			this.$source.stop();
			this.$state = 2;
			this.$source.disconnect();
		},
		stop: function() {
			if (this.$state === 0) {
				return;
			}
			this.$parent.get_manager().removeInstance(this);
			this.$source.stop();
			this.$state = 0;
			this.$source.disconnect();
		},
		resume: function() {
			if (this.$state === 1 || this.$state === 0) {
				return;
			}
			this.$source = this.get_$context().createBufferSource();
			this.$source.buffer = this.$parent.get_buffer();
			this.$source.loop = this.$loop;
			this.$source.playbackRate.value = this.$pitch;
			this.$source.connect(this.$gain);
			this.$source.onended = ss.mkdel(this, this.$source_Ended);
			this.$startTime = Franca.Platform.get_time().ticks / 10000000 - this.$pausedTime / this.$source.playbackRate.value;
			this.$source.start(0, this.$pausedTime);
			this.$state = 1;
		},
		play: function() {
			if (this.$state === 1) {
				return;
			}
			this.$source = this.get_$context().createBufferSource();
			this.$source.buffer = this.$parent.get_buffer();
			this.$source.loop = this.$loop;
			this.$source.playbackRate.value = this.$pitch;
			this.$source.connect(this.$gain);
			this.$source.onended = ss.mkdel(this, this.$source_Ended);
			this.$parent.get_manager().addInstance(this);
			this.$startTime = Franca.Platform.get_time().ticks / 10000000;
			this.$source.start(0);
			this.$state = 1;
			this.set_volume(this.$volume);
		},
		$source_Ended: function(evt) {
			this.$parent.get_manager().removeInstance(this);
			this.$state = 0;
		},
		get_volume: function() {
			return this.$volume;
		},
		set_volume: function(value) {
			this.$volume = Franca.Calc.clamp$3(value, 0, 1);
			this.$gain.gain.value = this.$volume * this.$parent.get_manager().get_volume() * this.$parent.get_manager().get_context().get_masterVolume();
		},
		get_state: function() {
			return this.$state;
		}
	}, null, [$Franca_Audio_ISoundInstance]);
	ss.initClass($Franca_JsonData_EffectJson, $asm, {
		get_programs: function() {
			return this.$1$ProgramsField;
		},
		set_programs: function(value) {
			this.$1$ProgramsField = value;
		}
	});
	ss.initClass($Franca_JsonData_EffectTechniqueJson, $asm, {
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		get_vertexShader: function() {
			return this.$1$VertexShaderField;
		},
		set_vertexShader: function(value) {
			this.$1$VertexShaderField = value;
		},
		get_fragmentShader: function() {
			return this.$1$FragmentShaderField;
		},
		set_fragmentShader: function(value) {
			this.$1$FragmentShaderField = value;
		},
		get_vertexDefines: function() {
			return this.$1$VertexDefinesField;
		},
		set_vertexDefines: function(value) {
			this.$1$VertexDefinesField = value;
		},
		get_fragmentDefines: function() {
			return this.$1$FragmentDefinesField;
		},
		set_fragmentDefines: function(value) {
			this.$1$FragmentDefinesField = value;
		}
	});
	ss.initClass($Franca_Localization_GameLanguage, $asm, {
		get_name$1: function() {
			return this.$name;
		},
		set_name: function(value) {
			this.$name = value;
		},
		fromCsv: function(csv, hasHeader) {
			this.fields = [];
			var offset = { $: 0 };
			// skip header row if not available
			if (hasHeader) {
				// try to find name and text rows from header if available
				var entries = this.$readCsv(csv, offset);
				for (var i = 0; i < entries.length; i++) {
					var entry = System.StringExtensions.toLowerInvariant(entries[i].trim());
					if (entry === 'name') {
						this.$fieldRow = i;
					}
					else if (entry === 'text') {
						this.$textRow = i;
					}
					else if (entry === 'format') {
						this.$formatRow = i;
					}
				}
			}
			var highestRow = Franca.Calc.max$8([this.$fieldRow, this.$textRow, this.$formatRow]);
			// read csv entries
			while (offset.$ < csv.length) {
				var entries1 = this.$readCsv(csv, offset);
				if (entries1.length >= highestRow + 1) {
					this.fields.push(new $Franca_Localization_LocalizableField.$ctor1(entries1[this.$fieldRow], entries1[this.$textRow], Franca.EnumHelper.parse(Franca.Localization.LocalizableFormat).call(null, entries1[this.$formatRow], true)));
				}
				else {
					console.log(ss.formatString("Warning: bad row in language CSV file for language '{0}', not enough entries.", this.get_name$1()));
				}
			}
		},
		$readCsv: function(csv, offset) {
			var inString = false;
			var quotedString = false;
			var startOfEntry = true;
			var entries = [];
			var entryStart = offset.$;
			for (; offset.$ < csv.length + 1; offset.$++) {
				// we go past the final character to make sure the last entry is terminated correctly
				// the \n character will cause entry termination and return
				var chr = ((offset.$ < csv.length) ? csv.charCodeAt(offset.$) : 10);
				// if it's a comma and we're not in a quoted string, or if it's a newline, finish up the entry
				// if it's a newline then also return
				if (chr === 44 && !inString || !inString && (chr === 13 || chr === 10)) {
					var text = csv.substr(entryStart, offset.$ - entryStart);
					if (quotedString) {
						if (text.length >= 2) {
							text = text.substr(1, text.length - 2);
						}
						text = ss.replaceAllString(text, '""', '"');
					}
					entries.push(text);
					entryStart = offset.$ + 1;
					inString = false;
					quotedString = false;
					startOfEntry = true;
					if (chr === 13 || chr === 10) {
						if (chr === 13 && offset.$ + 1 < csv.length && csv.charCodeAt(offset.$ + 1) === 10) {
							offset.$ += 2;
						}
						else {
							offset.$++;
						}
						return entries;
					}
				}
				else if (chr === 34 && startOfEntry) {
					inString = true;
					startOfEntry = false;
					quotedString = true;
				}
				else if (chr === 34 && inString) {
					if (offset.$ + 1 < csv.length && csv.charCodeAt(offset.$ + 1) === 34) {
						offset.$++;
					}
					else {
						inString = false;
					}
				}
				else {
					startOfEntry = false;
				}
			}
			// we should never get to this point but it's required to actually compile
			return entries;
		},
		get_ready: function() {
			return this.get_loaded();
		},
		get_loaded: function() {
			return this.$1$LoadedField;
		},
		set_loaded: function(value) {
			this.$1$LoadedField = value;
		},
		get_name: function() {
			return this.$assetName;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		load: function(content, file, name, args) {
			var langName = null;
			if (args.length > 0 && ss.isInstanceOfType(args[0], String)) {
				langName = ss.cast(args[0], String);
			}
			var hasHeader = true;
			if (args.length > 1 && ss.isInstanceOfType(args[1], String)) {
				hasHeader = ss.unbox(ss.cast(args[1], Boolean));
			}
			this.load$1(content, file, name, langName, hasHeader);
		},
		load$1: function(content, file, name, languageName, hasHeader) {
			if (ss.isValue(languageName)) {
				this.set_name(languageName);
			}
			else {
				try {
					this.set_name(Franca.Platform.getFileNameWithoutExtension(file).split(String.fromCharCode(46))[0]);
					this.set_name(System.StringExtensions.toUpperInvariant(this.get_name$1().substr(0, 1)) + this.get_name$1().substring(1));
				}
				catch ($t1) {
				}
			}
			this.$assetName = name;
			this.$hasHeader = hasHeader;
			this.$fileRes = $Franca_File.load($Franca_Text_TextFile).call(null, file, null, null);
		},
		finalizeContent: function() {
			if (this.$fileRes.get_loaded() && !this.get_loaded()) {
				this.fromCsv(this.$fileRes.get_value().get_contents(), this.$hasHeader);
				this.set_loaded(true);
				this.$fileRes = null;
				var onLoad = this.$1$OnLoadField;
				if (!ss.staticEquals(onLoad, null)) {
					onLoad(this);
				}
			}
		}
	}, null, [$Franca_IAsset]);
	$Franca_Localization_GameLanguage.$ctor1.prototype = $Franca_Localization_GameLanguage.prototype;
	ss.initClass($Franca_Localization_LocalizableField, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $Franca_Localization_LocalizableField);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.referenceEquals(ss.unbox(b).field, this.field);
		},
		equalsT: function(b) {
			return ss.referenceEquals(b.field, this.field);
		},
		getHashCode: function() {
			return ss.getHashCode(this.field);
		}
	}, null, [ss.IEquatable]);
	$Franca_Localization_LocalizableField.$ctor1.prototype = $Franca_Localization_LocalizableField.prototype;
	$Franca_Localization_LocalizableField.__class = false;
	ss.initClass($Franca_Localization_Localizer, $asm, {});
	ss.initClass($Franca_Mode7_Mode7Texture, $asm, {
		add_onBeginRender: function(value) {
			this.$1$OnBeginRenderField = ss.delegateCombine(this.$1$OnBeginRenderField, value);
		},
		remove_onBeginRender: function(value) {
			this.$1$OnBeginRenderField = ss.delegateRemove(this.$1$OnBeginRenderField, value);
		},
		add_onEndRender: function(value) {
			this.$1$OnEndRenderField = ss.delegateCombine(this.$1$OnEndRenderField, value);
		},
		remove_onEndRender: function(value) {
			this.$1$OnEndRenderField = ss.delegateRemove(this.$1$OnEndRenderField, value);
		},
		$_BeginRender: function(graphicsDevice, mode7) {
			var f = this.$1$OnBeginRenderField;
			if (!ss.staticEquals(f, null)) {
				f(graphicsDevice, mode7, this);
			}
		},
		$_EndRender: function(graphicsDevice, mode7) {
			var f = this.$1$OnEndRenderField;
			if (!ss.staticEquals(f, null)) {
				f(graphicsDevice, mode7, this);
			}
		}
	});
	$Franca_Mode7_Mode7Texture.$ctor1.prototype = $Franca_Mode7_Mode7Texture.$ctor3.prototype = $Franca_Mode7_Mode7Texture.$ctor2.prototype = $Franca_Mode7_Mode7Texture.prototype;
	ss.initClass($Franca_Mode7_DynamicMode7Texture, $asm, {
		add_onUpdate: function(value) {
			this.$2$OnUpdateField = ss.delegateCombine(this.$2$OnUpdateField, value);
		},
		remove_onUpdate: function(value) {
			this.$2$OnUpdateField = ss.delegateRemove(this.$2$OnUpdateField, value);
		},
		update: function(mode7) {
			var onUpdate = this.$2$OnUpdateField;
			if (!ss.staticEquals(onUpdate, null)) {
				this.$2$OnUpdateField(mode7);
			}
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				if (ss.isValue(this.$renderTarget)) {
					try {
						this.$renderTarget.dispose();
					}
					catch ($t1) {
					}
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_renderTarget: function() {
			return this.$renderTarget;
		}
	}, $Franca_Mode7_Mode7Texture, [ss.IDisposable]);
	$Franca_Mode7_DynamicMode7Texture.$ctor1.prototype = $Franca_Mode7_DynamicMode7Texture.$ctor2.prototype = $Franca_Mode7_DynamicMode7Texture.$ctor3.prototype = $Franca_Mode7_DynamicMode7Texture.prototype;
	ss.initEnum($Franca_Mode7_EntityDrawMode, $asm, { spriteBatch: 0, drawBucket: 1 });
	ss.initClass($Franca_Mode7_HorizonTexture, $asm, {});
	$Franca_Mode7_HorizonTexture.$ctor1.prototype = $Franca_Mode7_HorizonTexture.prototype;
	ss.initInterface($Franca_Mode7_IMode7Entity, $asm, { get_position: null, get_transparent: null, renderMode7$1: null, renderMode7: null });
	ss.initClass($Franca_Mode7_Mode7, $asm, {
		setCamera$2: function(cameraPos, lookAt, rect) {
			if (!ss.isValue(rect)) {
				rect = this.$container.get_graphicsDevice().get_viewport();
			}
			var lookVec = new Franca.Vector2.$ctor3(lookAt.x - cameraPos.x, lookAt.z - cameraPos.z);
			var invalidDir = lookVec.length() * this.$terrainScale <= 1E-06;
			if (invalidDir) {
				lookAt = Franca.Vector3.op_Addition(cameraPos, this.$lastValidDirection);
				lookVec = new Franca.Vector2.$ctor3(lookAt.x - cameraPos.x, lookAt.z - cameraPos.z);
			}
			this.$angle = Franca.Calc.wrap$5(lookVec.getRotation(2), -Math.PI, Math.PI);
			// store original lookAt dir because angle easing below will mess it up
			var originalLookAt = lookAt;
			// clamp downward angles so they don't overflow into big positive angles
			if (lookAt.y < cameraPos.y) {
				var lookDir = Franca.Vector3.op_Subtraction(lookAt, cameraPos);
				var lookLength = lookDir.length();
				var lookAngle = Math.asin(lookDir.y / lookLength);
				if (lookAngle < -0.55) {
					var alpha = Franca.Calc.clamp$3((lookAngle + 0.55) / (-Math.PI / 2 + 0.55), 0, 1);
					lookAngle = Franca.Calc.lerp$2(-0.55, -0.65, Franca.Easing.CircleEase.get_out().ease(alpha));
					lookAt = new Franca.Vector3.$ctor4(cameraPos.x + lookDir.x, cameraPos.y + Math.tan(lookAngle) * (new Franca.Vector2.$ctor3(lookDir.x, lookDir.z)).length(), cameraPos.z + lookDir.z);
				}
			}
			this.$cameraLookAt = Franca.Vector3.op_Multiply$1(lookAt, this.$terrainScale);
			this.$cameraPosition = Franca.Vector3.op_Multiply$1(cameraPos, this.$terrainScale);
			// we know from TransformPosition that: (cameraPosition.Y - position.Y) * terrainScale / spaceX
			// gives us the multiplier for terrain height that determines height of the position
			var relX = this.$cameraLookAt.x - this.$cameraPosition.x;
			var relZ = this.$cameraLookAt.z - this.$cameraPosition.z;
			var spaceX = -relX * Math.sin(this.$angle) + relZ * Math.cos(this.$angle);
			var spaceZ = -relX * Math.cos(this.$angle) - relZ * Math.sin(this.$angle);
			var screenY = (this.$cameraPosition.y - this.$cameraLookAt.y) / spaceX;
			// terrain height multiplier
			// we want terrain height to be big enough that
			// screenY * terrainHeight + (1.0 - terrainHeight) = 0.5
			// solving for terrainHeight we get
			// terrainHeight = 1.0 / (((screenY - 1.0) * -1) * 2)
			//var terrainHeight = 1.0 / (((screenY - 1.0) * -1) * 2);
			// which can be simplified to terrainHeight = -0.5 / (screenY - 1.0)
			var terrainHeight = -0.5 / (screenY - 1);
			// but what we want is the horizon size which is 1.0 - terrainHeight so
			this.$horizonSize = 1 - terrainHeight;
			if (!invalidDir) {
				this.$lastValidDirection = Franca.Vector3.op_Subtraction(originalLookAt, this.$cameraPosition);
			}
		},
		setCamera: function(cameraPos, lookAt) {
			var lookVec = new Franca.Vector2.$ctor3(lookAt.x - cameraPos.x, lookAt.y - cameraPos.z);
			this.setCamera$1(cameraPos, lookVec.getRotation(2));
		},
		setCamera$1: function(cameraPos, angle) {
			this.$angle = Franca.Calc.wrap$5(angle, -Math.PI, Math.PI);
			this.$cameraPosition = Franca.Vector3.op_Multiply$1(cameraPos, this.$terrainScale);
			var dir = (new Franca.Vector2.$ctor3(0, 1)).rotate(angle);
			this.$cameraLookAt = new Franca.Vector3.$ctor4(this.$cameraPosition.x + dir.x, this.$cameraPosition.y, this.$cameraPosition.z + dir.y);
			if (dir.length() > 1E-06) {
				this.$lastValidDirection = new Franca.Vector3.$ctor4(dir.x, 0, dir.y);
			}
		},
		draw: function(rect) {
			var vpOriginal;
			vpOriginal = this.$container.get_graphicsDevice().get_viewport();
			var prevDepthWrite = this.$container.get_graphicsDevice().get_depthWrite();
			this.$container.get_graphicsDevice().set_depthWrite(false);
			this.$aspectRatio = vpOriginal.size.width / vpOriginal.size.height;
			this.$aspectRatio *= this.$fov / 90;
			if (ss.isValue(rect)) {
				var curRect = vpOriginal;
				var newRect = new Franca.Rectangle.$ctor2(curRect.location, ss.unbox(rect).size);
				this.vpMode7 = Franca.Rectangle.intersect(curRect, newRect);
			}
			else {
				this.vpMode7 = vpOriginal;
			}
			this.$horizonSize = Franca.Calc.clamp$3(this.$horizonSize, this.$minHorizonSize, this.$maxHorizonSize);
			var horizon = ss.Int32.trunc(this.$horizonSize * this.vpMode7.size.height);
			this.vpTerrain = new Franca.Rectangle.$ctor3(this.vpMode7.location.x, this.vpMode7.location.y + horizon, this.vpMode7.size.width, this.vpMode7.size.height - horizon);
			this.$container.get_graphicsDevice().set_viewport(this.vpMode7);
			// set up projection matrix
			this.$matTerrain = this.createProjectionMatrix(Franca.Matrix4.scale$2(this.$terrainScale, this.$terrainScale * 2, this.$terrainScale));
			this.$invMatTerrain = Franca.Matrix4.transpose(this.$matTerrain);
			this.$matEntity = this.createProjectionMatrix(Franca.Matrix4.scale$1(1));
			this.$invMatEntity = Franca.Matrix4.transpose(this.$matEntity);
			this.spriteBatch.begin(0, 12, 4, null);
			if (ss.isValue(this.$skyColor)) {
				this.spriteBatch.draw$2(this.$clearTex, new Franca.RectangleF.$ctor3(0, 0, this.vpMode7.size.width, horizon), $Franca_HdrColors.op_Implicit$1(ss.unbox(this.$skyColor)), 0, 0);
			}
			if (this.$skyEnabled) {
				var $t1 = Enumerable.from(this.$horizons).orderBy(function(h) {
					return h.zOrder;
				}).getEnumerator();
				try {
					while ($t1.moveNext()) {
						var horTex = $t1.current();
						if (horTex.texture.get_ready()) {
							var skyTexture = horTex.texture;
							if (ss.isValue(skyTexture)) {
								var repeats = Math.ceil(3200 / skyTexture.source.size.width);
								var width = ss.Int32.trunc(skyTexture.source.size.width * repeats);
								var offset = Math.round((this.$angle + Math.PI) / (2 * Math.PI) * width);
								var parallax = Math.round(this.$cameraPosition.y / this.$terrainScale * horTex.parallaxSpeed);
								this.spriteBatch.drawSrc$1(skyTexture, new Franca.RectangleF.$ctor3(0, 0, width * 2, skyTexture.source.size.height), new Franca.Vector2.$ctor3(this.vpMode7.size.width - width - offset, horizon - skyTexture.source.size.height - parallax + horTex.verticalOffset), $Franca_HdrColors.op_Implicit(Franca.Color.white), 0, 0);
							}
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
			this.spriteBatch.end();
			this.$container.get_graphicsDevice().set_viewport(this.vpTerrain);
			this.setParameters(vpOriginal);
			if (this.$effect.get_ready()) {
				var $t2 = Enumerable.from(this.$textures).orderBy(function(tex) {
					return tex.zOrder;
				}).getEnumerator();
				try {
					while ($t2.moveNext()) {
						var m7Texture = $t2.current();
						if (m7Texture.texture.get_ready()) {
							m7Texture.$_BeginRender(this.$container.get_graphicsDevice(), this);
							var texture = m7Texture.texture;
							var programName = (m7Texture.repeats ? (m7Texture.texture.baseTex.get_isPowerOfTwo() ? 'repeat' : 'repeat_npot') : 'norepeat');
							var program = this.$effect.get_programs().get_item(programName);
							program.get_item('texSize').setValue$2(new Franca.Vector2.$ctor3(texture.source.size.width, texture.source.size.height));
							program.get_item('offset').setValue$2(m7Texture.offset);
							this.spriteBatch.set_currentProgram(programName);
							this.spriteBatch.begin(0, this.$filter, 12, this.$effect);
							this.spriteBatch.draw(texture, new Franca.RectangleF.$ctor3(0, 0, this.vpTerrain.size.width, this.vpTerrain.size.height), $Franca_HdrColors.op_Implicit(Franca.Color.white), 0, 0);
							this.spriteBatch.end();
							m7Texture.$_EndRender(this.$container.get_graphicsDevice(), this);
						}
					}
				}
				finally {
					$t2.dispose();
				}
			}
			this.spriteBatch.set_currentProgram(null);
			this.$container.get_graphicsDevice().set_viewport(this.vpMode7);
			var minFog = ss.Int32.trunc(this.vpMode7.size.height * this.$minFogSize);
			var maxFog = Math.max(minFog, this.vpMode7.size.height - horizon);
			var fogSize = Franca.Calc.clamp$5(Math.floor(this.$cameraPosition.y * this.$fogSpeed * this.$terrainScale), minFog, maxFog);
			if (this.$fogEnabled && ss.isValue(this.$fogTexture) && this.$fogTexture.get_ready()) {
				this.spriteBatch.begin(0, 12, 12, null);
				this.spriteBatch.draw$2(this.$fogTexture, new Franca.RectangleF.$ctor3(0, horizon, this.vpMode7.size.width, fogSize), $Franca_HdrColors.op_Implicit(this.$fogColor), 0, 0);
				this.spriteBatch.end();
			}
			this.$container.get_graphicsDevice().set_depthWrite(true);
			if (ss.isValue(this.$quads)) {
				$Franca_OpenGL_WebGL_GL.cullFace($Franca_OpenGL_WebGL_Constants.NONE);
				this.$quadEffect.get_item('fogStart').setValue$8(horizon / this.vpMode7.size.height);
				this.$quadEffect.get_item('fogEnd').setValue$8((horizon + fogSize) / this.vpMode7.size.height);
				this.$quadEffect.get_item('fogSize').setValue$8(fogSize / this.vpMode7.size.height);
				this.$quadEffect.get_item('fogColor').setValue$4(this.$fogColor.toVector4());
				this.$quadEffect.get_item('screenSize').setValue$2(new Franca.Vector2.$ctor3(this.vpMode7.size.width, this.vpMode7.size.height));
				this.$quadEffect.get_item('stippleMatrix').setValue$1(new Franca.Matrix4.$ctor3(0.0588235294117647, 0.529411764705882, 0.176470588235294, 0.647058823529412, 0.764705882352941, 0.294117647058824, 0.882352941176471, 0.411764705882353, 0.235294117647059, 0.705882352941177, 0.117647058823529, 0.588235294117647, 0.941176470588235, 0.470588235294118, 0.823529411764706, 0.352941176470588));
				this.$quadEffect.get_item('matrixTransform').setValue$1(this.$matTerrain);
				this.$quadEffect.setSampler(1, this.$fogTexture, 'fogSampler', 3, 12);
				for (var $t3 = 0; $t3 < this.$quads.length; $t3++) {
					var quad = this.$quads[$t3];
					if (ss.isNullOrUndefined(this.$quadVertices)) {
						this.$quadVertSpec = new $Franca_Mode7_Mode7QuadVertexSpec();
						this.$quadVertices = new $Franca_Vertices_VertexBufferData(4 * this.$quadVertSpec.get_components());
						this.$quadIndices = new $Franca_Vertices_QuadIndexBufferData(0, 16);
						this.$quadVertBuffer = $Franca_OpenGL_WebGL_GL.createBuffer();
						this.$quadIndexBuffer = $Franca_OpenGL_WebGL_GL.createBuffer();
						this.$quadVao = new $Franca_OpenGL_VertexArrayObject();
						this.$quadVao.bind();
						this.$quadVao.bindBuffer(34963, this.$quadIndexBuffer);
						$Franca_OpenGL_WebGL_GL.bufferData$8($Franca_OpenGL_WebGL_Constants.elemenT_ARRAY_BUFFER, ss.cast(this.$quadIndices.get_data(), Franca.Collections.UShortArray), $Franca_OpenGL_WebGL_Constants.dynamiC_DRAW);
						this.$quadVao.bindBuffer(34962, this.$quadVertBuffer);
						this.$quadVao.enableVertexAttribArray$1(this.$quadVertSpec);
						this.$quadVao.unbind();
					}
					this.$quadVertices.offset = 0;
					this.$quadVertSpec.writeVertex(this.$quadVertices, quad.p0, quad.uV0, quad.texture, Franca.Color.op_Implicit(Franca.Color.white));
					this.$quadVertSpec.writeVertex(this.$quadVertices, quad.p1, quad.uV1, quad.texture, Franca.Color.op_Implicit(Franca.Color.white));
					this.$quadVertSpec.writeVertex(this.$quadVertices, quad.p2, quad.uV2, quad.texture, Franca.Color.op_Implicit(Franca.Color.white));
					this.$quadVertSpec.writeVertex(this.$quadVertices, quad.p3, quad.uV3, quad.texture, Franca.Color.op_Implicit(Franca.Color.white));
					var program1 = ((this.$fogEnabled && this.$fogWalls) ? 'default' : 'nofog');
					this.$quadEffect.setSampler(0, quad.texture.baseTex, 'texSampler', 12, 12);
					this.$quadEffect.applyProgram$1(program1, true);
					this.$quadVao.bind();
					$Franca_OpenGL_WebGL_GL.bufferData($Franca_OpenGL_WebGL_Constants.arraY_BUFFER, this.$quadVertices.$getData(), $Franca_OpenGL_WebGL_Constants.dynamiC_DRAW);
					$Franca_OpenGL_WebGL_GL.drawElements($Franca_OpenGL_WebGL_Constants.TRIANGLES, 6, $Franca_OpenGL_WebGL_Constants.unsigneD_SHORT, 0);
					this.$quadVao.unbind();
				}
			}
			if (this.entities.get_count() > 0) {
				if (this.$drawMode === 0) {
					ss.clear(this.$transparentEntities);
					ss.clear(this.$opaqueEntities);
					var $t4 = this.entities.getEnumerator();
					try {
						while ($t4.moveNext()) {
							var ent = $t4.current();
							var screenPos = this.transformPosition(Franca.Vector3.op_Multiply$1(ent.get_position(), this.$terrainScale));
							var entFogColor;
							if (this.$fogEnabled && this.$fogEntities) {
								var fogPos = this.transformPosition(Franca.Vector3.op_Multiply$1(new Franca.Vector3.$ctor4(ent.get_position().x, 0, ent.get_position().z), this.$terrainScale));
								if (fogPos.y >= horizon + fogSize) {
									entFogColor = Franca.Color.op_Implicit(Franca.Color.transparent);
								}
								else {
									var fogV = Franca.Calc.clamp$3((fogPos.y - horizon) / fogSize, 0, 1);
									var fogY = Math.floor(fogV * this.$fogTexture.get_height());
									var fogColorBase = new Franca.HdrColor.$ctor5(this.$fogData.data[fogY * this.$fogData.stride + 0 * 4 + 0], this.$fogData.data[fogY * this.$fogData.stride + 0 * 4 + 1], this.$fogData.data[fogY * this.$fogData.stride + 0 * 4 + 2], this.$fogData.data[fogY * this.$fogData.stride + 0 * 4 + 3]);
									var fogColorMixed = Franca.HdrColor.op_Multiply(fogColorBase, Franca.Color.op_Implicit(this.$fogColor));
									entFogColor = fogColorMixed;
								}
							}
							else {
								entFogColor = Franca.Color.op_Implicit(Franca.Color.transparent);
							}
							var transformed = new $Franca_Mode7_Mode7$TransformedEntity.$ctor1(ent, screenPos, entFogColor);
							if (ent.get_transparent()) {
								this.$transparentEntities.push(transformed);
							}
							else {
								this.$opaqueEntities.push(transformed);
							}
						}
					}
					finally {
						$t4.dispose();
					}
					this.drawEntities$1(this.$opaqueEntities, false);
					this.drawEntities$1(this.$transparentEntities, true);
				}
				else {
					this.$bucket.clear();
					var $t5 = this.entities.getEnumerator();
					try {
						while ($t5.moveNext()) {
							var ent1 = $t5.current();
							var screenPos1 = this.transformPosition(Franca.Vector3.op_Multiply$1(ent1.get_position(), this.$terrainScale));
							var entFogColor1;
							if (this.$fogEnabled && this.$fogEntities) {
								var fogPos1 = this.transformPosition(Franca.Vector3.op_Multiply$1(new Franca.Vector3.$ctor4(ent1.get_position().x, 0, ent1.get_position().z), this.$terrainScale));
								if (fogPos1.y >= horizon + fogSize) {
									entFogColor1 = Franca.Color.op_Implicit(Franca.Color.transparent);
								}
								else {
									var fogV1 = Franca.Calc.clamp$3((fogPos1.y - horizon) / fogSize, 0, 1);
									var fogY1 = Math.floor(fogV1 * this.$fogTexture.get_height());
									var fogColorBase1 = new Franca.HdrColor.$ctor5(this.$fogData.data[fogY1 * this.$fogData.stride + 0 * 4 + 0], this.$fogData.data[fogY1 * this.$fogData.stride + 0 * 4 + 1], this.$fogData.data[fogY1 * this.$fogData.stride + 0 * 4 + 2], this.$fogData.data[fogY1 * this.$fogData.stride + 0 * 4 + 3]);
									var fogColorMixed1 = Franca.HdrColor.op_Multiply(fogColorBase1, Franca.Color.op_Implicit(this.$fogColor));
									entFogColor1 = fogColorMixed1;
								}
							}
							else {
								entFogColor1 = Franca.Color.op_Implicit(Franca.Color.transparent);
							}
							ent1.renderMode7(this.$bucket, this.$cameraPosition, this.$cameraLookAt, screenPos1, entFogColor1);
						}
					}
					finally {
						$t5.dispose();
					}
					this.$bucket.sort();
					this.$bucket.draw();
				}
			}
			this.$container.get_graphicsDevice().set_viewport(vpOriginal);
			this.$container.get_graphicsDevice().set_depthWrite(prevDepthWrite);
		},
		createProjectionMatrix: function(matScale) {
			var matTrans = Franca.Matrix4.createTranslation(Franca.Vector3.op_UnaryNegation(this.$cameraPosition));
			var matRot = Franca.Matrix4.createFromAxisAngle(new Franca.Vector3.$ctor4(0, 1, 0), this.$angle + 3.14159274101257);
			var matSkew = Franca.Matrix4.createTranslation$2(0, (this.$horizonSize - 0.5) * 2 * this.$cameraPosition.y, 0);
			var matPerspective = Franca.Matrix4.createPerspectiveOffCenter(-this.vpMode7.size.width / this.vpMode7.size.height / 2 * (this.$fov / 90) / (1 / this.$zNear), this.vpMode7.size.width / this.vpMode7.size.height / 2 * (this.$fov / 90) / (1 / this.$zNear), -1 / (1 / this.$zNear), 1 / (1 / this.$zNear), this.$zNear, this.$zFar);
			// oblique frustrum, moves objects back to their correct positions after skewing
			matPerspective = matPerspective.clone();
			matPerspective.row2.y = (this.$horizonSize - 0.5) * 2;
			return Franca.Matrix4.op_Multiply(Franca.Matrix4.op_Multiply(Franca.Matrix4.op_Multiply(Franca.Matrix4.op_Multiply(matScale, matTrans), matRot), matSkew), matPerspective);
		},
		setQuadEffect: function(effect) {
			this.$quadEffect = effect;
			if (effect.get_ready()) {
				if (!effect.get_programs().hasProgram('default') || !effect.get_programs().hasProgram('nofog')) {
					throw new $Franca_ShaderException.$ctor1("Mode7 quad effect did not have one or more of 'default', and 'nofog' programs.");
				}
			}
			else {
				effect.add_onLoad(function(asset) {
					if (!effect.get_programs().hasProgram('default') || !effect.get_programs().hasProgram('nofog')) {
						throw new $Franca_ShaderException.$ctor1("Mode7 effect did not have one or more of 'default', and 'nofog' programs.");
					}
				});
			}
		},
		addQuad: function(quad) {
			this.$quads.push(quad);
		},
		drawEntities$1: function(entities, transparent) {
			this.beginDrawEntities(transparent);
			this.drawEntities((transparent ? Enumerable.from(entities).orderByDescending(function(e) {
				return e.position.z;
			}) : entities));
			this.endDrawEntities();
		},
		beginDrawEntities: function(transparent) {
			if (transparent) {
				this.spriteBatch.begin(0, 12, 3, null);
			}
			else {
				this.spriteBatch.begin(1, 12, 3, null);
			}
		},
		drawEntities: function(entities) {
			var $t1 = ss.getEnumerator(entities);
			try {
				while ($t1.moveNext()) {
					var ent = $t1.current();
					ent.entity.renderMode7$1(this.spriteBatch, this.$cameraPosition, this.$cameraLookAt, ent.position, ent.fogColor);
				}
			}
			finally {
				$t1.dispose();
			}
		},
		endDrawEntities: function() {
			this.spriteBatch.end();
		},
		positionToScreen: function(matrix, scale, position, viewport) {
			if (!ss.isValue(viewport)) {
				viewport = this.vpMode7;
			}
			var vp = ss.unbox(viewport);
			var projected = Franca.Matrix4.op_Multiply$1(matrix, new Franca.Vector4.$ctor3(position, 1));
			var screen = Franca.Vector3.op_Division$1(new Franca.Vector3.$ctor4(projected.x, projected.y, projected.z), projected.w);
			var depth = (1 / projected.z - 1 / this.get_zNear()) / (1 / this.get_zFar() - 1 / this.get_zNear());
			return new Franca.Vector4.$ctor5((screen.x + 1) / 2 * vp.size.width, (1 - (screen.y + 1) / 2) * vp.size.height, depth, (1 - screen.z) * vp.size.height / 2 * (1 / this.$zNear) * scale);
		},
		transformPosition: function(position) {
			return this.positionToScreen(this.$invMatEntity, this.get_entityScale(), position, null);
			//var projected = invMatEntity * new Vector4(position, 1);
			//var screen = new Vector3(projected.X, projected.Y, projected.Z) / projected.W;
			//var depth = ((1.0 / projected.Z) - (1.0 / ZNear)) / ((1.0 / ZFar) - (1.0 / ZNear));
			//return new Vector4(
			//    (screen.X + 1.0) / 2 * vpMode7.Width,
			//    (1.0 - (screen.Y + 1.0) / 2) * vpMode7.Height,
			//    depth,
			//    (1.0 - screen.Z) * vpMode7.Height / 2 * (1.0 / zNear) * EntityScale
			//);
			// old way to determine position and scale, had to be changed to be compatible
			// with the transformation matrix way of doing things
			//var relX = (position.X - cameraPosition.X) * terrainScale;
			//var relZ = (position.Z - cameraPosition.Z) * terrainScale;
			//var spaceX = -relX * Math.Sin(angle) + relZ * Math.Cos(angle);
			//var spaceZ = -relX * Math.Cos(angle) - relZ * Math.Sin(angle);
			//if (spaceX <= zNear)
			//    return new Vector4(0, 0, zNear, 0);
			//var screenX = (1 / spaceX) * spaceZ / aspectRatio;
			//var baseY = cameraPosition.Y * terrainScale / spaceX;
			//var posScale = vp.Width / aspectRatio / spaceX * terrainScale * entityScale;
			//return new Vector4(
			//    (screenX + 0.5) * vp.Width,
			//    //(screenY * vp.Height) + vp.Top, // old method caused warping of height based on horizon size
			//    ((baseY * vp.Height) + vp.Top) - posScale * position.Y,
			//    spaceX / (zFar - zNear),
			//    posScale);
		},
		setParameters: function(vp) {
			this.$effect.get_item('aspectRatio').setValue$6(this.$aspectRatio);
			this.$effect.get_item('camera').setValue$3(Franca.Vector3.op_Division$1(this.$cameraPosition, this.$terrainScale));
			this.$effect.get_item('cosAngle').setValue$6(Math.cos(this.$angle));
			this.$effect.get_item('sinAngle').setValue$6(Math.sin(this.$angle));
		},
		createTextures: function() {
			try {
				if (ss.isValue(this.$clearTex)) {
					this.$clearTex.dispose();
				}
			}
			catch ($t1) {
			}
			var white = new Franca.Collections.ByteArray.$ctor2(4);
			white.set_item(3, 255);
			white.set_item(2, 255);
			white.set_item(1, 255);
			white.set_item(0, 255);
			this.$clearTex = new $Franca_Texture.$ctor4(1, 1, white, 6408, false);
			try {
				if (ss.isValue(this.$defaultFogCanvas)) {
					this.$defaultFogCanvas.dispose();
				}
			}
			catch ($t2) {
			}
			var ease = new Franca.Easing.PowerEase.$ctor1(2, 1);
			var canvasData = new $Franca_CanvasPixelData.$ctor3(32, 32, 0);
			for (var y = 0; y < canvasData.height; y++) {
				var value = ss.Int32.trunc(ease.ease((canvasData.height - 1 - y) / (canvasData.height - 1)) * 255);
				for (var x = 0; x < canvasData.width; x++) {
					canvasData.data[y * canvasData.stride + x * 4 + 3] = value;
					null;
					canvasData.data[y * canvasData.stride + x * 4 + 2] = value;
					null;
					canvasData.data[y * canvasData.stride + x * 4 + 1] = value;
					null;
					canvasData.data[y * canvasData.stride + x * 4 + 0] = value;
				}
			}
			this.$defaultFogCanvas = new $Franca_Canvas.$ctor1(canvasData);
		},
		addTexture: function(texture) {
			this.$textures.push(texture);
		},
		addHorizon: function(texture) {
			this.$horizons.push(texture);
		},
		removeTexture: function(texture) {
			return ss.remove(this.$textures, texture);
		},
		removeHorizon: function(texture) {
			return ss.remove(this.$horizons, texture);
		},
		addEntity: function(entity) {
			this.entities.add(entity);
		},
		removeEntity: function(entity) {
			this.entities.remove(entity);
		},
		setFogCanvas: function(value) {
			this.$fogCanvas = value || this.$defaultFogCanvas;
			if (ss.isValue(this.$fogTexture)) {
				try {
					this.$fogTexture.dispose();
				}
				catch ($t1) {
				}
			}
			this.$fogTexture = new $Franca_Texture.$ctor3(this.$fogCanvas, false, false, false);
			this.$fogData = this.$fogCanvas.getPixelData();
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				try {
					if (ss.isValue(this.$clearTex)) {
						this.$clearTex.dispose();
					}
				}
				catch ($t1) {
				}
				try {
					if (ss.isValue(this.$defaultFogCanvas)) {
						this.$defaultFogCanvas.dispose();
					}
				}
				catch ($t2) {
				}
				try {
					if (ss.isValue(this.$fogTexture)) {
						this.$fogTexture.dispose();
					}
				}
				catch ($t3) {
				}
				try {
					if (ss.isValue(this.spriteBatch)) {
						this.spriteBatch.dispose();
					}
				}
				catch ($t4) {
				}
				this.$bucket.dispose();
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_fogEnabled: function() {
			return this.$fogEnabled;
		},
		set_fogEnabled: function(value) {
			this.$fogEnabled = value;
		},
		get_skyEnabled: function() {
			return this.$skyEnabled;
		},
		set_skyEnabled: function(value) {
			this.$skyEnabled = value;
		},
		get_terrainScale: function() {
			return this.$terrainScale;
		},
		set_terrainScale: function(value) {
			this.$terrainScale = value;
		},
		get_entityScale: function() {
			return this.$entityScale;
		},
		set_entityScale: function(value) {
			this.$entityScale = value;
		},
		get_horizonSize: function() {
			return this.$horizonSize;
		},
		set_horizonSize: function(value) {
			this.$horizonSize = value;
		},
		get_maxHorizonSize: function() {
			return this.$maxHorizonSize;
		},
		set_maxHorizonSize: function(value) {
			this.$maxHorizonSize = value;
		},
		get_minHorizonSize: function() {
			return this.$minHorizonSize;
		},
		set_minHorizonSize: function(value) {
			this.$minHorizonSize = value;
		},
		get_minFogSize: function() {
			return this.$minFogSize;
		},
		set_minFogSize: function(value) {
			this.$minFogSize = value;
		},
		get_textures: function() {
			return this.$textures;
		},
		get_horizons: function() {
			return this.$horizons;
		},
		get_skyColor: function() {
			return this.$skyColor;
		},
		set_skyColor: function(value) {
			this.$skyColor = value;
		},
		get_filter: function() {
			return this.$filter;
		},
		set_filter: function(value) {
			this.$filter = value;
		},
		get_entities: function() {
			return this.entities;
		},
		get_zNear: function() {
			return this.$zNear;
		},
		set_zNear: function(value) {
			this.$zNear = value;
		},
		get_zFar: function() {
			return this.$zFar;
		},
		set_zFar: function(value) {
			this.$zFar = value;
		},
		get_cameraPosition: function() {
			return this.$cameraPosition;
		},
		get_cameraLookAt: function() {
			return this.$cameraLookAt;
		},
		get_fieldOfView: function() {
			return this.$fov;
		},
		set_fieldOfView: function(value) {
			this.$fov = value;
		},
		get_viewport: function() {
			return this.vpMode7;
		},
		get_terrainViewport: function() {
			return this.vpTerrain;
		},
		get_fogSpeed: function() {
			return this.$fogSpeed;
		},
		set_fogSpeed: function(value) {
			this.$fogSpeed = value;
		},
		get_defaultFogTexture: function() {
			return this.$defaultFogCanvas;
		},
		get_fogTexture: function() {
			return this.$fogCanvas;
		},
		set_fogTexture: function(value) {
			this.setFogCanvas(value);
		},
		get_fogColor: function() {
			return this.$fogColor;
		},
		set_fogColor: function(value) {
			this.$fogColor = value;
		},
		get_effect: function() {
			return this.$effect;
		},
		set_effect: function(value) {
			this.$effect = value;
		},
		get_fogWalls: function() {
			return this.$fogWalls;
		},
		set_fogWalls: function(value) {
			this.$fogWalls = value;
		},
		get_fogEntities: function() {
			return this.$fogEntities;
		},
		set_fogEntities: function(value) {
			this.$fogEntities = value;
		},
		get_drawMode: function() {
			return this.$drawMode;
		},
		set_drawMode: function(value) {
			this.$drawMode = value;
		}
	}, null, [ss.IDisposable]);
	ss.initClass($Franca_Mode7_Mode7$TransformedEntity, $asm, {
		getHashCode: function() {
			var h = (this.entity ? ss.getHashCode(this.entity) : 0);
			h = h * 397 ^ ss.getHashCode(this.position);
			h = h * 397 ^ ss.getHashCode(this.fogColor);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Mode7_Mode7$TransformedEntity)) {
				return false;
			}
			return ss.equals(this.entity, o.entity) && ss.equals(this.position, o.position) && ss.equals(this.fogColor, o.fogColor);
		}
	});
	$Franca_Mode7_Mode7$TransformedEntity.$ctor1.prototype = $Franca_Mode7_Mode7$TransformedEntity.prototype;
	$Franca_Mode7_Mode7$TransformedEntity.__class = false;
	ss.initClass($Franca_Mode7_Mode7Quad, $asm, {
		setUVs: function(source) {
			return this.setUVs$1(new Franca.Vector2.$ctor3(source.location.x, source.location.y), new Franca.Vector2.$ctor3(source.location.x, source.location.y + source.size.height), new Franca.Vector2.$ctor3(source.location.x + source.size.width, source.location.y + source.size.height), new Franca.Vector2.$ctor3(source.location.x + source.size.width, source.location.y), 1);
		},
		setUVs$1: function(uv0, uv1, uv2, uv3, type) {
			switch (type) {
				case 2: {
					this.$setNormalizedUVs(uv0, uv1, uv2, uv3);
					break;
				}
				case 0: {
					var wrap = new Franca.RectangleF.$ctor3(this.texture.source.location.x / this.texture.baseTex.get_width(), this.texture.source.location.y / this.texture.baseTex.get_height(), this.texture.source.size.width / this.texture.baseTex.get_width(), this.texture.source.size.height / this.texture.baseTex.get_height());
					this.$setNormalizedUVs(new Franca.Vector2.$ctor3(uv0.x * wrap.size.width + wrap.location.x, uv0.y * wrap.size.height + wrap.location.y), new Franca.Vector2.$ctor3(uv1.x * wrap.size.width + wrap.location.x, uv1.y * wrap.size.height + wrap.location.y), new Franca.Vector2.$ctor3(uv2.x * wrap.size.width + wrap.location.x, uv2.y * wrap.size.height + wrap.location.y), new Franca.Vector2.$ctor3(uv3.x * wrap.size.width + wrap.location.x, uv3.y * wrap.size.height + wrap.location.y));
					break;
				}
				case 3: {
					this.setUVs$1(new Franca.Vector2.$ctor3(uv0.x / this.texture.baseTex.get_width(), uv0.y / this.texture.baseTex.get_height()), new Franca.Vector2.$ctor3(uv1.x / this.texture.baseTex.get_width(), uv1.y / this.texture.baseTex.get_height()), new Franca.Vector2.$ctor3(uv2.x / this.texture.baseTex.get_width(), uv2.y / this.texture.baseTex.get_height()), new Franca.Vector2.$ctor3(uv3.x / this.texture.baseTex.get_width(), uv3.y / this.texture.baseTex.get_height()), 2);
					break;
				}
				case 1: {
					this.setUVs$1(new Franca.Vector2.$ctor3(uv0.x / this.texture.source.size.width, uv0.y / this.texture.source.size.height), new Franca.Vector2.$ctor3(uv1.x / this.texture.source.size.width, uv1.y / this.texture.source.size.height), new Franca.Vector2.$ctor3(uv2.x / this.texture.source.size.width, uv2.y / this.texture.source.size.height), new Franca.Vector2.$ctor3(uv3.x / this.texture.source.size.width, uv3.y / this.texture.source.size.height), 0);
					break;
				}
			}
			return this;
		},
		$setNormalizedUVs: function(uv0, uv1, uv2, uv3) {
			this.uV0 = uv0;
			this.uV1 = uv1;
			this.uV2 = uv2;
			this.uV3 = uv3;
		}
	});
	$Franca_Mode7_Mode7Quad.$ctor1.prototype = $Franca_Mode7_Mode7Quad.$ctor2.prototype = $Franca_Mode7_Mode7Quad.prototype;
	ss.initEnum($Franca_Mode7_Mode7Quad$UVType, $asm, { normalized: 0, pixels: 1, normalizedBase: 2, pixelsBase: 3 });
	ss.initClass($Franca_Mode7_Mode7QuadVertexSpec, $asm, {
		writeVertex: function(data, position, texCoords, texture, color) {
			data.$writeSingle$3(position.x, position.y, position.z);
			data.$writeSingle$2(texCoords.x, texCoords.y);
			data.$writeSingle$4(texture.source.location.x / texture.baseTex.get_width(), texture.source.location.y / texture.baseTex.get_height(), texture.source.size.width / texture.baseTex.get_width(), texture.source.size.height / texture.baseTex.get_height());
			data.$writeUInt8$1(ss.Int32.trunc(color.r * 255), ss.Int32.trunc(color.g * 255), ss.Int32.trunc(color.b * 255), ss.Int32.trunc(color.a * 255));
		}
	}, $Franca_Vertices_VertexSpec);
	ss.initClass($Franca_OpenGL_VertexArrayObject, $asm, {
		$create: function(program) {
			$Franca_OpenGL_VertexArrayObject.set_currentProgram(program);
		},
		bind: function() {
			ss.clear(this.$attribs);
			this.$curArrayBuffer = null;
			if (ss.isValue(this.$elementBuffer)) {
				$Franca_OpenGL_WebGL_GL.bindBuffer($Franca_OpenGL_WebGL_Constants.elemenT_ARRAY_BUFFER, this.$elementBuffer);
			}
			for (var $t1 = 0; $t1 < this.$calls.length; $t1++) {
				var call = this.$calls[$t1];
				call();
			}
		},
		unbind: function() {
			if (ss.isValue(this.$elementBuffer)) {
				$Franca_OpenGL_WebGL_GL.bindBuffer($Franca_OpenGL_WebGL_Constants.elemenT_ARRAY_BUFFER, null);
			}
			if (ss.isValue(this.$curArrayBuffer)) {
				$Franca_OpenGL_WebGL_GL.bindBuffer($Franca_OpenGL_WebGL_Constants.arraY_BUFFER, null);
			}
			for (var $t1 = 0; $t1 < this.$attribs.length; $t1++) {
				var loc = this.$attribs[$t1];
				$Franca_OpenGL_WebGL_GL.disableVertexAttribArray(loc);
			}
		},
		$bindArrayBuffer: function(buffer) {
			if (!ss.referenceEquals(this.$curArrayBuffer, buffer)) {
				$Franca_OpenGL_WebGL_GL.bindBuffer($Franca_OpenGL_WebGL_Constants.arraY_BUFFER, buffer);
				this.$calls.push(ss.mkdel(this, function() {
					$Franca_OpenGL_WebGL_GL.bindBuffer($Franca_OpenGL_WebGL_Constants.arraY_BUFFER, buffer);
					this.$curArrayBuffer = buffer;
				}));
				this.$curArrayBuffer = buffer;
			}
		},
		$bindElementBuffer: function(buffer) {
			this.$elementBuffer = buffer;
			$Franca_OpenGL_WebGL_GL.bindBuffer($Franca_OpenGL_WebGL_Constants.elemenT_ARRAY_BUFFER, buffer);
		},
		bindBuffer: function(target, buffer) {
			this.bindBuffer$1(target, buffer);
		},
		bindBuffer$1: function(target, buffer) {
			if (target === $Franca_OpenGL_WebGL_Constants.arraY_BUFFER) {
				this.$bindArrayBuffer(buffer);
			}
			else if (target === $Franca_OpenGL_WebGL_Constants.elemenT_ARRAY_BUFFER) {
				this.$bindElementBuffer(buffer);
			}
			else {
				throw new ss.NotImplementedException('Cannot bind buffer with target ' + System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, target) + ' inside VAO polyfill');
			}
		},
		enableVertexAttribArray$2: function(loc, size, type, normalized, stride, offset) {
			$Franca_OpenGL_WebGL_GL.vertexAttribPointer($Franca_ShaderParamLocation.op_Implicit$2(loc), size, type, normalized, stride, offset);
			$Franca_OpenGL_WebGL_GL.enableVertexAttribArray($Franca_ShaderParamLocation.op_Implicit$2(loc));
			this.$attribs.push($Franca_ShaderParamLocation.op_Implicit$2(loc));
			this.$calls.push(ss.mkdel(this, function() {
				$Franca_OpenGL_WebGL_GL.vertexAttribPointer($Franca_ShaderParamLocation.op_Implicit$2(loc), size, type, normalized, stride, offset);
				$Franca_OpenGL_WebGL_GL.enableVertexAttribArray($Franca_ShaderParamLocation.op_Implicit$2(loc));
				this.$attribs.push($Franca_ShaderParamLocation.op_Implicit$2(loc));
			}));
		},
		enableVertexAttribArray$3: function(attrName, size, type, normalized, stride, offset) {
			if (ss.isValue($Franca_OpenGL_VertexArrayObject.get_currentProgram())) {
				var param;
				var loc = null;
				if ((param = $Franca_OpenGL_VertexArrayObject.get_currentProgram().getAttribute(attrName)).get_isValid()) {
					loc = param.get_location();
				}
				if (ss.isValue(loc)) {
					$Franca_OpenGL_WebGL_GL.vertexAttribPointer($Franca_ShaderParamLocation.op_Implicit$2(loc), size, type, normalized, stride, offset);
					$Franca_OpenGL_WebGL_GL.enableVertexAttribArray($Franca_ShaderParamLocation.op_Implicit$2(loc));
					this.$attribs.push($Franca_ShaderParamLocation.op_Implicit$2(loc));
				}
			}
			this.$calls.push(ss.mkdel(this, function() {
				if (ss.isValue($Franca_OpenGL_VertexArrayObject.get_currentProgram())) {
					var param1;
					var loc1 = null;
					if ((param1 = $Franca_OpenGL_VertexArrayObject.get_currentProgram().getAttribute(attrName)).get_isValid()) {
						loc1 = param1.get_location();
					}
					if (ss.isValue(loc1)) {
						$Franca_OpenGL_WebGL_GL.vertexAttribPointer($Franca_ShaderParamLocation.op_Implicit$2(loc1), size, type, normalized, stride, offset);
						$Franca_OpenGL_WebGL_GL.enableVertexAttribArray($Franca_ShaderParamLocation.op_Implicit$2(loc1));
						this.$attribs.push($Franca_ShaderParamLocation.op_Implicit$2(loc1));
					}
				}
			}));
		},
		enableVertexAttribArray: function(ele) {
			this.enableVertexAttribArray$3(ele.attribute, ele.componentCount, ele.type, ele.isNormalized, ele.stride, ele.offset);
		},
		enableVertexAttribArray$1: function(spec) {
			for (var i = 0; i < spec.elements.length; i++) {
				this.enableVertexAttribArray(spec.elements[i]);
			}
		}
	});
	ss.initInterface($Franca_OpenGL_WebGL_$IGLProvider, $asm, { get_$canForceES3: null, $forceES3: null, get_$canForceANGLE: null, $forceANGLE: null, $getShaderHeader: null, $getUnclampedFloatingPointFormat: null, $unclampFloatFormat: null, $stencilMask: null, $stencilFunc: null, $stencilOp: null, $depthMask: null, $drawBuffers: null, $drawArrays: null, $createFramebuffer: null, $bindFramebuffer: null, $createRenderbuffer: null, $bindRenderbuffer: null, $renderbufferStorage: null, $framebufferTexture2D: null, $framebufferRenderbuffer: null, $checkFramebufferStatus: null, $deleteFramebuffer: null, $deleteRenderbuffer: null, $cullFace: null, $blendEquation: null, $blendEquationSeparate: null, $blendFunc: null, $blendFuncSeparate: null, $depthFunc: null, $enable: null, $disable: null, $uniformMatrix4: null, $uniform1: null, $uniform1$1: null, $uniform2: null, $uniform2$1: null, $uniform3: null, $uniform3$1: null, $uniform4: null, $uniform4$1: null, $drawElements: null, $texParameter: null, $texParameter$1: null, $activeTexture: null, $useProgram$1: null, $useProgram: null, $viewport: null, $clearColor: null, $clearDepth: null, $clearStencil: null, $clear: null, $createShader: null, $shaderSource: null, $compileShader: null, $getShaderParameter: null, $getShaderInfoLog: null, $createProgram: null, $attachShader: null, $linkProgram: null, $getProgramParameter: null, $getProgramInfoLog: null, $getUniformLocation: null, $getAttribLocation: null, $createTexture: null, $bindTexture: null, $pixelStore: null, $texSubImage2D$3: null, $texSubImage2D: null, $texSubImage2D$2: null, $texSubImage2D$1: null, $texImage2D$4: null, $texImage2D$3: null, $texImage2D: null, $texImage2D$2: null, $texImage2D$1: null, $generateMipmap: null, $getError: null, $deleteTexture: null, $deleteShader: null, $deleteProgram: null, $detachShader: null, $createBuffer: null, $deleteBuffer: null, $deleteBuffers: null, $bufferDataNull: null, $bufferSubData$f: null, $bufferSubData$a: null, $bufferSubData$b: null, $bufferSubData$g: null, $bufferSubData$c: null, $bufferSubData$h: null, $bufferSubData$e: null, $bufferSubData$d: null, $bufferSubData$9: null, $bufferSubData$6: null, $bufferSubData$1: null, $bufferSubData$2: null, $bufferSubData$7: null, $bufferSubData$3: null, $bufferSubData$8: null, $bufferSubData$5: null, $bufferSubData$4: null, $bufferSubData: null, $bufferData$f: null, $bufferData$a: null, $bufferData$b: null, $bufferData$g: null, $bufferData$c: null, $bufferData$h: null, $bufferData$e: null, $bufferData$d: null, $bufferData$9: null, $bufferData$6: null, $bufferData$1: null, $bufferData$2: null, $bufferData$7: null, $bufferData$3: null, $bufferData$8: null, $bufferData$5: null, $bufferData$4: null, $bufferData: null, $bindBuffer: null, $enableVertexAttribArray: null, $disableVertexAttribArray: null, $vertexAttribPointer: null, $getParameter: null });
	ss.initClass($Franca_OpenGL_WebGL_$JSWebGL1, $asm, {
		get_$canForceES3: function() {
			return false;
		},
		$forceES3: function() {
		},
		get_$canForceANGLE: function() {
			return false;
		},
		$forceANGLE: function() {
		},
		$getShaderHeader: function() {
			return $Franca_OpenGL_WebGL_GL.shaderHeaderWebGL;
		},
		$getUnclampedFloatingPointFormat: function(inFormat, type, format, pixelType) {
			if (type === 0) {
				if (!ss.isValue($Franca_OpenGL_WebGL_$JSWebGL1.$oeS_texture_half_float)) {
					$Franca_OpenGL_WebGL_$JSWebGL1.$oeS_texture_half_float = ss.isValue($Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getExtension('OES_texture_half_float'));
					// try to initialize linear interpolation extension
					$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getExtension('OES_texture_half_float_linear');
				}
				if (!ss.unbox($Franca_OpenGL_WebGL_$JSWebGL1.$oeS_texture_half_float)) {
					throw new $Franca_OpenGLException.$ctor1('OES_texture_half_float is not supported');
				}
			}
			if (type === 1) {
				if (!ss.isValue($Franca_OpenGL_WebGL_$JSWebGL1.$oeS_texture_float)) {
					$Franca_OpenGL_WebGL_$JSWebGL1.$oeS_texture_float = ss.isValue($Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getExtension('OES_texture_float'));
					// try to initialize linear interpolation extension
					$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getExtension('OES_texture_float_linear');
				}
				if (!ss.unbox($Franca_OpenGL_WebGL_$JSWebGL1.$oeS_texture_float)) {
					throw new $Franca_OpenGLException.$ctor1('OES_texture_float is not supported');
				}
			}
			format.$ = this.$unclampFloatFormat(inFormat, type);
			pixelType.$ = ((type === 1) ? $Franca_OpenGL_WebGL_Constants.FLOAT : $Franca_OpenGL_WebGL_$JSWebGL1.$halF_FLOAT_OES);
		},
		$unclampFloatFormat: function(format, type) {
			// RGBA, RGB, ALPHA, LUMINANCE, DEPTH_COMPONENT, DEPTH_STENCIL, and LUMINANCE_ALPHA
			// appear to all always be unclamped on WebGL, unlike on normal OpenGL
			return format;
		},
		$depthMask: function(writeDepth) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().depthMask(writeDepth);
		},
		$drawBuffers: function(attachments) {
			throw new ss.NotImplementedException('MRT is not supported on WebGL');
		},
		$drawArrays: function(mode, first, count) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().drawArrays(mode, first, count);
		},
		$createFramebuffer: function() {
			return $Franca_OpenGL_WebGL_GLFramebuffer.op_Implicit$1($Franca_OpenGL_WebGL_$JSWebGL1.get_$context().createFramebuffer());
		},
		$bindFramebuffer: function(target, buffer) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bindFramebuffer(target, $Franca_OpenGL_WebGL_GLFramebuffer.op_Implicit(buffer));
		},
		$createRenderbuffer: function() {
			return $Franca_OpenGL_WebGL_GLRenderbuffer.op_Implicit$1($Franca_OpenGL_WebGL_$JSWebGL1.get_$context().createRenderbuffer());
		},
		$bindRenderbuffer: function(target, buffer) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bindRenderbuffer(target, $Franca_OpenGL_WebGL_GLRenderbuffer.op_Implicit(buffer));
		},
		$renderbufferStorage: function(target, internalFormat, width, height) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().renderbufferStorage(target, internalFormat, width, height);
		},
		$framebufferTexture2D: function(target, attachment, texTarget, texture, level) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().framebufferTexture2D(target, attachment, texTarget, $Franca_OpenGL_WebGL_GLTexture.op_Implicit(texture), level);
		},
		$framebufferRenderbuffer: function(target, attachment, renderbufferTarget, renderbuffer) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().framebufferRenderbuffer(target, attachment, renderbufferTarget, $Franca_OpenGL_WebGL_GLRenderbuffer.op_Implicit(renderbuffer));
		},
		$checkFramebufferStatus: function(target) {
			return $Franca_OpenGL_WebGL_$JSWebGL1.get_$context().checkFramebufferStatus(target);
		},
		$deleteFramebuffer: function(framebuffer) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().deleteFramebuffer($Franca_OpenGL_WebGL_GLFramebuffer.op_Implicit(framebuffer));
		},
		$deleteRenderbuffer: function(renderbuffer) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().deleteRenderbuffer($Franca_OpenGL_WebGL_GLRenderbuffer.op_Implicit(renderbuffer));
		},
		$cullFace: function(mode) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().cullFace(mode);
		},
		$blendEquation: function(mode) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().blendEquation(mode);
		},
		$blendFunc: function(src, dest) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().blendFunc(src, dest);
		},
		$depthFunc: function(func) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().depthFunc(func);
		},
		$enable: function(target) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().enable(target);
		},
		$disable: function(target) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().disable(target);
		},
		$uniformMatrix4: function(location, transpose, matrix) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().uniformMatrix4fv($Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit(location), transpose, Franca.Matrix4.op_Implicit(matrix));
		},
		$uniform1: function(location, value) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().uniform1i($Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit(location), value);
		},
		$uniform1$1: function(location, value) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().uniform1f($Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit(location), value);
		},
		$uniform2: function(location, v0, v1) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().uniform2i($Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit(location), v0, v1);
		},
		$uniform2$1: function(location, v0, v1) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().uniform2f($Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit(location), v0, v1);
		},
		$uniform3: function(location, v0, v1, v2) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().uniform3i($Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit(location), v0, v1, v2);
		},
		$uniform3$1: function(location, v0, v1, v2) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().uniform3f($Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit(location), v0, v1, v2);
		},
		$uniform4: function(location, v0, v1, v2, v3) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().uniform4i($Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit(location), v0, v1, v2, v3);
		},
		$uniform4$1: function(location, v0, v1, v2, v3) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().uniform4f($Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit(location), v0, v1, v2, v3);
		},
		$drawElements: function(mode, indexCount, indexType, indexOffsetBytes) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().drawElements(mode, indexCount, indexType, indexOffsetBytes);
		},
		$texParameter: function(target, pname, param) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texParameteri(target, pname, param);
		},
		$texParameter$1: function(target, pname, param) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texParameterf(target, pname, param);
		},
		$activeTexture: function(unit) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().activeTexture(unit);
		},
		$useProgram$1: function(program) {
			$Franca_OpenGL_VertexArrayObject.set_currentProgram(program);
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().useProgram($Franca_OpenGL_WebGL_GLProgram.op_Implicit($Franca_ShaderProgram.op_Implicit(program)));
		},
		$useProgram: function(program) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().useProgram($Franca_OpenGL_WebGL_GLProgram.op_Implicit(program));
		},
		$viewport: function(rectangle) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().viewport(rectangle.location.x, rectangle.location.y, rectangle.size.width, rectangle.size.height);
		},
		$clearColor: function(color) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().clearColor(color.r, color.g, color.b, color.a);
		},
		$clearDepth: function(depth) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().clearDepth(depth);
		},
		$clearStencil: function(stencil) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().clearStencil(stencil);
		},
		$clear: function(mask) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().clear(mask);
		},
		$createShader: function(type) {
			return $Franca_OpenGL_WebGL_GLShader.op_Implicit$1($Franca_OpenGL_WebGL_$JSWebGL1.get_$context().createShader(type));
		},
		$shaderSource: function(shader, source) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().shaderSource($Franca_OpenGL_WebGL_GLShader.op_Implicit(shader), source);
		},
		$compileShader: function(shader) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().compileShader($Franca_OpenGL_WebGL_GLShader.op_Implicit(shader));
		},
		$getShaderParameter: function(shader, pname) {
			var res = $Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getShaderParameter($Franca_OpenGL_WebGL_GLShader.op_Implicit(shader), pname);
			var boolRes = ss.safeCast(res, Boolean);
			if (ss.isValue(boolRes)) {
				return (ss.unbox(boolRes) ? 1 : 0);
			}
			var intRes = ss.safeCast(res, ss.Int32);
			if (ss.isValue(intRes)) {
				return ss.unbox(intRes);
			}
			throw new ss.NotImplementedException('Unexpected GetShaderParameter return type: ' + ss.getTypeName(ss.getInstanceType(res)));
		},
		$getShaderInfoLog: function(shader) {
			return $Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getShaderInfoLog($Franca_OpenGL_WebGL_GLShader.op_Implicit(shader));
		},
		$createProgram: function() {
			return $Franca_OpenGL_WebGL_GLProgram.op_Implicit$1($Franca_OpenGL_WebGL_$JSWebGL1.get_$context().createProgram());
		},
		$attachShader: function(program, shader) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().attachShader($Franca_OpenGL_WebGL_GLProgram.op_Implicit(program), $Franca_OpenGL_WebGL_GLShader.op_Implicit(shader));
		},
		$linkProgram: function(program) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().linkProgram($Franca_OpenGL_WebGL_GLProgram.op_Implicit(program));
		},
		$getProgramParameter: function(program, pname) {
			var res = $Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getProgramParameter($Franca_OpenGL_WebGL_GLProgram.op_Implicit(program), pname);
			var boolRes = ss.safeCast(res, Boolean);
			if (ss.isValue(boolRes)) {
				return (ss.unbox(boolRes) ? 1 : 0);
			}
			var intRes = ss.safeCast(res, ss.Int32);
			if (ss.isValue(intRes)) {
				return ss.unbox(intRes);
			}
			throw new ss.NotImplementedException('Unexpected GetProgramParameter return type: ' + ss.getTypeName(ss.getInstanceType(res)));
		},
		$getProgramInfoLog: function(program) {
			return $Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getProgramInfoLog($Franca_OpenGL_WebGL_GLProgram.op_Implicit(program));
		},
		$getUniformLocation: function(program, name) {
			return $Franca_OpenGL_WebGL_GLUniformLocation.op_Implicit$1($Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getUniformLocation($Franca_OpenGL_WebGL_GLProgram.op_Implicit(program), name));
		},
		$getAttribLocation: function(program, name) {
			return $Franca_OpenGL_WebGL_GLAttributeLocation.op_Implicit$1($Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getAttribLocation($Franca_OpenGL_WebGL_GLProgram.op_Implicit(program), name));
		},
		$createTexture: function() {
			return $Franca_OpenGL_WebGL_GLTexture.op_Implicit$1($Franca_OpenGL_WebGL_$JSWebGL1.get_$context().createTexture());
		},
		$bindTexture: function(target, texture) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bindTexture(target, $Franca_OpenGL_WebGL_GLTexture.op_Implicit(texture));
		},
		$pixelStore: function(pname, param) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().pixelStorei(pname, param);
		},
		$texSubImage2D$3: function(T) {
			return function(target, level, x, y, width, height, format, type, pixels) {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().pixelStorei($Franca_OpenGL_WebGL_Constants.unpacK_PREMULTIPLY_ALPHA_WEBGL, 0);
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texSubImage2D(target, level, x, y, width, height, format, type, pixels.get_underlyingObject());
			};
		},
		$texSubImage2D: function(target, level, x, y, pixels) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().pixelStorei($Franca_OpenGL_WebGL_Constants.unpacK_PREMULTIPLY_ALPHA_WEBGL, 0);
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texSubImage2D(target, level, x, y, pixels.width, pixels.height, $Franca_OpenGL_WebGL_Constants.RGBA, $Franca_OpenGL_WebGL_Constants.unsigneD_BYTE, $Franca_CanvasPixelData.op_Explicit(pixels));
		},
		$texSubImage2D$2: function(target, level, x, y, pixels, premultiplyAlpha) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().pixelStorei($Franca_OpenGL_WebGL_Constants.unpacK_PREMULTIPLY_ALPHA_WEBGL, (premultiplyAlpha ? 1 : 0));
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texSubImage2D(target, level, x, y, pixels.width, pixels.height, $Franca_OpenGL_WebGL_Constants.RGBA, $Franca_OpenGL_WebGL_Constants.unsigneD_BYTE, $Franca_CanvasPixelData.op_Explicit(pixels));
		},
		$texSubImage2D$1: function(target, level, x, y, canvas, premultiplyAlpha) {
			if (premultiplyAlpha) {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().pixelStorei($Franca_OpenGL_WebGL_Constants.unpacK_PREMULTIPLY_ALPHA_WEBGL, 1);
			}
			else {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().pixelStorei($Franca_OpenGL_WebGL_Constants.unpacK_PREMULTIPLY_ALPHA_WEBGL, 0);
			}
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texSubImage2D(target, level, x, y, $Franca_OpenGL_WebGL_Constants.RGBA, $Franca_OpenGL_WebGL_Constants.unsigneD_BYTE, ss.cast(canvas.get_bitmap(), $Franca_JSBitmap).get_bitmap());
		},
		$texImage2D$4: function(T) {
			return function(target, level, internalFormat, width, height, format, type, pixels) {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().pixelStorei($Franca_OpenGL_WebGL_Constants.unpacK_PREMULTIPLY_ALPHA_WEBGL, 0);
				if (ss.isNullOrUndefined(pixels)) {
					$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texImage2D(target, level, internalFormat, width, height, 0, format, type, null);
				}
				else {
					$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texImage2D(target, level, internalFormat, width, height, 0, format, type, pixels.get_underlyingObject());
				}
			};
		},
		$texImage2D$3: function(target, level, internalFormat, width, height, format, type) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texImage2D(target, level, internalFormat, width, height, 0, format, type, null);
		},
		$texImage2D: function(target, level, internalFormat, pixels) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().pixelStorei($Franca_OpenGL_WebGL_Constants.unpacK_PREMULTIPLY_ALPHA_WEBGL, 0);
			if (ss.isNullOrUndefined(pixels)) {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texImage2D(target, level, internalFormat, pixels.width, pixels.height, 0, $Franca_OpenGL_WebGL_Constants.RGBA, $Franca_OpenGL_WebGL_Constants.unsigneD_BYTE, null);
			}
			else {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texImage2D(target, level, internalFormat, pixels.width, pixels.height, 0, $Franca_OpenGL_WebGL_Constants.RGBA, $Franca_OpenGL_WebGL_Constants.unsigneD_BYTE, $Franca_CanvasPixelData.op_Explicit(pixels));
			}
		},
		$texImage2D$2: function(target, level, internalFormat, pixels, premultiplyAlpha) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().pixelStorei($Franca_OpenGL_WebGL_Constants.unpacK_PREMULTIPLY_ALPHA_WEBGL, (premultiplyAlpha ? 1 : 0));
			if (ss.isNullOrUndefined(pixels)) {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texImage2D(target, level, internalFormat, pixels.width, pixels.height, 0, $Franca_OpenGL_WebGL_Constants.RGBA, $Franca_OpenGL_WebGL_Constants.unsigneD_BYTE, null);
			}
			else {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texImage2D(target, level, internalFormat, pixels.width, pixels.height, 0, $Franca_OpenGL_WebGL_Constants.RGBA, $Franca_OpenGL_WebGL_Constants.unsigneD_BYTE, $Franca_CanvasPixelData.op_Explicit(pixels));
			}
		},
		$texImage2D$1: function(target, level, internalFormat, canvas, premultiplyAlpha) {
			if (premultiplyAlpha) {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().pixelStorei($Franca_OpenGL_WebGL_Constants.unpacK_PREMULTIPLY_ALPHA_WEBGL, 1);
			}
			else {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().pixelStorei($Franca_OpenGL_WebGL_Constants.unpacK_PREMULTIPLY_ALPHA_WEBGL, 0);
			}
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().texImage2D(target, level, internalFormat, $Franca_OpenGL_WebGL_Constants.RGBA, $Franca_OpenGL_WebGL_Constants.unsigneD_BYTE, ss.cast(canvas.get_bitmap(), $Franca_JSBitmap).get_bitmap());
		},
		$generateMipmap: function(target) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().generateMipmap(target);
		},
		$getError: function() {
			return $Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getError();
		},
		$deleteTexture: function(texture) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().deleteTexture($Franca_OpenGL_WebGL_GLTexture.op_Implicit(texture));
		},
		$deleteShader: function(shader) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().deleteShader($Franca_OpenGL_WebGL_GLShader.op_Implicit(shader));
		},
		$deleteProgram: function(program) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().deleteProgram($Franca_OpenGL_WebGL_GLProgram.op_Implicit(program));
		},
		$detachShader: function(program, shader) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().detachShader($Franca_OpenGL_WebGL_GLProgram.op_Implicit(program), $Franca_OpenGL_WebGL_GLShader.op_Implicit(shader));
		},
		$createBuffer: function() {
			return $Franca_OpenGL_WebGL_GLBuffer.op_Implicit$1($Franca_OpenGL_WebGL_$JSWebGL1.get_$context().createBuffer());
		},
		$deleteBuffer: function(buffer) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().deleteBuffer($Franca_OpenGL_WebGL_GLBuffer.op_Implicit(buffer));
		},
		$deleteBuffers: function(buffers) {
			for (var $t1 = 0; $t1 < buffers.length; $t1++) {
				var buffer = buffers[$t1];
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().deleteBuffer($Franca_OpenGL_WebGL_GLBuffer.op_Implicit(buffer));
			}
		},
		$bufferDataNull: function(target, size, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, size, usage);
		},
		$bufferSubData$f: function(T) {
			return function(target, offset, size, data) {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.subarrayBlock$1(0, size).get_underlyingObject());
			};
		},
		$bufferSubData$a: function(target, offset, size, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.subarrayBlock$1(0, size).get_underlyingObject());
		},
		$bufferSubData$b: function(target, offset, size, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.subarrayBlock$1(0, size).get_underlyingObject());
		},
		$bufferSubData$g: function(target, offset, size, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.subarrayBlock$1(0, size).get_underlyingObject());
		},
		$bufferSubData$c: function(target, offset, size, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.subarrayBlock$1(0, size).get_underlyingObject());
		},
		$bufferSubData$h: function(target, offset, size, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.subarrayBlock$1(0, size).get_underlyingObject());
		},
		$bufferSubData$e: function(target, offset, size, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.subarrayBlock$1(0, size).get_underlyingObject());
		},
		$bufferSubData$d: function(target, offset, size, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.subarrayBlock$1(0, size).get_underlyingObject());
		},
		$bufferSubData$9: function(target, offset, size, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.subarrayBlock$1(0, size).get_underlyingObject());
		},
		$bufferSubData$6: function(T) {
			return function(target, offset, data) {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.get_underlyingObject());
			};
		},
		$bufferSubData$1: function(target, offset, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.get_underlyingObject());
		},
		$bufferSubData$2: function(target, offset, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.get_underlyingObject());
		},
		$bufferSubData$7: function(target, offset, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.get_underlyingObject());
		},
		$bufferSubData$3: function(target, offset, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.get_underlyingObject());
		},
		$bufferSubData$8: function(target, offset, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.get_underlyingObject());
		},
		$bufferSubData$5: function(target, offset, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.get_underlyingObject());
		},
		$bufferSubData$4: function(target, offset, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.get_underlyingObject());
		},
		$bufferSubData: function(target, offset, data) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferSubData(target, offset, data.get_underlyingObject());
		},
		$bufferData$f: function(T) {
			return function(target, size, data, usage) {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.subarrayBlock$1(0, size).get_underlyingObject(), usage);
			};
		},
		$bufferData$a: function(target, size, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.subarrayBlock$1(0, size).get_underlyingObject(), usage);
		},
		$bufferData$b: function(target, size, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.subarrayBlock$1(0, size).get_underlyingObject(), usage);
		},
		$bufferData$g: function(target, size, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.subarrayBlock$1(0, size).get_underlyingObject(), usage);
		},
		$bufferData$c: function(target, size, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.subarrayBlock$1(0, size).get_underlyingObject(), usage);
		},
		$bufferData$h: function(target, size, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.subarrayBlock$1(0, size).get_underlyingObject(), usage);
		},
		$bufferData$e: function(target, size, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.subarrayBlock$1(0, size).get_underlyingObject(), usage);
		},
		$bufferData$d: function(target, size, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.subarrayBlock$1(0, size).get_underlyingObject(), usage);
		},
		$bufferData$9: function(target, size, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.subarrayBlock$1(0, size).get_underlyingObject(), usage);
		},
		$bufferData$6: function(T) {
			return function(target, data, usage) {
				$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.get_underlyingObject(), usage);
			};
		},
		$bufferData$1: function(target, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.get_underlyingObject(), usage);
		},
		$bufferData$2: function(target, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.get_underlyingObject(), usage);
		},
		$bufferData$7: function(target, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.get_underlyingObject(), usage);
		},
		$bufferData$3: function(target, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.get_underlyingObject(), usage);
		},
		$bufferData$8: function(target, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.get_underlyingObject(), usage);
		},
		$bufferData$5: function(target, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.get_underlyingObject(), usage);
		},
		$bufferData$4: function(target, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.get_underlyingObject(), usage);
		},
		$bufferData: function(target, data, usage) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bufferData(target, data.get_underlyingObject(), usage);
		},
		$bindBuffer: function(target, buffer) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().bindBuffer(target, $Franca_OpenGL_WebGL_GLBuffer.op_Implicit(buffer));
		},
		$enableVertexAttribArray: function(index) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().enableVertexAttribArray($Franca_OpenGL_WebGL_GLAttributeLocation.op_Implicit(index));
		},
		$disableVertexAttribArray: function(index) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().disableVertexAttribArray($Franca_OpenGL_WebGL_GLAttributeLocation.op_Implicit(index));
		},
		$vertexAttribPointer: function(index, size, type, normalized, stride, offset) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().vertexAttribPointer($Franca_OpenGL_WebGL_GLAttributeLocation.op_Implicit(index), size, type, normalized, stride, offset);
		},
		$getParameter: function(pname) {
			return ss.unbox(ss.cast($Franca_OpenGL_WebGL_$JSWebGL1.get_$context().getParameter(pname), ss.Int32));
		},
		$stencilMask: function(mask) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().stencilMask(mask);
		},
		$stencilFunc: function(func, sref, mask) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().stencilFunc(func, sref, mask);
		},
		$stencilOp: function(fail, zfail, zpass) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().stencilOp(fail, zfail, zpass);
		},
		$blendEquationSeparate: function(modeRgb, modeAlpha) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().blendEquationSeparate(modeRgb, modeAlpha);
		},
		$blendFuncSeparate: function(srcRgb, dstRgb, srcAlpha, dstAlpha) {
			$Franca_OpenGL_WebGL_$JSWebGL1.get_$context().blendFuncSeparate(srcRgb, dstRgb, srcAlpha, dstAlpha);
		}
	}, null, [$Franca_OpenGL_WebGL_$IGLProvider]);
	ss.initClass($Franca_OpenGL_WebGL_Constants, $asm, {});
	ss.initClass($Franca_OpenGL_WebGL_GL, $asm, {});
	ss.initClass($Franca_OpenGL_WebGL_GLAttributeLocation, $asm, {
		toString: function() {
			return Object.prototype.toString.call(this) + ' (' + this.$location + ')';
		},
		get_isValid: function() {
			return this.$location >= 0;
		}
	});
	ss.initClass($Franca_OpenGL_WebGL_GLBuffer, $asm, {});
	ss.initClass($Franca_OpenGL_WebGL_GLError, $asm, {
		add: function(error) {
			this.$errors.push(error);
		},
		getMessage: function(addBaseMessage) {
			var str = new ss.StringBuilder();
			for (var $t1 = 0; $t1 < this.$errors.length; $t1++) {
				var error = this.$errors[$t1];
				if (error !== $Franca_OpenGL_WebGL_Constants.nO_ERROR) {
					str.append(((str.length > 0) ? ', ' : (addBaseMessage ? ': ' : '')));
					str.append($Franca_OpenGL_WebGL_GLError.constantToString(error));
				}
			}
			if (str.length > 0) {
				return (addBaseMessage ? (this.$baseMessage + str.toString()) : str.toString());
			}
			return 'No errors found';
		},
		get_message: function() {
			return this.getMessage(true);
		},
		get_errors: function() {
			return this.$errors;
		},
		get_baseMessage: function() {
			return this.$baseMessage;
		},
		set_baseMessage: function(value) {
			this.$baseMessage = value;
		},
		get_hasErrors: function() {
			return Enumerable.from(this.$errors).where(function(e) {
				return e !== $Franca_OpenGL_WebGL_Constants.nO_ERROR;
			}).firstOrDefault(null, ss.getDefaultValue(ss.Int32)) !== 0;
		}
	}, ss.Exception);
	ss.initClass($Franca_OpenGL_WebGL_GLFramebuffer, $asm, {});
	ss.initEnum($Franca_OpenGL_WebGL_GLGetParameterInt, $asm, { maX_TEXTURE_SIZE: 3379, blenD_DST_ALPHA: 32970, blenD_DST_RGB: 32968, blenD_SRC_ALPHA: 32971, blenD_SRC_RGB: 32969, culL_FACE_MODE: 2885, blenD_EQUATION_RGB: 32777, blenD_EQUATION_ALPHA: 34877 });
	ss.initClass($Franca_OpenGL_WebGL_GLProgram, $asm, {});
	ss.initClass($Franca_OpenGL_WebGL_GLRenderbuffer, $asm, {});
	ss.initClass($Franca_OpenGL_WebGL_GLShader, $asm, {});
	ss.initClass($Franca_OpenGL_WebGL_GLTexture, $asm, {});
	ss.initClass($Franca_OpenGL_WebGL_GLUniformLocation, $asm, {
		get_isValid: function() {
			return ss.isValue(this.$location);
		}
	});
	ss.initInterface($Franca_Png_$IPngDecompressor, $asm, { get_$isAvailable: null, $inflate: null });
	ss.initClass($Franca_Png_$JSPngDecompressor, $asm, {
		$inflate: function(data) {
			switch (this.$type) {
				default: {
					throw new ss.InvalidOperationException('PNG decompression is not available on JS platform');
				}
				case 1: {
					return this.$inflatePuff(data);
				}
			}
		},
		$inflatePuff: function(compressedData) {
			return Franca.Compression.Deflate.inflate(compressedData, 1);
		},
		get_$isAvailable: function() {
			return this.$type !== 0;
		}
	}, null, [$Franca_Png_$IPngDecompressor]);
	ss.initClass($Franca_Png_Adam7, $asm, {});
	ss.initClass($Franca_Png_AncillaryChunk, $asm, {
		read: function(reader, length) {
			if (length > 0) {
				reader.skip(length);
			}
			return this;
		},
		get_chunkType: function() {
			return null;
		},
		getHashCode: function() {
			return 0;
		},
		equals: function(o) {
			return ss.isInstanceOfType(o, $Franca_Png_AncillaryChunk);
		}
	}, null, [ss.makeGenericType($Franca_Png_IPngChunkData$1, [$Franca_Png_AncillaryChunk])]);
	$Franca_Png_AncillaryChunk.__class = false;
	ss.initClass($Franca_Png_HeaderChunk, $asm, {
		read: function(reader, length) {
			if (length !== 13) {
				throw new $Franca_Png_PngFormatException.$ctor1(ss.formatString('Invalid HDR chunk in PNG file, expected length 13 but got length {0}', length));
			}
			var width = reader.readUInt32$1(1);
			if (width > 2147483647) {
				throw new $Franca_Png_PngFormatException.$ctor1(ss.formatString('PNG width {0} exceeds maximum value of 2,147,483,647', width));
			}
			var height = reader.readUInt32$1(1);
			if (height > 2147483647) {
				throw new $Franca_Png_PngFormatException.$ctor1(ss.formatString('PNG height {0} exceeds maximum value of 2,147,483,647', height));
			}
			var bitDepth = reader.readByte();
			var colorType = reader.readByte();
			var pixelFormat = colorType << 8 | bitDepth;
			switch (pixelFormat) {
				case 1040:
				case 1032:
				case 16:
				case 1:
				case 2:
				case 4:
				case 8:
				case 769:
				case 770:
				case 772:
				case 776:
				case 528:
				case 520:
				case 1552:
				case 1544: {
					break;
				}
				default: {
					throw new $Franca_Png_PngFormatException.$ctor1(ss.formatString('Invalid PNG pixel format with bit depth {0} and color type {1}', bitDepth, colorType));
				}
			}
			var compression = reader.readByte();
			if (compression !== 0) {
				throw new $Franca_Png_PngFormatException.$ctor1(ss.formatString('Invalid PNG compression type {0}, expected Deflate', System.EnumExtensions.getName($Franca_Png_PngCompressionMethod).call(null, compression)));
			}
			var filter = reader.readByte();
			if (filter !== 0) {
				throw new $Franca_Png_PngFormatException.$ctor1(ss.formatString('Invalid PNG filter type {0}, expected Adaptive', System.EnumExtensions.getName($Franca_Png_PngFilterAlgorithm).call(null, filter)));
			}
			var interlace = reader.readByte();
			if (interlace !== 0 && interlace !== 1) {
				throw new $Franca_Png_PngFormatException.$ctor1(ss.formatString('Invalid PNG interlace type {0}, expected None or Interlaced', System.EnumExtensions.getName($Franca_Png_PngInterlaceMethod).call(null, filter)));
			}
			return new $Franca_Png_HeaderChunk.$ctor1(width, height, pixelFormat, compression, filter, interlace);
		},
		get_chunkType: function() {
			return 1229472850;
		},
		getHashCode: function() {
			var h = this.width;
			h = h * 397 ^ this.height;
			h = h * 397 ^ this.pixelFormat;
			h = h * 397 ^ this.compression;
			h = h * 397 ^ this.filter;
			h = h * 397 ^ this.interlace;
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Png_HeaderChunk)) {
				return false;
			}
			return this.width === o.width && this.height === o.height && this.pixelFormat === o.pixelFormat && this.compression === o.compression && this.filter === o.filter && this.interlace === o.interlace;
		}
	}, null, [ss.makeGenericType($Franca_Png_IPngChunkData$1, [$Franca_Png_HeaderChunk])]);
	$Franca_Png_HeaderChunk.$ctor1.prototype = $Franca_Png_HeaderChunk.prototype;
	$Franca_Png_HeaderChunk.__class = false;
	ss.initClass($Franca_Png_ImgDatChunk, $asm, {
		read: function(reader, length) {
			if (length > 0) {
				this.writer.write(reader.readData(length));
			}
			return this;
		},
		get_chunkType: function() {
			return 1229209940;
		},
		getHashCode: function() {
			return (this.writer ? ss.getHashCode(this.writer) : 0) | 0;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $Franca_Png_ImgDatChunk)) {
				return false;
			}
			return ss.equals(this.writer, o.writer);
		}
	}, null, [ss.makeGenericType($Franca_Png_IPngChunkData$1, [$Franca_Png_ImgDatChunk])]);
	$Franca_Png_ImgDatChunk.$ctor1.prototype = $Franca_Png_ImgDatChunk.prototype;
	$Franca_Png_ImgDatChunk.__class = false;
	ss.initClass($Franca_Png_PngChunk, $asm, {});
	ss.initEnum($Franca_Png_PngChunkType, $asm, { ancillary: 536870912, private$1: 2097152, reserved: 8192, copySafe: 32, IHDR: 1229472850, PLTE: 1347179589, IDAT: 1229209940, IEND: 1229278788 });
	ss.initEnum($Franca_Png_PngCompressionMethod, $asm, { deflate: 0 });
	ss.initClass($Franca_Png_PngData, $asm, {
		convertTo8BitIndices: function() {
			if (!$Franca_Png_PngPixelFormatExtensions.isIndexed(this.format)) {
				throw new ss.InvalidOperationException('Cannot convert PNG data to 8 bits per pixel indices: PNG data was not indexed');
			}
			switch (this.format) {
				default: {
					throw new ss.InvalidOperationException('Cannot convert PNG data to 8 bits per pixel indices: unknown pixel format ' + System.EnumExtensions.getName($Franca_Png_PngPixelFormat).call(null, this.format));
				}
				case 776: {
					return new $Franca_Png_PngData.$ctor2(this);
				}
				case 769:
				case 770:
				case 772: {
					break;
				}
			}
			var palCopy = new Array(this.palette.length);
			for (var i = 0; i < this.palette.length; i++) {
				palCopy[i] = this.palette[i];
			}
			// unrolled loops? unrolled loops.
			if (this.format === 769) {
				var dataCopy = new Franca.BinaryData.$ctor5(this.width * this.height);
				var fullBytes = ss.Int32.div(this.width, 8);
				for (var y = 0, src = 0, dst = 0; y < this.height; y++) {
					// fully filled bytes
					for (var i1 = 0; i1 < fullBytes; i1++, src++, dst += 8) {
						var v = this.data.get_item(src);
						dataCopy.set_item(dst, v & 1);
						dataCopy.set_item(dst + 1, (v & 2) >> 1);
						dataCopy.set_item(dst + 2, (v & 4) >> 2);
						dataCopy.set_item(dst + 3, (v & 8) >> 3);
						dataCopy.set_item(dst + 4, (v & 16) >> 4);
						dataCopy.set_item(dst + 5, (v & 32) >> 5);
						dataCopy.set_item(dst + 6, (v & 64) >> 6);
						dataCopy.set_item(dst + 7, (v & 128) >> 7);
					}
					// remainder
					var pixelsRemaining = this.width % 8;
					if (pixelsRemaining > 0) {
						var v1 = this.data.get_item(src);
						var mask = 1;
						for (var i2 = 0; i2 < pixelsRemaining; i2++, dst++) {
							dataCopy.set_item(dst, (v1 & mask) >> i2);
							mask = mask << 1;
						}
						src++;
					}
				}
				return new $Franca_Png_PngData.$ctor3(776, this.width, this.height, palCopy, dataCopy);
			}
			else if (this.format === 770) {
				var dataCopy1 = new Franca.BinaryData.$ctor5(this.width * this.height);
				var fullBytes1 = ss.Int32.div(this.width, 4);
				for (var y1 = 0, src1 = 0, dst1 = 0; y1 < this.height; y1++) {
					// fully filled bytes
					for (var i3 = 0; i3 < fullBytes1; i3++, src1++, dst1 += 4) {
						var v2 = this.data.get_item(src1);
						dataCopy1.set_item(dst1, v2 & 3);
						// v & 0b11
						dataCopy1.set_item(dst1 + 1, (v2 & 12) >> 2);
						dataCopy1.set_item(dst1 + 2, (v2 & 48) >> 4);
						dataCopy1.set_item(dst1 + 3, (v2 & 192) >> 6);
					}
					// remainder
					var pixelsRemaining1 = this.width % 4;
					if (pixelsRemaining1 > 0) {
						var v3 = this.data.get_item(src1);
						var mask1 = 3;
						for (var i4 = 0; i4 < pixelsRemaining1; i4++, dst1++) {
							dataCopy1.set_item(dst1, (v3 & mask1) >> i4 * 2);
							mask1 = mask1 << 2;
						}
						src1++;
					}
				}
				return new $Franca_Png_PngData.$ctor3(776, this.width, this.height, palCopy, dataCopy1);
			}
			else if (this.format === 772) {
				var dataCopy2 = new Franca.BinaryData.$ctor5(this.width * this.height);
				var fullBytes2 = ss.Int32.div(this.width, 2);
				for (var y2 = 0, src2 = 0, dst2 = 0; y2 < this.height; y2++) {
					// fully filled bytes
					for (var i5 = 0; i5 < fullBytes2; i5++, src2++, dst2 += 2) {
						var v4 = this.data.get_item(src2);
						dataCopy2.set_item(dst2, v4 & 15);
						// v & 0b1111
						dataCopy2.set_item(dst2 + 1, (v4 & 240) >> 4);
						// v & 0b11110000
					}
					// remainder
					var pixelsRemaining2 = this.width % 2;
					if (pixelsRemaining2 > 0) {
						var v5 = this.data.get_item(src2);
						var mask2 = 15;
						for (var i6 = 0; i6 < pixelsRemaining2; i6++, dst2++) {
							dataCopy2.set_item(dst2, (v5 & mask2) >> i6 * 4);
							mask2 = mask2 << 4;
						}
						src2++;
					}
				}
				return new $Franca_Png_PngData.$ctor3(776, this.width, this.height, palCopy, dataCopy2);
			}
			else {
				throw new ss.NotImplementedException('Unexpected branch in PngData.ConvertTo8BitIndices');
			}
		}
	});
	$Franca_Png_PngData.$ctor2.prototype = $Franca_Png_PngData.$ctor3.prototype = $Franca_Png_PngData.$ctor1.prototype = $Franca_Png_PngData.prototype;
	ss.initClass($Franca_Png_PngDecompressor, $asm, {});
	ss.initEnum($Franca_Png_PngFilterAlgorithm, $asm, { adaptive: 0 });
	ss.initClass($Franca_Png_PngFormatException, $asm, {}, ss.Exception);
	$Franca_Png_PngFormatException.$ctor1.prototype = $Franca_Png_PngFormatException.$ctor2.prototype = $Franca_Png_PngFormatException.prototype;
	ss.initClass($Franca_Png_PngImage, $asm, {});
	ss.initEnum($Franca_Png_PngInterlaceMethod, $asm, { none: 0, interlaced: 1 });
	ss.initEnum($Franca_Png_PngPixelFormat, $asm, { grayscale1Bit: 1, grayscale2Bits: 2, grayscale4Bits: 4, grayscale8Bits: 8, grayscale16Bits: 16, rgb8Bits: 520, rgb16Bits: 528, indexed1Bit: 769, indexed2Bits: 770, indexed4Bits: 772, indexed8Bits: 776, grayAlpha8Bits: 1032, grayAlpha16Bits: 1040, rgba8Bits: 1544, rgba16Bits: 1552 });
	ss.initClass($Franca_Png_PngPixelFormatExtensions, $asm, {});
	ss.initEnum($Franca_Png_PngScanlineFilter, $asm, { none: 0, sub: 1, up: 2, average: 3, paeth: 4 });
	ss.initClass($Franca_Saves_SaveContainer, $asm, {
		isBase64: function(data) {
			if (data.get_length() < $Franca_Saves_SaveContainer.$hdrIdentLength) {
				throw new $Franca_Saves_SaveCorruptionException.$ctor1('SaveContainer header of insufficient size.');
			}
			if (data.get_item(0) !== 70 || data.get_item(1) !== 83 || data.get_item(2) !== 65 || data.get_item(3) !== 86) {
				throw new $Franca_Saves_SaveCorruptionException.$ctor1("SaveContainer did not start with 'FSAV' identifier.");
			}
			return data.get_item(4) === 49;
		},
		load$1: function(T) {
			return function(data) {
				if (data.length < 23) {
					throw new $Franca_Saves_SaveCorruptionException.$ctor1('SaveContainer header of insufficient size.');
				}
				if (!ss.startsWithString(data, 'FSAV')) {
					throw new $Franca_Saves_SaveCorruptionException.$ctor1("SaveContainer did not start with 'FSAV' identifier.");
				}
				try {
					// read header from hex
					var $t1 = new Franca.BinaryData.$ctor5(9);
					$t1.set_endian(0);
					var headerBin = $t1;
					for (var i = 0, j = 0; j < headerBin.get_length(); i += 2, j++) {
						headerBin.set_item(j, this.$hexToByte(data, $Franca_Saves_SaveContainer.$hdrIdentLength + i));
					}
					// read header
					var version = headerBin.readByte();
					var imageLength = headerBin.readInt32();
					var dataLength = headerBin.readInt32();
					// get image data
					var imageLoc = 23;
					this.image = 'data:image/png;base64,' + data.substr(imageLoc, imageLength);
					// get gzip data and unpack
					var dataLoc = imageLoc + imageLength;
					var gzippedData = Franca.Text.Base64.decode(data.substr(dataLoc, dataLength));
					this.$unpackData(T).call(this, gzippedData);
				}
				catch ($t2) {
					var e = ss.Exception.wrap($t2);
					throw new $Franca_Saves_SaveCorruptionException.$ctor2('SaveContainer was corrupt: ' + e.get_message(), e);
				}
			};
		},
		$hexToByte: function(data, offset) {
			var b = {};
			if (!Franca.Calc.tryParseHex(data.substr(offset, 2), b)) {
				throw new $Franca_Saves_SaveCorruptionException.$ctor1('SaveContainer had malformed hex byte in header.');
			}
			return b.$;
		},
		load: function(T) {
			return function(data) {
				if (this.isBase64(data)) {
					this.load$1(T).call(this, Franca.Text.UTF8.fromBinaryData(data, true));
					return;
				}
				if (data.get_length() < 14) {
					throw new $Franca_Saves_SaveCorruptionException.$ctor1('SaveContainer header of insufficient size.');
				}
				var prevEndian = data.get_endian();
				try {
					data.set_endian(0);
					data.seek$1($Franca_Saves_SaveContainer.$hdrIdentLength, 0);
					// read header
					var version = data.readByte();
					var imageLength = data.readInt32();
					var dataLength = data.readInt32();
					// get image data
					var imageData = data.slice(data.get_location(), imageLength);
					this.image = 'data:image/png;base64,' + Franca.Text.Base64.encode(imageData);
					data.seek(imageLength);
					// get gzip data and unpack
					var gzippedData = data.slice(data.get_location(), dataLength);
					this.$unpackData(T).call(this, gzippedData);
				}
				catch ($t1) {
					var e = ss.Exception.wrap($t1);
					throw new $Franca_Saves_SaveCorruptionException.$ctor2('SaveContainer was corrupt: ' + e.get_message(), e);
				}
				finally {
					data.set_endian(prevEndian);
				}
			};
		},
		$unpackData: function(T) {
			return function(gzippedData) {
				var json = Franca.Text.UTF8.fromBinaryData(Franca.Compression.GZip.inflate(gzippedData, 0, 0), true);
				// unpack data
				var root = Franca.Serialization.Json.parse(json);
				this.game = Franca.JsonValue.op_Implicit$k(root.get_item('game'));
				this.description = Franca.JsonValue.op_Implicit$k(root.get_item('description'));
				this.date = Franca.UtcDate.parse(Franca.JsonValue.op_Implicit$k(root.get_item('date')));
				var mappable = ss.createInstance(T);
				this.saveData = mappable.fromJson(root.get_item('saveData'));
			};
		},
		saveBase64: function() {
			var output = new ss.StringBuilder();
			output.append('FSAV1');
			var image = Franca.Text.Base64.removeHeader(this.image);
			var gzipped = this.$gZipData();
			var saveData = Franca.Text.Base64.encode(gzipped);
			var header = this.$getHeader(image.length, saveData.length);
			for (var i = 0; i < header.get_length(); i++) {
				Franca.ByteExtensions.toHex$1(header.get_item(i), output, false);
			}
			output.append(image);
			output.append(saveData);
			return output.toString();
		},
		saveBinary: function() {
			var stream = new Franca.BinaryStream();
			try {
				stream.write$1(Franca.Text.ASCII.toBinaryData('FSAV0', 0, -1, false), 0, 5);
				var image = Franca.Text.Base64.decode(Franca.Text.Base64.removeHeader(this.image));
				var saveData = this.$gZipData();
				var header = this.$getHeader(image.get_length(), saveData.get_length());
				stream.write$1(header, 0, header.get_length());
				stream.write$1(image, 0, image.get_length());
				stream.write$1(saveData, 0, saveData.get_length());
				return stream.toBinary();
			}
			finally {
				if (ss.isValue(stream)) {
					stream.dispose();
				}
			}
		},
		$gZipData: function() {
			var root = Franca.JsonValue.get_dict();
			root.set_item('game', Franca.JsonValue.op_Implicit$G(this.game));
			root.set_item('description', Franca.JsonValue.op_Implicit$G(this.description));
			root.set_item('date', Franca.JsonValue.op_Implicit$G(this.date.toString()));
			root.set_item('saveData', this.saveData.toJson());
			return Franca.Compression.GZip.deflate(Franca.Text.UTF8.toBinaryData(Franca.Serialization.Json.stringify(root, 0)), 3, 0, 0);
		},
		$getHeader: function(imageLength, dataLength) {
			var $t1 = new Franca.BinaryData.$ctor5(9);
			$t1.set_endian(0);
			var bin = $t1;
			bin.writeByte($Franca_Saves_SaveContainer.currentVersion);
			bin.writeInt32(imageLength);
			bin.writeInt32(dataLength);
			return bin;
		}
	});
	$Franca_Saves_SaveContainer.$ctor1.prototype = $Franca_Saves_SaveContainer.$ctor2.prototype = $Franca_Saves_SaveContainer.prototype;
	ss.initClass($Franca_Saves_SaveCorruptionException, $asm, {}, ss.Exception);
	$Franca_Saves_SaveCorruptionException.$ctor1.prototype = $Franca_Saves_SaveCorruptionException.$ctor2.prototype = $Franca_Saves_SaveCorruptionException.prototype;
	ss.initClass($Franca_Text_TextFile, $asm, {
		toString: function() {
			return this.$contents.toString();
		},
		get_contents: function() {
			return this.$contents;
		}
	}, null, [Franca.IFileResult]);
	$Franca_Text_TextFile.$ctor1.prototype = $Franca_Text_TextFile.prototype;
	ss.initClass($Franca_Serialization_JsonFile, $asm, {
		deserialize: function(T) {
			return function() {
				return Franca.Serialization.Json.convert(T).call(null, Franca.Serialization.Json.parse(this.get_contents()));
			};
		}
	}, $Franca_Text_TextFile, [Franca.IFileResult]);
	ss.initClass($Franca_Targa_TargaImage, $asm, {});
	ss.initEnum($Franca_Targa_TGAColorMapType, $asm, { none: 0, colorMapped: 1 });
	ss.initEnum($Franca_Targa_TGADataType, $asm, { none: 0, colorMapped: 1, RGB: 2, blackAndWhite: 3, rleCompressed: 8, rleColorMapped: 9, RLERGB: 10, rleBlackAndWhite: 11 });
	ss.initEnum($Franca_Targa_TGAScreenOrigin, $asm, { bottomLeft: 0, bottomRight: 1, topLeft: 2, topRight: 3 });
	ss.initClass($Franca_Text_WordWrap, $asm, {});
	ss.initClass($Franca_Text_WrappedString, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var c = ss.safeCast(obj, String);
			if (ss.isValue(c)) {
				return ss.referenceEquals(c, this.raw);
			}
			var b = ss.safeCast(obj, $Franca_Text_WrappedString);
			if (ss.isValue(b)) {
				return ss.referenceEquals(b.raw, this.raw);
			}
			return false;
		},
		equalsT: function(other) {
			if (ss.isNullOrUndefined(other)) {
				return false;
			}
			return ss.referenceEquals(this.raw, other);
		},
		equalsT: function(other) {
			if (ss.isNullOrUndefined(other)) {
				return false;
			}
			return ss.referenceEquals(other.raw, this.raw);
		},
		getHashCode: function() {
			return ss.getHashCode(this.raw);
		},
		toString: function() {
			return this.wrapped;
		},
		toStringInvariant: function() {
			return this.wrapped;
		}
	}, null, [ss.IEquatable, ss.IEquatable]);
	ss.initInterface($Franca_Vertices_$_VertexBufferDataPrototype, $asm, { $resize: null, get_$length: null, get_$byteLength: null, get_$byteOffset: null, $getData: null, $writeUInt8$1: null, $writeUInt8$2: null, $writeUInt8$3: null, $writeUInt8$4: null, $writeUInt8: null, $writeInt8$1: null, $writeInt8$2: null, $writeInt8$3: null, $writeInt8$4: null, $writeInt8: null, $writeUInt16$1: null, $writeUInt16$2: null, $writeUInt16$3: null, $writeUInt16$4: null, $writeUInt16: null, $writeInt16$1: null, $writeInt16$2: null, $writeInt16$3: null, $writeInt16$4: null, $writeInt16: null, $writeUInt32: null, $writeUInt32$2: null, $writeUInt32$3: null, $writeUInt32$4: null, $writeUInt32$1: null, $writeInt32: null, $writeInt32$2: null, $writeInt32$3: null, $writeInt32$4: null, $writeInt32$1: null, $writeSingle: null, $writeSingle$2: null, $writeSingle$3: null, $writeSingle$4: null, $writeSingle$1: null });
	ss.initEnum($Franca_Vertices_Component, $asm, { byte$1: 5121, sByte: 5120, short$1: 5122, uShort: 5123, int$1: 5124, uInt: 5125, float$1: 5126 });
	ss.initClass($Franca_Vertices_IndexBufferData, $asm, {
		get_byteOffset: function() {
			return ((this.type === 0) ? (this.offset * 2) : (this.offset * 4));
		},
		get_maxVertices: function() {
			return ((this.type === 0) ? 65535 : 2147483647);
		},
		get_byteLength: function() {
			return ((this.type === 0) ? (this.shorts.get_length() * 2) : (this.ints.get_length() * 4));
		},
		get_length: function() {
			return ((this.type === 0) ? this.shorts.get_length() : this.ints.get_length());
		},
		get_data: function() {
			return ((this.type === 0) ? this.shorts : this.ints);
		},
		resize: function(size) {
			if (this.type === 1) {
				if (size < this.ints.get_length()) {
					throw new ss.NotImplementedException('Cannot size down IndexBufferData');
				}
				var oldInts = this.ints;
				this.ints = new Franca.Collections.UIntArray.$ctor2(size);
				this.ints.set$4(oldInts);
			}
			else {
				if (size < this.shorts.get_length()) {
					throw new ss.NotImplementedException('Cannot size down IndexBufferData');
				}
				var oldShorts = this.shorts;
				this.shorts = new Franca.Collections.UShortArray.$ctor2(size);
				this.shorts.set$4(oldShorts);
			}
		},
		write$1: function(values) {
			if (this.type === 0) {
				this.$writeAsShorts(values);
			}
			else {
				this.$writeAsInts(values);
			}
		},
		write: function(v0) {
			if (this.type === 0) {
				this.write$2(v0);
			}
			else {
				this.write$4(v0);
			}
		},
		write$6: function(v0, v1) {
			if (this.type === 0) {
				this.write$7(v0, v1);
			}
			else {
				this.write$8(v0, v1);
			}
		},
		write$9: function(v0, v1, v2) {
			if (this.type === 0) {
				this.write$a(v0, v1, v2);
			}
			else {
				this.write$b(v0, v1, v2);
			}
		},
		write$c: function(v0, v1, v2, v3) {
			if (this.type === 0) {
				this.write$d(v0, v1, v2, v3);
			}
			else {
				this.write$e(v0, v1, v2, v3);
			}
		},
		write$f: function(v0, v1, v2, v3, v4) {
			if (this.type === 0) {
				this.write$g(v0, v1, v2, v3, v4);
			}
			else {
				this.write$h(v0, v1, v2, v3, v4);
			}
		},
		write$i: function(v0, v1, v2, v3, v4, v5) {
			if (this.type === 0) {
				this.write$j(v0, v1, v2, v3, v4, v5);
			}
			else {
				this.write$k(v0, v1, v2, v3, v4, v5);
			}
		},
		write$l: function(v0, v1, v2, v3, v4, v5, v6) {
			if (this.type === 0) {
				this.write$m(v0, v1, v2, v3, v4, v5, v6);
			}
			else {
				this.write$n(v0, v1, v2, v3, v4, v5, v6);
			}
		},
		write$o: function(v0, v1, v2, v3, v4, v5, v6, v7) {
			if (this.type === 0) {
				this.write$p(v0, v1, v2, v3, v4, v5, v6, v7);
			}
			else {
				this.write$q(v0, v1, v2, v3, v4, v5, v6, v7);
			}
		},
		write$r: function(v0, v1, v2, v3, v4, v5, v6, v7, v8) {
			if (this.type === 0) {
				this.write$s(v0, v1, v2, v3, v4, v5, v6, v7, v8);
			}
			else {
				this.write$t(v0, v1, v2, v3, v4, v5, v6, v7, v8);
			}
		},
		write$u: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
			if (this.type === 0) {
				this.write$v(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
			}
			else {
				this.write$w(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
			}
		},
		write$x: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) {
			if (this.type === 0) {
				this.write$y(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
			}
			else {
				this.write$z(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
			}
		},
		write$A: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) {
			if (this.type === 0) {
				this.write$B(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
			}
			else {
				this.write$C(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
			}
		},
		write$D: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) {
			if (this.type === 0) {
				this.write$E(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
			}
			else {
				this.write$F(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
			}
		},
		write$G: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13) {
			if (this.type === 0) {
				this.write$H(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
			}
			else {
				this.write$I(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
			}
		},
		write$J: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) {
			if (this.type === 0) {
				this.write$K(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
			}
			else {
				this.write$L(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
			}
		},
		write$M: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
			if (this.type === 0) {
				this.write$N(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
			}
			else {
				this.write$O(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
			}
		},
		write$3: function(values) {
			if (this.type === 1) {
				this.$writeAsInts$1(values);
				return;
			}
			for (var i = 0; i < values.length; i++, this.offset++) {
				this.shorts.set_item(this.offset, values[i]);
			}
		},
		$writeAsShorts$1: function(values) {
			for (var i = 0; i < values.length; i++, this.offset++) {
				this.shorts.set_item(this.offset, values[i]);
			}
		},
		$writeAsShorts: function(values) {
			for (var i = 0; i < values.length; i++, this.offset++) {
				this.shorts.set_item(this.offset, values[i]);
			}
		},
		write$2: function(v0) {
			if (this.type === 1) {
				this.write$4(v0);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
		},
		write$7: function(v0, v1) {
			if (this.type === 1) {
				this.write$8(v0, v1);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
		},
		write$a: function(v0, v1, v2) {
			if (this.type === 1) {
				this.write$b(v0, v1, v2);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
		},
		write$d: function(v0, v1, v2, v3) {
			if (this.type === 1) {
				this.write$e(v0, v1, v2, v3);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
		},
		write$g: function(v0, v1, v2, v3, v4) {
			if (this.type === 1) {
				this.write$h(v0, v1, v2, v3, v4);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
		},
		write$j: function(v0, v1, v2, v3, v4, v5) {
			if (this.type === 1) {
				this.write$k(v0, v1, v2, v3, v4, v5);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
			this.shorts.set_item(this.offset, v5);
			this.offset++;
		},
		write$m: function(v0, v1, v2, v3, v4, v5, v6) {
			if (this.type === 1) {
				this.write$n(v0, v1, v2, v3, v4, v5, v6);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
			this.shorts.set_item(this.offset, v5);
			this.offset++;
			this.shorts.set_item(this.offset, v6);
			this.offset++;
		},
		write$p: function(v0, v1, v2, v3, v4, v5, v6, v7) {
			if (this.type === 1) {
				this.write$q(v0, v1, v2, v3, v4, v5, v6, v7);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
			this.shorts.set_item(this.offset, v5);
			this.offset++;
			this.shorts.set_item(this.offset, v6);
			this.offset++;
			this.shorts.set_item(this.offset, v7);
			this.offset++;
		},
		write$s: function(v0, v1, v2, v3, v4, v5, v6, v7, v8) {
			if (this.type === 1) {
				this.write$t(v0, v1, v2, v3, v4, v5, v6, v7, v8);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
			this.shorts.set_item(this.offset, v5);
			this.offset++;
			this.shorts.set_item(this.offset, v6);
			this.offset++;
			this.shorts.set_item(this.offset, v7);
			this.offset++;
			this.shorts.set_item(this.offset, v8);
			this.offset++;
		},
		write$v: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
			if (this.type === 1) {
				this.write$w(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
			this.shorts.set_item(this.offset, v5);
			this.offset++;
			this.shorts.set_item(this.offset, v6);
			this.offset++;
			this.shorts.set_item(this.offset, v7);
			this.offset++;
			this.shorts.set_item(this.offset, v8);
			this.offset++;
			this.shorts.set_item(this.offset, v9);
			this.offset++;
		},
		write$y: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) {
			if (this.type === 1) {
				this.write$z(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
			this.shorts.set_item(this.offset, v5);
			this.offset++;
			this.shorts.set_item(this.offset, v6);
			this.offset++;
			this.shorts.set_item(this.offset, v7);
			this.offset++;
			this.shorts.set_item(this.offset, v8);
			this.offset++;
			this.shorts.set_item(this.offset, v9);
			this.offset++;
			this.shorts.set_item(this.offset, v10);
			this.offset++;
		},
		write$B: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) {
			if (this.type === 1) {
				this.write$C(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
			this.shorts.set_item(this.offset, v5);
			this.offset++;
			this.shorts.set_item(this.offset, v6);
			this.offset++;
			this.shorts.set_item(this.offset, v7);
			this.offset++;
			this.shorts.set_item(this.offset, v8);
			this.offset++;
			this.shorts.set_item(this.offset, v9);
			this.offset++;
			this.shorts.set_item(this.offset, v10);
			this.offset++;
			this.shorts.set_item(this.offset, v11);
			this.offset++;
		},
		write$E: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) {
			if (this.type === 1) {
				this.write$F(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
			this.shorts.set_item(this.offset, v5);
			this.offset++;
			this.shorts.set_item(this.offset, v6);
			this.offset++;
			this.shorts.set_item(this.offset, v7);
			this.offset++;
			this.shorts.set_item(this.offset, v8);
			this.offset++;
			this.shorts.set_item(this.offset, v9);
			this.offset++;
			this.shorts.set_item(this.offset, v10);
			this.offset++;
			this.shorts.set_item(this.offset, v11);
			this.offset++;
			this.shorts.set_item(this.offset, v12);
			this.offset++;
		},
		write$H: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13) {
			if (this.type === 1) {
				this.write$I(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
			this.shorts.set_item(this.offset, v5);
			this.offset++;
			this.shorts.set_item(this.offset, v6);
			this.offset++;
			this.shorts.set_item(this.offset, v7);
			this.offset++;
			this.shorts.set_item(this.offset, v8);
			this.offset++;
			this.shorts.set_item(this.offset, v9);
			this.offset++;
			this.shorts.set_item(this.offset, v10);
			this.offset++;
			this.shorts.set_item(this.offset, v11);
			this.offset++;
			this.shorts.set_item(this.offset, v12);
			this.offset++;
			this.shorts.set_item(this.offset, v13);
			this.offset++;
		},
		write$K: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) {
			if (this.type === 1) {
				this.write$L(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
			this.shorts.set_item(this.offset, v5);
			this.offset++;
			this.shorts.set_item(this.offset, v6);
			this.offset++;
			this.shorts.set_item(this.offset, v7);
			this.offset++;
			this.shorts.set_item(this.offset, v8);
			this.offset++;
			this.shorts.set_item(this.offset, v9);
			this.offset++;
			this.shorts.set_item(this.offset, v10);
			this.offset++;
			this.shorts.set_item(this.offset, v11);
			this.offset++;
			this.shorts.set_item(this.offset, v12);
			this.offset++;
			this.shorts.set_item(this.offset, v13);
			this.offset++;
			this.shorts.set_item(this.offset, v14);
			this.offset++;
		},
		write$N: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
			if (this.type === 1) {
				this.write$O(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
				return;
			}
			this.shorts.set_item(this.offset, v0);
			this.offset++;
			this.shorts.set_item(this.offset, v1);
			this.offset++;
			this.shorts.set_item(this.offset, v2);
			this.offset++;
			this.shorts.set_item(this.offset, v3);
			this.offset++;
			this.shorts.set_item(this.offset, v4);
			this.offset++;
			this.shorts.set_item(this.offset, v5);
			this.offset++;
			this.shorts.set_item(this.offset, v6);
			this.offset++;
			this.shorts.set_item(this.offset, v7);
			this.offset++;
			this.shorts.set_item(this.offset, v8);
			this.offset++;
			this.shorts.set_item(this.offset, v9);
			this.offset++;
			this.shorts.set_item(this.offset, v10);
			this.offset++;
			this.shorts.set_item(this.offset, v11);
			this.offset++;
			this.shorts.set_item(this.offset, v12);
			this.offset++;
			this.shorts.set_item(this.offset, v13);
			this.offset++;
			this.shorts.set_item(this.offset, v14);
			this.offset++;
			this.shorts.set_item(this.offset, v15);
			this.offset++;
		},
		write$5: function(values) {
			if (this.type === 0) {
				this.$writeAsShorts$1(values);
				return;
			}
			for (var i = 0; i < values.length; i++, this.offset++) {
				this.ints.set_item(this.offset, values[i]);
			}
		},
		$writeAsInts$1: function(values) {
			for (var i = 0; i < values.length; i++, this.offset++) {
				this.ints.set_item(this.offset, values[i]);
			}
		},
		$writeAsInts: function(values) {
			for (var i = 0; i < values.length; i++, this.offset++) {
				this.ints.set_item(this.offset, values[i]);
			}
		},
		write$4: function(v0) {
			if (this.type === 0) {
				this.write$2(v0);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
		},
		write$8: function(v0, v1) {
			if (this.type === 0) {
				this.write$7(v0, v1);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
		},
		write$b: function(v0, v1, v2) {
			if (this.type === 0) {
				this.write$a(v0, v1, v2);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
		},
		write$e: function(v0, v1, v2, v3) {
			if (this.type === 0) {
				this.write$d(v0, v1, v2, v3);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
		},
		write$h: function(v0, v1, v2, v3, v4) {
			if (this.type === 0) {
				this.write$g(v0, v1, v2, v3, v4);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
		},
		write$k: function(v0, v1, v2, v3, v4, v5) {
			if (this.type === 0) {
				this.write$j(v0, v1, v2, v3, v4, v5);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
			this.ints.set_item(this.offset, v5);
			this.offset++;
		},
		write$n: function(v0, v1, v2, v3, v4, v5, v6) {
			if (this.type === 0) {
				this.write$m(v0, v1, v2, v3, v4, v5, v6);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
			this.ints.set_item(this.offset, v5);
			this.offset++;
			this.ints.set_item(this.offset, v6);
			this.offset++;
		},
		write$q: function(v0, v1, v2, v3, v4, v5, v6, v7) {
			if (this.type === 0) {
				this.write$p(v0, v1, v2, v3, v4, v5, v6, v7);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
			this.ints.set_item(this.offset, v5);
			this.offset++;
			this.ints.set_item(this.offset, v6);
			this.offset++;
			this.ints.set_item(this.offset, v7);
			this.offset++;
		},
		write$t: function(v0, v1, v2, v3, v4, v5, v6, v7, v8) {
			if (this.type === 0) {
				this.write$s(v0, v1, v2, v3, v4, v5, v6, v7, v8);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
			this.ints.set_item(this.offset, v5);
			this.offset++;
			this.ints.set_item(this.offset, v6);
			this.offset++;
			this.ints.set_item(this.offset, v7);
			this.offset++;
			this.ints.set_item(this.offset, v8);
			this.offset++;
		},
		write$w: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
			if (this.type === 0) {
				this.write$v(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
			this.ints.set_item(this.offset, v5);
			this.offset++;
			this.ints.set_item(this.offset, v6);
			this.offset++;
			this.ints.set_item(this.offset, v7);
			this.offset++;
			this.ints.set_item(this.offset, v8);
			this.offset++;
			this.ints.set_item(this.offset, v9);
			this.offset++;
		},
		write$z: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) {
			if (this.type === 0) {
				this.write$y(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
			this.ints.set_item(this.offset, v5);
			this.offset++;
			this.ints.set_item(this.offset, v6);
			this.offset++;
			this.ints.set_item(this.offset, v7);
			this.offset++;
			this.ints.set_item(this.offset, v8);
			this.offset++;
			this.ints.set_item(this.offset, v9);
			this.offset++;
			this.ints.set_item(this.offset, v10);
			this.offset++;
		},
		write$C: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) {
			if (this.type === 0) {
				this.write$B(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
			this.ints.set_item(this.offset, v5);
			this.offset++;
			this.ints.set_item(this.offset, v6);
			this.offset++;
			this.ints.set_item(this.offset, v7);
			this.offset++;
			this.ints.set_item(this.offset, v8);
			this.offset++;
			this.ints.set_item(this.offset, v9);
			this.offset++;
			this.ints.set_item(this.offset, v10);
			this.offset++;
			this.ints.set_item(this.offset, v11);
			this.offset++;
		},
		write$F: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) {
			if (this.type === 0) {
				this.write$E(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
			this.ints.set_item(this.offset, v5);
			this.offset++;
			this.ints.set_item(this.offset, v6);
			this.offset++;
			this.ints.set_item(this.offset, v7);
			this.offset++;
			this.ints.set_item(this.offset, v8);
			this.offset++;
			this.ints.set_item(this.offset, v9);
			this.offset++;
			this.ints.set_item(this.offset, v10);
			this.offset++;
			this.ints.set_item(this.offset, v11);
			this.offset++;
			this.ints.set_item(this.offset, v12);
			this.offset++;
		},
		write$I: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13) {
			if (this.type === 0) {
				this.write$H(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
			this.ints.set_item(this.offset, v5);
			this.offset++;
			this.ints.set_item(this.offset, v6);
			this.offset++;
			this.ints.set_item(this.offset, v7);
			this.offset++;
			this.ints.set_item(this.offset, v8);
			this.offset++;
			this.ints.set_item(this.offset, v9);
			this.offset++;
			this.ints.set_item(this.offset, v10);
			this.offset++;
			this.ints.set_item(this.offset, v11);
			this.offset++;
			this.ints.set_item(this.offset, v12);
			this.offset++;
			this.ints.set_item(this.offset, v13);
			this.offset++;
		},
		write$L: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) {
			if (this.type === 0) {
				this.write$K(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
			this.ints.set_item(this.offset, v5);
			this.offset++;
			this.ints.set_item(this.offset, v6);
			this.offset++;
			this.ints.set_item(this.offset, v7);
			this.offset++;
			this.ints.set_item(this.offset, v8);
			this.offset++;
			this.ints.set_item(this.offset, v9);
			this.offset++;
			this.ints.set_item(this.offset, v10);
			this.offset++;
			this.ints.set_item(this.offset, v11);
			this.offset++;
			this.ints.set_item(this.offset, v12);
			this.offset++;
			this.ints.set_item(this.offset, v13);
			this.offset++;
			this.ints.set_item(this.offset, v14);
			this.offset++;
		},
		write$O: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
			if (this.type === 0) {
				this.write$N(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
				return;
			}
			this.ints.set_item(this.offset, v0);
			this.offset++;
			this.ints.set_item(this.offset, v1);
			this.offset++;
			this.ints.set_item(this.offset, v2);
			this.offset++;
			this.ints.set_item(this.offset, v3);
			this.offset++;
			this.ints.set_item(this.offset, v4);
			this.offset++;
			this.ints.set_item(this.offset, v5);
			this.offset++;
			this.ints.set_item(this.offset, v6);
			this.offset++;
			this.ints.set_item(this.offset, v7);
			this.offset++;
			this.ints.set_item(this.offset, v8);
			this.offset++;
			this.ints.set_item(this.offset, v9);
			this.offset++;
			this.ints.set_item(this.offset, v10);
			this.offset++;
			this.ints.set_item(this.offset, v11);
			this.offset++;
			this.ints.set_item(this.offset, v12);
			this.offset++;
			this.ints.set_item(this.offset, v13);
			this.offset++;
			this.ints.set_item(this.offset, v14);
			this.offset++;
			this.ints.set_item(this.offset, v15);
			this.offset++;
		}
	});
	ss.initEnum($Franca_Vertices_IndexBufferType, $asm, { uInt16: 0, uInt32: 1 });
	ss.initClass($Franca_Vertices_QuadIndexBufferData, $asm, {}, $Franca_Vertices_IndexBufferData);
	ss.initClass($Franca_Vertices_VertexBufferData, $asm, {
		get_$byteOffset: function() {
			return this.offset * 4;
		},
		get_$length: function() {
			return this.$single.length;
		},
		get_$byteLength: function() {
			return this.$single.length * 4;
		},
		$resize: function(components) {
			if (components < this.$single.length) {
				throw new ss.NotImplementedException('Cannot size down VertexBufferData');
			}
			var oldData = this.$single;
			this.$single = new Float32Array(components);
			this.$single.set(oldData);
			this.$int32 = new Int32Array(this.$single.buffer);
			this.$uint32 = new Uint32Array(this.$single.buffer);
			this.$int16 = new Int16Array(this.$single.buffer);
			this.$uint16 = new Uint16Array(this.$single.buffer);
			this.$int8 = new Int8Array(this.$single.buffer);
			this.$uint8 = new Uint8Array(this.$single.buffer);
		},
		$getData: function() {
			return new Franca.Collections.ByteArray.$ctor1(this.$uint8);
		},
		$writeUInt8$1: function(v0, v1, v2, v3) {
			var index = this.offset * 4;
			this.$uint8[index] = v0;
			index++;
			this.$uint8[index] = v1;
			index++;
			this.$uint8[index] = v2;
			index++;
			this.$uint8[index] = v3;
			index++;
			this.offset++;
		},
		$writeUInt8$2: function(v0, v1, v2, v3, v4, v5, v6, v7) {
			var index = this.offset * 4;
			this.$uint8[index] = v0;
			index++;
			this.$uint8[index] = v1;
			index++;
			this.$uint8[index] = v2;
			index++;
			this.$uint8[index] = v3;
			index++;
			this.offset++;
			this.$uint8[index] = v4;
			index++;
			this.$uint8[index] = v5;
			index++;
			this.$uint8[index] = v6;
			index++;
			this.$uint8[index] = v7;
			index++;
			this.offset++;
		},
		$writeUInt8$3: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) {
			var index = this.offset * 4;
			this.$uint8[index] = v0;
			index++;
			this.$uint8[index] = v1;
			index++;
			this.$uint8[index] = v2;
			index++;
			this.$uint8[index] = v3;
			index++;
			this.offset++;
			this.$uint8[index] = v4;
			index++;
			this.$uint8[index] = v5;
			index++;
			this.$uint8[index] = v6;
			index++;
			this.$uint8[index] = v7;
			index++;
			this.offset++;
			this.$uint8[index] = v8;
			index++;
			this.$uint8[index] = v9;
			index++;
			this.$uint8[index] = v10;
			index++;
			this.$uint8[index] = v11;
			index++;
			this.offset++;
		},
		$writeUInt8$4: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
			var index = this.offset * 4;
			this.$uint8[index] = v0;
			index++;
			this.$uint8[index] = v1;
			index++;
			this.$uint8[index] = v2;
			index++;
			this.$uint8[index] = v3;
			index++;
			this.offset++;
			this.$uint8[index] = v4;
			index++;
			this.$uint8[index] = v5;
			index++;
			this.$uint8[index] = v6;
			index++;
			this.$uint8[index] = v7;
			index++;
			this.offset++;
			this.$uint8[index] = v8;
			index++;
			this.$uint8[index] = v9;
			index++;
			this.$uint8[index] = v10;
			index++;
			this.$uint8[index] = v11;
			index++;
			this.offset++;
			this.$uint8[index] = v12;
			index++;
			this.$uint8[index] = v13;
			index++;
			this.$uint8[index] = v14;
			index++;
			this.$uint8[index] = v15;
			index++;
			this.offset++;
		},
		$writeUInt8: function(values) {
			var valuesComponents = ss.Int32.div(values.length, 4);
			var offsetIncr = ((values.length % 4 === 0) ? valuesComponents : (valuesComponents + 1));
			var index = this.offset * 4;
			for (var i = 0; i < values.length; i++, index++) {
				this.$uint8[index] = values[i];
			}
			this.offset += offsetIncr;
		},
		$writeInt8$1: function(v0, v1, v2, v3) {
			var index = this.offset * 4;
			this.$int8[index] = v0;
			index++;
			this.$int8[index] = v1;
			index++;
			this.$int8[index] = v2;
			index++;
			this.$int8[index] = v3;
			index++;
			this.offset++;
		},
		$writeInt8$2: function(v0, v1, v2, v3, v4, v5, v6, v7) {
			var index = this.offset * 4;
			this.$int8[index] = v0;
			index++;
			this.$int8[index] = v1;
			index++;
			this.$int8[index] = v2;
			index++;
			this.$int8[index] = v3;
			index++;
			this.offset++;
			this.$int8[index] = v4;
			index++;
			this.$int8[index] = v5;
			index++;
			this.$int8[index] = v6;
			index++;
			this.$int8[index] = v7;
			index++;
			this.offset++;
		},
		$writeInt8$3: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) {
			var index = this.offset * 4;
			this.$int8[index] = v0;
			index++;
			this.$int8[index] = v1;
			index++;
			this.$int8[index] = v2;
			index++;
			this.$int8[index] = v3;
			index++;
			this.offset++;
			this.$int8[index] = v4;
			index++;
			this.$int8[index] = v5;
			index++;
			this.$int8[index] = v6;
			index++;
			this.$int8[index] = v7;
			index++;
			this.offset++;
			this.$int8[index] = v8;
			index++;
			this.$int8[index] = v9;
			index++;
			this.$int8[index] = v10;
			index++;
			this.$int8[index] = v11;
			index++;
			this.offset++;
		},
		$writeInt8$4: function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
			var index = this.offset * 4;
			this.$int8[index] = v0;
			index++;
			this.$int8[index] = v1;
			index++;
			this.$int8[index] = v2;
			index++;
			this.$int8[index] = v3;
			index++;
			this.offset++;
			this.$int8[index] = v4;
			index++;
			this.$int8[index] = v5;
			index++;
			this.$int8[index] = v6;
			index++;
			this.$int8[index] = v7;
			index++;
			this.offset++;
			this.$int8[index] = v8;
			index++;
			this.$int8[index] = v9;
			index++;
			this.$int8[index] = v10;
			index++;
			this.$int8[index] = v11;
			index++;
			this.offset++;
			this.$int8[index] = v12;
			index++;
			this.$int8[index] = v13;
			index++;
			this.$int8[index] = v14;
			index++;
			this.$int8[index] = v15;
			index++;
			this.offset++;
		},
		$writeInt8: function(values) {
			var valuesComponents = ss.Int32.div(values.length, 4);
			var offsetIncr = ((values.length % 4 === 0) ? valuesComponents : (valuesComponents + 1));
			var index = this.offset * 4;
			for (var i = 0; i < values.length; i++, index++) {
				this.$int8[index] = values[i];
			}
			this.offset += offsetIncr;
		},
		$writeUInt16$1: function(v0, v1) {
			var index = this.offset * 2;
			this.$uint16[index] = v0;
			index++;
			this.$uint16[index] = v1;
			index++;
			this.offset++;
		},
		$writeUInt16$2: function(v0, v1, v2, v3) {
			var index = this.offset * 2;
			this.$uint16[index] = v0;
			index++;
			this.$uint16[index] = v1;
			index++;
			this.offset++;
			this.$uint16[index] = v2;
			index++;
			this.$uint16[index] = v3;
			index++;
			this.offset++;
		},
		$writeUInt16$3: function(v0, v1, v2, v3, v4, v5) {
			var index = this.offset * 2;
			this.$uint16[index] = v0;
			index++;
			this.$uint16[index] = v1;
			index++;
			this.offset++;
			this.$uint16[index] = v2;
			index++;
			this.$uint16[index] = v3;
			index++;
			this.offset++;
			this.$uint16[index] = v4;
			index++;
			this.$uint16[index] = v5;
			index++;
			this.offset++;
		},
		$writeUInt16$4: function(v0, v1, v2, v3, v4, v5, v6, v7) {
			var index = this.offset * 2;
			this.$uint16[index] = v0;
			index++;
			this.$uint16[index] = v1;
			index++;
			this.offset++;
			this.$uint16[index] = v2;
			index++;
			this.$uint16[index] = v3;
			index++;
			this.offset++;
			this.$uint16[index] = v4;
			index++;
			this.$uint16[index] = v5;
			index++;
			this.offset++;
			this.$uint16[index] = v6;
			index++;
			this.$uint16[index] = v7;
			index++;
			this.offset++;
		},
		$writeUInt16: function(values) {
			var valuesComponents = ss.Int32.div(values.length, 2);
			var offsetIncr = ((values.length % 2 === 0) ? valuesComponents : (valuesComponents + 1));
			var index = this.offset * 2;
			for (var i = 0; i < values.length; i++, index++) {
				this.$uint16[index] = values[i];
			}
			this.offset += offsetIncr;
		},
		$writeInt16$1: function(v0, v1) {
			var index = this.offset * 2;
			this.$int16[index] = v0;
			index++;
			this.$int16[index] = v1;
			index++;
			this.offset++;
		},
		$writeInt16$2: function(v0, v1, v2, v3) {
			var index = this.offset * 2;
			this.$int16[index] = v0;
			index++;
			this.$int16[index] = v1;
			index++;
			this.offset++;
			this.$int16[index] = v2;
			index++;
			this.$int16[index] = v3;
			index++;
			this.offset++;
		},
		$writeInt16$3: function(v0, v1, v2, v3, v4, v5) {
			var index = this.offset * 2;
			this.$int16[index] = v0;
			index++;
			this.$int16[index] = v1;
			index++;
			this.offset++;
			this.$int16[index] = v2;
			index++;
			this.$int16[index] = v3;
			index++;
			this.offset++;
			this.$int16[index] = v4;
			index++;
			this.$int16[index] = v5;
			index++;
			this.offset++;
		},
		$writeInt16$4: function(v0, v1, v2, v3, v4, v5, v6, v7) {
			var index = this.offset * 2;
			this.$int16[index] = v0;
			index++;
			this.$int16[index] = v1;
			index++;
			this.offset++;
			this.$int16[index] = v2;
			index++;
			this.$int16[index] = v3;
			index++;
			this.offset++;
			this.$int16[index] = v4;
			index++;
			this.$int16[index] = v5;
			index++;
			this.offset++;
			this.$int16[index] = v6;
			index++;
			this.$int16[index] = v7;
			index++;
			this.offset++;
		},
		$writeInt16: function(values) {
			var valuesComponents = ss.Int32.div(values.length, 2);
			var offsetIncr = ((values.length % 2 === 0) ? valuesComponents : (valuesComponents + 1));
			var index = this.offset * 2;
			for (var i = 0; i < values.length; i++, index++) {
				this.$int16[index] = values[i];
			}
			this.offset += offsetIncr;
		},
		$writeUInt32: function(v0) {
			this.$uint32[this.offset] = v0;
			this.offset++;
		},
		$writeUInt32$2: function(v0, v1) {
			this.$uint32[this.offset] = v0;
			this.offset++;
			this.$uint32[this.offset] = v1;
			this.offset++;
		},
		$writeUInt32$3: function(v0, v1, v2) {
			this.$uint32[this.offset] = v0;
			this.offset++;
			this.$uint32[this.offset] = v1;
			this.offset++;
			this.$uint32[this.offset] = v2;
			this.offset++;
		},
		$writeUInt32$4: function(v0, v1, v2, v3) {
			this.$uint32[this.offset] = v0;
			this.offset++;
			this.$uint32[this.offset] = v1;
			this.offset++;
			this.$uint32[this.offset] = v2;
			this.offset++;
			this.$uint32[this.offset] = v3;
			this.offset++;
		},
		$writeUInt32$1: function(values) {
			for (var i = 0; i < values.length; i++, this.offset++) {
				this.$uint32[this.offset] = values[i];
			}
		},
		$writeInt32: function(v0) {
			this.$int32[this.offset] = v0;
			this.offset++;
		},
		$writeInt32$2: function(v0, v1) {
			this.$int32[this.offset] = v0;
			this.offset++;
			this.$int32[this.offset] = v1;
			this.offset++;
		},
		$writeInt32$3: function(v0, v1, v2) {
			this.$int32[this.offset] = v0;
			this.offset++;
			this.$int32[this.offset] = v1;
			this.offset++;
			this.$int32[this.offset] = v2;
			this.offset++;
		},
		$writeInt32$4: function(v0, v1, v2, v3) {
			this.$int32[this.offset] = v0;
			this.offset++;
			this.$int32[this.offset] = v1;
			this.offset++;
			this.$int32[this.offset] = v2;
			this.offset++;
			this.$int32[this.offset] = v3;
			this.offset++;
		},
		$writeInt32$1: function(values) {
			for (var i = 0; i < values.length; i++, this.offset++) {
				this.$int32[this.offset] = values[i];
			}
		},
		$writeSingle: function(v0) {
			this.$single[this.offset] = v0;
			this.offset++;
		},
		$writeSingle$2: function(v0, v1) {
			this.$single[this.offset] = v0;
			this.offset++;
			this.$single[this.offset] = v1;
			this.offset++;
		},
		$writeSingle$3: function(v0, v1, v2) {
			this.$single[this.offset] = v0;
			this.offset++;
			this.$single[this.offset] = v1;
			this.offset++;
			this.$single[this.offset] = v2;
			this.offset++;
		},
		$writeSingle$4: function(v0, v1, v2, v3) {
			this.$single[this.offset] = v0;
			this.offset++;
			this.$single[this.offset] = v1;
			this.offset++;
			this.$single[this.offset] = v2;
			this.offset++;
			this.$single[this.offset] = v3;
			this.offset++;
		},
		$writeSingle$1: function(values) {
			for (var i = 0; i < values.length; i++, this.offset++) {
				this.$single[this.offset] = values[i];
			}
		}
	}, null, [$Franca_Vertices_$_VertexBufferDataPrototype]);
	ss.initClass($Franca_Vertices_VertexElement, $asm, {});
	ss.initInterface($Franca_Video_$IVideoContextProvider, $asm, { $update: null }, [ss.IDisposable]);
	ss.initInterface($Franca_Video_$IVideoPlayerProvider, $asm, { $play: null, $stop: null, $createBatch: null, $beginDrawTexture: null, $endDrawTexture: null, get_$width: null, get_$height: null, get_$state: null, get_$volume: null, set_$volume: null, get_$texture: null }, [ss.IDisposable]);
	ss.initClass($Franca_Video_$JSVideoContext, $asm, {
		$update: function() {
			for (var i = this.$videos.length - 1; i >= 0; i--) {
				var video = this.$videos[i];
				video.$update();
			}
		},
		$add: function(video) {
			if (!ss.contains(this.$videos, video)) {
				this.$videos.push(video);
			}
		},
		$remove: function(video) {
			ss.remove(this.$videos, video);
		},
		dispose: function() {
			this.$dispose(true);
			System.GC.suppressFinalize(this);
		},
		$dispose: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				// stop and dispose videos
				var videos = Enumerable.from(this.$videos).toArray();
				for (var i = 0; i < videos.length; i++) {
					try {
						videos[i].$stop();
					}
					catch ($t1) {
					}
				}
				for (var i1 = 0; i1 < videos.length; i1++) {
					try {
						videos[i1].dispose();
					}
					catch ($t2) {
					}
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		}
	}, null, [ss.IDisposable, $Franca_Video_$IVideoContextProvider]);
	ss.initClass($Franca_Video_$JSVideoPlayer, $asm, {
		$onPlay: function() {
			this.$playing = true;
		},
		$onTimeUpdate: function() {
			this.$timeUpdate = true;
		},
		$play: function() {
			if (this.get_$state() !== 1) {
				this.$video.volume = this.$volume * this.$parent.get_context().get_masterVolume();
				this.$video.currentTime = 0;
				this.$video.play();
				this.$state = 1;
				this.get_$jsContext().$add(this);
			}
		},
		$stop: function() {
			if (!this.$video.ended) {
				this.$video.pause();
			}
			this.$playing = false;
			this.$timeUpdate = false;
			this.$video.currentTime = 0;
			this.$state = 0;
			this.get_$jsContext().$remove(this);
		},
		$update: function() {
			if (this.$video.ended) {
				this.$stop();
				return;
			}
			if (!this.$playing || !this.$timeUpdate) {
				return;
			}
			this.$video.volume = this.$volume * this.$parent.get_context().get_masterVolume();
			if (this.$texture.get_width() !== this.$video.videoWidth || this.$texture.get_height() !== this.$video.videoHeight) {
				this.$texture.dispose();
				this.$texture = new $Franca_Texture.$ctor2(this.$video.videoWidth, this.$video.videoHeight, false);
			}
			if (ss.isNullOrUndefined($Franca_GraphicsDevice.get_current())) {
				throw new $Franca_GraphicsContextMissingException();
			}
			var context = ss.cast($Franca_GraphicsDevice.get_current().get_$graphicsDeviceProvider(), $Franca_$JSGraphicsDevice).get_$context();
			$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, this.$texture.get_$glTexture());
			context.texImage2D(context.TEXTURE_2D, 0, context.RGBA, context.RGBA, context.UNSIGNED_BYTE, this.$video);
			$Franca_OpenGL_WebGL_GL.bindTexture($Franca_OpenGL_WebGL_Constants.texturE_2D, null);
		},
		$createBatch: function() {
			return null;
		},
		$beginDrawTexture: function(batch, rect, color) {
			batch.begin(0, 3, 12, null);
		},
		$endDrawTexture: function(batch) {
			batch.end();
		},
		dispose: function() {
			this.$dispose(true);
			System.GC.suppressFinalize(this);
		},
		$dispose: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				this.$stop();
				if (ss.isValue(this.$video)) {
					this.$video.removeEventListener('playing', ss.mkdel(this, this.$onPlay), true);
					this.$video.removeEventListener('timeupdate', ss.mkdel(this, this.$onTimeUpdate), true);
					this.$video = null;
				}
				this.$texture.dispose();
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_$context: function() {
			return this.$parent.get_context();
		},
		get_$jsContext: function() {
			return ss.cast(this.$parent.get_context().get_$provider(), $Franca_Video_$JSVideoContext);
		},
		get_$width: function() {
			return this.$texture.get_width();
		},
		get_$height: function() {
			return this.$texture.get_height();
		},
		get_$volume: function() {
			return this.$volume;
		},
		set_$volume: function(value) {
			this.$volume = Franca.Calc.clamp$3(value, 0, 1);
		},
		get_$state: function() {
			return this.$state;
		},
		get_$texture: function() {
			return this.$texture;
		},
		get_$graphicsDevice: function() {
			return this.$parent.get_context().get_graphicsDevice();
		}
	}, null, [ss.IDisposable, $Franca_Video_$IVideoPlayerProvider]);
	ss.initClass($Franca_Video_VideoContext, $asm, {
		update: function() {
			this.$provider.$update();
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				if (ss.isValue(this.$provider)) {
					this.$provider.dispose();
				}
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_$provider: function() {
			return this.$provider;
		},
		get_graphicsDevice: function() {
			return this.$graphicsDevice;
		},
		get_masterVolume: function() {
			return this.$masterVolume;
		},
		set_masterVolume: function(value) {
			this.$masterVolume = Franca.Calc.clamp$3(value, 0, 1);
		}
	}, null, [ss.IDisposable]);
	ss.initClass($Franca_Video_VideoPlayer, $asm, {
		play: function() {
			this.$provider.$play();
		},
		stop: function() {
			this.$provider.$stop();
		},
		draw$1: function(pos, color) {
			this.draw(new Franca.RectangleF.$ctor2(Franca.Vector2.op_Explicit$3(pos), Franca.Size.op_Implicit(new Franca.Size.$ctor2(this.get_width(), this.get_height()))), color);
		},
		draw: function(dest, color) {
			if (ss.isValue(this.get_texture())) {
				this.$provider.$beginDrawTexture(this.$batch, dest, color);
				this.$batch.draw$2(this.get_texture(), dest, $Franca_HdrColors.op_Implicit(color), 0, 0);
				this.$provider.$endDrawTexture(this.$batch);
			}
		},
		drawCentered: function(rect, color, backgroundColor) {
			this.$rectBatch.begin(0, 3, 12, null);
			if (backgroundColor.get_a() > 0) {
				this.$rectBatch.drawRectangle(rect, $Franca_HdrColors.op_Implicit(backgroundColor), 0);
			}
			this.$rectBatch.end();
			var width = rect.size.width;
			var height = this.get_height() / this.get_width() * width;
			if (height > rect.size.height) {
				height = rect.size.height;
				width = this.get_width() / this.get_height() * height;
			}
			var dest = new Franca.RectangleF.$ctor3(rect.location.x + Franca.Calc.center(rect.size.width, width, 1), rect.location.y + Franca.Calc.center(rect.size.height, height, 0), width, height);
			this.$provider.$beginDrawTexture(this.$batch, dest, color);
			this.$batch.draw$2(this.get_texture(), dest, $Franca_HdrColors.op_Implicit(color), 0, 0);
			this.$provider.$endDrawTexture(this.$batch);
		},
		dispose: function() {
			this.dispose$1(true);
			System.GC.suppressFinalize(this);
		},
		dispose$1: function(disposing) {
			if (this.$disposed) {
				return;
			}
			if (disposing) {
				// Free any other managed objects here.
				this.$provider.dispose();
				this.$batch.dispose();
				this.$rectBatch.dispose();
			}
			// Free any unmanaged objects here.
			this.$disposed = true;
		},
		get_context: function() {
			return this.$context;
		},
		get_state: function() {
			return this.$provider.get_$state();
		},
		get_width: function() {
			return this.$provider.get_$width();
		},
		get_height: function() {
			return this.$provider.get_$height();
		},
		get_volume: function() {
			return this.$provider.get_$volume();
		},
		set_volume: function(value) {
			this.$provider.set_$volume(value);
		},
		get_texture: function() {
			return this.$provider.get_$texture();
		},
		get_$provider: function() {
			return this.$provider;
		},
		get_graphicsDevice: function() {
			return this.$context.get_graphicsDevice();
		},
		get_location: function() {
			return this.$location;
		}
	}, null, [ss.IDisposable]);
	ss.initEnum($Franca_Video_VideoState, $asm, { stopped: 0, playing: 1 });
	ss.setMetadata($Franca_ButtonState, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_Canvas, { attr: [new Franca.LoadableFromAttribute(0)], members: [{ name: '.ctor', type: 1, params: [$Franca_Canvas] }] });
	ss.setMetadata($Franca_ClearOptions, { enumFlags: true });
	ss.setMetadata($Franca_Colors, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [Franca.Color], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [Franca.Serialization.Streaming.IJsonReader], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [ss.Int32, Boolean], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [ss.Int32, Boolean], sname: '$ctor4' }, { name: '.ctor', type: 1, params: [Franca.Color, Franca.Color, Franca.Color, Franca.Color], sname: '$ctor5' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, ss.Int32, ss.Int32, Boolean], sname: '$ctor6' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, ss.Int32, ss.Int32, Boolean], sname: '$ctor7' }, { name: 'FromJson', type: 8, sname: 'fromJson', returnType: $Franca_Colors, params: [Franca.JsonValue] }, { name: 'GetEnumerator', type: 8, sname: 'getEnumerator', returnType: ss.IEnumerator, params: [] }, { name: 'Premultiply', type: 8, sname: 'premultiply', returnType: $Franca_Colors, params: [] }, { name: 'ToJson', type: 8, sname: 'toJson', returnType: Franca.JsonValue, params: [] }, { name: 'ToString', type: 8, sname: 'toString', returnType: String, params: [] }, { name: 'WriteJson', type: 8, sname: 'writeJson', returnType: Object, params: [Franca.Serialization.Streaming.IJsonWriter] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit', returnType: $Franca_Colors, params: [Franca.Color] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit$1', returnType: $Franca_HdrColors, params: [$Franca_Colors] }, { name: 'BottomLeft', type: 16, returnType: Franca.Color, getter: {
		name: 'get_BottomLeft',
		type: 8,
		def: function() {
			return this.bottomLeft;
		},
		returnType: Franca.Color,
		params: []
	} }, { name: 'BottomRight', type: 16, returnType: Franca.Color, getter: {
		name: 'get_BottomRight',
		type: 8,
		def: function() {
			return this.bottomRight;
		},
		returnType: Franca.Color,
		params: []
	} }, { name: 'Item', type: 16, returnType: Franca.Color, params: [ss.Int32], getter: { name: 'get_Item', type: 8, sname: 'get_item', returnType: Franca.Color, params: [ss.Int32] } }, { name: 'TopLeft', type: 16, returnType: Franca.Color, getter: {
		name: 'get_TopLeft',
		type: 8,
		def: function() {
			return this.topLeft;
		},
		returnType: Franca.Color,
		params: []
	} }, { name: 'TopRight', type: 16, returnType: Franca.Color, getter: {
		name: 'get_TopRight',
		type: 8,
		def: function() {
			return this.topRight;
		},
		returnType: Franca.Color,
		params: []
	} }] });
	ss.setMetadata($Franca_ContentManager, { members: [{ name: '.ctor', type: 1, params: [$Franca_GraphicsDevice, String] }, { name: 'Dispose', type: 8, sname: 'dispose', returnType: Object, params: [] }, { name: 'Dispose', type: 8, sname: 'dispose$1', returnType: Object, params: [Boolean] }, { name: 'FinalizeContent', type: 8, sname: 'finalizeContent', returnType: Object, params: [] }, { name: 'GetAssetName', type: 8, sname: 'getAssetName', returnType: String, params: [String] }, { name: 'GetAssetPath', type: 8, tpcount: 1, sname: 'getAssetPath', returnType: String, params: [String] }, { name: 'GetFont', type: 8, sname: 'getFont', returnType: $Franca_Gui_MultiFont, params: [String] }, { name: 'GetTypePath', type: 8, tpcount: 1, sname: 'getTypePath', returnType: String, params: [] }, { name: 'HasAsset', type: 8, tpcount: 1, sname: 'hasAsset', returnType: Boolean, params: [String] }, { name: 'Load', type: 8, tpcount: 1, sname: 'load', returnType: Object, params: [String, Array] }, { name: 'Load', type: 8, tpcount: 1, sname: 'load$1', returnType: Object, params: [String, Function, Array] }, { name: 'LoadBase64Texture', type: 8, sname: 'loadBase64Texture', returnType: $Franca_Texture, params: [Function, Boolean, Boolean] }, { name: 'LoadBase64Texture', type: 8, sname: 'loadBase64Texture$1', returnType: $Franca_Texture, params: [String, String, Boolean, Boolean] }, { name: 'LoadFont', type: 8, sname: 'loadFont', returnType: $Franca_SpriteFont, params: [String, $Franca_SpriteFontManager, Number] }, { name: 'LoadFont', type: 8, sname: 'loadFont$1', returnType: $Franca_SpriteFont, params: [String, Function, $Franca_SpriteFontManager, Number] }, { name: 'LoadLanguage', type: 8, sname: 'loadLanguage', returnType: $Franca_Localization_GameLanguage, params: [String, String, Boolean] }, { name: 'LoadLanguage', type: 8, sname: 'loadLanguage$1', returnType: $Franca_Localization_GameLanguage, params: [String, Function, String, Boolean] }, { name: 'LoadMusic', type: 8, sname: 'loadMusic', returnType: $Franca_Audio_Music, params: [String, $Franca_Audio_IAudioManager] }, { name: 'LoadMusic', type: 8, sname: 'loadMusic$1', returnType: $Franca_Audio_Music, params: [String, Function, $Franca_Audio_IAudioManager] }, { name: 'LoadPixelFont', type: 8, sname: 'loadPixelFont', returnType: $Franca_PixelFont, params: [String, String, Boolean, Boolean, Boolean] }, { name: 'LoadPixelFont', type: 8, sname: 'loadPixelFont$1', returnType: $Franca_PixelFont, params: [String, String, Function, Boolean, Boolean, Boolean] }, { name: 'LoadShader', type: 8, sname: 'loadShader', returnType: $Franca_Shader, params: [String, Array] }, { name: 'LoadShader', type: 8, sname: 'loadShader$1', returnType: $Franca_Shader, params: [String, Function, Array] }, { name: 'LoadSound', type: 8, sname: 'loadSound', returnType: $Franca_Audio_Sound, params: [String, $Franca_Audio_IAudioManager] }, { name: 'LoadSound', type: 8, sname: 'loadSound$1', returnType: $Franca_Audio_Sound, params: [String, Function, $Franca_Audio_IAudioManager] }, { name: 'LoadTexture', type: 8, sname: 'loadTexture', returnType: $Franca_Texture, params: [String, Boolean, Boolean, Boolean] }, { name: 'LoadTexture', type: 8, sname: 'loadTexture$1', returnType: $Franca_Texture, params: [String, Function, Boolean, Boolean, Boolean] }, { name: 'LoadTextureGif', type: 8, sname: 'loadTextureGif', returnType: $Franca_Gif_TextureGif, params: [String, Boolean, Boolean, Boolean] }, { name: 'LoadTextureGif', type: 8, sname: 'loadTextureGif$1', returnType: $Franca_Gif_TextureGif, params: [String, Function, Boolean, Boolean, Boolean] }, { name: 'RegisterFont', type: 8, sname: 'registerFont', returnType: Object, params: [$Franca_Gui_MultiFont, String] }, { name: 'SetTypePath', type: 8, tpcount: 1, sname: 'setTypePath', returnType: Object, params: [String] }, { name: 'Unload', type: 8, sname: 'unload', returnType: Object, params: [$Franca_IAsset, Boolean] }, { name: 'Unload', type: 8, sname: 'unload$1', returnType: Object, params: [String, Boolean] }, { name: 'UnloadAll', type: 8, sname: 'unloadAll', returnType: Object, params: [Boolean] }, { name: 'ContentRoot', type: 16, returnType: String, getter: { name: 'get_ContentRoot', type: 8, sname: 'get_contentRoot', returnType: String, params: [] } }, { name: 'DefaultFont', type: 16, returnType: $Franca_Gui_MultiFont, getter: { name: 'get_DefaultFont', type: 8, sname: 'get_defaultFont', returnType: $Franca_Gui_MultiFont, params: [] }, setter: { name: 'set_DefaultFont', type: 8, sname: 'set_defaultFont', returnType: Object, params: [$Franca_Gui_MultiFont] } }, { name: 'GraphicsDevice', type: 16, returnType: $Franca_GraphicsDevice, getter: { name: 'get_GraphicsDevice', type: 8, sname: 'get_graphicsDevice', returnType: $Franca_GraphicsDevice, params: [] } }, { name: 'IsContentReady', type: 16, returnType: Boolean, getter: { name: 'get_IsContentReady', type: 8, sname: 'get_isContentReady', returnType: Boolean, params: [] } }, { name: 'LoadingContent', type: 16, returnType: Boolean, getter: { name: 'get_LoadingContent', type: 8, sname: 'get_loadingContent', returnType: Boolean, params: [] } }, { name: 'TypePaths', type: 16, returnType: ss.makeGenericType(ss.Dictionary$2, [Function, String]), getter: { name: 'get_TypePaths', type: 8, sname: 'get_typePaths', returnType: ss.makeGenericType(ss.Dictionary$2, [Function, String]), params: [] } }] });
	ss.setMetadata($Franca_Font, { attr: [new Franca.LoadableFromAttribute(1)], members: [{ name: '.ctor', type: 1, params: [Franca.BinaryData], sname: '$ctor1' }] });
	ss.setMetadata($Franca_FontMetrics, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_FontMetrics, Number], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [$Franca_FontMetrics, Number, Number], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [Number, Number, Number, Number, Number, Number, Number], sname: '$ctor3' }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply', returnType: $Franca_FontMetrics, params: [$Franca_FontMetrics, Number] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$1', returnType: $Franca_FontMetrics, params: [Number, $Franca_FontMetrics] }, { name: 'Ascent', type: 16, returnType: Number, getter: { name: 'get_Ascent', type: 8, sname: 'get_ascent', returnType: Number, params: [] } }, { name: 'BoundingBox', type: 16, returnType: Franca.RectangleF, getter: { name: 'get_BoundingBox', type: 8, sname: 'get_boundingBox', returnType: Franca.RectangleF, params: [] } }, { name: 'BoundingSize', type: 16, returnType: Franca.SizeF, getter: { name: 'get_BoundingSize', type: 8, sname: 'get_boundingSize', returnType: Franca.SizeF, params: [] } }, { name: 'Descent', type: 16, returnType: Number, getter: { name: 'get_Descent', type: 8, sname: 'get_descent', returnType: Number, params: [] } }, { name: 'Height', type: 16, returnType: Number, getter: { name: 'get_Height', type: 8, sname: 'get_height', returnType: Number, params: [] } }, { name: 'Linegap', type: 16, returnType: Number, getter: { name: 'get_Linegap', type: 8, sname: 'get_linegap', returnType: Number, params: [] } }, { name: 'Linesize', type: 16, returnType: Number, getter: { name: 'get_Linesize', type: 8, sname: 'get_linesize', returnType: Number, params: [] } }, { name: 'Linespace', type: 16, returnType: Number, getter: { name: 'get_Linespace', type: 8, sname: 'get_linespace', returnType: Number, params: [] } }, { name: 'Width', type: 16, returnType: Number, getter: { name: 'get_Width', type: 8, sname: 'get_width', returnType: Number, params: [] } }, { name: 'XMax', type: 16, returnType: Number, getter: { name: 'get_XMax', type: 8, sname: 'get_xMax', returnType: Number, params: [] } }, { name: 'XMin', type: 16, returnType: Number, getter: { name: 'get_XMin', type: 8, sname: 'get_xMin', returnType: Number, params: [] } }, { name: 'YMax', type: 16, returnType: Number, getter: { name: 'get_YMax', type: 8, sname: 'get_yMax', returnType: Number, params: [] } }, { name: 'YMin', type: 16, returnType: Number, getter: { name: 'get_YMin', type: 8, sname: 'get_yMin', returnType: Number, params: [] } }] });
	ss.setMetadata($Franca_GlyphMetrics, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_GlyphMetrics, Number], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [$Franca_GlyphMetrics, Number, Number], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [Number, Number, Number, Number, Number, Number, Number], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [Number, Number, Number, Number, Number, Number, Number, Number], sname: '$ctor4' }, { name: '.ctor', type: 1, params: [Number, Number, Number, Number, Number, Number, Number, Number, Number], sname: '$ctor5' }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply', returnType: $Franca_GlyphMetrics, params: [$Franca_GlyphMetrics, Number] }, { name: 'op_Multiply', isStatic: true, type: 8, sname: 'op_Multiply$1', returnType: $Franca_GlyphMetrics, params: [Number, $Franca_GlyphMetrics] }, { name: 'AdvanceWidth', type: 16, returnType: Number, getter: { name: 'get_AdvanceWidth', type: 8, sname: 'get_advanceWidth', returnType: Number, params: [] } }, { name: 'BearingX', type: 16, returnType: Number, getter: { name: 'get_BearingX', type: 8, sname: 'get_bearingX', returnType: Number, params: [] } }, { name: 'BearingY', type: 16, returnType: Number, getter: { name: 'get_BearingY', type: 8, sname: 'get_bearingY', returnType: Number, params: [] } }, { name: 'BoundingBox', type: 16, returnType: Franca.RectangleF, getter: { name: 'get_BoundingBox', type: 8, sname: 'get_boundingBox', returnType: Franca.RectangleF, params: [] } }, { name: 'BoundingSize', type: 16, returnType: Franca.SizeF, getter: { name: 'get_BoundingSize', type: 8, sname: 'get_boundingSize', returnType: Franca.SizeF, params: [] } }, { name: 'Height', type: 16, returnType: Number, getter: { name: 'get_Height', type: 8, sname: 'get_height', returnType: Number, params: [] } }, { name: 'RightSideBearing', type: 16, returnType: Number, getter: { name: 'get_RightSideBearing', type: 8, sname: 'get_rightSideBearing', returnType: Number, params: [] } }, { name: 'Width', type: 16, returnType: Number, getter: { name: 'get_Width', type: 8, sname: 'get_width', returnType: Number, params: [] } }, { name: 'XMax', type: 16, returnType: Number, getter: { name: 'get_XMax', type: 8, sname: 'get_xMax', returnType: Number, params: [] } }, { name: 'XMin', type: 16, returnType: Number, getter: { name: 'get_XMin', type: 8, sname: 'get_xMin', returnType: Number, params: [] } }, { name: 'YMax', type: 16, returnType: Number, getter: { name: 'get_YMax', type: 8, sname: 'get_yMax', returnType: Number, params: [] } }, { name: 'YMin', type: 16, returnType: Number, getter: { name: 'get_YMin', type: 8, sname: 'get_yMin', returnType: Number, params: [] } }] });
	ss.setMetadata($Franca_GlyphRegion, { members: [{ name: '.ctor', type: 1, params: [] }, { name: 'Full', type: 4, returnType: Boolean, sname: 'full' }, { name: 'Glyphs', type: 4, returnType: Array, sname: 'glyphs' }, { name: 'Height', type: 4, returnType: ss.Int32, sname: 'height' }, { name: 'LastUsed', type: 4, returnType: ss.TimeSpan, sname: 'lastUsed' }, { name: 'Size', type: 4, returnType: ss.Int32, sname: 'size' }, { name: 'Width', type: 4, returnType: ss.Int32, sname: 'width' }, { name: 'X', type: 4, returnType: ss.Int32, sname: 'x' }, { name: 'Y', type: 4, returnType: ss.Int32, sname: 'y' }] });
	ss.setMetadata($Franca_GraphicsDevice, { members: [{ name: '.ctor', type: 1, params: [$Franca_GameContainer, ss.Int32, ss.Int32] }, { name: 'ApplyStencilState', type: 8, sname: 'applyStencilState', returnType: Object, params: [$Franca_StencilState] }, { name: 'Clear', type: 8, sname: 'clear', returnType: Object, params: [] }, { name: 'Clear', type: 8, sname: 'clear$1', returnType: Object, params: [$Franca_ClearOptions] }, { name: 'Clear', type: 8, sname: 'clear$2', returnType: Object, params: [Franca.Color] }, { name: 'Clear', type: 8, sname: 'clear$3', returnType: Object, params: [Franca.HdrColor] }, { name: 'Clear', type: 8, sname: 'clear$4', returnType: Object, params: [Franca.Color, $Franca_ClearOptions] }, { name: 'Clear', type: 8, sname: 'clear$5', returnType: Object, params: [Franca.HdrColor, $Franca_ClearOptions] }, { name: 'Clear', type: 8, sname: 'clear$6', returnType: Object, params: [Franca.Color, Number, ss.Int32, $Franca_ClearOptions] }, { name: 'Clear', type: 8, sname: 'clear$7', returnType: Object, params: [Franca.HdrColor, Number, ss.Int32, $Franca_ClearOptions] }, { name: 'Dispose', type: 8, sname: 'dispose', returnType: Object, params: [] }, { name: 'Dispose', type: 8, sname: 'dispose$1', returnType: Object, params: [Boolean] }, { name: 'Finalize', type: 8, sname: 'finalize', returnType: Object, params: [Array] }, { name: 'Finalize', type: 8, sname: 'finalize$1', returnType: Object, params: [$Franca_OpenGL_WebGL_GLFramebuffer] }, { name: 'Finalize', type: 8, sname: 'finalize$2', returnType: Object, params: [$Franca_OpenGL_WebGL_GLProgram] }, { name: 'Finalize', type: 8, sname: 'finalize$3', returnType: Object, params: [$Franca_OpenGL_WebGL_GLRenderbuffer] }, { name: 'Finalize', type: 8, sname: 'finalize$4', returnType: Object, params: [$Franca_OpenGL_WebGL_GLShader] }, { name: 'Finalize', type: 8, sname: 'finalize$5', returnType: Object, params: [$Franca_OpenGL_WebGL_GLTexture] }, { name: 'SetDefaultState', type: 8, sname: 'setDefaultState', returnType: Object, params: [Boolean] }, { name: 'SetRenderTarget', type: 8, sname: 'setRenderTarget', returnType: Object, params: [$Franca_RenderTarget] }, { name: 'SetRenderTarget', type: 8, sname: 'setRenderTarget$1', returnType: $Franca_RenderTargetState, params: [$Franca_RenderTarget, Boolean] }, { name: 'SetResolution', type: 8, sname: 'setResolution', returnType: Object, params: [ss.Int32, ss.Int32] }, { name: 'SwapBuffers', type: 8, sname: 'swapBuffers', returnType: Object, params: [] }, { name: 'AdaptiveVsyncSupported', type: 16, returnType: Boolean, getter: { name: 'get_AdaptiveVsyncSupported', type: 8, sname: 'get_adaptiveVsyncSupported', returnType: Boolean, params: [] } }, { name: 'BackbufferHeight', type: 16, returnType: ss.Int32, getter: { name: 'get_BackbufferHeight', type: 8, sname: 'get_backbufferHeight', returnType: ss.Int32, params: [] } }, { name: 'BackbufferWidth', type: 16, returnType: ss.Int32, getter: { name: 'get_BackbufferWidth', type: 8, sname: 'get_backbufferWidth', returnType: ss.Int32, params: [] } }, { name: 'BuiltinAssets', type: 16, returnType: $Franca_BuiltinAssets, getter: { name: 'get_BuiltinAssets', type: 8, sname: 'get_builtinAssets', returnType: $Franca_BuiltinAssets, params: [] } }, { name: 'ClearColor', type: 16, returnType: Franca.HdrColor, getter: { name: 'get_ClearColor', type: 8, sname: 'get_clearColor', returnType: Franca.HdrColor, params: [] }, setter: { name: 'set_ClearColor', type: 8, sname: 'set_clearColor', returnType: Object, params: [Franca.HdrColor] } }, { name: 'ClearDepth', type: 16, returnType: Number, getter: { name: 'get_ClearDepth', type: 8, sname: 'get_clearDepth', returnType: Number, params: [] }, setter: { name: 'set_ClearDepth', type: 8, sname: 'set_clearDepth', returnType: Object, params: [Number] } }, { name: 'ClearStencil', type: 16, returnType: ss.Int32, getter: { name: 'get_ClearStencil', type: 8, sname: 'get_clearStencil', returnType: ss.Int32, params: [] }, setter: { name: 'set_ClearStencil', type: 8, sname: 'set_clearStencil', returnType: Object, params: [ss.Int32] } }, { name: 'Container', type: 16, returnType: $Franca_GameContainer, getter: { name: 'get_Container', type: 8, sname: 'get_container', returnType: $Franca_GameContainer, params: [] } }, { name: 'Current', isStatic: true, type: 16, returnType: $Franca_GraphicsDevice, getter: { name: 'get_Current', isStatic: true, type: 8, sname: 'get_current', returnType: $Franca_GraphicsDevice, params: [] }, setter: { name: 'set_Current', isStatic: true, type: 8, sname: 'set_current', returnType: Object, params: [$Franca_GraphicsDevice] } }, { name: 'CurrentHeight', type: 16, returnType: ss.Int32, getter: { name: 'get_CurrentHeight', type: 8, sname: 'get_currentHeight', returnType: ss.Int32, params: [] } }, { name: 'CurrentWidth', type: 16, returnType: ss.Int32, getter: { name: 'get_CurrentWidth', type: 8, sname: 'get_currentWidth', returnType: ss.Int32, params: [] } }, { name: 'DebugShaderSource', type: 16, returnType: Boolean, getter: { name: 'get_DebugShaderSource', type: 8, sname: 'get_debugShaderSource', returnType: Boolean, params: [] }, setter: { name: 'set_DebugShaderSource', type: 8, sname: 'set_debugShaderSource', returnType: Object, params: [Boolean] } }, { name: 'Default', isStatic: true, type: 16, returnType: $Franca_GraphicsDevice, getter: { name: 'get_Default', isStatic: true, type: 8, sname: 'get_default', returnType: $Franca_GraphicsDevice, params: [] }, setter: { name: 'set_Default', isStatic: true, type: 8, sname: 'set_default', returnType: Object, params: [$Franca_GraphicsDevice] } }, { name: 'DefaultFontManager', type: 16, returnType: $Franca_SpriteFontManager, getter: { name: 'get_DefaultFontManager', type: 8, sname: 'get_defaultFontManager', returnType: $Franca_SpriteFontManager, params: [] }, setter: { name: 'set_DefaultFontManager', type: 8, sname: 'set_defaultFontManager', returnType: Object, params: [$Franca_SpriteFontManager] } }, { name: 'DepthWrite', type: 16, returnType: Boolean, getter: { name: 'get_DepthWrite', type: 8, sname: 'get_depthWrite', returnType: Boolean, params: [] }, setter: { name: 'set_DepthWrite', type: 8, sname: 'set_depthWrite', returnType: Object, params: [Boolean] } }, { name: 'MaxTextureSize', type: 16, returnType: ss.Int32, getter: { name: 'get_MaxTextureSize', type: 8, sname: 'get_maxTextureSize', returnType: ss.Int32, params: [] } }, { name: 'RenderTarget', type: 16, returnType: $Franca_RenderTarget, getter: { name: 'get_RenderTarget', type: 8, sname: 'get_renderTarget', returnType: $Franca_RenderTarget, params: [] } }, { name: 'Viewport', type: 16, returnType: Franca.Rectangle, getter: { name: 'get_Viewport', type: 8, sname: 'get_viewport', returnType: Franca.Rectangle, params: [] }, setter: { name: 'set_Viewport', type: 8, sname: 'set_viewport', returnType: Object, params: [Franca.Rectangle] } }, { name: 'B32Message', type: 4, returnType: String, sname: 'b32Message' }] });
	ss.setMetadata($Franca_HdrColors, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [Franca.HdrColor], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [Franca.Serialization.Streaming.IJsonReader], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [ss.Int32, Boolean], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [ss.Int32, Boolean], sname: '$ctor4' }, { name: '.ctor', type: 1, params: [Franca.HdrColor, Franca.HdrColor, Franca.HdrColor, Franca.HdrColor], sname: '$ctor5' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, ss.Int32, ss.Int32, Boolean], sname: '$ctor6' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, ss.Int32, ss.Int32, Boolean], sname: '$ctor7' }, { name: 'FromJson', type: 8, sname: 'fromJson', returnType: $Franca_HdrColors, params: [Franca.JsonValue] }, { name: 'GetEnumerator', type: 8, sname: 'getEnumerator', returnType: ss.IEnumerator, params: [] }, { name: 'Premultiply', type: 8, sname: 'premultiply', returnType: $Franca_HdrColors, params: [] }, { name: 'ToJson', type: 8, sname: 'toJson', returnType: Franca.JsonValue, params: [] }, { name: 'ToString', type: 8, sname: 'toString', returnType: String, params: [] }, { name: 'WriteJson', type: 8, sname: 'writeJson', returnType: Object, params: [Franca.Serialization.Streaming.IJsonWriter] }, { name: 'op_Explicit', isStatic: true, type: 8, sname: 'op_Explicit', returnType: $Franca_Colors, params: [$Franca_HdrColors] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit', returnType: $Franca_HdrColors, params: [Franca.Color] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit$1', returnType: $Franca_HdrColors, params: [Franca.HdrColor] }, { name: 'BottomLeft', type: 16, returnType: Franca.HdrColor, getter: {
		name: 'get_BottomLeft',
		type: 8,
		def: function() {
			return this.bottomLeft;
		},
		returnType: Franca.HdrColor,
		params: []
	} }, { name: 'BottomRight', type: 16, returnType: Franca.HdrColor, getter: {
		name: 'get_BottomRight',
		type: 8,
		def: function() {
			return this.bottomRight;
		},
		returnType: Franca.HdrColor,
		params: []
	} }, { name: 'Item', type: 16, returnType: Franca.HdrColor, params: [ss.Int32], getter: { name: 'get_Item', type: 8, sname: 'get_item', returnType: Franca.HdrColor, params: [ss.Int32] } }, { name: 'TopLeft', type: 16, returnType: Franca.HdrColor, getter: {
		name: 'get_TopLeft',
		type: 8,
		def: function() {
			return this.topLeft;
		},
		returnType: Franca.HdrColor,
		params: []
	} }, { name: 'TopRight', type: 16, returnType: Franca.HdrColor, getter: {
		name: 'get_TopRight',
		type: 8,
		def: function() {
			return this.topRight;
		},
		returnType: Franca.HdrColor,
		params: []
	} }] });
	ss.setMetadata($Franca_Key, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_KeyboardButton, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_KeyPress, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_KeyState, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_MouseButton, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_MouseButtons, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_PixelFont, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_SubTexture, Franca.JsonValue], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [$Franca_Texture, Franca.JsonValue], sname: '$ctor2' }, { name: 'BeginBatch', type: 8, sname: 'beginBatch', returnType: Object, params: [$Franca_SpriteBatch, Number] }, { name: 'Draw', type: 8, sname: 'draw$1', returnType: Object, params: [String, Franca.Vector2, Franca.Color, ss.Int32, Boolean, ss.Int32, ss.Int32, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.Color])] }, { name: 'Draw', type: 8, sname: 'draw$2', returnType: Object, params: [String, ss.Int32, ss.Int32, Franca.Color, ss.Int32, Boolean, ss.Int32, ss.Int32, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.Color])] }, { name: 'Draw', type: 8, sname: 'draw', returnType: Object, params: [String, ss.Int32, ss.Int32, Franca.Gui.Formatting, Number, Number, Number, Franca.HdrColor, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), $Franca_Gui_TextSelection, ss.makeGenericType(ss.Nullable$1, [Franca.Color]), Boolean, ss.Int32, ss.Int32] }, { name: 'DrawAligned', type: 8, sname: 'drawAligned', returnType: Object, params: [String, Franca.Vector2, Franca.Color, Franca.HAlign, Franca.VAlign, ss.Int32, Boolean, ss.Int32, ss.Int32, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.Color])] }, { name: 'DrawAligned', type: 8, sname: 'drawAligned$1', returnType: Object, params: [String, ss.Int32, ss.Int32, Franca.Color, Franca.HAlign, Franca.VAlign, ss.Int32, Boolean, ss.Int32, ss.Int32, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.Color])] }, { name: 'DrawInto', type: 8, sname: 'drawInto', returnType: Object, params: [String, Franca.Rectangle, Franca.Color, Franca.HAlign, Franca.VAlign, ss.Int32, Boolean, ss.Int32, ss.Int32, Boolean, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.Color])] }, { name: 'FinalizeContent', type: 8, sname: 'finalizeContent', returnType: Object, params: [] }, { name: 'GetChunks', type: 8, sname: 'getChunks', returnType: ss.IEnumerable, params: [String, ss.Int32, ss.Int32, Number, Franca.Gui.Formatting, Number, Boolean] }, { name: 'GetFontMetrics', type: 8, sname: 'getFontMetrics', returnType: $Franca_FontMetrics, params: [Franca.Gui.Formatting, Number] }, { name: 'GetFontMetrics', type: 8, sname: 'getFontMetrics$1', returnType: $Franca_FontMetrics, params: [Number, Number, Boolean, Boolean] }, { name: 'GetGlyphMetrics', type: 8, sname: 'getGlyphMetrics', returnType: $Franca_GlyphMetrics, params: [ss.Int32, Franca.Gui.Formatting, Number] }, { name: 'GetGlyphMetrics', type: 8, sname: 'getGlyphMetrics$1', returnType: $Franca_GlyphMetrics, params: [ss.Int32, Franca.Gui.Formatting, Number] }, { name: 'GetGlyphMetrics', type: 8, sname: 'getGlyphMetrics$2', returnType: $Franca_GlyphMetrics, params: [ss.Int32, Number, Number, Boolean, Boolean] }, { name: 'GetGlyphMetrics', type: 8, sname: 'getGlyphMetrics$3', returnType: $Franca_GlyphMetrics, params: [ss.Int32, Number, Number, Boolean, Boolean] }, { name: 'GetKerning', type: 8, sname: 'getKerning', returnType: Number, params: [ss.Int32, ss.Int32, Franca.Gui.Formatting, Number] }, { name: 'GetKerning', type: 8, sname: 'getKerning$1', returnType: Number, params: [ss.Int32, ss.Int32, Franca.Gui.Formatting, Number] }, { name: 'GetKerning', type: 8, sname: 'getKerning$2', returnType: Number, params: [ss.Int32, ss.Int32, Number, Number, Boolean, Boolean] }, { name: 'GetKerning', type: 8, sname: 'getKerning$3', returnType: Number, params: [ss.Int32, ss.Int32, Number, Number, Boolean, Boolean] }, { name: 'GetStrokeSize', type: 8, sname: 'getStrokeSize', returnType: Number, params: [Number] }, { name: 'Init', type: 8, sname: 'init', returnType: Object, params: [$Franca_SubTexture, Franca.JsonValue] }, { name: 'Load', type: 8, sname: 'load', returnType: Object, params: [$Franca_ContentManager, String, String, Array] }, { name: 'Measure', type: 8, sname: 'measure', returnType: $Franca_Gui_WordSize, params: [String, Franca.Gui.Formatting, Number, Boolean] }, { name: 'Measure', type: 8, sname: 'measure$1', returnType: $Franca_Gui_WordSize, params: [String, ss.Int32, ss.Int32, Franca.Gui.Formatting, Number, Boolean] }, { name: 'Loaded', type: 16, returnType: Boolean, getter: { name: 'get_Loaded', type: 8, sname: 'get_loaded', returnType: Boolean, params: [] }, setter: { name: 'set_Loaded', type: 8, sname: 'set_loaded', returnType: Object, params: [Boolean] } }, { name: 'Name', type: 16, returnType: String, getter: { name: 'get_Name', type: 8, sname: 'get_name', returnType: String, params: [] }, setter: { name: 'set_Name', type: 8, sname: 'set_name', returnType: Object, params: [String] } }, { name: 'Ready', type: 16, returnType: Boolean, getter: { name: 'get_Ready', type: 8, sname: 'get_ready', returnType: Boolean, params: [] } }, { name: 'OnLoad', type: 2, adder: { name: 'add_OnLoad', type: 8, sname: 'add_onLoad', returnType: Object, params: [Function] }, remover: { name: 'remove_OnLoad', type: 8, sname: 'remove_onLoad', returnType: Object, params: [Function] } }] });
	ss.setMetadata($Franca_SpriteBatch, { members: [{ name: '.ctor', type: 1, params: [$Franca_GraphicsDevice] }, { name: 'AddQuad', type: 8, sname: 'addQuad', returnType: Object, params: [Franca.RectangleF, $Franca_HdrColors, Number, Franca.Vector2, Number] }, { name: 'Begin', type: 8, sname: 'begin', returnType: Object, params: [$Franca_BatchSortMode, $Franca_TextureFilter, $Franca_TextureWrap, $Franca_Effect] }, { name: 'Dispose', type: 8, sname: 'dispose', returnType: Object, params: [] }, { name: 'Dispose', type: 8, sname: 'dispose$1', returnType: Object, params: [Boolean] }, { name: 'Draw', type: 8, sname: 'draw', returnType: Object, params: [$Franca_SubTexture, Franca.RectangleF, $Franca_HdrColors, $Franca_SpriteEffects, Number] }, { name: 'Draw', type: 8, sname: 'draw$1', returnType: Object, params: [$Franca_SubTexture, Franca.Vector2, $Franca_HdrColors, $Franca_SpriteEffects, Number] }, { name: 'Draw', type: 8, sname: 'draw$2', returnType: Object, params: [$Franca_Texture, Franca.RectangleF, $Franca_HdrColors, $Franca_SpriteEffects, Number] }, { name: 'Draw', type: 8, sname: 'draw$3', returnType: Object, params: [$Franca_Texture, Franca.Vector2, $Franca_HdrColors, $Franca_SpriteEffects, Number] }, { name: 'Draw', type: 8, sname: 'draw$4', returnType: Object, params: [$Franca_SubTexture, Franca.RectangleF, $Franca_HdrColors, Number, Franca.Vector2, $Franca_SpriteEffects, Number] }, { name: 'Draw', type: 8, sname: 'draw$5', returnType: Object, params: [$Franca_SubTexture, Franca.Vector2, $Franca_HdrColors, Number, Franca.Vector2, $Franca_SpriteEffects, Number] }, { name: 'Draw', type: 8, sname: 'draw$6', returnType: Object, params: [$Franca_Texture, Franca.RectangleF, $Franca_HdrColors, Number, Franca.Vector2, $Franca_SpriteEffects, Number] }, { name: 'Draw', type: 8, sname: 'draw$7', returnType: Object, params: [$Franca_Texture, Franca.Vector2, $Franca_HdrColors, Number, Franca.Vector2, $Franca_SpriteEffects, Number] }, { name: 'DrawAll', type: 8, sname: 'drawAll', returnType: Object, params: [] }, { name: 'DrawRectangle', type: 8, sname: 'drawRectangle', returnType: Object, params: [Franca.RectangleF, $Franca_HdrColors, Number] }, { name: 'DrawRectangle', type: 8, sname: 'drawRectangle$1', returnType: Object, params: [Franca.RectangleF, $Franca_HdrColors, Number, Franca.Vector2, Number] }, { name: 'DrawSrc', type: 8, sname: 'drawSrc', returnType: Object, params: [$Franca_SubTexture, Franca.RectangleF, Franca.RectangleF, $Franca_HdrColors, $Franca_SpriteEffects, Number] }, { name: 'DrawSrc', type: 8, sname: 'drawSrc$1', returnType: Object, params: [$Franca_SubTexture, Franca.RectangleF, Franca.Vector2, $Franca_HdrColors, $Franca_SpriteEffects, Number] }, { name: 'DrawSrc', type: 8, sname: 'drawSrc$2', returnType: Object, params: [$Franca_Texture, Franca.RectangleF, Franca.RectangleF, $Franca_HdrColors, $Franca_SpriteEffects, Number] }, { name: 'DrawSrc', type: 8, sname: 'drawSrc$3', returnType: Object, params: [$Franca_Texture, Franca.RectangleF, Franca.Vector2, $Franca_HdrColors, $Franca_SpriteEffects, Number] }, { name: 'DrawSrc', type: 8, sname: 'drawSrc$4', returnType: Object, params: [$Franca_SubTexture, Franca.RectangleF, Franca.RectangleF, $Franca_HdrColors, Number, Franca.Vector2, $Franca_SpriteEffects, Number] }, { name: 'DrawSrc', type: 8, sname: 'drawSrc$5', returnType: Object, params: [$Franca_SubTexture, Franca.RectangleF, Franca.Vector2, $Franca_HdrColors, Number, Franca.Vector2, $Franca_SpriteEffects, Number] }, { name: 'DrawSrc', type: 8, sname: 'drawSrc$6', returnType: Object, params: [$Franca_Texture, Franca.RectangleF, Franca.RectangleF, $Franca_HdrColors, Number, Franca.Vector2, $Franca_SpriteEffects, Number] }, { name: 'DrawSrc', type: 8, sname: 'drawSrc$7', returnType: Object, params: [$Franca_Texture, Franca.RectangleF, Franca.Vector2, $Franca_HdrColors, Number, Franca.Vector2, $Franca_SpriteEffects, Number] }, { name: 'DrawTextured', type: 8, sname: 'drawTextured', returnType: Object, params: [$Franca_Texture, Franca.RectangleF, Franca.RectangleF, $Franca_HdrColors, $Franca_SpriteEffects, Franca.Vector2, Number, Number] }, { name: 'EnableVertexAttributes', type: 8, sname: 'enableVertexAttributes', returnType: Object, params: [$Franca_ShaderProgram, $Franca_BatchDrawCall] }, { name: 'End', type: 8, sname: 'end', returnType: Object, params: [] }, { name: 'Flush', type: 8, sname: 'flush', returnType: Object, params: [] }, { name: 'CurrentProgram', type: 16, returnType: String, getter: { name: 'get_CurrentProgram', type: 8, sname: 'get_currentProgram', returnType: String, params: [] }, setter: { name: 'set_CurrentProgram', type: 8, sname: 'set_currentProgram', returnType: Object, params: [String] } }, { name: 'GraphicsDevice', type: 16, returnType: $Franca_GraphicsDevice, getter: { name: 'get_GraphicsDevice', type: 8, sname: 'get_graphicsDevice', returnType: $Franca_GraphicsDevice, params: [] } }, { name: 'ColorComponentCount', isStatic: true, type: 4, returnType: ss.Int32, sname: 'colorComponentCount' }, { name: 'ColorDataCapacity', isStatic: true, type: 4, returnType: ss.Int32, sname: 'colorDataCapacity' }, { name: 'DefaultTestAlpha', isStatic: true, type: 4, returnType: Number, sname: 'defaultTestAlpha' }, { name: 'InitialColorCapacity', isStatic: true, type: 4, returnType: ss.Int32, sname: 'initialColorCapacity' }, { name: 'InitialItemCapacity', isStatic: true, type: 4, returnType: ss.Int32, sname: 'initialItemCapacity' }, { name: 'InitialRotCapacity', isStatic: true, type: 4, returnType: ss.Int32, sname: 'initialRotCapacity' }, { name: 'InitialUvCapacity', isStatic: true, type: 4, returnType: ss.Int32, sname: 'initialUvCapacity' }, { name: 'InitialVertexCapacity', isStatic: true, type: 4, returnType: ss.Int32, sname: 'initialVertexCapacity' }, { name: 'IntersectionOptimization', type: 4, returnType: Boolean, sname: 'intersectionOptimization' }, { name: 'MaxDepthSwitches', isStatic: true, type: 4, returnType: ss.Int32, sname: 'maxDepthSwitches' }, { name: 'MaxVertices', isStatic: true, type: 4, returnType: ss.Int32, sname: 'maxVertices' }, { name: 'RotComponentCount', isStatic: true, type: 4, returnType: ss.Int32, sname: 'rotComponentCount' }, { name: 'RotDataCapacity', isStatic: true, type: 4, returnType: ss.Int32, sname: 'rotDataCapacity' }, { name: 'UvComponentCount', isStatic: true, type: 4, returnType: ss.Int32, sname: 'uvComponentCount' }, { name: 'UvDataCapacity', isStatic: true, type: 4, returnType: ss.Int32, sname: 'uvDataCapacity' }, { name: 'VertexComponentCount', isStatic: true, type: 4, returnType: ss.Int32, sname: 'vertexComponentCount' }, { name: 'VertexDataCapacity', isStatic: true, type: 4, returnType: ss.Int32, sname: 'vertexDataCapacity' }, { name: 'glIndexOffset', type: 4, returnType: ss.Int32, sname: 'glIndexOffset' }, { name: 'glVertexOffset', type: 4, returnType: ss.Int32, sname: 'glVertexOffset' }, { name: 'indexOffset', type: 4, returnType: ss.Int32, sname: 'indexOffset' }, { name: 'vertexOffset', type: 4, returnType: ss.Int32, sname: 'vertexOffset' }] });
	ss.setMetadata($Franca_SpriteEffects, { enumFlags: true });
	ss.setMetadata($Franca_SpriteFont, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_Font, $Franca_SpriteFontManager], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [$Franca_SpriteFont, $Franca_SpriteFontManager], sname: '$ctor2' }, { name: 'BeginBatch', type: 8, sname: 'beginBatch', returnType: Object, params: [$Franca_SpriteFontBatch, Number] }, { name: 'Draw', type: 8, sname: 'draw', returnType: Object, params: [String, Number, Franca.Vector2, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'Draw', type: 8, sname: 'draw$1', returnType: Object, params: [String, Number, Number, Franca.Vector2, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'Draw', type: 8, sname: 'draw$2', returnType: Object, params: [String, Number, Franca.Vector2, Franca.HdrColor, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'Draw', type: 8, sname: 'draw$3', returnType: Object, params: [String, Number, Number, Franca.Vector2, Franca.HdrColor, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'DrawAligned', type: 8, sname: 'drawAligned', returnType: Object, params: [$Franca_Text_WrappedString, Number, Franca.RectangleF, Franca.TextAlign, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'DrawAligned', type: 8, sname: 'drawAligned$1', returnType: Object, params: [String, Number, Franca.RectangleF, Franca.TextAlign, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'DrawAligned', type: 8, sname: 'drawAligned$2', returnType: Object, params: [$Franca_Text_WrappedString, Number, Number, Franca.RectangleF, Franca.TextAlign, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'DrawAligned', type: 8, sname: 'drawAligned$3', returnType: Object, params: [String, Number, Number, Franca.RectangleF, Franca.TextAlign, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'DrawAligned', type: 8, sname: 'drawAligned$4', returnType: Object, params: [$Franca_Text_WrappedString, Number, Franca.RectangleF, Franca.TextAlign, Franca.HdrColor, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'DrawAligned', type: 8, sname: 'drawAligned$5', returnType: Object, params: [String, Number, Franca.RectangleF, Franca.TextAlign, Franca.HdrColor, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'DrawAligned', type: 8, sname: 'drawAligned$6', returnType: Object, params: [$Franca_Text_WrappedString, Number, Number, Franca.RectangleF, Franca.TextAlign, Franca.HdrColor, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'DrawAligned', type: 8, sname: 'drawAligned$7', returnType: Object, params: [Object, Number, Number, Franca.RectangleF, Franca.TextAlign, Franca.HdrColor, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'DrawAligned', type: 8, sname: 'drawAligned$8', returnType: Object, params: [String, Number, Number, Franca.RectangleF, Franca.TextAlign, Franca.HdrColor, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), Boolean] }, { name: 'FinalizeContent', type: 8, sname: 'finalizeContent', returnType: Object, params: [] }, { name: 'Init', type: 8, sname: 'init', returnType: Object, params: [$Franca_Font, $Franca_SpriteFontManager] }, { name: 'Load', type: 8, sname: 'load', returnType: Object, params: [$Franca_ContentManager, String, String, Array] }, { name: 'Measure', type: 8, sname: 'measure', returnType: Franca.Vector2, params: [String, Number, Number, Boolean] }, { name: 'Compressed', type: 16, returnType: Boolean, getter: { name: 'get_Compressed', type: 8, sname: 'get_compressed', returnType: Boolean, params: [] } }, { name: 'Font', type: 16, returnType: $Franca_Font, getter: { name: 'get_Font', type: 8, sname: 'get_font', returnType: $Franca_Font, params: [] } }, { name: 'Loaded', type: 16, returnType: Boolean, getter: { name: 'get_Loaded', type: 8, sname: 'get_loaded', returnType: Boolean, params: [] }, setter: { name: 'set_Loaded', type: 8, sname: 'set_loaded', returnType: Object, params: [Boolean] } }, { name: 'Manager', type: 16, returnType: $Franca_SpriteFontManager, getter: { name: 'get_Manager', type: 8, sname: 'get_manager', returnType: $Franca_SpriteFontManager, params: [] } }, { name: 'Name', type: 16, returnType: String, getter: { name: 'get_Name', type: 8, sname: 'get_name', returnType: String, params: [] }, setter: { name: 'set_Name', type: 8, sname: 'set_name', returnType: Object, params: [String] } }, { name: 'Ready', type: 16, returnType: Boolean, getter: { name: 'get_Ready', type: 8, sname: 'get_ready', returnType: Boolean, params: [] } }, { name: 'StrokeWidth', type: 16, returnType: Number, getter: { name: 'get_StrokeWidth', type: 8, sname: 'get_strokeWidth', returnType: Number, params: [] }, setter: { name: 'set_StrokeWidth', type: 8, sname: 'set_strokeWidth', returnType: Object, params: [Number] } }, { name: 'OnLoad', type: 2, adder: { name: 'add_OnLoad', type: 8, sname: 'add_onLoad', returnType: Object, params: [Function] }, remover: { name: 'remove_OnLoad', type: 8, sname: 'remove_onLoad', returnType: Object, params: [Function] } }] });
	ss.setMetadata($Franca_SpriteFontBatch, { members: [{ name: '.ctor', type: 1, params: [$Franca_GraphicsDevice] }, { name: 'Begin', type: 8, sname: 'begin$1', returnType: Object, params: [$Franca_BatchSortMode, $Franca_TextureFilter, $Franca_TextureWrap, $Franca_Effect] }, { name: 'Begin', type: 8, sname: 'begin$2', returnType: Object, params: [Boolean, $Franca_BatchSortMode, $Franca_TextureFilter, $Franca_TextureWrap, $Franca_Effect] }, { name: 'Dispose', type: 8, sname: 'dispose$1', returnType: Object, params: [Boolean] }, { name: 'DrawAll', type: 8, sname: 'drawAll', returnType: Object, params: [] }, { name: 'DrawGlyph', type: 8, sname: 'drawGlyph', returnType: Object, params: [$Franca_Texture, ss.Int32, Boolean] }, { name: 'DrawGlyph', type: 8, sname: 'drawGlyph$1', returnType: Object, params: [$Franca_SpriteFontGlyph, Franca.RectangleF, Franca.HdrColor, Boolean, $Franca_SpriteEffects, Number] }, { name: 'DrawGlyph', type: 8, sname: 'drawGlyph$2', returnType: Object, params: [$Franca_SpriteFontGlyph, Franca.Vector2, Franca.HdrColor, Boolean, $Franca_SpriteEffects, Number] }, { name: 'DrawGlyph', type: 8, sname: 'drawGlyph$3', returnType: Object, params: [$Franca_SpriteFontGlyph, Franca.RectangleF, Franca.HdrColor, Franca.HdrColor, Boolean, $Franca_SpriteEffects, Number] }, { name: 'DrawGlyph', type: 8, sname: 'drawGlyph$4', returnType: Object, params: [$Franca_SpriteFontGlyph, Franca.Vector2, Franca.HdrColor, Franca.HdrColor, Boolean, $Franca_SpriteEffects, Number] }, { name: 'DrawGlyph', type: 8, sname: 'drawGlyph$5', returnType: Object, params: [$Franca_SpriteFontGlyph, Franca.RectangleF, Franca.HdrColor, Number, Franca.Vector2, Boolean, $Franca_SpriteEffects, Number] }, { name: 'DrawGlyph', type: 8, sname: 'drawGlyph$6', returnType: Object, params: [$Franca_SpriteFontGlyph, Franca.Vector2, Franca.HdrColor, Number, Franca.Vector2, Boolean, $Franca_SpriteEffects, Number] }, { name: 'DrawGlyph', type: 8, sname: 'drawGlyph$7', returnType: Object, params: [$Franca_SpriteFontGlyph, Franca.RectangleF, Franca.HdrColor, Franca.HdrColor, Number, Franca.Vector2, Boolean, $Franca_SpriteEffects, Number] }, { name: 'DrawGlyph', type: 8, sname: 'drawGlyph$8', returnType: Object, params: [$Franca_SpriteFontGlyph, Franca.Vector2, Franca.HdrColor, Franca.HdrColor, Number, Franca.Vector2, Boolean, $Franca_SpriteEffects, Number] }, { name: 'EnableVertexAttributes', type: 8, sname: 'enableVertexAttributes', returnType: Object, params: [$Franca_ShaderProgram, $Franca_BatchDrawCall] }, { name: 'CompressedGlyphFragLines', isStatic: true, type: 16, returnType: Array, getter: { name: 'get_CompressedGlyphFragLines', isStatic: true, type: 8, sname: 'get_compressedGlyphFragLines', returnType: Array, params: [] } }, { name: 'CompressedGlyphFragSource', isStatic: true, type: 16, returnType: String, getter: { name: 'get_CompressedGlyphFragSource', isStatic: true, type: 8, sname: 'get_compressedGlyphFragSource', returnType: String, params: [] } }, { name: 'CompressedGlyphVertexLines', isStatic: true, type: 16, returnType: Array, getter: { name: 'get_CompressedGlyphVertexLines', isStatic: true, type: 8, sname: 'get_compressedGlyphVertexLines', returnType: Array, params: [] } }, { name: 'CompressedGlyphVertexSource', isStatic: true, type: 16, returnType: String, getter: { name: 'get_CompressedGlyphVertexSource', isStatic: true, type: 8, sname: 'get_compressedGlyphVertexSource', returnType: String, params: [] } }, { name: 'UncompressedGlyphFragLines', isStatic: true, type: 16, returnType: Array, getter: { name: 'get_UncompressedGlyphFragLines', isStatic: true, type: 8, sname: 'get_uncompressedGlyphFragLines', returnType: Array, params: [] } }, { name: 'UncompressedGlyphFragSource', isStatic: true, type: 16, returnType: String, getter: { name: 'get_UncompressedGlyphFragSource', isStatic: true, type: 8, sname: 'get_uncompressedGlyphFragSource', returnType: String, params: [] } }, { name: 'UncompressedGlyphVertexLines', isStatic: true, type: 16, returnType: Array, getter: { name: 'get_UncompressedGlyphVertexLines', isStatic: true, type: 8, sname: 'get_uncompressedGlyphVertexLines', returnType: Array, params: [] } }, { name: 'UncompressedGlyphVertexSource', isStatic: true, type: 16, returnType: String, getter: { name: 'get_UncompressedGlyphVertexSource', isStatic: true, type: 8, sname: 'get_uncompressedGlyphVertexSource', returnType: String, params: [] } }, { name: 'ChannelComponentCount', isStatic: true, type: 4, returnType: ss.Int32, sname: 'channelComponentCount' }, { name: 'ChannelDataCapacity', isStatic: true, type: 4, returnType: ss.Int32, sname: 'channelDataCapacity' }, { name: 'InitialChannelCapacity', isStatic: true, type: 4, returnType: ss.Int32, sname: 'initialChannelCapacity' }] });
	ss.setMetadata($Franca_SpriteFontManager, { members: [{ name: '.ctor', type: 1, params: [$Franca_GraphicsDevice, ss.Int32, ss.Int32, Boolean, ss.Int32] }, { name: 'Dispose', type: 8, sname: 'dispose', returnType: Object, params: [] }, { name: 'Dispose', type: 8, sname: 'dispose$1', returnType: Object, params: [Boolean] }, { name: 'GetStrokeSize', type: 8, sname: 'getStrokeSize', returnType: Number, params: [$Franca_Font, Number] }, { name: 'Invalidate', type: 8, sname: 'invalidate', returnType: Object, params: [] }, { name: 'InvalidateRegion', type: 8, sname: 'invalidateRegion', returnType: Object, params: [$Franca_GlyphRegion] }, { name: 'InvalidateRegionLRU', type: 8, sname: 'invalidateRegionLRU', returnType: Object, params: [] }, { name: 'ReportFreeSpace', type: 8, sname: 'reportFreeSpace', returnType: String, params: [] }, { name: 'RequestGlyph', type: 8, sname: 'requestGlyph', returnType: $Franca_SpriteFontGlyph, params: [$Franca_Font, ss.Int32, Number] }, { name: 'RequestGlyph', type: 8, sname: 'requestGlyph$1', returnType: $Franca_SpriteFontGlyph, params: [$Franca_Font, ss.Int32, Number] }, { name: 'ResizeTexture', type: 8, sname: 'resizeTexture', returnType: Object, params: [ss.Int32, ss.Int32, ss.Int32] }, { name: 'Compressed', type: 16, returnType: Boolean, getter: { name: 'get_Compressed', type: 8, sname: 'get_compressed', returnType: Boolean, params: [] } }, { name: 'FontBatch', type: 16, returnType: $Franca_SpriteFontBatch, getter: { name: 'get_FontBatch', type: 8, sname: 'get_fontBatch', returnType: $Franca_SpriteFontBatch, params: [] } }, { name: 'FreeSpace', type: 16, returnType: ss.Int32, getter: { name: 'get_FreeSpace', type: 8, sname: 'get_freeSpace', returnType: ss.Int32, params: [] } }, { name: 'GlyphsTexture', type: 16, returnType: $Franca_Texture, getter: { name: 'get_GlyphsTexture', type: 8, sname: 'get_glyphsTexture', returnType: $Franca_Texture, params: [] } }, { name: 'GraphicsDevice', type: 16, returnType: $Franca_GraphicsDevice, getter: { name: 'get_GraphicsDevice', type: 8, sname: 'get_graphicsDevice', returnType: $Franca_GraphicsDevice, params: [] } }, { name: 'MaxFreeSpace', type: 16, returnType: ss.Int32, getter: { name: 'get_MaxFreeSpace', type: 8, sname: 'get_maxFreeSpace', returnType: ss.Int32, params: [] } }, { name: 'StrokeWidth', type: 16, returnType: Number, getter: { name: 'get_StrokeWidth', type: 8, sname: 'get_strokeWidth', returnType: Number, params: [] }, setter: { name: 'set_StrokeWidth', type: 8, sname: 'set_strokeWidth', returnType: Object, params: [Number] } }] });
	ss.setMetadata($Franca_SubTexture, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()], members: [{ name: '.ctor', type: 1, params: [$Franca_Texture] }, { name: '.ctor', type: 1, params: [$Franca_SubTexture, Franca.Rectangle], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [$Franca_SubTexture, Franca.RectangleF], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [$Franca_Texture, Franca.Rectangle], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [$Franca_Texture, Franca.RectangleF], sname: '$ctor4' }, { name: 'GetPixelData', type: 8, sname: 'getPixelData', returnType: $Franca_CanvasPixelData, params: [ss.makeGenericType(ss.Nullable$1, [Franca.Rectangle])] }, { name: 'Replace', type: 8, sname: 'replace', returnType: Object, params: [$Franca_SubTexture, Franca.Rectangle] }, { name: 'Replace', type: 8, sname: 'replace$1', returnType: Object, params: [$Franca_Texture, Franca.Rectangle] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit', returnType: $Franca_SubTexture, params: [$Franca_Texture] }, { name: 'BaseTexture', type: 16, returnType: $Franca_Texture, getter: {
		name: 'get_BaseTexture',
		type: 8,
		def: function() {
			return this.baseTex;
		},
		returnType: $Franca_Texture,
		params: []
	} }, { name: 'Height', type: 16, returnType: Number, getter: {
		name: 'get_Height',
		type: 8,
		def: function() {
			return this.source.size.height;
		},
		returnType: Number,
		params: []
	} }, { name: 'Loaded', type: 16, returnType: Boolean, getter: { name: 'get_Loaded', type: 8, sname: 'get_loaded', returnType: Boolean, params: [] } }, { name: 'Ready', type: 16, returnType: Boolean, getter: { name: 'get_Ready', type: 8, sname: 'get_ready', returnType: Boolean, params: [] } }, { name: 'Width', type: 16, returnType: Number, getter: {
		name: 'get_Width',
		type: 8,
		def: function() {
			return this.source.size.width;
		},
		returnType: Number,
		params: []
	} }, { name: 'Source', type: 4, returnType: Franca.Rectangle, sname: 'source' }] });
	ss.setMetadata($Franca_Texture, { members: [{ name: '.ctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_CanvasPixelData, Boolean, Boolean], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, Boolean], sname: '$ctor2' }, { name: '.ctor', type: 1, params: [$Franca_Canvas, Boolean, Boolean, Boolean], sname: '$ctor3' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, Franca.Collections.ByteArray, ss.Int32, Boolean], sname: '$ctor4' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, Franca.Collections.ByteArray, ss.Int32, ss.Int32, Boolean], sname: '$ctor5' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, Franca.Collections.FloatArray, ss.Int32, ss.Int32, Boolean], sname: '$ctor6' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, Boolean, Boolean, ss.Int32, $Franca_FloatType, $Franca_DepthPrecision], sname: '$ctor7' }, { name: '.ctor', type: 1, params: [ss.Int32, ss.Int32, Boolean, Boolean, ss.Int32, ss.Int32, $Franca_DepthPrecision, Boolean], sname: '$ctor8' }, { name: 'Dispose', type: 8, sname: 'dispose', returnType: Object, params: [] }, { name: 'Dispose', type: 8, sname: 'dispose$1', returnType: Object, params: [Boolean] }, { name: 'FinalizeContent', type: 8, sname: 'finalizeContent', returnType: Object, params: [] }, { name: 'GetBytesPerType', isStatic: true, type: 8, sname: 'getBytesPerType', returnType: ss.Int32, params: [ss.Int32] }, { name: 'GetChannelsFromFormat', isStatic: true, type: 8, sname: 'getChannelsFromFormat', returnType: ss.Int32, params: [ss.Int32] }, { name: 'GetPixelData', type: 8, sname: 'getPixelData', returnType: $Franca_CanvasPixelData, params: [ss.makeGenericType(ss.Nullable$1, [Franca.Rectangle])] }, { name: 'Load', type: 8, sname: 'load', returnType: Object, params: [$Franca_ContentManager, String, String, Array] }, { name: 'LoadFromCanvas', type: 8, sname: 'loadFromCanvas', returnType: Object, params: [Boolean] }, { name: 'LoadFromData', type: 8, sname: 'loadFromData', returnType: Object, params: [ss.Int32, ss.Int32, Franca.Collections.TypedArray, ss.Int32, ss.Int32, ss.Int32] }, { name: 'UpdateRegion', type: 8, sname: 'updateRegion', returnType: Object, params: [ss.makeGenericType(ss.Nullable$1, [Franca.Rectangle])] }, { name: 'UpdateRegion', type: 8, sname: 'updateRegion$1', returnType: Object, params: [$Franca_Canvas, ss.makeGenericType(ss.Nullable$1, [Franca.Rectangle])] }, { name: 'UpdateRegion', type: 8, sname: 'updateRegion$2', returnType: Object, params: [Franca.Rectangle, Franca.Point] }, { name: 'UpdateRegion', type: 8, sname: 'updateRegion$3', returnType: Object, params: [$Franca_Canvas, Franca.Rectangle, Franca.Point] }, { name: 'op_Implicit', isStatic: true, type: 8, sname: 'op_Implicit', returnType: $Franca_OpenGL_WebGL_GLTexture, params: [$Franca_Texture] }, { name: 'CanRead', type: 16, returnType: Boolean, getter: { name: 'get_CanRead', type: 8, sname: 'get_canRead', returnType: Boolean, params: [] } }, { name: 'Height', type: 16, returnType: ss.Int32, getter: { name: 'get_Height', type: 8, sname: 'get_height', returnType: ss.Int32, params: [] } }, { name: 'Image', type: 16, returnType: $Franca_Canvas, getter: { name: 'get_Image', type: 8, sname: 'get_image', returnType: $Franca_Canvas, params: [] } }, { name: 'IsPowerOfTwo', type: 16, returnType: Boolean, getter: { name: 'get_IsPowerOfTwo', type: 8, sname: 'get_isPowerOfTwo', returnType: Boolean, params: [] } }, { name: 'IsRenderTarget', type: 16, returnType: Boolean, getter: { name: 'get_IsRenderTarget', type: 8, sname: 'get_isRenderTarget', returnType: Boolean, params: [] } }, { name: 'Loaded', type: 16, returnType: Boolean, getter: { name: 'get_Loaded', type: 8, sname: 'get_loaded', returnType: Boolean, params: [] }, setter: { name: 'set_Loaded', type: 8, sname: 'set_loaded', returnType: Object, params: [Boolean] } }, { name: 'Mipmapped', type: 16, returnType: Boolean, getter: { name: 'get_Mipmapped', type: 8, sname: 'get_mipmapped', returnType: Boolean, params: [] } }, { name: 'Name', type: 16, returnType: String, getter: { name: 'get_Name', type: 8, sname: 'get_name', returnType: String, params: [] }, setter: { name: 'set_Name', type: 8, sname: 'set_name', returnType: Object, params: [String] } }, { name: 'None', isStatic: true, type: 16, returnType: $Franca_Texture, getter: { name: 'get_None', isStatic: true, type: 8, sname: 'get_none', returnType: $Franca_Texture, params: [] } }, { name: 'PremultipliedAlpha', type: 16, returnType: Boolean, getter: { name: 'get_PremultipliedAlpha', type: 8, sname: 'get_premultipliedAlpha', returnType: Boolean, params: [] } }, { name: 'Ready', type: 16, returnType: Boolean, getter: { name: 'get_Ready', type: 8, sname: 'get_ready', returnType: Boolean, params: [] } }, { name: 'White', isStatic: true, type: 16, returnType: $Franca_Texture, getter: { name: 'get_White', isStatic: true, type: 8, sname: 'get_white', returnType: $Franca_Texture, params: [] } }, { name: 'Width', type: 16, returnType: ss.Int32, getter: { name: 'get_Width', type: 8, sname: 'get_width', returnType: ss.Int32, params: [] } }, { name: 'depthPrecision', type: 4, returnType: $Franca_DepthPrecision, sname: 'depthPrecision' }, { name: 'framebuffer', type: 4, returnType: $Franca_OpenGL_WebGL_GLFramebuffer, sname: 'framebuffer' }, { name: 'renderTarget', type: 4, returnType: Boolean, sname: 'renderTarget' }, { name: 'renderbuffer', type: 4, returnType: $Franca_OpenGL_WebGL_GLRenderbuffer, sname: 'renderbuffer' }, { name: 'stencilBuffer', type: 4, returnType: Boolean, sname: 'stencilBuffer' }, { name: 'OnLoad', type: 2, adder: { name: 'add_OnLoad', type: 8, sname: 'add_onLoad', returnType: Object, params: [Function] }, remover: { name: 'remove_OnLoad', type: 8, sname: 'remove_onLoad', returnType: Object, params: [Function] } }] });
	ss.setMetadata($Franca_TextureFilter, { enumFlags: true });
	ss.setMetadata($Franca_TextureWrap, { enumFlags: true });
	ss.setMetadata($Franca_Audio_Music, { attr: [new Franca.LoadableFromAttribute(4)], members: [{ name: '.ctor', type: 1, params: [$Franca_Audio_Music], sname: '$ctor2' }] });
	ss.setMetadata($Franca_Audio_Sound, { attr: [new Franca.LoadableFromAttribute(3)], members: [{ name: '.ctor', type: 1, params: [$Franca_Audio_Sound], sname: '$ctor2' }] });
	ss.setMetadata($Franca_Gif_AnimatedGif, { attr: [new Franca.LoadableFromAttribute(5)], members: [{ name: '.ctor', type: 1, params: [Franca.BinaryData], sname: '$ctor1' }, { name: '.ctor', type: 1, params: [$Franca_Gif_AnimatedGif], sname: '$ctor2' }] });
	ss.setMetadata($Franca_Gif_GifData, { attr: [new Franca.LoadableFromAttribute(1)], members: [{ name: '.ctor', type: 1, params: [Franca.BinaryData], sname: '$ctor1' }] });
	ss.setMetadata($Franca_Gui_AutoSizing, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute(), new Franca.ImplicitFromBoolAttribute('None', 'Both')], enumFlags: true });
	ss.setMetadata($Franca_Gui_ChildCollection, { members: [{ name: '.ctor', type: 1, params: [] }, { name: 'Add', type: 8, sname: 'add', returnType: Object, params: [$Franca_Gui_IWidget] }, { name: 'BackToFront', type: 8, sname: 'backToFront', returnType: ss.IEnumerable, params: [] }, { name: 'Clear', type: 8, sname: 'clear', returnType: Object, params: [] }, { name: 'Contains', type: 8, sname: 'contains', returnType: Boolean, params: [$Franca_Gui_IWidget] }, { name: 'FrontToBack', type: 8, sname: 'frontToBack', returnType: ss.IEnumerable, params: [] }, { name: 'GetEnumerator', type: 8, sname: 'getEnumerator', returnType: ss.IEnumerator, params: [] }, { name: 'InsertAfter', type: 8, sname: 'insertAfter', returnType: Object, params: [$Franca_Gui_IWidget] }, { name: 'InsertBefore', type: 8, sname: 'insertBefore', returnType: Object, params: [$Franca_Gui_IWidget] }, { name: 'MoveAfter', type: 8, sname: 'moveAfter', returnType: Object, params: [$Franca_Gui_IWidget, $Franca_Gui_IWidget] }, { name: 'MoveBefore', type: 8, sname: 'moveBefore', returnType: Object, params: [$Franca_Gui_IWidget, $Franca_Gui_IWidget] }, { name: 'MoveToTop', type: 8, sname: 'moveToTop', returnType: Object, params: [$Franca_Gui_IWidget] }, { name: 'Remove', type: 8, sname: 'remove', returnType: Boolean, params: [$Franca_Gui_IWidget] }, { name: 'SafeEnumerate', type: 8, sname: 'safeEnumerate', returnType: ss.IEnumerable, params: [] }, { name: 'Count', type: 16, returnType: ss.Int32, getter: { name: 'get_Count', type: 8, sname: 'get_count', returnType: ss.Int32, params: [] } }, { name: 'IsReadOnly', type: 16, returnType: Boolean, getter: { name: 'get_IsReadOnly', type: 8, sname: 'get_isReadOnly', returnType: Boolean, params: [] } }] });
	ss.setMetadata($Franca_Gui_FlowEvent, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_Gui_GuiEntryPointAttribute, { attrNoInherit: true });
	ss.setMetadata($Franca_Gui_GuiEvent, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_Gui_IGuiContext, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_Gui_Image, { attr: [new $Franca_Gui_WidgetAttribute(null)], members: [{ attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'File', type: 16, returnType: String, getter: { name: 'get_File', type: 8, sname: 'get_file', returnType: String, params: [] }, setter: { name: 'set_File', type: 8, sname: 'set_file', returnType: Object, params: [String] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Fit', type: 16, returnType: ss.makeGenericType(Franca.ImplicitEnum$1, [$Franca_Gui_ImageFit]), getter: { name: 'get_Fit', type: 8, sname: 'get_fit', returnType: ss.makeGenericType(Franca.ImplicitEnum$1, [$Franca_Gui_ImageFit]), params: [] }, setter: { name: 'set_Fit', type: 8, sname: 'set_fit', returnType: Object, params: [ss.makeGenericType(Franca.ImplicitEnum$1, [$Franca_Gui_ImageFit])] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Texture', type: 16, returnType: $Franca_SubTexture, getter: { name: 'get_Texture', type: 8, sname: 'get_texture', returnType: $Franca_SubTexture, params: [] }, setter: { name: 'set_Texture', type: 8, sname: 'set_texture', returnType: Object, params: [$Franca_SubTexture] } }] });
	ss.setMetadata($Franca_Gui_ImageFit, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_Gui_IWidget, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_Gui_IWidgetManager, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_Gui_KeyCaptureEvent, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_Gui_Label, { attr: [new $Franca_Gui_WidgetAttribute(null)], members: [{ attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Align', type: 16, returnType: Franca.TextAlign, getter: { name: 'get_Align', type: 8, sname: 'get_align', returnType: Franca.TextAlign, params: [] }, setter: { name: 'set_Align', type: 8, sname: 'set_align', returnType: Object, params: [Franca.TextAlign] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'AllowMarkup', type: 16, returnType: Boolean, getter: { name: 'get_AllowMarkup', type: 8, sname: 'get_allowMarkup', returnType: Boolean, params: [] }, setter: { name: 'set_AllowMarkup', type: 8, sname: 'set_allowMarkup', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'AutoSize', type: 16, returnType: ss.makeGenericType(Franca.ImplicitEnum$1, [$Franca_Gui_AutoSizing]), getter: { name: 'get_AutoSize', type: 8, sname: 'get_autoSize', returnType: ss.makeGenericType(Franca.ImplicitEnum$1, [$Franca_Gui_AutoSizing]), params: [] }, setter: { name: 'set_AutoSize', type: 8, sname: 'set_autoSize', returnType: Object, params: [ss.makeGenericType(Franca.ImplicitEnum$1, [$Franca_Gui_AutoSizing])] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Bold', type: 16, returnType: Boolean, getter: { name: 'get_Bold', type: 8, sname: 'get_bold', returnType: Boolean, params: [] }, setter: { name: 'set_Bold', type: 8, sname: 'set_bold', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'BottomColor', type: 16, returnType: Franca.Color, getter: { name: 'get_BottomColor', type: 8, sname: 'get_bottomColor', returnType: Franca.Color, params: [] }, setter: { name: 'set_BottomColor', type: 8, sname: 'set_bottomColor', returnType: Object, params: [Franca.Color] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'CanSelect', type: 16, returnType: Boolean, getter: { name: 'get_CanSelect', type: 8, sname: 'get_canSelect', returnType: Boolean, params: [] }, setter: { name: 'set_CanSelect', type: 8, sname: 'set_canSelect', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Font', type: 16, returnType: String, getter: { name: 'get_Font', type: 8, sname: 'get_font', returnType: String, params: [] }, setter: { name: 'set_Font', type: 8, sname: 'set_font', returnType: Object, params: [String] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'FontColor', type: 16, returnType: Franca.Color, getter: { name: 'get_FontColor', type: 8, sname: 'get_fontColor', returnType: Franca.Color, params: [] }, setter: { name: 'set_FontColor', type: 8, sname: 'set_fontColor', returnType: Object, params: [Franca.Color] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'FontSize', type: 16, returnType: Number, getter: { name: 'get_FontSize', type: 8, sname: 'get_fontSize', returnType: Number, params: [] }, setter: { name: 'set_FontSize', type: 8, sname: 'set_fontSize', returnType: Object, params: [Number] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Italic', type: 16, returnType: Boolean, getter: { name: 'get_Italic', type: 8, sname: 'get_italic', returnType: Boolean, params: [] }, setter: { name: 'set_Italic', type: 8, sname: 'set_italic', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Kerning', type: 16, returnType: Boolean, getter: { name: 'get_Kerning', type: 8, sname: 'get_kerning', returnType: Boolean, params: [] }, setter: { name: 'set_Kerning', type: 8, sname: 'set_kerning', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'MultiLine', type: 16, returnType: Boolean, getter: { name: 'get_MultiLine', type: 8, sname: 'get_multiLine', returnType: Boolean, params: [] }, setter: { name: 'set_MultiLine', type: 8, sname: 'set_multiLine', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'MultiplyColor', type: 16, returnType: ss.makeGenericType(ss.Nullable$1, [Franca.Color]), getter: { name: 'get_MultiplyColor', type: 8, sname: 'get_multiplyColor', returnType: ss.makeGenericType(ss.Nullable$1, [Franca.Color]), params: [] }, setter: { name: 'set_MultiplyColor', type: 8, sname: 'set_multiplyColor', returnType: Object, params: [ss.makeGenericType(ss.Nullable$1, [Franca.Color])] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Padding', type: 16, returnType: $Franca_Gui_Padding, getter: { name: 'get_Padding', type: 8, sname: 'get_padding', returnType: $Franca_Gui_Padding, params: [] }, setter: { name: 'set_Padding', type: 8, sname: 'set_padding', returnType: Object, params: [$Franca_Gui_Padding] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Selection', type: 16, returnType: $Franca_Gui_TextSelection, getter: { name: 'get_Selection', type: 8, sname: 'get_selection', returnType: $Franca_Gui_TextSelection, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'SelectionColor', type: 16, returnType: ss.makeGenericType(ss.Nullable$1, [Franca.Color]), getter: { name: 'get_SelectionColor', type: 8, sname: 'get_selectionColor', returnType: ss.makeGenericType(ss.Nullable$1, [Franca.Color]), params: [] }, setter: { name: 'set_SelectionColor', type: 8, sname: 'set_selectionColor', returnType: Object, params: [ss.makeGenericType(ss.Nullable$1, [Franca.Color])] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Stroke', type: 16, returnType: Boolean, getter: { name: 'get_Stroke', type: 8, sname: 'get_stroke', returnType: Boolean, params: [] }, setter: { name: 'set_Stroke', type: 8, sname: 'set_stroke', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'StrokeBottomColor', type: 16, returnType: Franca.Color, getter: { name: 'get_StrokeBottomColor', type: 8, sname: 'get_strokeBottomColor', returnType: Franca.Color, params: [] }, setter: { name: 'set_StrokeBottomColor', type: 8, sname: 'set_strokeBottomColor', returnType: Object, params: [Franca.Color] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'StrokeColor', type: 16, returnType: Franca.Color, getter: { name: 'get_StrokeColor', type: 8, sname: 'get_strokeColor', returnType: Franca.Color, params: [] }, setter: { name: 'set_StrokeColor', type: 8, sname: 'set_strokeColor', returnType: Object, params: [Franca.Color] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'StrokeTopColor', type: 16, returnType: Franca.Color, getter: { name: 'get_StrokeTopColor', type: 8, sname: 'get_strokeTopColor', returnType: Franca.Color, params: [] }, setter: { name: 'set_StrokeTopColor', type: 8, sname: 'set_strokeTopColor', returnType: Object, params: [Franca.Color] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Text', type: 16, returnType: String, getter: { name: 'get_Text', type: 8, sname: 'get_text', returnType: String, params: [] }, setter: { name: 'set_Text', type: 8, sname: 'set_text', returnType: Object, params: [String] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'TextBounds', type: 16, returnType: Franca.RectangleF, getter: { name: 'get_TextBounds', type: 8, sname: 'get_textBounds', returnType: Franca.RectangleF, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'TopColor', type: 16, returnType: Franca.Color, getter: { name: 'get_TopColor', type: 8, sname: 'get_topColor', returnType: Franca.Color, params: [] }, setter: { name: 'set_TopColor', type: 8, sname: 'set_topColor', returnType: Object, params: [Franca.Color] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'VisibleTextLength', type: 16, returnType: ss.Int32, getter: { name: 'get_VisibleTextLength', type: 8, sname: 'get_visibleTextLength', returnType: ss.Int32, params: [] }, setter: { name: 'set_VisibleTextLength', type: 8, sname: 'set_visibleTextLength', returnType: Object, params: [ss.Int32] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'VisibleTextStart', type: 16, returnType: ss.Int32, getter: { name: 'get_VisibleTextStart', type: 8, sname: 'get_visibleTextStart', returnType: ss.Int32, params: [] }, setter: { name: 'set_VisibleTextStart', type: 8, sname: 'set_visibleTextStart', returnType: Object, params: [ss.Int32] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'WordWrapped', type: 16, returnType: Boolean, getter: { name: 'get_WordWrapped', type: 8, sname: 'get_wordWrapped', returnType: Boolean, params: [] }, setter: { name: 'set_WordWrapped', type: 8, sname: 'set_wordWrapped', returnType: Object, params: [Boolean] } }] });
	ss.setMetadata($Franca_Gui_MultiFont, { members: [{ name: '.ctor', type: 1, params: [$Franca_SpriteFontManager, Array] }, { name: '.ctor', type: 1, params: [$Franca_SpriteFontManager, ss.IEnumerable], sname: '$ctor1' }, { name: 'BeginBatch', type: 8, sname: 'beginBatch', returnType: Object, params: [$Franca_SpriteFontBatch, Number] }, { name: 'Draw', type: 8, sname: 'draw$1', returnType: Object, params: [String, Franca.Gui.Formatting, Number, Number, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), $Franca_Gui_TextSelection, ss.makeGenericType(ss.Nullable$1, [Franca.Color]), Boolean, Number] }, { name: 'Draw', type: 8, sname: 'draw$2', returnType: Object, params: [String, Franca.Gui.Formatting, Number, Number, Franca.HdrColor, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), $Franca_Gui_TextSelection, ss.makeGenericType(ss.Nullable$1, [Franca.Color]), Boolean, Number] }, { name: 'Draw', type: 8, sname: 'draw', returnType: Object, params: [String, ss.Int32, ss.Int32, Franca.Gui.Formatting, Number, Number, Number, Franca.HdrColor, Franca.HdrColor, Boolean, ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), ss.makeGenericType(ss.Nullable$1, [Franca.HdrColor]), $Franca_Gui_TextSelection, ss.makeGenericType(ss.Nullable$1, [Franca.Color]), Boolean, ss.Int32, ss.Int32] }, { name: 'GetChunks', type: 8, sname: 'getChunks', returnType: ss.IEnumerable, params: [String, ss.Int32, ss.Int32, Number, Franca.Gui.Formatting, Number, Boolean] }, { name: 'GetFontMetrics', type: 8, sname: 'getFontMetrics', returnType: $Franca_FontMetrics, params: [Franca.Gui.Formatting, Number] }, { name: 'GetFontMetrics', type: 8, sname: 'getFontMetrics$1', returnType: $Franca_FontMetrics, params: [Number, Number, Boolean, Boolean] }, { name: 'GetGlyphMetrics', type: 8, sname: 'getGlyphMetrics', returnType: $Franca_GlyphMetrics, params: [ss.Int32, Franca.Gui.Formatting, Number] }, { name: 'GetGlyphMetrics', type: 8, sname: 'getGlyphMetrics$1', returnType: $Franca_GlyphMetrics, params: [ss.Int32, Franca.Gui.Formatting, Number] }, { name: 'GetGlyphMetrics', type: 8, sname: 'getGlyphMetrics$2', returnType: $Franca_GlyphMetrics, params: [ss.Int32, Number, Number, Boolean, Boolean] }, { name: 'GetGlyphMetrics', type: 8, sname: 'getGlyphMetrics$3', returnType: $Franca_GlyphMetrics, params: [ss.Int32, Number, Number, Boolean, Boolean] }, { name: 'GetKerning', type: 8, sname: 'getKerning', returnType: Number, params: [ss.Int32, ss.Int32, Franca.Gui.Formatting, Number] }, { name: 'GetKerning', type: 8, sname: 'getKerning$1', returnType: Number, params: [ss.Int32, ss.Int32, Franca.Gui.Formatting, Number] }, { name: 'GetKerning', type: 8, sname: 'getKerning$2', returnType: Number, params: [ss.Int32, ss.Int32, Number, Number, Boolean, Boolean] }, { name: 'GetKerning', type: 8, sname: 'getKerning$3', returnType: Number, params: [ss.Int32, ss.Int32, Number, Number, Boolean, Boolean] }, { name: 'GetStrokeSize', type: 8, sname: 'getStrokeSize', returnType: Number, params: [Number] }, { name: 'Measure', type: 8, sname: 'measure$2', returnType: $Franca_Gui_WordSize, params: [String, Franca.Gui.Formatting, Boolean] }, { name: 'Measure', type: 8, sname: 'measure', returnType: $Franca_Gui_WordSize, params: [String, Franca.Gui.Formatting, Number, Boolean] }, { name: 'Measure', type: 8, sname: 'measure$1', returnType: $Franca_Gui_WordSize, params: [String, ss.Int32, ss.Int32, Franca.Gui.Formatting, Number, Boolean] }, { name: 'Fonts', type: 16, returnType: Array, getter: { name: 'get_Fonts', type: 8, sname: 'get_fonts', returnType: Array, params: [] } }, { name: 'Loaded', type: 16, returnType: Boolean, getter: { name: 'get_Loaded', type: 8, sname: 'get_loaded', returnType: Boolean, params: [] } }, { name: 'Manager', type: 16, returnType: $Franca_SpriteFontManager, getter: { name: 'get_Manager', type: 8, sname: 'get_manager', returnType: $Franca_SpriteFontManager, params: [] } }] });
	ss.setMetadata($Franca_Gui_Padding, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute(), new Franca.ParsableAttribute()] });
	ss.setMetadata($Franca_Gui_RectWidget, { attr: [new $Franca_Gui_WidgetAttribute(null)], members: [{ attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Color', type: 16, returnType: Franca.Color, getter: { name: 'get_Color', type: 8, sname: 'get_color', returnType: Franca.Color, params: [] }, setter: { name: 'set_Color', type: 8, sname: 'set_color', returnType: Object, params: [Franca.Color] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Colors', type: 16, returnType: ss.makeGenericType(ss.Nullable$1, [$Franca_Colors]), getter: { name: 'get_Colors', type: 8, sname: 'get_colors', returnType: ss.makeGenericType(ss.Nullable$1, [$Franca_Colors]), params: [] }, setter: { name: 'set_Colors', type: 8, sname: 'set_colors', returnType: Object, params: [ss.makeGenericType(ss.Nullable$1, [$Franca_Colors])] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'HasColor', type: 16, returnType: Boolean, getter: { name: 'get_HasColor', type: 8, sname: 'get_hasColor', returnType: Boolean, params: [] } }] });
	ss.setMetadata($Franca_Gui_ScreenWidget, { attr: [new $Franca_Gui_WidgetAttribute(null)] });
	ss.setMetadata($Franca_Gui_TextBox, { attr: [new $Franca_Gui_WidgetAttribute(null)], members: [{ attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'CanPaste', type: 16, returnType: Boolean, getter: { name: 'get_CanPaste', type: 8, sname: 'get_canPaste', returnType: Boolean, params: [] }, setter: { name: 'set_CanPaste', type: 8, sname: 'set_canPaste', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'MaxLength', type: 16, returnType: ss.Int32, getter: { name: 'get_MaxLength', type: 8, sname: 'get_maxLength', returnType: ss.Int32, params: [] }, setter: { name: 'set_MaxLength', type: 8, sname: 'set_maxLength', returnType: Object, params: [ss.Int32] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'MaxUndoStates', type: 16, returnType: ss.Int32, getter: { name: 'get_MaxUndoStates', type: 8, sname: 'get_maxUndoStates', returnType: ss.Int32, params: [] }, setter: { name: 'set_MaxUndoStates', type: 8, sname: 'set_maxUndoStates', returnType: Object, params: [ss.Int32] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'ScrollToCursor', type: 16, returnType: Boolean, getter: { name: 'get_ScrollToCursor', type: 8, sname: 'get_scrollToCursor', returnType: Boolean, params: [] }, setter: { name: 'set_ScrollToCursor', type: 8, sname: 'set_scrollToCursor', returnType: Object, params: [Boolean] } }] });
	ss.setMetadata($Franca_Gui_TextSelection, { attr: [new Franca.Gui.Documentation.GuiSupportAttribute()] });
	ss.setMetadata($Franca_Gui_Widget, { attr: [new $Franca_Gui_WidgetAttribute(null)], members: [{ name: '.cctor', type: 1, params: [] }, { name: '.ctor', type: 1, params: [$Franca_Gui_IWidget] }, { name: 'AddChild', type: 8, sname: 'addChild', returnType: Object, params: [$Franca_Gui_IWidget] }, { name: 'AddChild', type: 8, sname: 'addChild$1', returnType: Object, params: [String, $Franca_Gui_IWidget] }, { name: 'AddLayoutCallback', type: 8, sname: 'addLayoutCallback', returnType: Object, params: [ss.makeGenericType(Franca.DelegateWrapper$1, [Function])] }, { name: 'AddRenderCallback', type: 8, sname: 'addRenderCallback', returnType: Object, params: [ss.makeGenericType(Franca.DelegateWrapper$1, [Function])] }, { name: 'BeginRender', type: 8, sname: 'beginRender', returnType: Object, params: [$Franca_Gui_IGuiContext] }, { name: 'CaptureKey', type: 8, sname: 'captureKey', returnType: Boolean, params: [$Franca_Gui_KeyCaptureEvent, Function] }, { name: 'Click', type: 8, sname: 'click', returnType: Object, params: [$Franca_Gui_GuiEvent, Function] }, { name: 'ConfirmZone', type: 8, sname: 'confirmZone', returnType: Object, params: [$Franca_Gui_IGuiContext] }, { name: 'Copy', type: 8, sname: 'copy', returnType: String, params: [Boolean, Function] }, { name: 'Create', isStatic: true, type: 8, sname: 'create', returnType: $Franca_Gui_IWidget, params: [String, $Franca_Gui_IWidget] }, { name: 'Create', isStatic: true, type: 8, sname: 'create$1', returnType: $Franca_Gui_IWidget, params: [Function, $Franca_Gui_IWidget] }, { name: 'CreateArgs', isStatic: true, type: 8, sname: 'createArgs', returnType: $Franca_Gui_IWidget, params: [String, Array] }, { name: 'CreateArgs', isStatic: true, type: 8, sname: 'createArgs$1', returnType: $Franca_Gui_IWidget, params: [Function, Array] }, { name: 'Focus', type: 8, sname: 'focus', returnType: Object, params: [Boolean, Function] }, { name: 'Init', type: 8, sname: 'init', returnType: Object, params: [] }, { name: 'Initialize', type: 8, sname: 'initialize', returnType: Object, params: [] }, { name: 'KeyDown', type: 8, sname: 'keyDown', returnType: Object, params: [$Franca_Gui_GuiEvent, Function] }, { name: 'KeyHoldDown', type: 8, sname: 'keyHoldDown', returnType: Object, params: [$Franca_Gui_GuiEvent, Function] }, { name: 'KeyUp', type: 8, sname: 'keyUp', returnType: Object, params: [$Franca_Gui_GuiEvent, Function] }, { name: 'Layout', type: 8, sname: 'layout', returnType: Object, params: [$Franca_Gui_IGuiContext] }, { name: 'LayoutSelf', type: 8, sname: 'layoutSelf', returnType: Object, params: [$Franca_Gui_IGuiContext] }, { name: 'MouseDown', type: 8, sname: 'mouseDown', returnType: Object, params: [$Franca_Gui_GuiEvent, Function] }, { name: 'MouseHoldDown', type: 8, sname: 'mouseHoldDown', returnType: Object, params: [$Franca_Gui_GuiEvent, Function] }, { name: 'MouseHoldUp', type: 8, sname: 'mouseHoldUp', returnType: Object, params: [$Franca_Gui_GuiEvent, Function] }, { name: 'MouseMove', type: 8, sname: 'mouseMove', returnType: Object, params: [$Franca_Gui_GuiEvent, Function] }, { name: 'MouseUp', type: 8, sname: 'mouseUp', returnType: Object, params: [$Franca_Gui_GuiEvent, Function] }, { name: 'NativeClick', type: 8, sname: 'nativeClick', returnType: Object, params: [] }, { name: 'PostLayout', type: 8, sname: 'postLayout', returnType: Object, params: [$Franca_Gui_IGuiContext] }, { name: 'PostRender', type: 8, sname: 'postRender', returnType: Object, params: [$Franca_Gui_IGuiContext] }, { name: 'RemoveChild', type: 8, sname: 'removeChild', returnType: Object, params: [String] }, { name: 'RemoveLayoutCallbacksFor', type: 8, sname: 'removeLayoutCallbacksFor', returnType: Object, params: [$Franca_Gui_IWidget] }, { name: 'RemoveRenderCallbacksFor', type: 8, sname: 'removeRenderCallbacksFor', returnType: Object, params: [$Franca_Gui_IWidget] }, { name: 'Render', type: 8, sname: 'render', returnType: Object, params: [$Franca_Gui_IGuiContext] }, { name: 'RenderSelf', type: 8, sname: 'renderSelf', returnType: Object, params: [$Franca_Gui_IGuiContext] }, { name: 'RightClick', type: 8, sname: 'rightClick', returnType: Object, params: [$Franca_Gui_GuiEvent, Function] }, { name: 'StateViewChange', type: 8, sname: 'stateViewChange', returnType: Object, params: [$Franca_Gui_FlowEvent] }, { name: 'StateViewEnter', type: 8, sname: 'stateViewEnter', returnType: Object, params: [$Franca_Gui_FlowEvent] }, { name: 'Update', type: 8, sname: 'update', returnType: Object, params: [$Franca_Gui_IGuiContext] }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'AlwaysOnTop', type: 16, returnType: Boolean, getter: { name: 'get_AlwaysOnTop', type: 8, sname: 'get_alwaysOnTop', returnType: Boolean, params: [] }, setter: { name: 'set_AlwaysOnTop', type: 8, sname: 'set_alwaysOnTop', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Bottom', type: 16, returnType: Number, getter: { name: 'get_Bottom', type: 8, sname: 'get_bottom', returnType: Number, params: [] }, setter: { name: 'set_Bottom', type: 8, sname: 'set_bottom', returnType: Object, params: [Number] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Bounds', type: 16, returnType: Franca.RectangleF, getter: { name: 'get_Bounds', type: 8, sname: 'get_bounds', returnType: Franca.RectangleF, params: [] }, setter: { name: 'set_Bounds', type: 8, sname: 'set_bounds', returnType: Object, params: [Franca.RectangleF] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'CanCaptureKeys', type: 16, returnType: Boolean, getter: { name: 'get_CanCaptureKeys', type: 8, sname: 'get_canCaptureKeys', returnType: Boolean, params: [] }, setter: { name: 'set_CanCaptureKeys', type: 8, sname: 'set_canCaptureKeys', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'CanFocus', type: 16, returnType: Boolean, getter: { name: 'get_CanFocus', type: 8, sname: 'get_canFocus', returnType: Boolean, params: [] }, setter: { name: 'set_CanFocus', type: 8, sname: 'set_canFocus', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Children', type: 16, returnType: ss.makeGenericType(ss.Dictionary$2, [String, $Franca_Gui_IWidget]), getter: { name: 'get_Children', type: 8, sname: 'get_children', returnType: ss.makeGenericType(ss.Dictionary$2, [String, $Franca_Gui_IWidget]), params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'ClickThrough', type: 16, returnType: Boolean, getter: { name: 'get_ClickThrough', type: 8, sname: 'get_clickThrough', returnType: Boolean, params: [] }, setter: { name: 'set_ClickThrough', type: 8, sname: 'set_clickThrough', returnType: Object, params: [Boolean] } }, { name: 'ClipBounds', type: 16, returnType: Franca.RectangleF, getter: { name: 'get_ClipBounds', type: 8, sname: 'get_clipBounds', returnType: Franca.RectangleF, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'ClipContents', type: 16, returnType: Boolean, getter: { name: 'get_ClipContents', type: 8, sname: 'get_clipContents', returnType: Boolean, params: [] }, setter: { name: 'set_ClipContents', type: 8, sname: 'set_clipContents', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Color', type: 16, returnType: Franca.Color, getter: { name: 'get_Color', type: 8, sname: 'get_color', returnType: Franca.Color, params: [] }, setter: { name: 'set_Color', type: 8, sname: 'set_color', returnType: Object, params: [Franca.Color] } }, { name: 'Content', type: 16, returnType: $Franca_ContentManager, getter: { name: 'get_Content', type: 8, sname: 'get_content', returnType: $Franca_ContentManager, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'DrawBounds', type: 16, returnType: Franca.RectangleF, getter: { name: 'get_DrawBounds', type: 8, sname: 'get_drawBounds', returnType: Franca.RectangleF, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'DrawPos', type: 16, returnType: Franca.PointF, getter: { name: 'get_DrawPos', type: 8, sname: 'get_drawPos', returnType: Franca.PointF, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'DrawX', type: 16, returnType: Number, getter: { name: 'get_DrawX', type: 8, sname: 'get_drawX', returnType: Number, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'DrawY', type: 16, returnType: Number, getter: { name: 'get_DrawY', type: 8, sname: 'get_drawY', returnType: Number, params: [] } }, { name: 'GuiAssembly', isStatic: true, type: 16, returnType: Object, getter: { name: 'get_GuiAssembly', isStatic: true, type: 8, sname: 'get_guiAssembly', returnType: Object, params: [] }, setter: { name: 'set_GuiAssembly', isStatic: true, type: 8, sname: 'set_guiAssembly', returnType: Object, params: [Object] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'HasFocus', type: 16, returnType: Boolean, getter: { name: 'get_HasFocus', type: 8, sname: 'get_hasFocus', returnType: Boolean, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'HasID', type: 16, returnType: Boolean, getter: { name: 'get_HasID', type: 8, sname: 'get_hasID', returnType: Boolean, params: [] }, setter: { name: 'set_HasID', type: 8, sname: 'set_hasID', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Height', type: 16, returnType: Number, getter: { name: 'get_Height', type: 8, sname: 'get_height', returnType: Number, params: [] }, setter: { name: 'set_Height', type: 8, sname: 'set_height', returnType: Object, params: [Number] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'ID', type: 16, returnType: Franca.IncrementalID, getter: { name: 'get_ID', type: 8, sname: 'get_id', returnType: Franca.IncrementalID, params: [] }, setter: { name: 'set_ID', type: 8, sname: 'set_id', returnType: Object, params: [Franca.IncrementalID] } }, { name: 'IDGenerator', isStatic: true, type: 16, returnType: Franca.IDGenerator, getter: { name: 'get_IDGenerator', isStatic: true, type: 8, sname: 'get_idGenerator', returnType: Franca.IDGenerator, params: [] }, setter: { name: 'set_IDGenerator', isStatic: true, type: 8, sname: 'set_idGenerator', returnType: Object, params: [Franca.IDGenerator] } }, { name: 'Input', type: 16, returnType: $Franca_Gui_GuiInput, getter: { name: 'get_Input', type: 8, sname: 'get_input', returnType: $Franca_Gui_GuiInput, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'IsMouseOver', type: 16, returnType: Boolean, getter: { name: 'get_IsMouseOver', type: 8, sname: 'get_isMouseOver', returnType: Boolean, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'IsPressed', type: 16, returnType: Boolean, getter: { name: 'get_IsPressed', type: 8, sname: 'get_isPressed', returnType: Boolean, params: [] } }, { name: 'Manager', type: 16, returnType: $Franca_Gui_IWidgetManager, getter: { name: 'get_Manager', type: 8, sname: 'get_manager', returnType: $Franca_Gui_IWidgetManager, params: [] }, setter: { name: 'set_Manager', type: 8, sname: 'set_manager', returnType: Object, params: [$Franca_Gui_IWidgetManager] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnBeginRender', type: 16, returnType: Function, getter: { name: 'get_OnBeginRender', type: 8, sname: 'get_onBeginRender', returnType: Function, params: [] }, setter: { name: 'set_OnBeginRender', type: 8, sname: 'set_onBeginRender', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnCaptureKey', type: 16, returnType: Function, getter: { name: 'get_OnCaptureKey', type: 8, sname: 'get_onCaptureKey', returnType: Function, params: [] }, setter: { name: 'set_OnCaptureKey', type: 8, sname: 'set_onCaptureKey', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnClick', type: 16, returnType: Function, getter: { name: 'get_OnClick', type: 8, sname: 'get_onClick', returnType: Function, params: [] }, setter: { name: 'set_OnClick', type: 8, sname: 'set_onClick', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnCopy', type: 16, returnType: Function, getter: { name: 'get_OnCopy', type: 8, sname: 'get_onCopy', returnType: Function, params: [] }, setter: { name: 'set_OnCopy', type: 8, sname: 'set_onCopy', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnFocus', type: 16, returnType: Function, getter: { name: 'get_OnFocus', type: 8, sname: 'get_onFocus', returnType: Function, params: [] }, setter: { name: 'set_OnFocus', type: 8, sname: 'set_onFocus', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnKeyDown', type: 16, returnType: Function, getter: { name: 'get_OnKeyDown', type: 8, sname: 'get_onKeyDown', returnType: Function, params: [] }, setter: { name: 'set_OnKeyDown', type: 8, sname: 'set_onKeyDown', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnKeyHoldDown', type: 16, returnType: Function, getter: { name: 'get_OnKeyHoldDown', type: 8, sname: 'get_onKeyHoldDown', returnType: Function, params: [] }, setter: { name: 'set_OnKeyHoldDown', type: 8, sname: 'set_onKeyHoldDown', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnKeyUp', type: 16, returnType: Function, getter: { name: 'get_OnKeyUp', type: 8, sname: 'get_onKeyUp', returnType: Function, params: [] }, setter: { name: 'set_OnKeyUp', type: 8, sname: 'set_onKeyUp', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnLayout', type: 16, returnType: Function, getter: { name: 'get_OnLayout', type: 8, sname: 'get_onLayout', returnType: Function, params: [] }, setter: { name: 'set_OnLayout', type: 8, sname: 'set_onLayout', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnMouseDown', type: 16, returnType: Function, getter: { name: 'get_OnMouseDown', type: 8, sname: 'get_onMouseDown', returnType: Function, params: [] }, setter: { name: 'set_OnMouseDown', type: 8, sname: 'set_onMouseDown', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnMouseHoldDown', type: 16, returnType: Function, getter: { name: 'get_OnMouseHoldDown', type: 8, sname: 'get_onMouseHoldDown', returnType: Function, params: [] }, setter: { name: 'set_OnMouseHoldDown', type: 8, sname: 'set_onMouseHoldDown', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnMouseHoldUp', type: 16, returnType: Function, getter: { name: 'get_OnMouseHoldUp', type: 8, sname: 'get_onMouseHoldUp', returnType: Function, params: [] }, setter: { name: 'set_OnMouseHoldUp', type: 8, sname: 'set_onMouseHoldUp', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnMouseMove', type: 16, returnType: Function, getter: { name: 'get_OnMouseMove', type: 8, sname: 'get_onMouseMove', returnType: Function, params: [] }, setter: { name: 'set_OnMouseMove', type: 8, sname: 'set_onMouseMove', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnMouseUp', type: 16, returnType: Function, getter: { name: 'get_OnMouseUp', type: 8, sname: 'get_onMouseUp', returnType: Function, params: [] }, setter: { name: 'set_OnMouseUp', type: 8, sname: 'set_onMouseUp', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnNativeClick', type: 16, returnType: Function, getter: { name: 'get_OnNativeClick', type: 8, sname: 'get_onNativeClick', returnType: Function, params: [] }, setter: { name: 'set_OnNativeClick', type: 8, sname: 'set_onNativeClick', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnRender', type: 16, returnType: Function, getter: { name: 'get_OnRender', type: 8, sname: 'get_onRender', returnType: Function, params: [] }, setter: { name: 'set_OnRender', type: 8, sname: 'set_onRender', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnRightClick', type: 16, returnType: Function, getter: { name: 'get_OnRightClick', type: 8, sname: 'get_onRightClick', returnType: Function, params: [] }, setter: { name: 'set_OnRightClick', type: 8, sname: 'set_onRightClick', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnViewChange', type: 16, returnType: Function, getter: { name: 'get_OnViewChange', type: 8, sname: 'get_onViewChange', returnType: Function, params: [] }, setter: { name: 'set_OnViewChange', type: 8, sname: 'set_onViewChange', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'OnViewEnter', type: 16, returnType: Function, getter: { name: 'get_OnViewEnter', type: 8, sname: 'get_onViewEnter', returnType: Function, params: [] }, setter: { name: 'set_OnViewEnter', type: 8, sname: 'set_onViewEnter', returnType: Object, params: [Function] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Parent', type: 16, returnType: $Franca_Gui_IWidget, getter: { name: 'get_Parent', type: 8, sname: 'get_parent', returnType: $Franca_Gui_IWidget, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Position', type: 16, returnType: Franca.PointF, getter: { name: 'get_Position', type: 8, sname: 'get_position', returnType: Franca.PointF, params: [] }, setter: { name: 'set_Position', type: 8, sname: 'set_position', returnType: Object, params: [Franca.PointF] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Right', type: 16, returnType: Number, getter: { name: 'get_Right', type: 8, sname: 'get_right', returnType: Number, params: [] }, setter: { name: 'set_Right', type: 8, sname: 'set_right', returnType: Object, params: [Number] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Screen', type: 16, returnType: $Franca_Gui_ScreenWidget, getter: { name: 'get_Screen', type: 8, sname: 'get_screen', returnType: $Franca_Gui_ScreenWidget, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'ScreenBounds', type: 16, returnType: Franca.RectangleF, getter: { name: 'get_ScreenBounds', type: 8, sname: 'get_screenBounds', returnType: Franca.RectangleF, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'ScreenPos', type: 16, returnType: Franca.PointF, getter: { name: 'get_ScreenPos', type: 8, sname: 'get_screenPos', returnType: Franca.PointF, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'ScreenX', type: 16, returnType: Number, getter: { name: 'get_ScreenX', type: 8, sname: 'get_screenX', returnType: Number, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'ScreenY', type: 16, returnType: Number, getter: { name: 'get_ScreenY', type: 8, sname: 'get_screenY', returnType: Number, params: [] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Size', type: 16, returnType: Franca.SizeF, getter: { name: 'get_Size', type: 8, sname: 'get_size', returnType: Franca.SizeF, params: [] }, setter: { name: 'set_Size', type: 8, sname: 'set_size', returnType: Object, params: [Franca.SizeF] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'State', type: 16, returnType: $Franca_Gui_FlowLang_FlowState, getter: { name: 'get_State', type: 8, sname: 'get_state', returnType: $Franca_Gui_FlowLang_FlowState, params: [] }, setter: { name: 'set_State', type: 8, sname: 'set_state', returnType: Object, params: [$Franca_Gui_FlowLang_FlowState] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'ViewPosition', type: 16, returnType: Franca.Vector2, getter: { name: 'get_ViewPosition', type: 8, sname: 'get_viewPosition', returnType: Franca.Vector2, params: [] }, setter: { name: 'set_ViewPosition', type: 8, sname: 'set_viewPosition', returnType: Object, params: [Franca.Vector2] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'ViewX', type: 16, returnType: Number, getter: { name: 'get_ViewX', type: 8, sname: 'get_viewX', returnType: Number, params: [] }, setter: { name: 'set_ViewX', type: 8, sname: 'set_viewX', returnType: Object, params: [Number] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'ViewY', type: 16, returnType: Number, getter: { name: 'get_ViewY', type: 8, sname: 'get_viewY', returnType: Number, params: [] }, setter: { name: 'set_ViewY', type: 8, sname: 'set_viewY', returnType: Object, params: [Number] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Visible', type: 16, returnType: Boolean, getter: { name: 'get_Visible', type: 8, sname: 'get_visible', returnType: Boolean, params: [] }, setter: { name: 'set_Visible', type: 8, sname: 'set_visible', returnType: Object, params: [Boolean] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Width', type: 16, returnType: Number, getter: { name: 'get_Width', type: 8, sname: 'get_width', returnType: Number, params: [] }, setter: { name: 'set_Width', type: 8, sname: 'set_width', returnType: Object, params: [Number] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'X', type: 16, returnType: Number, getter: { name: 'get_X', type: 8, sname: 'get_x', returnType: Number, params: [] }, setter: { name: 'set_X', type: 8, sname: 'set_x', returnType: Object, params: [Number] } }, { attr: [new Franca.Gui.Documentation.GenerateDocsAttribute()], name: 'Y', type: 16, returnType: Number, getter: { name: 'get_Y', type: 8, sname: 'get_y', returnType: Number, params: [] }, setter: { name: 'set_Y', type: 8, sname: 'set_y', returnType: Object, params: [Number] } }, { name: 'Zone', type: 16, returnType: $Franca_Gui_InputZone, getter: { name: 'get_Zone', type: 8, sname: 'get_zone', returnType: $Franca_Gui_InputZone, params: [] } }, { name: 'state', type: 16, returnType: $Franca_Gui_FlowLang_FlowState, getter: { name: 'get_state', type: 8, sname: 'get_state$1', returnType: $Franca_Gui_FlowLang_FlowState, params: [] } }] });
	ss.setMetadata($Franca_Gui_WidgetAttribute, { attrNoInherit: true, attrAllowMultiple: true });
	ss.setMetadata($Franca_Gui_FlowLang_FlowItem, { members: [{ attr: [System.ThreadStaticAttribute.$ctor()], name: '_canCast', isStatic: true, type: 4, returnType: ss.makeGenericType(ss.Dictionary$2, [$Franca_Gui_FlowLang_FlowItem$CastTypes, Boolean]), sname: '$_canCast' }] });
	ss.setMetadata($Franca_JS_Base32Info, { members: [{ name: '.ctor', type: 1, params: [] }] });
	ss.setMetadata($Franca_JsonData_EffectJson, { members: [{ name: '.ctor', type: 1, params: [] }, { name: 'Programs', type: 16, returnType: ss.makeGenericType(Franca.ReflectableList$1, [$Franca_JsonData_EffectTechniqueJson]), getter: { name: 'get_Programs', type: 8, sname: 'get_programs', returnType: ss.makeGenericType(Franca.ReflectableList$1, [$Franca_JsonData_EffectTechniqueJson]), params: [] }, setter: { name: 'set_Programs', type: 8, sname: 'set_programs', returnType: Object, params: [ss.makeGenericType(Franca.ReflectableList$1, [$Franca_JsonData_EffectTechniqueJson])] } }] });
	ss.setMetadata($Franca_JsonData_EffectTechniqueJson, { members: [{ name: '.ctor', type: 1, params: [] }, { name: 'FragmentDefines', type: 16, returnType: ss.makeGenericType(Franca.ReflectableList$1, [String]), getter: { name: 'get_FragmentDefines', type: 8, sname: 'get_fragmentDefines', returnType: ss.makeGenericType(Franca.ReflectableList$1, [String]), params: [] }, setter: { name: 'set_FragmentDefines', type: 8, sname: 'set_fragmentDefines', returnType: Object, params: [ss.makeGenericType(Franca.ReflectableList$1, [String])] } }, { name: 'FragmentShader', type: 16, returnType: String, getter: { name: 'get_FragmentShader', type: 8, sname: 'get_fragmentShader', returnType: String, params: [] }, setter: { name: 'set_FragmentShader', type: 8, sname: 'set_fragmentShader', returnType: Object, params: [String] } }, { name: 'Name', type: 16, returnType: String, getter: { name: 'get_Name', type: 8, sname: 'get_name', returnType: String, params: [] }, setter: { name: 'set_Name', type: 8, sname: 'set_name', returnType: Object, params: [String] } }, { name: 'VertexDefines', type: 16, returnType: ss.makeGenericType(Franca.ReflectableList$1, [String]), getter: { name: 'get_VertexDefines', type: 8, sname: 'get_vertexDefines', returnType: ss.makeGenericType(Franca.ReflectableList$1, [String]), params: [] }, setter: { name: 'set_VertexDefines', type: 8, sname: 'set_vertexDefines', returnType: Object, params: [ss.makeGenericType(Franca.ReflectableList$1, [String])] } }, { name: 'VertexShader', type: 16, returnType: String, getter: { name: 'get_VertexShader', type: 8, sname: 'get_vertexShader', returnType: String, params: [] }, setter: { name: 'set_VertexShader', type: 8, sname: 'set_vertexShader', returnType: Object, params: [String] } }] });
	ss.setMetadata($Franca_Png_PngChunkType, { enumFlags: true });
	ss.setMetadata($Franca_Png_PngData, { attr: [new Franca.LoadableFromAttribute(1)], members: [{ name: '.ctor', type: 1, params: [Franca.BinaryData], sname: '$ctor1' }] });
	ss.setMetadata($Franca_Png_PngPixelFormat, { enumFlags: true });
	ss.setMetadata($Franca_Serialization_JsonFile, { attr: [new Franca.LoadableFromAttribute(2)], members: [{ name: '.ctor', type: 1, params: [String] }] });
	ss.setMetadata($Franca_Targa_TGADataType, { enumFlags: true });
	ss.setMetadata($Franca_Text_TextFile, { attr: [new Franca.LoadableFromAttribute(2)], members: [{ name: '.ctor', type: 1, params: [String], sname: '$ctor1' }] });
	(function() {
		$Franca_OpenGL_WebGL_Constants.activE_ATTRIBUTES = 35721;
		$Franca_OpenGL_WebGL_Constants.activE_ATTRIBUTE_MAX_LENGTH = 35722;
		$Franca_OpenGL_WebGL_Constants.activE_TEXTURE = 34016;
		$Franca_OpenGL_WebGL_Constants.activE_UNIFORMS = 35718;
		$Franca_OpenGL_WebGL_Constants.activE_UNIFORM_MAX_LENGTH = 35719;
		$Franca_OpenGL_WebGL_Constants.aliaseD_LINE_WIDTH_RANGE = 33902;
		$Franca_OpenGL_WebGL_Constants.aliaseD_POINT_SIZE_RANGE = 33901;
		$Franca_OpenGL_WebGL_Constants.ALPHA = 6406;
		$Franca_OpenGL_WebGL_Constants.alphA_BITS = 3413;
		$Franca_OpenGL_WebGL_Constants.ALWAYS = 519;
		$Franca_OpenGL_WebGL_Constants.arraY_BUFFER = 34962;
		$Franca_OpenGL_WebGL_Constants.arraY_BUFFER_BINDING = 34964;
		$Franca_OpenGL_WebGL_Constants.attacheD_SHADERS = 35717;
		$Franca_OpenGL_WebGL_Constants.BACK = 1029;
		$Franca_OpenGL_WebGL_Constants.BLEND = 3042;
		$Franca_OpenGL_WebGL_Constants.blenD_COLOR = 32773;
		$Franca_OpenGL_WebGL_Constants.blenD_DST_ALPHA = 32970;
		$Franca_OpenGL_WebGL_Constants.blenD_DST_RGB = 32968;
		$Franca_OpenGL_WebGL_Constants.blenD_EQUATION = 32777;
		$Franca_OpenGL_WebGL_Constants.blenD_EQUATION_ALPHA = 34877;
		$Franca_OpenGL_WebGL_Constants.blenD_EQUATION_RGB = 32777;
		$Franca_OpenGL_WebGL_Constants.blenD_SRC_ALPHA = 32971;
		$Franca_OpenGL_WebGL_Constants.blenD_SRC_RGB = 32969;
		$Franca_OpenGL_WebGL_Constants.bluE_BITS = 3412;
		$Franca_OpenGL_WebGL_Constants.BOOL = 35670;
		$Franca_OpenGL_WebGL_Constants.booL_VEC2 = 35671;
		$Franca_OpenGL_WebGL_Constants.booL_VEC3 = 35672;
		$Franca_OpenGL_WebGL_Constants.booL_VEC4 = 35673;
		$Franca_OpenGL_WebGL_Constants.browseR_DEFAULT_WEBGL = 37444;
		$Franca_OpenGL_WebGL_Constants.buffeR_SIZE = 34660;
		$Franca_OpenGL_WebGL_Constants.buffeR_USAGE = 34661;
		$Franca_OpenGL_WebGL_Constants.BYTE = 5120;
		$Franca_OpenGL_WebGL_Constants.CCW = 2305;
		$Franca_OpenGL_WebGL_Constants.clamP_TO_EDGE = 33071;
		$Franca_OpenGL_WebGL_Constants.coloR_ATTACHMENT0 = 36064;
		$Franca_OpenGL_WebGL_Constants.coloR_BUFFER_BIT = 16384;
		$Franca_OpenGL_WebGL_Constants.coloR_CLEAR_VALUE = 3106;
		$Franca_OpenGL_WebGL_Constants.coloR_WRITEMASK = 3107;
		$Franca_OpenGL_WebGL_Constants.compilE_STATUS = 35713;
		$Franca_OpenGL_WebGL_Constants.compresseD_TEXTURE_FORMATS = 34467;
		$Franca_OpenGL_WebGL_Constants.constanT_ALPHA = 32771;
		$Franca_OpenGL_WebGL_Constants.constanT_COLOR = 32769;
		$Franca_OpenGL_WebGL_Constants.contexT_LOST_WEBGL = 37442;
		$Franca_OpenGL_WebGL_Constants.culL_FACE = 2884;
		$Franca_OpenGL_WebGL_Constants.culL_FACE_MODE = 2885;
		$Franca_OpenGL_WebGL_Constants.currenT_PROGRAM = 35725;
		$Franca_OpenGL_WebGL_Constants.currenT_VERTEX_ATTRIB = 34342;
		$Franca_OpenGL_WebGL_Constants.CW = 2304;
		$Franca_OpenGL_WebGL_Constants.DECR = 7683;
		$Franca_OpenGL_WebGL_Constants.decR_WRAP = 34056;
		$Franca_OpenGL_WebGL_Constants.deletE_STATUS = 35712;
		$Franca_OpenGL_WebGL_Constants.deptH_ATTACHMENT = 36096;
		$Franca_OpenGL_WebGL_Constants.deptH_BITS = 3414;
		$Franca_OpenGL_WebGL_Constants.deptH_BUFFER_BIT = 256;
		$Franca_OpenGL_WebGL_Constants.deptH_CLEAR_VALUE = 2931;
		$Franca_OpenGL_WebGL_Constants.deptH_COMPONENT = 6402;
		$Franca_OpenGL_WebGL_Constants.deptH_COMPONENT16 = 33189;
		$Franca_OpenGL_WebGL_Constants.deptH_FUNC = 2932;
		$Franca_OpenGL_WebGL_Constants.deptH_RANGE = 2928;
		$Franca_OpenGL_WebGL_Constants.deptH24_STENCIL8 = 34041;
		$Franca_OpenGL_WebGL_Constants.deptH_STENCIL = 34041;
		$Franca_OpenGL_WebGL_Constants.deptH_STENCIL_ATTACHMENT = 33306;
		$Franca_OpenGL_WebGL_Constants.deptH_TEST = 2929;
		$Franca_OpenGL_WebGL_Constants.deptH_WRITEMASK = 2930;
		$Franca_OpenGL_WebGL_Constants.DITHER = 3024;
		$Franca_OpenGL_WebGL_Constants.donT_CARE = 4352;
		$Franca_OpenGL_WebGL_Constants.dsT_ALPHA = 772;
		$Franca_OpenGL_WebGL_Constants.dsT_COLOR = 774;
		$Franca_OpenGL_WebGL_Constants.dynamiC_DRAW = 35048;
		$Franca_OpenGL_WebGL_Constants.elemenT_ARRAY_BUFFER = 34963;
		$Franca_OpenGL_WebGL_Constants.elemenT_ARRAY_BUFFER_BINDING = 34965;
		$Franca_OpenGL_WebGL_Constants.EQUAL = 514;
		$Franca_OpenGL_WebGL_Constants.FASTEST = 4353;
		$Franca_OpenGL_WebGL_Constants.FLOAT = 5126;
		$Franca_OpenGL_WebGL_Constants.floaT_MAT2 = 35674;
		$Franca_OpenGL_WebGL_Constants.floaT_MAT3 = 35675;
		$Franca_OpenGL_WebGL_Constants.floaT_MAT4 = 35676;
		$Franca_OpenGL_WebGL_Constants.floaT_VEC2 = 35664;
		$Franca_OpenGL_WebGL_Constants.floaT_VEC3 = 35665;
		$Franca_OpenGL_WebGL_Constants.floaT_VEC4 = 35666;
		$Franca_OpenGL_WebGL_Constants.fragmenT_SHADER = 35632;
		$Franca_OpenGL_WebGL_Constants.FRAMEBUFFER = 36160;
		$Franca_OpenGL_WebGL_Constants.framebuffeR_ATTACHMENT_OBJECT_NAME = 36049;
		$Franca_OpenGL_WebGL_Constants.framebuffeR_ATTACHMENT_OBJECT_TYPE = 36048;
		$Franca_OpenGL_WebGL_Constants.framebuffeR_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
		$Franca_OpenGL_WebGL_Constants.framebuffeR_ATTACHMENT_TEXTURE_LEVEL = 36050;
		$Franca_OpenGL_WebGL_Constants.framebuffeR_BINDING = 36006;
		$Franca_OpenGL_WebGL_Constants.framebuffeR_COMPLETE = 36053;
		$Franca_OpenGL_WebGL_Constants.framebuffeR_INCOMPLETE_ATTACHMENT = 36054;
		$Franca_OpenGL_WebGL_Constants.framebuffeR_INCOMPLETE_DIMENSIONS = 36057;
		$Franca_OpenGL_WebGL_Constants.framebuffeR_INCOMPLETE_MISSING_ATTACHMENT = 36055;
		$Franca_OpenGL_WebGL_Constants.framebuffeR_UNSUPPORTED = 36061;
		$Franca_OpenGL_WebGL_Constants.FRONT = 1028;
		$Franca_OpenGL_WebGL_Constants.fronT_AND_BACK = 1032;
		$Franca_OpenGL_WebGL_Constants.fronT_FACE = 2886;
		$Franca_OpenGL_WebGL_Constants.funC_ADD = 32774;
		$Franca_OpenGL_WebGL_Constants.funC_REVERSE_SUBTRACT = 32779;
		$Franca_OpenGL_WebGL_Constants.funC_SUBTRACT = 32778;
		$Franca_OpenGL_WebGL_Constants.generatE_MIPMAP_HINT = 33170;
		$Franca_OpenGL_WebGL_Constants.GEQUAL = 518;
		$Franca_OpenGL_WebGL_Constants.GREATER = 516;
		$Franca_OpenGL_WebGL_Constants.greeN_BITS = 3411;
		$Franca_OpenGL_WebGL_Constants.higH_FLOAT = 36338;
		$Franca_OpenGL_WebGL_Constants.higH_INT = 36341;
		$Franca_OpenGL_WebGL_Constants.INCR = 7682;
		$Franca_OpenGL_WebGL_Constants.incR_WRAP = 34055;
		$Franca_OpenGL_WebGL_Constants.infO_LOG_LENGTH = 35716;
		$Franca_OpenGL_WebGL_Constants.INT = 5124;
		$Franca_OpenGL_WebGL_Constants.inT_VEC2 = 35667;
		$Franca_OpenGL_WebGL_Constants.inT_VEC3 = 35668;
		$Franca_OpenGL_WebGL_Constants.inT_VEC4 = 35669;
		$Franca_OpenGL_WebGL_Constants.invaliD_ENUM = 1280;
		$Franca_OpenGL_WebGL_Constants.invaliD_FRAMEBUFFER_OPERATION = 1286;
		$Franca_OpenGL_WebGL_Constants.invaliD_OPERATION = 1282;
		$Franca_OpenGL_WebGL_Constants.invaliD_VALUE = 1281;
		$Franca_OpenGL_WebGL_Constants.INVERT = 5386;
		$Franca_OpenGL_WebGL_Constants.KEEP = 7680;
		$Franca_OpenGL_WebGL_Constants.LEQUAL = 515;
		$Franca_OpenGL_WebGL_Constants.LESS = 513;
		$Franca_OpenGL_WebGL_Constants.LINEAR = 9729;
		$Franca_OpenGL_WebGL_Constants.lineaR_MIPMAP_LINEAR = 9987;
		$Franca_OpenGL_WebGL_Constants.lineaR_MIPMAP_NEAREST = 9985;
		$Franca_OpenGL_WebGL_Constants.LINES = 1;
		$Franca_OpenGL_WebGL_Constants.linE_LOOP = 2;
		$Franca_OpenGL_WebGL_Constants.linE_STRIP = 3;
		$Franca_OpenGL_WebGL_Constants.linE_WIDTH = 2849;
		$Franca_OpenGL_WebGL_Constants.linK_STATUS = 35714;
		$Franca_OpenGL_WebGL_Constants.loW_FLOAT = 36336;
		$Franca_OpenGL_WebGL_Constants.loW_INT = 36339;
		$Franca_OpenGL_WebGL_Constants.LUMINANCE = 6409;
		$Franca_OpenGL_WebGL_Constants.luminancE_ALPHA = 6410;
		$Franca_OpenGL_WebGL_Constants.maX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
		$Franca_OpenGL_WebGL_Constants.maX_CUBE_MAP_TEXTURE_SIZE = 34076;
		$Franca_OpenGL_WebGL_Constants.maX_FRAGMENT_UNIFORM_VECTORS = 36349;
		$Franca_OpenGL_WebGL_Constants.maX_RENDERBUFFER_SIZE = 34024;
		$Franca_OpenGL_WebGL_Constants.maX_TEXTURE_IMAGE_UNITS = 34930;
		$Franca_OpenGL_WebGL_Constants.maX_TEXTURE_SIZE = 3379;
		$Franca_OpenGL_WebGL_Constants.maX_VARYING_VECTORS = 36348;
		$Franca_OpenGL_WebGL_Constants.maX_VERTEX_ATTRIBS = 34921;
		$Franca_OpenGL_WebGL_Constants.maX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
		$Franca_OpenGL_WebGL_Constants.maX_VERTEX_UNIFORM_VECTORS = 36347;
		$Franca_OpenGL_WebGL_Constants.maX_VIEWPORT_DIMS = 3386;
		$Franca_OpenGL_WebGL_Constants.mediuM_FLOAT = 36337;
		$Franca_OpenGL_WebGL_Constants.mediuM_INT = 36340;
		$Franca_OpenGL_WebGL_Constants.mirroreD_REPEAT = 33648;
		$Franca_OpenGL_WebGL_Constants.NEAREST = 9728;
		$Franca_OpenGL_WebGL_Constants.nearesT_MIPMAP_LINEAR = 9986;
		$Franca_OpenGL_WebGL_Constants.nearesT_MIPMAP_NEAREST = 9984;
		$Franca_OpenGL_WebGL_Constants.NEVER = 512;
		$Franca_OpenGL_WebGL_Constants.NICEST = 4354;
		$Franca_OpenGL_WebGL_Constants.NONE = 0;
		$Franca_OpenGL_WebGL_Constants.NOTEQUAL = 517;
		$Franca_OpenGL_WebGL_Constants.nO_ERROR = 0;
		$Franca_OpenGL_WebGL_Constants.nuM_COMPRESSED_TEXTURE_FORMATS = 34466;
		$Franca_OpenGL_WebGL_Constants.ONE = 1;
		$Franca_OpenGL_WebGL_Constants.onE_MINUS_CONSTANT_ALPHA = 32772;
		$Franca_OpenGL_WebGL_Constants.onE_MINUS_CONSTANT_COLOR = 32770;
		$Franca_OpenGL_WebGL_Constants.onE_MINUS_DST_ALPHA = 773;
		$Franca_OpenGL_WebGL_Constants.onE_MINUS_DST_COLOR = 775;
		$Franca_OpenGL_WebGL_Constants.onE_MINUS_SRC_ALPHA = 771;
		$Franca_OpenGL_WebGL_Constants.onE_MINUS_SRC_COLOR = 769;
		$Franca_OpenGL_WebGL_Constants.ouT_OF_MEMORY = 1285;
		$Franca_OpenGL_WebGL_Constants.pacK_ALIGNMENT = 3333;
		$Franca_OpenGL_WebGL_Constants.POINTS = 0;
		$Franca_OpenGL_WebGL_Constants.polygoN_OFFSET_FACTOR = 32824;
		$Franca_OpenGL_WebGL_Constants.polygoN_OFFSET_FILL = 32823;
		$Franca_OpenGL_WebGL_Constants.polygoN_OFFSET_UNITS = 10752;
		$Franca_OpenGL_WebGL_Constants.reD_BITS = 3410;
		$Franca_OpenGL_WebGL_Constants.RENDERBUFFER = 36161;
		$Franca_OpenGL_WebGL_Constants.renderbuffeR_ALPHA_SIZE = 36179;
		$Franca_OpenGL_WebGL_Constants.renderbuffeR_BINDING = 36007;
		$Franca_OpenGL_WebGL_Constants.renderbuffeR_BLUE_SIZE = 36178;
		$Franca_OpenGL_WebGL_Constants.renderbuffeR_DEPTH_SIZE = 36180;
		$Franca_OpenGL_WebGL_Constants.renderbuffeR_GREEN_SIZE = 36177;
		$Franca_OpenGL_WebGL_Constants.renderbuffeR_HEIGHT = 36163;
		$Franca_OpenGL_WebGL_Constants.renderbuffeR_INTERNAL_FORMAT = 36164;
		$Franca_OpenGL_WebGL_Constants.renderbuffeR_RED_SIZE = 36176;
		$Franca_OpenGL_WebGL_Constants.renderbuffeR_STENCIL_SIZE = 36181;
		$Franca_OpenGL_WebGL_Constants.renderbuffeR_WIDTH = 36162;
		$Franca_OpenGL_WebGL_Constants.RENDERER = 7937;
		$Franca_OpenGL_WebGL_Constants.REPEAT = 10497;
		$Franca_OpenGL_WebGL_Constants.REPLACE = 7681;
		$Franca_OpenGL_WebGL_Constants.RGB = 6407;
		$Franca_OpenGL_WebGL_Constants.rgB5_A1 = 32855;
		$Franca_OpenGL_WebGL_Constants.rgB565 = 36194;
		$Franca_OpenGL_WebGL_Constants.RGBA = 6408;
		$Franca_OpenGL_WebGL_Constants.rgbA4 = 32854;
		$Franca_OpenGL_WebGL_Constants.sampleR_2D = 35678;
		$Franca_OpenGL_WebGL_Constants.sampleR_CUBE = 35680;
		$Franca_OpenGL_WebGL_Constants.SAMPLES = 32937;
		$Franca_OpenGL_WebGL_Constants.samplE_ALPHA_TO_COVERAGE = 32926;
		$Franca_OpenGL_WebGL_Constants.samplE_BUFFERS = 32936;
		$Franca_OpenGL_WebGL_Constants.samplE_COVERAGE = 32928;
		$Franca_OpenGL_WebGL_Constants.samplE_COVERAGE_INVERT = 32939;
		$Franca_OpenGL_WebGL_Constants.samplE_COVERAGE_VALUE = 32938;
		$Franca_OpenGL_WebGL_Constants.scissoR_BOX = 3088;
		$Franca_OpenGL_WebGL_Constants.scissoR_TEST = 3089;
		$Franca_OpenGL_WebGL_Constants.shadeR_COMPILER = 36346;
		$Franca_OpenGL_WebGL_Constants.shadeR_SOURCE_LENGTH = 35720;
		$Franca_OpenGL_WebGL_Constants.shadeR_TYPE = 35663;
		$Franca_OpenGL_WebGL_Constants.shadinG_LANGUAGE_VERSION = 35724;
		$Franca_OpenGL_WebGL_Constants.SHORT = 5122;
		$Franca_OpenGL_WebGL_Constants.srC_ALPHA = 770;
		$Franca_OpenGL_WebGL_Constants.srC_ALPHA_SATURATE = 776;
		$Franca_OpenGL_WebGL_Constants.srC_COLOR = 768;
		$Franca_OpenGL_WebGL_Constants.statiC_DRAW = 35044;
		$Franca_OpenGL_WebGL_Constants.stenciL_ATTACHMENT = 36128;
		$Franca_OpenGL_WebGL_Constants.stenciL_BACK_FAIL = 34817;
		$Franca_OpenGL_WebGL_Constants.stenciL_BACK_FUNC = 34816;
		$Franca_OpenGL_WebGL_Constants.stenciL_BACK_PASS_DEPTH_FAIL = 34818;
		$Franca_OpenGL_WebGL_Constants.stenciL_BACK_PASS_DEPTH_PASS = 34819;
		$Franca_OpenGL_WebGL_Constants.stenciL_BACK_REF = 36003;
		$Franca_OpenGL_WebGL_Constants.stenciL_BACK_VALUE_MASK = 36004;
		$Franca_OpenGL_WebGL_Constants.stenciL_BACK_WRITEMASK = 36005;
		$Franca_OpenGL_WebGL_Constants.stenciL_BITS = 3415;
		$Franca_OpenGL_WebGL_Constants.stenciL_BUFFER_BIT = 1024;
		$Franca_OpenGL_WebGL_Constants.stenciL_CLEAR_VALUE = 2961;
		$Franca_OpenGL_WebGL_Constants.stenciL_FAIL = 2964;
		$Franca_OpenGL_WebGL_Constants.stenciL_FUNC = 2962;
		$Franca_OpenGL_WebGL_Constants.stenciL_INDEX = 6401;
		$Franca_OpenGL_WebGL_Constants.stenciL_INDEX8 = 36168;
		$Franca_OpenGL_WebGL_Constants.stenciL_PASS_DEPTH_FAIL = 2965;
		$Franca_OpenGL_WebGL_Constants.stenciL_PASS_DEPTH_PASS = 2966;
		$Franca_OpenGL_WebGL_Constants.stenciL_REF = 2967;
		$Franca_OpenGL_WebGL_Constants.stenciL_TEST = 2960;
		$Franca_OpenGL_WebGL_Constants.stenciL_VALUE_MASK = 2963;
		$Franca_OpenGL_WebGL_Constants.stenciL_WRITEMASK = 2968;
		$Franca_OpenGL_WebGL_Constants.streaM_DRAW = 35040;
		$Franca_OpenGL_WebGL_Constants.subpixeL_BITS = 3408;
		$Franca_OpenGL_WebGL_Constants.TEXTURE = 5890;
		$Franca_OpenGL_WebGL_Constants.texturE0 = 33984;
		$Franca_OpenGL_WebGL_Constants.texturE1 = 33985;
		$Franca_OpenGL_WebGL_Constants.texturE2 = 33986;
		$Franca_OpenGL_WebGL_Constants.texturE3 = 33987;
		$Franca_OpenGL_WebGL_Constants.texturE4 = 33988;
		$Franca_OpenGL_WebGL_Constants.texturE5 = 33989;
		$Franca_OpenGL_WebGL_Constants.texturE6 = 33990;
		$Franca_OpenGL_WebGL_Constants.texturE7 = 33991;
		$Franca_OpenGL_WebGL_Constants.texturE8 = 33992;
		$Franca_OpenGL_WebGL_Constants.texturE9 = 33993;
		$Franca_OpenGL_WebGL_Constants.texturE10 = 33994;
		$Franca_OpenGL_WebGL_Constants.texturE11 = 33995;
		$Franca_OpenGL_WebGL_Constants.texturE12 = 33996;
		$Franca_OpenGL_WebGL_Constants.texturE13 = 33997;
		$Franca_OpenGL_WebGL_Constants.texturE14 = 33998;
		$Franca_OpenGL_WebGL_Constants.texturE15 = 33999;
		$Franca_OpenGL_WebGL_Constants.texturE16 = 34000;
		$Franca_OpenGL_WebGL_Constants.texturE17 = 34001;
		$Franca_OpenGL_WebGL_Constants.texturE18 = 34002;
		$Franca_OpenGL_WebGL_Constants.texturE19 = 34003;
		$Franca_OpenGL_WebGL_Constants.texturE20 = 34004;
		$Franca_OpenGL_WebGL_Constants.texturE21 = 34005;
		$Franca_OpenGL_WebGL_Constants.texturE22 = 34006;
		$Franca_OpenGL_WebGL_Constants.texturE23 = 34007;
		$Franca_OpenGL_WebGL_Constants.texturE24 = 34008;
		$Franca_OpenGL_WebGL_Constants.texturE25 = 34009;
		$Franca_OpenGL_WebGL_Constants.texturE26 = 34010;
		$Franca_OpenGL_WebGL_Constants.texturE27 = 34011;
		$Franca_OpenGL_WebGL_Constants.texturE28 = 34012;
		$Franca_OpenGL_WebGL_Constants.texturE29 = 34013;
		$Franca_OpenGL_WebGL_Constants.texturE30 = 34014;
		$Franca_OpenGL_WebGL_Constants.texturE31 = 34015;
		$Franca_OpenGL_WebGL_Constants.texturE_2D = 3553;
		$Franca_OpenGL_WebGL_Constants.texturE_BINDING_2D = 32873;
		$Franca_OpenGL_WebGL_Constants.texturE_BINDING_CUBE_MAP = 34068;
		$Franca_OpenGL_WebGL_Constants.texturE_CUBE_MAP = 34067;
		$Franca_OpenGL_WebGL_Constants.texturE_CUBE_MAP_NEGATIVE_X = 34070;
		$Franca_OpenGL_WebGL_Constants.texturE_CUBE_MAP_NEGATIVE_Y = 34072;
		$Franca_OpenGL_WebGL_Constants.texturE_CUBE_MAP_NEGATIVE_Z = 34074;
		$Franca_OpenGL_WebGL_Constants.texturE_CUBE_MAP_POSITIVE_X = 34069;
		$Franca_OpenGL_WebGL_Constants.texturE_CUBE_MAP_POSITIVE_Y = 34071;
		$Franca_OpenGL_WebGL_Constants.texturE_CUBE_MAP_POSITIVE_Z = 34073;
		$Franca_OpenGL_WebGL_Constants.texturE_MAG_FILTER = 10240;
		$Franca_OpenGL_WebGL_Constants.texturE_MIN_FILTER = 10241;
		$Franca_OpenGL_WebGL_Constants.texturE_WRAP_S = 10242;
		$Franca_OpenGL_WebGL_Constants.texturE_WRAP_T = 10243;
		$Franca_OpenGL_WebGL_Constants.TRIANGLES = 4;
		$Franca_OpenGL_WebGL_Constants.trianglE_FAN = 6;
		$Franca_OpenGL_WebGL_Constants.trianglE_STRIP = 5;
		$Franca_OpenGL_WebGL_Constants.unpacK_ALIGNMENT = 3317;
		$Franca_OpenGL_WebGL_Constants.unpacK_COLORSPACE_CONVERSION_WEBGL = 37443;
		$Franca_OpenGL_WebGL_Constants.unpacK_FLIP_Y_WEBGL = 37440;
		$Franca_OpenGL_WebGL_Constants.unpacK_PREMULTIPLY_ALPHA_WEBGL = 37441;
		$Franca_OpenGL_WebGL_Constants.unsigneD_BYTE = 5121;
		$Franca_OpenGL_WebGL_Constants.unsigneD_INT = 5125;
		$Franca_OpenGL_WebGL_Constants.unsigneD_SHORT = 5123;
		$Franca_OpenGL_WebGL_Constants.unsigneD_SHORT_4_4_4_4 = 32819;
		$Franca_OpenGL_WebGL_Constants.unsigneD_SHORT_5_5_5_1 = 32820;
		$Franca_OpenGL_WebGL_Constants.unsigneD_SHORT_5_6_5 = 33635;
		$Franca_OpenGL_WebGL_Constants.validatE_STATUS = 35715;
		$Franca_OpenGL_WebGL_Constants.VENDOR = 7936;
		$Franca_OpenGL_WebGL_Constants.VERSION = 7938;
		$Franca_OpenGL_WebGL_Constants.verteX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
		$Franca_OpenGL_WebGL_Constants.verteX_ATTRIB_ARRAY_ENABLED = 34338;
		$Franca_OpenGL_WebGL_Constants.verteX_ATTRIB_ARRAY_NORMALIZED = 34922;
		$Franca_OpenGL_WebGL_Constants.verteX_ATTRIB_ARRAY_POINTER = 34373;
		$Franca_OpenGL_WebGL_Constants.verteX_ATTRIB_ARRAY_SIZE = 34339;
		$Franca_OpenGL_WebGL_Constants.verteX_ATTRIB_ARRAY_STRIDE = 34340;
		$Franca_OpenGL_WebGL_Constants.verteX_ATTRIB_ARRAY_TYPE = 34341;
		$Franca_OpenGL_WebGL_Constants.verteX_SHADER = 35633;
		$Franca_OpenGL_WebGL_Constants.VIEWPORT = 2978;
		$Franca_OpenGL_WebGL_Constants.ZERO = 0;
		$Franca_OpenGL_WebGL_Constants.stacK_UNDERFLOW = 1284;
		$Franca_OpenGL_WebGL_Constants.stacK_OVERFLOW = 1283;
		$Franca_OpenGL_WebGL_Constants.BGRA = 32993;
	})();
	(function() {
		$Franca_CanvasPixelData.internalLayout = 0;
		$Franca_CanvasPixelData.$hasImageDataConstructor = false;
		var tmpImageData = null;
		try {
			var tmpDataArr = new Uint8ClampedArray([255, 255, 255, 255]);
			tmpImageData = new ImageData(tmpDataArr, 1, 1);
		}
		catch ($t1) {
			tmpImageData = null;
		}
		if (ss.isValue(tmpImageData)) {
			$Franca_CanvasPixelData.$hasImageDataConstructor = true;
		}
		else {
			$Franca_CanvasPixelData.$hasImageDataConstructor = false;
			console.log('This platform is lacking the ImageData constructor, performance may be affected.');
		}
	})();
	(function() {
		$Franca_Targa_TargaImage.$rleBit = 128;
		$Franca_Targa_TargaImage.$screenOriginMask = 48;
	})();
	(function() {
		$Franca_Gif_$GifHeader.$maxVersionLen = 6;
	})();
	(function() {
		$Franca_Gif_$GifLogicalScreenDescriptor.$colorResolutionMask = 112;
		$Franca_Gif_$GifLogicalScreenDescriptor.$colorTableSizeMask = 7;
	})();
	(function() {
		$Franca_Gif_$GifImageDescriptor.$colorTableSizeMask = 7;
		$Franca_Gif_$GifImageDescriptor.$seperator = 44;
	})();
	(function() {
		$Franca_Gif_GifLZW.$stackSize = 4096;
	})();
	(function() {
		$Franca_Gif_$GifExtension.$introducer = 33;
	})();
	(function() {
		$Franca_Gif_$GifGraphicsControlExtension.$disposalMethodMask = 28;
	})();
	(function() {
		$Franca_Gif_AnimatedGif.trailerByte = 59;
	})();
	(function() {
		$Franca_Clipboard.$initialized = false;
		$Franca_Clipboard.$platformClipboard = null;
	})();
	(function() {
		$Franca_GraphicsDevice.$defaultDevice = null;
		$Franca_GraphicsDevice.$current = null;
	})();
	(function() {
		$Franca_OpenGL_WebGL_$JSWebGL1.$oeS_texture_float = null;
		$Franca_OpenGL_WebGL_$JSWebGL1.$oeS_texture_half_float = null;
		$Franca_OpenGL_WebGL_$JSWebGL1.$halF_FLOAT_OES = 36193;
	})();
	(function() {
		$Franca_OpenGL_WebGL_GL.shaderHeaderDesktop = '#version 120' + '\n' + '#define highp' + '\n' + '#define mediump' + '\n' + '#define lowp' + '\n';
		$Franca_OpenGL_WebGL_GL.shaderHeaderWebGL = '#version 100' + '\n';
		$Franca_OpenGL_WebGL_GL.$provider = null;
		$Franca_OpenGL_WebGL_GL.$initialized = false;
		$Franca_OpenGL_WebGL_GL.$cullFace = $Franca_OpenGL_WebGL_Constants.BACK;
		$Franca_OpenGL_WebGL_GL.$blendEquationRgb = $Franca_OpenGL_WebGL_Constants.funC_ADD;
		$Franca_OpenGL_WebGL_GL.$blendEquationAlpha = $Franca_OpenGL_WebGL_Constants.funC_ADD;
		$Franca_OpenGL_WebGL_GL.$blendSrcRgb = $Franca_OpenGL_WebGL_Constants.ONE;
		$Franca_OpenGL_WebGL_GL.$blendDstRgb = $Franca_OpenGL_WebGL_Constants.ZERO;
		$Franca_OpenGL_WebGL_GL.$blendSrcAlpha = $Franca_OpenGL_WebGL_Constants.ONE;
		$Franca_OpenGL_WebGL_GL.$blendDstAlpha = $Franca_OpenGL_WebGL_Constants.ZERO;
		$Franca_OpenGL_WebGL_GL.$1$DebugField = false;
	})();
	(function() {
		$Franca_SpriteBatch.maxDepthSwitches = 16384;
		$Franca_SpriteBatch.maxVertices = 43690;
		$Franca_SpriteBatch.initialItemCapacity = 4;
		$Franca_SpriteBatch.vertexComponentCount = 3;
		$Franca_SpriteBatch.vertexDataCapacity = 131070;
		$Franca_SpriteBatch.initialVertexCapacity = 12;
		$Franca_SpriteBatch.uvComponentCount = 2;
		$Franca_SpriteBatch.uvDataCapacity = 87380;
		$Franca_SpriteBatch.initialUvCapacity = 8;
		$Franca_SpriteBatch.colorComponentCount = 4;
		$Franca_SpriteBatch.colorDataCapacity = 174760;
		$Franca_SpriteBatch.initialColorCapacity = 16;
		$Franca_SpriteBatch.rotComponentCount = 3;
		$Franca_SpriteBatch.rotDataCapacity = 131070;
		$Franca_SpriteBatch.initialRotCapacity = 12;
		$Franca_SpriteBatch.defaultTestAlpha = 0;
		$Franca_SpriteBatch.$indexBuffer = null;
	})();
	(function() {
		$Franca_SpriteFontBatch.channelComponentCount = 1;
		$Franca_SpriteFontBatch.channelDataCapacity = 43690;
		$Franca_SpriteFontBatch.initialChannelCapacity = 4;
		var $t1 = [];
		$t1.push('#ifdef GL_ES');
		$t1.push('precision mediump float;');
		$t1.push('#endif');
		$t1.push('');
		$t1.push('uniform mat4 matrixTransform;');
		$t1.push('');
		$t1.push('attribute vec3 inputPosition;');
		$t1.push('attribute lowp vec4 inputColor;');
		$t1.push('attribute vec2 inputTexCoords;');
		$t1.push('attribute vec3 inputRotation;');
		$t1.push('attribute float inputChannel;');
		$t1.push('');
		$t1.push('varying lowp vec4 vColor;');
		$t1.push('varying vec2 vTexCoords;');
		$t1.push('varying vec4 vChannelMult;');
		$t1.push('');
		$t1.push('void main() {');
		$t1.push('    float angle = inputRotation.z;');
		$t1.push('    vec3 pos = inputPosition;');
		$t1.push('    pos.x =');
		$t1.push('        cos(angle) * (inputPosition.x - inputRotation.x) -');
		$t1.push('        sin(angle) * (inputPosition.y - inputRotation.y) +');
		$t1.push('        inputRotation.x;');
		$t1.push('    pos.y =');
		$t1.push('        sin(angle) * (inputPosition.x - inputRotation.x) +');
		$t1.push('        cos(angle) * (inputPosition.y - inputRotation.y) +');
		$t1.push('        inputRotation.y;');
		$t1.push('    gl_Position = matrixTransform * vec4(pos, 1);');
		$t1.push('    vColor = inputColor;');
		$t1.push('    vTexCoords = inputTexCoords;');
		$t1.push('    ');
		$t1.push('    float chan0 = float(inputChannel == 0.0);');
		$t1.push('    float chan1 = float(inputChannel == 1.0);');
		$t1.push('    float chan2 = float(inputChannel == 2.0);');
		$t1.push('    float chan3 = float(inputChannel == 3.0);');
		$t1.push('    vChannelMult = vec4(');
		$t1.push('        chan0, chan1, chan2, chan3);');
		$t1.push('}');
		$Franca_SpriteFontBatch.$uncompressedGlyphVertexLines = $t1;
		$Franca_SpriteFontBatch.$uncompressedGlyphVertexSource = ss.arrayFromEnumerable($Franca_SpriteFontBatch.$uncompressedGlyphVertexLines).join('\n');
		var $t1 = [];
		$t1.push('#ifdef GL_ES');
		$t1.push('precision mediump float;');
		$t1.push('#endif');
		$t1.push('');
		$t1.push('uniform sampler2D texSampler;');
		$t1.push('uniform float testAlpha;');
		$t1.push('');
		$t1.push('varying lowp vec4 vColor;');
		$t1.push('varying vec2 vTexCoords;');
		$t1.push('varying vec4 vChannelMult;');
		$t1.push('');
		$t1.push('void main() {');
		$t1.push('    vec4 channels = texture2D(texSampler, vTexCoords) * vChannelMult;');
		$t1.push('    float alpha = max(channels.r, max(channels.g, max(channels.b, channels.a)));');
		$t1.push('    if (alpha * vColor.a <= testAlpha)');
		$t1.push('        discard;');
		$t1.push('    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0) * alpha * vColor;');
		$t1.push('}');
		$Franca_SpriteFontBatch.$uncompressedGlyphFragLines = $t1;
		$Franca_SpriteFontBatch.$uncompressedGlyphFragSource = ss.arrayFromEnumerable($Franca_SpriteFontBatch.$uncompressedGlyphFragLines).join('\n');
		var $t1 = [];
		$t1.push('#ifdef GL_ES');
		$t1.push('precision mediump float;');
		$t1.push('#endif');
		$t1.push('');
		$t1.push('uniform mat4 matrixTransform;');
		$t1.push('');
		$t1.push('attribute vec3 inputPosition;');
		$t1.push('attribute lowp vec4 inputColor;');
		$t1.push('attribute vec2 inputTexCoords;');
		$t1.push('attribute vec3 inputRotation;');
		$t1.push('attribute float inputChannel;');
		$t1.push('');
		$t1.push('varying lowp vec4 vColor;');
		$t1.push('varying vec2 vTexCoords;');
		$t1.push('varying vec4 vChannelMult;');
		$t1.push('varying float vLow;');
		$t1.push('');
		$t1.push('void main() {');
		$t1.push('    float angle = inputRotation.z;');
		$t1.push('    vec3 pos = inputPosition;');
		$t1.push('    pos.x =');
		$t1.push('        cos(angle) * (inputPosition.x - inputRotation.x) -');
		$t1.push('        sin(angle) * (inputPosition.y - inputRotation.y) +');
		$t1.push('        inputRotation.x;');
		$t1.push('    pos.y =');
		$t1.push('        sin(angle) * (inputPosition.x - inputRotation.x) +');
		$t1.push('        cos(angle) * (inputPosition.y - inputRotation.y) +');
		$t1.push('        inputRotation.y;');
		$t1.push('    gl_Position = matrixTransform * vec4(pos, 1);');
		$t1.push('    vColor = inputColor;');
		$t1.push('    vTexCoords = inputTexCoords;');
		$t1.push('    ');
		$t1.push('    float chan0 = float(inputChannel == 0.0);');
		$t1.push('    float chan1 = float(inputChannel == 1.0);');
		$t1.push('    float chan2 = float(inputChannel == 2.0);');
		$t1.push('    float chan3 = float(inputChannel == 3.0);');
		$t1.push('    float chan4 = float(inputChannel == 4.0);');
		$t1.push('    float chan5 = float(inputChannel == 5.0);');
		$t1.push('    float chan6 = float(inputChannel == 6.0);');
		$t1.push('    float chan7 = float(inputChannel == 7.0);');
		$t1.push('    vChannelMult = vec4(');
		$t1.push('        chan0 * 255.00001 + chan1 * 15.93751,');
		$t1.push('        chan2 * 255.00001 + chan3 * 15.93751,');
		$t1.push('        chan4 * 255.00001 + chan5 * 15.93751,');
		$t1.push('        chan6 * 255.00001 + chan7 * 15.93751);');
		$t1.push('    vLow = max(chan0, max(chan2, max(chan4, chan6)));');
		$t1.push('}');
		$Franca_SpriteFontBatch.$compressedGlyphVertexLines = $t1;
		$Franca_SpriteFontBatch.$compressedGlyphVertexSource = ss.arrayFromEnumerable($Franca_SpriteFontBatch.$compressedGlyphVertexLines).join('\n');
		var $t1 = [];
		$t1.push('#ifdef GL_ES');
		$t1.push('precision mediump float;');
		$t1.push('#endif');
		$t1.push('');
		$t1.push('uniform sampler2D texSampler;');
		$t1.push('uniform float testAlpha;');
		$t1.push('');
		$t1.push('varying lowp vec4 vColor;');
		$t1.push('varying vec2 vTexCoords;');
		$t1.push('varying vec4 vChannelMult;');
		$t1.push('varying float vLow;');
		$t1.push('');
		$t1.push('void main() {');
		$t1.push('    vec4 channels = floor(texture2D(texSampler, vTexCoords) * vChannelMult);');
		$t1.push('    float alpha = max(channels.r, max(channels.g, max(channels.b, channels.a)));');
		$t1.push('    alpha = mix(alpha / 15.0, fract(alpha / 16.0) / 0.9375, vLow);');
		$t1.push('    if (alpha * vColor.a <= testAlpha)');
		$t1.push('        discard;');
		$t1.push('    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0) * alpha * vColor;');
		$t1.push('}');
		$Franca_SpriteFontBatch.$compressedGlyphFragLines = $t1;
		$Franca_SpriteFontBatch.$compressedGlyphFragSource = ss.arrayFromEnumerable($Franca_SpriteFontBatch.$compressedGlyphFragLines).join('\n');
	})();
	(function() {
		$Franca_Audio_AudioContext.$platformAudio = null;
		$Franca_Audio_AudioContext.audioExtension = null;
		var $t1 = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [String]))();
		$t1.add('mp3');
		$t1.add('ogg');
		$Franca_Audio_AudioContext.$availableAudioFormats = $t1;
		$Franca_Audio_AudioContext.$isInitialized = false;
	})();
	(function() {
		$Franca_FrancaFramework.$supportedFeatures = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [$Franca_Features]))();
		$Franca_FrancaFramework.$loadAction = null;
		$Franca_FrancaFramework.$1$IsInitializedField = false;
		$Franca_FrancaFramework.$1$EntryAssemblyField = null;
		$Franca_FrancaFramework.$_w = window;
		var features = FrancaGlobals.supportedFeatures;
		var $t1 = ss.getEnumerator(Franca.EnumHelper.getValues($Franca_Features).call(null));
		try {
			while ($t1.moveNext()) {
				var feat = $t1.current();
				var f;
				switch (feat) {
					case 0: {
						f = 'WebWorkers';
						break;
					}
					case 2: {
						f = 'WebAudio';
						break;
					}
					case 1: {
						f = 'LocalStorage';
						break;
					}
					case 3: {
						f = 'Gamepad';
						break;
					}
					default: {
						f = null;
						break;
					}
				}
				if (ss.isValue(f)) {
					if (ss.contains(features, f)) {
						$Franca_FrancaFramework.$supportedFeatures.add(feat);
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
	})();
	(function() {
		$Franca_Audio_Sound.$emptyInstance = new $Franca_Audio_EmptySoundInstance();
	})();
	(function() {
		$Franca_File.maxConcurrentLoadingFiles = 4;
		$Franca_File.$loadingList = [];
		$Franca_File.$loadedList = [];
		$Franca_File.$virtualFiles = null;
		$Franca_File.$pathSepArr = [Franca.Platform.get_pathSeparator()];
		$Franca_File.$queuedFiles = new Array();
		$Franca_File.$objectUrls = new (ss.makeGenericType(ss.Dictionary$2, [String, String]))();
		$Franca_File.$virtualFiles = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_Collections_BinFileEntry]))();
	})();
	(function() {
		$Franca_Shader.$atiErrorLineFile = new Franca.Text.Regex('^\\s*(?:error)\\s*:\\s*(\\d+)\\s*:\\s*(\\d+)', 3);
		$Franca_Shader.$nvidiaErrorLineFile = new Franca.Text.Regex('^\\s*(\\d+)\\s*\\(\\s*(\\d+)\\s*\\)', 3);
		var $t1 = [];
		$t1.push('#ifdef GL_ES');
		$t1.push('precision mediump float;');
		$t1.push('#endif');
		$t1.push('');
		$t1.push('uniform mat4 matrixTransform;');
		$t1.push('');
		$t1.push('attribute vec3 inputPosition;');
		$t1.push('attribute lowp vec4 inputColor;');
		$t1.push('attribute vec2 inputTexCoords;');
		$t1.push('attribute vec3 inputRotation;');
		$t1.push('');
		$t1.push('varying lowp vec4 vColor;');
		$t1.push('varying vec2 vTexCoords;');
		$t1.push('');
		$t1.push('void main() {');
		$t1.push('    float angle = inputRotation.z;');
		$t1.push('    vec3 pos = inputPosition;');
		$t1.push('    pos.x =');
		$t1.push('        cos(angle) * (inputPosition.x - inputRotation.x) -');
		$t1.push('        sin(angle) * (inputPosition.y - inputRotation.y) +');
		$t1.push('        inputRotation.x;');
		$t1.push('    pos.y =');
		$t1.push('        sin(angle) * (inputPosition.x - inputRotation.x) +');
		$t1.push('        cos(angle) * (inputPosition.y - inputRotation.y) +');
		$t1.push('        inputRotation.y;');
		$t1.push('    gl_Position = matrixTransform * vec4(pos, 1);');
		$t1.push('    vColor = inputColor;');
		$t1.push('    vTexCoords = inputTexCoords;');
		$t1.push('}');
		$Franca_Shader.$batchVertexLines = $t1;
		$Franca_Shader.$batchVertexSource = ss.arrayFromEnumerable($Franca_Shader.$batchVertexLines).join('\n');
		var $t1 = [];
		$t1.push('#ifdef GL_ES');
		$t1.push('precision mediump float;');
		$t1.push('#endif');
		$t1.push('');
		$t1.push('uniform sampler2D texSampler;');
		$t1.push('uniform float testAlpha;');
		$t1.push('');
		$t1.push('varying lowp vec4 vColor;');
		$t1.push('varying vec2 vTexCoords;');
		$t1.push('');
		$t1.push('void main() {');
		$t1.push('    vec4 frag = texture2D(texSampler, vTexCoords);');
		$t1.push('    frag *= vColor;');
		$t1.push('    if (frag.a <= testAlpha)');
		$t1.push('        discard;');
		$t1.push('    gl_FragColor = frag;');
		$t1.push('}');
		$Franca_Shader.$batchFragLines = $t1;
		$Franca_Shader.$batchFragSource = ss.arrayFromEnumerable($Franca_Shader.$batchFragLines).join('\n');
		var $t1 = [];
		$t1.push('#ifdef GL_ES');
		$t1.push('precision mediump float;');
		$t1.push('#endif');
		$t1.push('');
		$t1.push('uniform float testAlpha;');
		$t1.push('');
		$t1.push('varying lowp vec4 vColor;');
		$t1.push('');
		$t1.push('void main() {');
		$t1.push('    if (vColor.a <= testAlpha)');
		$t1.push('        discard;');
		$t1.push('    gl_FragColor = vColor;');
		$t1.push('}');
		$Franca_Shader.$batchRectLines = $t1;
		$Franca_Shader.$batchRectSource = ss.arrayFromEnumerable($Franca_Shader.$batchRectLines).join('\n');
	})();
	(function() {
		$Franca_OpenGL_VertexArrayObject.$prog = null;
	})();
	(function() {
		$Franca_PixelFont.$defaultColors = new $Franca_HdrColors.$ctor5(Franca.HdrColor.get_white(), Franca.HdrColor.get_white(), Franca.HdrColor.get_white(), Franca.HdrColor.get_white());
	})();
	(function() {
		$Franca_JS_Base32Info.$regex = new Franca.Text.Regex('[^/]+\\/+[^/:]+', 0);
	})();
	(function() {
		$Franca_SpriteFont.$newLines = ['\r\n', '\r', '\n'];
	})();
	(function() {
		$Franca_ContentManager.$fonts = new (ss.makeGenericType(ss.Dictionary$2, [String, ss.makeGenericType($Franca_FileResult$1, [$Franca_Font])]))();
		$Franca_ContentManager.$registeredFonts = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_Gui_MultiFont]))();
		$Franca_ContentManager.$b32infoLoaded = false;
	})();
	(function() {
		$Franca_DebugGraph.width = 210;
		$Franca_DebugGraph.height = 50;
		$Franca_DebugGraph.$batch = null;
		$Franca_DebugGraph.$font = null;
	})();
	(function() {
		$Franca_HttpRequest.$activeRequests = [];
	})();
	(function() {
		$Franca_MainLoop.$gameContainer = null;
		$Franca_MainLoop.$backgroundFps = new ss.TimeSpan(0.0666666666666667 * 10000000);
		$Franca_MainLoop.$lastFrameTime = new ss.TimeSpan(0);
		$Franca_MainLoop.$accumulator = new ss.TimeSpan(0);
		$Franca_MainLoop.$gameTime = new ss.TimeSpan(0);
		$Franca_MainLoop.$fps = 0;
		$Franca_MainLoop.$fpsAccumulator = ss.getDefaultValue(ss.TimeSpan);
		$Franca_MainLoop.$frames = 0;
		$Franca_MainLoop.$running = false;
		$Franca_MainLoop.$fpsPeriod = 0.5;
		$Franca_MainLoop.$idleMs = 200;
		$Franca_MainLoop.$idleFrame$1 = false;
		$Franca_MainLoop.$idleWorker = null;
		$Franca_MainLoop.$sleepTimeout = ss.getDefaultValue(ss.TimeSpan);
		$Franca_MainLoop.$useTimeoutForSleep = true;
		$Franca_MainLoop.$idleWorkerBase64Source = 'dmFyIHRpbWVyID0gbnVsbDsNCg0Kb25tZXNzYWdlID0gZnVuY3Rpb24gKGV2dCkgew0KICAgIHZhciBhcmdzID0gZXZ0LmRhdGE7DQogICAgaWYgKGFyZ3NbMF0gPT0gInN0YXJ0Iikgew0KICAgICAgICBpZiAodGltZXIpIHsNCiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpOw0KICAgICAgICB9DQogICAgICAgIHZhciBtcyA9IGFyZ3NbMV07DQogICAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgcG9zdE1lc3NhZ2UoInRpY2siKTsNCiAgICAgICAgfSwgbXMpOw0KICAgIH0NCiAgICBlbHNlIGlmIChhcmdzWzBdID09ICJzdG9wIikgew0KICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTsNCiAgICB9DQp9Ow==';
	})();
	(function() {
		$Franca_GamepadButton.defaultPressThreshold = 0.2;
	})();
	(function() {
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [String, String]))();
		$t1.add('0d0f', 'HORI');
		$t1.add('d81d', 'iBUFFALO');
		$t1.add('6d04', 'Logitech');
		$t1.add('3807', 'Mad Catz');
		$t1.add('bd12', 'SNES USB');
		$t1.add('7e05', 'Nintendo');
		$t1.add('3628', 'OUYA');
		$t1.add('4c05', 'Sony');
		$t1.add('222c', 'Qanba');
		$t1.add('4f04', 'Thrustmaster');
		$t1.add('5e04', 'Microsoft');
		$Franca_GamepadTypes.vendors = $t1;
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [String, ss.makeGenericType(ss.Dictionary$2, [String, String])]))();
		var $t2 = new (ss.makeGenericType(ss.Dictionary$2, [String, String]))();
		$t2.add('fa2d0100', '3DRUDDER');
		$t2.add('02200090', '8Bitdo NES30 Pro');
		$t2.add('20380900', '8Bitdo NES30 Pro');
		$t2.add('c82d0060', '8Bitdo SF30 Pro');
		$t2.add('c82d0061', '8Bitdo SF30 Pro Wireless');
		$t2.add('10280900', '8Bitdo SFC30 GamePad');
		$t2.add('a0053232', '8Bitdo Zero GamePad');
		$t2.add('8f0e1200', 'Acme');
		$t2.add('341a3608', 'Afterglow PS3 Controller');
		$t2.add('c0111352', 'Battalife Joystick');
		$t2.add('6b140055', 'bigben ps3padstreetnew');
		$t2.add('66f70500', 'BrutalLegendTest');
		$t2.add('d81d0b00', 'BUFFALO BSGP1601 Series ');
		$t2.add('e8206058', 'Cideko AK08b');
		$t2.add('5e04a102', 'Controller (Xbox 360 Wireless Receiver for Windows)');
		$t2.add('5e048e02', 'Controller (XBOX 360 For Windows)');
		$t2.add('26098888', 'Cyber Gadget GameCube Controller');
		$t2.add('a30622f6', 'Cyborg V.3 Rumble Pad');
		$t2.add('791d0103', 'Dual Box WII');
		$t2.add('4f0423b3', 'Dual Trigger 3-in-1');
		$t2.add('341a0108', 'EXEQ RF USB Gamepad 8206');
		$t2.add('0d0f8500', 'Fighting Commander 2016 PS3');
		$t2.add('0d0f8400', 'Fighting Commander 5');
		$t2.add('0d0f8700', 'Fighting Stick mini 4');
		$t2.add('0d0f8800', 'Fighting Stick mini 4');
		$t2.add('0d0f2700', 'FIGHTING STICK V3');
		$t2.add('75740000', 'Fightstick TES');
		$t2.add('79000600', 'G-Shark GS-GP702');
		$t2.add('26092625', 'Gamecube Controller');
		$t2.add('8f0e0d31', 'GAMEPAD 3 TURBO');
		$t2.add('28040140', 'GamePad Pro USB');
		$t2.add('ffff0000', 'GameStop Gamepad');
		$t2.add('45130010', 'Generic USB Joystick');
		$t2.add('341a0302', 'Hama Scorpad');
		$t2.add('0d0f4900', 'Hatsune Miku Sho Controller');
		$t2.add('d8140862', 'HitBox Edition Cthulhu+');
		$t2.add('0d0f5f00', 'Hori Fighting Commander 4 (PS3)');
		$t2.add('0d0f5e00', 'Hori Fighting Commander 4 (PS4)');
		$t2.add('0d0f4000', 'Hori Fighting Stick Mini 3');
		$t2.add('0d0f6e00', 'HORIPAD 4 (PS3)');
		$t2.add('0d0f6600', 'HORIPAD 4 (PS4)');
		$t2.add('0d0fee00', 'HORIPAD mini4');
		$t2.add('0d0f4d00', 'HORIPAD3 A');
		$t2.add('25090017', 'HRAP2 on PS/SS/N64 Joypad to USB BOX');
		$t2.add('8f0e1330', 'HuiJia SNES Controller');
		$t2.add('d81d0f00', 'iBUFFALO BSGP1204 Series');
		$t2.add('d81d1000', 'iBUFFALO BSGP1204P Series');
		$t2.add('83056020', 'iBuffalo SNES Controller');
		$t2.add('b5071403', 'IMPACT BLACK');
		$t2.add('6f0e2401', 'INJUSTICE FightStick for PS3');
		$t2.add('49190204', 'Ipega PG-9023');
		$t2.add('6d0411c2', 'Logitech Cordless Wingman');
		$t2.add('6d0416c2', 'Logitech Dual Action');
		$t2.add('6d0418c2', 'Logitech F510 Gamepad');
		$t2.add('6d0419c2', 'Logitech F710 Gamepad');
		$t2.add('38075032', 'Mad Catz FightPad PRO (PS3)');
		$t2.add('38075082', 'Mad Catz FightPad PRO (PS4)');
		$t2.add('38078433', 'Mad Catz FightStick TE S+ PS3');
		$t2.add('38078483', 'Mad Catz FightStick TE S+ PS4');
		$t2.add('38078134', 'Mad Catz FightStick TE2+ PS3');
		$t2.add('38078184', 'Mad Catz FightStick TE2+ PS4');
		$t2.add('38078034', 'Mad Catz TE2 PS3 Fightstick');
		$t2.add('38078084', 'Mad Catz TE2 PS4 Fightstick');
		$t2.add('38078532', 'Madcatz Arcade Fightstick TE S PS3');
		$t2.add('38073888', 'Madcatz Arcade Fightstick TE S+ PS3');
		$t2.add('38071888', 'MadCatz SFIV FightStick PS3');
		$t2.add('38078081', 'MADCATZ SFV Arcade FightStick Alpha PS4');
		$t2.add('830531b0', 'MaxfireBlaze3');
		$t2.add('25090128', 'Mayflash Arcade Stick');
		$t2.add('79004418', 'Mayflash GameCube Controller');
		$t2.add('79004318', 'Mayflash GameCube Controller Adapter');
		$t2.add('8f0e1030', 'Mayflash USB Adapter for original Sega Saturn controller');
		$t2.add('2509e803', 'Mayflash Wii Classic Controller');
		$t2.add('79000018', 'Mayflash WiiU Pro Game Controller Adapter (DInput)');
		$t2.add('25096688', 'MP-8866 Super Dual Box');
		$t2.add('100801e5', 'NEXT SNES Controller');
		$t2.add('bd1215d0', 'Nintendo Retrolink USB Super SNES Classic Controller');
		$t2.add('7e050920', 'Nintendo Switch Pro Controller');
		$t2.add('7e050620', 'Joy-Con (L)');
		$t2.add('7e050720', 'Joy-Con (R)');
		$t2.add('4b12014d', 'NYKO AIRFLO');
		$t2.add('36280100', 'OUYA Game Controller');
		$t2.add('120cf60e', 'P4 Wired Gamepad');
		$t2.add('8f0e0300', 'Piranha xtreme');
		$t2.add('d6206dca', 'PowerA Pro Ex');
		$t2.add('8f0e7530', 'PS (R) Gamepad');
		$t2.add('e3059605', 'PS to USB convert cable');
		$t2.add('10080100', 'PS1 USB');
		$t2.add('10080300', 'PS2 USB');
		$t2.add('4c056802', 'PS3 Controller');
		$t2.add('88880803', 'PS3 Controller');
		$t2.add('25090500', 'PS3 DualShock');
		$t2.add('10008200', 'PS360+ v1.66');
		$t2.add('4c05a00b', 'PS4 Controller');
		$t2.add('4c05c405', 'PS4 Controller');
		$t2.add('4c05cc09', 'PS4 Controller');
		$t2.add('300f0011', 'QanBa Arcade JoyStick 1008');
		$t2.add('300f1611', 'QanBa Arcade JoyStick 4018');
		$t2.add('222c0020', 'QANBA DRONE ARCADE JOYSTICK');
		$t2.add('300f1210', 'QanBa Joystick Plus');
		$t2.add('341a0104', 'QanBa Joystick Q4RAF');
		$t2.add('222c0223', 'Qanba Obsidian Arcade Joystick PS3 Mode');
		$t2.add('222c0023', 'Qanba Obsidian Arcade Joystick PS4 Mode');
		$t2.add('32150003', 'Razer Hydra');
		$t2.add('0d0f1100', 'REAL ARCADE PRO.3');
		$t2.add('0d0f6a00', 'Real Arcade Pro.4');
		$t2.add('0d0f6b00', 'Real Arcade Pro.4');
		$t2.add('0d0f8a00', 'Real Arcade Pro.4');
		$t2.add('0d0f8b00', 'Real Arcade Pro.4');
		$t2.add('0d0f7000', 'REAL ARCADE PRO.4 VLX');
		$t2.add('0d0f2200', 'REAL ARCADE Pro.V3');
		$t2.add('0d0f5b00', 'Real Arcade Pro.V4');
		$t2.add('0d0f5c00', 'Real Arcade Pro.V4');
		$t2.add('79001100', 'Retrolink SNES Controller');
		$t2.add('00f00300', 'RetroUSB.com RetroPad');
		$t2.add('00f0f100', 'RetroUSB.com Super RetroPort');
		$t2.add('6b14010d', 'Revolution Pro Controller');
		$t2.add('6f0e1e01', 'Rock Candy Gamepad for PS3');
		$t2.add('4f0403d0', "run'n'drive");
		$t2.add('a3061af5', 'Saitek Cyborg');
		$t2.add('a30623f6', 'Saitek Cyborg V.1 Game pad');
		$t2.add('300f1201', 'Saitek Dual Analog Pad');
		$t2.add('a3060cff', 'Saitek P2500 Force Rumble Pad');
		$t2.add('a3060c04', 'Saitek P2900');
		$t2.add('300f1001', 'Saitek P480 Rumble Pad');
		$t2.add('a3060b04', 'Saitek P990 Dual Analog Pad');
		$t2.add('300f1101', 'saitek rumble pad');
		$t2.add('0005289b', 'Saturn_Adapter_2.0');
		$t2.add('9b280500', 'Saturn_Adapter_2.0');
		$t2.add('341a0208', 'SL-6555-SBK');
		$t2.add('8f0e0800', 'SpeedLink Strike FX Wireless');
		$t2.add('ff113133', 'SVEN X-PAD');
		$t2.add('fa190706', 'Team 5');
		$t2.add('b5071203', 'Techmobility X6-38V');
		$t2.add('4f0415b3', 'Thrustmaster Dual Analog 2');
		$t2.add('4f0400b3', 'Thrustmaster Firestorm Dual Power');
		$t2.add('4f0404b3', 'Thrustmaster Firestorm Dual Power 3');
		$t2.add('66660488', 'TigerGame PS/PS2 Game Controller Adapter');
		$t2.add('d9040200', 'TwinShock PS2');
		$t2.add('38076652', 'UnKnown');
		$t2.add('63252305', 'USB Vibration Joystick (BM)');
		$t2.add('79001b18', 'Venom Arcade Joystick');
		$t2.add('450c2043', 'XEOX Gamepad SL-6556-BK');
		$t2.add('17274431', 'XiaoMi Game Controller');
		$t2.add('78696e70', 'XInput Controller');
		$t1.add('Windows', $t2);
		var $t3 = new (ss.makeGenericType(ss.Dictionary$2, [String, String]))();
		$t3.add('02200090', '8Bitdo NES30 Pro');
		$t3.add('c82d0190', '8Bitdo NES30 Pro');
		$t3.add('20380900', '8Bitdo NES30 Pro');
		$t3.add('10280900', '8Bitdo SFC30 GamePad Joystick');
		$t3.add('a0053232', '8Bitdo Zero GamePad');
		$t3.add('830531b0', 'Cideko AK08b');
		$t3.add('26098888', 'Cyber Gadget GameCube Controller');
		$t3.add('a30622f6', 'Cyborg V.3 Rumble Pad');
		$t3.add('79000600', 'G-Shark GP-702');
		$t3.add('ad1b01f9', 'Gamestop BB-070 X360 Controller');
		$t3.add('4753616d', 'GameStop Gamepad');
		$t3.add('0d0f5f00', 'HORI Fighting Commander 4 PS3');
		$t3.add('0d0f5e00', 'HORI Fighting Commander 4 PS4');
		$t3.add('0d0f4d00', 'HORI Gem Pad 3');
		$t3.add('0d0f6e00', 'HORIPAD 4 (PS3)');
		$t3.add('0d0f6600', 'HORIPAD FPS PLUS 4');
		$t3.add('8f0e1330', 'HuiJia SNES Controller');
		$t3.add('83056020', 'iBuffalo USB 2-axis 8-button Gamepad');
		$t3.add('6d0416c2', 'Logitech F310 Gamepad (DInput)');
		$t3.add('6d0418c2', 'Logitech F510 Gamepad (DInput)');
		$t3.add('6d041fc2', 'Logitech F710 Gamepad (XInput)');
		$t3.add('6d0419c2', 'Logitech Wireless Gamepad (DInput)');
		$t3.add('38075032', 'Mad Catz FightPad PRO (PS3)');
		$t3.add('38075082', 'Mad Catz FightPad PRO (PS4)');
		$t3.add('79004418', 'Mayflash GameCube Controller');
		$t3.add('2509e803', 'Mayflash Wii Classic Controller');
		$t3.add('79000018', 'Mayflash WiiU Pro Game Controller Adapter (DInput)');
		$t3.add('d814cecf', 'MC Cthulhu');
		$t3.add('100801e5', 'NEXT SNES Controller');
		$t3.add('7e050920', 'Nintendo Switch Pro Controller');
		$t3.add('7e050620', 'Joy-Con (L)');
		$t3.add('7e050720', 'Joy-Con (R)');
		$t3.add('8f0e0300', 'Piranha xtreme');
		$t3.add('d6206dca', 'PowerA Pro Ex');
		$t3.add('4c056802', 'PS3 Controller');
		$t3.add('4c05a00b', 'Sony DualShock 4 Wireless Adaptor');
		$t3.add('4c05c405', 'PS4 Controller');
		$t3.add('4c05cc09', 'Sony DualShock 4 V2');
		$t3.add('891600fd', 'Razer Onza TE');
		$t3.add('32150010', 'Razer RAIJU');
		$t3.add('3215030a', 'Razer Wildcat');
		$t3.add('79001100', 'Retrolink SNES Controller');
		$t3.add('6b14010d', 'Revolution Pro Controller');
		$t3.add('c624fefa', 'Rock Candy Gamepad for PS3');
		$t3.add('81177e05', 'Sega Saturn');
		$t3.add('b4040a01', 'Sega Saturn USB Gamepad');
		$t3.add('351221ab', 'SFC30 Joystick');
		$t3.add('5e048e02', 'X360 Controller');
		$t3.add('11012014', 'SteelSeries Nimbus');
		$t3.add('38102014', 'SteelSeries Nimbus');
		$t3.add('11011714', 'SteelSeries Stratus XL');
		$t3.add('4f0415b3', 'Thrustmaster Dual Analog 3.2');
		$t3.add('4f0400b3', 'Thrustmaster Firestorm Dual Power');
		$t3.add('bd1215d0', 'Tomee SNES USB Controller');
		$t3.add('10080100', 'Twin USB Joystick');
		$t3.add('57696f74', 'Wii U Pro Controller');
		$t3.add('c624045d', 'Xbox 360 Wired Controller');
		$t3.add('5e04d102', 'Xbox One Wired Controller');
		$t3.add('5e04dd02', 'Xbox One Wired Controller');
		$t3.add('5e04e302', 'Xbox One Wired Controller');
		$t3.add('5e04e002', 'Xbox Wireless Controller');
		$t3.add('5e04ea02', 'Xbox Wireless Controller');
		$t3.add('5e04fd02', 'Xbox Wireless Controller');
		$t3.add('17274431', 'XiaoMi Game Controller');
		$t3.add('120c100e', 'ZEROPLUS P4 Gamepad');
		$t1.add('Mac OS X', $t3);
		var $t4 = new (ss.makeGenericType(ss.Dictionary$2, [String, String]))();
		$t4.add('02200090', '8Bitdo NES30 Pro');
		$t4.add('20380900', '8Bitdo NES30 Pro');
		$t4.add('c82d2038', '8Bitdo NES30 Pro');
		$t4.add('c82d0061', '8Bitdo SF30 Pro');
		$t4.add('c82d0190', '8Bitdo NES30 Pro 8Bitdo NES30 Pro');
		$t4.add('10280900', '8Bitdo SFC30 GamePad');
		$t4.add('c82d3028', '8Bitdo SFC30 GamePad');
		$t4.add('a0053232', '8Bitdo Zero GamePad');
		$t4.add('6f0e3901', 'Afterglow Wired Controller for Xbox One');
		$t4.add('10008200', 'Akishop Customs PS360+ v1.66');
		$t4.add('050b0045', 'ASUS Gamepad');
		$t4.add('66666706', 'boom PSX to PC Converter');
		$t4.add('e8206058', 'Cideko AK08b');
		$t4.add('26098888', 'Cyber Gadget GameCube Controller');
		$t4.add('a30622f6', 'Cyborg V.3 Rumble Pad');
		$t4.add('b4040a01', 'CYPRESS USB Gamepad');
		$t4.add('79000600', 'DragonRise Inc. Generic USB Joystick');
		$t4.add('6f0e3001', 'EA Sports PS3 Controller');
		$t4.add('341a05f7', 'GameCube {HuiJia USB box}');
		$t4.add('4753616d', 'GS gamepad');
		$t4.add('6f0e0104', 'Gamestop Logic3 Controller');
		$t4.add('6f0e1304', 'Generic X-Box pad');
		$t4.add('6f0e1f01', 'Generic X-Box pad');
		$t4.add('f025c183', 'Goodbetterbest Ltd USB Controller');
		$t4.add('7900d418', 'GPD Win 2 Controller');
		$t4.add('28040140', 'Gravis GamePad Pro USB ');
		$t4.add('8f0e0610', 'GreenAsia Electronics 4Axes 12Keys GamePad ');
		$t4.add('8f0e0300', 'GreenAsia Inc. USB Joystick');
		$t4.add('8f0e1200', 'GreenAsia Inc. USB Joystick');
		$t4.add('addeefbe', 'Hidromancer Game Controller');
		$t4.add('d8140862', 'HitBox (PS3/PC) Analog Mode');
		$t4.add('c911f055', 'HJC Game GAMEPAD');
		$t4.add('0d0f0d00', 'hori');
		$t4.add('0d0f1000', 'HORI CO. LTD. FIGHTING STICK 3');
		$t4.add('0d0f6a00', 'HORI CO. LTD. Real Arcade Pro.4');
		$t4.add('0d0f6b00', 'HORI CO. LTD. Real Arcade Pro.4');
		$t4.add('0d0f2200', 'HORI CO. LTD. REAL ARCADE Pro.V3');
		$t4.add('0d0f5f00', 'Hori Fighting Commander 4 (PS3)');
		$t4.add('0d0f5e00', 'Hori Fighting Commander 4 (PS4)');
		$t4.add('ad1b01f5', 'Hori Pad EX Turbo 2');
		$t4.add('0d0f6e00', 'HORIPAD 4 (PS3)');
		$t4.add('0d0f6600', 'HORIPAD 4 (PS4)');
		$t4.add('0d0f6700', 'HORIPAD ONE');
		$t4.add('8f0e1330', 'HuiJia SNES Controller');
		$t4.add('83056020', 'iBuffalo SNES Controller');
		$t4.add('69646964', 'idroid:con');
		$t4.add('b5071503', 'impact');
		$t4.add('fd050030', 'InterAct GoPad I-73000 (Fighting Game Layout)');
		$t4.add('49190204', 'Ipega PG-9069 - Bluetooth Gamepad');
		$t4.add('6e050320', 'JC-U3613M - DirectInput Mode');
		$t4.add('300f1001', 'Jess Tech Dual Analog Rumble Pad');
		$t4.add('ba222010', 'Jess Technology USB Game Controller');
		$t4.add('6f0e0103', 'Logic3 Controller');
		$t4.add('6d0419c2', 'Logitech F710 Gamepad (DInput)');
		$t4.add('6d0416c2', 'Logitech Dual Action');
		$t4.add('6d041dc2', 'Logitech F310 Gamepad (XInput)');
		$t4.add('6d041ec2', 'Logitech F510 Gamepad (XInput)');
		$t4.add('6d041fc2', 'Logitech F710 Gamepad (XInput)');
		$t4.add('6d0415c2', 'Logitech Logitech Extreme 3D');
		$t4.add('6d0418c2', 'Logitech RumblePad 2');
		$t4.add('6d0411c2', 'Logitech WingMan Cordless RumblePad');
		$t4.add('38076652', 'Mad Catz C.T.R.L.R ');
		$t4.add('38075032', 'Mad Catz FightPad PRO (PS3)');
		$t4.add('38075082', 'Mad Catz FightPad PRO (PS4)');
		$t4.add('ad1b2ef0', 'Mad Catz Fightpad SFxT');
		$t4.add('38078034', 'Mad Catz fightstick (PS3)');
		$t4.add('38078084', 'Mad Catz fightstick (PS4)');
		$t4.add('38078433', 'Mad Catz FightStick TE S+ PS3');
		$t4.add('38078483', 'Mad Catz FightStick TE S+ PS4');
		$t4.add('38071647', 'Mad Catz Wired Xbox 360 Controller');
		$t4.add('38073847', 'Mad Catz Wired Xbox 360 Controller (SFIV)');
		$t4.add('ad1b16f0', 'Mad Catz Xbox 360 Controller');
		$t4.add('38071888', 'MadCatz PC USB Wired Stick 8818');
		$t4.add('38073888', 'MadCatz PC USB Wired Stick 8838');
		$t4.add('7900d218', 'MAGIC-NS');
		$t4.add('79004418', 'Mayflash GameCube Controller');
		$t4.add('78000600', 'Microntek USB Joystick');
		$t4.add('5e040e00', 'Microsoft SideWinder');
		$t4.add('5e048e02', 'X360 Controller');
		$t4.add('5e04e302', 'Microsoft X-Box One Elite pad');
		$t4.add('5e04d102', 'Microsoft X-Box One pad v2');
		$t4.add('5e048502', 'Microsoft X-Box pad (Japan)');
		$t4.add('5e048902', 'Microsoft X-Box pad v2 (US)');
		$t4.add('d620ad0d', 'Moga Pro');
		$t4.add('25096688', 'MP-8866 Super Dual Box');
		$t4.add('100801e5', 'NEXT SNES Controller');
		$t4.add('7e050920', 'Nintendo Switch Pro Controller');
		$t4.add('7e050620', 'Joy-Con (L)');
		$t4.add('7e050720', 'Joy-Con (R)');
		$t4.add('7e053003', 'Nintendo Wii Remote Pro Controller');
		$t4.add('01000100', 'Nintendo Wiimote');
		$t4.add('0d050308', 'Nostromo n45 Dual Analog Gamepad');
		$t4.add('55091072', 'NVIDIA Controller');
		$t4.add('45130830', 'NYKO CORE');
		$t4.add('5e040202', 'Old Xbox pad');
		$t4.add('36280100', 'OUYA Game Controller');
		$t4.add('ff113133', 'PC Game Controller');
		$t4.add('6f0e6401', 'PDP Battlefield One');
		$t4.add('d6206dca', 'PowerA Pro Ex');
		$t4.add('ff114133', 'PS2 Controller');
		$t4.add('341a3608', 'PS3 Controller');
		$t4.add('4c056802', 'PS3 Controller (Bluetooth)');
		$t4.add('504c5354', 'PS3 Controller (Bluetooth)');
		$t4.add('4c05a00b', 'PS4 Controller');
		$t4.add('4c05c405', 'PS4 Controller');
		$t4.add('4c05cc09', 'PS4 Controller');
		$t4.add('300f1211', 'QanBa Arcade JoyStick');
		$t4.add('9b280300', 'raphnet.net 4nes4snes v1.5');
		$t4.add('891601fd', 'Razer Onza Classic Edition');
		$t4.add('891600fd', 'Razer Onza Tournament');
		$t4.add('32150010', 'Razer RAIJU');
		$t4.add('c624045d', 'Razer Sabertooth');
		$t4.add('32150009', 'Razer Serval');
		$t4.add('3215030a', 'Razer Wildcat');
		$t4.add('79001100', 'USB Gamepad1');
		$t4.add('00f00300', 'RetroUSB.com RetroPad');
		$t4.add('00f0f100', 'RetroUSB.com Super RetroPort');
		$t4.add('6b14010d', 'Revolution Pro Controller');
		$t4.add('6f0e1e01', 'Rock Candy Gamepad for PS3');
		$t4.add('6f0e4601', 'Rock Candy Wired Controller for Xbox One');
		$t4.add('a30623f6', 'Saitek Cyborg V.1 Game Pad');
		$t4.add('a3060cff', 'Saitek P2500 Force Rumble Pad');
		$t4.add('a3060c04', 'Saitek P2900 Wireless Pad');
		$t4.add('a3060901', 'Saitek P880');
		$t4.add('a3060b04', 'Saitek P990 Dual Analog Pad');
		$t4.add('a30618f5', 'Saitek PLC Saitek P3200 Rumble Pad');
		$t4.add('c0168704', 'Serial/Keyboard/Mouse/Joystick');
		$t4.add('f02521c1', 'ShanWan Gioteck PS3 Wired Controller');
		$t4.add('63257505', 'SHANWAN PS3/PC Gamepad');
		$t4.add('25090500', 'Sony PS2 pad with SmartJoy adapter');
		$t4.add('de280112', 'Steam Controller');
		$t4.add('de280211', 'Steam Controller');
		$t4.add('de284211', 'Steam Controller');
		$t4.add('de28fc11', 'Steam Controller');
		$t4.add('de280212', 'Steam Controller');
		$t4.add('de280511', 'Steam Controller');
		$t4.add('de28ff11', 'Steam Virtual Gamepad');
		$t4.add('ad1b38f0', 'Street Fighter IV FightStick TE');
		$t4.add('66660488', 'Super Joy Box 5 Pro');
		$t4.add('4f0420b3', 'Thrustmaster 2 in 1 DT');
		$t4.add('4f0415b3', 'Thrustmaster Dual Analog 4');
		$t4.add('4f0423b3', 'Thrustmaster Dual Trigger 3-in-1');
		$t4.add('4f0400b3', 'Thrustmaster Firestorm Dual Power');
		$t4.add('4f0408d0', 'Thrustmaster Run N Drive Wireless');
		$t4.add('4f0409d0', 'Thrustmaster Run N Drive Wireless PS3');
		$t4.add('bd1215d0', 'Tomee SNES USB Controller');
		$t4.add('d81407cd', 'Toodles 2008 Chimp PC/PS3');
		$t4.add('10080100', 'Twin USB PS2 Adapter');
		$t4.add('10080300', 'USB Gamepad');
		$t4.add('ac053232', 'VR-BOX');
		$t4.add('5e041907', 'X360 Wireless Controller');
		$t4.add('5e049102', 'X360 Wireless Controller');
		$t4.add('5e04a102', 'Xbox 360 Wireless Receiver (XBOX)');
		$t4.add('58622033', 'Xbox 360 Wireless Controller');
		$t4.add('58622047', 'Xbox Gamepad (userspace driver)');
		$t4.add('5e04ea02', 'Xbox One Wireless Controller');
		$t4.add('5e04e002', 'Xbox One Wireless Controller');
		$t4.add('5e04fd02', 'Xbox One Wireless Controller');
		$t4.add('450c2043', 'XEOX Gamepad SL-6556-BK');
		$t4.add('17274431', 'XiaoMi Game Controller');
		$t4.add('c016e105', 'Xin-Mo Xin-Mo Dual Arcade');
		$t4.add('120c100e', 'ZEROPLUS P4 Gamepad');
		$t4.add('120c0500', 'AxisPad');
		$t1.add('Linux', $t4);
		var $t5 = new (ss.makeGenericType(ss.Dictionary$2, [String, String]))();
		$t5.add('31396664', 'Microsoft X-Box 360 pad');
		$t5.add('66633565', 'NVIDIA Controller');
		$t5.add('49416f72', 'NVIDIA Controller');
		$t5.add('65616130', 'NVIDIA Controller');
		$t5.add('30306130', 'PS4 Controller');
		$t5.add('de280511', 'Steam Controller');
		$t5.add('2055204a', 'Twin USB Joystick');
		$t5.add('63333530', 'Xbox Wireless Controller');
		$t1.add('Android', $t5);
		var $t6 = new (ss.makeGenericType(ss.Dictionary$2, [String, String]))();
		$t6.add('616d6164', 'MFi Gamepad');
		$t6.add('de280511', 'Steam Controller');
		$t1.add('iOS', $t6);
		$Franca_GamepadTypes.platforms = $t1;
	})();
	(function() {
		$Franca_Gamepad.defaultLeftDeadZone = 0.239532470703125;
		$Franca_Gamepad.defaultRightDeadZone = 0.265167236328125;
	})();
	(function() {
		$Franca_JS_NonBlockingAlert.$uniqueAlerts = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_JS_NonBlockingAlert]))();
		$Franca_JS_NonBlockingAlert.$idGen = new Franca.IDGenerator();
	})();
	(function() {
		$Franca_KeyExtensions.$platformInputProvider = null;
	})();
	(function() {
		$Franca_KeyboardButton.sharedKeyBit = 8388608;
		$Franca_KeyboardButton.scanCodeBit = 4194304;
	})();
	(function() {
		$Franca_JSInput.mappingWarningFmt = 'gamepad mapping warning for player {0}';
		var $t1 = [];
		$t1.push(18);
		$t1.push(8);
		$t1.push(20);
		$t1.push(17);
		$t1.push(46);
		$t1.push(40);
		$t1.push(35);
		$t1.push(13);
		$t1.push(27);
		$t1.push(112);
		$t1.push(113);
		$t1.push(114);
		$t1.push(115);
		$t1.push(116);
		$t1.push(117);
		$t1.push(118);
		$t1.push(119);
		$t1.push(120);
		$t1.push(121);
		$t1.push(122);
		$t1.push(123);
		$t1.push(36);
		$t1.push(45);
		$t1.push(37);
		$t1.push(91);
		$t1.push(93);
		$t1.push(144);
		$t1.push(96);
		$t1.push(97);
		$t1.push(98);
		$t1.push(99);
		$t1.push(100);
		$t1.push(101);
		$t1.push(102);
		$t1.push(103);
		$t1.push(104);
		$t1.push(105);
		$t1.push(34);
		$t1.push(33);
		$t1.push(19);
		$t1.push(39);
		$t1.push(92);
		$t1.push(145);
		$t1.push(16);
		$t1.push(32);
		$t1.push(9);
		$t1.push(38);
		$Franca_JSInput.$specialKeys = $t1;
		$Franca_JSInput.$initialized = false;
		$Franca_JSInput.$hasUIEventSupport = false;
		$Franca_JSInput.$firefoxGamepadIDRegex = new Franca.Text.Regex('^([0-9a-f][0-9a-f]?[0-9a-f]?[0-9a-f]?)-([0-9a-f][0-9a-f]?[0-9a-f]?[0-9a-f]?)-\\s*(.*)\\s*$', 1);
		$Franca_JSInput.$chromeGamepadIDRegex = new Franca.Text.Regex('^(.*)\\s*\\(.*vendor:?\\s*([0-9a-f][0-9a-f]?[0-9a-f]?[0-9a-f]?)\\s+product:?\\s*([0-9a-f][0-9a-f]?[0-9a-f]?[0-9a-f]?)\\s*\\)\\s*$', 1);
		$Franca_JSInput.$gamepadVendorRegex = new Franca.Text.Regex('vendor:?\\s*([0-9a-f][0-9a-f]?[0-9a-f]?[0-9a-f]?)(?:[^0-9a-f]|$)', 1);
		$Franca_JSInput.$gamepadProductRegex = new Franca.Text.Regex('product:?\\s*([0-9a-f][0-9a-f]?[0-9a-f]?[0-9a-f]?)(?:[^0-9a-f]|$)', 1);
		$Franca_JSInput.$gamepadRemoveParentheses = new Franca.Text.Regex('\\s*\\(.*\\)', 4);
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [String, $Franca_Key]))();
		$t1.add('ShiftLeft', 16);
		$t1.add('ShiftRight', 16);
		$t1.add('ControlLeft', 17);
		$t1.add('ControlRight', 17);
		$t1.add('AltLeft', 18);
		$t1.add('AltRight', 18);
		$t1.add('Pause', 19);
		$t1.add('ArrowLeft', 37);
		$t1.add('ArrowRight', 39);
		$t1.add('ArrowUp', 38);
		$t1.add('ArrowDown', 40);
		$t1.add('Digit0', 48);
		$t1.add('Digit1', 49);
		$t1.add('Digit2', 50);
		$t1.add('Digit3', 51);
		$t1.add('Digit4', 52);
		$t1.add('Digit5', 53);
		$t1.add('Digit6', 54);
		$t1.add('Digit7', 55);
		$t1.add('Digit8', 56);
		$t1.add('Digit9', 57);
		$t1.add('Equal', 187);
		$t1.add('KeyA', 65);
		$t1.add('KeyB', 66);
		$t1.add('KeyC', 67);
		$t1.add('KeyD', 68);
		$t1.add('KeyE', 69);
		$t1.add('KeyF', 70);
		$t1.add('KeyG', 71);
		$t1.add('KeyH', 72);
		$t1.add('KeyI', 73);
		$t1.add('KeyJ', 74);
		$t1.add('KeyK', 75);
		$t1.add('KeyL', 76);
		$t1.add('KeyM', 77);
		$t1.add('KeyN', 78);
		$t1.add('KeyO', 79);
		$t1.add('KeyP', 80);
		$t1.add('KeyQ', 81);
		$t1.add('KeyR', 82);
		$t1.add('KeyS', 83);
		$t1.add('KeyT', 84);
		$t1.add('KeyU', 85);
		$t1.add('KeyV', 86);
		$t1.add('KeyW', 87);
		$t1.add('KeyX', 88);
		$t1.add('KeyY', 89);
		$t1.add('KeyZ', 90);
		$t1.add('OSLeft', 91);
		$t1.add('OSRight', 92);
		$t1.add('ContextMenu', 93);
		$t1.add('NumpadClear', 101);
		$t1.add('NumpadAdd', 107);
		$t1.add('NumpadSubtract', 109);
		$t1.add('NumpadDecimal', 110);
		$t1.add('NumpadDivide', 111);
		$t1.add('Backquote', 192);
		$t1.add('BracketLeft', 219);
		$t1.add('BracketRight', 221);
		$Franca_JSInput.$uiEventCodeToKey = $t1;
	})();
	(function() {
		$Franca_InputHandler.maxGamepads = 4;
		$Franca_InputHandler.$base64TypeCache = new (ss.makeGenericType(ss.Dictionary$2, [String, Function]))();
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_Key, String]))();
		$t1.add(48, 'Base64Images.KbMouse.Keyboard_{0}_0');
		$t1.add(49, 'Base64Images.KbMouse.Keyboard_{0}_1');
		$t1.add(50, 'Base64Images.KbMouse.Keyboard_{0}_2');
		$t1.add(51, 'Base64Images.KbMouse.Keyboard_{0}_3');
		$t1.add(52, 'Base64Images.KbMouse.Keyboard_{0}_4');
		$t1.add(53, 'Base64Images.KbMouse.Keyboard_{0}_5');
		$t1.add(54, 'Base64Images.KbMouse.Keyboard_{0}_6');
		$t1.add(55, 'Base64Images.KbMouse.Keyboard_{0}_7');
		$t1.add(56, 'Base64Images.KbMouse.Keyboard_{0}_8');
		$t1.add(57, 'Base64Images.KbMouse.Keyboard_{0}_9');
		$t1.add(27, 'Base64Images.KbMouse.Keyboard_{0}_Esc');
		$t1.add(187, 'Base64Images.KbMouse.Keyboard_{0}_Plus');
		$t1.add(219, 'Base64Images.KbMouse.Keyboard_{0}_Bracket_Left');
		$t1.add(221, 'Base64Images.KbMouse.Keyboard_{0}_Bracket_Right');
		$t1.add(192, 'Base64Images.KbMouse.Keyboard_{0}_Tilda');
		$t1.add(188, 'Base64Images.KbMouse.Keyboard_{0}_Mark_Left');
		$t1.add(190, 'Base64Images.KbMouse.Keyboard_{0}_Mark_Right');
		$t1.add(20, 'Base64Images.KbMouse.Keyboard_{0}_Caps_Lock');
		$t1.add(33, 'Base64Images.KbMouse.Keyboard_{0}_Page_Up');
		$t1.add(46, 'Base64Images.KbMouse.Keyboard_{0}_Del');
		$t1.add(34, 'Base64Images.KbMouse.Keyboard_{0}_Page_Down');
		$t1.add(39, 'Base64Images.KbMouse.Keyboard_{0}_Arrow_Right');
		$t1.add(37, 'Base64Images.KbMouse.Keyboard_{0}_Arrow_Left');
		$t1.add(40, 'Base64Images.KbMouse.Keyboard_{0}_Arrow_Down');
		$t1.add(38, 'Base64Images.KbMouse.Keyboard_{0}_Arrow_Up');
		$t1.add(144, 'Base64Images.KbMouse.Keyboard_{0}_Num_Lock');
		$t1.add(111, 'Base64Images.KbMouse.Keyboard_{0}_Slash');
		$t1.add(106, 'Base64Images.KbMouse.Keyboard_{0}_Asterisk');
		$t1.add(109, 'Base64Images.KbMouse.Keyboard_{0}_Minus');
		$t1.add(107, 'Base64Images.KbMouse.Keyboard_{0}_Plus_Tall');
		$t1.add(18, 'Base64Images.KbMouse.Keyboard_{0}_Alt');
		$t1.add(96, 'Base64Images.KbMouse.Keyboard_{0}_Insert');
		$t1.add(97, 'Base64Images.KbMouse.Keyboard_{0}_End');
		$t1.add(98, 'Base64Images.KbMouse.Keyboard_{0}_Arrow_Down');
		$t1.add(99, 'Base64Images.KbMouse.Keyboard_{0}_Page_Down');
		$t1.add(100, 'Base64Images.KbMouse.Keyboard_{0}_Arrow_Left');
		$t1.add(101, 'Base64Images.KbMouse.Keyboard_{0}_5');
		$t1.add(102, 'Base64Images.KbMouse.Keyboard_{0}_Arrow_Right');
		$t1.add(103, 'Base64Images.KbMouse.Keyboard_{0}_Home');
		$t1.add(104, 'Base64Images.KbMouse.Keyboard_{0}_Arrow_Up');
		$t1.add(105, 'Base64Images.KbMouse.Keyboard_{0}_Page_Up');
		$t1.add(110, 'Base64Images.KbMouse.Keyboard_{0}_Del');
		$t1.add(17, 'Base64Images.KbMouse.Keyboard_{0}_Ctrl');
		$Franca_InputHandler.$keyImages = $t1;
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_GamepadButtons, String]))();
		$t1.add(3, 'Base64Images.NintendoSwitch.Switch_X');
		$t1.add(2, 'Base64Images.NintendoSwitch.Switch_Y');
		$t1.add(1, 'Base64Images.NintendoSwitch.Switch_A');
		$t1.add(0, 'Base64Images.NintendoSwitch.Switch_B');
		$t1.add(4, 'Base64Images.NintendoSwitch.Switch_LB');
		$t1.add(5, 'Base64Images.NintendoSwitch.Switch_RB');
		$t1.add(6, 'Base64Images.NintendoSwitch.Switch_LT');
		$t1.add(7, 'Base64Images.NintendoSwitch.Switch_RT');
		$t1.add(12, 'Base64Images.NintendoSwitch.Switch_Up');
		$t1.add(14, 'Base64Images.NintendoSwitch.Switch_Left');
		$t1.add(15, 'Base64Images.NintendoSwitch.Switch_Right');
		$t1.add(13, 'Base64Images.NintendoSwitch.Switch_Down');
		$t1.add(10, 'Base64Images.NintendoSwitch.Switch_Left-Stick');
		$t1.add(11, 'Base64Images.NintendoSwitch.Switch_Right_Stick');
		$t1.add(8, 'Base64Images.NintendoSwitch.Switch_Minus');
		$t1.add(9, 'Base64Images.NintendoSwitch.Switch_Plus');
		$t1.add(16, 'Base64Images.NintendoSwitch.Switch_Home');
		$Franca_InputHandler.$switchButtons = $t1;
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_GamepadButtons, String]))();
		$t1.add(3, 'Base64Images.XboxOne.XboxOne_Y');
		$t1.add(2, 'Base64Images.XboxOne.XboxOne_X');
		$t1.add(1, 'Base64Images.XboxOne.XboxOne_B');
		$t1.add(0, 'Base64Images.XboxOne.XboxOne_A');
		$t1.add(4, 'Base64Images.XboxOne.XboxOne_LB');
		$t1.add(5, 'Base64Images.XboxOne.XboxOne_RB');
		$t1.add(6, 'Base64Images.XboxOne.XboxOne_LT');
		$t1.add(7, 'Base64Images.XboxOne.XboxOne_RT');
		$t1.add(12, 'Base64Images.XboxOne.XboxOne_Dpad_Up');
		$t1.add(14, 'Base64Images.XboxOne.XboxOne_Dpad_Left');
		$t1.add(15, 'Base64Images.XboxOne.XboxOne_Dpad_Right');
		$t1.add(13, 'Base64Images.XboxOne.XboxOne_Dpad_Down');
		$t1.add(10, 'Base64Images.XboxOne.XboxOne_Left_Stick');
		$t1.add(11, 'Base64Images.XboxOne.XboxOne_Right_Stick');
		$t1.add(8, 'Base64Images.XboxOne.XboxOne_Windows');
		$t1.add(9, 'Base64Images.XboxOne.XboxOne_Menu');
		$t1.add(16, null);
		$Franca_InputHandler.$xbOneButtons = $t1;
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_GamepadButtons, String]))();
		$t1.add(3, 'Base64Images.PlayStation4.PS4_Triangle');
		$t1.add(2, 'Base64Images.PlayStation4.PS4_Square');
		$t1.add(1, 'Base64Images.PlayStation4.PS4_Circle');
		$t1.add(0, 'Base64Images.PlayStation4.PS4_Cross');
		$t1.add(4, 'Base64Images.PlayStation4.PS4_L1');
		$t1.add(5, 'Base64Images.PlayStation4.PS4_R2');
		$t1.add(6, 'Base64Images.PlayStation4.PS4_L2');
		$t1.add(7, 'Base64Images.PlayStation4.PS4_R2');
		$t1.add(12, 'Base64Images.PlayStation4.PS4_Dpad_Up');
		$t1.add(14, 'Base64Images.PlayStation4.PS4_Dpad_Left');
		$t1.add(15, 'Base64Images.PlayStation4.PS4_Dpad_Right');
		$t1.add(13, 'Base64Images.PlayStation4.PS4_Dpad_Down');
		$t1.add(10, 'Base64Images.PlayStation4.PS4_Left_Stick');
		$t1.add(11, 'Base64Images.PlayStation4.PS4_Right_Stick');
		$t1.add(8, 'Base64Images.PlayStation4.PS4_Share');
		$t1.add(9, 'Base64Images.PlayStation4.PS4_Options');
		$t1.add(16, 'Base64Images.PlayStation4.PS4_Touch_Pad');
		$Franca_InputHandler.$ps4Buttons = $t1;
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [$Franca_GamepadButtons, String]))();
		$t1.add(3, 'Base64Images.PlayStationVita.Vita_Triangle');
		$t1.add(2, 'Base64Images.PlayStationVita.Vita_Square');
		$t1.add(1, 'Base64Images.PlayStationVita.Vita_Circle');
		$t1.add(0, 'Base64Images.PlayStationVita.Vita_Cross');
		$t1.add(4, 'Base64Images.PlayStationVita.Vita_L1');
		$t1.add(5, 'Base64Images.PlayStationVita.Vita_R2');
		$t1.add(6, null);
		$t1.add(7, null);
		$t1.add(12, 'Base64Images.PlayStationVita.Vita_Dpad_Up');
		$t1.add(14, 'Base64Images.PlayStationVita.Vita_Dpad_Left');
		$t1.add(15, 'Base64Images.PlayStationVita.Vita_Dpad_Right');
		$t1.add(13, 'Base64Images.PlayStationVita.Vita_Dpad_Down');
		$t1.add(10, 'Base64Images.PlayStationVita.Vita_Left_Stick');
		$t1.add(11, 'Base64Images.PlayStationVita.Vita_Right_Stick');
		$t1.add(8, 'Base64Images.PlayStationVita.Vita_Select');
		$t1.add(9, 'Base64Images.PlayStationVita.Vita_Start');
		$t1.add(16, 'Base64Images.PlayStationVita.Vita_Touch_Pad');
		$Franca_InputHandler.$psVitaButtons = $t1;
	})();
	(function() {
		$Franca_DrawBucketing_DrawBucket.$bufferCount = 2;
		$Franca_DrawBucketing_DrawBucket.$defaultBufferSize = 1024;
	})();
	(function() {
		$Franca_DrawBucketing_DrawKey64.$bitCountMask = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647, 4294967295];
	})();
	(function() {
		$Franca_DrawBucketing_Material.$idGen = new Franca.IDGenerator();
	})();
	(function() {
		$Franca_DrawBucketing_ScreenSprite.spriteVertexSpec = null;
		$Franca_DrawBucketing_ScreenSprite.$baseMaterial = null;
		$Franca_DrawBucketing_ScreenSprite.$vertexArrayObj = null;
		$Franca_DrawBucketing_ScreenSprite.spriteVertexSpec = new $Franca_DrawBucketing_ScreenSpriteVertex();
	})();
	(function() {
		$Franca_Gif_GifImage.hasColorTable = 128;
		$Franca_Gif_GifImage.trailerByte = 59;
		$Franca_Gif_GifImage.seperator = 44;
		$Franca_Gif_GifImage.isInterlaced = 64;
	})();
	(function() {
		$Franca_Gui_Widget.$1$IDGeneratorField = null;
		$Franca_Gui_Widget.$1$GuiAssemblyField = null;
		$Franca_Gui_Widget.set_idGenerator(new Franca.IDGenerator());
	})();
	(function() {
		$Franca_Gui_FlowLang_FlowState.$1$AssemblyField = null;
	})();
	(function() {
		$Franca_Gui_Padding.$commaCharArr = [44];
		$Franca_Gui_Padding.$zero = new $Franca_Gui_Padding();
	})();
	(function() {
		$Franca_Gui_Label.$2$DefaultSelectionColorField = ss.getDefaultValue(Franca.Color);
		$Franca_Gui_Label.newLineChars = [13, 10];
		$Franca_Gui_Label.set_defaultSelectionColor(Franca.Color.op_Multiply$1(new Franca.Color.$ctor5(173, 214, 255, 255), 0.8));
	})();
	(function() {
		$Franca_Gui_TextBox.defaultMaxUndoStates = 50;
	})();
	(function() {
		$Franca_Gui_FlowLang_FlowItem.$_canCast = null;
	})();
	(function() {
		$Franca_Localization_Localizer.guiManager = null;
		$Franca_Localization_Localizer.searchAssemblies = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [Object]))();
		$Franca_Localization_Localizer.$_assemblies = null;
	})();
	(function() {
		$Franca_Png_$JSPngDecompressor.$testString = 'Hello, world! Test 1234567890';
		$Franca_Png_$JSPngDecompressor.$testData = [243, 72, 205, 201, 201, 215, 81, 40, 207, 47, 202, 73, 81, 84, 8, 73, 45, 46, 81, 48, 52, 50, 54, 49, 53, 51, 183, 176, 52, 0, 0];
	})();
	(function() {
		$Franca_Png_PngDecompressor.$1$IsAvailableField = false;
		$Franca_Png_PngDecompressor.$provider = null;
		$Franca_Png_PngDecompressor.$provider = new $Franca_Png_$JSPngDecompressor();
		if (ss.isValue($Franca_Png_PngDecompressor.$provider)) {
			$Franca_Png_PngDecompressor.set_isAvailable($Franca_Png_PngDecompressor.$provider.get_$isAvailable());
		}
		else {
			$Franca_Png_PngDecompressor.set_isAvailable(false);
		}
	})();
	(function() {
		$Franca_Saves_SaveContainer.currentVersion = 0;
		$Franca_Saves_SaveContainer.$hdrIdentLength = 5;
		$Franca_Saves_SaveContainer.$hdrVersionLength = 1;
		$Franca_Saves_SaveContainer.$hdrImageLength = 4;
		$Franca_Saves_SaveContainer.$hdrDataLength = 4;
	})();
	(function() {
		$Franca_Text_WordWrap.$wordRegex = new Franca.Text.Regex('[^\\n\\r\\t -]+|\\r\\n|[\\t \\-\\r\\n]', 4);
	})();
})();


// Script: SuperBernieWorld.js
(function() {
	'use strict';
	var $asm = {};
	global.SuperBernieWorld = global.SuperBernieWorld || {};
	global.SuperBernieWorld.Entities = global.SuperBernieWorld.Entities || {};
	global.SuperBernieWorld.Maps = global.SuperBernieWorld.Maps || {};
	global.SuperBernieWorld.Sprites = global.SuperBernieWorld.Sprites || {};
	ss.initAssembly($asm, 'SuperBernieWorld');
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Credits.EnemyInfo
	var $SuperBernieWorld_$Credits$EnemyInfo = function() {
		this.$spriteTypes = null;
		this.$name = null;
	};
	$SuperBernieWorld_$Credits$EnemyInfo.__typeName = 'SuperBernieWorld.$Credits$EnemyInfo';
	$SuperBernieWorld_$Credits$EnemyInfo.$ctor1 = function(name, spriteTypes) {
		this.$spriteTypes = null;
		this.$name = null;
		this.$spriteTypes = spriteTypes;
		this.$name = name;
	};
	$SuperBernieWorld_$Credits$EnemyInfo.getDefaultValue = function() {
		return new $SuperBernieWorld_$Credits$EnemyInfo();
	};
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Program
	var $SuperBernieWorld_$Program = function() {
	};
	$SuperBernieWorld_$Program.__typeName = 'SuperBernieWorld.$Program';
	$SuperBernieWorld_$Program.$main = function() {
		$SuperBernieWorld_$Program.$init();
	};
	$SuperBernieWorld_$Program.$init = function() {
		var args = Franca.CommandLineArguments.parse(null);
		//for (int i = 0; i < args.Count - 1; i++) {
		//    if (args[i].ToLowerInvariant() == "-resetlanguage") {
		//        ResetLanguage = args[i + 1];
		//        Console.WriteLine("Automatically resetting language to: " + ResetLanguage);
		//    }
		//}
		console.log('Calling FrancaFramework.Init');
		Franca.FrancaFramework.setEntryAssembly(this);
		Franca.FrancaFramework.doInit($SuperBernieWorld_$Program.$run, []);
	};
	$SuperBernieWorld_$Program.$run = function() {
		console.log('Creating container');
		var container = new $SuperBernieWorld_Container('main', 832, 480, Franca.CommandLineArguments.parse(null));
		var run = function() {
			container.run();
		};
		console.log('Running game...');
		run();
	};
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Assets
	var $SuperBernieWorld_Assets = function() {
	};
	$SuperBernieWorld_Assets.__typeName = 'SuperBernieWorld.Assets';
	$SuperBernieWorld_Assets.loaded = function() {
		$SuperBernieWorld_Core.initFonts($SuperBernieWorld_Assets.get(Franca.PixelFont).call(null, 0), $SuperBernieWorld_Assets.get(Franca.PixelFont).call(null, 1), $SuperBernieWorld_Assets.get(Franca.PixelFont).call(null, 2), $SuperBernieWorld_Assets.get(Franca.PixelFont).call(null, 3));
	};
	$SuperBernieWorld_Assets.$animateLavaTile = function(tile) {
		var source = tile.get_source();
		var offset = (tile.id - 162) % 32;
		if (offset === 0) {
			return new $SuperBernieWorld_Maps_Tile(tile.id, tile.tileset, [source, new Franca.Rectangle.$ctor3(source.location.x + 16, source.location.y, source.size.width, source.size.height), new Franca.Rectangle.$ctor3(source.location.x + 32, source.location.y, source.size.width, source.size.height), new Franca.Rectangle.$ctor3(source.location.x + 48, source.location.y, source.size.width, source.size.height)]);
		}
		else if (offset === 1) {
			return new $SuperBernieWorld_Maps_Tile(tile.id, tile.tileset, [source, new Franca.Rectangle.$ctor3(source.location.x + 16, source.location.y, source.size.width, source.size.height), new Franca.Rectangle.$ctor3(source.location.x + 32, source.location.y, source.size.width, source.size.height), new Franca.Rectangle.$ctor3(source.location.x - 16, source.location.y, source.size.width, source.size.height)]);
		}
		else if (offset === 2) {
			return new $SuperBernieWorld_Maps_Tile(tile.id, tile.tileset, [source, new Franca.Rectangle.$ctor3(source.location.x + 16, source.location.y, source.size.width, source.size.height), new Franca.Rectangle.$ctor3(source.location.x - 32, source.location.y, source.size.width, source.size.height), new Franca.Rectangle.$ctor3(source.location.x - 16, source.location.y, source.size.width, source.size.height)]);
		}
		else {
			return new $SuperBernieWorld_Maps_Tile(tile.id, tile.tileset, [source, new Franca.Rectangle.$ctor3(source.location.x - 48, source.location.y, source.size.width, source.size.height), new Franca.Rectangle.$ctor3(source.location.x - 32, source.location.y, source.size.width, source.size.height), new Franca.Rectangle.$ctor3(source.location.x - 16, source.location.y, source.size.width, source.size.height)]);
		}
	};
	$SuperBernieWorld_Assets.$animateCastleTileset = function(asset) {
		var ts = ss.safeCast(asset, $SuperBernieWorld_Maps_Tileset);
		if (ss.isNullOrUndefined(ts)) {
			return;
		}
		ts.set_item(162, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(162)));
		ts.set_item(194, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(194)));
		ts.set_item(226, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(226)));
		ts.set_item(258, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(258)));
		ts.set_item(163, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(163)));
		ts.set_item(195, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(195)));
		ts.set_item(227, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(227)));
		ts.set_item(259, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(259)));
		ts.set_item(164, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(164)));
		ts.set_item(196, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(196)));
		ts.set_item(228, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(228)));
		ts.set_item(260, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(260)));
		ts.set_item(165, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(165)));
		ts.set_item(197, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(197)));
		ts.set_item(229, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(229)));
		ts.set_item(261, $SuperBernieWorld_Assets.$animateLavaTile(ts.get_item(261)));
	};
	$SuperBernieWorld_Assets.init = function(content, audio) {
		var maxTexSize = content.get_graphicsDevice().get_maxTextureSize();
		console.log('Maximum texture size is: ' + maxTexSize);
		$SuperBernieWorld_Core.set_coinTile(new $SuperBernieWorld_Maps_TileID.$ctor1(65535, 65535));
		$SuperBernieWorld_Assets.$content = content;
		$SuperBernieWorld_Assets.audio = audio;
		$SuperBernieWorld_Assets.$assets = new (ss.makeGenericType(ss.Dictionary$2, [$SuperBernieWorld_AssetType, Object]))();
		$SuperBernieWorld_Assets.$assets.set_item(65, content.load(Franca.Effect).call(content, 'palette.json', []));
		$SuperBernieWorld_Assets.$assets.set_item(66, content.loadTexture('palette.png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(61, content.load$1($SuperBernieWorld_Maps_Tileset).call(content, 'world1_castle.json', $SuperBernieWorld_Assets.$animateCastleTileset, []));
		$SuperBernieWorld_Assets.$assets.set_item(62, content.load$1($SuperBernieWorld_Maps_Tileset).call(content, 'world4_castle.json', $SuperBernieWorld_Assets.$animateCastleTileset, []));
		$SuperBernieWorld_Assets.$assets.set_item(57, content.load($SuperBernieWorld_Maps_Tileset).call(content, 'world1_outdoor.json', []));
		$SuperBernieWorld_Assets.$assets.set_item(58, content.load($SuperBernieWorld_Maps_Tileset).call(content, 'world2_outdoor.json', []));
		$SuperBernieWorld_Assets.$assets.set_item(59, content.load($SuperBernieWorld_Maps_Tileset).call(content, 'world3_outdoor.json', []));
		$SuperBernieWorld_Assets.$assets.set_item(60, content.load($SuperBernieWorld_Maps_Tileset).call(content, 'world4_outdoor.json', []));
		var $t1 = [];
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '1-1.json', []));
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '1-2.json', []));
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '1-3.json', []));
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '2-1.json', []));
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '2-2.json', []));
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '2-3.json', []));
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '3-1.json', []));
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '3-2.json', []));
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '3-3.json', []));
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '4-1.json', []));
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '4-2.json', []));
		$t1.push(content.load($SuperBernieWorld_Maps_Map).call(content, '4-3.json', []));
		$SuperBernieWorld_Assets.maps = $t1;
		$SuperBernieWorld_Assets.$assets.set_item(18, content.load($SuperBernieWorld_Maps_Map).call(content, 'bg-world1.json', []));
		$SuperBernieWorld_Assets.$assets.set_item(19, content.load($SuperBernieWorld_Maps_Map).call(content, 'bg-world2.json', []));
		$SuperBernieWorld_Assets.$assets.set_item(20, content.load($SuperBernieWorld_Maps_Map).call(content, 'bg-world3.json', []));
		$SuperBernieWorld_Assets.$assets.set_item(21, content.load($SuperBernieWorld_Maps_Map).call(content, 'bg-world4.json', []));
		var $t5 = $SuperBernieWorld_Assets.$assets;
		var $t4 = $SuperBernieWorld_Assets.$assets;
		var $t2 = $SuperBernieWorld_Assets.$assets;
		var $t3 = content.load($SuperBernieWorld_Maps_Map).call(content, 'bg-castle1.json', []);
		$t2.set_item(24, $t3);
		$t4.set_item(23, $t3);
		$t5.set_item(22, $t3);
		$SuperBernieWorld_Assets.$assets.set_item(25, content.load($SuperBernieWorld_Maps_Map).call(content, 'bg-castle4.json', []));
		var MakeSprites = function(asset) {
			var tex = ss.cast(asset, Franca.Texture);
			var $t6 = [];
			$t6.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 10, 0, 1, 2));
			$t6.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 11, 0, 1, 2));
			$t6.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 12, 0, 1, 2));
			$t6.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 10, 0, 1, 2));
			$t6.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 11, 0, 1, 2));
			$t6.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 12, 0, 1, 2));
			$t6.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 10, 0, 1, 2));
			$t6.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 11, 0, 1, 2));
			$t6.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 12, 0, 1, 2));
			var berniePowerUp = $t6;
			var $t14 = $SuperBernieWorld_Assets.$assets;
			var $t7 = [];
			$t7.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 0, 0, 1, 2));
			var $t8 = [];
			$t8.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 2, 0, 1, 2));
			$t8.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 3, 0, 1, 2));
			$t8.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 4, 0, 1, 2));
			$t8.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 5, 0, 1, 2));
			var $t9 = [];
			$t9.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 6, 0, 1, 2));
			var $t10 = [];
			$t10.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 7, 0, 1, 2));
			var $t11 = [];
			$t11.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 8, 0, 1, 2));
			var $t12 = [];
			$t12.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 9, 0, 1, 2));
			var $t13 = [];
			$t13.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 1, 0, 1, 2));
			$t14.set_item(7, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t7, $t8, $t9, $t10, $t11, $t12, $t13, null, berniePowerUp));
			var $t22 = $SuperBernieWorld_Assets.$assets;
			var $t15 = [];
			$t15.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 0, 2, 1, 2));
			var $t16 = [];
			$t16.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 3, 2, 1, 2));
			$t16.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 4, 2, 1, 2));
			$t16.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 5, 2, 1, 2));
			$t16.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 6, 2, 1, 2));
			$t16.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 7, 2, 1, 2));
			$t16.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 8, 2, 1, 2));
			var $t17 = [];
			$t17.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 9, 2, 1, 2));
			var $t18 = [];
			$t18.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 10, 2, 1, 2));
			var $t19 = [];
			$t19.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 11, 2, 1, 2));
			var $t20 = [];
			$t20.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 1, 2, 1, 2));
			var $t21 = [];
			$t21.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 2, 2, 1, 2));
			$t22.set_item(8, new $SuperBernieWorld_Sprites_Sprite(1, 2, $t15, $t16, $t17, $t18, $t19, null, $t20, $t21, berniePowerUp));
			var $t26 = $SuperBernieWorld_Assets.$assets;
			var $t23 = [];
			$t23.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 0, 4, 1, 1));
			$t23.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 1, 4, 1, 1));
			var $t24 = [];
			$t24.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 3, 4, 1, 1));
			var $t25 = [];
			$t25.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 2, 4, 1, 1));
			$t26.set_item(9, new $SuperBernieWorld_Sprites_Sprite(1, 1, null, $t23, null, null, null, $t24, null, $t25, null));
			var $t30 = $SuperBernieWorld_Assets.$assets;
			var $t27 = [];
			$t27.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 0, 5, 1, 2));
			$t27.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 1, 5, 1, 2));
			var $t28 = [];
			$t28.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 7, 5, 1, 2));
			var $t29 = [];
			$t29.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 2, 6, 1, 1));
			$t29.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 6, 6, 1, 1));
			$t30.set_item(10, new $SuperBernieWorld_Sprites_Sprite(1, 2, null, $t27, null, null, null, $t28, null, $t29, null));
			var $t33 = $SuperBernieWorld_Assets.$assets;
			var $t31 = [];
			$t31.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 0, 7, 1, 2));
			$t31.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 1, 7, 1, 2));
			var $t32 = [];
			$t32.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 7, 7, 1, 2));
			$t33.set_item(11, new $SuperBernieWorld_Sprites_Sprite(1, 2, null, $t31, null, null, null, $t32, null, null, null));
			var $t36 = $SuperBernieWorld_Assets.$assets;
			var $t34 = [];
			$t34.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 0, 9, 1, 2));
			$t34.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 1, 9, 1, 2));
			var $t35 = [];
			$t35.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 7, 9, 1, 2));
			$t36.set_item(12, new $SuperBernieWorld_Sprites_Sprite(1, 2, null, $t34, null, null, null, $t35, null, null, null));
			var $t39 = $SuperBernieWorld_Assets.$assets;
			var $t37 = [];
			$t37.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 0, 11, 1, 2));
			$t37.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 1, 11, 1, 2));
			var $t38 = [];
			$t38.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 7, 11, 1, 2));
			$t39.set_item(13, new $SuperBernieWorld_Sprites_Sprite(1, 2, null, $t37, null, null, null, $t38, null, null, null));
			var $t42 = $SuperBernieWorld_Assets.$assets;
			var $t40 = [];
			$t40.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 2, 6, 1, 1));
			$t40.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 6, 6, 1, 1));
			var $t41 = [];
			$t41.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 2, 6, 1, 1));
			$t41.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 3, 6, 1, 1));
			$t41.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 4, 6, 1, 1));
			$t41.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 5, 6, 1, 1));
			$t42.set_item(27, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t40, $t41, null, null, null, null, null, null, null));
			var $t45 = $SuperBernieWorld_Assets.$assets;
			var $t43 = [];
			$t43.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 2, 8, 1, 1));
			$t43.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 6, 8, 1, 1));
			var $t44 = [];
			$t44.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 2, 8, 1, 1));
			$t44.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 3, 8, 1, 1));
			$t44.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 4, 8, 1, 1));
			$t44.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 5, 8, 1, 1));
			$t45.set_item(28, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t43, $t44, null, null, null, null, null, null, null));
			var $t47 = $SuperBernieWorld_Assets.$assets;
			var $t46 = [];
			$t46.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 0, 13, 2, 2));
			$t46.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 2, 13, 2, 2));
			$t47.set_item(14, new $SuperBernieWorld_Sprites_Sprite(2, 2, $t46, null, null, null, null, null, null, null, null));
			var $t49 = $SuperBernieWorld_Assets.$assets;
			var $t48 = [];
			$t48.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 6, 15, 1, 1));
			$t48.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 7, 15, 1, 1));
			$t49.set_item(15, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t48, null, null, null, null, null, null, null, null));
			var $t53 = $SuperBernieWorld_Assets.$assets;
			var $t50 = [];
			$t50.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 23, 12, 1, 2));
			$t50.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 24, 12, 1, 2));
			var $t51 = [];
			$t51.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 25, 12, 1, 2));
			$t51.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 26, 12, 1, 2));
			$t51.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 27, 12, 1, 2));
			$t51.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 28, 12, 1, 2));
			var $t52 = [];
			$t52.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 29, 12, 1, 2));
			$t53.set_item(17, new $SuperBernieWorld_Sprites_Sprite(1, 2, $t50, null, null, null, null, $t52, null, null, $t51));
			var $t55 = $SuperBernieWorld_Assets.$assets;
			var $t54 = [];
			$t54.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 0, 15, 1, 1));
			$t55.set_item(16, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t54, null, null, null, null, null, null, null, null));
			var $t57 = $SuperBernieWorld_Assets.$assets;
			var $t56 = [];
			$t56.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 1, 15, 1, 1));
			$t57.set_item(67, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t56, null, null, null, null, null, null, null, null));
			var $t60 = $SuperBernieWorld_Assets.$assets;
			var $t58 = [];
			$t58.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 4, 15, 1, 1));
			var $t59 = [];
			$t59.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 5, 15, 1, 1));
			$t60.set_item(35, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t58, null, null, null, null, $t59, null, null, null));
			var $t62 = $SuperBernieWorld_Assets.$assets;
			var $t61 = [];
			$t61.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 28, 11, 2, 1));
			$t61.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 11, 2, 1));
			$t62.set_item(36, new $SuperBernieWorld_Sprites_Sprite(2, 1, $t61, null, null, null, null, null, null, null, null));
			var $t65 = $SuperBernieWorld_Assets.$assets;
			var $t63 = [];
			$t63.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 0, 1, 1));
			var $t64 = [];
			$t64.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 31, 0, 1, 1));
			$t65.set_item(53, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t63, $t64, null, null, null, null, null, null, null));
			var $t69 = $SuperBernieWorld_Assets.$assets;
			var $t66 = [];
			$t66.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 20, 8, 2, 2));
			$t66.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 22, 8, 2, 2));
			var $t67 = [];
			$t67.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 24, 8, 2, 2));
			$t67.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 26, 8, 2, 2));
			var $t68 = [];
			$t68.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 28, 8, 2, 2));
			$t69.set_item(54, new $SuperBernieWorld_Sprites_Sprite(2, 2, $t66, null, null, null, $t68, null, null, null, $t67));
			var $t74 = $SuperBernieWorld_Assets.$assets;
			var $t70 = [];
			$t70.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 26, 6, 2, 2));
			var $t71 = [];
			$t71.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 28, 6, 2, 2));
			$t71.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 6, 2, 2));
			var $t72 = [];
			$t72.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 28, 6, 2, 2));
			var $t73 = [];
			$t73.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 6, 2, 2));
			$t74.set_item(55, new $SuperBernieWorld_Sprites_Sprite(2, 2, $t70, null, null, null, $t72, null, null, $t73, $t71));
			var $t76 = $SuperBernieWorld_Assets.$assets;
			var $t75 = [];
			$t75.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 28, 1, 1, 1));
			$t75.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 29, 1, 1, 1));
			$t75.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 1, 1, 1));
			$t75.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 31, 1, 1, 1));
			$t75.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 28, 2, 1, 1));
			$t75.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 29, 2, 1, 1));
			$t75.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 2, 1, 1));
			$t75.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 31, 2, 1, 1));
			$t76.set_item(56, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t75, null, null, null, null, null, null, null, null));
			var $t78 = $SuperBernieWorld_Assets.$assets;
			var $t77 = [];
			$t77.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 28, 3, 1, 1));
			$t77.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 29, 3, 1, 1));
			$t77.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 3, 1, 1));
			$t77.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 31, 3, 1, 1));
			$t78.set_item(68, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t77, null, null, null, null, null, null, null, null));
			var $t80 = $SuperBernieWorld_Assets.$assets;
			var $t79 = [];
			$t79.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 4, 1, 1));
			$t79.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 31, 4, 1, 1));
			$t79.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 5, 1, 1));
			$t79.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 31, 5, 1, 1));
			$t80.set_item(69, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t79, null, null, null, null, null, null, null, null));
			var $t82 = $SuperBernieWorld_Assets.$assets;
			var $t81 = [];
			$t81.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 8, 1, 1));
			$t81.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 31, 8, 1, 1));
			$t81.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 9, 1, 1));
			$t81.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 31, 9, 1, 1));
			$t82.set_item(63, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t81, null, null, null, null, null, null, null, null));
			var $t84 = $SuperBernieWorld_Assets.$assets;
			var $t83 = [];
			$t83.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 12, 1, 1));
			$t83.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 31, 12, 1, 1));
			$t83.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 30, 13, 1, 1));
			$t83.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 31, 13, 1, 1));
			$t84.set_item(64, new $SuperBernieWorld_Sprites_Sprite(1, 1, $t83, null, null, null, null, null, null, null, null));
			var $t86 = $SuperBernieWorld_Assets.$assets;
			var $t85 = [];
			$t85.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 8, 14, 3, 2));
			$t85.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 11, 14, 3, 2));
			$t85.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 14, 14, 3, 2));
			$t85.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 17, 14, 3, 2));
			$t85.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 20, 14, 3, 2));
			$t85.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 23, 14, 3, 2));
			$t85.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 26, 14, 3, 2));
			$t85.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 29, 14, 3, 2));
			$t86.set_item(70, new $SuperBernieWorld_Sprites_Sprite(3, 2, $t85, null, null, null, null, null, null, null, null));
			var $t88 = $SuperBernieWorld_Assets.$assets;
			var $t87 = [];
			$t87.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 8, 10, 4, 2));
			$t87.push($SuperBernieWorld_Sprites_Sprite.makeFrame(tex, 8, 12, 4, 2));
			$t88.set_item(73, new $SuperBernieWorld_Sprites_Sprite(4, 2, $t87, null, null, null, null, null, null, null, null));
		};
		$SuperBernieWorld_Assets.$assets.set_item(6, content.loadTexture$1('spritesheet.png', MakeSprites, true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(26, content.loadTexture('toppanel.png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(5, content.loadTexture('logo.png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(29, content.loadTexture('cursor.png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(30, content.loadTexture('portrait-bernie.png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(31, content.loadTexture('portrait-donaldtrump.png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(32, content.loadTexture('portrait-jimjordan.png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(34, content.loadTexture('portrait-mitchmcconnell.png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(33, content.loadTexture('portrait-tedcruz.png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(0, content.loadPixelFont('font-keyboard', 'png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(1, content.loadPixelFont('font-xbox', 'png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(2, content.loadPixelFont('font-nintendo', 'png', true, false, true));
		$SuperBernieWorld_Assets.$assets.set_item(3, content.loadPixelFont('font-sony', 'png', true, false, true));
		$SuperBernieWorld_Assets.musicManager = $SuperBernieWorld_Audio.get_music();
		$SuperBernieWorld_Assets.soundManager = $SuperBernieWorld_Audio.get_effects();
		$SuperBernieWorld_Assets.audio.set_masterVolume(0.5);
		$SuperBernieWorld_Assets.musicManager.set_volume(0.3);
		$SuperBernieWorld_Assets.soundManager.set_volume(0.2);
		$SuperBernieWorld_Assets.$assets.set_item(46, content.loadMusic('victory', $SuperBernieWorld_Assets.musicManager));
		$SuperBernieWorld_Assets.$assets.set_item(47, content.loadMusic('death', $SuperBernieWorld_Assets.musicManager));
		$SuperBernieWorld_Assets.$assets.set_item(48, content.loadMusic('invincibility', $SuperBernieWorld_Assets.musicManager));
		$SuperBernieWorld_Assets.$assets.set_item(49, content.loadMusic('overworld', $SuperBernieWorld_Assets.musicManager));
		$SuperBernieWorld_Assets.$assets.set_item(50, content.loadMusic('overworld-fast', $SuperBernieWorld_Assets.musicManager));
		$SuperBernieWorld_Assets.$assets.set_item(51, content.loadMusic('castle', $SuperBernieWorld_Assets.musicManager));
		$SuperBernieWorld_Assets.$assets.set_item(52, content.loadMusic('castle-fast', $SuperBernieWorld_Assets.musicManager));
		$SuperBernieWorld_Assets.$assets.set_item(37, content.loadSound('chat', $SuperBernieWorld_Assets.soundManager));
		$SuperBernieWorld_Assets.$assets.set_item(38, content.loadSound('coin', $SuperBernieWorld_Assets.soundManager));
		$SuperBernieWorld_Assets.$assets.set_item(39, content.loadSound('flag', $SuperBernieWorld_Assets.soundManager));
		$SuperBernieWorld_Assets.$assets.set_item(40, content.loadSound('jump', $SuperBernieWorld_Assets.soundManager));
		$SuperBernieWorld_Assets.$assets.set_item(41, content.loadSound('powdown', $SuperBernieWorld_Assets.soundManager));
		$SuperBernieWorld_Assets.$assets.set_item(42, content.loadSound('powup', $SuperBernieWorld_Assets.soundManager));
		$SuperBernieWorld_Assets.$assets.set_item(43, content.loadSound('stomp', $SuperBernieWorld_Assets.soundManager));
		$SuperBernieWorld_Assets.$assets.set_item(44, content.loadSound('bounce', $SuperBernieWorld_Assets.soundManager));
		$SuperBernieWorld_Assets.$assets.set_item(45, content.loadSound('fire', $SuperBernieWorld_Assets.soundManager));
		$SuperBernieWorld_Assets.$assets.set_item(71, content.loadSound('shoot', $SuperBernieWorld_Assets.soundManager));
		$SuperBernieWorld_Assets.$assets.set_item(72, content.loadSound('reveal', $SuperBernieWorld_Assets.soundManager));
	};
	$SuperBernieWorld_Assets.get = function(T) {
		return function(asset) {
			var v = {};
			if (!$SuperBernieWorld_Assets.$assets.tryGetValue(asset, v)) {
				throw new ss.Exception('Asset not found: ' + System.EnumExtensions.getName($SuperBernieWorld_AssetType).call(null, asset));
			}
			if (ss.isNullOrUndefined(v.$)) {
				throw new ss.Exception('Asset ' + System.EnumExtensions.getName($SuperBernieWorld_AssetType).call(null, asset) + ' was null');
			}
			var ret = ss.safeCast(v.$, T);
			if (ss.isNullOrUndefined(ret)) {
				throw new ss.Exception('Asset ' + System.EnumExtensions.getName($SuperBernieWorld_AssetType).call(null, asset) + ' was not an instance of type ' + ss.getTypeName(T) + ' but of type ' + ss.getTypeName(ss.getInstanceType(v.$)));
			}
			return ret;
		};
	};
	$SuperBernieWorld_Assets.playSound = function(asset, volume, pitch) {
		try {
			var sound = $SuperBernieWorld_Assets.get(Franca.Audio.Sound).call(null, asset);
			if (ss.isValue(sound)) {
				sound.play(volume, pitch, 0, false);
			}
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			console.log(e.get_message());
		}
	};
	global.SuperBernieWorld.Assets = $SuperBernieWorld_Assets;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.AssetType
	var $SuperBernieWorld_AssetType = function() {
	};
	$SuperBernieWorld_AssetType.__typeName = 'SuperBernieWorld.AssetType';
	global.SuperBernieWorld.AssetType = $SuperBernieWorld_AssetType;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Audio
	var $SuperBernieWorld_Audio = function() {
	};
	$SuperBernieWorld_Audio.__typeName = 'SuperBernieWorld.Audio';
	$SuperBernieWorld_Audio.playMusic = function(type, loop) {
		var music;
		try {
			music = $SuperBernieWorld_Assets.get(Franca.Audio.Music).call(null, type);
		}
		catch ($t1) {
			music = null;
		}
		if (ss.isValue(music)) {
			$SuperBernieWorld_Audio.lastMusic = type;
			music.play$1(1, loop);
		}
	};
	$SuperBernieWorld_Audio.playSound = function(type, volume, pitch) {
		var sound;
		try {
			sound = $SuperBernieWorld_Assets.get(Franca.Audio.Sound).call(null, type);
		}
		catch ($t1) {
			sound = null;
		}
		if (ss.isValue(sound)) {
			return sound.play(volume, pitch, 0, false);
		}
		return null;
	};
	$SuperBernieWorld_Audio.get_context = function() {
		return $SuperBernieWorld_Audio.$1$ContextField;
	};
	$SuperBernieWorld_Audio.set_context = function(value) {
		$SuperBernieWorld_Audio.$1$ContextField = value;
	};
	$SuperBernieWorld_Audio.get_music = function() {
		return $SuperBernieWorld_Audio.$1$MusicField;
	};
	$SuperBernieWorld_Audio.set_music = function(value) {
		$SuperBernieWorld_Audio.$1$MusicField = value;
	};
	$SuperBernieWorld_Audio.get_effects = function() {
		return $SuperBernieWorld_Audio.$1$EffectsField;
	};
	$SuperBernieWorld_Audio.set_effects = function(value) {
		$SuperBernieWorld_Audio.$1$EffectsField = value;
	};
	$SuperBernieWorld_Audio.init = function(audioContext) {
		$SuperBernieWorld_Audio.set_context(audioContext);
		$SuperBernieWorld_Audio.set_music(new Franca.Audio.AudioManager(audioContext, 32));
		$SuperBernieWorld_Audio.set_effects(new Franca.Audio.AudioManager(audioContext, 32));
	};
	$SuperBernieWorld_Audio.get_masterVolume = function() {
		return $SuperBernieWorld_Audio.get_context().get_masterVolume();
	};
	$SuperBernieWorld_Audio.set_masterVolume = function(value) {
		$SuperBernieWorld_Audio.get_context().set_masterVolume(value);
	};
	$SuperBernieWorld_Audio.get_sfxVolume = function() {
		return $SuperBernieWorld_Audio.get_effects().get_volume();
	};
	$SuperBernieWorld_Audio.set_sfxVolume = function(value) {
		$SuperBernieWorld_Audio.get_effects().set_volume(value);
	};
	$SuperBernieWorld_Audio.get_musicVolume = function() {
		return $SuperBernieWorld_Audio.get_music().get_volume();
	};
	$SuperBernieWorld_Audio.set_musicVolume = function(value) {
		$SuperBernieWorld_Audio.get_music().set_volume(value);
	};
	global.SuperBernieWorld.Audio = $SuperBernieWorld_Audio;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.BernieState
	var $SuperBernieWorld_BernieState = function() {
	};
	$SuperBernieWorld_BernieState.__typeName = 'SuperBernieWorld.BernieState';
	global.SuperBernieWorld.BernieState = $SuperBernieWorld_BernieState;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Container
	var $SuperBernieWorld_Container = function(anchor, width, height, args) {
		this.$batch = null;
		this.$args = null;
		this.$loaded = false;
		this.$mode = null;
		this.$nextMode = null;
		this.$transition = null;
		this.$screenAlpha = 1;
		this.$lastAxisValue = null;
		var $t1 = [];
		$t1.push(0);
		$t1.push(3);
		this.$primaryAcceptButtons = $t1;
		var $t1 = [];
		$t1.push(2);
		$t1.push(1);
		this.$primaryCancelButtons = $t1;
		var $t1 = [];
		$t1.push(88);
		this.$primaryAcceptKeys = $t1;
		var $t1 = [];
		$t1.push(90);
		this.$primaryCancelKeys = $t1;
		this.$isKeyDown = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [Franca.Key]))();
		Franca.GameContainer.$ctor1.call(this, anchor, width, height);
		console.log('Initializing SpeedrunHelper');
		$SuperBernieWorld_SpeedrunHelper.initialize();
		this.$args = args;
		this.set_vSync(!$SuperBernieWorld_$Program.$noVSync);
		this.set_title('Super Bernie World');
		this.set_resizable(true);
		if ($SuperBernieWorld_$Program.$adaptiveVSync) {
			this.set_vSyncStyle(1);
		}
		var $t1 = new (ss.makeGenericType(ss.Dictionary$2, [Franca.GamepadAxis, Number]))();
		$t1.add(0, 0);
		$t1.add(1, 0);
		$t1.add(2, 0);
		$t1.add(3, 0);
		this.$lastAxisValue = $t1;
		this.add_onResolutionChanged(ss.mkdel(this, this.$container_OnResolutionChanged));
		// Firefox has some weird fullscreening bug and we're working around it
		// by disabling the built-in fullscreening via alt enter and using itch's
		// fullscreen button functionality
		this.set_disableAltEnter(true);
	};
	$SuperBernieWorld_Container.__typeName = 'SuperBernieWorld.Container';
	global.SuperBernieWorld.Container = $SuperBernieWorld_Container;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.ControllerType
	var $SuperBernieWorld_ControllerType = function() {
	};
	$SuperBernieWorld_ControllerType.__typeName = 'SuperBernieWorld.ControllerType';
	global.SuperBernieWorld.ControllerType = $SuperBernieWorld_ControllerType;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Core
	var $SuperBernieWorld_Core = function() {
	};
	$SuperBernieWorld_Core.__typeName = 'SuperBernieWorld.Core';
	$SuperBernieWorld_Core.init = function() {
		if (Franca.IO.LocalStorage.available) {
			$SuperBernieWorld_Core.$localStorage = new Franca.IO.Storage($SuperBernieWorld_Core.$localStorageRoot);
		}
		$SuperBernieWorld_Core.set_random(new Franca.RNG());
	};
	$SuperBernieWorld_Core.get_graphicsDevice = function() {
		return $SuperBernieWorld_Core.$1$GraphicsDeviceField;
	};
	$SuperBernieWorld_Core.set_graphicsDevice = function(value) {
		$SuperBernieWorld_Core.$1$GraphicsDeviceField = value;
	};
	$SuperBernieWorld_Core.get_container = function() {
		return $SuperBernieWorld_Core.$1$ContainerField;
	};
	$SuperBernieWorld_Core.set_container = function(value) {
		$SuperBernieWorld_Core.$1$ContainerField = value;
	};
	$SuperBernieWorld_Core.get_content = function() {
		return $SuperBernieWorld_Core.$1$ContentField;
	};
	$SuperBernieWorld_Core.set_content = function(value) {
		$SuperBernieWorld_Core.$1$ContentField = value;
	};
	$SuperBernieWorld_Core.get_bernieState = function() {
		return $SuperBernieWorld_Core.$1$BernieStateField;
	};
	$SuperBernieWorld_Core.set_bernieState = function(value) {
		$SuperBernieWorld_Core.$1$BernieStateField = value;
	};
	$SuperBernieWorld_Core.get_random = function() {
		return $SuperBernieWorld_Core.$1$RandomField;
	};
	$SuperBernieWorld_Core.set_random = function(value) {
		$SuperBernieWorld_Core.$1$RandomField = value;
	};
	$SuperBernieWorld_Core.get_coinTile = function() {
		return $SuperBernieWorld_Core.$1$CoinTileField;
	};
	$SuperBernieWorld_Core.set_coinTile = function(value) {
		$SuperBernieWorld_Core.$1$CoinTileField = value;
	};
	$SuperBernieWorld_Core.get_godMode = function() {
		return $SuperBernieWorld_Core.$1$GodModeField;
	};
	$SuperBernieWorld_Core.set_godMode = function(value) {
		$SuperBernieWorld_Core.$1$GodModeField = value;
	};
	$SuperBernieWorld_Core.get_antiGrav = function() {
		return $SuperBernieWorld_Core.$1$AntiGravField;
	};
	$SuperBernieWorld_Core.set_antiGrav = function(value) {
		$SuperBernieWorld_Core.$1$AntiGravField = value;
	};
	$SuperBernieWorld_Core.get_coroutines = function() {
		return $SuperBernieWorld_Core.$coroutines;
	};
	$SuperBernieWorld_Core.get_renderTweens = function() {
		return $SuperBernieWorld_Core.$renderTweens;
	};
	$SuperBernieWorld_Core.add_onSpawnEntity = function(value) {
		$SuperBernieWorld_Core.$1$OnSpawnEntityField = ss.delegateCombine($SuperBernieWorld_Core.$1$OnSpawnEntityField, value);
	};
	$SuperBernieWorld_Core.remove_onSpawnEntity = function(value) {
		$SuperBernieWorld_Core.$1$OnSpawnEntityField = ss.delegateRemove($SuperBernieWorld_Core.$1$OnSpawnEntityField, value);
	};
	$SuperBernieWorld_Core.spawnEntity = function(entity) {
		var onSpawnEntity = $SuperBernieWorld_Core.$1$OnSpawnEntityField;
		if (!ss.staticEquals(onSpawnEntity, null)) {
			onSpawnEntity(entity);
		}
	};
	$SuperBernieWorld_Core.add_onSpawnParticle = function(value) {
		$SuperBernieWorld_Core.$1$OnSpawnParticleField = ss.delegateCombine($SuperBernieWorld_Core.$1$OnSpawnParticleField, value);
	};
	$SuperBernieWorld_Core.remove_onSpawnParticle = function(value) {
		$SuperBernieWorld_Core.$1$OnSpawnParticleField = ss.delegateRemove($SuperBernieWorld_Core.$1$OnSpawnParticleField, value);
	};
	$SuperBernieWorld_Core.spawnParticle = function(p) {
		var onSpawnParticle = $SuperBernieWorld_Core.$1$OnSpawnParticleField;
		if (!ss.staticEquals(onSpawnParticle, null)) {
			onSpawnParticle(p);
		}
	};
	$SuperBernieWorld_Core.initFonts = function(mainKeyboard, mainXbox, mainNintendo, mainPlayStation) {
		$SuperBernieWorld_Core.$mainFontKeyboard = mainKeyboard;
		$SuperBernieWorld_Core.$mainFontXbox = mainXbox;
		$SuperBernieWorld_Core.$mainFontNintendo = mainNintendo;
		$SuperBernieWorld_Core.$mainFontPlayStation = mainPlayStation;
	};
	$SuperBernieWorld_Core.switchControllerType = function(type) {
		$SuperBernieWorld_Core.$controllerType = type;
	};
	$SuperBernieWorld_Core.get_controllerType = function() {
		return $SuperBernieWorld_Core.$controllerType;
	};
	$SuperBernieWorld_Core.get_mainFont = function() {
		switch ($SuperBernieWorld_Core.$controllerType) {
			default:
			case 0: {
				return $SuperBernieWorld_Core.$mainFontKeyboard;
			}
			case 1:
			case 5: {
				return $SuperBernieWorld_Core.$mainFontXbox;
			}
			case 3:
			case 4: {
				return $SuperBernieWorld_Core.$mainFontNintendo;
			}
			case 2: {
				return $SuperBernieWorld_Core.$mainFontPlayStation;
			}
		}
	};
	$SuperBernieWorld_Core.disposeRenderTargets = function() {
		console.log('Disposing fullscreen rendertargets');
		if (ss.isValue($SuperBernieWorld_Core.$renderTargets)) {
			for (var $t1 = 0; $t1 < $SuperBernieWorld_Core.$renderTargets.length; $t1++) {
				var rt = $SuperBernieWorld_Core.$renderTargets[$t1];
				try {
					rt.dispose();
				}
				catch ($t2) {
					var e = ss.Exception.wrap($t2);
					console.log('Could not dispose fullscreen rendertarget: ' + System.ObjectExtensions.toStringInvariant$1(ss.Exception).call(null, e));
				}
			}
		}
	};
	$SuperBernieWorld_Core.createRenderTargets = function(width, height) {
		$SuperBernieWorld_Core.disposeRenderTargets();
		console.log(ss.formatString('Creating new rendertargets at {0}x{1}', System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, width), System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, height)));
		$SuperBernieWorld_Core.$renderTargetIndex = 0;
		$SuperBernieWorld_Core.$renderTargets = [];
		for (var i = 0; i < 2; i++) {
			$SuperBernieWorld_Core.$renderTargets.push(new Franca.RenderTarget.$ctor1(width, height, true, false));
		}
	};
	$SuperBernieWorld_Core.switchRenderTargets = function(target) {
		$SuperBernieWorld_Core.$lastTarget = $SuperBernieWorld_Core.$currentTarget;
		if (ss.isNullOrUndefined(target)) {
			var rt = $SuperBernieWorld_Core.$renderTargets[$SuperBernieWorld_Core.$renderTargetIndex];
			$SuperBernieWorld_Core.$renderTargetIndex = Franca.Calc.wrap$2($SuperBernieWorld_Core.$renderTargetIndex + 1, 2);
			$SuperBernieWorld_Core.$currentTarget = rt;
		}
		else {
			$SuperBernieWorld_Core.$currentTarget = target;
		}
		return $SuperBernieWorld_Core.$currentTarget;
	};
	$SuperBernieWorld_Core.resetRenderTargets = function() {
		$SuperBernieWorld_Core.$lastTarget = null;
		$SuperBernieWorld_Core.$currentTarget = null;
	};
	$SuperBernieWorld_Core.get_currentTarget = function() {
		return $SuperBernieWorld_Core.$currentTarget;
	};
	$SuperBernieWorld_Core.get_lastTarget = function() {
		return $SuperBernieWorld_Core.$lastTarget;
	};
	$SuperBernieWorld_Core.loadStoredVolume = function() {
		if (ss.isNullOrUndefined($SuperBernieWorld_Core.$localStorage)) {
			return;
		}
		if ($SuperBernieWorld_Core.$localStorage.contains('volume')) {
			var volume = {};
			var volumeStr = $SuperBernieWorld_Core.$localStorage.readText('volume');
			if (Franca.Calc.tryParseNumber(volumeStr, volume)) {
				$SuperBernieWorld_Audio.set_musicVolume(volume.$ / 100);
				$SuperBernieWorld_Audio.set_sfxVolume(volume.$ / 100);
			}
		}
		if ($SuperBernieWorld_Core.$localStorage.contains('sfxvolume')) {
			var volume1 = {};
			var volumeStr1 = $SuperBernieWorld_Core.$localStorage.readText('sfxvolume');
			if (Franca.Calc.tryParseNumber(volumeStr1, volume1)) {
				$SuperBernieWorld_Audio.set_sfxVolume(volume1.$ / 100);
			}
		}
		if ($SuperBernieWorld_Core.$localStorage.contains('musvolume')) {
			var volume2 = {};
			var volumeStr2 = $SuperBernieWorld_Core.$localStorage.readText('musvolume');
			if (Franca.Calc.tryParseNumber(volumeStr2, volume2)) {
				$SuperBernieWorld_Audio.set_musicVolume(volume2.$ / 100);
			}
		}
	};
	$SuperBernieWorld_Core.saveVolume = function() {
		if (ss.isNullOrUndefined($SuperBernieWorld_Core.$localStorage)) {
			return;
		}
		//localStorage.Write("volume", Calc.Round(Audio.MasterVolume * 100).ToStringInvariant());
		$SuperBernieWorld_Core.$localStorage.write$1('sfxvolume', System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, Math.round($SuperBernieWorld_Audio.get_sfxVolume() * 100)));
		$SuperBernieWorld_Core.$localStorage.write$1('musvolume', System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, Math.round($SuperBernieWorld_Audio.get_musicVolume() * 100)));
	};
	global.SuperBernieWorld.Core = $SuperBernieWorld_Core;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Credits
	var $SuperBernieWorld_Credits = function(parent, fromEndGame) {
		var $t1 = [];
		$t1.push(new $SuperBernieWorld_$Credits$EnemyInfo.$ctor1('Magamba', [9]));
		$t1.push(new $SuperBernieWorld_$Credits$EnemyInfo.$ctor1('Trashman', [14]));
		$t1.push(new $SuperBernieWorld_$Credits$EnemyInfo.$ctor1('Mitch Troopa', [10, 11]));
		$t1.push(new $SuperBernieWorld_$Credits$EnemyInfo.$ctor1('Mitch Paratroopa', [12, 13]));
		$t1.push(new $SuperBernieWorld_$Credits$EnemyInfo.$ctor1('Tiki Torcher', [17]));
		$t1.push(new $SuperBernieWorld_$Credits$EnemyInfo.$ctor1('ICE Bullet', [35]));
		$t1.push(new $SuperBernieWorld_$Credits$EnemyInfo.$ctor1('Republican', [54]));
		$t1.push(new $SuperBernieWorld_$Credits$EnemyInfo.$ctor1('Gopoboo', [15]));
		$t1.push(new $SuperBernieWorld_$Credits$EnemyInfo.$ctor1('Flaming Hot Cheeto', [36]));
		$t1.push(new $SuperBernieWorld_$Credits$EnemyInfo.$ctor1('Trump', [55]));
		this.$enemyInfo = $t1;
		this.$map = null;
		this.$renderers = null;
		this.$scroll = 0;
		this.$menu = null;
		this.$playingMusic = false;
		this.$styleTween = null;
		this.$styleIndex = 0;
		this.$styleAlpha = 0;
		this.$enemyIndex = 0;
		this.$enemyTween = null;
		this.$enemyPositionAlpha = 0;
		this.$fromEndGame = false;
		$SuperBernieWorld_Mode.call(this, parent);
		console.log("Creating 'Credits' mode");
		this.$map = Enumerable.from($SuperBernieWorld_Assets.maps).first();
		this.$fromEndGame = fromEndGame;
		this.$renderers = new Array(5);
		var $t2 = this.$renderers;
		var $t1 = new $SuperBernieWorld_GameRenderer();
		$t1.set_map(this.$map.makeInstance());
		$t1.set_background($SuperBernieWorld_Assets.get($SuperBernieWorld_Maps_Map).call(null, 18));
		$t2[0] = $t1;
		this.$addTilesetSwappedMap(1);
		this.$addTilesetSwappedMap(2);
		this.$addTilesetSwappedMap(3);
		this.$renderers[4] = this.$renderers[2];
		this.$menu = new $SuperBernieWorld_MenuStack();
		var $t3 = new $SuperBernieWorld_Menu([]);
		$t3.canClose = false;
		var credits = $t3;
		credits.add(new $SuperBernieWorld_MenuOption('CREDITS', new Franca.Point.$ctor2(128, 64), 1, null, null, null, true, 37, 1, null));
		credits.add(new $SuperBernieWorld_MenuOption.$ctor1('Emma Maassen: Lead Dev, Producer', 128, 85, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device) {
			this.parent.tryOpenUrl('https://twitter.com/enichan', device);
		})));
		credits.add(new $SuperBernieWorld_MenuOption.$ctor1('James Yarrow: Writer, Producer', 128, 101, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device1) {
			this.parent.tryOpenUrl('https://twitter.com/NjordGamedev', device1);
		})));
		credits.add(new $SuperBernieWorld_MenuOption.$ctor1('Wayne Kubiak: Lead Artist', 128, 117, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device2) {
			this.parent.tryOpenUrl('https://twitter.com/WanyoDos', device2);
		})));
		credits.add(new $SuperBernieWorld_MenuOption.$ctor1('Anthony Swinnich: Level Designer', 128, 133, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device3) {
			this.parent.tryOpenUrl('https://twitter.com/hangongetready', device3);
		})));
		credits.add(new $SuperBernieWorld_MenuOption.$ctor1('Serena Samborski: Portraits & Logo', 128, 149, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device4) {
			this.parent.tryOpenUrl('https://twitter.com/Sererena', device4);
		})));
		credits.add(new $SuperBernieWorld_MenuOption.$ctor1('Continue', 128, 168, 1, ss.mkdel(this, function() {
			this.$next();
		}), null, null, true, 37, 1, null));
		this.$menu.open(credits);
	};
	$SuperBernieWorld_Credits.__typeName = 'SuperBernieWorld.Credits';
	global.SuperBernieWorld.Credits = $SuperBernieWorld_Credits;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Cutscene
	var $SuperBernieWorld_Cutscene = function(parent, nextMode, dialogue) {
		this.$dialogue = null;
		this.$nextMode = null;
		this.$lineIndex = 0;
		this.$current = ss.getDefaultValue($SuperBernieWorld_Dialogue);
		this.$visLen = 0;
		this.$skip$1 = false;
		this.$canceled = false;
		this.$finished = false;
		this.$co = null;
		$SuperBernieWorld_Mode.call(this, parent);
		console.log("Creating 'Cutscene' mode");
		this.$dialogue = dialogue;
		this.$nextMode = nextMode;
		this.$lineIndex = -1;
		this.$next();
	};
	$SuperBernieWorld_Cutscene.__typeName = 'SuperBernieWorld.Cutscene';
	global.SuperBernieWorld.Cutscene = $SuperBernieWorld_Cutscene;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Cutscenes
	var $SuperBernieWorld_Cutscenes = function() {
	};
	$SuperBernieWorld_Cutscenes.__typeName = 'SuperBernieWorld.Cutscenes';
	$SuperBernieWorld_Cutscenes.init = function() {
		$SuperBernieWorld_Cutscenes.scenes = [];
		$SuperBernieWorld_Cutscenes.scenes.push([new $SuperBernieWorld_Dialogue.$ctor1(33, "I don't think it's government's job to find health care for people. I think it's the individual's job to find health care."), new $SuperBernieWorld_Dialogue.$ctor1(30, "'Medicare for All' will lower health care costs in this country by $450 billion a year and save the lives of 68,000 people who would otherwise have died.")]);
		$SuperBernieWorld_Cutscenes.scenes.push([new $SuperBernieWorld_Dialogue.$ctor1(32, "The American people are tired of the out-of-control spending, and they want Washington to get their act in order and stop spending money we don't have."), new $SuperBernieWorld_Dialogue.$ctor1(30, 'The American people are tired of subsidizing multi-billionaires who own some of the largest and most profitable corporations in America.')]);
		$SuperBernieWorld_Cutscenes.scenes.push([new $SuperBernieWorld_Dialogue.$ctor1(34, 'Think of me as the Grim Reaper!'), new $SuperBernieWorld_Dialogue.$ctor1(30, "I don't tolerate bullshit terribly well.")]);
		$SuperBernieWorld_Cutscenes.scenes.push([new $SuperBernieWorld_Dialogue.$ctor1(31, "It's you!"), new $SuperBernieWorld_Dialogue.$ctor1(30, 'Not me, us!')]);
	};
	global.SuperBernieWorld.Cutscenes = $SuperBernieWorld_Cutscenes;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.CutsceneStateValue
	var $SuperBernieWorld_CutsceneStateValue = function() {
	};
	$SuperBernieWorld_CutsceneStateValue.__typeName = 'SuperBernieWorld.CutsceneStateValue';
	global.SuperBernieWorld.CutsceneStateValue = $SuperBernieWorld_CutsceneStateValue;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Dialogue
	var $SuperBernieWorld_Dialogue = function() {
		this.portrait = 0;
		this.text = null;
	};
	$SuperBernieWorld_Dialogue.__typeName = 'SuperBernieWorld.Dialogue';
	$SuperBernieWorld_Dialogue.$ctor1 = function(portrait, text) {
		this.portrait = 0;
		this.text = null;
		this.portrait = portrait;
		this.text = text;
	};
	$SuperBernieWorld_Dialogue.getDefaultValue = function() {
		return new $SuperBernieWorld_Dialogue();
	};
	global.SuperBernieWorld.Dialogue = $SuperBernieWorld_Dialogue;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Direction
	var $SuperBernieWorld_Direction = function() {
	};
	$SuperBernieWorld_Direction.__typeName = 'SuperBernieWorld.Direction';
	global.SuperBernieWorld.Direction = $SuperBernieWorld_Direction;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Disclaimer
	var $SuperBernieWorld_Disclaimer = function(parent) {
		this.$finished = false;
		$SuperBernieWorld_Mode.call(this, parent);
		console.log("Creating 'Disclaimer' mode");
	};
	$SuperBernieWorld_Disclaimer.__typeName = 'SuperBernieWorld.Disclaimer';
	global.SuperBernieWorld.Disclaimer = $SuperBernieWorld_Disclaimer;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.EndScreen
	var $SuperBernieWorld_EndScreen = function(parent) {
		this.$menu = null;
		this.$finished = false;
		$SuperBernieWorld_Mode.call(this, parent);
		console.log("Creating 'EndScreen' mode");
		this.$menu = new $SuperBernieWorld_MenuStack();
		var $t1 = new $SuperBernieWorld_Menu([]);
		$t1.canClose = false;
		var actions = $t1;
		var kitsuneTailsUrl = 'https://kitsunegames.com/kitsunetails/';
		var topY = 40;
		actions.add(new $SuperBernieWorld_MenuOption('Congratulations!', new Franca.Point.$ctor2(128, topY + 0), 1, null, null, null, true, 37, 1, null));
		actions.add(new $SuperBernieWorld_MenuOption("You've helped Bernie defeat the GOP and", new Franca.Point.$ctor2(128, topY + 16), 1, null, null, null, true, 37, 1, null));
		actions.add(new $SuperBernieWorld_MenuOption('win the Presidency in Super Bernie World!', new Franca.Point.$ctor2(128, topY + 32), 1, null, null, null, true, 37, 1, null));
		var midY = 112;
		actions.add(new $SuperBernieWorld_MenuOption('If you enjoyed this game, make sure to', new Franca.Point.$ctor2(128, midY + 0), 1, null, null, null, true, 37, 1, null));
		actions.add(new $SuperBernieWorld_MenuOption('check out the follow up: Kitsune Tails!', new Franca.Point.$ctor2(128, midY + 16), 1, null, null, null, true, 37, 1, null));
		var bottomY = 168;
		actions.add(new $SuperBernieWorld_MenuOption.$ctor1('Go to Kitsune Tails', 128, bottomY + 0, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device) {
			this.parent.tryOpenUrl(kitsuneTailsUrl, device);
		})));
		actions.add(new $SuperBernieWorld_MenuOption.$ctor1('Continue to Credits', 128, bottomY + 16, 1, ss.mkdel(this, function() {
			this.$next();
		}), null, null, true, 37, 1, null));
		this.$menu.open(actions);
	};
	$SuperBernieWorld_EndScreen.__typeName = 'SuperBernieWorld.EndScreen';
	global.SuperBernieWorld.EndScreen = $SuperBernieWorld_EndScreen;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.FlagEndScene
	var $SuperBernieWorld_FlagEndScene = function() {
	};
	$SuperBernieWorld_FlagEndScene.__typeName = 'SuperBernieWorld.FlagEndScene';
	$SuperBernieWorld_FlagEndScene.routine = function(player, map, game) {
		return new ss.IteratorBlockEnumerable(function() {
			return (function(player, map, game) {
				var $result, $state = 0, flagStartY, startTime, flagDuration, flagSound, alpha, playedMusic, accumulator, frameTime, sound, frameRule, startingFrameRule, frameRuleFrames, busSprite, busStart, busDuration, alpha1;
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								$SuperBernieWorld_SpeedrunHelper.get_state().cutscene = 1;
								player.stopBernieFist();
								$SuperBernieWorld_Audio.get_music().stopAllInstances();
								player.set_canBeKilled(false);
								flagStartY = map.flagY;
								startTime = $SuperBernieWorld_Time.get_real();
								flagDuration = new ss.TimeSpan((map.flagPoleBaseY - map.flagY) * 0.15 * 10000000);
								flagSound = $SuperBernieWorld_Audio.playSound(39, 1, 1);
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < flagDuration.ticks)) {
									$state = 2;
									continue $sm1;
								}
								alpha = Franca.Calc.clamp$3((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks / 10000000 / (flagDuration.ticks / 10000000), 0, 1);
								map.flagY = Franca.Calc.lerp$2(flagStartY, map.flagPoleBaseY, alpha);
								$result = 1;
								$state = 1;
								return true;
							}
							case 2: {
								$state = -1;
								map.flagY = map.flagPoleBaseY;
								if (ss.isValue(flagSound) && flagSound.get_state() === 1) {
									flagSound.stop();
								}
								// move off flag
								player.set_speedScalar(0.5);
								playedMusic = false;
								$state = 3;
								continue $sm1;
							}
							case 3: {
								$state = -1;
								if (!(player.get_x() < map.flagX + 8.5)) {
									$state = 4;
									continue $sm1;
								}
								player.move(3);
								if (!playedMusic && player.get_x() >= map.flagX + 1) {
									playedMusic = true;
									$SuperBernieWorld_Audio.playMusic(46, false);
								}
								$result = 1;
								$state = 3;
								return true;
							}
							case 4: {
								$state = -1;
								// show text
								game.set_showEndText(true);
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 5;
								continue $sm1;
							}
							case 5: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(1.5 * 10000000)).ticks)) {
									$state = 6;
									continue $sm1;
								}
								$result = 1;
								$state = 5;
								return true;
							}
							case 6: {
								$state = -1;
								// count votes
								accumulator = new ss.TimeSpan(0);
								frameTime = new ss.TimeSpan(Math.round(166666.666666667));
								sound = null;
								game.set_showEndVotes(true);
								$state = 7;
								continue $sm1;
							}
							case 7: {
								$state = -1;
								if (!($SuperBernieWorld_Score.get_votes() > 0)) {
									$state = 8;
									continue $sm1;
								}
								accumulator = new ss.TimeSpan(accumulator.ticks + $SuperBernieWorld_Time.get_realElapsed().ticks);
								while (accumulator.ticks >= frameTime.ticks && $SuperBernieWorld_Score.get_votes() > 0) {
									accumulator = new ss.TimeSpan(accumulator.ticks - frameTime.ticks);
									$SuperBernieWorld_Score.set_votes($SuperBernieWorld_Score.get_votes() - 1);
									game.set_levelEndVotes(game.get_levelEndVotes() + 1);
									if (ss.isValue(sound)) {
										sound.stop();
									}
									sound = $SuperBernieWorld_Audio.playSound(37, 0.75, 0.67);
								}
								$result = 1;
								$state = 7;
								return true;
							}
							case 8: {
								$state = -1;
								// pause
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 9;
								continue $sm1;
							}
							case 9: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(1 * 10000000)).ticks)) {
									$state = 10;
									continue $sm1;
								}
								$result = 1;
								$state = 9;
								return true;
							}
							case 10: {
								$state = -1;
								// count score
								game.set_showEndScore(true);
								$state = 11;
								continue $sm1;
							}
							case 11: {
								$state = -1;
								if (!($SuperBernieWorld_Score.get_value() > 0)) {
									$state = 12;
									continue $sm1;
								}
								accumulator = new ss.TimeSpan(accumulator.ticks + $SuperBernieWorld_Time.get_realElapsed().ticks);
								while (accumulator.ticks >= frameTime.ticks && $SuperBernieWorld_Score.get_value() > 0) {
									accumulator = new ss.TimeSpan(accumulator.ticks - frameTime.ticks);
									if ($SuperBernieWorld_Score.get_value() >= 50) {
										game.set_levelEndVotes(game.get_levelEndVotes() + 1);
										if (ss.isValue(sound)) {
											sound.stop();
										}
										sound = $SuperBernieWorld_Audio.playSound(37, 0.75, 0.67);
									}
									$SuperBernieWorld_Score.set_value(Math.max(0, $SuperBernieWorld_Score.get_value() - 50));
								}
								$result = 1;
								$state = 11;
								return true;
							}
							case 12: {
								$state = -1;
								// pause
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 13;
								continue $sm1;
							}
							case 13: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(1.825 * 10000000)).ticks)) {
									$state = 14;
									continue $sm1;
								}
								// one frame rule is 0.35 seconds, so subtract half
								$result = 1;
								$state = 13;
								return true;
							}
							case 14: {
								$state = -1;
								//startTime = Time.Real;
								//var fadeDuration = TimeSpan.FromSeconds(2);
								//while (Time.Real - startTime < fadeDuration) {
								//    player.Move(InputDirection.Right);
								//    yield return 1.0 - ((Time.Real - startTime).TotalSeconds / fadeDuration.TotalSeconds);
								//}
								//yield return 0;
								// bus!
								// wait for the frame rule bus to arrive :3
								startingFrameRule = ss.Int32.div(Math.floor(game.get_frameRuleTime().ticks / 10000000 * 60), 21);
								$state = 15;
								continue $sm1;
							}
							case 15: {
								$state = -1;
								if (!true) {
									$state = 16;
									continue $sm1;
								}
								frameRuleFrames = Math.floor(game.get_frameRuleTime().ticks / 10000000 * 60);
								frameRule = ss.Int32.div(frameRuleFrames, 21);
								if (frameRuleFrames % 21 === 0 || frameRule > startingFrameRule) {
									$state = 16;
									continue $sm1;
								}
								$result = 1;
								$state = 15;
								return true;
							}
							case 16: {
								$state = -1;
								;
								// vroom vroom
								busSprite = $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 73);
								busStart = $SuperBernieWorld_Time.get_game();
								busDuration = new ss.TimeSpan(3 * 10000000);
								$state = 17;
								continue $sm1;
							}
							case 17: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - busStart.ticks)).ticks < busDuration.ticks)) {
									$state = 18;
									continue $sm1;
								}
								alpha1 = System.TimeSpanExtensions.divide$1(new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - busStart.ticks), busDuration);
								game.set_busX(Math.floor(Franca.Calc.lerp$2(-busSprite.get_sizeX() * $SuperBernieWorld_Core.tileSize, $SuperBernieWorld_Core.screenWidth + busSprite.get_sizeX() * $SuperBernieWorld_Core.tileSize, alpha1)));
								if (alpha1 >= 0.5) {
									game.set_busPickedUp(true);
								}
								$result = Math.min((1 - alpha1) * 3, 1);
								$state = 17;
								return true;
							}
							case 18: {
								$state = -1;
								$result = 0;
								$state = -1;
								return true;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, null, this);
			}).call(this, player, map, game);
		}, this);
	};
	global.SuperBernieWorld.FlagEndScene = $SuperBernieWorld_FlagEndScene;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Game
	var $SuperBernieWorld_Game = function(parent, mapIndex) {
		this.$renderer = null;
		this.$player = null;
		this.$map = null;
		this.$background = null;
		this.$physicsAccumulator = ss.getDefaultValue(ss.TimeSpan);
		this.$removeList = null;
		this.$mapIndex = 0;
		this.$menu = null;
		this.$paused = false;
		this.$timer = ss.getDefaultValue(ss.TimeSpan);
		this.$playingMusic = false;
		this.$playingMusicFast = false;
		this.$coinSound = null;
		this.$startedTime = ss.getDefaultValue(ss.TimeSpan);
		this.$exitMenu = null;
		this.$cancelButtonPress = false;
		this.$world = 0;
		this.$level = 0;
		this.$name = null;
		this.$shortName = null;
		this.$gopName = null;
		this.$finishedLevel = false;
		this.$levelEndRoutine = null;
		this.$alpha = 1;
		this.$spawnedEntities = null;
		this.$particles = null;
		this.$2$ShowEndTextField = false;
		this.$2$ShowDefeatTextField = false;
		this.$2$ShowEndVotesField = false;
		this.$2$LevelEndVotesField = 0;
		this.$2$ShowEndScoreField = false;
		this.$2$CheetoDialogueField = null;
		this.$2$CheetoDialogueLenField = 0;
		this.$2$BusXField = null;
		this.$2$BusPickedUpField = false;
		$SuperBernieWorld_Mode.call(this, parent);
		console.log("Creating 'Game' mode");
		this.$mapIndex = Franca.Calc.mod$3(mapIndex, $SuperBernieWorld_Assets.maps.length);
		this.$world = ss.Int32.div(this.$mapIndex, 3) + 1;
		this.$level = this.$mapIndex % 3 + 1;
		this.$name = $SuperBernieWorld_Assets.mapNames[((this.$world - 1) * 3 + (this.$level - 1)) % $SuperBernieWorld_Assets.mapNames.length];
		this.$shortName = $SuperBernieWorld_Assets.mapNamesShort[((this.$world - 1) * 3 + (this.$level - 1)) % $SuperBernieWorld_Assets.mapNames.length];
		this.$gopName = $SuperBernieWorld_Assets.gopNames[(this.$world - 1) % $SuperBernieWorld_Assets.gopNames.length];
		$SuperBernieWorld_Core.set_random(new Franca.RNG.$ctor2((this.$world * 10847 | this.$level * 10847 << 16) ^ System.StringExtensions.getUniqueHash(ss.coalesce(this.$name, 'missing state name'), 0) ^ System.StringExtensions.getUniqueHash(ss.coalesce(this.$gopName, 'missing republican name'), 0)));
		this.$map = $SuperBernieWorld_Assets.maps[this.$mapIndex].makeInstance();
		this.$background = $SuperBernieWorld_Assets.get($SuperBernieWorld_Maps_Map).call(null, ((this.$level === 3) ? 22 : 18) + (this.$world - 1));
		var $t1 = new $SuperBernieWorld_GameRenderer();
		$t1.set_map(this.$map);
		$t1.set_background(this.$background);
		this.$renderer = $t1;
		this.$player = Enumerable.from(this.$map.entities).where(function(e) {
			return ss.isInstanceOfType(e, $SuperBernieWorld_Entities_Bernie);
		}).orderBy(function(e1) {
			return e1.get_x();
		}).select(function(e2) {
			return ss.cast(e2, $SuperBernieWorld_Entities_Bernie);
		}).first();
		switch ($SuperBernieWorld_Core.get_bernieState()) {
			case 1: {
				this.$player.setLarge();
				break;
			}
			case 2: {
				this.$player.setRose();
				break;
			}
		}
		this.$removeList = [];
		this.$spawnedEntities = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [$SuperBernieWorld_Entities_Entity]))();
		this.$menu = new $SuperBernieWorld_MenuStack();
		var $t2 = new $SuperBernieWorld_Menu([new $SuperBernieWorld_MenuOption.$ctor1('Exit to title?', 128, 104, 1, null, null, null, true, 37, 1, null), new $SuperBernieWorld_MenuOption.$ctor1('Yes', 96, 120, 1, ss.mkdel(this, function() {
			this.parent.startTitle();
		}), null, null, true, 37, 1, null), new $SuperBernieWorld_MenuOption.$ctor1('No', 160, 120, 1, ss.mkdel(this, function() {
			this.$menu.cancel();
		}), null, null, false, 37, 1, null)]);
		$t2.selected = 1;
		this.$exitMenu = $t2;
		var boss = Enumerable.from(this.$map.entities).where(function(e3) {
			return ss.isInstanceOfType(e3, $SuperBernieWorld_Entities_IBoss);
		}).select(function(e4) {
			return ss.cast(e4, $SuperBernieWorld_Entities_IBoss);
		}).firstOrDefault(null, ss.getDefaultValue($SuperBernieWorld_Entities_IBoss));
		if (ss.isValue(boss)) {
			boss.setDifficulty(this.$world - 1);
		}
		this.$particles = [];
	};
	$SuperBernieWorld_Game.__typeName = 'SuperBernieWorld.Game';
	global.SuperBernieWorld.Game = $SuperBernieWorld_Game;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.GameRenderer
	var $SuperBernieWorld_GameRenderer = function() {
		this.$map = null;
		this.$background = null;
		this.$1$ScrollField = 0;
		this.$1$ScrollOverrideField = false;
	};
	$SuperBernieWorld_GameRenderer.__typeName = 'SuperBernieWorld.GameRenderer';
	$SuperBernieWorld_GameRenderer.getPaletteColor = function(index, palettesX, palettesY, alpha) {
		var palX = index % palettesX / (palettesX - 1);
		var palY = ss.Int32.div(index, palettesX) % palettesY / (palettesY - 1);
		return new Franca.Color.$ctor4(palX, palY, 0, alpha);
	};
	global.SuperBernieWorld.GameRenderer = $SuperBernieWorld_GameRenderer;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.InputDirection
	var $SuperBernieWorld_InputDirection = function() {
	};
	$SuperBernieWorld_InputDirection.__typeName = 'SuperBernieWorld.InputDirection';
	global.SuperBernieWorld.InputDirection = $SuperBernieWorld_InputDirection;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.InputEventExtensions
	var $SuperBernieWorld_InputEventExtensions = function() {
	};
	$SuperBernieWorld_InputEventExtensions.__typeName = 'SuperBernieWorld.InputEventExtensions';
	$SuperBernieWorld_InputEventExtensions.isHeld = function(e) {
		if (ss.isValue(e.gamepadBind)) {
			var bind = ss.unbox(e.gamepadBind);
			var btn = e.gamepad.get_item(bind.button);
			return btn.get_isPressed() && btn.get_wasPressed();
		}
		else if (ss.isValue(e.keyBind)) {
			var bind1 = ss.unbox(e.keyBind);
			return bind1.key.lastState === 1 && bind1.key.state === 1;
		}
		return false;
	};
	global.SuperBernieWorld.InputEventExtensions = $SuperBernieWorld_InputEventExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.LeverEndScene
	var $SuperBernieWorld_LeverEndScene = function() {
	};
	$SuperBernieWorld_LeverEndScene.__typeName = 'SuperBernieWorld.LeverEndScene';
	$SuperBernieWorld_LeverEndScene.$trumpCutscene = function(player, map, game, boss, renderer) {
		return new ss.IteratorBlockEnumerable(function() {
			return (function(player, map, game, boss, renderer) {
				var $result, $state = 0, $t1, ent, rose, cheeto, baseScroll, targetScroll, tween, startTime, frameStartTime, font, text, accumulator, textSpeed, playedSound, volume, colH, colV;
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								for ($t1 = 0; $t1 < map.entities.length; $t1++) {
									ent = map.entities[$t1];
									rose = ss.safeCast(ent, $SuperBernieWorld_Entities_RoseProjectile);
									if (ss.isValue(rose)) {
										rose.die();
									}
								}
								cheeto = ss.cast(boss, $SuperBernieWorld_Entities_Cheeto);
								baseScroll = renderer.clampScroll(renderer.get_scroll(), renderer.getClampWidth(map));
								targetScroll = renderer.clampScroll(renderer.get_scroll() + 1000, renderer.getClampWidth(map));
								renderer.set_scrollOverride(true);
								map.lever.activate();
								// activating lever stops the scroll lock
								tween = Franca.Tweening.Tween.double$1(null).from(0).to(1).duration$1(1.25).onTick(function(v) {
									renderer.set_scroll(Math.floor(Franca.Calc.lerp$2(baseScroll, targetScroll, v)));
								}).start$1();
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								if (!(tween.get_state() !== 0)) {
									$state = 2;
									continue $sm1;
								}
								$result = 1;
								$state = 1;
								return true;
							}
							case 2: {
								$state = -1;
								// pause
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 3;
								continue $sm1;
							}
							case 3: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(2 * 10000000)).ticks)) {
									$state = 4;
									continue $sm1;
								}
								$result = 1;
								$state = 3;
								return true;
							}
							case 4: {
								$state = -1;
								// dialogue
								frameStartTime = $SuperBernieWorld_Time.get_game();
								cheeto.set_textureOverride(function() {
									return cheeto.get_sprite().getPowerDown((new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - frameStartTime.ticks)).ticks / 10000000 * 3);
								});
								font = $SuperBernieWorld_Core.get_mainFont();
								text = "Please don't kick me out of the White House! How will I make money if I'm not president??";
								accumulator = new ss.TimeSpan(0);
								textSpeed = new ss.TimeSpan(0.0333333333333333 * 10000000);
								game.set_cheetoDialogueLen(0);
								game.set_cheetoDialogue(text);
								$state = 5;
								continue $sm1;
							}
							case 5: {
								$state = -1;
								if (!(game.get_cheetoDialogueLen() < text.length)) {
									$state = 6;
									continue $sm1;
								}
								playedSound = false;
								accumulator = new ss.TimeSpan(accumulator.ticks + $SuperBernieWorld_Time.get_realElapsed().ticks);
								while (accumulator.ticks >= textSpeed.ticks) {
									game.set_cheetoDialogueLen(game.get_cheetoDialogueLen() + 1);
									accumulator = new ss.TimeSpan(accumulator.ticks - textSpeed.ticks);
									if (!playedSound && game.get_cheetoDialogueLen() % 3 === 0) {
										$SuperBernieWorld_Audio.playSound(37, 1, 1.15);
										playedSound = true;
									}
								}
								$result = 1;
								$state = 5;
								return true;
							}
							case 6: {
								$state = -1;
								game.set_cheetoDialogueLen(text.length);
								// pause
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 7;
								continue $sm1;
							}
							case 7: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(3 * 10000000)).ticks)) {
									$state = 8;
									continue $sm1;
								}
								$result = 1;
								$state = 7;
								return true;
							}
							case 8: {
								$state = -1;
								// move to lever
								player.set_speedScalar(0.5);
								volume = {};
								colH = {}, colV = {};
								$state = 9;
								continue $sm1;
							}
							case 9: {
								$state = -1;
								if (!true) {
									$state = 10;
									continue $sm1;
								}
								player.move(3);
								player.getCollisionInfo(volume, colH, colV);
								if (colV.$.location.x + colV.$.size.width > Math.floor(map.lever.get_x())) {
									$state = 10;
									continue $sm1;
								}
								$result = 1;
								$state = 9;
								return true;
							}
							case 10: {
								$state = -1;
								game.set_cheetoDialogue(null);
								$state = -1;
								break $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, null, this);
			}).call(this, player, map, game, boss, renderer);
		}, this);
	};
	$SuperBernieWorld_LeverEndScene.routine = function(player, map, game, boss, renderer) {
		return new ss.IteratorBlockEnumerable(function() {
			return (function(player, map, game, boss, renderer) {
				var $result, $state = 0, bossEnt, ai, frameTime, $t1, dbl, startTime, RemoveDrawbridgeTile, drawbridgeX, elapsed, fallSound, fallDuration, fallBaseY, tween, baseScroll, targetScroll, playedMusic, accumulator, sound, fadeDuration;
				var $finally = function() {
					$t1.dispose();
				};
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								$SuperBernieWorld_SpeedrunHelper.get_state().cutscene = ((ss.isValue(boss) && boss.get_isFlamingHotCheeto()) ? 3 : 2);
								player.stopBernieFist();
								bossEnt = ss.cast(boss, $SuperBernieWorld_Entities_Entity);
								ai = (ss.isValue(bossEnt) ? ss.safeCast(bossEnt.get_AI(), $SuperBernieWorld_Entities_AIThrower) : null);
								if (ss.isValue(ai)) {
									ai.set_bossDefeat(true);
								}
								$SuperBernieWorld_Audio.get_music().stopAllInstances();
								frameTime = new ss.TimeSpan(Math.round(166666.666666667));
								player.set_canBeKilled(false);
								if (ss.isValue(boss) && boss.get_isFlamingHotCheeto()) {
									$t1 = ss.getEnumerator($SuperBernieWorld_LeverEndScene.$trumpCutscene(player, map, game, boss, renderer));
									$state = 4;
									continue $sm1;
								}
								else {
									player.set_y(Math.min(player.get_y(), map.lever.get_y()));
									$state = 1;
									continue $sm1;
								}
							}
							case 4: {
								$state = 2;
								if (!$t1.moveNext()) {
									$state = 3;
									continue $sm1;
								}
								dbl = $t1.current();
								$result = dbl;
								$state = 4;
								return true;
							}
							case 3: {
								$state = -1;
								$finally.call(this);
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								// wait for player and boss to hit floor and face boss
								$state = 5;
								continue $sm1;
							}
							case 5: {
								$state = -1;
								if (!(!player.get_onGround() || ss.isValue(ai) && ai.get_jumping())) {
									$state = 6;
									continue $sm1;
								}
								if (ss.isValue(ai)) {
									ai.tick();
								}
								$result = 1;
								$state = 5;
								return true;
							}
							case 6: {
								$state = -1;
								// pause and flip lever
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 7;
								continue $sm1;
							}
							case 7: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(0.5 * 10000000)).ticks)) {
									$state = 8;
									continue $sm1;
								}
								player.face(1);
								$result = 1;
								$state = 7;
								return true;
							}
							case 8: {
								$state = -1;
								map.lever.flipLever();
								$SuperBernieWorld_Audio.playSound(44, 1, 2.5);
								boss.set_textureOverride(function() {
									return bossEnt.get_sprite().getFalling(0);
								});
								// pause
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 9;
								continue $sm1;
							}
							case 9: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(0.5 * 10000000)).ticks)) {
									$state = 10;
									continue $sm1;
								}
								$result = 1;
								$state = 9;
								return true;
							}
							case 10: {
								$state = -1;
								// withdraw drawbridge
								RemoveDrawbridgeTile = function(x) {
									if (x < 0) {
										return false;
									}
									var removed = false;
									for (var $t2 = 0; $t2 < map.layers.length; $t2++) {
										var layer = map.layers[$t2];
										if (ss.isNullOrUndefined(layer.tiles) || x < layer.area.location.x || x >= layer.area.location.x + layer.area.size.width) {
											continue;
										}
										for (var y = 0; y < map.height; y++) {
											var tile = ss.arrayGet(layer.tiles, x, y);
											if (ss.Nullable$1.liftne($SuperBernieWorld_Maps_TileID.op_Inequality, tile, null)) {
												if (tile.tile === 133) {
													ss.arraySet(layer.tiles, x, y, ss.getDefaultValue($SuperBernieWorld_Maps_TileID));
													removed = true;
												}
												else if (tile.tile === 101) {
													ss.arraySet(layer.tiles, x, y, ss.getDefaultValue($SuperBernieWorld_Maps_TileID));
												}
											}
										}
									}
									return removed;
								};
								drawbridgeX = Math.floor(map.lever.get_x()) - 1;
								elapsed = new ss.TimeSpan(0);
								$state = 11;
								continue $sm1;
							}
							case 11: {
								$state = -1;
								if (!true) {
									$state = 12;
									continue $sm1;
								}
								elapsed = new ss.TimeSpan(elapsed.ticks + $SuperBernieWorld_Time.get_gameElapsed().ticks);
								if (elapsed.ticks >= (new ss.TimeSpan(Math.trunc(frameTime.ticks * 8))).ticks) {
									if (RemoveDrawbridgeTile(drawbridgeX)) {
										drawbridgeX--;
										$SuperBernieWorld_Audio.playSound(44, 1, 0.67);
									}
									else {
										$state = 12;
										continue $sm1;
									}
									elapsed = new ss.TimeSpan(elapsed.ticks - (new ss.TimeSpan(Math.trunc(frameTime.ticks * 8))).ticks);
								}
								$result = 1;
								$state = 11;
								return true;
							}
							case 12: {
								$state = -1;
								// coyote time
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 13;
								continue $sm1;
							}
							case 13: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(1 * 10000000)).ticks)) {
									$state = 14;
									continue $sm1;
								}
								$result = 1;
								$state = 13;
								return true;
							}
							case 14: {
								$state = -1;
								// fall
								fallSound = $SuperBernieWorld_Audio.playSound(39, 1, 1);
								fallDuration = new ss.TimeSpan(1 * 10000000);
								fallBaseY = bossEnt.get_y();
								tween = Franca.Tweening.Tween.double$1(null).from(0).to(1).duration$2(fallDuration).onTick(function(v) {
									bossEnt.set_y(Franca.Calc.lerp$2(fallBaseY, 15, v));
								}).start$1();
								$state = 15;
								continue $sm1;
							}
							case 15: {
								$state = -1;
								if (!(tween.get_state() !== 0)) {
									$state = 16;
									continue $sm1;
								}
								$result = 1;
								$state = 15;
								return true;
							}
							case 16: {
								$state = -1;
								fallSound.stop();
								$SuperBernieWorld_Audio.playSound(44, 1, 0.33);
								if (boss.get_isFlamingHotCheeto()) {
									boss.set_textureOverride(function() {
										return bossEnt.get_sprite().getCrouching(0);
									});
									$SuperBernieWorld_Score.set_value($SuperBernieWorld_Score.get_value() + bossEnt.get_points());
								}
								// tween to scroll we should have after breaking scroll lock, then break scroll lock
								baseScroll = renderer.clampScroll(renderer.get_scroll(), renderer.getClampWidth(map));
								targetScroll = renderer.getUnclampedScroll(player);
								renderer.set_scrollOverride(true);
								map.lever.activate();
								// activating lever stops the scroll lock
								tween = Franca.Tweening.Tween.double$1(null).from(0).to(1).duration$1(1.25).onTick(function(v1) {
									renderer.set_scroll(Math.floor(Franca.Calc.lerp$2(baseScroll, targetScroll, v1)));
								}).start$1();
								$state = 17;
								continue $sm1;
							}
							case 17: {
								$state = -1;
								if (!(tween.get_state() !== 0)) {
									$state = 18;
									continue $sm1;
								}
								$result = 1;
								$state = 17;
								return true;
							}
							case 18: {
								$state = -1;
								renderer.set_scrollOverride(false);
								// pause
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 19;
								continue $sm1;
							}
							case 19: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(0.5 * 10000000)).ticks)) {
									$state = 20;
									continue $sm1;
								}
								$result = 1;
								$state = 19;
								return true;
							}
							case 20: {
								$state = -1;
								// move off lever
								player.set_speedScalar(0.5);
								playedMusic = false;
								$state = 21;
								continue $sm1;
							}
							case 21: {
								$state = -1;
								if (!(player.get_x() < map.lever.get_x() + 10.5)) {
									$state = 22;
									continue $sm1;
								}
								player.move(3);
								if (!playedMusic && player.get_x() >= map.lever.get_x() + 1) {
									playedMusic = true;
									$SuperBernieWorld_Audio.playMusic(46, false);
								}
								$result = 1;
								$state = 21;
								return true;
							}
							case 22: {
								$state = -1;
								// show text
								game.set_showEndText(true);
								game.set_showDefeatText(true);
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 23;
								continue $sm1;
							}
							case 23: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(1.5 * 10000000)).ticks)) {
									$state = 24;
									continue $sm1;
								}
								$result = 1;
								$state = 23;
								return true;
							}
							case 24: {
								$state = -1;
								// count votes
								accumulator = new ss.TimeSpan(0);
								sound = null;
								game.set_showEndVotes(true);
								$state = 25;
								continue $sm1;
							}
							case 25: {
								$state = -1;
								if (!($SuperBernieWorld_Score.get_votes() > 0)) {
									$state = 26;
									continue $sm1;
								}
								accumulator = new ss.TimeSpan(accumulator.ticks + $SuperBernieWorld_Time.get_realElapsed().ticks);
								while (accumulator.ticks >= frameTime.ticks && $SuperBernieWorld_Score.get_votes() > 0) {
									accumulator = new ss.TimeSpan(accumulator.ticks - frameTime.ticks);
									$SuperBernieWorld_Score.set_votes($SuperBernieWorld_Score.get_votes() - 1);
									game.set_levelEndVotes(game.get_levelEndVotes() + 1);
									if (ss.isValue(sound)) {
										sound.stop();
									}
									sound = $SuperBernieWorld_Audio.playSound(37, 0.75, 0.67);
								}
								$result = 1;
								$state = 25;
								return true;
							}
							case 26: {
								$state = -1;
								// pause
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 27;
								continue $sm1;
							}
							case 27: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(1 * 10000000)).ticks)) {
									$state = 28;
									continue $sm1;
								}
								$result = 1;
								$state = 27;
								return true;
							}
							case 28: {
								$state = -1;
								// count score
								game.set_showEndScore(true);
								$state = 29;
								continue $sm1;
							}
							case 29: {
								$state = -1;
								if (!($SuperBernieWorld_Score.get_value() > 0)) {
									$state = 30;
									continue $sm1;
								}
								accumulator = new ss.TimeSpan(accumulator.ticks + $SuperBernieWorld_Time.get_realElapsed().ticks);
								while (accumulator.ticks >= frameTime.ticks && $SuperBernieWorld_Score.get_value() > 0) {
									accumulator = new ss.TimeSpan(accumulator.ticks - frameTime.ticks);
									if ($SuperBernieWorld_Score.get_value() >= 50) {
										game.set_levelEndVotes(game.get_levelEndVotes() + 1);
										if (ss.isValue(sound)) {
											sound.stop();
										}
										sound = $SuperBernieWorld_Audio.playSound(37, 0.75, 0.67);
									}
									$SuperBernieWorld_Score.set_value(Math.max(0, $SuperBernieWorld_Score.get_value() - 50));
								}
								$result = 1;
								$state = 29;
								return true;
							}
							case 30: {
								$state = -1;
								// pause
								startTime = $SuperBernieWorld_Time.get_real();
								$state = 31;
								continue $sm1;
							}
							case 31: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(2 * 10000000)).ticks)) {
									$state = 32;
									continue $sm1;
								}
								$result = 1;
								$state = 31;
								return true;
							}
							case 32: {
								$state = -1;
								// move away and fade
								startTime = $SuperBernieWorld_Time.get_real();
								fadeDuration = new ss.TimeSpan(2 * 10000000);
								$state = 33;
								continue $sm1;
							}
							case 33: {
								$state = -1;
								if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < fadeDuration.ticks)) {
									$state = 34;
									continue $sm1;
								}
								player.move(3);
								$result = 1 - (new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks / 10000000 / (fadeDuration.ticks / 10000000);
								$state = 33;
								return true;
							}
							case 34: {
								$state = -1;
								$result = 0;
								$state = -1;
								return true;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, function() {
					try {
						switch ($state) {
							case 2:
							case 3:
							case 4: {
								try {
									break;
								}
								finally {
									$finally.call(this);
								}
							}
						}
					}
					finally {
						$state = -1;
					}
				}, this);
			}).call(this, player, map, game, boss, renderer);
		}, this);
	};
	global.SuperBernieWorld.LeverEndScene = $SuperBernieWorld_LeverEndScene;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Menu
	var $SuperBernieWorld_Menu = function(options) {
		this.options = null;
		this.selected = 0;
		this.canClose = false;
		this.selectableCount = 0;
		this.options = Enumerable.from(options || []).toArray();
		this.canClose = true;
		for (var $t1 = 0; $t1 < options.length; $t1++) {
			var opt = options[$t1];
			if (opt.selectable) {
				this.selectableCount++;
			}
		}
	};
	$SuperBernieWorld_Menu.__typeName = 'SuperBernieWorld.Menu';
	$SuperBernieWorld_Menu.playCancelSound = function() {
		$SuperBernieWorld_Audio.playSound(37, 1, 0.8);
	};
	global.SuperBernieWorld.Menu = $SuperBernieWorld_Menu;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.MenuOption
	var $SuperBernieWorld_MenuOption = function(text, location, align, onAccept, onRight, onLeft, playSound, acceptSound, acceptSoundPitch, onUrl) {
		this.text = null;
		this.location = ss.getDefaultValue(Franca.Point);
		this.align = 0;
		this.selectable = false;
		this.onAccept = null;
		this.onUrl = null;
		this.onLeft = null;
		this.onRight = null;
		this.playSound = false;
		this.acceptSound = 0;
		this.acceptSoundPitch = 0;
		this.isUrl = false;
		this.text = text;
		this.location = location;
		this.align = align;
		this.selectable = !ss.staticEquals(onAccept, null) || !ss.staticEquals(onUrl, null);
		this.onAccept = onAccept;
		this.onLeft = onLeft;
		this.onRight = onRight;
		this.playSound = playSound;
		this.acceptSound = acceptSound;
		this.acceptSoundPitch = acceptSoundPitch;
		this.onUrl = onUrl;
	};
	$SuperBernieWorld_MenuOption.__typeName = 'SuperBernieWorld.MenuOption';
	$SuperBernieWorld_MenuOption.$ctor1 = function(text, x, y, align, onAccept, onRight, onLeft, playSound, acceptSound, acceptSoundPitch, onUrl) {
		$SuperBernieWorld_MenuOption.call(this, text, new Franca.Point.$ctor2(x, y), align, onAccept, onRight, onLeft, playSound, acceptSound, acceptSoundPitch, onUrl);
	};
	global.SuperBernieWorld.MenuOption = $SuperBernieWorld_MenuOption;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.MenuStack
	var $SuperBernieWorld_MenuStack = function() {
		this.$menus = null;
		this.$menus = new Array();
	};
	$SuperBernieWorld_MenuStack.__typeName = 'SuperBernieWorld.MenuStack';
	global.SuperBernieWorld.MenuStack = $SuperBernieWorld_MenuStack;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.MenuStackExtensions
	var $SuperBernieWorld_MenuStackExtensions = function() {
	};
	$SuperBernieWorld_MenuStackExtensions.__typeName = 'SuperBernieWorld.MenuStackExtensions';
	$SuperBernieWorld_MenuStackExtensions.inMenu = function(menu) {
		return ss.isValue(menu) && ss.isValue(menu.get_current());
	};
	global.SuperBernieWorld.MenuStackExtensions = $SuperBernieWorld_MenuStackExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Mode
	var $SuperBernieWorld_Mode = function(parent) {
		this.parent = null;
		this.parent = parent;
	};
	$SuperBernieWorld_Mode.__typeName = 'SuperBernieWorld.Mode';
	global.SuperBernieWorld.Mode = $SuperBernieWorld_Mode;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.PreLevel
	var $SuperBernieWorld_PreLevel = function(parent, nextMode, world, level) {
		this.$world = 0;
		this.$level = 0;
		this.$name = null;
		this.$startTime = ss.getDefaultValue(ss.TimeSpan);
		this.$nextMode = null;
		this.$finished = false;
		this.$co = null;
		$SuperBernieWorld_Mode.call(this, parent);
		console.log("Creating 'PreLevel' mode");
		this.$nextMode = nextMode;
		this.$world = world;
		this.$level = level;
		this.$name = $SuperBernieWorld_Assets.mapNames[((world - 1) * 3 + (level - 1)) % $SuperBernieWorld_Assets.mapNames.length];
	};
	$SuperBernieWorld_PreLevel.__typeName = 'SuperBernieWorld.PreLevel';
	global.SuperBernieWorld.PreLevel = $SuperBernieWorld_PreLevel;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.RenderTweenManager
	var $SuperBernieWorld_RenderTweenManager = function() {
		this.$queuedTweens = null;
		Franca.Tweening.TweenManager.call(this);
		this.$queuedTweens = new Array();
	};
	$SuperBernieWorld_RenderTweenManager.__typeName = 'SuperBernieWorld.RenderTweenManager';
	global.SuperBernieWorld.RenderTweenManager = $SuperBernieWorld_RenderTweenManager;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Score
	var $SuperBernieWorld_Score = function() {
	};
	$SuperBernieWorld_Score.__typeName = 'SuperBernieWorld.Score';
	$SuperBernieWorld_Score.reset = function() {
		$SuperBernieWorld_Score.$value = $SuperBernieWorld_Score.$votes = 0;
	};
	$SuperBernieWorld_Score.get_value = function() {
		return Math.min(9999999, $SuperBernieWorld_Score.$value);
	};
	$SuperBernieWorld_Score.set_value = function(value) {
		$SuperBernieWorld_Score.$value = value;
	};
	$SuperBernieWorld_Score.get_votes = function() {
		return Math.min(99, $SuperBernieWorld_Score.$votes);
	};
	$SuperBernieWorld_Score.set_votes = function(value) {
		$SuperBernieWorld_Score.$votes = value;
	};
	global.SuperBernieWorld.Score = $SuperBernieWorld_Score;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.SpeedrunHelper
	var $SuperBernieWorld_SpeedrunHelper = function() {
	};
	$SuperBernieWorld_SpeedrunHelper.__typeName = 'SuperBernieWorld.SpeedrunHelper';
	$SuperBernieWorld_SpeedrunHelper.initialize = function() {
		if (ss.isValue($SuperBernieWorld_SpeedrunHelper.$state)) {
			throw new ss.InvalidOperationException("Can't initialize SpeedrunHelper: was already initialized (state was not null)");
		}
		$SuperBernieWorld_SpeedrunHelper.$state = new $SuperBernieWorld_SpeedrunHelper$GameState($SuperBernieWorld_SpeedrunHelper.$tag);
	};
	$SuperBernieWorld_SpeedrunHelper.free = function() {
		if (!ss.isValue($SuperBernieWorld_SpeedrunHelper.$state)) {
			$SuperBernieWorld_SpeedrunHelper.$state = null;
		}
	};
	$SuperBernieWorld_SpeedrunHelper.get_state = function() {
		return $SuperBernieWorld_SpeedrunHelper.$state;
	};
	global.SuperBernieWorld.SpeedrunHelper = $SuperBernieWorld_SpeedrunHelper;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.SpeedrunHelper.GameState
	var $SuperBernieWorld_SpeedrunHelper$GameState = function(tag) {
		this.tag = 0;
		this.gameStarted = 0;
		this.currentLevel = 0;
		this.cutscene = 0;
		this.tag = tag;
		this.gameStarted = 0;
		this.currentLevel = -1;
		this.cutscene = 0;
	};
	$SuperBernieWorld_SpeedrunHelper$GameState.__typeName = 'SuperBernieWorld.SpeedrunHelper$GameState';
	global.SuperBernieWorld.SpeedrunHelper$GameState = $SuperBernieWorld_SpeedrunHelper$GameState;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Time
	var $SuperBernieWorld_Time = function() {
	};
	$SuperBernieWorld_Time.__typeName = 'SuperBernieWorld.Time';
	$SuperBernieWorld_Time.get_game = function() {
		return $SuperBernieWorld_Time.$1$GameField;
	};
	$SuperBernieWorld_Time.set_game = function(value) {
		$SuperBernieWorld_Time.$1$GameField = value;
	};
	$SuperBernieWorld_Time.get_real = function() {
		return $SuperBernieWorld_Time.$1$RealField;
	};
	$SuperBernieWorld_Time.set_real = function(value) {
		$SuperBernieWorld_Time.$1$RealField = value;
	};
	$SuperBernieWorld_Time.get_gameElapsed = function() {
		return $SuperBernieWorld_Time.$1$GameElapsedField;
	};
	$SuperBernieWorld_Time.set_gameElapsed = function(value) {
		$SuperBernieWorld_Time.$1$GameElapsedField = value;
	};
	$SuperBernieWorld_Time.get_realElapsed = function() {
		return $SuperBernieWorld_Time.$1$RealElapsedField;
	};
	$SuperBernieWorld_Time.set_realElapsed = function(value) {
		$SuperBernieWorld_Time.$1$RealElapsedField = value;
	};
	$SuperBernieWorld_Time.update = function(gameElapsed, realElapsed) {
		$SuperBernieWorld_Time.set_game(new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks + gameElapsed.ticks));
		$SuperBernieWorld_Time.set_real(new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks + realElapsed.ticks));
		$SuperBernieWorld_Time.set_gameElapsed(gameElapsed);
		$SuperBernieWorld_Time.set_realElapsed(realElapsed);
	};
	global.SuperBernieWorld.Time = $SuperBernieWorld_Time;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Titlescreen
	var $SuperBernieWorld_Titlescreen = function(parent) {
		this.$map = null;
		this.$renderers = null;
		this.$scroll = 0;
		this.$menu = null;
		this.$mainMenu = null;
		this.$pitchInMenu = null;
		this.$sfxVolume = null;
		this.$musVolume = null;
		this.$playingMusic = false;
		this.$styleTween = null;
		this.$styleIndex = 0;
		this.$styleAlpha = 0;
		$SuperBernieWorld_Mode.call(this, parent);
		console.log("Creating 'TitleScreen' mode");
		this.$map = Enumerable.from($SuperBernieWorld_Assets.maps).first();
		this.$renderers = new Array(5);
		var $t2 = this.$renderers;
		var $t1 = new $SuperBernieWorld_GameRenderer();
		$t1.set_map(this.$map.makeInstance());
		$t1.set_background($SuperBernieWorld_Assets.get($SuperBernieWorld_Maps_Map).call(null, 18));
		$t2[0] = $t1;
		this.$addTilesetSwappedMap(1);
		this.$addTilesetSwappedMap(2);
		this.$addTilesetSwappedMap(3);
		this.$renderers[4] = this.$renderers[2];
		this.$menu = new $SuperBernieWorld_MenuStack();
		var $t3 = new $SuperBernieWorld_Menu([]);
		$t3.canClose = false;
		this.$mainMenu = $t3;
		var menuY = 120;
		this.$mainMenu.add(new $SuperBernieWorld_MenuOption.$ctor1('New Game', 128, menuY, 1, ss.mkdel(this, function() {
			this.parent.startGame(0);
		}), null, null, true, 38, 1, null));
		menuY += 16;
		var kitsuneTailsUrl = 'https://kitsunegames.com/kitsunetails/';
		var supportUrl = 'https://ko-fi.com/sharkhugseniko';
		this.$mainMenu.add(new $SuperBernieWorld_MenuOption.$ctor1('Check out the Sequel', 128, menuY, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device) {
			this.parent.tryOpenUrl(kitsuneTailsUrl, device);
		})));
		menuY += 16;
		//mainMenu.Add(new MenuOption("Support the Developers", Core.ScreenWidth / 2, menuY, onUrl: (device) => Parent.TryOpenUrl(supportUrl, device)));
		//menuY += 16;
		this.$mainMenu.add(this.$sfxVolume = new $SuperBernieWorld_MenuOption.$ctor1(ss.formatString('Sfx Volume: {0}%', Math.round($SuperBernieWorld_Audio.get_sfxVolume() * 100)), 128, menuY, 1, ss.mkdel(this, this.$increaseSfxVolume), ss.mkdel(this, this.$increaseSfxVolume), ss.mkdel(this, this.$decreaseSfxVolume), true, 37, 1, null));
		menuY += 16;
		this.$mainMenu.add(this.$musVolume = new $SuperBernieWorld_MenuOption.$ctor1(ss.formatString('Music Volume: {0}%', Math.round($SuperBernieWorld_Audio.get_musicVolume() * 100)), 128, menuY, 1, ss.mkdel(this, this.$increaseMusicVolume), ss.mkdel(this, this.$increaseMusicVolume), ss.mkdel(this, this.$decreaseMusicVolume), true, 37, 1, null));
		menuY += 16;
		this.$mainMenu.add(new $SuperBernieWorld_MenuOption.$ctor1('Credits', 128, menuY, 1, ss.mkdel(this, function() {
			this.parent.changeMode(new $SuperBernieWorld_Credits(this.parent, false));
		}), null, null, true, 37, 1, null));
		menuY += 16;
		this.$pitchInMenu = new $SuperBernieWorld_Menu([new $SuperBernieWorld_MenuOption.$ctor1('Donate through ActBlue', 128, 112, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device1) {
			this.parent.tryOpenUrl('https://secure.actblue.com/donate/bernie-2020-splash?refcode=website-bar-200219', device1);
		})), new $SuperBernieWorld_MenuOption.$ctor1('Install the Bern app', 128, 128, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device2) {
			this.parent.tryOpenUrl('https://berniesanders.com/bern-to-win/?_branch_match_id=744910863656416627&utm_medium=marketing', device2);
		})), new $SuperBernieWorld_MenuOption.$ctor1('Texting for Bernie', 128, 144, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device3) {
			this.parent.tryOpenUrl('https://berniesanders.com/text/', device3);
		})), new $SuperBernieWorld_MenuOption.$ctor1('Phone banking for Bernie', 128, 160, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device4) {
			this.parent.tryOpenUrl('https://berniesanders.com/call/', device4);
		})), new $SuperBernieWorld_MenuOption.$ctor1('Organize with students for Bernie', 128, 176, 1, null, null, null, true, 37, 1, ss.mkdel(this, function(device5) {
			this.parent.tryOpenUrl('https://act.berniesanders.com/signup/im-student-and-i-support-bernie-sanders-president/', device5);
		})), new $SuperBernieWorld_MenuOption.$ctor1('Back', 128, 192, 1, ss.mkdel(this, function() {
			this.$menu.cancel();
		}), null, null, false, 37, 1, null)]);
		this.$menu.open(this.$mainMenu);
	};
	$SuperBernieWorld_Titlescreen.__typeName = 'SuperBernieWorld.Titlescreen';
	global.SuperBernieWorld.Titlescreen = $SuperBernieWorld_Titlescreen;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AIBullet
	var $SuperBernieWorld_Entities_AIBullet = function(parent) {
		$SuperBernieWorld_Entities_BaseAI.call(this, parent);
		//Parent.SpeedScalar = 0.5;
	};
	$SuperBernieWorld_Entities_AIBullet.__typeName = 'SuperBernieWorld.Entities.AIBullet';
	global.SuperBernieWorld.Entities.AIBullet = $SuperBernieWorld_Entities_AIBullet;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AIFist
	var $SuperBernieWorld_Entities_AIFist = function(parent) {
		$SuperBernieWorld_Entities_BaseAI.call(this, parent);
	};
	$SuperBernieWorld_Entities_AIFist.__typeName = 'SuperBernieWorld.Entities.AIFist';
	global.SuperBernieWorld.Entities.AIFist = $SuperBernieWorld_Entities_AIFist;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AIFlyer
	var $SuperBernieWorld_Entities_AIFlyer = function(parent) {
		this.$initialTime = ss.getDefaultValue(ss.TimeSpan);
		this.$initialY = 0;
		this.$2$FlightSpeedScalarField = 0;
		$SuperBernieWorld_Entities_BaseAI.call(this, parent);
		this.set_flightSpeedScalar(1);
		this.parent.set_applyPhysics(false);
	};
	$SuperBernieWorld_Entities_AIFlyer.__typeName = 'SuperBernieWorld.Entities.AIFlyer';
	global.SuperBernieWorld.Entities.AIFlyer = $SuperBernieWorld_Entities_AIFlyer;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AIJump
	var $SuperBernieWorld_Entities_AIJump = function(parent) {
		this.$initialTime = ss.getDefaultValue(ss.TimeSpan);
		this.$initialY = 0;
		this.$2$JumpSpeedScalarField = 0;
		$SuperBernieWorld_Entities_BaseAI.call(this, parent);
		this.set_jumpSpeedScalar(1.67);
		this.parent.set_applyPhysics(false);
	};
	$SuperBernieWorld_Entities_AIJump.__typeName = 'SuperBernieWorld.Entities.AIJump';
	global.SuperBernieWorld.Entities.AIJump = $SuperBernieWorld_Entities_AIJump;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AIMeander
	var $SuperBernieWorld_Entities_AIMeander = function(parent) {
		this.$flip = false;
		this.$2$WalkOffLedgesField = false;
		this.$2$FlipOnTouchField = false;
		this.$2$OnFlipField = null;
		$SuperBernieWorld_Entities_BaseAI.call(this, parent);
		this.parent.set_speedScalar(0.5);
		this.set_walkOffLedges(true);
		this.set_flipOnTouch(true);
	};
	$SuperBernieWorld_Entities_AIMeander.__typeName = 'SuperBernieWorld.Entities.AIMeander';
	global.SuperBernieWorld.Entities.AIMeander = $SuperBernieWorld_Entities_AIMeander;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AIPopup
	var $SuperBernieWorld_Entities_AIPopup = function(parent) {
		this.$lastPhaseTime = ss.getDefaultValue(ss.TimeSpan);
		this.$minY = 0;
		this.$maxY = 0;
		$SuperBernieWorld_Entities_BaseAI.call(this, parent);
		this.parent.set_applyPhysics(false);
		this.parent.set_speedScalar(0.5);
	};
	$SuperBernieWorld_Entities_AIPopup.__typeName = 'SuperBernieWorld.Entities.AIPopup';
	global.SuperBernieWorld.Entities.AIPopup = $SuperBernieWorld_Entities_AIPopup;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AIRoseProjectile
	var $SuperBernieWorld_Entities_AIRoseProjectile = function(parent) {
		$SuperBernieWorld_Entities_BaseAI.call(this, parent);
		this.parent.set_speedScalar(2.8);
		this.parent.set_gravityScalar(0.67);
	};
	$SuperBernieWorld_Entities_AIRoseProjectile.__typeName = 'SuperBernieWorld.Entities.AIRoseProjectile';
	global.SuperBernieWorld.Entities.AIRoseProjectile = $SuperBernieWorld_Entities_AIRoseProjectile;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AIShroom
	var $SuperBernieWorld_Entities_AIShroom = function(parent) {
		this.$3$MovesField = false;
		$SuperBernieWorld_Entities_AIMeander.call(this, parent);
		this.set_moves(true);
		this.parent.set_speedScalar(0.67);
		this.set_flipOnTouch(false);
	};
	$SuperBernieWorld_Entities_AIShroom.__typeName = 'SuperBernieWorld.Entities.AIShroom';
	global.SuperBernieWorld.Entities.AIShroom = $SuperBernieWorld_Entities_AIShroom;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AIThrower
	var $SuperBernieWorld_Entities_AIThrower = function(parent) {
		this.$minX = 0;
		this.$maxX = 0;
		this.$range = 0;
		this.$left = false;
		this.$target = 0;
		this.$nextJumpTime = ss.getDefaultValue(ss.TimeSpan);
		this.$jumpTime = ss.getDefaultValue(ss.TimeSpan);
		this.$jumping = false;
		this.$jumpBaseY = 0;
		this.$nextThrowTime = ss.getDefaultValue(ss.TimeSpan);
		this.$throwTime = ss.getDefaultValue(ss.TimeSpan);
		this.$throwing = false;
		this.$throwCount = 0;
		this.$thrown = 0;
		this.$throwAnimElapsed = ss.getDefaultValue(ss.TimeSpan);
		this.$throwAnim = false;
		this.$throwAnimThrown = false;
		this.jumpHeight = 0;
		this.fallHeight = 0;
		this.$projectileMinCount = 1;
		this.$projectileMaxCount = 3;
		this.$2$BossDefeatField = false;
		this.$2$ThrowPeriodScalarField = 0;
		this.$2$JumpPeriodScalarField = 0;
		this.$2$ThrowAnimFramesField = 0;
		this.$2$ProjectileSpriteField = null;
		$SuperBernieWorld_Entities_BaseAI.call(this, parent);
		this.parent.set_speedScalar(0.5);
		this.parent.set_canMirror(false);
		this.parent.set_gravityScalar(0);
		this.$maxX = this.parent.get_x();
		this.$minX = this.parent.get_x() - 4;
		this.$range = this.$maxX - this.$minX;
		this.set_jumpPeriodScalar(1);
		this.set_throwPeriodScalar(1);
		this.set_throwAnimFrames(12);
	};
	$SuperBernieWorld_Entities_AIThrower.__typeName = 'SuperBernieWorld.Entities.AIThrower';
	global.SuperBernieWorld.Entities.AIThrower = $SuperBernieWorld_Entities_AIThrower;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AIThrownProjectile
	var $SuperBernieWorld_Entities_AIThrownProjectile = function(parent) {
		$SuperBernieWorld_Entities_BaseAI.call(this, parent);
		this.parent.set_speedScalar(1.33);
		this.parent.set_gravityScalar(0.45);
	};
	$SuperBernieWorld_Entities_AIThrownProjectile.__typeName = 'SuperBernieWorld.Entities.AIThrownProjectile';
	global.SuperBernieWorld.Entities.AIThrownProjectile = $SuperBernieWorld_Entities_AIThrownProjectile;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AITileEntity
	var $SuperBernieWorld_Entities_AITileEntity = function(parent) {
		this.$tileEnt = null;
		$SuperBernieWorld_Entities_BaseAI.call(this, parent);
		this.$tileEnt = ss.cast(parent, $SuperBernieWorld_Entities_TileEntity);
	};
	$SuperBernieWorld_Entities_AITileEntity.__typeName = 'SuperBernieWorld.Entities.AITileEntity';
	global.SuperBernieWorld.Entities.AITileEntity = $SuperBernieWorld_Entities_AITileEntity;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.AITorcher
	var $SuperBernieWorld_Entities_AITorcher = function(parent) {
		$SuperBernieWorld_Entities_AIThrower.call(this, parent);
	};
	$SuperBernieWorld_Entities_AITorcher.__typeName = 'SuperBernieWorld.Entities.AITorcher';
	global.SuperBernieWorld.Entities.AITorcher = $SuperBernieWorld_Entities_AITorcher;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.BaseAI
	var $SuperBernieWorld_Entities_BaseAI = function(parent) {
		this.parent = null;
		this.$co = null;
		this.parent = parent;
		this.$co = Coroutines.Coroutine.create(ss.Int32).call(null, this.routine(), $SuperBernieWorld_Core.throwCoroutines);
	};
	$SuperBernieWorld_Entities_BaseAI.__typeName = 'SuperBernieWorld.Entities.BaseAI';
	global.SuperBernieWorld.Entities.BaseAI = $SuperBernieWorld_Entities_BaseAI;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Bernie
	var $SuperBernieWorld_Entities_Bernie = function(data, area) {
		$SuperBernieWorld_Entities_Bernie.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_Bernie.__typeName = 'SuperBernieWorld.Entities.Bernie';
	$SuperBernieWorld_Entities_Bernie.$ctor1 = function(data, pos) {
		this.$coPowerUpDown = null;
		this.$powerDown = false;
		this.$invulTimeout = ss.getDefaultValue(ss.TimeSpan);
		this.$jumpSound = null;
		this.$bernieFist = false;
		this.$bernieFistSlow = false;
		this.$bernieFistTime = ss.getDefaultValue(ss.TimeSpan);
		this.$prevMusic = 0;
		this.$2$PaletteField = 0;
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 7), data, pos);
		this.set_activated(true);
	};
	global.SuperBernieWorld.Entities.Bernie = $SuperBernieWorld_Entities_Bernie;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.BernieFist
	var $SuperBernieWorld_Entities_BernieFist = function(data, area) {
		$SuperBernieWorld_Entities_BernieFist.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_BernieFist.__typeName = 'SuperBernieWorld.Entities.BernieFist';
	$SuperBernieWorld_Entities_BernieFist.$ctor1 = function(data, pos) {
		$SuperBernieWorld_Entities_PowerUp.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 68), data, pos);
	};
	global.SuperBernieWorld.Entities.BernieFist = $SuperBernieWorld_Entities_BernieFist;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Cheese
	var $SuperBernieWorld_Entities_Cheese = function(data, area) {
		$SuperBernieWorld_Entities_Cheese.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_Cheese.__typeName = 'SuperBernieWorld.Entities.Cheese';
	$SuperBernieWorld_Entities_Cheese.$ctor1 = function(data, pos) {
		$SuperBernieWorld_Entities_PowerUp.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 16), data, pos);
	};
	global.SuperBernieWorld.Entities.Cheese = $SuperBernieWorld_Entities_Cheese;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Cheeto
	var $SuperBernieWorld_Entities_Cheeto = function(data, area) {
		$SuperBernieWorld_Entities_Cheeto.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_Cheeto.__typeName = 'SuperBernieWorld.Entities.Cheeto';
	$SuperBernieWorld_Entities_Cheeto.$ctor1 = function(data, pos) {
		this.$2$TextureOverrideField = null;
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 55), data, pos);
		this.set_mirror(true);
		this.set_speedScalar(0.5);
		this.set_canMirror(false);
		this.set_gravityScalar(0);
	};
	global.SuperBernieWorld.Entities.Cheeto = $SuperBernieWorld_Entities_Cheeto;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.CollisionBoxStyle
	var $SuperBernieWorld_Entities_CollisionBoxStyle = function() {
	};
	$SuperBernieWorld_Entities_CollisionBoxStyle.__typeName = 'SuperBernieWorld.Entities.CollisionBoxStyle';
	global.SuperBernieWorld.Entities.CollisionBoxStyle = $SuperBernieWorld_Entities_CollisionBoxStyle;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Entity
	var $SuperBernieWorld_Entities_Entity = function(sprite, data, pos) {
		this.frame = 0;
		this.data = null;
		this.deathCo = null;
		this.$sprite = null;
		this.$moving = false;
		this.$jumping = false;
		this.$jumpingThisFrame = 0;
		this.$onGround = false;
		this.$jumpTimeout = ss.getDefaultValue(ss.TimeSpan);
		this.$nextIdle = $SuperBernieWorld_Entities_Entity.$idleRandom.nextMinMax(45, 180);
		this.$crouching = false;
		this.collisionStyle = 0;
		this.$1$XField = 0;
		this.$1$YField = 0;
		this.$1$SpeedXField = 0;
		this.$1$SpeedYField = 0;
		this.$1$JumpInputEndedField = false;
		this.$1$MoveDirField = 0;
		this.$1$ActivatedField = false;
		this.$1$MirrorField = false;
		this.$1$RunningField = false;
		this.$1$SkiddingField = false;
		this.$1$ApplyPhysicsField = false;
		this.$1$SpeedScalarField = 0;
		this.$1$AIField = null;
		this.$1$DrawUnderField = false;
		this.$1$RenderOffsetField = ss.getDefaultValue(Franca.Vector2);
		this.$1$DoNotAutoActivateField = false;
		this.$1$DyingField = false;
		this.$1$DeadField = false;
		this.$1$InvulnerableField = false;
		this.$1$ApplyDeathPhysicsField = false;
		this.$1$MapField = null;
		this.$1$CanBeKilledField = false;
		this.$1$DeathAudioPlayedField = false;
		this.$1$CanMirrorField = false;
		this.$1$GravityScalarField = 0;
		this.$1$CanCollideField = false;
		this.$1$FlippedField = false;
		this.$sprite = sprite;
		this.data = data;
		this.set_x(pos.x);
		this.set_y(pos.y);
		this.set_speedScalar(1);
		this.set_gravityScalar(1);
		this.set_applyPhysics(true);
		this.set_canBeKilled(true);
		this.set_renderOffset(new Franca.Vector2.$ctor3(0, 1));
		this.set_canMirror(true);
		this.set_canCollide(true);
		var json = null;
		if (!System.StringExtensions.isNullOrEmpty(data, true)) {
			try {
				json = Franca.Serialization.Json.parse(data);
			}
			catch ($t1) {
			}
		}
		if (Franca.JsonValue.op_Inequality(json, null)) {
			this.setProperties(json);
		}
	};
	$SuperBernieWorld_Entities_Entity.__typeName = 'SuperBernieWorld.Entities.Entity';
	$SuperBernieWorld_Entities_Entity.positionFromArea = function(area) {
		return new Franca.Vector2.$ctor3(area.location.x + ss.Int32.div(area.size.width, 2), area.location.y + area.size.height);
	};
	$SuperBernieWorld_Entities_Entity.snapPositionToTile = function(pos) {
		return new Franca.Vector2.$ctor3(Math.floor(pos.x) + 0.5, Math.round(pos.y));
	};
	global.SuperBernieWorld.Entities.Entity = $SuperBernieWorld_Entities_Entity;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Fire
	var $SuperBernieWorld_Entities_Fire = function(data, area) {
		$SuperBernieWorld_Entities_Fire.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_Fire.__typeName = 'SuperBernieWorld.Entities.Fire';
	$SuperBernieWorld_Entities_Fire.$ctor1 = function(data, pos) {
		this.$playedSound = false;
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 36), data, pos);
		this.set_applyPhysics(false);
		this.set_canBeKilled(false);
	};
	global.SuperBernieWorld.Entities.Fire = $SuperBernieWorld_Entities_Fire;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Gopoboo
	var $SuperBernieWorld_Entities_Gopoboo = function(data, area) {
		$SuperBernieWorld_Entities_Gopoboo.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_Gopoboo.__typeName = 'SuperBernieWorld.Entities.Gopoboo';
	$SuperBernieWorld_Entities_Gopoboo.$ctor1 = function(data, pos) {
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 15), data, pos);
		this.set_drawUnder(true);
		this.set_canBeKilled(false);
	};
	global.SuperBernieWorld.Entities.Gopoboo = $SuperBernieWorld_Entities_Gopoboo;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.IBoss
	var $SuperBernieWorld_Entities_IBoss = function() {
	};
	$SuperBernieWorld_Entities_IBoss.__typeName = 'SuperBernieWorld.Entities.IBoss';
	global.SuperBernieWorld.Entities.IBoss = $SuperBernieWorld_Entities_IBoss;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Ice
	var $SuperBernieWorld_Entities_Ice = function(data, area) {
		$SuperBernieWorld_Entities_Ice.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_Ice.__typeName = 'SuperBernieWorld.Entities.Ice';
	$SuperBernieWorld_Entities_Ice.$ctor1 = function(data, pos) {
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 35), data, pos);
		this.set_applyPhysics(false);
	};
	global.SuperBernieWorld.Entities.Ice = $SuperBernieWorld_Entities_Ice;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.IShellEntity
	var $SuperBernieWorld_Entities_IShellEntity = function() {
	};
	$SuperBernieWorld_Entities_IShellEntity.__typeName = 'SuperBernieWorld.Entities.IShellEntity';
	global.SuperBernieWorld.Entities.IShellEntity = $SuperBernieWorld_Entities_IShellEntity;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.IThrower
	var $SuperBernieWorld_Entities_IThrower = function() {
	};
	$SuperBernieWorld_Entities_IThrower.__typeName = 'SuperBernieWorld.Entities.IThrower';
	global.SuperBernieWorld.Entities.IThrower = $SuperBernieWorld_Entities_IThrower;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Lever
	var $SuperBernieWorld_Entities_Lever = function(data, area) {
		$SuperBernieWorld_Entities_Lever.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_Lever.__typeName = 'SuperBernieWorld.Entities.Lever';
	$SuperBernieWorld_Entities_Lever.$ctor1 = function(data, pos) {
		this.$flipped = false;
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 53), data, pos);
		this.set_applyPhysics(false);
		this.set_canBeKilled(false);
		this.set_doNotAutoActivate(true);
	};
	global.SuperBernieWorld.Entities.Lever = $SuperBernieWorld_Entities_Lever;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Magamba
	var $SuperBernieWorld_Entities_Magamba = function(data, area) {
		$SuperBernieWorld_Entities_Magamba.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_Magamba.__typeName = 'SuperBernieWorld.Entities.Magamba';
	$SuperBernieWorld_Entities_Magamba.$ctor1 = function(data, pos) {
		this.$flattened$1 = false;
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 9), data, pos);
	};
	global.SuperBernieWorld.Entities.Magamba = $SuperBernieWorld_Entities_Magamba;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Mitch
	var $SuperBernieWorld_Entities_Mitch = function(color, data, area) {
		$SuperBernieWorld_Entities_Mitch.$ctor1.call(this, color, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_Mitch.__typeName = 'SuperBernieWorld.Entities.Mitch';
	$SuperBernieWorld_Entities_Mitch.$ctor1 = function(color, data, pos) {
		this.color = 0;
		this.shell = null;
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 10 + color), data, pos);
		this.color = color;
		this.shell = new $SuperBernieWorld_Entities_ShellState(this, 27 + this.color);
	};
	global.SuperBernieWorld.Entities.Mitch = $SuperBernieWorld_Entities_Mitch;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Mitch.Color
	var $SuperBernieWorld_Entities_Mitch$Color = function() {
	};
	$SuperBernieWorld_Entities_Mitch$Color.__typeName = 'SuperBernieWorld.Entities.Mitch$Color';
	global.SuperBernieWorld.Entities.Mitch$Color = $SuperBernieWorld_Entities_Mitch$Color;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.ParaMitch
	var $SuperBernieWorld_Entities_ParaMitch = function(color, data, area) {
		$SuperBernieWorld_Entities_ParaMitch.$ctor1.call(this, color, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_ParaMitch.__typeName = 'SuperBernieWorld.Entities.ParaMitch';
	$SuperBernieWorld_Entities_ParaMitch.$ctor1 = function(color, data, pos) {
		this.$stomped = false;
		$SuperBernieWorld_Entities_Mitch.$ctor1.call(this, color, data, pos);
		this.setSprite($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 12 + color));
	};
	global.SuperBernieWorld.Entities.ParaMitch = $SuperBernieWorld_Entities_ParaMitch;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Particle
	var $SuperBernieWorld_Entities_Particle = function(sprite, position) {
		this.sprite = null;
		this.frame = 0;
		this.dead = false;
		this.position = ss.getDefaultValue(Franca.Vector2);
		this.speed = 0;
		this.sprite = sprite;
		this.position = position;
		this.speed = 30;
	};
	$SuperBernieWorld_Entities_Particle.__typeName = 'SuperBernieWorld.Entities.Particle';
	global.SuperBernieWorld.Entities.Particle = $SuperBernieWorld_Entities_Particle;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Physics
	var $SuperBernieWorld_Entities_Physics = function() {
	};
	$SuperBernieWorld_Entities_Physics.__typeName = 'SuperBernieWorld.Entities.Physics';
	$SuperBernieWorld_Entities_Physics.reset = function() {
		$SuperBernieWorld_Entities_Physics.$ticks = 0;
	};
	$SuperBernieWorld_Entities_Physics.resolve = function(map, accumulator) {
		var entities = map.entities;
		accumulator.$ = new ss.TimeSpan(accumulator.$.ticks + $SuperBernieWorld_Time.get_gameElapsed().ticks);
		ss.clear($SuperBernieWorld_Entities_Physics.$blockingLayers);
		for (var $t1 = 0; $t1 < map.layers.length; $t1++) {
			var layer = map.layers[$t1];
			if (layer.blocks) {
				$SuperBernieWorld_Entities_Physics.$blockingLayers.push(layer);
			}
		}
		while (accumulator.$.ticks >= $SuperBernieWorld_Entities_Physics.$timeStep.ticks) {
			accumulator.$ = new ss.TimeSpan(accumulator.$.ticks - $SuperBernieWorld_Entities_Physics.$timeStep.ticks);
			var $t2 = ss.getEnumerator(System.IEnumerableExtensions.safeEnumerate($SuperBernieWorld_Entities_Entity).call(null, entities));
			try {
				while ($t2.moveNext()) {
					var ent = $t2.current();
					if (ent.get_activated()) {
						$SuperBernieWorld_Entities_Physics.$resolve(ent, map);
					}
				}
			}
			finally {
				$t2.dispose();
			}
			$SuperBernieWorld_Entities_Physics.$ticks++;
			if ($SuperBernieWorld_Entities_Physics.$ticks % $SuperBernieWorld_Entities_Physics.ticksPerFrame === 0) {
				$SuperBernieWorld_Entities_Physics.$resolveEntityCollisions(map);
			}
		}
	};
	$SuperBernieWorld_Entities_Physics.$resolveEntityCollisions = function(map) {
		for (var i = 0; i < map.entities.length; i++) {
			var ent = map.entities[i];
			var player = ss.safeCast(ent, $SuperBernieWorld_Entities_Bernie);
			var shell = ss.safeCast(ent, $SuperBernieWorld_Entities_IShellEntity);
			var rose = ss.safeCast(ent, $SuperBernieWorld_Entities_RoseProjectile);
			if (ss.isValue(player)) {
				var playerHitbox = ent.getHitbox();
				var stomp = !player.get_onGround() && player.get_speedY() > 0;
				for (var k = 0; k < map.entities.length; k++) {
					var other = map.entities[k];
					if (ss.referenceEquals(other, ent) || ss.isInstanceOfType(other, $SuperBernieWorld_Entities_Bernie) || !other.get_activated() || other.get_dying() || other.get_dead()) {
						continue;
					}
					var otherHitbox = other.getHitbox();
					if (playerHitbox.intersects(otherHitbox)) {
						player.touch(other, stomp);
					}
				}
			}
			else if (ss.isValue(rose)) {
				var hitbox = ent.getHitbox();
				for (var k1 = 0; k1 < map.entities.length; k1++) {
					var other1 = map.entities[k1];
					if (ss.referenceEquals(other1, ent) || !other1.get_isEnemy() || !other1.get_activated() || other1.get_dying() || other1.get_dead() || ss.isInstanceOfType(other1, $SuperBernieWorld_Entities_IBoss)) {
						continue;
					}
					var otherHitbox1 = other1.getHitbox();
					if (hitbox.intersects(otherHitbox1)) {
						if (other1.get_canBeKilled()) {
							other1.die();
						}
						rose.die();
					}
				}
			}
			else if (ss.isValue(shell) && shell.get_shellState().inShell && shell.get_shellState().bouncing) {
				var hitbox1 = ent.getHitbox();
				for (var k2 = 0; k2 < map.entities.length; k2++) {
					var other2 = map.entities[k2];
					if (ss.referenceEquals(other2, ent) || !other2.get_isEnemy() || !other2.get_activated() || other2.get_dying() || other2.get_dead()) {
						continue;
					}
					var otherHitbox2 = other2.getHitbox();
					if (hitbox1.intersects(otherHitbox2)) {
						var otherShell = ss.safeCast(other2, $SuperBernieWorld_Entities_IShellEntity);
						if (ss.isValue(otherShell) && otherShell.get_shellState().inShell && otherShell.get_shellState().bouncing) {
							ent.die();
							other2.die();
						}
						else if (other2.get_canBeKilled()) {
							if (ent.get_mirror() && ent.get_x() >= other2.get_x() || !ent.get_mirror() && ent.get_x() <= other2.get_x()) {
								other2.die();
							}
						}
					}
				}
			}
			else {
				var hitbox2 = ent.getHitbox();
				var meanderAI = ss.safeCast(ent.get_AI(), $SuperBernieWorld_Entities_AIMeander);
				if (ent.get_applyPhysics() && ent.get_isEnemy()) {
					for (var k3 = 0; k3 < map.entities.length; k3++) {
						var other3 = map.entities[k3];
						if (ss.referenceEquals(other3, ent) || !other3.get_isEnemy() || !other3.get_activated() || other3.get_dying() || other3.get_dead() || !other3.get_applyPhysics()) {
							continue;
						}
						var otherHitbox3 = other3.getHitbox();
						if (hitbox2.intersects(otherHitbox3)) {
							if (ss.isValue(meanderAI) && meanderAI.get_flipOnTouch()) {
								if (ent.get_mirror() && ent.get_x() >= other3.get_x() || !ent.get_mirror() && ent.get_x() < other3.get_x()) {
									meanderAI.set_flip(true);
								}
							}
							var otherAI = ss.safeCast(other3.get_AI(), $SuperBernieWorld_Entities_AIMeander);
							if (ss.isValue(otherAI) && otherAI.get_flipOnTouch()) {
								if (other3.get_mirror() && other3.get_x() > ent.get_x() || !other3.get_mirror() && other3.get_x() <= ent.get_x()) {
									otherAI.set_flip(true);
								}
							}
						}
					}
				}
			}
		}
	};
	$SuperBernieWorld_Entities_Physics.$resolve = function(ent, map) {
		if (ent.get_dead()) {
			return;
		}
		if (ent.get_dying()) {
			if (!ent.get_applyDeathPhysics()) {
				return;
			}
		}
		else if (!ent.get_applyPhysics()) {
			return;
		}
		var onGround = false;
		var x = ent.get_speedX();
		var y = ent.get_speedY();
		var scalar = ent.getRunScalar();
		if (ent.get_applyMovementPhysics()) {
			var grav = ((ent.get_jumpInputEnded() || ent.get_speedY() >= 0) ? $SuperBernieWorld_Entities_Physics.gravity : 0.00266666666666667) / 4;
			grav *= ent.get_gravityScalar();
			y = Math.min(0.1, y + grav);
			if (!ent.get_dying()) {
				if (ent.get_moveDir() !== 0) {
					var force = $SuperBernieWorld_Entities_Physics.accel;
					var $t1 = ent.get_moveDir();
					if ((($t1 > 0) ? 1 : (($t1 < 0) ? -1 : 0)) !== ((x > 0) ? 1 : ((x < 0) ? -1 : 0))) {
						force *= 2.5;
						if (Math.abs(ent.get_speedX()) > $SuperBernieWorld_Entities_Physics.accel) {
							ent.set_skidding(true);
						}
					}
					else {
						force *= scalar;
					}
					x = Franca.Calc.clamp$3(x + ent.get_moveDir() * force / 4, -0.1 * scalar / 4, $SuperBernieWorld_Entities_Physics.maxAccel * scalar / 4);
				}
				else if (x > 0) {
					x = Franca.Calc.max$i(0, x - 0.0004375);
				}
				else if (x < 0) {
					x = Franca.Calc.min$i(0, x + 0.0004375);
				}
			}
			else {
				x = 0;
			}
		}
		else {
			var grav1 = 0.0015 * ent.get_gravityScalar();
			y = Math.min(0.1, y + grav1);
			x = ent.get_moveDir() * $SuperBernieWorld_Entities_Physics.maxAccel * 2 / 3 / 4;
		}
		if (!ent.get_dying() || ent.get_applyMovementPhysics()) {
			ent.set_speedX(x);
		}
		ent.set_speedY(y);
		for (var i = 0; i < $SuperBernieWorld_Entities_Physics.stepsPerMove; i++) {
			ent.set_x(ent.get_x() + ent.get_speedX() * ent.get_speedScalar() / 2);
			ent.set_y(ent.get_y() + ent.get_speedY() / 2);
			if (!ent.get_dying() && ent.get_canCollide()) {
				var volume = {};
				var colH = {}, colV = {};
				ent.getCollisionInfo(volume, colH, colV);
				var colVTop = new Franca.RectangleF.$ctor3(colV.$.location.x, colV.$.location.y, colV.$.size.width, colV.$.size.height / 2);
				var colVBottom = new Franca.RectangleF.$ctor3(colV.$.location.x, colV.$.location.y + colV.$.size.height / 2, colV.$.size.width, colV.$.size.height / 2);
				if (ss.isInstanceOfType(ent, $SuperBernieWorld_Entities_Bernie)) {
					var nearestOverhead = Franca.RectangleF.empty;
					var nearestDist = 65535;
					var $t2 = ss.getEnumerator($SuperBernieWorld_Entities_Physics.getCollisions(volume.$));
					try {
						while ($t2.moveNext()) {
							var rect = $t2.current();
							if (ent.get_speedY() < 0 && colVTop.intersects(rect)) {
								var dist = Math.abs(rect.location.x + rect.size.width / 2 - ent.get_x());
								if (dist < nearestDist) {
									nearestDist = dist;
									nearestOverhead = rect;
								}
							}
						}
					}
					finally {
						$t2.dispose();
					}
					if (Franca.RectangleF.op_Inequality(nearestOverhead, Franca.RectangleF.empty)) {
						var tx = Math.round(nearestOverhead.location.x);
						var ty = Math.round(nearestOverhead.location.y + nearestOverhead.size.height);
						var tileEnt = null;
						for (var $t3 = 0; $t3 < map.entities.length; $t3++) {
							var otherEnt = map.entities[$t3];
							var t = ss.safeCast(otherEnt, $SuperBernieWorld_Entities_TileEntity);
							if (ss.isValue(t) && Math.floor(t.get_x()) === tx && Math.round(t.get_y()) === ty) {
								tileEnt = t;
								break;
							}
						}
						if (ss.isValue(tileEnt)) {
							tileEnt.bonk(map, tx, ty);
						}
					}
				}
				var $t4 = ss.getEnumerator($SuperBernieWorld_Entities_Physics.getCollisions(volume.$));
				try {
					while ($t4.moveNext()) {
						var rect1 = $t4.current();
						if (colH.$.intersects(rect1)) {
							if (ent.get_x() <= rect1.location.x + rect1.size.width / 2) {
								ent.set_x(ent.get_x() - (colH.$.location.x + colH.$.size.width - rect1.location.x));
								if (ent.get_speedX() > 0) {
									ent.set_speedX(0);
									if (ss.isValue(ent.get_AI())) {
										ent.get_AI().onCollideH();
									}
								}
							}
							else {
								ent.set_x(ent.get_x() + (rect1.location.x + rect1.size.width - colH.$.location.x));
								if (ent.get_speedX() < 0) {
									ent.set_speedX(0);
									if (ss.isValue(ent.get_AI())) {
										ent.get_AI().onCollideH();
									}
								}
							}
						}
					}
				}
				finally {
					$t4.dispose();
				}
				ent.getCollisionInfo(volume, colH, colV);
				var $t5 = ss.getEnumerator($SuperBernieWorld_Entities_Physics.getCollisions(volume.$));
				try {
					while ($t5.moveNext()) {
						var rect2 = $t5.current();
						if (colV.$.intersects(rect2)) {
							if (ent.get_speedY() < 0 && colVTop.intersects(rect2)) {
								ent.set_speedY(0);
								ent.set_y(rect2.location.y + rect2.size.height + colV.$.size.height);
								$SuperBernieWorld_Audio.playSound(44, 1, 1);
							}
							else if (ent.get_speedY() > 0 && colVBottom.intersects(rect2)) {
								ent.set_speedY(0);
								ent.set_y(rect2.location.y);
								ent.land();
								onGround = true;
							}
						}
					}
				}
				finally {
					$t5.dispose();
				}
				if (ss.isInstanceOfType(ent, $SuperBernieWorld_Entities_Bernie)) {
					ent.set_x(Math.max(colH.$.size.width / 2, ent.get_x()));
					// prevent player from walking off edge of map
				}
				ent.set_onGround(onGround);
			}
			else {
				ent.set_onGround(false);
			}
		}
	};
	$SuperBernieWorld_Entities_Physics.getCollisions = function(volume) {
		return new ss.IteratorBlockEnumerable(function() {
			return (function(volume) {
				var $result, $state = 0, $t1, layer, y, x;
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								$t1 = 0;
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								if (!($t1 < $SuperBernieWorld_Entities_Physics.$blockingLayers.length)) {
									$state = -1;
									break $sm1;
								}
								layer = $SuperBernieWorld_Entities_Physics.$blockingLayers[$t1];
								y = volume.location.y;
								$state = 3;
								continue $sm1;
							}
							case 3: {
								$state = -1;
								if (!(y < volume.location.y + volume.size.height)) {
									$state = 2;
									continue $sm1;
								}
								x = volume.location.x;
								$state = 5;
								continue $sm1;
							}
							case 2: {
								$state = -1;
								$t1++;
								$state = 1;
								continue $sm1;
							}
							case 5: {
								$state = -1;
								if (!(x < volume.location.x + volume.size.width)) {
									$state = 4;
									continue $sm1;
								}
								if (layer.area.contains$2(x, y) && $SuperBernieWorld_Maps_TileID.op_Inequality(ss.arrayGet(layer.tiles, x, y), ss.getDefaultValue($SuperBernieWorld_Maps_TileID))) {
									$result = new Franca.RectangleF.$ctor3(x, y, 1, 1);
									$state = 6;
									return true;
								}
								$state = 6;
								continue $sm1;
							}
							case 4: {
								$state = -1;
								y++;
								$state = 3;
								continue $sm1;
							}
							case 6: {
								$state = -1;
								x++;
								$state = 5;
								continue $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, null, this);
			}).call(this, volume);
		}, this);
	};
	global.SuperBernieWorld.Entities.Physics = $SuperBernieWorld_Entities_Physics;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.PowerUp
	var $SuperBernieWorld_Entities_PowerUp = function(sprite, data, pos) {
		$SuperBernieWorld_Entities_Entity.call(this, sprite, data, $SuperBernieWorld_Entities_Entity.snapPositionToTile(pos));
		this.set_drawUnder(true);
		this.set_renderOffset(Franca.Vector2.zero);
		this.set_applyPhysics(false);
		this.set_doNotAutoActivate(true);
	};
	$SuperBernieWorld_Entities_PowerUp.__typeName = 'SuperBernieWorld.Entities.PowerUp';
	$SuperBernieWorld_Entities_PowerUp.popOutOfBlock = function(ent) {
		return new ss.IteratorBlockEnumerable(function() {
			return (function(ent) {
				var $result, $state = 0, startTime, elapsed, startY, duration;
				return new ss.IteratorBlockEnumerator(function() {
					$sm1:
					for (;;) {
						switch ($state) {
							case 0: {
								$state = -1;
								$SuperBernieWorld_Audio.playSound(72, 1, 1);
								startTime = $SuperBernieWorld_Time.get_game();
								elapsed = new ss.TimeSpan(0);
								startY = ent.get_y();
								duration = 0.3;
								$state = 1;
								continue $sm1;
							}
							case 1: {
								$state = -1;
								if (!((elapsed = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(duration * 10000000)).ticks)) {
									$state = 2;
									continue $sm1;
								}
								ent.set_y(startY - Franca.Calc.clamp$3(elapsed.ticks / 10000000 / duration, 0, 1));
								$result = 1;
								$state = 1;
								return true;
							}
							case 2: {
								$state = -1;
								ent.set_drawUnder(false);
								ent.set_applyPhysics(true);
								$state = -1;
								break $sm1;
							}
							default: {
								break $sm1;
							}
						}
					}
					return false;
				}, function() {
					return $result;
				}, null, this);
			}).call(this, ent);
		}, this);
	};
	global.SuperBernieWorld.Entities.PowerUp = $SuperBernieWorld_Entities_PowerUp;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Republican
	var $SuperBernieWorld_Entities_Republican = function(data, area) {
		$SuperBernieWorld_Entities_Republican.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_Republican.__typeName = 'SuperBernieWorld.Entities.Republican';
	$SuperBernieWorld_Entities_Republican.$ctor1 = function(data, pos) {
		this.$throwing = false;
		this.$throwAlpha = 0;
		this.$difficulty = 0;
		this.$2$TextureOverrideField = null;
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 54), data, pos);
		this.set_mirror(true);
	};
	global.SuperBernieWorld.Entities.Republican = $SuperBernieWorld_Entities_Republican;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.RoseProjectile
	var $SuperBernieWorld_Entities_RoseProjectile = function(data, area) {
		$SuperBernieWorld_Entities_RoseProjectile.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_RoseProjectile.__typeName = 'SuperBernieWorld.Entities.RoseProjectile';
	$SuperBernieWorld_Entities_RoseProjectile.$ctor1 = function(data, pos) {
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 69), data, pos);
		this.set_canBeKilled(false);
		this.collisionStyle = 1;
	};
	global.SuperBernieWorld.Entities.RoseProjectile = $SuperBernieWorld_Entities_RoseProjectile;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.ShellState
	var $SuperBernieWorld_Entities_ShellState = function(parent, shellSprite) {
		this.parent = null;
		this.inShell = false;
		this.bouncing = false;
		this.$baseGrav = 0;
		this.$parentAI = null;
		this.$parentSprite = null;
		this.$parentCollision = false;
		this.$bounceAI = null;
		this.$shellCo = null;
		this.$animateShell = false;
		this.$baseRenderOffset = ss.getDefaultValue(Franca.Vector2);
		this.$baseSpeed = 0;
		this.$shellSprite = 0;
		this.$lastStompTime = ss.getDefaultValue(ss.TimeSpan);
		this.parent = parent;
		var $t1 = new $SuperBernieWorld_Entities_AIMeander(this.parent);
		$t1.set_flipOnTouch(false);
		$t1.set_onFlip(function() {
			$SuperBernieWorld_Audio.playSound(44, 1, 1);
		});
		this.$bounceAI = $t1;
		this.$shellSprite = shellSprite;
	};
	$SuperBernieWorld_Entities_ShellState.__typeName = 'SuperBernieWorld.Entities.ShellState';
	global.SuperBernieWorld.Entities.ShellState = $SuperBernieWorld_Entities_ShellState;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.TikiTorch
	var $SuperBernieWorld_Entities_TikiTorch = function(data, area) {
		$SuperBernieWorld_Entities_TikiTorch.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_TikiTorch.__typeName = 'SuperBernieWorld.Entities.TikiTorch';
	$SuperBernieWorld_Entities_TikiTorch.$ctor1 = function(data, pos) {
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 64), data, pos);
		this.set_canBeKilled(false);
		this.set_canCollide(false);
	};
	global.SuperBernieWorld.Entities.TikiTorch = $SuperBernieWorld_Entities_TikiTorch;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.TikiTorcher
	var $SuperBernieWorld_Entities_TikiTorcher = function(data, area) {
		$SuperBernieWorld_Entities_TikiTorcher.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_TikiTorcher.__typeName = 'SuperBernieWorld.Entities.TikiTorcher';
	$SuperBernieWorld_Entities_TikiTorcher.$ctor1 = function(data, pos) {
		this.$throwing = false;
		this.$throwAlpha = 0;
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 17), data, pos);
	};
	global.SuperBernieWorld.Entities.TikiTorcher = $SuperBernieWorld_Entities_TikiTorcher;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.TileEntity
	var $SuperBernieWorld_Entities_TileEntity = function(map, x, y, sprite) {
		this.$map = null;
		this.$mapX = 0;
		this.$mapY = 0;
		this.$anim = 0;
		this.$spent = false;
		$SuperBernieWorld_Entities_Entity.call(this, sprite, null, $SuperBernieWorld_Entities_Entity.snapPositionToTile(new Franca.Vector2.$ctor3(x + 0.5, y + 1)));
		this.$map = map;
		this.$mapX = x;
		this.$mapY = y;
		this.set_applyPhysics(false);
		this.set_renderOffset(Franca.Vector2.zero);
		this.set_doNotAutoActivate(true);
	};
	$SuperBernieWorld_Entities_TileEntity.__typeName = 'SuperBernieWorld.Entities.TileEntity';
	global.SuperBernieWorld.Entities.TileEntity = $SuperBernieWorld_Entities_TileEntity;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.TileEntity.Animation
	var $SuperBernieWorld_Entities_TileEntity$Animation = function() {
	};
	$SuperBernieWorld_Entities_TileEntity$Animation.__typeName = 'SuperBernieWorld.Entities.TileEntity$Animation';
	global.SuperBernieWorld.Entities.TileEntity$Animation = $SuperBernieWorld_Entities_TileEntity$Animation;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Entities.Trashman
	var $SuperBernieWorld_Entities_Trashman = function(data, area) {
		$SuperBernieWorld_Entities_Trashman.$ctor1.call(this, data, $SuperBernieWorld_Entities_Entity.positionFromArea(area));
	};
	$SuperBernieWorld_Entities_Trashman.__typeName = 'SuperBernieWorld.Entities.Trashman';
	$SuperBernieWorld_Entities_Trashman.$ctor1 = function(data, pos) {
		$SuperBernieWorld_Entities_Entity.call(this, $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 14), data, pos);
	};
	global.SuperBernieWorld.Entities.Trashman = $SuperBernieWorld_Entities_Trashman;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Maps.EntityLoadException
	var $SuperBernieWorld_Maps_EntityLoadException = function() {
		ss.Exception.call(this);
	};
	$SuperBernieWorld_Maps_EntityLoadException.__typeName = 'SuperBernieWorld.Maps.EntityLoadException';
	$SuperBernieWorld_Maps_EntityLoadException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$SuperBernieWorld_Maps_EntityLoadException.$ctor2 = function(message, innerException) {
		ss.Exception.call(this, message, innerException);
	};
	$SuperBernieWorld_Maps_EntityLoadException.$ctor3 = function(message, name) {
		ss.Exception.call(this, $SuperBernieWorld_Maps_EntityLoadException.$addNameToMessage(message, name));
	};
	$SuperBernieWorld_Maps_EntityLoadException.$ctor4 = function(message, innerException, name) {
		ss.Exception.call(this, $SuperBernieWorld_Maps_EntityLoadException.$addNameToMessage(message, name), innerException);
	};
	$SuperBernieWorld_Maps_EntityLoadException.$addNameToMessage = function(message, name) {
		if (System.StringExtensions.isNullOrEmpty(name, false)) {
			return message;
		}
		if (!ss.endsWithString(message, '.')) {
			message += ". Name was '" + name + "'.";
		}
		else {
			message += " Name was '" + name + "'.";
		}
		return message;
	};
	global.SuperBernieWorld.Maps.EntityLoadException = $SuperBernieWorld_Maps_EntityLoadException;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Maps.Map
	var $SuperBernieWorld_Maps_Map = function() {
		this.width = 0;
		this.height = 0;
		this.tilesets = null;
		this.layers = null;
		this.entities = null;
		this.$1$OnLoadField = null;
		this.$jsonData = null;
		this.$1$LoadedField = false;
		this.$1$NameField = null;
		this.$1$ReadyField = false;
		this.$1$FilenameField = null;
		this.tilesets = [];
		this.layers = [];
		this.entities = [];
	};
	$SuperBernieWorld_Maps_Map.__typeName = 'SuperBernieWorld.Maps.Map';
	global.SuperBernieWorld.Maps.Map = $SuperBernieWorld_Maps_Map;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Maps.MapInstance
	var $SuperBernieWorld_Maps_MapInstance = function() {
		this.width = 0;
		this.height = 0;
		this.tilesets = null;
		this.layers = null;
		this.entities = null;
		this.flagX = 0;
		this.flagY = 0;
		this.flagPoleBaseY = 0;
		this.lever = null;
		this.flagSprite = null;
	};
	$SuperBernieWorld_Maps_MapInstance.__typeName = 'SuperBernieWorld.Maps.MapInstance';
	global.SuperBernieWorld.Maps.MapInstance = $SuperBernieWorld_Maps_MapInstance;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Maps.MapLayer
	var $SuperBernieWorld_Maps_MapLayer = function() {
		this.blocks = false;
		this.scrollSpeed = 0;
		this.foreground = false;
		this.isCoinLayer = false;
		this.area = ss.getDefaultValue(Franca.Rectangle);
		this.tiles = null;
		this.name = null;
	};
	$SuperBernieWorld_Maps_MapLayer.__typeName = 'SuperBernieWorld.Maps.MapLayer';
	global.SuperBernieWorld.Maps.MapLayer = $SuperBernieWorld_Maps_MapLayer;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Maps.ObjectTile
	var $SuperBernieWorld_Maps_ObjectTile = function(image, width, height, type) {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.type = null;
		this.defaultData = null;
		this.isAligned = false;
		this.image = image;
		this.width = width;
		this.height = height;
		var $t1 = type;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = Franca.Platform.getFileNameWithoutExtension(Franca.Platform.normalizePath(image, null));
		}
		this.type = $t1;
	};
	$SuperBernieWorld_Maps_ObjectTile.__typeName = 'SuperBernieWorld.Maps.ObjectTile';
	global.SuperBernieWorld.Maps.ObjectTile = $SuperBernieWorld_Maps_ObjectTile;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Maps.Tile
	var $SuperBernieWorld_Maps_Tile = function(id, ts, source) {
		this.id = 0;
		this.tileset = null;
		this.$source = null;
		this.id = id;
		this.tileset = ts;
		this.$source = source;
	};
	$SuperBernieWorld_Maps_Tile.__typeName = 'SuperBernieWorld.Maps.Tile';
	global.SuperBernieWorld.Maps.Tile = $SuperBernieWorld_Maps_Tile;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Maps.TiledMapReader
	var $SuperBernieWorld_Maps_TiledMapReader = function() {
	};
	$SuperBernieWorld_Maps_TiledMapReader.__typeName = 'SuperBernieWorld.Maps.TiledMapReader';
	$SuperBernieWorld_Maps_TiledMapReader.loadFromJson = function(json) {
		var map = new $SuperBernieWorld_Maps_Map();
		$SuperBernieWorld_Maps_TiledMapReader.loadFromJson$1(Franca.Serialization.Json.parse(json), map);
		return map;
	};
	$SuperBernieWorld_Maps_TiledMapReader.loadTilesets = function(data, map) {
		map.tilesets.push(new $SuperBernieWorld_Maps_TilesetInfo.$ctor1(0, null));
		for (var i = 0; i < data.get_item('tilesets').get_count(); i++) {
			var tileset = data.get_item('tilesets').get_item$1(i);
			var $t3 = map.tilesets;
			var $t2 = Franca.JsonValue.op_Implicit$5(tileset.get_item('firstgid'));
			var $t1 = $SuperBernieWorld_Core.get_content();
			$t3.push(new $SuperBernieWorld_Maps_TilesetInfo.$ctor1($t2, $t1.load($SuperBernieWorld_Maps_Tileset).call($t1, Franca.JsonValue.op_Implicit$k(tileset.get_item('source')), [])));
		}
	};
	$SuperBernieWorld_Maps_TiledMapReader.$getPlaceholderName = function() {
		return 'Unnamed layer ' + System.ObjectExtensions.toStringInvariant$1(Franca.IncrementalID).call(null, $SuperBernieWorld_Maps_TiledMapReader.$placeholderIdGen.getID());
	};
	$SuperBernieWorld_Maps_TiledMapReader.$setLayerProperties = function(layer, props, map) {
		if (props.containsKey('blocks')) {
			layer.blocks = Franca.JsonValue.op_Implicit$1(props.get_item('blocks'));
		}
		if (props.containsKey('speed')) {
			layer.scrollSpeed = Franca.JsonValue.op_Implicit$3(props.get_item('speed'));
		}
		if (props.containsKey('foreground')) {
			layer.foreground = Franca.JsonValue.op_Implicit$1(props.get_item('foreground'));
		}
	};
	$SuperBernieWorld_Maps_TiledMapReader.loadFromJson$1 = function(data, map) {
		var tileWarnings = new (ss.makeGenericType(System.Collections.Generic.HashSet$1, [ss.Int32]))();
		map.width = Franca.JsonValue.op_Implicit$5(data.get_item('width'));
		map.height = Franca.JsonValue.op_Implicit$5(data.get_item('height'));
		if (data.containsKey('properties')) {
			var mapProps = data.get_item('properties');
			//if (mapProps.ContainsKey("deathpits")) {
			//    map.DeathPits = (bool)mapProps["deathpits"];
			//}
		}
		for (var i = 0; i < data.get_item('layers').get_count(); i++) {
			var layerData = data.get_item('layers').get_item$1(i);
			if (Franca.JsonValue.op_Inequality(layerData.get_item('type'), Franca.JsonValue.op_Implicit$G('tilelayer')) && Franca.JsonValue.op_Inequality(layerData.get_item('type'), Franca.JsonValue.op_Implicit$G('objectgroup')) && Franca.JsonValue.op_Inequality(layerData.get_item('type'), Franca.JsonValue.op_Implicit$G('imagelayer'))) {
				continue;
			}
			if (Franca.JsonValue.op_Equality(layerData.get_item('visible'), Franca.JsonValue.op_Implicit$o(false))) {
				continue;
			}
			if (Franca.JsonValue.op_Equality(layerData.get_item('type'), Franca.JsonValue.op_Implicit$G('tilelayer')) || Franca.JsonValue.op_Equality(layerData.get_item('type'), Franca.JsonValue.op_Implicit$G('imagelayer'))) {
				var layer;
				layer = new $SuperBernieWorld_Maps_MapLayer();
				layer.area = new Franca.Rectangle.$ctor3(Franca.JsonValue.op_Implicit$5(layerData.get_item('x')), Franca.JsonValue.op_Implicit$5(layerData.get_item('y')), Franca.JsonValue.op_Implicit$5(layerData.get_item('width')), Franca.JsonValue.op_Implicit$5(layerData.get_item('height')));
				layer.tiles = ss.multidimArray(ss.getDefaultValue($SuperBernieWorld_Maps_TileID), layer.area.size.width, layer.area.size.height);
				var j = 0;
				for (var y = 0; y < layer.area.size.height; y++) {
					for (var x = 0; x < layer.area.size.width; x++, j++) {
						var gid = Franca.JsonValue.op_Implicit$5(layerData.get_item('data').get_item$1(j));
						if (gid > 0) {
							for (var tsi = 0; tsi < map.tilesets.length; tsi++) {
								var tileset = map.tilesets[tsi];
								if (gid >= tileset.firstGlobalID && ss.isValue(tileset.tileset) && gid < tileset.firstGlobalID + tileset.tileset.get_count()) {
									if (tileset.tileset.isObjectTileset) {
										if (!tileWarnings.contains(gid)) {
											tileWarnings.add(gid);
											console.log(ss.formatString("Expected tile in map '{0}' but instead found object tile, global id: {1}, tileset id: {2}, tileset: '{3}'. Re-export the map and try again.", map.get_filename(), gid, gid - tileset.firstGlobalID, tileset.tileset.get_filename()));
										}
										continue;
									}
									//layer.Tiles[x, y] = tileset.Tileset[gid - tileset.FirstGlobalID];
									if (ss.isValue(tileset.tileset.get_item(gid - tileset.firstGlobalID))) {
										ss.arraySet(layer.tiles, x, y, new $SuperBernieWorld_Maps_TileID.$ctor1(tsi, gid - tileset.firstGlobalID));
									}
								}
							}
						}
					}
				}
				layer.name = (layerData.containsKey('name') ? Franca.JsonValue.op_Implicit$k(layerData.get_item('name')) : $SuperBernieWorld_Maps_TiledMapReader.$getPlaceholderName());
				if (layerData.containsKey('properties')) {
					var props = layerData.get_item('properties');
					$SuperBernieWorld_Maps_TiledMapReader.$setLayerProperties(layer, props, map);
				}
				map.layers.push(layer);
			}
			else if (Franca.JsonValue.op_Equality(layerData.get_item('type'), Franca.JsonValue.op_Implicit$G('objectgroup'))) {
				for (var j1 = 0; j1 < layerData.get_item('objects').get_count(); j1++) {
					var obj = layerData.get_item('objects').get_item$1(j1);
					var name = null;
					if (obj.containsKey('name') && !obj.get_item('name').get_isNull()) {
						name = System.ObjectExtensions.toStringInvariant(obj.get_item('name')).trim();
					}
					var typeDyn = {};
					if (!obj.tryGetValue('type', typeDyn) || typeDyn.$.get_isNull()) {
						throw new $SuperBernieWorld_Maps_EntityLoadException.$ctor3('Missing type attribute in entity.', name);
					}
					var type = null;
					var isAligned = true;
					var area = ss.getDefaultValue(Franca.Rectangle);
					var position = ss.getDefaultValue(Franca.Vector2);
					var ent = null;
					var objData = null;
					if (obj.containsKey('gid')) {
						var gid1 = Franca.JsonValue.op_Implicit$5(obj.get_item('gid'));
						var tile = $SuperBernieWorld_Maps_TiledMapReader.$getObjectTile(map, gid1);
						if (ss.isNullOrUndefined(tile)) {
							throw new $SuperBernieWorld_Maps_EntityLoadException.$ctor1(ss.formatString("Couldn't find object tile with global id {0} in map '{1}'", System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, gid1), map.get_filename()));
						}
						type = tile.type;
						isAligned = tile.isAligned;
						position = Franca.Vector2.op_Division$1(new Franca.Vector2.$ctor3(Franca.JsonValue.op_Implicit$5(obj.get_item('x')) + ss.Int32.div(tile.width, 2), Franca.JsonValue.op_Implicit$5(obj.get_item('y'))), 16);
						if (isAligned) {
							position = position.floor();
							area = new Franca.Rectangle.$ctor3(ss.Int32.trunc(position.x) - 1, ss.Int32.trunc(position.y) - 1, 1, 1);
						}
						if ($SuperBernieWorld_Maps_TiledMapReader.$hasData(obj) || Franca.JsonValue.op_Inequality(tile.defaultData, null) && tile.defaultData.get_count() !== 0) {
							var tmpData = ($SuperBernieWorld_Maps_TiledMapReader.$hasData(obj) ? Franca.Serialization.Json.parse(Franca.JsonValue.op_Implicit$k(obj.get_item('properties').get_item('data'))) : Franca.JsonValue.get_dict());
							var finalData = Franca.JsonValue.get_dict();
							var $t1 = ss.getEnumerator(tile.defaultData.get_pairs());
							try {
								while ($t1.moveNext()) {
									var kvp = $t1.current();
									finalData.set_item(kvp.key, kvp.value);
								}
							}
							finally {
								$t1.dispose();
							}
							var $t2 = ss.getEnumerator(tmpData.get_pairs());
							try {
								while ($t2.moveNext()) {
									var kvp1 = $t2.current();
									finalData.set_item(kvp1.key, kvp1.value);
								}
							}
							finally {
								$t2.dispose();
							}
							objData = Franca.Serialization.Json.stringify(finalData, 0);
						}
						else {
							objData = null;
						}
					}
					else {
						type = System.StringExtensions.toLowerInvariant(System.ObjectExtensions.toStringInvariant(typeDyn.$).trim());
						area = $SuperBernieWorld_Maps_TiledMapReader.objectMapToArea(obj);
						objData = Franca.JsonValue.op_Implicit$k(($SuperBernieWorld_Maps_TiledMapReader.$hasData(obj) ? obj.get_item('properties').get_item('data') : null));
					}
					switch (type) {
						case 'bernie': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Bernie(objData, area) : new $SuperBernieWorld_Entities_Bernie.$ctor1(objData, position));
							break;
						}
						case 'magamba': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Magamba(objData, area) : new $SuperBernieWorld_Entities_Magamba.$ctor1(objData, position));
							break;
						}
						case 'mitch-green': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Mitch(0, objData, area) : new $SuperBernieWorld_Entities_Mitch.$ctor1(0, objData, position));
							break;
						}
						case 'mitch-red': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Mitch(1, objData, area) : new $SuperBernieWorld_Entities_Mitch.$ctor1(1, objData, position));
							break;
						}
						case 'paramitch-green': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_ParaMitch(0, objData, area) : new $SuperBernieWorld_Entities_ParaMitch.$ctor1(0, objData, position));
							break;
						}
						case 'paramitch-red': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_ParaMitch(1, objData, area) : new $SuperBernieWorld_Entities_ParaMitch.$ctor1(1, objData, position));
							break;
						}
						case 'trashman': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Trashman(objData, area) : new $SuperBernieWorld_Entities_Trashman.$ctor1(objData, position));
							break;
						}
						case 'gopoboo': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Gopoboo(objData, area) : new $SuperBernieWorld_Entities_Gopoboo.$ctor1(objData, position));
							break;
						}
						case 'cheese': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Cheese(objData, area) : new $SuperBernieWorld_Entities_Cheese.$ctor1(objData, position));
							break;
						}
						case 'tikitorcher': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_TikiTorcher(objData, area) : new $SuperBernieWorld_Entities_TikiTorcher.$ctor1(objData, position));
							break;
						}
						case 'ice': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Ice(objData, area) : new $SuperBernieWorld_Entities_Ice.$ctor1(objData, position));
							break;
						}
						case 'fire': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Fire(objData, area) : new $SuperBernieWorld_Entities_Fire.$ctor1(objData, position));
							break;
						}
						case 'lever': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Lever(objData, area) : new $SuperBernieWorld_Entities_Lever.$ctor1(objData, position));
							break;
						}
						case 'republican': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Republican(objData, area) : new $SuperBernieWorld_Entities_Republican.$ctor1(objData, position));
							break;
						}
						case 'cheeto': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_Cheeto(objData, area) : new $SuperBernieWorld_Entities_Cheeto.$ctor1(objData, position));
							break;
						}
						case 'fist': {
							ent = (isAligned ? new $SuperBernieWorld_Entities_BernieFist(objData, area) : new $SuperBernieWorld_Entities_BernieFist.$ctor1(objData, position));
							break;
						}
						default: {
							throw new $SuperBernieWorld_Maps_EntityLoadException.$ctor3("Unknown map entity of type '" + type + "' in map", name);
						}
					}
					if (ss.isValue(ent)) {
						map.entities.push(ent);
					}
				}
			}
		}
		map.set_loaded(true);
	};
	$SuperBernieWorld_Maps_TiledMapReader.$getObjectTile = function(map, gid) {
		for (var $t1 = 0; $t1 < map.tilesets.length; $t1++) {
			var tileset = map.tilesets[$t1];
			if (ss.isValue(tileset.tileset)) {
				if (gid >= tileset.firstGlobalID && gid < tileset.firstGlobalID + tileset.tileset.get_count() || tileset.tileset.isObjectTileset && tileset.tileset.objectTiles.containsKey(gid - tileset.firstGlobalID)) {
					var id = gid - tileset.firstGlobalID;
					if (!tileset.tileset.isObjectTileset) {
						console.log(ss.formatString("Couldn't find object tile with id {0} in tileset '{1}': tileset wasn't an object tileset. Re-export the map and try again.", System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, id), tileset.tileset.get_filename()));
						continue;
					}
					if (!tileset.tileset.objectTiles.containsKey(id)) {
						console.log(ss.formatString("Couldn't find object tile with id {0} in tileset '{1}'. Re-export the map and try again.", System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, id), tileset.tileset.get_filename()));
						continue;
					}
					return tileset.tileset.objectTiles.get_item(id);
				}
			}
		}
		return null;
	};
	$SuperBernieWorld_Maps_TiledMapReader.$hasData = function(obj) {
		return Franca.JsonValue.op_Inequality(obj, null) && obj.containsKey('properties') && !obj.get_item('properties').get_isNull() && obj.get_item('properties').containsKey('data') && obj.get_item('properties').get_item('data').get_isString();
	};
	$SuperBernieWorld_Maps_TiledMapReader.objectMapToArea = function(map) {
		return new Franca.Rectangle.$ctor3(ss.Int32.div(Franca.JsonValue.op_Implicit$5(map.get_item('x')), $SuperBernieWorld_Core.tileSize), ss.Int32.div(Franca.JsonValue.op_Implicit$5(map.get_item('y')), $SuperBernieWorld_Core.tileSize), ss.Int32.div(Franca.JsonValue.op_Implicit$5(map.get_item('width')), $SuperBernieWorld_Core.tileSize), ss.Int32.div(Franca.JsonValue.op_Implicit$5(map.get_item('height')), $SuperBernieWorld_Core.tileSize));
	};
	global.SuperBernieWorld.Maps.TiledMapReader = $SuperBernieWorld_Maps_TiledMapReader;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Maps.TileID
	var $SuperBernieWorld_Maps_TileID = function() {
		this.tileset = 0;
		this.tile = 0;
	};
	$SuperBernieWorld_Maps_TileID.__typeName = 'SuperBernieWorld.Maps.TileID';
	$SuperBernieWorld_Maps_TileID.$ctor1 = function(tileset, tile) {
		this.tileset = 0;
		this.tile = 0;
		if (tileset < 0 || tileset > 65535) {
			throw new ss.ArgumentOutOfRangeException('tileset');
		}
		if (tile < 0 || tile > 65535) {
			throw new ss.ArgumentOutOfRangeException('tile');
		}
		this.tileset = tileset;
		this.tile = tile;
	};
	$SuperBernieWorld_Maps_TileID.getDefaultValue = function() {
		return new $SuperBernieWorld_Maps_TileID();
	};
	$SuperBernieWorld_Maps_TileID.op_Equality = function(lhs, rhs) {
		return lhs.equalsT(rhs);
	};
	$SuperBernieWorld_Maps_TileID.op_Inequality = function(lhs, rhs) {
		return !lhs.equalsT(rhs);
	};
	global.SuperBernieWorld.Maps.TileID = $SuperBernieWorld_Maps_TileID;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Maps.Tileset
	var $SuperBernieWorld_Maps_Tileset = function() {
		this.$initialized = false;
		this.$texture = null;
		this.$tiles = null;
		this.$objectTileCount = 0;
		this.isObjectTileset = false;
		this.objectTiles = null;
		this.$1$OnLoadField = null;
		this.$loaded = false;
		this.$1$FilenameField = null;
		this.$1$NameField = null;
	};
	$SuperBernieWorld_Maps_Tileset.__typeName = 'SuperBernieWorld.Maps.Tileset';
	$SuperBernieWorld_Maps_Tileset.$ctor1 = function(json, texture) {
		this.$initialized = false;
		this.$texture = null;
		this.$tiles = null;
		this.$objectTileCount = 0;
		this.isObjectTileset = false;
		this.objectTiles = null;
		this.$1$OnLoadField = null;
		this.$loaded = false;
		this.$1$FilenameField = null;
		this.$1$NameField = null;
		this.$init(json, texture);
	};
	global.SuperBernieWorld.Maps.Tileset = $SuperBernieWorld_Maps_Tileset;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Maps.TilesetInfo
	var $SuperBernieWorld_Maps_TilesetInfo = function() {
		this.firstGlobalID = 0;
		this.tileset = null;
	};
	$SuperBernieWorld_Maps_TilesetInfo.__typeName = 'SuperBernieWorld.Maps.TilesetInfo';
	$SuperBernieWorld_Maps_TilesetInfo.$ctor1 = function(firstGID, tileset) {
		this.firstGlobalID = 0;
		this.tileset = null;
		this.firstGlobalID = firstGID;
		this.tileset = tileset;
	};
	$SuperBernieWorld_Maps_TilesetInfo.getDefaultValue = function() {
		return new $SuperBernieWorld_Maps_TilesetInfo();
	};
	global.SuperBernieWorld.Maps.TilesetInfo = $SuperBernieWorld_Maps_TilesetInfo;
	////////////////////////////////////////////////////////////////////////////////
	// SuperBernieWorld.Sprites.Sprite
	var $SuperBernieWorld_Sprites_Sprite = function(sizeX, sizeY, standing, moving, skidding, jumping, falling, dying, idle, crouching, powerUp) {
		this.$standing = null;
		this.$moving = null;
		this.$skidding = null;
		this.$jumping = null;
		this.$falling = null;
		this.$dying = null;
		this.$idle = null;
		this.$crouching = null;
		this.$powerUp = null;
		this.$1$SizeXField = 0;
		this.$1$SizeYField = 0;
		this.set_sizeX(sizeX);
		this.set_sizeY(sizeY);
		this.$standing = standing;
		this.$moving = moving;
		this.$skidding = skidding;
		this.$jumping = jumping;
		this.$falling = falling;
		this.$dying = dying;
		this.$idle = idle;
		this.$crouching = crouching;
		this.$powerUp = powerUp;
	};
	$SuperBernieWorld_Sprites_Sprite.__typeName = 'SuperBernieWorld.Sprites.Sprite';
	$SuperBernieWorld_Sprites_Sprite.makeFrame = function(tex, charX, charY, width, height) {
		return new Franca.SubTexture.$ctor3(tex, new Franca.Rectangle.$ctor3(charX * 16, charY * 16, width * 16, height * 16));
	};
	$SuperBernieWorld_Sprites_Sprite.makeFrame$1 = function(tex, left, top, charX, charY, width, height) {
		return new Franca.SubTexture.$ctor3(tex, new Franca.Rectangle.$ctor3(left + charX * 16, top + charY * 16, width * 16, height * 16));
	};
	global.SuperBernieWorld.Sprites.Sprite = $SuperBernieWorld_Sprites_Sprite;
	ss.initClass($SuperBernieWorld_$Credits$EnemyInfo, $asm, {
		getHashCode: function() {
			var h = (this.$spriteTypes ? ss.getHashCode(this.$spriteTypes) : 0);
			h = h * 397 ^ (this.$name ? ss.getHashCode(this.$name) : 0);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $SuperBernieWorld_$Credits$EnemyInfo)) {
				return false;
			}
			return ss.equals(this.$spriteTypes, o.$spriteTypes) && ss.equals(this.$name, o.$name);
		}
	});
	$SuperBernieWorld_$Credits$EnemyInfo.$ctor1.prototype = $SuperBernieWorld_$Credits$EnemyInfo.prototype;
	$SuperBernieWorld_$Credits$EnemyInfo.__class = false;
	ss.initClass($SuperBernieWorld_$Program, $asm, {});
	ss.initClass($SuperBernieWorld_Assets, $asm, {});
	ss.initEnum($SuperBernieWorld_AssetType, $asm, { mainFontKeyboard: 0, mainFontXbox: 1, mainFontNintendo: 2, mainFontPlayStation: 3, titlescreenBackground: 4, logo: 5, spritesheet: 6, bernieSpriteSmall: 7, bernieSpriteLarge: 8, magambaSprite: 9, mitchSpriteGreen: 10, mitchSpriteRed: 11, paraMitchSpriteGreen: 12, paraMitchSpriteRed: 13, trashmanSprite: 14, gopobooSprite: 15, cheeseSprite: 16, tikiTorcherSprite: 17, world1ParallaxBg: 18, world2ParallaxBg: 19, world3ParallaxBg: 20, world4ParallaxBg: 21, world1CastleBg: 22, world2CastleBg: 23, world3CastleBg: 24, world4CastleBg: 25, topPanel: 26, greenShellSprite: 27, redShellSprite: 28, cursor: 29, portraitBernie: 30, portraitTrump: 31, portraitJordan: 32, portraitCruz: 33, portraitMcConnell: 34, iceSprite: 35, fireSprite: 36, sfxChat: 37, sfxCoin: 38, sfxFlag: 39, sfxJump: 40, sfxPowDown: 41, sfxPowUp: 42, sfxStomp: 43, sfxBounce: 44, sfxFire: 45, musVictory: 46, musDeath: 47, musInvincible: 48, musOverworld: 49, musOverworldFast: 50, musCastle: 51, musCastleFast: 52, leverSprite: 53, republicanSprite: 54, cheetoSprite: 55, coinSprite: 56, tilesetOutdoor1: 57, tilesetOutdoor2: 58, tilesetOutdoor3: 59, tilesetOutdoor4: 60, tilesetCastle1: 61, tilesetCastle4: 62, moneyBagSprite: 63, tikiTorchSprite: 64, fxPalette: 65, texPalette: 66, roseSprite: 67, fistSprite: 68, roseProjectileSprite: 69, lavaSplashSprite: 70, sfxShoot: 71, sfxReveal: 72, busSprite: 73 });
	ss.initClass($SuperBernieWorld_Audio, $asm, {});
	ss.initEnum($SuperBernieWorld_BernieState, $asm, { small: 0, large: 1, rose: 2 });
	ss.initClass($SuperBernieWorld_Container, $asm, {
		$container_OnResolutionChanged: function(container, width, height) {
			this.get_graphicsDevice().set_viewport(new Franca.Rectangle.$ctor3(0, 0, width, height));
		},
		bindKeys: function() {
			console.log('Binding keys');
			Franca.GameContainer.prototype.bindKeys.call(this);
			this.get_input().gamepad(0).set_displayMappingWarning(true);
			this.get_input().gamepad(1).set_displayMappingWarning(true);
			this.get_input().gamepad(2).set_displayMappingWarning(true);
			this.get_input().gamepad(3).set_displayMappingWarning(true);
			this.get_input().setDeadzoneProcessing$1(2);
			// move up/down comes first cause crouching should disable movement
			this.get_input().bind$5(38, 2, ss.mkdel(this, this.$move), 2, -1, false, false, false);
			this.get_input().bind$5(40, 2, ss.mkdel(this, this.$move), 4, -1, false, false, false);
			this.get_input().bind$5(37, 2, ss.mkdel(this, this.$move), 1, -1, false, false, false);
			this.get_input().bind$5(39, 2, ss.mkdel(this, this.$move), 3, -1, false, false, false);
			this.get_input().bind$5(37, 1, ss.mkdel(this, this.$navigate), 1, -1, false, false, false);
			this.get_input().bind$5(38, 1, ss.mkdel(this, this.$navigate), 2, -1, false, false, false);
			this.get_input().bind$5(39, 1, ss.mkdel(this, this.$navigate), 3, -1, false, false, false);
			this.get_input().bind$5(40, 1, ss.mkdel(this, this.$navigate), 4, -1, false, false, false);
			this.get_input().bind$5(73, 2, ss.mkdel(this, this.$move), 2, -1, false, false, false);
			this.get_input().bind$5(75, 2, ss.mkdel(this, this.$move), 4, -1, false, false, false);
			this.get_input().bind$5(74, 2, ss.mkdel(this, this.$move), 1, -1, false, false, false);
			this.get_input().bind$5(76, 2, ss.mkdel(this, this.$move), 3, -1, false, false, false);
			this.get_input().bind$5(74, 1, ss.mkdel(this, this.$navigate), 1, -1, false, false, false);
			this.get_input().bind$5(73, 1, ss.mkdel(this, this.$navigate), 2, -1, false, false, false);
			this.get_input().bind$5(76, 1, ss.mkdel(this, this.$navigate), 3, -1, false, false, false);
			this.get_input().bind$5(75, 1, ss.mkdel(this, this.$navigate), 4, -1, false, false, false);
			this.get_input().bind$6(88, 2, ss.mkdel(this, this.$mainButton), -1, -1, false, false, false);
			this.get_input().bind$6(90, 2, ss.mkdel(this, this.$altButton), -1, -1, false, false, false);
			this.get_input().bind$6(88, 1, ss.mkdel(this, this.$accept), -1, -1, false, false, false);
			this.get_input().bind$6(90, 1, ss.mkdel(this, this.$cancel), -1, -1, false, false, false);
			this.get_input().bind$6(32, 1, ss.mkdel(this, this.$accept), -1, -1, false, false, false);
			this.get_input().bind$6(13, 1, ss.mkdel(this, this.$accept), -1, -1, false, false, false);
			this.get_input().bind$6(8, 1, ss.mkdel(this, this.$cancel), -1, -1, false, false, false);
			this.get_input().bind$6(27, 1, ss.mkdel(this, this.$cancel), -1, -1, false, false, false);
			// move up/down comes first cause crouching should disable movement
			this.get_input().bind$3(12, 2, ss.mkdel(this, this.$move), 2, -1, -1);
			this.get_input().bind$3(13, 2, ss.mkdel(this, this.$move), 4, -1, -1);
			this.get_input().bind$3(14, 2, ss.mkdel(this, this.$move), 1, -1, -1);
			this.get_input().bind$3(15, 2, ss.mkdel(this, this.$move), 3, -1, -1);
			this.get_input().bind$3(14, 1, ss.mkdel(this, this.$navigate), 1, -1, -1);
			this.get_input().bind$3(12, 1, ss.mkdel(this, this.$navigate), 2, -1, -1);
			this.get_input().bind$3(15, 1, ss.mkdel(this, this.$navigate), 3, -1, -1);
			this.get_input().bind$3(13, 1, ss.mkdel(this, this.$navigate), 4, -1, -1);
			this.get_input().bind$4(2, 2, ss.mkdel(this, this.$altButton), -1, -1, -1);
			this.get_input().bind$4(0, 2, ss.mkdel(this, this.$mainButton), -1, -1, -1);
			this.get_input().bind$4(1, 2, ss.mkdel(this, this.$altButton), -1, -1, -1);
			this.get_input().bind$4(3, 2, ss.mkdel(this, this.$mainButton), -1, -1, -1);
			this.get_input().bind$4(2, 1, ss.mkdel(this, this.$cancel), -1, -1, -1);
			this.get_input().bind$4(0, 1, ss.mkdel(this, this.$accept), -1, -1, -1);
			this.get_input().bind$4(1, 1, ss.mkdel(this, this.$cancel), -1, -1, -1);
			this.get_input().bind$4(3, 1, ss.mkdel(this, this.$accept), -1, -1, -1);
			this.get_input().bind$4(8, 1, ss.mkdel(this, this.$cancel), -1, -1, -1);
			this.get_input().bind$4(9, 1, ss.mkdel(this, this.$accept), -1, -1, -1);
		},
		$move: function(e) {
			if (this.get_transitioning()) {
				return;
			}
			this.changeInputDevice(e);
			if (ss.isValue(this.$mode)) {
				this.$mode.move(e.info);
			}
		},
		$navigate: function(e) {
			if (this.get_transitioning()) {
				return;
			}
			this.changeInputDevice(e);
			if (ss.isValue(this.$mode)) {
				this.$mode.navigate(e.info);
			}
		},
		$accept: function(e) {
			if (this.get_transitioning()) {
				return;
			}
			this.changeInputDevice(e);
			if (ss.isValue(this.$mode)) {
				if (e.device === 3) {
					this.$mode.openUrl(3);
				}
				this.$mode.accept(ss.isValue(e.keyBind) && ss.contains(this.$primaryAcceptKeys, ss.unbox(e.keyBind).physicalKey) || ss.isValue(e.gamepadBind) && ss.contains(this.$primaryAcceptButtons, ss.unbox(e.gamepadBind).button));
			}
		},
		$cancel: function(e) {
			if (this.get_transitioning()) {
				return;
			}
			this.changeInputDevice(e);
			if (ss.isValue(this.$mode)) {
				this.$mode.cancel(ss.isValue(e.keyBind) && ss.contains(this.$primaryCancelKeys, ss.unbox(e.keyBind).physicalKey) || ss.isValue(e.gamepadBind) && ss.contains(this.$primaryCancelButtons, ss.unbox(e.gamepadBind).button));
			}
		},
		$mainButton: function(e) {
			if (this.get_transitioning()) {
				return;
			}
			this.changeInputDevice(e);
			if (ss.isValue(this.$mode)) {
				this.$mode.mainButton($SuperBernieWorld_InputEventExtensions.isHeld(e));
			}
		},
		$altButton: function(e) {
			if (this.get_transitioning()) {
				return;
			}
			this.changeInputDevice(e);
			if (ss.isValue(this.$mode)) {
				this.$mode.altButton($SuperBernieWorld_InputEventExtensions.isHeld(e));
			}
		},
		changeInputDevice: function(e) {
			if (ss.isNullOrUndefined(e)) {
				return;
			}
			this.changeInputDevice$1(e.device, e.gamepad);
		},
		changeInputDevice$1: function(device, gp) {
			if (device === 0) {
				$SuperBernieWorld_Core.switchControllerType(0);
			}
			else if (device === 3 && ss.isValue(gp)) {
				var gamepadIsMatch = false;
				switch (gp.vendor) {
					case 'Microsoft': {
						$SuperBernieWorld_Core.switchControllerType(1);
						gamepadIsMatch = true;
						break;
					}
					case 'SNES USB': {
						$SuperBernieWorld_Core.switchControllerType(4);
						gamepadIsMatch = true;
						break;
					}
					case 'Nintendo': {
						$SuperBernieWorld_Core.switchControllerType(3);
						gamepadIsMatch = true;
						break;
					}
					case 'Sony': {
						$SuperBernieWorld_Core.switchControllerType(2);
						gamepadIsMatch = true;
						break;
					}
				}
				if (!gamepadIsMatch) {
					switch (gp.guid) {
						case '83056020':
						case '8f0e1330':
						case '100801e5':
						case '79001100':
						case '9b280300': {
							// iBuffalo SNES Controller
							// HuiJia SNES Controller (aka Mayflash adapter)
							// NEXT SNES Controller
							// Retrolink SNES Controller
							// raphnet.net 4nes4snes v1.5
							$SuperBernieWorld_Core.switchControllerType(4);
							gamepadIsMatch = true;
							break;
						}
					}
				}
				if (!gamepadIsMatch) {
					switch (Franca.Platform.get_OS()) {
						default:
						case 'Windows':
						case 'Mac OS X':
						case 'Linux': {
							// xinput is the default layout (corresponds to xbox)
							$SuperBernieWorld_Core.switchControllerType(5);
							break;
						}
						case 'Switch': {
							$SuperBernieWorld_Core.switchControllerType(3);
							break;
						}
						case 'Xbox 360':
						case 'Xbox One': {
							$SuperBernieWorld_Core.switchControllerType(1);
							break;
						}
						case 'PlayStation 4':
						case 'PlayStation 3':
						case 'PS Vita': {
							$SuperBernieWorld_Core.switchControllerType(2);
							break;
						}
					}
				}
			}
		},
		loadContent: function() {
			console.log('Loading cutscenes');
			$SuperBernieWorld_Cutscenes.init();
			console.log('Loading content');
			Franca.GameContainer.prototype.loadContent.call(this);
			this.get_graphicsDevice().set_defaultFontManager(new Franca.SpriteFontManager(this.get_graphicsDevice(), 2048, 2048, false, 0));
			this.$batch = new Franca.SpriteBatch(this.get_graphicsDevice());
			console.log('Initializing audio');
			$SuperBernieWorld_Audio.init(this.get_audioContext());
			console.log('Setting references');
			$SuperBernieWorld_Core.set_graphicsDevice(this.get_graphicsDevice());
			$SuperBernieWorld_Core.set_container(this);
			$SuperBernieWorld_Core.set_content(this.get_content());
			console.log('Initializing Core');
			$SuperBernieWorld_Core.init();
			console.log('Creating render targets');
			$SuperBernieWorld_Core.createRenderTargets($SuperBernieWorld_Core.screenWidth, $SuperBernieWorld_Core.screenHeight);
			console.log('Initializing assets');
			$SuperBernieWorld_Assets.init(this.get_content(), this.get_audioContext());
			try {
				$SuperBernieWorld_Core.loadStoredVolume();
			}
			catch ($t1) {
			}
			this.hookJSInput();
		},
		startGame: function(world) {
			if (world === 0) {
				$SuperBernieWorld_Core.set_bernieState(0);
			}
			this.$nextMode = new $SuperBernieWorld_Cutscene(this, new $SuperBernieWorld_PreLevel(this, new $SuperBernieWorld_Game(this, world * 3), world + 1, 1), $SuperBernieWorld_Cutscenes.scenes[world]);
			$SuperBernieWorld_SpeedrunHelper.get_state().gameStarted = 1;
		},
		startTitle: function() {
			this.$nextMode = new $SuperBernieWorld_Titlescreen(this);
		},
		changeMode: function(mode) {
			this.$nextMode = mode;
		},
		$startMode: function() {
			$SuperBernieWorld_SpeedrunHelper.get_state().cutscene = 0;
			this.$mode.start();
		},
		update: function(gameTime, elapsed) {
			// because of Firefox's fullscreening nonsense, just do this instead to full the screen
			// and use itch's fullscreen button feature for fullscreening.
			var parent = document.getElementById(this.get_anchor());
			if (ss.isValue(parent)) {
				if (parent.clientWidth !== this.get_width() || parent.clientHeight !== this.get_height()) {
					this.setResolution$1(0, parent.clientWidth, parent.clientHeight);
				}
			}
			Franca.GameContainer.prototype.update.call(this, gameTime, elapsed);
			if (!this.$loaded) {
				if (this.get_content().get_isContentReady()) {
					this.$loaded = true;
					$SuperBernieWorld_Assets.loaded();
					this.$mode = new $SuperBernieWorld_Disclaimer(this);
					this.$startMode();
				}
				else {
					return;
				}
			}
			if (ss.isValue(this.$nextMode)) {
				var _cached = this.$nextMode;
				this.$nextMode = null;
				this.$transition = Franca.Tweening.Tween.sequence([Franca.Tweening.Tween.double$1(null).from(1).to(0).duration$1((this.$mode.get_doTransition() ? $SuperBernieWorld_Container.$transitionFadeSeconds : 0)).onTick(ss.mkdel(this, function(v) {
					this.$screenAlpha = v;
				})).onFinish$1(ss.mkdel(this, function() {
					this.$mode.stop();
					this.$mode = _cached;
					this.$startMode();
					$SuperBernieWorld_Audio.get_music().stopAllInstances();
				})), Franca.Tweening.Tween.pause($SuperBernieWorld_Container.$transitionPauseSeconds, null), Franca.Tweening.Tween.double$1(null).from(0).to(1).onTick(ss.mkdel(this, function(v1) {
					this.$screenAlpha = v1;
				})).duration$1((_cached.get_doTransition() ? 0.333333333333333 : 0))]);
				this.$transition.start$1();
			}
			$SuperBernieWorld_Time.update((this.get_transitioning() ? new ss.TimeSpan(0) : this.$mode.getElapsedGameTime(elapsed)), elapsed);
			Franca.Tweening.Tween.update($SuperBernieWorld_Time.get_game(), gameTime);
			this.get_input().processInput($SuperBernieWorld_Time.get_real(), -1);
			if (ss.isValue(this.$mode)) {
				var axisAccumLX = 0;
				var axisAccumLY = 0;
				var axisAccumRX = 0;
				var axisAccumRY = 0;
				for (var i = 0; i < Franca.InputHandler.maxGamepads; i++) {
					var gp = this.get_input().gamepad(i);
					var $t1 = ss.getEnumerator(gp.get_axes());
					try {
						while ($t1.moveNext()) {
							var axis = $t1.current();
							var type = axis.type;
							var value = axis.value;
							if (Math.abs(this.$lastAxisValue.get_item(type)) < $SuperBernieWorld_Container.$axisThreshold && Math.abs(value) >= $SuperBernieWorld_Container.$axisThreshold) {
								if (type === 0 || type === 2) {
									this.changeInputDevice$1(3, gp);
									this.$mode.navigate(((value < 0) ? 1 : 3));
								}
								if (type === 1 || type === 3) {
									this.changeInputDevice$1(3, gp);
									this.$mode.navigate(((value > 0) ? 2 : 4));
								}
							}
							if (Math.abs(value) >= $SuperBernieWorld_Container.$axisThreshold) {
								// move up/down comes first cause crouching should disable movement
								if (type === 1 || type === 3) {
									this.changeInputDevice$1(3, gp);
									this.$mode.move(((value > 0) ? 2 : 4));
								}
								if (type === 0 || type === 2) {
									this.changeInputDevice$1(3, gp);
									this.$mode.move(((value < 0) ? 1 : 3));
								}
							}
							if (type === 0) {
								if (Math.abs(value) > Math.abs(axisAccumLX)) {
									axisAccumLX = value;
								}
							}
							else if (type === 1) {
								if (Math.abs(value) > Math.abs(axisAccumLY)) {
									axisAccumLY = value;
								}
							}
							else if (type === 3) {
								if (Math.abs(value) > Math.abs(axisAccumRX)) {
									axisAccumRX = value;
								}
							}
							else if (type === 3) {
								if (Math.abs(value) > Math.abs(axisAccumRY)) {
									axisAccumRY = value;
								}
							}
						}
					}
					finally {
						$t1.dispose();
					}
				}
				this.$lastAxisValue.set_item(0, axisAccumLX);
				this.$lastAxisValue.set_item(1, axisAccumLY);
				this.$lastAxisValue.set_item(2, axisAccumRX);
				this.$lastAxisValue.set_item(3, axisAccumRY);
			}
			if (ss.isValue(this.$mode) && !this.get_transitioning()) {
				this.$mode.update();
			}
			$SuperBernieWorld_Core.get_coroutines().resumeAll();
		},
		render: function(gameTime, elapsed) {
			this.get_graphicsDevice().clear$2(Franca.Color.black);
			if (!this.$loaded || ss.isNullOrUndefined(this.$mode)) {
				Franca.GameContainer.prototype.render.call(this, gameTime, elapsed);
				return;
			}
			$SuperBernieWorld_Core.resetRenderTargets();
			{
				var $t1 = this.get_graphicsDevice().setRenderTarget$1($SuperBernieWorld_Core.switchRenderTargets(null), true);
				try {
					this.$mode.render(this.$batch);
				}
				finally {
					$t1.dispose();
				}
			}
			var target = $SuperBernieWorld_Core.get_currentTarget();
			var scale = Math.min(ss.Int32.div(this.get_graphicsDevice().get_viewport().size.height, target.get_height()), ss.Int32.div(this.get_graphicsDevice().get_viewport().size.width, target.get_width()));
			var dest = new Franca.Rectangle.$ctor3(ss.Int32.div(this.get_graphicsDevice().get_viewport().size.width - target.get_width() * scale, 2), ss.Int32.div(this.get_graphicsDevice().get_viewport().size.height - target.get_height() * scale, 2), target.get_width() * scale, target.get_height() * scale);
			this.$batch.begin(0, 12, 12, null);
			this.$batch.draw$2(target, Franca.Rectangle.op_Implicit(dest), Franca.HdrColors.op_Implicit(Franca.Color.op_Multiply$1(Franca.Color.op_Multiply$1(Franca.Color.white, this.$mode.get_alpha()), this.$screenAlpha)), 0, 0);
			this.$batch.end();
			Franca.GameContainer.prototype.render.call(this, gameTime, elapsed);
		},
		exit: function() {
			console.log('Exiting');
			$SuperBernieWorld_Core.disposeRenderTargets();
			this.$batch.dispose();
			this.unhookJSInput();
			$SuperBernieWorld_SpeedrunHelper.free();
			Franca.GameContainer.prototype.exit.call(this);
		},
		init: function() {
			console.log('Initializing container');
			Franca.GameContainer.prototype.init.call(this);
		},
		get_transitioning: function() {
			return ss.isValue(this.$transition) && this.$transition.get_state() !== 0;
		},
		hookJSInput: function() {
			this.get_input().add_onKeyDown(ss.mkdel(this, this.$input_OnKeyDown));
			this.get_input().add_onKeyUp(ss.mkdel(this, this.$input_OnKeyUp));
		},
		unhookJSInput: function() {
			this.get_input().remove_onKeyDown(ss.mkdel(this, this.$input_OnKeyDown));
			this.get_input().remove_onKeyUp(ss.mkdel(this, this.$input_OnKeyUp));
		},
		tryOpenUrl: function(url, device) {
			if (!Franca.Platform.openUrl(url, false)) {
				var link = ss.replaceAllString($SuperBernieWorld_Container.$popupLink, '[[URL]]', url);
				if (device === 3) {
					// Gamepad polling is not a user gesture so probably can't open a new window, so we
					// check for that and create a non blocking alert (html element popup) if so with link.
					var win = window;
					win[$SuperBernieWorld_Container.$urlPopupInstance] = Franca.JS.NonBlockingAlert.show(ss.formatString(ss.replaceAllString(ss.replaceAllString($SuperBernieWorld_Container.webLinkAlertGamepad, '[[LINK]]', link), '[[/LINK]]', '</a>'), $SuperBernieWorld_Container.$urlPopupInstance), $SuperBernieWorld_Container.$urlPopupInstance, false);
				}
				else {
					var win1 = window;
					win1[$SuperBernieWorld_Container.$urlPopupInstance] = Franca.JS.NonBlockingAlert.show(ss.formatString(ss.replaceAllString(ss.replaceAllString($SuperBernieWorld_Container.webLinkAlert, '[[LINK]]', link), '[[/LINK]]', '</a>'), $SuperBernieWorld_Container.$urlPopupInstance), $SuperBernieWorld_Container.$urlPopupInstance, false);
				}
			}
		},
		$input_OnKeyDown: function(e) {
			if (this.get_transitioning()) {
				return;
			}
			var k = Franca.KeyboardButton.keyFromKeyCode$1(e.key.code, false);
			if (!this.$isKeyDown.contains(k)) {
				switch (k) {
					case 88:
					case 13:
					case 32: {
						if (ss.isValue(this.$mode)) {
							this.$mode.openUrl(0);
						}
						break;
					}
				}
			}
			this.$isKeyDown.add(k);
			e.set_preventDefault(true);
		},
		$input_OnKeyUp: function(e) {
			var k = Franca.KeyboardButton.keyFromKeyCode$1(e.key.code, false);
			this.$isKeyDown.remove(k);
			e.set_preventDefault(true);
		}
	}, Franca.GameContainer, [ss.IDisposable, Franca.Gui.IGuiContext]);
	ss.initEnum($SuperBernieWorld_ControllerType, $asm, { keyboard: 0, xboxGamepad: 1, playStationGamepad: 2, nintendoProGamepad: 3, snesUsbGamepad: 4, xInputGamepad: 5 });
	ss.initClass($SuperBernieWorld_Core, $asm, {});
	ss.initClass($SuperBernieWorld_Mode, $asm, {
		update: null,
		render: null,
		move: null,
		mainButton: null,
		altButton: null,
		navigate: null,
		accept: null,
		cancel: null,
		openUrl: null,
		start: function() {
		},
		stop: function() {
		},
		getElapsedGameTime: function(elapsed) {
			return elapsed;
		},
		get_doTransition: function() {
			return true;
		},
		get_alpha: function() {
			return 1;
		}
	});
	ss.initClass($SuperBernieWorld_Credits, $asm, {
		start: function() {
			console.log("Starting 'Credits' mode");
		},
		$next: function() {
			this.parent.changeMode(new $SuperBernieWorld_Titlescreen(this.parent));
		},
		stop: function() {
			if (ss.isValue(this.$styleTween)) {
				this.$styleTween.cancel();
			}
			if (ss.isValue(this.$enemyTween)) {
				this.$enemyTween.cancel();
			}
		},
		$startTweening: function() {
			this.$styleTween = Franca.Tweening.Tween.sequence([Franca.Tweening.Tween.pause(3.5, null), Franca.Tweening.Tween.double$1(null).from(0).to(1).duration$1(2).onTick(ss.mkdel(this, function(v) {
				this.$styleAlpha = v;
			})).onFinish$1(ss.mkdel(this, function() {
				this.$styleIndex = this.$styleIndex + 1;
				this.$styleAlpha = 0;
			}))]);
			this.$styleTween.loop(true);
			this.$styleTween.start$1();
			this.$enemyTween = Franca.Tweening.Tween.sequence([Franca.Tweening.Tween.pause(0.25, null), Franca.Tweening.Tween.double$1(null).from(0).to(0.5).duration$1(1).onTick(ss.mkdel(this, function(v1) {
				this.$enemyPositionAlpha = v1;
			})), Franca.Tweening.Tween.pause(4, null), Franca.Tweening.Tween.double$1(null).from(0.5).to(1).duration$1(1).onTick(ss.mkdel(this, function(v2) {
				this.$enemyPositionAlpha = v2;
			})).onFinish$1(ss.mkdel(this, function() {
				this.$enemyIndex = (this.$enemyIndex + 2) % this.$enemyInfo.length;
			}))]);
			this.$enemyTween.loop(true);
			this.$enemyTween.start$1();
		},
		$addTilesetSwappedMap: function(index) {
			var swapped = this.$map.makeInstance();
			for (var i = 0; i < swapped.tilesets.length; i++) {
				if (ss.referenceEquals(swapped.tilesets[i].tileset, $SuperBernieWorld_Assets.get($SuperBernieWorld_Maps_Tileset).call(null, 57))) {
					swapped.tilesets[i] = new $SuperBernieWorld_Maps_TilesetInfo.$ctor1(swapped.tilesets[i].firstGlobalID, $SuperBernieWorld_Assets.get($SuperBernieWorld_Maps_Tileset).call(null, 57 + index));
				}
			}
			var $t2 = this.$renderers;
			var $t1 = new $SuperBernieWorld_GameRenderer();
			$t1.set_map(swapped);
			$t1.set_background($SuperBernieWorld_Assets.get($SuperBernieWorld_Maps_Map).call(null, 18 + index));
			$t2[index] = $t1;
		},
		altButton: function(held) {
		},
		mainButton: function(held) {
		},
		move: function(dir) {
		},
		navigate: function(dir) {
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.move(dir);
			}
		},
		accept: function(primaryButton) {
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.accept();
			}
		},
		openUrl: function(device) {
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.openUrl(device);
			}
		},
		cancel: function(primaryButton) {
			this.$next();
		},
		update: function() {
			if (ss.isNullOrUndefined(this.$styleTween)) {
				this.$startTweening();
			}
			this.$scroll += $SuperBernieWorld_Time.get_realElapsed().ticks / 10000000 * 60;
			for (var i = 0; i < this.$renderers.length; i++) {
				this.$renderers[i].set_scroll(Math.floor(this.$scroll));
			}
			if (!this.$playingMusic) {
				this.$playingMusic = true;
				$SuperBernieWorld_Audio.playMusic(49, true);
			}
		},
		render: function(batch) {
			{
				var $t1 = batch.get_graphicsDevice().setRenderTarget$1($SuperBernieWorld_Core.switchRenderTargets(null), true);
				try {
					this.$renderers[Franca.Calc.mod$3(this.$styleIndex + 1, this.$renderers.length)].render(batch, null, null, true, null, false);
				}
				finally {
					$t1.dispose();
				}
			}
			$SuperBernieWorld_Core.switchRenderTargets(null);
			this.$renderers[Franca.Calc.mod$3(this.$styleIndex, this.$renderers.length)].render(batch, null, null, true, null, false);
			batch.begin(0, 3, 12, null);
			batch.draw$3($SuperBernieWorld_Core.get_lastTarget(), Franca.Vector2.zero, Franca.HdrColors.op_Implicit(Franca.Color.op_Multiply$1(Franca.Color.white, this.$styleAlpha)), 0, 0);
			//var logo = Assets.Get<Texture>(AssetType.Logo);
			//batch.Draw(logo, new Vector2((Core.ScreenWidth - logo.Width) / 2, 30).Floor(), Color.White);
			var barHeight = 56;
			batch.drawRectangle(new Franca.RectangleF.$ctor3(0, 0, 256, barHeight), Franca.HdrColors.op_Implicit(Franca.Color.black), 0);
			batch.drawRectangle(new Franca.RectangleF.$ctor3(0, $SuperBernieWorld_Core.screenHeight - barHeight, 256, barHeight), Franca.HdrColors.op_Implicit(Franca.Color.black), 0);
			batch.end();
			var infoTop = this.$enemyInfo[this.$enemyIndex];
			var infoBottom = this.$enemyInfo[(this.$enemyIndex + 1) % this.$enemyInfo.length];
			var frame = $SuperBernieWorld_Time.get_game().ticks / 10000000 * 5;
			$SuperBernieWorld_Core.get_mainFont().drawAligned(infoTop.$name, new Franca.Vector2.$ctor3(-64 + 384 * this.$enemyPositionAlpha, 12), Franca.Color.white, 1, 1, 1, false, 0, -1, true, null);
			{
				batch.begin(0, 3, 12, null);
				var size = 0;
				for (var i = 0; i < infoTop.$spriteTypes.length; i++) {
					if (i > 0) {
						size += 16;
					}
					var sprite = $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, infoTop.$spriteTypes[i]);
					size += ss.Int32.trunc(sprite.getStanding(frame).source.size.width);
				}
				var x = -64 + 384 * this.$enemyPositionAlpha;
				x -= ss.Int32.div(size, 2);
				for (var i1 = 0; i1 < infoTop.$spriteTypes.length; i1++) {
					var sprite1 = $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, infoTop.$spriteTypes[i1]);
					var tex = ((infoTop.$spriteTypes[i1] === 55 && this.$fromEndGame) ? sprite1.getPowerUp(frame / 2) : sprite1.getStanding(frame));
					var y = (barHeight - 14 - tex.source.size.height) / 2 + 14;
					batch.draw$1(tex, (new Franca.Vector2.$ctor3(x, y)).floor(), Franca.HdrColors.op_Implicit(Franca.Color.white), 0, 0);
					x += tex.source.size.width + 16;
				}
				batch.end();
			}
			$SuperBernieWorld_Core.get_mainFont().drawAligned(infoBottom.$name, new Franca.Vector2.$ctor3(320 - 384 * this.$enemyPositionAlpha, $SuperBernieWorld_Core.screenHeight - barHeight + 12), Franca.Color.white, 1, 1, 1, false, 0, -1, true, null);
			{
				batch.begin(0, 3, 12, null);
				var size1 = 0;
				for (var i2 = 0; i2 < infoBottom.$spriteTypes.length; i2++) {
					if (i2 > 0) {
						size1 += 16;
					}
					var sprite2 = $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, infoBottom.$spriteTypes[i2]);
					size1 += ss.Int32.trunc(sprite2.getStanding(frame).source.size.width);
				}
				var x1 = 320 - 384 * this.$enemyPositionAlpha;
				x1 -= ss.Int32.div(size1, 2);
				for (var i3 = 0; i3 < infoBottom.$spriteTypes.length; i3++) {
					var sprite3 = $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, infoBottom.$spriteTypes[i3]);
					var tex1 = ((infoBottom.$spriteTypes[i3] === 55 && this.$fromEndGame) ? sprite3.getPowerUp(frame / 2) : sprite3.getStanding(frame));
					var y1 = (barHeight - 14 - tex1.source.size.height) / 2 + 14;
					batch.draw$1(tex1, (new Franca.Vector2.$ctor3(x1, $SuperBernieWorld_Core.screenHeight - barHeight + y1)).floor(), Franca.HdrColors.op_Implicit(Franca.Color.white), 1, 0);
					x1 += tex1.source.size.width + 16;
				}
				batch.end();
			}
			this.$menu.render(batch);
		}
	}, $SuperBernieWorld_Mode);
	ss.initClass($SuperBernieWorld_Cutscene, $asm, {
		altButton: function(held) {
		},
		mainButton: function(held) {
		},
		move: function(dir) {
		},
		accept: function(primaryButton) {
			this.$skip();
		},
		openUrl: function(device) {
		},
		cancel: function(primaryButton) {
			if (primaryButton) {
				this.$skip();
			}
			else {
				this.$finish();
			}
		},
		navigate: function(dir) {
			this.$skip();
		},
		$skip: function() {
			this.$skip$1 = true;
		},
		$next: function() {
			this.$lineIndex++;
			if (this.$lineIndex >= this.$dialogue.length) {
				if (!this.$finished) {
					this.parent.changeMode(this.$nextMode);
					this.$finished = true;
				}
			}
			else {
				this.$co = Coroutines.Coroutine.create(ss.Int32).call(null, this.$showDialogue(this.$dialogue[this.$lineIndex]), $SuperBernieWorld_Core.throwCoroutines);
			}
		},
		start: function() {
			console.log("Starting 'Cutscene' mode");
			this.$co.resume(null);
		},
		$finish: function() {
			this.$canceled = true;
			this.parent.changeMode(this.$nextMode);
		},
		update: function() {
			this.$co.resume(null);
			if (this.$co.get_status() === 3) {
				this.$next();
			}
		},
		$showDialogue: function(dialogue) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(dialogue) {
					var $result, $state = 0, accumulator, textSpeed, playedSound;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									this.$current = dialogue;
									accumulator = new ss.TimeSpan(0);
									textSpeed = new ss.TimeSpan(0.0333333333333333 * 10000000);
									this.$visLen = 0;
									this.$skip$1 = false;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!(this.$visLen < this.$current.text.length)) {
										$state = 2;
										continue $sm1;
									}
									playedSound = false;
									accumulator = new ss.TimeSpan(accumulator.ticks + $SuperBernieWorld_Time.get_realElapsed().ticks);
									while (accumulator.ticks >= textSpeed.ticks) {
										this.$visLen++;
										accumulator = new ss.TimeSpan(accumulator.ticks - textSpeed.ticks);
										if (!playedSound && this.$visLen % 3 === 0) {
											$SuperBernieWorld_Audio.playSound(37, 1, ((dialogue.portrait === 30) ? 1 : 0.75));
											playedSound = true;
										}
									}
									if (this.$skip$1) {
										$state = 2;
										continue $sm1;
									}
									$result = 1;
									$state = 1;
									return true;
								}
								case 2: {
									$state = -1;
									this.$visLen = this.$current.text.length;
									this.$skip$1 = false;
									$state = 3;
									continue $sm1;
								}
								case 3: {
									$state = -1;
									if (!!this.$skip$1) {
										$state = -1;
										break $sm1;
									}
									$result = 1;
									$state = 3;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, dialogue);
			}, this);
		},
		render: function(batch) {
			this.parent.get_graphicsDevice().clear();
			batch.begin(0, 3, 12, null);
			var portrait = $SuperBernieWorld_Assets.get(Franca.Texture).call(null, this.$current.portrait);
			batch.draw$3(portrait, (new Franca.Vector2.$ctor3(ss.Int32.div($SuperBernieWorld_Core.screenWidth - portrait.get_width(), 2), ss.Int32.div(160 - portrait.get_height(), 2))).floor(), Franca.HdrColors.op_Implicit(Franca.Color.white), 0, 0);
			batch.end();
			var font = $SuperBernieWorld_Core.get_mainFont();
			font.drawInto(this.$current.text, Franca.Rectangle.fromLTRB(16, 160, 240, 208), Franca.Color.white, 1, 1, 1, false, 0, this.$visLen, true, true, null);
		},
		get_doTransition: function() {
			return !this.$canceled;
		}
	}, $SuperBernieWorld_Mode);
	ss.initClass($SuperBernieWorld_Cutscenes, $asm, {});
	ss.initEnum($SuperBernieWorld_CutsceneStateValue, $asm, { none: 0, flag: 1, boss: 2, ending: 3 });
	ss.initClass($SuperBernieWorld_Dialogue, $asm, {
		getHashCode: function() {
			var h = this.portrait;
			h = h * 397 ^ (this.text ? ss.getHashCode(this.text) : 0);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $SuperBernieWorld_Dialogue)) {
				return false;
			}
			return this.portrait === o.portrait && ss.equals(this.text, o.text);
		}
	});
	$SuperBernieWorld_Dialogue.$ctor1.prototype = $SuperBernieWorld_Dialogue.prototype;
	$SuperBernieWorld_Dialogue.__class = false;
	ss.initEnum($SuperBernieWorld_Direction, $asm, { none: 0, left: 1, up: 2, right: 3, down: 4 });
	ss.initClass($SuperBernieWorld_Disclaimer, $asm, {
		start: function() {
			console.log("Starting 'Disclaimer' mode");
		},
		$next: function() {
			if (!this.$finished) {
				this.parent.startTitle();
				this.$finished = true;
			}
		},
		accept: function(primaryButton) {
			this.$next();
		},
		openUrl: function(device) {
		},
		altButton: function(held) {
			this.$next();
		},
		cancel: function(primaryButton) {
			this.$next();
		},
		mainButton: function(held) {
			this.$next();
		},
		move: function(dir) {
			this.$next();
		},
		navigate: function(dir) {
			this.$next();
		},
		update: function() {
		},
		render: function(batch) {
			this.parent.get_graphicsDevice().clear();
			var text = 'This game is designed\r\nto get out the vote!\r\n\r\nNewsworthy persons are portrayed and their actual statements are provided to help educate voters and inspire political action.\r\n\r\nAfter you enjoy this game, please support the candidate of your choice in the real world.\r\n\r\nVOTE!';
			$SuperBernieWorld_Core.get_mainFont().drawInto(text, Franca.Rectangle.fromLTRB(32, 32, 224, 208), Franca.Color.white, 1, 1, 1, false, 0, -1, true, true, null);
		}
	}, $SuperBernieWorld_Mode);
	ss.initClass($SuperBernieWorld_EndScreen, $asm, {
		start: function() {
			console.log("Starting 'EndScreen' mode");
		},
		$next: function() {
			if (!this.$finished) {
				this.parent.changeMode(new $SuperBernieWorld_Credits(this.parent, true));
				this.$finished = true;
			}
		},
		accept: function(primaryButton) {
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.accept();
			}
		},
		openUrl: function(device) {
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.openUrl(device);
			}
		},
		altButton: function(held) {
		},
		cancel: function(primaryButton) {
			this.$next();
		},
		mainButton: function(held) {
		},
		move: function(dir) {
		},
		navigate: function(dir) {
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.move(dir);
			}
		},
		update: function() {
		},
		render: function(batch) {
			this.parent.get_graphicsDevice().clear();
			this.$menu.render(batch);
		}
	}, $SuperBernieWorld_Mode);
	ss.initClass($SuperBernieWorld_FlagEndScene, $asm, {});
	ss.initClass($SuperBernieWorld_Game, $asm, {
		start: function() {
			console.log("Starting 'Game' mode");
			console.log(ss.formatString('World {0}, level {1}', this.$world, this.$level));
			this.$timer = new ss.TimeSpan(0.9 * this.$map.width * 10000000);
			$SuperBernieWorld_Score.reset();
			$SuperBernieWorld_Entities_Physics.reset();
			$SuperBernieWorld_Core.add_onSpawnEntity(ss.mkdel(this, this.$spawnEntity));
			$SuperBernieWorld_Core.add_onSpawnParticle(ss.mkdel(this, this.$spawnParticle));
			this.$startedTime = $SuperBernieWorld_Time.get_game();
			$SuperBernieWorld_SpeedrunHelper.get_state().currentLevel = this.$mapIndex;
			$SuperBernieWorld_SpeedrunHelper.get_state().gameStarted = 1;
		},
		stop: function() {
			$SuperBernieWorld_Core.remove_onSpawnEntity(ss.mkdel(this, this.$spawnEntity));
			$SuperBernieWorld_Core.remove_onSpawnParticle(ss.mkdel(this, this.$spawnParticle));
		},
		$spawnParticle: function(p) {
			this.$particles.push(p);
		},
		$spawnEntity: function(ent) {
			this.$spawnedEntities.add(ent);
		},
		move: function(dir) {
			if (this.$paused || $SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu) || !this.get_playerControl()) {
				return;
			}
			if (dir === 3) {
				this.$player.move(3);
			}
			if (dir === 1) {
				this.$player.move(1);
			}
			if (dir === 4) {
				this.$player.crouch();
			}
		},
		mainButton: function(held) {
			if (this.$paused || $SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu) || !this.get_playerControl()) {
				return;
			}
			if (!held) {
				this.$cancelButtonPress = false;
			}
			if (!this.$cancelButtonPress) {
				this.$player.jump(held);
			}
		},
		altButton: function(held) {
			if (this.$paused || $SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu) || !this.get_playerControl()) {
				return;
			}
			if (!held) {
				this.$cancelButtonPress = false;
			}
			if (!this.$cancelButtonPress) {
				if (held) {
					this.$player.run();
				}
				else {
					this.$player.shoot();
				}
			}
		},
		navigate: function(dir) {
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.move(dir);
			}
		},
		accept: function(primaryButton) {
			if (!primaryButton) {
				if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
					this.$menu.accept();
				}
				else {
					this.$paused = !this.$paused;
				}
			}
			else if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.accept();
				this.$cancelButtonPress = true;
			}
		},
		openUrl: function(device) {
		},
		cancel: function(primaryButton) {
			if (!primaryButton) {
				if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
					this.$menu.cancel();
				}
				else if (this.$paused) {
					this.$paused = false;
				}
				else {
					$SuperBernieWorld_Menu.playCancelSound();
					this.$menu.open(this.$exitMenu);
				}
			}
			else if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.cancel();
				this.$cancelButtonPress = true;
			}
		},
		embiggen: function() {
			if (ss.isValue(this.$player)) {
				this.$player.powerUp();
			}
		},
		ensmallen: function() {
			if (ss.isValue(this.$player)) {
				this.$player.powerDown();
			}
		},
		emfisten: function() {
			if (ss.isValue(this.$player)) {
				this.$player.bernieFist();
			}
		},
		getElapsedGameTime: function(elapsed) {
			if (this.$paused || $SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu) || this.$player.get_dying()) {
				return new ss.TimeSpan(0);
			}
			return (this.$player.get_poweringUpDown() ? new ss.TimeSpan(0) : elapsed);
		},
		$playMusic: function(fast) {
			var type = ((this.$level === 3) ? 51 : 49);
			if (fast) {
				type++;
			}
			console.log('Playing music ' + fast);
			$SuperBernieWorld_Audio.get_music().stopAllInstances();
			$SuperBernieWorld_Audio.playMusic(type, true);
			if (fast) {
				this.$playingMusicFast = true;
			}
			else {
				this.$playingMusic = true;
			}
		},
		update: function() {
			if (!this.$playingMusic) {
				this.$playMusic(false);
			}
			var startX = {}, endX = {};
			this.$renderer.getScreenTiles(startX, endX, 4);
			if (!this.$paused || $SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				if (ss.isValue(this.$levelEndRoutine) && this.$levelEndRoutine.get_status() !== 3) {
					this.$alpha = this.$levelEndRoutine.resume(null).returnValue;
					if (this.$levelEndRoutine.get_status() === 3) {
						if (this.$finishedLevel) {
							if (this.$level === 3) {
								if (this.$world === 4) {
									this.parent.changeMode(new $SuperBernieWorld_EndScreen(this.parent));
								}
								else {
									this.parent.startGame(this.$world);
								}
							}
							else {
								this.parent.changeMode(new $SuperBernieWorld_PreLevel(this.parent, new $SuperBernieWorld_Game(this.parent, this.$mapIndex + 1), this.$world, this.$level + 1));
							}
						}
						else {
							this.parent.changeMode(new $SuperBernieWorld_Game(this.parent, this.$mapIndex));
						}
					}
				}
				if (!this.$player.get_poweringUpDown() && !this.$player.get_dying()) {
					if (this.get_playerControl()) {
						for (var $t1 = 0; $t1 < this.$map.entities.length; $t1++) {
							var ent = this.$map.entities[$t1];
							if (ent.get_x() >= startX.$ && ent.get_x() <= endX.$ - 1 && !ent.get_doNotAutoActivate()) {
								ent.activate();
							}
							if (!ent.get_dying()) {
								ent.tickAI();
							}
						}
					}
					var _accum = { $: this.$physicsAccumulator };
					$SuperBernieWorld_Entities_Physics.resolve(this.$map, _accum);
					this.$physicsAccumulator = _accum.$;
					for (var $t2 = 0; $t2 < this.$map.entities.length; $t2++) {
						var ent1 = this.$map.entities[$t2];
						ent1.update();
						if (ent1.get_dying() && !ent1.get_dead() && !ent1.get_deathAudioPlayed() && !ss.isInstanceOfType(ent1, $SuperBernieWorld_Entities_Bernie)) {
							$SuperBernieWorld_Audio.playSound(43, 1, 1);
							ent1.set_deathAudioPlayed(true);
						}
					}
				}
				else {
					this.$player.update();
				}
				ss.clear(this.$removeList);
				for (var i = 0; i < this.$map.entities.length; i++) {
					var ent2 = this.$map.entities[i];
					if (ent2.get_dead()) {
						this.$removeList.push(ent2);
					}
					var shell = ss.safeCast(ent2, $SuperBernieWorld_Entities_IShellEntity);
					if (ss.isValue(shell) && shell.get_shellState().bouncing) {
						if (ent2.get_x() < startX.$ || ent2.get_x() > endX.$ - 1) {
							this.$removeList.push(ent2);
						}
					}
					var rose = ss.safeCast(ent2, $SuperBernieWorld_Entities_RoseProjectile);
					if (ss.isValue(rose) && (ent2.get_x() < startX.$ || ent2.get_x() > endX.$ - 1)) {
						this.$removeList.push(ent2);
					}
					if (ent2.get_y() >= 19) {
						ent2.die();
						this.$removeList.push(ent2);
					}
				}
				for (var $t3 = 0; $t3 < this.$removeList.length; $t3++) {
					var ent3 = this.$removeList[$t3];
					ss.remove(this.$map.entities, ent3);
				}
				var $t4 = this.$spawnedEntities.getEnumerator();
				try {
					while ($t4.moveNext()) {
						var ent4 = $t4.current();
						if (!ss.contains(this.$map.entities, ent4)) {
							this.$map.entities.push(ent4);
							ent4.activate();
						}
					}
				}
				finally {
					$t4.dispose();
				}
				this.$spawnedEntities.clear();
				if (this.get_playerControl()) {
					this.$timer = new ss.TimeSpan(this.$timer.ticks - ((this.$timer.ticks / 10000000 <= 3) ? System.TimeSpanExtensions.divide($SuperBernieWorld_Time.get_gameElapsed(), 1.5) : $SuperBernieWorld_Time.get_gameElapsed()).ticks);
					if (this.$timer.ticks < (new ss.TimeSpan(0)).ticks) {
						this.$timer = new ss.TimeSpan(0);
						this.$player.die();
					}
					if (this.$timer.ticks < (new ss.TimeSpan(30 * 10000000)).ticks) {
						if (!this.$playingMusicFast) {
							this.$playMusic(true);
						}
					}
				}
				if (this.$player.get_x() >= this.$map.flagX && this.get_playerControl()) {
					this.$finishedLevel = true;
					this.$levelEndRoutine = Coroutines.Coroutine.create(Number).call(null, $SuperBernieWorld_FlagEndScene.routine(this.$player, this.$map, this), $SuperBernieWorld_Core.throwCoroutines);
					this.$player.set_speedX(0);
					$SuperBernieWorld_Score.set_value($SuperBernieWorld_Score.get_value() + Math.floor(Math.max(0, this.$map.flagPoleBaseY - this.$player.get_y()) * 100 + 1000));
				}
				var volume = {};
				var colH = {}, colV = {};
				this.$player.getCollisionInfo(volume, colH, colV);
				var boss = Enumerable.from(this.$map.entities).where(function(e) {
					return ss.isInstanceOfType(e, $SuperBernieWorld_Entities_IBoss);
				}).orderBy(ss.mkdel(this, function(e1) {
					return Math.abs(this.$player.get_x() - e1.get_x());
				})).select(function(e2) {
					return ss.cast(e2, $SuperBernieWorld_Entities_IBoss);
				}).firstOrDefault(null, ss.getDefaultValue($SuperBernieWorld_Entities_IBoss));
				var bossEnt = ss.safeCast(boss, $SuperBernieWorld_Entities_Entity);
				if (ss.isValue(boss) && boss.get_isFlamingHotCheeto() && colV.$.location.x + colV.$.size.width > Math.floor(bossEnt.get_x() - 9) && this.get_playerControl()) {
					this.$finishedLevel = true;
					this.$levelEndRoutine = Coroutines.Coroutine.create(Number).call(null, $SuperBernieWorld_LeverEndScene.routine(this.$player, this.$map, this, boss, this.$renderer), $SuperBernieWorld_Core.throwCoroutines);
					this.$player.set_speedX(this.$player.get_speedX() / 2);
				}
				else if (ss.isValue(this.$map.lever) && colV.$.location.x + colV.$.size.width > Math.floor(this.$map.lever.get_x()) && this.get_playerControl()) {
					this.$finishedLevel = true;
					this.$levelEndRoutine = Coroutines.Coroutine.create(Number).call(null, $SuperBernieWorld_LeverEndScene.routine(this.$player, this.$map, this, boss, this.$renderer), $SuperBernieWorld_Core.throwCoroutines);
					this.$player.set_speedX(this.$player.get_speedX() / 2);
					$SuperBernieWorld_Score.set_value($SuperBernieWorld_Score.get_value() + 5000);
				}
				if (this.$player.get_dying() && this.get_playerControl()) {
					this.$levelEndRoutine = Coroutines.Coroutine.create(Number).call(null, this.$died(this.$player.get_y() >= 19), $SuperBernieWorld_Core.throwCoroutines);
				}
				for (var $t5 = 0; $t5 < this.$map.layers.length; $t5++) {
					var layer = this.$map.layers[$t5];
					var playedSound = false;
					if (layer.isCoinLayer) {
						for (var y = volume.$.location.y; y < volume.$.location.y + volume.$.size.height; y++) {
							for (var x = volume.$.location.x; x < volume.$.location.x + volume.$.size.width; x++) {
								if (layer.area.contains$2(x, y)) {
									var tile = ss.arrayGet(layer.tiles, x - layer.area.location.x, y - layer.area.location.y);
									if ($SuperBernieWorld_Maps_TileID.op_Inequality(tile, ss.getDefaultValue($SuperBernieWorld_Maps_TileID))) {
										$SuperBernieWorld_Score.set_votes($SuperBernieWorld_Score.get_votes() + 1);
										$SuperBernieWorld_Score.set_value($SuperBernieWorld_Score.get_value() + 3);
										ss.arraySet(layer.tiles, x - layer.area.location.x, y - layer.area.location.y, ss.getDefaultValue($SuperBernieWorld_Maps_TileID));
										if (!playedSound) {
											playedSound = true;
											if (ss.isValue(this.$coinSound)) {
												this.$coinSound.stop();
											}
											this.$coinSound = $SuperBernieWorld_Audio.playSound(38, 1, 1);
										}
									}
								}
							}
						}
					}
				}
			}
		},
		$renderUI: function(batch) {
			var font = $SuperBernieWorld_Core.get_mainFont();
			var timerColor = ((this.$timer.ticks / 10000000 < 11) ? Franca.Color.op_Multiply$1(Franca.Color.white, Franca.Calc.clamp$3(Franca.Calc.wave($SuperBernieWorld_Time.get_real().ticks / 10000000 * 7.5 * Math.PI) * 1.5, 0, 1)) : Franca.Color.white);
			font.drawInto(System.JsIntegerExtensions.toString$1(Math.floor(this.$timer.ticks / 10000000), 'D3', ss.CultureInfo.invariantCulture), new Franca.Rectangle.$ctor3(212, 16, 25, 10), timerColor, 2, 0, 1, false, 0, -1, false, true, null);
			font.drawInto(System.JsIntegerExtensions.toString$1(Math.floor($SuperBernieWorld_Score.get_votes()), 'D2', ss.CultureInfo.invariantCulture), new Franca.Rectangle.$ctor3(219, 5, 18, 10), Franca.Color.white, 2, 0, 1, false, 0, -1, false, true, null);
			font.drawInto(System.JsIntegerExtensions.toString$1(Math.floor($SuperBernieWorld_Score.get_value()), 'D7', ss.CultureInfo.invariantCulture), new Franca.Rectangle.$ctor3(95, 2, 80, 28), Franca.Color.white, 1, 1, 1, false, 0, -1, false, true, null);
			font.drawInto(ss.formatString('{0}-{1}', System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.$world), System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.$level)), new Franca.Rectangle.$ctor3(49, 5, 25, 10), Franca.Color.white, 0, 0, 1, false, 0, -1, false, true, null);
			font.drawInto(this.$shortName, new Franca.Rectangle.$ctor3(13, 16, 62, 10), Franca.Color.white, 1, 0, 1, false, 0, -1, false, true, null);
		},
		render: function(batch) {
			var font = $SuperBernieWorld_Core.get_mainFont();
			this.$renderer.render(batch, this.$player, this.$particles, false, ss.mkdel(this, this.$renderUI), this.get_busPickedUp());
			if (ss.isValue(this.get_busX())) {
				batch.begin(0, 3, 12, null);
				var bus = $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 73);
				var tex = bus.getStanding($SuperBernieWorld_Time.get_game().ticks / 10000000 * 8);
				batch.draw$1(tex, new Franca.Vector2.$ctor3(ss.unbox(this.get_busX()) - tex.source.size.width / 2, 208 - tex.source.size.height), Franca.HdrColors.op_Implicit(Franca.Color.white), 0, 0);
				batch.end();
			}
			if (this.$mapIndex === 0) {
				var scroll = this.$renderer.clampScroll(this.$renderer.get_scroll(), this.$map.width);
				var fullscreen = (this.parent.get_disableAltEnter() ? '' : ('Fullscreen ' + System.CharExtensions.toStringInvariant($SuperBernieWorld_Core.chrFullscreen)));
				var altMovement = (($SuperBernieWorld_Core.get_controllerType() === 0) ? (' / ' + System.CharExtensions.toStringInvariant($SuperBernieWorld_Core.chrLeft2) + System.CharExtensions.toStringInvariant($SuperBernieWorld_Core.chrRight2)) : '');
				var altCrouch = (($SuperBernieWorld_Core.get_controllerType() === 0) ? (' / ' + System.CharExtensions.toStringInvariant($SuperBernieWorld_Core.chrDown2)) : '');
				font.draw$2(ss.formatString($SuperBernieWorld_Game.$tutorialText, System.CharExtensions.toStringInvariant($SuperBernieWorld_Core.chrLeft), System.CharExtensions.toStringInvariant($SuperBernieWorld_Core.chrRight), System.CharExtensions.toStringInvariant($SuperBernieWorld_Core.chrMainBtn) + (($SuperBernieWorld_Core.get_controllerType() === 0) ? '' : ('' + System.CharExtensions.toStringInvariant($SuperBernieWorld_Core.chrMainBtn2))), System.CharExtensions.toStringInvariant($SuperBernieWorld_Core.chrAltBtn) + (($SuperBernieWorld_Core.get_controllerType() === 0) ? '' : ('' + System.CharExtensions.toStringInvariant($SuperBernieWorld_Core.chrAltBtn2))), System.CharExtensions.toStringInvariant($SuperBernieWorld_Core.chrDown), altMovement, fullscreen, altCrouch), 48 - scroll, 80, Franca.Color.white, 1, false, 0, -1, true, null);
			}
			if (ss.isValue(this.get_cheetoDialogue())) {
				font.drawInto(this.get_cheetoDialogue(), Franca.Rectangle.fromLTRB(40, 64, 216, $SuperBernieWorld_Core.screenHeight), Franca.Color.white, 1, 0, 1, false, 0, this.get_cheetoDialogueLen(), true, true, null);
			}
			if (this.get_showEndText()) {
				font.drawAligned(this.$name + ' complete!', new Franca.Vector2.$ctor3(128, 88), Franca.Color.white, 1, 0, 1, false, 0, -1, true, null);
			}
			if (this.get_showDefeatText()) {
				font.drawAligned('You have defeated ' + this.$gopName + '!', new Franca.Vector2.$ctor3(128, 104), Franca.Color.white, 1, 0, 1, false, 0, -1, true, null);
			}
			if (this.get_showEndVotes()) {
				font.drawAligned('Votes', new Franca.Vector2.$ctor3(80, 104 + (this.get_showDefeatText() ? 16 : 0)), Franca.Color.white, 0, 0, 1, false, 0, -1, true, null);
				font.drawAligned(System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, this.get_levelEndVotes()), new Franca.Vector2.$ctor3(176, 104 + (this.get_showDefeatText() ? 16 : 0)), Franca.Color.white, 2, 0, 1, false, 0, -1, true, null);
			}
			if (this.get_showEndScore()) {
				font.drawAligned('Score', new Franca.Vector2.$ctor3(80, 120 + (this.get_showDefeatText() ? 16 : 0)), Franca.Color.white, 0, 0, 1, false, 0, -1, true, null);
				font.drawAligned(System.ObjectExtensions.toStringInvariant$1(ss.Int32).call(null, $SuperBernieWorld_Score.get_value()), new Franca.Vector2.$ctor3(176, 120 + (this.get_showDefeatText() ? 16 : 0)), Franca.Color.white, 2, 0, 1, false, 0, -1, true, null);
			}
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.render(batch);
			}
		},
		get_playerControl: function() {
			return ss.isNullOrUndefined(this.$levelEndRoutine);
		},
		get_doTransition: function() {
			return this.get_playerControl();
		},
		get_alpha: function() {
			return this.$alpha;
		},
		get_showEndText: function() {
			return this.$2$ShowEndTextField;
		},
		set_showEndText: function(value) {
			this.$2$ShowEndTextField = value;
		},
		get_showDefeatText: function() {
			return this.$2$ShowDefeatTextField;
		},
		set_showDefeatText: function(value) {
			this.$2$ShowDefeatTextField = value;
		},
		get_showEndVotes: function() {
			return this.$2$ShowEndVotesField;
		},
		set_showEndVotes: function(value) {
			this.$2$ShowEndVotesField = value;
		},
		get_levelEndVotes: function() {
			return this.$2$LevelEndVotesField;
		},
		set_levelEndVotes: function(value) {
			this.$2$LevelEndVotesField = value;
		},
		get_showEndScore: function() {
			return this.$2$ShowEndScoreField;
		},
		set_showEndScore: function(value) {
			this.$2$ShowEndScoreField = value;
		},
		get_cheetoDialogue: function() {
			return this.$2$CheetoDialogueField;
		},
		set_cheetoDialogue: function(value) {
			this.$2$CheetoDialogueField = value;
		},
		get_cheetoDialogueLen: function() {
			return this.$2$CheetoDialogueLenField;
		},
		set_cheetoDialogueLen: function(value) {
			this.$2$CheetoDialogueLenField = value;
		},
		$died: function(fellOffMap) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(fellOffMap) {
					var $result, $state = 0, startTime, startTime1, duration, baseY, alpha, tween;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									$SuperBernieWorld_Audio.get_music().stopAllInstances();
									if (!fellOffMap) {
										$SuperBernieWorld_Audio.playMusic(47, false);
										// pause
										startTime = $SuperBernieWorld_Time.get_real();
										$state = 1;
										continue $sm1;
									}
									else {
										$SuperBernieWorld_Audio.playMusic(47, false);
										// pause
										startTime1 = $SuperBernieWorld_Time.get_real();
										duration = new ss.TimeSpan(4.4 * 10000000);
										$state = 2;
										continue $sm1;
									}
								}
								case 1: {
									$state = -1;
									if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime.ticks)).ticks < (new ss.TimeSpan(1 * 10000000)).ticks)) {
										$state = 3;
										continue $sm1;
									}
									$result = 1;
									$state = 1;
									return true;
								}
								case 2: {
									$state = -1;
									if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime1.ticks)).ticks < duration.ticks)) {
										$state = -1;
										break $sm1;
									}
									$result = 1 - Franca.Calc.clamp$3((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - startTime1.ticks)).ticks / 10000000 - (duration.ticks / 10000000 - 1), 0, 1);
									$state = 2;
									return true;
								}
								case 3: {
									$state = -1;
									// fly offscreen
									baseY = this.$player.get_y();
									alpha = 1;
									tween = Franca.Tweening.Tween.sequence([Franca.Tweening.Tween.double$1(null).from(0).to(1).onTick(ss.mkdel(this, function(v) {
										this.$player.set_y(baseY - Math.sin(v * Math.PI) * 3);
									})).duration$1(0.5), Franca.Tweening.Tween.parallel([Franca.Tweening.Tween.double$1(null).from(0).to(1).onTick(ss.mkdel(this, function(v1) {
										this.$player.set_y(baseY + v1 * 20);
									})).duration$1(0.8), Franca.Tweening.Tween.double$1(null).from(0).to(1).onTick(function(v2) {
										alpha = 1 - Math.max(0, v2 - 0.75) * 4;
									}).duration$1(2.9)])]).start$1();
									$state = 4;
									continue $sm1;
								}
								case 4: {
									$state = -1;
									if (!(tween.get_state() !== 0)) {
										$state = -1;
										break $sm1;
									}
									$result = alpha;
									$state = 4;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, fellOffMap);
			}, this);
		},
		get_frameRuleTime: function() {
			return new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - this.$startedTime.ticks);
		},
		get_busX: function() {
			return this.$2$BusXField;
		},
		set_busX: function(value) {
			this.$2$BusXField = value;
		},
		get_busPickedUp: function() {
			return this.$2$BusPickedUpField;
		},
		set_busPickedUp: function(value) {
			this.$2$BusPickedUpField = value;
		}
	}, $SuperBernieWorld_Mode);
	ss.initClass($SuperBernieWorld_GameRenderer, $asm, {
		clampScroll: function(scroll, mapWidth) {
			return Franca.Calc.clamp$5(scroll, 0, (mapWidth - $SuperBernieWorld_Core.drawTilesX + 2) * $SuperBernieWorld_Core.tileSize);
		},
		getClampWidth: function(map) {
			var clampWidth = map.width;
			if (ss.isValue(map.lever) && !map.lever.get_activated()) {
				clampWidth = Math.ceil(map.lever.get_x() + map.lever.get_sprite().get_sizeX() / 2) + 1;
			}
			return clampWidth;
		},
		getUnclampedScroll: function(player) {
			var scroll = this.clampScroll(this.get_scroll(), this.$map.width);
			var relX = player.get_x() - scroll / 16;
			return Math.floor((player.get_x() - Franca.Calc.clamp$3(relX, 6, 8)) * 16);
		},
		$calcScroll: function(player) {
			var scroll = this.clampScroll(this.get_scroll(), this.getClampWidth(this.$map));
			var relX = player.get_x() - scroll / 16;
			this.set_scroll(Math.floor((player.get_x() - Franca.Calc.clamp$3(relX, 6, 8)) * 16));
		},
		getScreenTiles: function(startX, endX, padding) {
			this.getScreenTiles$1(this.get_scroll(), true, this.getClampWidth(this.$map), startX, endX, padding);
		},
		getScreenTiles$1: function(scroll, clamp, mapWidth, startX, endX, padding) {
			if (clamp) {
				scroll = this.clampScroll(scroll, mapWidth);
			}
			startX.$ = Math.floor(scroll / 16) - 1 - padding;
			endX.$ = startX.$ + $SuperBernieWorld_Core.drawTilesX + 2 + padding;
		},
		$renderBg: function(batch, titleMode) {
			for (var $t1 = 0; $t1 < this.$background.layers.length; $t1++) {
				var layer = this.$background.layers[$t1];
				var scroll;
				var divisor = layer.scrollSpeed;
				if (divisor === -1) {
					scroll = 0;
				}
				else {
					if (divisor <= 0) {
						divisor = 1;
					}
					scroll = (titleMode ? Math.floor(this.get_scroll() / divisor) : Math.floor(this.clampScroll(this.get_scroll(), this.getClampWidth(this.$map)) / divisor));
				}
				var startX = {}, endX = {};
				this.getScreenTiles$1(scroll, false, this.$background.width, startX, endX, 0);
				var tileScroll = scroll & 15;
				this.$drawLayers$1(this.$background.tilesets, batch, Enumerable.repeat(layer, 1), startX.$, endX.$, this.$background.width, this.$background.height, tileScroll, true);
			}
		},
		$drawLayers: function(tilesets, batch, layers, startX, endX, tileScroll, wrap) {
			this.$drawLayers$1(tilesets, batch, layers, startX, endX, this.$map.width, this.$map.height, tileScroll, wrap);
		},
		$drawLayers$1: function(tilesets, batch, layers, startX, endX, mapWidth, mapHeight, tileScroll, wrap) {
			var coinSprite = $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 56);
			batch.begin(0, 3, 12, null);
			var $t1 = ss.getEnumerator(layers);
			try {
				while ($t1.moveNext()) {
					var layer = $t1.current();
					for (var y = 0; y < mapHeight; y++) {
						for (var x = startX; x < endX; x++) {
							var tileX;
							if (!wrap) {
								if (x < layer.area.location.x || x >= layer.area.location.x + layer.area.size.width) {
									continue;
								}
								else {
									tileX = x - layer.area.location.x;
								}
							}
							else {
								tileX = Franca.Calc.wrap$2(x, mapWidth) - layer.area.location.x;
							}
							if (tileX < 0 || tileX >= layer.area.size.width) {
								continue;
							}
							var tile = ss.arrayGet(layer.tiles, tileX, y);
							if ($SuperBernieWorld_Maps_TileID.op_Equality(tile, ss.getDefaultValue($SuperBernieWorld_Maps_TileID))) {
								continue;
							}
							var drawX = x - startX - 1;
							if ($SuperBernieWorld_Maps_TileID.op_Equality(tile, $SuperBernieWorld_Core.get_coinTile())) {
								batch.draw$1(coinSprite.getStanding($SuperBernieWorld_Time.get_game().ticks / 10000000 * 8), (new Franca.Vector2.$ctor3(drawX * $SuperBernieWorld_Core.tileSize - tileScroll, y * $SuperBernieWorld_Core.tileSize)).floor(), Franca.HdrColors.op_Implicit(Franca.Color.white), 0, 0);
							}
							else {
								var ts = tilesets[tile.tileset].tileset;
								var t = ts.get_item(tile.tile);
								if (ss.isValue(t)) {
									batch.drawSrc$1(ts.get_texture(), Franca.Rectangle.op_Implicit(t.get_source()), (new Franca.Vector2.$ctor3(drawX * $SuperBernieWorld_Core.tileSize - tileScroll, y * $SuperBernieWorld_Core.tileSize)).floor(), Franca.HdrColors.op_Implicit(Franca.Color.white), 0, 0);
								}
								//batch.Draw(tile.Texture, new Vector2(drawX * Core.TileSize - tileScroll, y * Core.TileSize).Floor(), Color.White);
							}
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
			batch.end();
		},
		render: function(batch, player, particles, titleMode, renderUi, hidePlayer) {
			if (ss.isNullOrUndefined(this.$map)) {
				return;
			}
			if (!titleMode && !this.get_scrollOverride()) {
				this.$calcScroll(player);
			}
			batch.get_graphicsDevice().clear$2(Franca.Color.black);
			this.$renderBg(batch, titleMode);
			var startX = {}, endX = {};
			var scroll = ((titleMode || this.get_scrollOverride()) ? this.get_scroll() : this.clampScroll(this.get_scroll(), this.getClampWidth(this.$map)));
			if (titleMode) {
				this.getScreenTiles$1(scroll, false, this.$map.width, startX, endX, 0);
			}
			else {
				this.getScreenTiles(startX, endX, 0);
			}
			var tileScroll = scroll & 15;
			var backgroundLayers = Enumerable.from(this.$map.layers).where(function(l) {
				return !l.blocks;
			});
			var blockLayers = Enumerable.from(this.$map.layers).where(function(l1) {
				return l1.blocks;
			});
			var foregroundLayers = Enumerable.from(this.$map.layers).where(function(l2) {
				return l2.foreground;
			});
			this.$drawLayers(this.$map.tilesets, batch, backgroundLayers, startX.$, endX.$, tileScroll, titleMode);
			if (!titleMode) {
				batch.begin(0, 3, 12, null);
				batch.draw$3($SuperBernieWorld_Assets.get(Franca.Texture).call(null, 26), Franca.Vector2.zero, Franca.HdrColors.op_Implicit(Franca.Color.white), 0, 0);
				batch.end();
				if (!ss.staticEquals(renderUi, null)) {
					renderUi(batch);
				}
				batch.begin(0, 3, 12, null);
				for (var $t1 = 0; $t1 < this.$map.entities.length; $t1++) {
					var ent = this.$map.entities[$t1];
					if (!ent.get_drawUnder()) {
						continue;
					}
					var drawX = ent.get_x() - startX.$ - 1;
					ent.render(batch, (new Franca.Vector2.$ctor3(drawX * 16 - tileScroll, ent.get_y() * 16)).floor());
				}
				batch.end();
			}
			this.$drawLayers(this.$map.tilesets, batch, blockLayers, startX.$, endX.$, tileScroll, titleMode);
			if (!titleMode) {
				batch.begin(0, 3, 12, null);
				for (var $t2 = 0; $t2 < this.$map.entities.length; $t2++) {
					var ent1 = this.$map.entities[$t2];
					if (ss.referenceEquals(ent1, player)) {
						continue;
						// draw player last
					}
					else if (ent1.get_drawUnder()) {
						continue;
					}
					var drawX1 = ent1.get_x() - startX.$ - 1;
					ent1.render(batch, (new Franca.Vector2.$ctor3(drawX1 * 16 - tileScroll, ent1.get_y() * 16)).floor());
				}
				// render flag
				if (ss.isValue(this.$map.flagSprite)) {
					var drawX2 = Math.floor(this.$map.flagX) - startX.$ - 1;
					var tex = this.$map.flagSprite.getStanding(0);
					batch.draw$1(tex, (new Franca.Vector2.$ctor3(drawX2 * $SuperBernieWorld_Core.tileSize - tileScroll - tex.source.size.width / 2, this.$map.flagY * 16 - tex.source.size.height)).floor(), Franca.HdrColors.op_Implicit(Franca.Color.white), 0, 0);
				}
				batch.end();
				// render player
				if (!hidePlayer) {
					var palEffect = $SuperBernieWorld_Assets.get(Franca.Effect).call(null, 65);
					var palTex = $SuperBernieWorld_Assets.get(Franca.Texture).call(null, 66);
					batch.begin(0, 3, 12, palEffect);
					batch.set_currentProgram('default');
					palEffect.get_item('colCount').setValue$8(palTex.get_width());
					palEffect.get_item('palCount').setValue$2(new Franca.Vector2.$ctor3(1, palTex.get_height()));
					palEffect.setSampler(1, palTex, 'palSampler', 3, 3);
					{
						var ent2 = player;
						var drawX3 = ent2.get_x() - startX.$ - 1;
						ent2.render(batch, (new Franca.Vector2.$ctor3(drawX3 * 16 - tileScroll, ent2.get_y() * 16)).floor());
					}
					batch.end();
				}
			}
			if (ss.isValue(particles)) {
				batch.begin(0, 3, 12, null);
				for (var i = particles.length - 1; i >= 0; i--) {
					var p = particles[i];
					p.render(batch, new Franca.Vector2.$ctor3((p.position.x - startX.$ - 1) * 16 - tileScroll, p.position.y * 16));
					if (p.dead) {
						ss.removeAt(particles, i);
					}
				}
				batch.end();
			}
			this.$drawLayers(this.$map.tilesets, batch, foregroundLayers, startX.$, endX.$, tileScroll, titleMode);
		},
		get_map: function() {
			return this.$map;
		},
		set_map: function(value) {
			this.$map = value;
		},
		get_background: function() {
			return this.$background;
		},
		set_background: function(value) {
			this.$background = value;
		},
		get_scroll: function() {
			return this.$1$ScrollField;
		},
		set_scroll: function(value) {
			this.$1$ScrollField = value;
		},
		get_scrollOverride: function() {
			return this.$1$ScrollOverrideField;
		},
		set_scrollOverride: function(value) {
			this.$1$ScrollOverrideField = value;
		}
	});
	ss.initEnum($SuperBernieWorld_InputDirection, $asm, { none: 0, left: 1, up: 2, right: 3, down: 4 });
	ss.initClass($SuperBernieWorld_InputEventExtensions, $asm, {});
	ss.initClass($SuperBernieWorld_LeverEndScene, $asm, {});
	ss.initClass($SuperBernieWorld_Menu, $asm, {
		add: function(opt) {
			this.options.push(opt);
			if (opt.selectable) {
				this.selectableCount++;
			}
		},
		move: function(dir) {
			var index = 0;
			for (var $t1 = 0; $t1 < this.options.length; $t1++) {
				var opt = this.options[$t1];
				if (opt.selectable) {
					if (index === this.selected && (dir === 1 && !ss.staticEquals(opt.onLeft, null) || dir === 3 && !ss.staticEquals(opt.onRight, null))) {
						if (dir === 1 && !ss.staticEquals(opt.onLeft, null)) {
							opt.onLeft();
						}
						else if (dir === 3 && !ss.staticEquals(opt.onRight, null)) {
							opt.onRight();
						}
						return;
					}
					index++;
				}
			}
			var last = this.selected;
			var inc = ((dir === 1 || dir === 2) ? -1 : 1);
			this.selected = Franca.Calc.mod$3(this.selected + inc, this.selectableCount);
			if (this.selected !== last) {
				$SuperBernieWorld_Audio.playSound(37, 1, 1);
			}
		},
		accept: function() {
			var index = 0;
			for (var $t1 = 0; $t1 < this.options.length; $t1++) {
				var opt = this.options[$t1];
				if (opt.selectable) {
					if (index === this.selected && !ss.staticEquals(opt.onAccept, null)) {
						if (opt.playSound) {
							$SuperBernieWorld_Audio.playSound(opt.acceptSound, 1, opt.acceptSoundPitch);
						}
						opt.onAccept();
						return;
					}
					index++;
				}
			}
		},
		openUrl: function(device) {
			var index = 0;
			for (var $t1 = 0; $t1 < this.options.length; $t1++) {
				var opt = this.options[$t1];
				if (opt.selectable) {
					if (index === this.selected && !ss.staticEquals(opt.onUrl, null)) {
						if (opt.playSound) {
							$SuperBernieWorld_Audio.playSound(opt.acceptSound, 1, opt.acceptSoundPitch);
						}
						opt.onUrl(device);
						return;
					}
					index++;
				}
			}
		}
	});
	ss.initClass($SuperBernieWorld_MenuOption, $asm, {});
	$SuperBernieWorld_MenuOption.$ctor1.prototype = $SuperBernieWorld_MenuOption.prototype;
	ss.initClass($SuperBernieWorld_MenuStack, $asm, {
		move: function(dir) {
			if (this.$menus.length === 0) {
				return;
			}
			var current = ss.arrayPeekBack(this.$menus);
			current.move(dir);
		},
		open: function(menu) {
			this.$menus.push(menu);
		},
		cancel: function() {
			if (this.$menus.length === 0) {
				return;
			}
			if (ss.isValue(this.get_current()) && this.get_current().canClose) {
				$SuperBernieWorld_Menu.playCancelSound();
				this.$menus.pop();
			}
		},
		accept: function() {
			if (this.$menus.length === 0) {
				return;
			}
			var current = ss.arrayPeekBack(this.$menus);
			current.accept();
		},
		openUrl: function(device) {
			if (this.$menus.length === 0) {
				return;
			}
			var current = ss.arrayPeekBack(this.$menus);
			current.openUrl(device);
		},
		render: function(batch) {
			if (this.$menus.length === 0) {
				return;
			}
			var current = ss.arrayPeekBack(this.$menus);
			var font = $SuperBernieWorld_Core.get_mainFont();
			var cursorIndex = 0;
			for (var i = 0; i < current.options.length; i++) {
				var opt = current.options[i];
				font.drawAligned(opt.text, Franca.Vector2.op_Explicit(opt.location), Franca.Color.white, opt.align, 0, 1, false, 0, -1, true, null);
				if (opt.selectable && current.selectableCount > 0) {
					if (cursorIndex === Franca.Calc.mod$3(current.selected, current.selectableCount)) {
						var formatting = new Franca.Gui.Formatting(1, false, false, false, true, null);
						var size = font.measure(opt.text, formatting, 1, false);
						var cursor = $SuperBernieWorld_Assets.get(Franca.Texture).call(null, 29);
						var textPos = opt.location;
						switch (opt.align) {
							default: {
								break;
							}
							case 2: {
								textPos = new Franca.Point.$ctor2(Math.floor(textPos.x - size.width), textPos.y);
								break;
							}
							case 1: {
								textPos = new Franca.Point.$ctor2(Math.floor(textPos.x - size.width / 2), textPos.y);
								break;
							}
						}
						batch.begin(0, 3, 12, null);
						batch.draw$3(cursor, (new Franca.Vector2.$ctor3(textPos.x - 2 - cursor.get_width() - Franca.Calc.wave$1($SuperBernieWorld_Time.get_real(), 7) * 3, textPos.y + size.get_height() / 2 - ss.Int32.div(cursor.get_height(), 2) - 1)).floor(), Franca.HdrColors.op_Implicit(Franca.Color.white), 0, 0);
						batch.end();
					}
					cursorIndex++;
				}
			}
		},
		get_current: function() {
			return ((this.$menus.length > 0) ? ss.arrayPeekBack(this.$menus) : null);
		}
	});
	ss.initClass($SuperBernieWorld_MenuStackExtensions, $asm, {});
	ss.initClass($SuperBernieWorld_PreLevel, $asm, {
		start: function() {
			console.log("Starting 'PreLevel' mode");
			console.log(ss.formatString('World {0}, level {1}', this.$world, this.$level));
		},
		altButton: function(held) {
		},
		mainButton: function(held) {
		},
		move: function(dir) {
		},
		accept: function(primaryButton) {
			this.$finish();
		},
		openUrl: function(device) {
		},
		cancel: function(primaryButton) {
			this.$finish();
		},
		navigate: function(dir) {
			this.$finish();
		},
		$finish: function() {
			if (!this.$finished) {
				this.parent.changeMode(this.$nextMode);
				this.$finished = true;
			}
		},
		update: function() {
			if (this.$startTime.ticks === (new ss.TimeSpan(0)).ticks) {
				this.$startTime = $SuperBernieWorld_Time.get_real();
			}
			if ((new ss.TimeSpan($SuperBernieWorld_Time.get_real().ticks - this.$startTime.ticks)).ticks >= (new ss.TimeSpan(2.5 * 10000000)).ticks) {
				this.$finish();
			}
		},
		render: function(batch) {
			this.parent.get_graphicsDevice().clear();
			var font = $SuperBernieWorld_Core.get_mainFont();
			var text = ss.formatString('World {0}-{1}: {2}\r\nStart!', this.$world, this.$level, this.$name);
			font.drawInto(text, new Franca.Rectangle.$ctor3(0, 0, $SuperBernieWorld_Core.screenWidth, $SuperBernieWorld_Core.screenHeight), Franca.Color.white, 1, 1, 1, false, 0, -1, true, true, null);
		},
		get_doTransition: function() {
			return false;
		}
	}, $SuperBernieWorld_Mode);
	ss.initClass($SuperBernieWorld_RenderTweenManager, $asm, {
		dequeueTweens: function() {
			while (this.$queuedTweens.length > 0) {
				var tween = this.$queuedTweens.shift();
				tween.start();
			}
		},
		queue: function(tween) {
			this.$queuedTweens.push(tween);
		}
	}, Franca.Tweening.TweenManager, [Franca.Tweening.ITweenManager]);
	ss.initClass($SuperBernieWorld_Score, $asm, {});
	ss.initClass($SuperBernieWorld_SpeedrunHelper, $asm, {});
	ss.initClass($SuperBernieWorld_SpeedrunHelper$GameState, $asm, {});
	ss.initClass($SuperBernieWorld_Time, $asm, {});
	ss.initClass($SuperBernieWorld_Titlescreen, $asm, {
		start: function() {
			console.log("Starting 'TitleScreen' mode");
			$SuperBernieWorld_SpeedrunHelper.get_state().currentLevel = -1;
			$SuperBernieWorld_SpeedrunHelper.get_state().gameStarted = 0;
		},
		stop: function() {
			if (ss.isValue(this.$styleTween)) {
				this.$styleTween.cancel();
			}
		},
		$startTweening: function() {
			this.$styleTween = Franca.Tweening.Tween.sequence([Franca.Tweening.Tween.pause(3.5, null), Franca.Tweening.Tween.double$1(null).from(0).to(1).duration$1(2).onTick(ss.mkdel(this, function(v) {
				this.$styleAlpha = v;
			})).onFinish$1(ss.mkdel(this, function() {
				this.$styleIndex = this.$styleIndex + 1;
				this.$styleAlpha = 0;
			}))]);
			this.$styleTween.loop(true);
			this.$styleTween.start$1();
		},
		$addTilesetSwappedMap: function(index) {
			var swapped = this.$map.makeInstance();
			for (var i = 0; i < swapped.tilesets.length; i++) {
				if (ss.referenceEquals(swapped.tilesets[i].tileset, $SuperBernieWorld_Assets.get($SuperBernieWorld_Maps_Tileset).call(null, 57))) {
					swapped.tilesets[i] = new $SuperBernieWorld_Maps_TilesetInfo.$ctor1(swapped.tilesets[i].firstGlobalID, $SuperBernieWorld_Assets.get($SuperBernieWorld_Maps_Tileset).call(null, 57 + index));
				}
			}
			var $t2 = this.$renderers;
			var $t1 = new $SuperBernieWorld_GameRenderer();
			$t1.set_map(swapped);
			$t1.set_background($SuperBernieWorld_Assets.get($SuperBernieWorld_Maps_Map).call(null, 18 + index));
			$t2[index] = $t1;
		},
		$increaseSfxVolume: function() {
			$SuperBernieWorld_Audio.set_sfxVolume(Math.round(Franca.Calc.clamp$3($SuperBernieWorld_Audio.get_sfxVolume() + 0.1, 0, 1) * 100) / 100);
			this.$sfxVolume.text = ss.formatString('Sfx Volume: {0}%', Math.round($SuperBernieWorld_Audio.get_sfxVolume() * 100));
			try {
				$SuperBernieWorld_Core.saveVolume();
			}
			catch ($t1) {
			}
		},
		$decreaseSfxVolume: function() {
			$SuperBernieWorld_Audio.set_sfxVolume(Math.round(Franca.Calc.clamp$3($SuperBernieWorld_Audio.get_sfxVolume() - 0.1, 0, 1) * 100) / 100);
			this.$sfxVolume.text = ss.formatString('Sfx Volume: {0}%', Math.round($SuperBernieWorld_Audio.get_sfxVolume() * 100));
			try {
				$SuperBernieWorld_Core.saveVolume();
			}
			catch ($t1) {
			}
		},
		$increaseMusicVolume: function() {
			$SuperBernieWorld_Audio.set_musicVolume(Math.round(Franca.Calc.clamp$3($SuperBernieWorld_Audio.get_musicVolume() + 0.1, 0, 1) * 100) / 100);
			this.$musVolume.text = ss.formatString('Music Volume: {0}%', Math.round($SuperBernieWorld_Audio.get_musicVolume() * 100));
			try {
				$SuperBernieWorld_Core.saveVolume();
			}
			catch ($t1) {
			}
		},
		$decreaseMusicVolume: function() {
			$SuperBernieWorld_Audio.set_musicVolume(Math.round(Franca.Calc.clamp$3($SuperBernieWorld_Audio.get_musicVolume() - 0.1, 0, 1) * 100) / 100);
			this.$musVolume.text = ss.formatString('Music Volume: {0}%', Math.round($SuperBernieWorld_Audio.get_musicVolume() * 100));
			try {
				$SuperBernieWorld_Core.saveVolume();
			}
			catch ($t1) {
			}
		},
		altButton: function(held) {
		},
		mainButton: function(held) {
		},
		move: function(dir) {
		},
		navigate: function(dir) {
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.move(dir);
			}
		},
		accept: function(primaryButton) {
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.accept();
			}
		},
		openUrl: function(device) {
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.openUrl(device);
			}
		},
		cancel: function(primaryButton) {
			if ($SuperBernieWorld_MenuStackExtensions.inMenu(this.$menu)) {
				this.$menu.cancel();
			}
		},
		update: function() {
			if (ss.isNullOrUndefined(this.$styleTween)) {
				this.$startTweening();
			}
			this.$scroll += $SuperBernieWorld_Time.get_realElapsed().ticks / 10000000 * 60;
			for (var i = 0; i < this.$renderers.length; i++) {
				this.$renderers[i].set_scroll(Math.floor(this.$scroll));
			}
			if (!this.$playingMusic) {
				this.$playingMusic = true;
				$SuperBernieWorld_Audio.playMusic(49, true);
			}
		},
		render: function(batch) {
			{
				var $t1 = batch.get_graphicsDevice().setRenderTarget$1($SuperBernieWorld_Core.switchRenderTargets(null), true);
				try {
					this.$renderers[Franca.Calc.mod$3(this.$styleIndex + 1, this.$renderers.length)].render(batch, null, null, true, null, false);
				}
				finally {
					$t1.dispose();
				}
			}
			$SuperBernieWorld_Core.switchRenderTargets(null);
			this.$renderers[Franca.Calc.mod$3(this.$styleIndex, this.$renderers.length)].render(batch, null, null, true, null, false);
			batch.begin(0, 3, 12, null);
			batch.draw$3($SuperBernieWorld_Core.get_lastTarget(), Franca.Vector2.zero, Franca.HdrColors.op_Implicit(Franca.Color.op_Multiply$1(Franca.Color.white, this.$styleAlpha)), 0, 0);
			var logo = $SuperBernieWorld_Assets.get(Franca.Texture).call(null, 5);
			batch.draw$3(logo, (new Franca.Vector2.$ctor3(ss.Int32.div($SuperBernieWorld_Core.screenWidth - logo.get_width(), 2), 30)).floor(), Franca.HdrColors.op_Implicit(Franca.Color.white), 0, 0);
			batch.end();
			this.$menu.render(batch);
		}
	}, $SuperBernieWorld_Mode);
	ss.initClass($SuperBernieWorld_Entities_BaseAI, $asm, {
		tick: function() {
			if (this.$co.get_status() !== 3) {
				this.$co.resume(null);
			}
		},
		routine: null,
		onLand: function() {
		},
		onCollideH: function() {
		},
		onActivate: function() {
		},
		get_done: function() {
			return (ss.isValue(this.$co) ? (this.$co.get_status() === 3) : true);
		}
	});
	ss.initClass($SuperBernieWorld_Entities_AIBullet, $asm, {
		routine: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, accumulator, frameTime;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									accumulator = new ss.TimeSpan(0);
									frameTime = new ss.TimeSpan(0.0166666666666667 * 10000000);
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!true) {
										$state = -1;
										break $sm1;
									}
									accumulator = new ss.TimeSpan(accumulator.ticks + $SuperBernieWorld_Time.get_gameElapsed().ticks);
									while (accumulator.ticks >= System.TimeSpanExtensions.divide(frameTime, 4).ticks) {
										accumulator = new ss.TimeSpan(accumulator.ticks - System.TimeSpanExtensions.divide(frameTime, 4).ticks);
										if (this.parent.get_mirror()) {
											this.parent.set_x(this.parent.get_x() - 0.01875 * this.parent.get_speedScalar());
										}
										else {
											this.parent.set_x(this.parent.get_x() + 0.01875 * this.parent.get_speedScalar());
										}
									}
									$result = 1;
									$state = 1;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		}
	}, $SuperBernieWorld_Entities_BaseAI);
	ss.initClass($SuperBernieWorld_Entities_AIFist, $asm, {
		routine: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, $t1, i;
					var $finally = function() {
						$t1.dispose();
					};
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									$t1 = ss.getEnumerator($SuperBernieWorld_Entities_PowerUp.popOutOfBlock(this.parent));
									$state = 3;
									continue $sm1;
								}
								case 3: {
									$state = 1;
									if (!$t1.moveNext()) {
										$state = 2;
										continue $sm1;
									}
									i = $t1.current();
									$result = i;
									$state = 3;
									return true;
								}
								case 2: {
									$state = -1;
									$finally.call(this);
									$state = -1;
									break $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, function() {
						try {
							switch ($state) {
								case 1:
								case 2:
								case 3: {
									try {
										break;
									}
									finally {
										$finally.call(this);
									}
								}
							}
						}
						finally {
							$state = -1;
						}
					}, this);
				}).call(this);
			}, this);
		}
	}, $SuperBernieWorld_Entities_BaseAI);
	ss.initClass($SuperBernieWorld_Entities_AIFlyer, $asm, {
		routine: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									if (!true) {
										$state = -1;
										break $sm1;
									}
									this.parent.set_y(this.$initialY - (1 - (Math.cos((new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - this.$initialTime.ticks)).ticks / 10000000 * 1.5 * this.get_flightSpeedScalar()) / 2 + 0.5)) * 5);
									$result = 1;
									$state = 0;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		onActivate: function() {
			this.$initialTime = $SuperBernieWorld_Time.get_game();
			this.$initialY = this.parent.get_y();
		},
		get_flightSpeedScalar: function() {
			return this.$2$FlightSpeedScalarField;
		},
		set_flightSpeedScalar: function(value) {
			this.$2$FlightSpeedScalarField = value;
		}
	}, $SuperBernieWorld_Entities_BaseAI);
	ss.initClass($SuperBernieWorld_Entities_AIJump, $asm, {
		routine: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, lastY, spawnedParticle, cos;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									lastY = this.parent.get_y();
									spawnedParticle = false;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!true) {
										$state = -1;
										break $sm1;
									}
									cos = 1 - Franca.Calc.clamp$3(Math.cos((new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - this.$initialTime.ticks)).ticks / 10000000 * 1.5 * this.get_jumpSpeedScalar()), 0, 1);
									this.parent.set_y(this.$initialY - (1 - cos) * 11);
									if (lastY < this.parent.get_y()) {
										if (!this.parent.get_flipped()) {
											this.parent.set_flipped(true);
											spawnedParticle = false;
										}
										if (this.parent.get_y() >= 13 && !spawnedParticle) {
											$SuperBernieWorld_Core.spawnParticle(new $SuperBernieWorld_Entities_Particle($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 70), new Franca.Vector2.$ctor3(this.parent.get_x(), 13.25)));
											spawnedParticle = true;
										}
									}
									else {
										if (this.parent.get_flipped()) {
											this.parent.set_flipped(false);
											spawnedParticle = false;
										}
										if (this.parent.get_y() <= 13 && !spawnedParticle) {
											$SuperBernieWorld_Core.spawnParticle(new $SuperBernieWorld_Entities_Particle($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 70), new Franca.Vector2.$ctor3(this.parent.get_x(), 13.375)));
											spawnedParticle = true;
										}
									}
									lastY = this.parent.get_y();
									$result = 1;
									$state = 1;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		onActivate: function() {
			this.$initialTime = $SuperBernieWorld_Time.get_game();
			this.$initialY = this.parent.get_y();
		},
		get_jumpSpeedScalar: function() {
			return this.$2$JumpSpeedScalarField;
		},
		set_jumpSpeedScalar: function(value) {
			this.$2$JumpSpeedScalarField = value;
		}
	}, $SuperBernieWorld_Entities_BaseAI);
	ss.initClass($SuperBernieWorld_Entities_AIMeander, $asm, {
		routine: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									if (!true) {
										$state = -1;
										break $sm1;
									}
									if (!this.get_walkOffLedges() && this.parent.get_onGround()) {
										// check for lack of floor
										if (!this.$hasFloor()) {
											this.$flip = true;
										}
									}
									if (this.$flip) {
										this.$flip = false;
										this.parent.flip();
										if (!ss.staticEquals(this.get_onFlip(), null)) {
											this.get_onFlip()();
										}
									}
									if (this.parent.get_mirror()) {
										this.parent.move(1);
									}
									else {
										this.parent.move(3);
									}
									$result = 1;
									$state = 0;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		$hasFloor: function() {
			var volume = {};
			var colH = {}, colV = {};
			this.parent.getCollisionInfo(volume, colH, colV);
			volume.$ = volume.$.inflate$2(0, 0, 0, 1);
			var x = (this.parent.get_mirror() ? colH.$.location.x : (colH.$.location.x + colH.$.size.width));
			var y = colV.$.location.y + colV.$.size.height + 0.33;
			var foundFloor = false;
			var $t1 = ss.getEnumerator($SuperBernieWorld_Entities_Physics.getCollisions(volume.$));
			try {
				while ($t1.moveNext()) {
					var rect = $t1.current();
					if (rect.contains$2(x, y)) {
						foundFloor = true;
					}
				}
			}
			finally {
				$t1.dispose();
			}
			return foundFloor;
		},
		onCollideH: function() {
			this.$flip = true;
		},
		get_walkOffLedges: function() {
			return this.$2$WalkOffLedgesField;
		},
		set_walkOffLedges: function(value) {
			this.$2$WalkOffLedgesField = value;
		},
		get_flipOnTouch: function() {
			return this.$2$FlipOnTouchField;
		},
		set_flipOnTouch: function(value) {
			this.$2$FlipOnTouchField = value;
		},
		get_flip: function() {
			return this.$flip;
		},
		set_flip: function(value) {
			this.$flip = value;
		},
		get_onFlip: function() {
			return this.$2$OnFlipField;
		},
		set_onFlip: function(value) {
			this.$2$OnFlipField = value;
		}
	}, $SuperBernieWorld_Entities_BaseAI);
	ss.initClass($SuperBernieWorld_Entities_AIPopup, $asm, {
		$stuck: function() {
			for (var i = 0; i < this.parent.get_map().entities.length; i++) {
				var ent = this.parent.get_map().entities[i];
				var player = ss.safeCast(ent, $SuperBernieWorld_Entities_Bernie);
				if (ss.isValue(player)) {
					var volume = {};
					var colH = {}, colV = {};
					player.getCollisionInfo(volume, colH, colV);
					if (colH.$.location.x + colH.$.size.width >= this.parent.get_x() - 2 && colH.$.location.x <= this.parent.get_x() + 2 && player.get_y() < this.$maxY + 3) {
						return true;
					}
				}
			}
			return false;
		},
		routine: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, elapsed, nextPhase, remainder, i, ent, player;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!true) {
										$state = -1;
										break $sm1;
									}
									elapsed = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - this.$lastPhaseTime.ticks);
									$state = 2;
									continue $sm1;
								}
								case 2: {
									$state = -1;
									if (!(elapsed.ticks < (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseLurkSeconds * 10000000)).ticks)) {
										$state = 3;
										continue $sm1;
									}
									this.parent.set_y(this.$maxY);
									$result = 1;
									$state = 4;
									return true;
								}
								case 4: {
									$state = -1;
									elapsed = new ss.TimeSpan(elapsed.ticks + $SuperBernieWorld_Time.get_gameElapsed().ticks);
									$state = 2;
									continue $sm1;
								}
								case 3: {
									$state = -1;
									if (!this.$stuck()) {
										$state = 5;
										continue $sm1;
									}
									$result = 1;
									$state = 3;
									return true;
								}
								case 5: {
									$state = -1;
									remainder = new ss.TimeSpan(elapsed.ticks - (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseLurkSeconds * 10000000)).ticks);
									this.$lastPhaseTime = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - remainder.ticks);
									nextPhase = new ss.TimeSpan(this.$lastPhaseTime.ticks + (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseLurkSeconds * 10000000)).ticks);
									elapsed = new ss.TimeSpan(elapsed.ticks - nextPhase.ticks);
									//nextPhase = lastPhaseTime + TimeSpan.FromSeconds(phaseLurkSeconds);
									//lastPhaseTime += TimeSpan.FromSeconds(phaseLurkSeconds);
									//elapsed = elapsed - nextPhase;
									for (i = 0; i < this.parent.get_map().entities.length; i++) {
										ent = this.parent.get_map().entities[i];
										player = ss.safeCast(ent, $SuperBernieWorld_Entities_Bernie);
										if (ss.isValue(player)) {
											if (player.get_x() > this.parent.get_x() && this.parent.get_mirror() || player.get_x() <= this.parent.get_x() && !this.parent.get_mirror()) {
												this.parent.flip();
											}
										}
									}
									$state = 6;
									continue $sm1;
								}
								case 6: {
									$state = -1;
									if (!(elapsed.ticks < (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseRiseSeconds * 10000000)).ticks)) {
										$state = 7;
										continue $sm1;
									}
									this.parent.set_y(Franca.Calc.lerp$2(this.$maxY, this.$minY, Franca.Calc.clamp$3(elapsed.ticks / 10000000 / $SuperBernieWorld_Entities_AIPopup.$phaseRiseSeconds, 0, 1)));
									$result = 1;
									$state = 8;
									return true;
								}
								case 8: {
									$state = -1;
									elapsed = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - this.$lastPhaseTime.ticks);
									$state = 6;
									continue $sm1;
								}
								case 7: {
									$state = -1;
									nextPhase = new ss.TimeSpan(this.$lastPhaseTime.ticks + (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseRiseSeconds * 10000000)).ticks);
									this.$lastPhaseTime = new ss.TimeSpan(this.$lastPhaseTime.ticks + (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseRiseSeconds * 10000000)).ticks);
									elapsed = new ss.TimeSpan(elapsed.ticks - nextPhase.ticks);
									$state = 9;
									continue $sm1;
								}
								case 9: {
									$state = -1;
									if (!(elapsed.ticks < (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseThreatSeconds * 10000000)).ticks)) {
										$state = 10;
										continue $sm1;
									}
									this.parent.set_y(this.$minY);
									$result = 1;
									$state = 11;
									return true;
								}
								case 11: {
									$state = -1;
									elapsed = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - this.$lastPhaseTime.ticks);
									$state = 9;
									continue $sm1;
								}
								case 10: {
									$state = -1;
									nextPhase = new ss.TimeSpan(this.$lastPhaseTime.ticks + (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseThreatSeconds * 10000000)).ticks);
									this.$lastPhaseTime = new ss.TimeSpan(this.$lastPhaseTime.ticks + (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseThreatSeconds * 10000000)).ticks);
									elapsed = new ss.TimeSpan(elapsed.ticks - nextPhase.ticks);
									$state = 12;
									continue $sm1;
								}
								case 12: {
									$state = -1;
									if (!(elapsed.ticks < (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseLowerSeconds * 10000000)).ticks)) {
										$state = 13;
										continue $sm1;
									}
									this.parent.set_y(Franca.Calc.lerp$2(this.$minY, this.$maxY, Franca.Calc.clamp$3(elapsed.ticks / 10000000 / $SuperBernieWorld_Entities_AIPopup.$phaseLowerSeconds, 0, 1)));
									$result = 1;
									$state = 14;
									return true;
								}
								case 14: {
									$state = -1;
									elapsed = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - this.$lastPhaseTime.ticks);
									$state = 12;
									continue $sm1;
								}
								case 13: {
									$state = -1;
									nextPhase = new ss.TimeSpan(this.$lastPhaseTime.ticks + (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseLowerSeconds * 10000000)).ticks);
									this.$lastPhaseTime = new ss.TimeSpan(this.$lastPhaseTime.ticks + (new ss.TimeSpan($SuperBernieWorld_Entities_AIPopup.$phaseLowerSeconds * 10000000)).ticks);
									$state = 1;
									continue $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		onActivate: function() {
			this.$lastPhaseTime = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - (new ss.TimeSpan(1 * 10000000)).ticks);
			this.$minY = this.parent.get_y();
			this.$maxY = this.$minY + this.parent.get_sprite().get_sizeY();
		},
		get_visibleHeight: function() {
			var mul = (1 - (this.parent.get_y() - this.$minY) / (this.$maxY - this.$minY)) * this.parent.get_sprite().get_sizeY();
			return Math.floor(mul * 16);
		}
	}, $SuperBernieWorld_Entities_BaseAI);
	ss.initClass($SuperBernieWorld_Entities_AIRoseProjectile, $asm, {
		routine: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									this.parent.set_speedY(0.01);
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!true) {
										$state = -1;
										break $sm1;
									}
									if (this.parent.get_mirror()) {
										this.parent.move(1);
									}
									else {
										this.parent.move(3);
									}
									$result = 1;
									$state = 1;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		onCollideH: function() {
			this.parent.die();
		},
		onLand: function() {
			this.parent.set_speedY(-0.033);
		}
	}, $SuperBernieWorld_Entities_BaseAI);
	ss.initClass($SuperBernieWorld_Entities_AIShroom, $asm, {
		routine: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, $t1, i, $t2, i1;
					var $finally = function() {
						$t1.dispose();
					};
					var $finally1 = function() {
						$t2.dispose();
					};
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									$t1 = ss.getEnumerator($SuperBernieWorld_Entities_PowerUp.popOutOfBlock(this.parent));
									$state = 4;
									continue $sm1;
								}
								case 4: {
									$state = 2;
									if (!$t1.moveNext()) {
										$state = 3;
										continue $sm1;
									}
									i = $t1.current();
									$result = i;
									$state = 4;
									return true;
								}
								case 3: {
									$state = -1;
									$finally.call(this);
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (this.get_moves()) {
										$t2 = ss.getEnumerator($SuperBernieWorld_Entities_AIMeander.prototype.routine.call(this));
										$state = 7;
										continue $sm1;
									}
									$state = -1;
									break $sm1;
								}
								case 7: {
									$state = 5;
									if (!$t2.moveNext()) {
										$state = 6;
										continue $sm1;
									}
									i1 = $t2.current();
									$result = i1;
									$state = 7;
									return true;
								}
								case 6: {
									$state = -1;
									$finally1.call(this);
									$state = -1;
									break $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, function() {
						try {
							switch ($state) {
								case 2:
								case 3:
								case 4: {
									try {
										break;
									}
									finally {
										$finally.call(this);
									}
								}
								case 5:
								case 6:
								case 7: {
									try {
										break;
									}
									finally {
										$finally1.call(this);
									}
								}
							}
						}
						finally {
							$state = -1;
						}
					}, this);
				}).call(this);
			}, this);
		},
		get_moves: function() {
			return this.$3$MovesField;
		},
		set_moves: function(value) {
			this.$3$MovesField = value;
		}
	}, $SuperBernieWorld_Entities_AIMeander);
	ss.initClass($SuperBernieWorld_Entities_AIThrower, $asm, {
		$pickTarget: function() {
			if (this.parent.get_x() >= this.$minX + this.$range / 2) {
				this.$target = this.$minX + this.$range / 2 - $SuperBernieWorld_Core.get_random().nextDouble() * this.$range / 2;
				this.$left = true;
			}
			else {
				this.$target = this.$minX + this.$range / 2 + $SuperBernieWorld_Core.get_random().nextDouble() * this.$range / 2;
				this.$left = false;
			}
		},
		setJumpFallHeight: function() {
			this.jumpHeight = $SuperBernieWorld_Entities_AIThrower.defaultJumpHeight;
			this.fallHeight = $SuperBernieWorld_Entities_AIThrower.defaultJumpHeight;
		},
		routine: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, frameTime, alpha, thrower, elapsed, alpha1, jumpAlpha, fallAlpha, apex, apex1;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									this.$nextJumpTime = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks + (new ss.TimeSpan($SuperBernieWorld_Core.get_random().nextDouble() * 0.67 * 10000000)).ticks);
									this.$nextThrowTime = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks + (new ss.TimeSpan($SuperBernieWorld_Core.get_random().nextDouble() * 0.67 * 10000000)).ticks);
									this.$pickTarget();
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!true) {
										$state = -1;
										break $sm1;
									}
									if (!this.get_bossDefeat()) {
										if (this.$left && this.parent.get_x() <= this.$target || !this.$left && this.parent.get_x() >= this.$target) {
											this.$pickTarget();
										}
										if (!this.$jumping && $SuperBernieWorld_Time.get_game().ticks >= this.$nextJumpTime.ticks) {
											this.$jumping = true;
											this.$jumpTime = this.$nextJumpTime;
											this.$nextJumpTime = new ss.TimeSpan(this.$nextJumpTime.ticks + (new ss.TimeSpan(($SuperBernieWorld_Entities_AIThrower.$jumpSeconds + $SuperBernieWorld_Core.get_random().nextDouble() * 3 * this.get_jumpPeriodScalar()) * 10000000)).ticks);
											this.$jumpBaseY = this.parent.get_y();
											this.setJumpFallHeight();
										}
										if (!this.$throwing && $SuperBernieWorld_Time.get_game().ticks >= this.$nextThrowTime.ticks) {
											this.$throwing = true;
											this.$throwTime = new ss.TimeSpan(0);
											this.$nextThrowTime = new ss.TimeSpan(this.$nextThrowTime.ticks + (new ss.TimeSpan(($SuperBernieWorld_Entities_AIThrower.$throwSeconds + $SuperBernieWorld_Core.get_random().nextDouble() * 1.5 * this.get_throwPeriodScalar()) * 10000000)).ticks);
											this.$throwCount = $SuperBernieWorld_Core.get_random().nextMinMax(this.$projectileMinCount, this.$projectileMaxCount + 1);
											this.$thrown = 0;
										}
										if (this.$left) {
											this.parent.move(1);
										}
										else {
											this.parent.move(3);
										}
										if (this.$throwing) {
											frameTime = new ss.TimeSpan(0.0166666666666667 * 10000000);
											this.$throwTime = new ss.TimeSpan(this.$throwTime.ticks + $SuperBernieWorld_Time.get_gameElapsed().ticks);
											if (this.$throwAnim) {
												this.$throwAnimElapsed = new ss.TimeSpan(this.$throwAnimElapsed.ticks + $SuperBernieWorld_Time.get_gameElapsed().ticks);
												alpha = Franca.Calc.clamp$3(System.TimeSpanExtensions.divide$1(this.$throwAnimElapsed, new ss.TimeSpan(Math.trunc(frameTime.ticks * this.get_throwAnimFrames()))), 0, 1);
												if (alpha >= 0.5 && !this.$throwAnimThrown) {
													this.$throw();
													this.$thrown++;
													this.$throwAnimThrown = true;
												}
												if (alpha >= 1) {
													this.$throwAnim = false;
													this.$throwAnimThrown = false;
												}
												thrower = ss.safeCast(this.parent, $SuperBernieWorld_Entities_IThrower);
												if (ss.isValue(thrower)) {
													thrower.throw$1(alpha);
												}
											}
											else {
												if (this.$throwTime.ticks >= (new ss.TimeSpan(Math.trunc(frameTime.ticks * 6))).ticks) {
													this.$throwTime = new ss.TimeSpan(this.$throwTime.ticks - (new ss.TimeSpan(Math.trunc(frameTime.ticks * 6))).ticks);
													if ($SuperBernieWorld_Core.get_random().nextDouble() < 0.33) {
														this.$throwAnim = true;
														this.$throwAnimElapsed = new ss.TimeSpan(0);
													}
												}
												if (this.$thrown === this.$throwCount) {
													this.$throwing = false;
												}
											}
										}
									}
									if (this.$jumping) {
										elapsed = (new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - this.$jumpTime.ticks)).ticks / 10000000;
										alpha1 = Franca.Calc.clamp$3(elapsed / $SuperBernieWorld_Entities_AIThrower.$jumpSeconds, 0, 1);
										jumpAlpha = this.jumpHeight / (this.jumpHeight + this.fallHeight);
										fallAlpha = this.fallHeight / (this.jumpHeight + this.fallHeight);
										if (alpha1 <= jumpAlpha) {
											this.parent.set_y(this.$jumpBaseY - Math.sin(alpha1 / jumpAlpha / 2 * Math.PI) * this.jumpHeight);
										}
										else {
											apex = this.$jumpBaseY - Math.sin(0.5 * Math.PI) * this.jumpHeight;
											this.parent.set_y(apex + (1 - Math.sin(((alpha1 - jumpAlpha) / fallAlpha / 2 + 0.5) * Math.PI)) * this.fallHeight);
										}
										if (alpha1 >= 1) {
											apex1 = this.$jumpBaseY - Math.sin(0.5 * Math.PI) * this.jumpHeight;
											this.parent.set_y(apex1 + (1 - Math.sin(1 * Math.PI)) * this.fallHeight);
											this.$jumping = false;
										}
									}
									$result = 1;
									$state = 1;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		$throw: function() {
			var ent = new $SuperBernieWorld_Entities_TikiTorch.$ctor1(null, new Franca.Vector2.$ctor3(this.parent.get_x() - 0.5, this.parent.get_y() - 2));
			if (ss.isValue(this.get_projectileSprite())) {
				ent.setSprite(this.get_projectileSprite());
			}
			$SuperBernieWorld_Core.spawnEntity(ent);
		},
		get_jumping: function() {
			return this.$jumping;
		},
		get_bossDefeat: function() {
			return this.$2$BossDefeatField;
		},
		set_bossDefeat: function(value) {
			this.$2$BossDefeatField = value;
		},
		get_throwPeriodScalar: function() {
			return this.$2$ThrowPeriodScalarField;
		},
		set_throwPeriodScalar: function(value) {
			this.$2$ThrowPeriodScalarField = value;
		},
		get_jumpPeriodScalar: function() {
			return this.$2$JumpPeriodScalarField;
		},
		set_jumpPeriodScalar: function(value) {
			this.$2$JumpPeriodScalarField = value;
		},
		get_throwAnimFrames: function() {
			return this.$2$ThrowAnimFramesField;
		},
		set_throwAnimFrames: function(value) {
			this.$2$ThrowAnimFramesField = value;
		},
		get_projectileSprite: function() {
			return this.$2$ProjectileSpriteField;
		},
		set_projectileSprite: function(value) {
			this.$2$ProjectileSpriteField = value;
		},
		get_projectileMinCount: function() {
			return this.$projectileMinCount;
		},
		set_projectileMinCount: function(value) {
			this.$projectileMinCount = value;
		},
		get_projectileMaxCount: function() {
			return this.$projectileMaxCount;
		},
		set_projectileMaxCount: function(value) {
			this.$projectileMaxCount = value;
		},
		get_minX: function() {
			return this.$minX;
		},
		set_minX: function(value) {
			this.$minX = value;
			this.$range = this.$maxX - this.$minX;
		},
		get_maxX: function() {
			return this.$maxX;
		},
		set_maxX: function(value) {
			this.$maxX = value;
			this.$range = this.$maxX - this.$minX;
		}
	}, $SuperBernieWorld_Entities_BaseAI);
	ss.initClass($SuperBernieWorld_Entities_AIThrownProjectile, $asm, {
		routine: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									this.parent.set_speedY(-0.05);
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!true) {
										$state = -1;
										break $sm1;
									}
									this.parent.move(1);
									$result = 1;
									$state = 1;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		}
	}, $SuperBernieWorld_Entities_BaseAI);
	ss.initClass($SuperBernieWorld_Entities_AITileEntity, $asm, {
		routine: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, elapsed, startTime, duration, startY;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									startTime = $SuperBernieWorld_Time.get_game();
									duration = new ss.TimeSpan(0.2 * 10000000);
									startY = this.$tileEnt.get_y();
									this.$tileEnt.setAnim(1);
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!((elapsed = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - startTime.ticks)).ticks < duration.ticks)) {
										$state = 2;
										continue $sm1;
									}
									this.$tileEnt.set_y(startY - Math.sin(elapsed.ticks / 10000000 / (duration.ticks / 10000000) * Math.PI) * 0.3);
									$result = 1;
									$state = 1;
									return true;
								}
								case 2: {
									$state = -1;
									this.$tileEnt.set_y(startY);
									this.$tileEnt.setAnim(2);
									this.$tileEnt.set_jumping(false);
									$state = -1;
									break $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		}
	}, $SuperBernieWorld_Entities_BaseAI);
	ss.initClass($SuperBernieWorld_Entities_AITorcher, $asm, {
		$isTile: function(x, y) {
			var $t1 = this.parent.get_map().layers;
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var layer = $t1[$t2];
				if (layer.blocks && layer.area.contains$2(x, y) && $SuperBernieWorld_Maps_TileID.op_Inequality(ss.arrayGet(layer.tiles, x, y), ss.getDefaultValue($SuperBernieWorld_Maps_TileID))) {
					return true;
				}
			}
			return false;
		},
		$getTileAbove: function() {
			var parentY = Math.round(this.parent.get_y());
			var fromY = Math.max(0, parentY - 5);
			var x = Math.floor(this.parent.get_x());
			var airY = -1;
			var tileY = -1;
			for (var y = fromY; y < parentY; y++) {
				if (!this.$isTile(x, y)) {
					if (!this.$isTile(x, y - 1)) {
						airY = y;
					}
				}
				else {
					tileY = y;
					if (airY > -1) {
						break;
					}
				}
			}
			if (airY > -1 && tileY > -1 && tileY > airY) {
				return tileY;
			}
			return null;
		},
		$getTileBelow: function() {
			var parentY = Math.round(this.parent.get_y());
			var toY = Math.max(0, parentY + 5);
			var x = Math.floor(this.parent.get_x());
			var airY = -1;
			var tileY = -1;
			for (var y = parentY; y < toY; y++) {
				if (y >= 15) {
					return null;
				}
				if (!this.$isTile(x, y)) {
					if (!this.$isTile(x, y - 1)) {
						airY = y;
					}
				}
				else {
					tileY = y;
					if (airY > -1) {
						break;
					}
				}
			}
			if (airY > -1 && tileY > -1 && tileY > airY) {
				return tileY;
			}
			return null;
		},
		setJumpFallHeight: function() {
			var roll = $SuperBernieWorld_Core.get_random().nextMinMax(0, 12);
			if (roll < 5) {
				var tile = this.$getTileAbove();
				if (ss.isValue(tile)) {
					this.jumpHeight = this.parent.get_y() - ss.unbox(tile) + 1.5;
					this.fallHeight = 1.5;
				}
				else {
					this.$setDefaultJump();
				}
			}
			else if (roll >= 5 && roll < 10) {
				var tile1 = this.$getTileBelow();
				if (ss.isValue(tile1)) {
					this.jumpHeight = 1.5;
					this.fallHeight = ss.unbox(tile1) - this.parent.get_y() + 1.5;
				}
				else {
					this.$setDefaultJump();
				}
			}
			else {
				this.$setDefaultJump();
			}
		},
		$setDefaultJump: function() {
			this.jumpHeight = 2.1775;
			this.fallHeight = 2.1775;
		}
	}, $SuperBernieWorld_Entities_AIThrower);
	ss.initClass($SuperBernieWorld_Entities_Entity, $asm, {
		setProperties: function(json) {
			if (json.containsKey('flip')) {
				this.set_mirror(Franca.JsonValue.op_Implicit$1(json.get_item('flip')));
			}
		},
		setAI: function(ai) {
			this.set_AI(ai);
		},
		createAI: null,
		tickAI: function() {
			if (ss.isValue(this.get_AI()) && this.get_activated()) {
				this.get_AI().tick();
			}
		},
		activate: function() {
			if (!this.get_activated()) {
				this.set_activated(true);
				this.set_AI(this.createAI());
				if (ss.isValue(this.get_AI())) {
					this.get_AI().onActivate();
				}
			}
		},
		update: function() {
			if (this.get_dead()) {
				return;
			}
			if (this.get_dying()) {
				if (ss.isValue(this.deathCo)) {
					this.deathCo.resume(null);
					if (this.deathCo.get_status() === 3) {
						this.set_dead(true);
					}
				}
				else if (this.get_y() >= 18) {
					this.set_dead(true);
				}
				return;
			}
			if (this.$jumpingThisFrame === 1) {
				if ($SuperBernieWorld_Time.get_game().ticks <= this.$jumpTimeout.ticks || $SuperBernieWorld_Core.get_antiGrav()) {
					this.set_jumping(true);
					this.set_jumpInputEnded(false);
					this.set_speedY(-0.075 - Math.max(0, Math.abs(this.get_speedX()) - 0.025) * 0.5);
					this.onJump();
				}
			}
			if (this.get_jumping() && this.$jumpingThisFrame === 0) {
				this.set_jumpInputEnded(true);
			}
			this.$jumpingThisFrame = 0;
			this.set_moveDir(0);
			this.set_running(false);
			if (this.get_canMirror()) {
				if (this.get_speedX() > 0) {
					this.set_mirror(false);
				}
				else if (this.get_speedX() < 0) {
					this.set_mirror(true);
				}
			}
			this.set_moving(this.get_speedX() !== 0);
			this.animate();
		},
		onJump: function() {
		},
		animate: function() {
			this.frame += this.get_speedScalar() * ($SuperBernieWorld_Time.get_gameElapsed().ticks / 10000000) * 10;
		},
		jump: function(held) {
			this.$jumpingThisFrame = (held ? 2 : 1);
		},
		crouch: function() {
			if (ss.isValue(this.get_sprite()) && this.get_sprite().get_sizeY() > 1) {
				this.$crouching = true;
			}
		},
		move: function(dir) {
			var canMove = (this.$crouching ? !this.get_onGround() : true);
			if (dir === 3 && canMove) {
				this.set_moveDir(1);
			}
			else if (dir === 1 && canMove) {
				this.set_moveDir(-1);
			}
			else if (dir === 0) {
				this.set_moveDir(0);
			}
		},
		land: function() {
			this.set_jumping(false);
			if (ss.isValue(this.get_AI())) {
				this.get_AI().onLand();
			}
		},
		face: function(dir) {
			if (!this.$crouching) {
				if (dir === 1) {
					this.set_mirror(true);
				}
				else if (dir === 3) {
					this.set_mirror(false);
				}
			}
		},
		stomped: function() {
			return false;
		},
		die: function() {
			this.set_dying(true);
			this.set_applyDeathPhysics(true);
			this.set_speedY(-0.05);
			$SuperBernieWorld_Score.set_value($SuperBernieWorld_Score.get_value() + this.get_points());
			var shell = ss.safeCast(this, $SuperBernieWorld_Entities_IShellEntity);
			if (ss.isValue(shell)) {
				shell.get_shellState().died();
			}
		},
		run: function() {
			this.set_running(true);
		},
		getRunScalar: function() {
			return (this.get_running() ? 1.7 : 1);
		},
		flip: function() {
			this.set_mirror(!this.get_mirror());
		},
		getTex: function() {
			var tex;
			if (this.get_dying()) {
				tex = this.$sprite.getDying(this.frame);
			}
			else if (this.$crouching) {
				tex = this.$sprite.getCrouching(this.frame);
			}
			else if (this.get_jumping()) {
				if (this.get_speedY() < 0) {
					tex = this.$sprite.getJumping(this.frame);
				}
				else {
					tex = this.$sprite.getFalling(this.frame);
				}
			}
			else if (this.get_moving()) {
				if (this.get_skidding()) {
					tex = this.$sprite.getSkidding(this.frame);
				}
				else {
					tex = this.$sprite.getMoving(this.frame);
				}
			}
			else if (ss.isInstanceOfType(this, $SuperBernieWorld_Entities_Bernie)) {
				if (this.frame > this.$nextIdle) {
					this.frame = -4;
					this.$nextIdle = $SuperBernieWorld_Entities_Entity.$idleRandom.nextMinMax(45, 180);
					tex = this.$sprite.getIdle(this.frame);
				}
				else if (this.frame < 0) {
					tex = this.$sprite.getIdle(this.frame);
				}
				else {
					tex = this.$sprite.getStanding(this.frame);
				}
			}
			else {
				tex = this.$sprite.getStanding(this.frame);
			}
			return tex;
		},
		getEntityColor: function(alpha) {
			return Franca.Color.op_Multiply$1(Franca.Color.white, alpha);
		},
		render: function(batch, pos) {
			if (ss.isValue(this.$sprite)) {
				var alpha = (this.get_invulnerable() ? Franca.Calc.wave($SuperBernieWorld_Time.get_real().ticks / 10000000 * 15 * Math.PI) : 1);
				var color = this.getEntityColor(alpha);
				var tex = this.getTex();
				var popup = ss.safeCast(this.get_AI(), $SuperBernieWorld_Entities_AIPopup);
				var spriteEffects = (this.get_mirror() ? 1 : 0) | (this.get_flipped() ? 2 : 0);
				if (ss.isValue(popup)) {
					if (popup.get_visibleHeight() > 0) {
						batch.drawSrc$1(tex, new Franca.RectangleF.$ctor3(0, 0, tex.source.size.width, popup.get_visibleHeight()), Franca.Vector2.op_Subtraction(pos, new Franca.Vector2.$ctor3(tex.source.size.width / 2, tex.source.size.height - 1)), Franca.HdrColors.op_Implicit(color), spriteEffects, 0);
					}
				}
				else {
					batch.draw$1(tex, Franca.Vector2.op_Addition(Franca.Vector2.op_Subtraction(pos, new Franca.Vector2.$ctor3(tex.source.size.width / 2, tex.source.size.height)), this.get_renderOffset()), Franca.HdrColors.op_Implicit(color), spriteEffects, 0);
				}
			}
			this.set_skidding(false);
			this.$crouching = false;
		},
		getHitbox: function() {
			var sizeX = (ss.isValue(this.$sprite) ? this.$sprite.get_sizeX() : 1);
			var sizeY = (ss.isValue(this.$sprite) ? this.$sprite.get_sizeY() : 1);
			if (this.$crouching) {
				sizeY /= 2;
			}
			sizeY -= 0.25 * sizeY;
			// leave four pixels of headroom per tile in size
			var hitSizeX = sizeX - 0.375;
			var hitSizeY = sizeY - 0.25;
			return Franca.Rectangle.fromLTRB(Math.floor((this.get_x() - hitSizeX / 2) * 16), Math.floor((this.get_y() - hitSizeY) * 16), Math.floor((this.get_x() + hitSizeX / 2) * 16), Math.floor(this.get_y() * 16));
		},
		getCollisionInfo: function(volume, collisionH, collisionV) {
			var sizeX = (ss.isValue(this.$sprite) ? this.$sprite.get_sizeX() : 1);
			var sizeY = (ss.isValue(this.$sprite) ? this.$sprite.get_sizeY() : 1);
			if (this.$crouching) {
				sizeY /= 2;
			}
			volume.$ = Franca.Rectangle.fromLTRB(Math.floor(this.get_x() - sizeX / 2), Math.floor(this.get_y() - sizeY), Math.ceil(this.get_x() + sizeX / 2), Math.ceil(this.get_y()));
			if (this.collisionStyle === 0) {
				sizeY -= 0.375 * sizeY;
				// leave four pixels of headroom
				var horSizeX = sizeX - 0.375;
				var horSizeY = sizeY - 0.375;
				collisionH.$ = Franca.RectangleF.fromLTRB(this.get_x() - horSizeX / 2, this.get_y() - sizeY + (sizeY - horSizeY) / 2, this.get_x() + horSizeX / 2, this.get_y() - (sizeY - horSizeY) / 2);
				var verSizeX = sizeX - 0.5;
				var verSizeY = sizeY;
				collisionV.$ = Franca.RectangleF.fromLTRB(this.get_x() - verSizeX / 2, this.get_y() - verSizeY, this.get_x() + verSizeX / 2, this.get_y());
			}
			else {
				var horSizeX1 = sizeX / 2;
				var horSizeY1 = sizeY / 2 - 0.25;
				collisionH.$ = Franca.RectangleF.fromLTRB(this.get_x() - horSizeX1 / 2, this.get_y() - sizeY + (sizeY - horSizeY1) / 2, this.get_x() + horSizeX1 / 2, this.get_y() - (sizeY - horSizeY1) / 2);
				var verSizeX1 = sizeX / 2 - 0.25;
				var verSizeY1 = sizeY / 2;
				collisionV.$ = Franca.RectangleF.fromLTRB(this.get_x() - verSizeX1 / 2, this.get_y() - sizeY + (sizeY - verSizeY1) / 2, this.get_x() + verSizeX1 / 2, this.get_y() - (sizeY - verSizeY1) / 2);
			}
		},
		setSprite: function(sprite) {
			this.$sprite = sprite;
		},
		clone: null,
		get_moving: function() {
			return this.$moving;
		},
		set_moving: function(value) {
			if (this.$moving !== value) {
				this.$moving = value;
				this.frame = 0;
			}
		},
		get_jumping: function() {
			return this.$jumping;
		},
		set_jumping: function(value) {
			if (this.$jumping !== value) {
				this.$jumping = value;
				this.frame = 0;
			}
		},
		get_x: function() {
			return this.$1$XField;
		},
		set_x: function(value) {
			this.$1$XField = value;
		},
		get_y: function() {
			return this.$1$YField;
		},
		set_y: function(value) {
			this.$1$YField = value;
		},
		get_speedX: function() {
			return this.$1$SpeedXField;
		},
		set_speedX: function(value) {
			this.$1$SpeedXField = value;
		},
		get_speedY: function() {
			return this.$1$SpeedYField;
		},
		set_speedY: function(value) {
			this.$1$SpeedYField = value;
		},
		get_jumpInputEnded: function() {
			return this.$1$JumpInputEndedField;
		},
		set_jumpInputEnded: function(value) {
			this.$1$JumpInputEndedField = value;
		},
		get_moveDir: function() {
			return this.$1$MoveDirField;
		},
		set_moveDir: function(value) {
			this.$1$MoveDirField = value;
		},
		get_activated: function() {
			return this.$1$ActivatedField;
		},
		set_activated: function(value) {
			this.$1$ActivatedField = value;
		},
		get_mirror: function() {
			return this.$1$MirrorField;
		},
		set_mirror: function(value) {
			this.$1$MirrorField = value;
		},
		get_running: function() {
			return this.$1$RunningField;
		},
		set_running: function(value) {
			this.$1$RunningField = value;
		},
		get_skidding: function() {
			return this.$1$SkiddingField;
		},
		set_skidding: function(value) {
			this.$1$SkiddingField = value;
		},
		get_onGround: function() {
			return this.$onGround;
		},
		set_onGround: function(value) {
			this.$onGround = value;
			if (this.$onGround) {
				this.$jumpTimeout = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks + $SuperBernieWorld_Entities_Entity.$jumpBuffer.ticks);
			}
		},
		get_applyMovementPhysics: null,
		get_applyPhysics: function() {
			return this.$1$ApplyPhysicsField;
		},
		set_applyPhysics: function(value) {
			this.$1$ApplyPhysicsField = value;
		},
		get_speedScalar: function() {
			return this.$1$SpeedScalarField;
		},
		set_speedScalar: function(value) {
			this.$1$SpeedScalarField = value;
		},
		get_AI: function() {
			return this.$1$AIField;
		},
		set_AI: function(value) {
			this.$1$AIField = value;
		},
		get_sprite: function() {
			return this.$sprite;
		},
		set_sprite: function(value) {
			this.$sprite = value;
		},
		get_drawUnder: function() {
			return this.$1$DrawUnderField;
		},
		set_drawUnder: function(value) {
			this.$1$DrawUnderField = value;
		},
		get_renderOffset: function() {
			return this.$1$RenderOffsetField;
		},
		set_renderOffset: function(value) {
			this.$1$RenderOffsetField = value;
		},
		get_doNotAutoActivate: function() {
			return this.$1$DoNotAutoActivateField;
		},
		set_doNotAutoActivate: function(value) {
			this.$1$DoNotAutoActivateField = value;
		},
		get_dying: function() {
			return this.$1$DyingField;
		},
		set_dying: function(value) {
			this.$1$DyingField = value;
		},
		get_dead: function() {
			return this.$1$DeadField;
		},
		set_dead: function(value) {
			this.$1$DeadField = value;
		},
		get_invulnerable: function() {
			return this.$1$InvulnerableField;
		},
		set_invulnerable: function(value) {
			this.$1$InvulnerableField = value;
		},
		get_applyDeathPhysics: function() {
			return this.$1$ApplyDeathPhysicsField;
		},
		set_applyDeathPhysics: function(value) {
			this.$1$ApplyDeathPhysicsField = value;
		},
		get_map: function() {
			return this.$1$MapField;
		},
		set_map: function(value) {
			this.$1$MapField = value;
		},
		get_canBeKilled: function() {
			return this.$1$CanBeKilledField;
		},
		set_canBeKilled: function(value) {
			this.$1$CanBeKilledField = value;
		},
		get_points: function() {
			return 250;
		},
		get_deathAudioPlayed: function() {
			return this.$1$DeathAudioPlayedField;
		},
		set_deathAudioPlayed: function(value) {
			this.$1$DeathAudioPlayedField = value;
		},
		get_isEnemy: function() {
			return true;
		},
		get_canMirror: function() {
			return this.$1$CanMirrorField;
		},
		set_canMirror: function(value) {
			this.$1$CanMirrorField = value;
		},
		get_gravityScalar: function() {
			return this.$1$GravityScalarField;
		},
		set_gravityScalar: function(value) {
			this.$1$GravityScalarField = value;
		},
		get_canCollide: function() {
			return this.$1$CanCollideField;
		},
		set_canCollide: function(value) {
			this.$1$CanCollideField = value;
		},
		get_flipped: function() {
			return this.$1$FlippedField;
		},
		set_flipped: function(value) {
			this.$1$FlippedField = value;
		}
	});
	ss.initClass($SuperBernieWorld_Entities_Bernie, $asm, {
		getEntityColor: function(alpha) {
			var pal = $SuperBernieWorld_Assets.get(Franca.Texture).call(null, 66);
			return $SuperBernieWorld_GameRenderer.getPaletteColor(this.get_palette(), ss.Int32.div(pal.get_width(), 5), pal.get_height(), alpha);
		},
		onJump: function() {
			if (ss.isValue(this.$jumpSound) && this.$jumpSound.get_state() !== 0) {
				this.$jumpSound.stop();
			}
			this.$jumpSound = $SuperBernieWorld_Audio.playSound(40, 1, (ss.referenceEquals(this.get_sprite(), $SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 8)) ? 0.8 : 1));
		},
		shoot: function() {
			if ($SuperBernieWorld_Core.get_bernieState() === 2) {
				if (ss.isValue(this.get_map())) {
					var count = Enumerable.from(this.get_map().entities).where(function(e) {
						return ss.isInstanceOfType(e, $SuperBernieWorld_Entities_RoseProjectile);
					}).count();
					if (count >= 3) {
						return;
					}
				}
				var rose = new $SuperBernieWorld_Entities_RoseProjectile.$ctor1(null, new Franca.Vector2.$ctor3(this.get_x() + 0.25 * (this.get_mirror() ? -1 : 1), this.get_y() - 0.5));
				if (this.get_mirror()) {
					rose.flip();
				}
				$SuperBernieWorld_Core.spawnEntity(rose);
				$SuperBernieWorld_Audio.playSound(71, 1, 1);
			}
		},
		die: function() {
			$SuperBernieWorld_Entities_Entity.prototype.die.call(this);
			this.setSprite($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 7));
			$SuperBernieWorld_Core.set_bernieState(0);
		},
		$hit: function() {
			if ($SuperBernieWorld_Core.get_godMode() || this.get_dying()) {
				return;
			}
			if (this.get_invulnerable()) {
				return;
			}
			if (this.get_canBeKilled()) {
				if ($SuperBernieWorld_Core.get_bernieState() === 0) {
					this.die();
				}
				else {
					this.powerDown();
				}
			}
		},
		$stompEntity: function(ent) {
			var ret = ent.stomped();
			if (ret && !ent.get_dying()) {
				$SuperBernieWorld_Audio.playSound(43, 1, 1);
			}
			return ret;
		},
		touch: function(ent, stomp) {
			if (ent.get_dying() || ent.get_dead()) {
				return;
			}
			if (this.$bernieFist && ent.get_isEnemy() && !ss.isInstanceOfType(ent, $SuperBernieWorld_Entities_IBoss)) {
				ent.die();
				return;
			}
			var Bounce = ss.mkdel(this, function() {
				this.set_jumping(true);
				this.set_jumpInputEnded(true);
				this.set_speedY(-0.075);
				//var entHitbox = ent.GetHitbox();
				//Y = entHitbox.Top / 16.0;
			});
			var lever = ss.safeCast(ent, $SuperBernieWorld_Entities_Lever);
			var pow = ss.safeCast(ent, $SuperBernieWorld_Entities_PowerUp);
			var shell = ss.safeCast(ent, $SuperBernieWorld_Entities_IShellEntity);
			if (ss.isNullOrUndefined(pow) && ss.isNullOrUndefined(shell) && ss.isNullOrUndefined(lever)) {
				if (ent.get_isEnemy()) {
					if (stomp && this.$stompEntity(ent)) {
						Bounce();
					}
					else {
						this.$hit();
					}
				}
			}
			else if (ss.isValue(lever)) {
				// noop
			}
			else if (ss.isValue(shell)) {
				var state = shell.get_shellState();
				var FireShell = ss.mkdel(this, function() {
					var dir = ((ent.get_x() > this.get_x()) ? 3 : 1);
					state.bounce(dir);
					var entHitbox = ent.getHitbox();
					var hitbox = this.getHitbox();
					if (dir === 1) {
						ent.set_x(ent.get_x() - Math.min(0.45, (entHitbox.location.x + entHitbox.size.width - hitbox.location.x) / 16));
					}
					else {
						ent.set_x(ent.get_x() + Math.min(0.45, (entHitbox.location.x + entHitbox.size.width - hitbox.location.x) / 16));
					}
				});
				if (stomp) {
					if (state.get_canStomp()) {
						if (!state.inShell || state.bouncing) {
							this.$stompEntity(ent);
							Bounce();
						}
						else {
							FireShell();
						}
					}
				}
				else if (!state.inShell) {
					this.$hit();
				}
				else if (state.bouncing) {
					if (ent.get_mirror() && ent.get_x() >= this.get_x() || !ent.get_mirror() && ent.get_x() <= this.get_x()) {
						this.$hit();
					}
				}
				else if (state.get_canStomp()) {
					FireShell();
				}
			}
			else {
				pow.pickedUp(this);
			}
		},
		getTex: function() {
			if (this.get_poweringUpDown() && $SuperBernieWorld_Core.get_bernieState() < 2) {
				return (this.$powerDown ? this.get_sprite().getPowerDown(this.frame) : this.get_sprite().getPowerUp(this.frame));
			}
			else {
				return $SuperBernieWorld_Entities_Entity.prototype.getTex.call(this);
			}
		},
		$powerUpDown: function(down) {
			return new ss.IteratorBlockEnumerable(function() {
				return (function(down) {
					var $result, $state = 0;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									this.$powerDown = down;
									this.frame = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!(Math.floor(Math.abs(this.frame)) < this.get_sprite().get_powerUpFrames())) {
										$state = -1;
										break $sm1;
									}
									this.frame += $SuperBernieWorld_Time.get_realElapsed().ticks / 10000000 * 60 / 5;
									$result = 1;
									$state = 1;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this, down);
			}, this);
		},
		$powerUpRose: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, elapsed, pal;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									elapsed = new ss.TimeSpan(0);
									this.set_palette(0);
									pal = 0;
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!(Math.floor(Math.abs(pal)) < 8)) {
										$state = -1;
										break $sm1;
									}
									pal += $SuperBernieWorld_Time.get_realElapsed().ticks / 10000000 * 60 / 5;
									this.set_palette(Math.floor(pal) % 5);
									$result = 1;
									$state = 1;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		powerUp: function() {
			if ($SuperBernieWorld_Core.get_bernieState() === 0) {
				this.$coPowerUpDown = Coroutines.Coroutine.create(ss.Int32).call(null, this.$powerUpDown(false), $SuperBernieWorld_Core.throwCoroutines);
				this.setSprite($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 8));
				$SuperBernieWorld_Audio.playSound(42, 1, 1);
				$SuperBernieWorld_Core.set_bernieState(1);
			}
			else if ($SuperBernieWorld_Core.get_bernieState() === 1) {
				this.$coPowerUpDown = Coroutines.Coroutine.create(ss.Int32).call(null, this.$powerUpRose(), $SuperBernieWorld_Core.throwCoroutines);
				this.setSprite($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 8));
				$SuperBernieWorld_Audio.playSound(42, 1, 1);
				$SuperBernieWorld_Core.set_bernieState(2);
			}
			else {
				$SuperBernieWorld_Score.set_value($SuperBernieWorld_Score.get_value() + 500);
				$SuperBernieWorld_Audio.playSound(38, 1, 2);
			}
		},
		powerDown: function() {
			this.$coPowerUpDown = Coroutines.Coroutine.create(ss.Int32).call(null, this.$powerUpDown(true), $SuperBernieWorld_Core.throwCoroutines);
			this.set_invulnerable(true);
			this.$invulTimeout = new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks + (new ss.TimeSpan(2 * 10000000)).ticks);
			this.setSprite($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 7));
			$SuperBernieWorld_Audio.playSound(41, 1, 1);
			$SuperBernieWorld_Core.set_bernieState(0);
			this.set_palette(0);
		},
		bernieFist: function() {
			if ($SuperBernieWorld_Audio.lastMusic !== 48) {
				this.$prevMusic = $SuperBernieWorld_Audio.lastMusic;
			}
			this.$bernieFist = true;
			this.$bernieFistSlow = false;
			this.$bernieFistTime = new ss.TimeSpan(0);
			$SuperBernieWorld_Audio.get_music().stopAllInstances();
			$SuperBernieWorld_Audio.playMusic(48, true);
		},
		stopBernieFist: function() {
			this.$bernieFist = false;
		},
		setLarge: function() {
			this.setSprite($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 8));
		},
		setRose: function() {
			this.setSprite($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 8));
			this.set_palette(4);
		},
		update: function() {
			if (this.get_poweringUpDown()) {
				this.$coPowerUpDown.resume(null);
			}
			else {
				$SuperBernieWorld_Entities_Entity.prototype.update.call(this);
				if (this.get_invulnerable() && $SuperBernieWorld_Time.get_game().ticks >= this.$invulTimeout.ticks) {
					this.set_invulnerable(false);
				}
				if (this.$bernieFist) {
					this.$bernieFistTime = new ss.TimeSpan(this.$bernieFistTime.ticks + $SuperBernieWorld_Time.get_gameElapsed().ticks);
					if (this.$bernieFistTime.ticks / 10000000 > 10 && !this.$bernieFistSlow) {
						this.$bernieFistSlow = true;
						$SuperBernieWorld_Audio.get_music().stopAllInstances();
						if (this.$prevMusic !== 0) {
							$SuperBernieWorld_Audio.playMusic(this.$prevMusic, true);
						}
					}
					if (this.$bernieFistTime.ticks / 10000000 > 12) {
						this.$bernieFist = false;
					}
				}
			}
			if (ss.isValue(this.$jumpSound) && this.$jumpSound.get_state() === 1 && this.get_speedY() >= 0) {
				this.$jumpSound.stop();
				this.$jumpSound = null;
			}
		},
		animate: function() {
			if (this.get_moving()) {
				this.frame += Math.abs(this.get_speedX()) * 5 * ($SuperBernieWorld_Time.get_gameElapsed().ticks / 10000000) * 60;
			}
			else {
				this.frame += $SuperBernieWorld_Time.get_gameElapsed().ticks / 10000000 * 60;
			}
			if (!this.get_poweringUpDown()) {
				if (this.$bernieFist) {
					this.set_palette(6 + Math.floor($SuperBernieWorld_Time.get_game().ticks / 10000000 * (this.$bernieFistSlow ? 6 : 12)) % 4);
				}
				else {
					this.set_palette((($SuperBernieWorld_Core.get_bernieState() === 2) ? 4 : 0));
				}
			}
		},
		createAI: function() {
			return null;
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_Bernie.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		get_applyMovementPhysics: function() {
			return true;
		},
		get_points: function() {
			return 0;
		},
		get_isEnemy: function() {
			return false;
		},
		get_poweringUpDown: function() {
			return ss.isValue(this.$coPowerUpDown) && this.$coPowerUpDown.get_status() !== 3;
		},
		get_palette: function() {
			return this.$2$PaletteField;
		},
		set_palette: function(value) {
			this.$2$PaletteField = value;
		}
	}, $SuperBernieWorld_Entities_Entity);
	$SuperBernieWorld_Entities_Bernie.$ctor1.prototype = $SuperBernieWorld_Entities_Bernie.prototype;
	ss.initClass($SuperBernieWorld_Entities_PowerUp, $asm, {
		pickedUp: null,
		get_applyMovementPhysics: function() {
			return false;
		},
		get_isEnemy: function() {
			return false;
		}
	}, $SuperBernieWorld_Entities_Entity);
	ss.initClass($SuperBernieWorld_Entities_BernieFist, $asm, {
		pickedUp: function(player) {
			player.bernieFist();
			this.set_dead(true);
		},
		createAI: function() {
			return new $SuperBernieWorld_Entities_AIFist(this);
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_BernieFist.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		}
	}, $SuperBernieWorld_Entities_PowerUp);
	$SuperBernieWorld_Entities_BernieFist.$ctor1.prototype = $SuperBernieWorld_Entities_BernieFist.prototype;
	ss.initClass($SuperBernieWorld_Entities_Cheese, $asm, {
		pickedUp: function(player) {
			player.powerUp();
			this.set_dead(true);
		},
		createAI: function() {
			var ret = new $SuperBernieWorld_Entities_AIShroom(this);
			if ($SuperBernieWorld_Core.get_bernieState() > 0) {
				ret.set_moves(false);
				this.setSprite($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 67));
			}
			return ret;
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_Cheese.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		}
	}, $SuperBernieWorld_Entities_PowerUp);
	$SuperBernieWorld_Entities_Cheese.$ctor1.prototype = $SuperBernieWorld_Entities_Cheese.prototype;
	ss.initInterface($SuperBernieWorld_Entities_IBoss, $asm, { get_textureOverride: null, set_textureOverride: null, get_isFlamingHotCheeto: null, setDifficulty: null });
	ss.initClass($SuperBernieWorld_Entities_Cheeto, $asm, {
		getTex: function() {
			if (!ss.staticEquals(this.get_textureOverride(), null)) {
				return this.get_textureOverride()() || $SuperBernieWorld_Entities_Entity.prototype.getTex.call(this);
			}
			return $SuperBernieWorld_Entities_Entity.prototype.getTex.call(this);
		},
		createAI: function() {
			return null;
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_Cheeto.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		get_points: function() {
			return 25000;
		},
		setDifficulty: function(n) {
		},
		get_textureOverride: function() {
			return this.$2$TextureOverrideField;
		},
		set_textureOverride: function(value) {
			this.$2$TextureOverrideField = value;
		},
		get_isFlamingHotCheeto: function() {
			return true;
		}
	}, $SuperBernieWorld_Entities_Entity, [$SuperBernieWorld_Entities_IBoss]);
	$SuperBernieWorld_Entities_Cheeto.$ctor1.prototype = $SuperBernieWorld_Entities_Cheeto.prototype;
	ss.initEnum($SuperBernieWorld_Entities_CollisionBoxStyle, $asm, { default$1: 0, projectile: 1 });
	ss.initClass($SuperBernieWorld_Entities_Fire, $asm, {
		activate: function() {
			$SuperBernieWorld_Entities_Entity.prototype.activate.call(this);
			if (!this.$playedSound) {
				if (ss.isValue(this.get_sprite())) {
					this.$playedSound = true;
					$SuperBernieWorld_Audio.playSound(45, 1, 1);
				}
			}
		},
		createAI: function() {
			return new $SuperBernieWorld_Entities_AIBullet(this);
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_Fire.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		get_points: function() {
			return 1000;
		}
	}, $SuperBernieWorld_Entities_Entity);
	$SuperBernieWorld_Entities_Fire.$ctor1.prototype = $SuperBernieWorld_Entities_Fire.prototype;
	ss.initClass($SuperBernieWorld_Entities_Gopoboo, $asm, {
		createAI: function() {
			return new $SuperBernieWorld_Entities_AIJump(this);
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_Gopoboo.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		die: function() {
			this.set_gravityScalar(1);
			$SuperBernieWorld_Entities_Entity.prototype.die.call(this);
		},
		get_points: function() {
			return 800;
		},
		get_applyMovementPhysics: function() {
			return false;
		}
	}, $SuperBernieWorld_Entities_Entity);
	$SuperBernieWorld_Entities_Gopoboo.$ctor1.prototype = $SuperBernieWorld_Entities_Gopoboo.prototype;
	ss.initClass($SuperBernieWorld_Entities_Ice, $asm, {
		stomped: function() {
			this.die();
			$SuperBernieWorld_Score.set_value($SuperBernieWorld_Score.get_value() + this.get_points());
			return true;
		},
		createAI: function() {
			return new $SuperBernieWorld_Entities_AIBullet(this);
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_Ice.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		get_points: function() {
			return 244;
		}
	}, $SuperBernieWorld_Entities_Entity);
	$SuperBernieWorld_Entities_Ice.$ctor1.prototype = $SuperBernieWorld_Entities_Ice.prototype;
	ss.initInterface($SuperBernieWorld_Entities_IShellEntity, $asm, { get_shellState: null });
	ss.initInterface($SuperBernieWorld_Entities_IThrower, $asm, { throw$1: null });
	ss.initClass($SuperBernieWorld_Entities_Lever, $asm, {
		flipLever: function() {
			this.$flipped = true;
		},
		getTex: function() {
			return (this.$flipped ? this.get_sprite().getMoving(this.frame) : this.get_sprite().getStanding(this.frame));
		},
		createAI: function() {
			return null;
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_Lever.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		get_points: function() {
			return 0;
		},
		get_isEnemy: function() {
			return false;
		}
	}, $SuperBernieWorld_Entities_Entity);
	$SuperBernieWorld_Entities_Lever.$ctor1.prototype = $SuperBernieWorld_Entities_Lever.prototype;
	ss.initClass($SuperBernieWorld_Entities_Magamba, $asm, {
		getTex: function() {
			if (this.get_dying() && this.$flattened$1) {
				return this.get_sprite().getCrouching(this.frame);
			}
			return $SuperBernieWorld_Entities_Entity.prototype.getTex.call(this);
		},
		stomped: function() {
			this.deathCo = Coroutines.Coroutine.create(ss.Int32).call(null, this.$flattened(), $SuperBernieWorld_Core.throwCoroutines);
			this.set_dying(true);
			this.$flattened$1 = true;
			$SuperBernieWorld_Score.set_value($SuperBernieWorld_Score.get_value() + this.get_points());
			return true;
		},
		$flattened: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, time;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									time = $SuperBernieWorld_Time.get_game();
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - time.ticks)).ticks < (new ss.TimeSpan(1.5 * 10000000)).ticks)) {
										$state = -1;
										break $sm1;
									}
									$result = 1;
									$state = 1;
									return true;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		createAI: function() {
			return new $SuperBernieWorld_Entities_AIMeander(this);
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_Magamba.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		get_points: function() {
			return 75;
		}
	}, $SuperBernieWorld_Entities_Entity);
	$SuperBernieWorld_Entities_Magamba.$ctor1.prototype = $SuperBernieWorld_Entities_Magamba.prototype;
	ss.initClass($SuperBernieWorld_Entities_Mitch, $asm, {
		getTex: function() {
			var _frame = { $: this.frame };
			var ret = this.shell.getTex(ss.mkdel(this, $SuperBernieWorld_Entities_Entity.prototype.getTex), _frame);
			this.frame = _frame.$;
			return ret;
		},
		stomped: function() {
			this.shell.stomped();
			return true;
		},
		update: function() {
			if (this.shell.inShell) {
				this.shell.update();
			}
			else {
				$SuperBernieWorld_Entities_Entity.prototype.update.call(this);
			}
		},
		tickAI: function() {
			if (!this.get_dead() && !this.get_dying()) {
				if (!this.shell.inShell || this.shell.bouncing) {
					$SuperBernieWorld_Entities_Entity.prototype.tickAI.call(this);
				}
			}
		},
		createAI: function() {
			var $t1 = new $SuperBernieWorld_Entities_AIMeander(this);
			$t1.set_walkOffLedges(false);
			var ai = $t1;
			this.set_speedScalar(this.get_speedScalar() * (1 + (this.color - 0) * 0.33));
			return ai;
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_Mitch.$ctor1(this.color, this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		get_shellState: function() {
			return this.shell;
		},
		get_points: function() {
			return 125;
		}
	}, $SuperBernieWorld_Entities_Entity, [$SuperBernieWorld_Entities_IShellEntity]);
	$SuperBernieWorld_Entities_Mitch.$ctor1.prototype = $SuperBernieWorld_Entities_Mitch.prototype;
	ss.initEnum($SuperBernieWorld_Entities_Mitch$Color, $asm, { green: 0, red: 1 });
	ss.initClass($SuperBernieWorld_Entities_ParaMitch, $asm, {
		stomped: function() {
			if (!this.$stomped) {
				this.set_applyPhysics(true);
				this.setAI($SuperBernieWorld_Entities_Mitch.prototype.createAI.call(this));
				this.setSprite($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 10 + this.color));
			}
			this.$stomped = true;
			return $SuperBernieWorld_Entities_Mitch.prototype.stomped.call(this);
		},
		tickAI: function() {
			$SuperBernieWorld_Entities_Mitch.prototype.tickAI.call(this);
		},
		createAI: function() {
			var ai = new $SuperBernieWorld_Entities_AIFlyer(this);
			ai.set_flightSpeedScalar(ai.get_flightSpeedScalar() * (1 + (this.color - 0) * 0.33));
			this.set_speedScalar(ai.get_flightSpeedScalar() / 2);
			return ai;
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_ParaMitch.$ctor1(this.color, this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		get_points: function() {
			return 250;
		}
	}, $SuperBernieWorld_Entities_Mitch, [$SuperBernieWorld_Entities_IShellEntity]);
	$SuperBernieWorld_Entities_ParaMitch.$ctor1.prototype = $SuperBernieWorld_Entities_ParaMitch.prototype;
	ss.initClass($SuperBernieWorld_Entities_Particle, $asm, {
		render: function(batch, screen) {
			var frame = {};
			var tex = this.sprite.getStanding$1(this.frame, frame);
			screen = Franca.Vector2.op_Subtraction(screen, new Franca.Vector2.$ctor3(tex.source.size.width / 2, tex.source.size.height)).floor();
			if (Math.floor(this.frame) > frame.$) {
				this.dead = true;
			}
			else {
				batch.draw$1(tex, screen, Franca.HdrColors.op_Implicit(Franca.Color.white), 0, 0);
			}
			this.frame += $SuperBernieWorld_Time.get_gameElapsed().ticks / 10000000 * this.speed;
		}
	});
	ss.initClass($SuperBernieWorld_Entities_Physics, $asm, {});
	ss.initClass($SuperBernieWorld_Entities_Republican, $asm, {
		throw$1: function(alpha) {
			this.$throwing = true;
			this.$throwAlpha = alpha * 2;
			if (alpha >= 1) {
				this.$throwing = false;
			}
		},
		getTex: function() {
			if (!ss.staticEquals(this.get_textureOverride(), null)) {
				return this.get_textureOverride()() || $SuperBernieWorld_Entities_Entity.prototype.getTex.call(this);
			}
			else if (this.$throwing) {
				return this.get_sprite().getPowerUp(this.$throwAlpha);
			}
			return $SuperBernieWorld_Entities_Entity.prototype.getTex.call(this);
		},
		createAI: function() {
			var $t1 = new $SuperBernieWorld_Entities_AIThrower(this);
			$t1.set_projectileSprite($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, 63));
			var throwAI = $t1;
			this.$applyDifficulty(throwAI);
			return throwAI;
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_Republican.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		setDifficulty: function(n) {
			this.$difficulty = n;
		},
		$applyDifficulty: function(throwAI) {
			var $state = 0;
			$sm1:
			for (;;) {
				switch ($state) {
					case 0: {
						if (ss.isValue(throwAI)) {
							if (this.$difficulty === 1) {
								$state = 1;
								continue $sm1;
							}
							else if (this.$difficulty === 2) {
								throwAI.set_projectileMinCount(throwAI.get_projectileMinCount() + 1);
								throwAI.set_projectileMaxCount(throwAI.get_projectileMaxCount() + 1);
								$state = 1;
								continue $sm1;
							}
							$state = -1;
							break $sm1;
						}
						$state = -1;
						break $sm1;
					}
					case 1: {
						throwAI.set_projectileMaxCount(throwAI.get_projectileMaxCount() + 2);
						$state = -1;
						break $sm1;
					}
					default: {
						break $sm1;
					}
				}
			}
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		get_points: function() {
			return 2500;
		},
		get_textureOverride: function() {
			return this.$2$TextureOverrideField;
		},
		set_textureOverride: function(value) {
			this.$2$TextureOverrideField = value;
		},
		get_isFlamingHotCheeto: function() {
			return false;
		}
	}, $SuperBernieWorld_Entities_Entity, [$SuperBernieWorld_Entities_IBoss, $SuperBernieWorld_Entities_IThrower]);
	$SuperBernieWorld_Entities_Republican.$ctor1.prototype = $SuperBernieWorld_Entities_Republican.prototype;
	ss.initClass($SuperBernieWorld_Entities_RoseProjectile, $asm, {
		die: function() {
			this.set_dead(true);
			$SuperBernieWorld_Entities_Entity.prototype.die.call(this);
			$SuperBernieWorld_Audio.playSound(44, 0.67, 1.5);
		},
		createAI: function() {
			return new $SuperBernieWorld_Entities_AIRoseProjectile(this);
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_RoseProjectile.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		getHitbox: function() {
			var hitSizeX = 0.75;
			var hitSizeY = 0.75;
			return Franca.Rectangle.fromLTRB(Math.floor((this.get_x() - hitSizeX / 2) * 16), Math.floor((this.get_y() - 1 + (1 - hitSizeY) / 2) * 16), Math.floor((this.get_x() + hitSizeX / 2) * 16), Math.floor((this.get_y() - (1 - hitSizeY) / 2) * 16));
		},
		get_points: function() {
			return 0;
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		get_isEnemy: function() {
			return false;
		}
	}, $SuperBernieWorld_Entities_Entity);
	$SuperBernieWorld_Entities_RoseProjectile.$ctor1.prototype = $SuperBernieWorld_Entities_RoseProjectile.prototype;
	ss.initClass($SuperBernieWorld_Entities_ShellState, $asm, {
		getTex: function(baseFunc, frame) {
			if (this.inShell) {
				if (this.bouncing) {
					frame.$ += $SuperBernieWorld_Time.get_gameElapsed().ticks / 10000000 * 12.5;
					return this.parent.get_sprite().getMoving(frame.$);
				}
				else {
					frame.$ += $SuperBernieWorld_Time.get_gameElapsed().ticks / 10000000 * 5;
					this.parent.set_renderOffset((this.$animateShell ? new Franca.Vector2.$ctor3(this.$baseRenderOffset.x, this.$baseRenderOffset.y - Math.floor(frame.$ / 0.5) % 2) : this.$baseRenderOffset));
					return this.parent.get_sprite().getStanding((this.$animateShell ? frame.$ : 0));
				}
			}
			return baseFunc();
		},
		bounce: function(dir) {
			if (this.bouncing) {
				return;
			}
			$SuperBernieWorld_Audio.playSound(43, 1, 1.25);
			this.$lastStompTime = $SuperBernieWorld_Time.get_game();
			this.bouncing = true;
			this.$animateShell = false;
			if (ss.isValue(this.$shellCo)) {
				this.$shellCo.dispose();
				this.$shellCo = null;
			}
			this.inShell = true;
			this.parent.set_renderOffset(this.$baseRenderOffset);
			if (dir === 1) {
				if (!this.parent.get_mirror()) {
					this.parent.flip();
				}
			}
			else if (dir === 3) {
				if (this.parent.get_mirror()) {
					this.parent.flip();
				}
			}
			this.$baseSpeed = this.parent.get_speedScalar();
			this.$baseGrav = this.parent.get_gravityScalar();
			this.$parentAI = this.parent.get_AI();
			this.parent.setAI(this.$bounceAI);
			this.parent.set_speedScalar(2.6);
			this.parent.set_gravityScalar(0.33);
		},
		stomped: function() {
			if (this.inShell) {
				if (this.bouncing) {
					this.parent.set_speedScalar(this.$baseSpeed);
					this.parent.set_gravityScalar(this.$baseGrav);
					this.parent.setAI(this.$parentAI);
					this.bouncing = false;
					this.inShell = true;
					this.$lastStompTime = $SuperBernieWorld_Time.get_game();
					this.$shellCo = Coroutines.Coroutine.create(ss.Int32).call(null, this.$shelled(), $SuperBernieWorld_Core.throwCoroutines);
					this.parent.move(0);
				}
			}
			else {
				this.$parentSprite = this.parent.get_sprite();
				this.parent.setSprite($SuperBernieWorld_Assets.get($SuperBernieWorld_Sprites_Sprite).call(null, this.$shellSprite));
				this.inShell = true;
				this.$lastStompTime = $SuperBernieWorld_Time.get_game();
				this.$shellCo = Coroutines.Coroutine.create(ss.Int32).call(null, this.$shelled(), $SuperBernieWorld_Core.throwCoroutines);
				this.parent.move(0);
			}
		},
		$shelled: function() {
			return new ss.IteratorBlockEnumerable(function() {
				return (function() {
					var $result, $state = 0, time;
					return new ss.IteratorBlockEnumerator(function() {
						$sm1:
						for (;;) {
							switch ($state) {
								case 0: {
									$state = -1;
									this.$baseRenderOffset = this.parent.get_renderOffset();
									time = $SuperBernieWorld_Time.get_game();
									$state = 1;
									continue $sm1;
								}
								case 1: {
									$state = -1;
									if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - time.ticks)).ticks < (new ss.TimeSpan(3.5 * 10000000)).ticks)) {
										$state = 2;
										continue $sm1;
									}
									$result = 1;
									$state = 1;
									return true;
								}
								case 2: {
									$state = -1;
									this.$animateShell = true;
									$state = 3;
									continue $sm1;
								}
								case 3: {
									$state = -1;
									if (!((new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - time.ticks)).ticks < (new ss.TimeSpan(5 * 10000000)).ticks)) {
										$state = 4;
										continue $sm1;
									}
									$result = 1;
									$state = 3;
									return true;
								}
								case 4: {
									$state = -1;
									this.inShell = false;
									this.$animateShell = false;
									this.parent.set_renderOffset(this.$baseRenderOffset);
									this.parent.setSprite(this.$parentSprite);
									$state = -1;
									break $sm1;
								}
								default: {
									break $sm1;
								}
							}
						}
						return false;
					}, function() {
						return $result;
					}, null, this);
				}).call(this);
			}, this);
		},
		update: function() {
			if (ss.isValue(this.$shellCo)) {
				this.$shellCo.resume(null);
			}
		},
		died: function() {
			if (this.bouncing) {
				this.parent.set_gravityScalar(this.$baseGrav);
			}
		},
		get_canStomp: function() {
			return (new ss.TimeSpan($SuperBernieWorld_Time.get_game().ticks - this.$lastStompTime.ticks)).ticks >= (new ss.TimeSpan(0.125 * 10000000)).ticks;
		}
	});
	ss.initClass($SuperBernieWorld_Entities_TikiTorch, $asm, {
		createAI: function() {
			return new $SuperBernieWorld_Entities_AIThrownProjectile(this);
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_TikiTorch.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		getHitbox: function() {
			var hitSizeX = 0.67;
			var hitSizeY = 0.67;
			return Franca.Rectangle.fromLTRB(Math.floor((this.get_x() - hitSizeX / 2) * 16), Math.floor((this.get_y() - 1 + (1 - hitSizeY) / 2) * 16), Math.floor((this.get_x() + hitSizeX / 2) * 16), Math.floor((this.get_y() - (1 - hitSizeY) / 2) * 16));
		},
		get_points: function() {
			return 0;
		},
		get_applyMovementPhysics: function() {
			return false;
		}
	}, $SuperBernieWorld_Entities_Entity);
	$SuperBernieWorld_Entities_TikiTorch.$ctor1.prototype = $SuperBernieWorld_Entities_TikiTorch.prototype;
	ss.initClass($SuperBernieWorld_Entities_TikiTorcher, $asm, {
		throw$1: function(alpha) {
			this.$throwing = true;
			this.$throwAlpha = alpha * 2;
			if (alpha >= 1) {
				this.$throwing = false;
			}
		},
		getTex: function() {
			if (this.$throwing && !this.get_dying()) {
				return this.get_sprite().getPowerUp(this.$throwAlpha);
			}
			return $SuperBernieWorld_Entities_Entity.prototype.getTex.call(this);
		},
		stomped: function() {
			this.set_gravityScalar(1);
			this.setAI(null);
			this.die();
			$SuperBernieWorld_Score.set_value($SuperBernieWorld_Score.get_value() + this.get_points());
			return true;
		},
		die: function() {
			this.set_gravityScalar(1);
			$SuperBernieWorld_Entities_Entity.prototype.die.call(this);
		},
		createAI: function() {
			var $t1 = new $SuperBernieWorld_Entities_AITorcher(this);
			$t1.set_projectileMaxCount(1);
			$t1.set_throwAnimFrames(30);
			$t1.set_minX(this.get_x() - 2);
			$t1.set_maxX(this.get_x() + 2);
			$t1.set_jumpPeriodScalar(0.75);
			$t1.set_throwPeriodScalar(0.5);
			return $t1;
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_TikiTorcher.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		setDifficulty: function(n) {
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		get_points: function() {
			return 375;
		}
	}, $SuperBernieWorld_Entities_Entity, [$SuperBernieWorld_Entities_IThrower]);
	$SuperBernieWorld_Entities_TikiTorcher.$ctor1.prototype = $SuperBernieWorld_Entities_TikiTorcher.prototype;
	ss.initClass($SuperBernieWorld_Entities_TileEntity, $asm, {
		getTex: function() {
			switch (this.$anim) {
				default: {
					return this.get_sprite().getStanding(this.frame);
				}
				case 1: {
					return this.get_sprite().getJumping(this.frame);
				}
				case 2: {
					return this.get_sprite().getMoving(this.frame);
				}
			}
		},
		bonk: function(map, tileX, tileY) {
			if (ss.isValue(this.get_AI()) && !this.get_AI().get_done() || this.$spent) {
				return;
			}
			for (var i = 0; i < map.entities.length; i++) {
				var ent = map.entities[i];
				var powerUp = ss.safeCast(ent, $SuperBernieWorld_Entities_PowerUp);
				var level = ss.safeCast(ent, $SuperBernieWorld_Entities_Lever);
				if (ss.isValue(powerUp) && powerUp.get_x() === this.get_x() && powerUp.get_y() === this.get_y()) {
					powerUp.activate();
				}
			}
			this.set_AI(null);
			this.set_activated(false);
			this.activate();
			this.$spent = true;
		},
		createAI: function() {
			return new $SuperBernieWorld_Entities_AITileEntity(this);
		},
		clone: function() {
			throw new ss.NotImplementedException();
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		setAnim: function(anim) {
			this.$anim = anim;
		},
		get_isEnemy: function() {
			return false;
		}
	}, $SuperBernieWorld_Entities_Entity);
	ss.initEnum($SuperBernieWorld_Entities_TileEntity$Animation, $asm, { normal: 0, bonked: 1, spent: 2 });
	ss.initClass($SuperBernieWorld_Entities_Trashman, $asm, {
		die: function() {
			this.set_dead(true);
			$SuperBernieWorld_Audio.playSound(43, 1, 1);
			this.set_deathAudioPlayed(true);
		},
		createAI: function() {
			return new $SuperBernieWorld_Entities_AIPopup(this);
		},
		clone: function() {
			return new $SuperBernieWorld_Entities_Trashman.$ctor1(this.data, new Franca.Vector2.$ctor3(this.get_x(), this.get_y()));
		},
		get_applyMovementPhysics: function() {
			return false;
		},
		get_points: function() {
			return 200;
		}
	}, $SuperBernieWorld_Entities_Entity);
	$SuperBernieWorld_Entities_Trashman.$ctor1.prototype = $SuperBernieWorld_Entities_Trashman.prototype;
	ss.initClass($SuperBernieWorld_Maps_EntityLoadException, $asm, {}, ss.Exception);
	$SuperBernieWorld_Maps_EntityLoadException.$ctor1.prototype = $SuperBernieWorld_Maps_EntityLoadException.$ctor2.prototype = $SuperBernieWorld_Maps_EntityLoadException.$ctor3.prototype = $SuperBernieWorld_Maps_EntityLoadException.$ctor4.prototype = $SuperBernieWorld_Maps_EntityLoadException.prototype;
	ss.initClass($SuperBernieWorld_Maps_Map, $asm, {
		makeInstance: function() {
			var $t1 = new $SuperBernieWorld_Maps_MapInstance();
			$t1.width = this.width;
			$t1.height = this.height;
			$t1.tilesets = Enumerable.from(this.tilesets).toArray();
			$t1.layers = Enumerable.from(this.layers).select(function(l) {
				return l.clone$1();
			}).toArray();
			$t1.entities = Enumerable.from(this.entities).select(function(e) {
				return e.clone();
			}).toArray();
			var ret = $t1;
			ret.init();
			return ret;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		finalizeContent: function() {
			if (Franca.JsonValue.op_Equality(this.$jsonData, null)) {
				return;
			}
			if (ss.isValue(this.tilesets)) {
				for (var $t1 = 0; $t1 < this.tilesets.length; $t1++) {
					var info = this.tilesets[$t1];
					if (ss.isValue(info.tileset) && !info.tileset.get_loaded()) {
						return;
					}
				}
			}
			$SuperBernieWorld_Maps_TiledMapReader.loadFromJson$1(this.$jsonData, this);
			this.set_ready(true);
			if (!ss.staticEquals(this.$1$OnLoadField, null)) {
				this.$1$OnLoadField(this);
			}
		},
		load: function(content, file, name, args) {
			this.set_name(name);
			this.set_filename(file);
			if (ss.startsWithString(this.get_filename(), content.get_contentRoot())) {
				this.set_filename(this.get_filename().substring(content.get_contentRoot().length + 1));
			}
			Franca.File.load(Franca.Text.TextFile).call(null, file, ss.mkdel(this, function(f) {
				var json = ss.cast(f, ss.makeGenericType(Franca.FileResult$1, [Franca.Text.TextFile])).get_value().get_contents();
				this.$jsonData = Franca.Serialization.Json.parse(json);
				$SuperBernieWorld_Maps_TiledMapReader.loadTilesets(this.$jsonData, this);
				this.finalizeContent();
			}), null);
		},
		get_loaded: function() {
			return this.$1$LoadedField;
		},
		set_loaded: function(value) {
			this.$1$LoadedField = value;
		},
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		get_ready: function() {
			return this.$1$ReadyField;
		},
		set_ready: function(value) {
			this.$1$ReadyField = value;
		},
		get_filename: function() {
			return this.$1$FilenameField;
		},
		set_filename: function(value) {
			this.$1$FilenameField = value;
		}
	}, null, [Franca.IAsset]);
	ss.initClass($SuperBernieWorld_Maps_MapInstance, $asm, {
		init: function() {
			this.flagX = this.width - 0.5;
			this.$convertStarBlocks();
			this.$convertFlag();
			this.$convertCoins();
			this.lever = ss.safeCast(Enumerable.from(this.entities).where(function(e) {
				return ss.isInstanceOfType(e, $SuperBernieWorld_Entities_Lever);
			}).firstOrDefault(null, ss.getDefaultValue($SuperBernieWorld_Entities_Entity)), $SuperBernieWorld_Entities_Lever);
			for (var $t1 = 0; $t1 < this.entities.length; $t1++) {
				var ent = this.entities[$t1];
				ent.set_map(this);
			}
		},
		$convertCoins: function() {
			var $t1 = new $SuperBernieWorld_Maps_MapLayer();
			$t1.area = new Franca.Rectangle.$ctor3(0, 0, this.width, this.height);
			$t1.blocks = false;
			$t1.foreground = false;
			$t1.tiles = ss.multidimArray(ss.getDefaultValue($SuperBernieWorld_Maps_TileID), this.width, this.height);
			$t1.isCoinLayer = true;
			var coinLayer = $t1;
			this.layers.push(coinLayer);
			for (var $t2 = 0; $t2 < this.layers.length; $t2++) {
				var layer = this.layers[$t2];
				for (var y = 0; y < this.height; y++) {
					for (var x = 0; x < this.width; x++) {
						if (layer.area.contains$2(x, y)) {
							var tile = ss.arrayGet(layer.tiles, x - layer.area.location.x, y - layer.area.location.y);
							if (ss.Nullable$1.liftne($SuperBernieWorld_Maps_TileID.op_Inequality, tile, null)) {
								if (tile.tile === 38) {
									ss.arraySet(layer.tiles, x, y, ss.getDefaultValue($SuperBernieWorld_Maps_TileID));
									ss.arraySet(coinLayer.tiles, x, y, $SuperBernieWorld_Core.get_coinTile());
								}
							}
						}
					}
				}
			}
		},
		$convertFlag: function() {
			var flagY = -1;
			var flagTileset = this.tilesets[0];
			var flagTilesetIndex = 0;
			for (var i = 0; i < this.tilesets.length; i++) {
				if (ss.isValue(this.tilesets[i].tileset) && ss.isValue(this.tilesets[i].tileset.get_filename()) && this.tilesets[i].tileset.get_filename().indexOf('outdoor') !== -1) {
					flagTileset = this.tilesets[i];
					flagTilesetIndex = i;
					break;
				}
			}
			if (ss.isValue(flagTileset.tileset)) {
				for (var $t1 = 0; $t1 < this.layers.length; $t1++) {
					var layer = this.layers[$t1];
					for (var y = 0; y < this.height; y++) {
						for (var x = 0; x < this.width; x++) {
							if (layer.area.contains$2(x, y)) {
								var tile = ss.arrayGet(layer.tiles, x - layer.area.location.x, y - layer.area.location.y);
								if (tile.tileset === flagTilesetIndex) {
									if (tile.tile === $SuperBernieWorld_Maps_MapInstance.$flagBase) {
										this.flagX = x + 0.5;
										this.flagPoleBaseY = flagY = y;
									}
									else if (ss.contains($SuperBernieWorld_Maps_MapInstance.flagTiles, tile.tile)) {
										ss.arraySet(layer.tiles, x, y, ss.getDefaultValue($SuperBernieWorld_Maps_TileID));
									}
								}
							}
						}
					}
				}
				if (flagY > -1) {
					var area = new Franca.Rectangle.$ctor3(Math.floor(this.flagX) - 1, 0, 2, this.height);
					var $t2 = new $SuperBernieWorld_Maps_MapLayer();
					$t2.area = area;
					$t2.blocks = false;
					$t2.tiles = ss.multidimArray(ss.getDefaultValue($SuperBernieWorld_Maps_TileID), area.size.width, area.size.height);
					var flagLayer = $t2;
					for (var y1 = 4; y1 < flagY; y1++) {
						ss.arraySet(flagLayer.tiles, 1, y1, new $SuperBernieWorld_Maps_TileID.$ctor1(ss.indexOf(this.tilesets, flagTileset), $SuperBernieWorld_Maps_MapInstance.$flagPole));
					}
					ss.arraySet(flagLayer.tiles, 1, 3, new $SuperBernieWorld_Maps_TileID.$ctor1(ss.indexOf(this.tilesets, flagTileset), $SuperBernieWorld_Maps_MapInstance.$flagTop));
					this.layers.push(flagLayer);
					var sourceRect = flagTileset.tileset.get_texture().source;
					var $t3 = [];
					$t3.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(flagTileset.tileset.get_texture().baseTex, sourceRect.location.x, sourceRect.location.y, 8, 2, 2, 1));
					this.flagSprite = new $SuperBernieWorld_Sprites_Sprite(2, 1, $t3, null, null, null, null, null, null, null, null);
					this.flagY = 5;
				}
			}
		},
		$convertStarBlocks: function() {
			for (var $t1 = 0; $t1 < this.layers.length; $t1++) {
				var layer = this.layers[$t1];
				var tile;
				if (!layer.blocks || ss.Nullable$1.lifteq($SuperBernieWorld_Maps_TileID.op_Equality, tile = Enumerable.from(layer.tiles).select(function(x) {
					return ss.cast(x, $SuperBernieWorld_Maps_TileID);
				}).where(function(t) {
					return $SuperBernieWorld_Maps_TileID.op_Inequality(t, ss.getDefaultValue($SuperBernieWorld_Maps_TileID));
				}).firstOrDefault(null, ss.getDefaultValue($SuperBernieWorld_Maps_TileID)), null)) {
					continue;
				}
				var tilesetTexture = null;
				var tileset = ss.getDefaultValue($SuperBernieWorld_Maps_TilesetInfo);
				for (var $t2 = 0; $t2 < this.tilesets.length; $t2++) {
					var ts = this.tilesets[$t2];
					if (ss.isNullOrUndefined(ts.tileset)) {
						continue;
					}
					var $t3 = ts.tileset.getEnumerator();
					try {
						while ($t3.moveNext()) {
							var t1 = $t3.current();
							if (ss.isValue(t1) && t1.id === tile.tile && ss.indexOf(this.tilesets, ts) === tile.tileset) {
								tilesetTexture = ts.tileset.get_texture();
								tileset = ts;
								break;
							}
						}
					}
					finally {
						$t3.dispose();
					}
					if (ss.isValue(tilesetTexture)) {
						break;
					}
				}
				if (ss.isNullOrUndefined(tilesetTexture)) {
					continue;
				}
				var tsBaseTex = tilesetTexture.baseTex;
				var tsSourceRect = tilesetTexture.source;
				var $t4 = [];
				$t4.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(tsBaseTex, tsSourceRect.location.x, tsSourceRect.location.y, 0, 1, 1, 1));
				$t4.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(tsBaseTex, tsSourceRect.location.x, tsSourceRect.location.y, 0, 1, 1, 1));
				$t4.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(tsBaseTex, tsSourceRect.location.x, tsSourceRect.location.y, 0, 1, 1, 1));
				$t4.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(tsBaseTex, tsSourceRect.location.x, tsSourceRect.location.y, 0, 1, 1, 1));
				$t4.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(tsBaseTex, tsSourceRect.location.x, tsSourceRect.location.y, 0, 1, 1, 1));
				$t4.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(tsBaseTex, tsSourceRect.location.x, tsSourceRect.location.y, 0, 1, 1, 1));
				$t4.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(tsBaseTex, tsSourceRect.location.x, tsSourceRect.location.y, 1, 1, 1, 1));
				$t4.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(tsBaseTex, tsSourceRect.location.x, tsSourceRect.location.y, 2, 1, 1, 1));
				$t4.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(tsBaseTex, tsSourceRect.location.x, tsSourceRect.location.y, 3, 1, 1, 1));
				var $t5 = [];
				$t5.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(tsBaseTex, tsSourceRect.location.x, tsSourceRect.location.y, 4, 1, 1, 1));
				var $t6 = [];
				$t6.push($SuperBernieWorld_Sprites_Sprite.makeFrame$1(tsBaseTex, tsSourceRect.location.x, tsSourceRect.location.y, 5, 1, 1, 1));
				var starBlockSprite = new $SuperBernieWorld_Sprites_Sprite(1, 1, $t4, $t6, null, $t5, null, null, null, null, null);
				for (var y = 0; y < this.height; y++) {
					for (var x = 0; x < this.width; x++) {
						if (layer.area.contains$2(x, y)) {
							var tx = x - layer.area.location.x;
							var ty = y - layer.area.location.y;
							if (ss.Nullable$1.liftne($SuperBernieWorld_Maps_TileID.op_Inequality, ss.arrayGet(layer.tiles, tx, ty), null) && ss.arrayGet(layer.tiles, tx, ty).tile >= $SuperBernieWorld_Core.starBlockMinID && ss.arrayGet(layer.tiles, tx, ty).tile <= $SuperBernieWorld_Core.starBlockMaxID) {
								this.entities.push(new $SuperBernieWorld_Entities_TileEntity(this, x, y, starBlockSprite));
								ss.arraySet(layer.tiles, tx, ty, new $SuperBernieWorld_Maps_TileID.$ctor1(ss.arrayGet(layer.tiles, tx, ty).tileset, Enumerable.from(tileset.tileset).last().id));
							}
						}
					}
				}
			}
		}
	});
	ss.initClass($SuperBernieWorld_Maps_MapLayer, $asm, {
		clone$1: function() {
			var $t1 = new $SuperBernieWorld_Maps_MapLayer();
			$t1.blocks = this.blocks;
			$t1.scrollSpeed = this.scrollSpeed;
			$t1.foreground = this.foreground;
			$t1.isCoinLayer = this.isCoinLayer;
			$t1.area = this.area;
			$t1.name = this.name;
			var ret = $t1;
			ret.tiles = ss.multidimArray(ss.getDefaultValue($SuperBernieWorld_Maps_TileID), ss.arrayLength(this.tiles, 0), ss.arrayLength(this.tiles, 1));
			for (var y = 0; y < ss.arrayLength(this.tiles, 1); y++) {
				for (var x = 0; x < ss.arrayLength(this.tiles, 0); x++) {
					ss.arraySet(ret.tiles, x, y, ss.arrayGet(this.tiles, x, y));
				}
			}
			return ret;
		},
		clone: function() {
			return this.clone$1();
		}
	}, null, [System.ICloneable]);
	ss.initClass($SuperBernieWorld_Maps_ObjectTile, $asm, {});
	ss.initClass($SuperBernieWorld_Maps_Tile, $asm, {
		get_source: function() {
			if (this.$source.length === 1) {
				return this.$source[0];
			}
			else {
				return this.$source[Franca.Calc.mod$3(ss.Int32.trunc($SuperBernieWorld_Time.get_game().ticks / 10000000 * 6), this.$source.length)];
			}
		}
	});
	ss.initClass($SuperBernieWorld_Maps_TiledMapReader, $asm, {});
	ss.initClass($SuperBernieWorld_Maps_TileID, $asm, {
		equals: function(obj) {
			if (ss.isNullOrUndefined(obj)) {
				return false;
			}
			var b = ss.safeCast(obj, $SuperBernieWorld_Maps_TileID);
			if (ss.isNullOrUndefined(b)) {
				return false;
			}
			return ss.unbox(b).tileset === this.tileset && ss.unbox(b).tile === this.tile;
		},
		equalsT: function(b) {
			return b.tileset === this.tileset && b.tile === this.tile;
		},
		getHashCode: function() {
			return this.tileset << 16 | this.tile;
		}
	}, null, [ss.IEquatable]);
	$SuperBernieWorld_Maps_TileID.$ctor1.prototype = $SuperBernieWorld_Maps_TileID.prototype;
	$SuperBernieWorld_Maps_TileID.__class = false;
	ss.initClass($SuperBernieWorld_Maps_Tileset, $asm, {
		$init: function(json, texture) {
			this.$initFrom(Franca.Serialization.Json.parse(json), texture);
		},
		$initFrom: function(data, texture) {
			this.$texture = texture;
			if (ss.isValue(this.$texture)) {
				this.$tiles = new Array(Franca.JsonValue.op_Implicit$5(data.get_item('tilecount')));
			}
			var tileWidth = Franca.JsonValue.op_Implicit$5(data.get_item('tilewidth'));
			var tileHeight = Franca.JsonValue.op_Implicit$5(data.get_item('tileheight'));
			var columns = Franca.JsonValue.op_Implicit$5(data.get_item('columns'));
			var margin = Franca.JsonValue.op_Implicit$5(data.get_item('margin'));
			var spacing = Franca.JsonValue.op_Implicit$5(data.get_item('spacing'));
			var tilesetProps = data.get$1('tileproperties', true);
			if (ss.isValue(this.$texture)) {
				var x = 0, y = 0;
				for (var i = 0; i < this.$tiles.length; i++) {
					this.$tiles[i] = new $SuperBernieWorld_Maps_Tile(i, this, [new Franca.Rectangle.$ctor3(margin + x * (tileWidth + spacing), margin + y * (tileHeight + spacing), tileWidth, tileHeight)]);
					var pixels = texture.getPixelData(this.$tiles[i].get_source());
					var hasNonTransparentPixels = false;
					if (i === this.$tiles.length - 1) {
						hasNonTransparentPixels = true;
					}
					else {
						for (var py = 0; py < pixels.height; py++) {
							for (var px = 0; px < pixels.width; px++) {
								if (pixels.data[py * pixels.stride + px * 4 + 3] > 0) {
									hasNonTransparentPixels = true;
								}
							}
						}
					}
					if (!hasNonTransparentPixels) {
						this.$tiles[i] = null;
					}
					x++;
					if (x >= columns) {
						x = 0;
						y++;
					}
				}
			}
			else {
				this.isObjectTileset = true;
				this.objectTiles = new (ss.makeGenericType(ss.Dictionary$2, [ss.Int32, $SuperBernieWorld_Maps_ObjectTile]))();
				var count = Franca.JsonValue.op_Implicit$5(data.get_item('tilecount'));
				var tiles = data.get_item('tiles');
				var properties = data.get$1('tileproperties', true);
				var $t1 = ss.getEnumerator(tiles.get_pairs());
				try {
					while ($t1.moveNext()) {
						var kvp = $t1.current();
						var key = System.ObjectExtensions.toStringInvariant$1(String).call(null, kvp.key);
						var index = {};
						if (!Franca.Calc.tryParseInt(key, index)) {
							throw new Franca.FileLoadException.$ctor1(ss.formatString("Error in object tileset '{0}': key '{1}' was not an integer", ss.coalesce(Franca.JsonValue.op_Implicit$k(data.get$1('name', true)), '<null>'), key));
						}
						this.$objectTileCount = Math.max(index.$ + 1, this.$objectTileCount);
						if (tiles.containsKey(key)) {
							var objTile = new $SuperBernieWorld_Maps_ObjectTile(Franca.JsonValue.op_Implicit$k(tiles.get_item(key).get_item('image')), Franca.JsonValue.op_Implicit$5(tiles.get_item(key).get_item('imagewidth')), Franca.JsonValue.op_Implicit$5(tiles.get_item(key).get_item('imageheight')), Franca.JsonValue.op_Implicit$k((tiles.get_item(key).containsKey('type') ? tiles.get_item(key).get_item('type') : null)));
							if (!properties.get_isNull() && properties.containsKey(key)) {
								var props = properties.get_item(key);
								objTile.isAligned = (props.containsKey('aligned') ? Franca.JsonValue.op_Implicit$1(props.get_item('aligned')) : false);
								objTile.defaultData = (props.containsKey('data') ? Franca.Serialization.Json.parse(Franca.JsonValue.op_Implicit$k(props.get_item('data'))) : Franca.JsonValue.get_dict());
							}
							this.objectTiles.set_item(index.$, objTile);
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
			this.$initialized = true;
		},
		add_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateCombine(this.$1$OnLoadField, value);
		},
		remove_onLoad: function(value) {
			this.$1$OnLoadField = ss.delegateRemove(this.$1$OnLoadField, value);
		},
		finalizeContent: function() {
			var isLoaded = ss.mkdel(this, function() {
				if (this.$initialized) {
					if (this.isObjectTileset) {
						return true;
					}
					else {
						return ss.isValue(this.$texture) && this.$texture.get_loaded();
					}
				}
				return false;
			});
			if (!this.$loaded && isLoaded()) {
				this.$loaded = true;
				if (!ss.staticEquals(this.$1$OnLoadField, null)) {
					this.$1$OnLoadField(this);
				}
			}
		},
		load: function(content, file, name, args) {
			this.set_name(name);
			this.set_filename(Franca.Platform.getFileName(file));
			Franca.File.load(Franca.Text.TextFile).call(null, file, ss.mkdel(this, function(f) {
				var json = ss.cast(f, ss.makeGenericType(Franca.FileResult$1, [Franca.Text.TextFile])).get_value().get_contents();
				var data = Franca.Serialization.Json.parse(json);
				if (data.containsKey('image')) {
					var texture = content.loadTexture(Franca.JsonValue.op_Implicit$k(data.get_item('image')), true, true, false);
					texture.add_onLoad(ss.mkdel(this, function(a) {
						this.$initFrom(data, new Franca.SubTexture(texture));
					}));
				}
				else {
					this.$initFrom(data, null);
				}
			}), null);
		},
		getEnumerator: function() {
			var $result, $state = 0, $t1, tile;
			return new ss.IteratorBlockEnumerator(function() {
				$sm1:
				for (;;) {
					switch ($state) {
						case 0: {
							$state = -1;
							if (ss.isNullOrUndefined(this.$tiles)) {
								$state = -1;
								break $sm1;
							}
							$t1 = 0;
							$state = 1;
							continue $sm1;
						}
						case 1: {
							$state = -1;
							if (!($t1 < this.$tiles.length)) {
								$state = -1;
								break $sm1;
							}
							tile = this.$tiles[$t1];
							$result = tile;
							$state = 2;
							return true;
						}
						case 2: {
							$state = -1;
							$t1++;
							$state = 1;
							continue $sm1;
						}
						default: {
							break $sm1;
						}
					}
				}
				return false;
			}, function() {
				return $result;
			}, null, this);
		},
		get_loaded: function() {
			return this.$loaded;
		},
		get_filename: function() {
			return this.$1$FilenameField;
		},
		set_filename: function(value) {
			this.$1$FilenameField = value;
		},
		get_name: function() {
			return this.$1$NameField;
		},
		set_name: function(value) {
			this.$1$NameField = value;
		},
		get_ready: function() {
			return this.get_loaded();
		},
		get_count: function() {
			return (this.isObjectTileset ? this.$objectTileCount : this.$tiles.length);
		},
		get_item: function(index) {
			return this.$tiles[index];
		},
		set_item: function(index, value) {
			this.$tiles[index] = value;
		},
		get_texture: function() {
			return this.$texture;
		}
	}, null, [Franca.IAsset, ss.IEnumerable, ss.IEnumerable]);
	$SuperBernieWorld_Maps_Tileset.$ctor1.prototype = $SuperBernieWorld_Maps_Tileset.prototype;
	ss.initClass($SuperBernieWorld_Maps_TilesetInfo, $asm, {
		getHashCode: function() {
			var h = this.firstGlobalID;
			h = h * 397 ^ (this.tileset ? ss.getHashCode(this.tileset) : 0);
			return h;
		},
		equals: function(o) {
			if (!ss.isInstanceOfType(o, $SuperBernieWorld_Maps_TilesetInfo)) {
				return false;
			}
			return this.firstGlobalID === o.firstGlobalID && ss.equals(this.tileset, o.tileset);
		}
	});
	$SuperBernieWorld_Maps_TilesetInfo.$ctor1.prototype = $SuperBernieWorld_Maps_TilesetInfo.prototype;
	$SuperBernieWorld_Maps_TilesetInfo.__class = false;
	ss.initClass($SuperBernieWorld_Sprites_Sprite, $asm, {
		getStanding: function(frame) {
			var f = {};
			return this.getStanding$1(frame, f);
		},
		getStanding$1: function(frame, f) {
			if (ss.isNullOrUndefined(this.$standing) || this.$standing.length === 0) {
				var frames = this.$moving;
				f.$ = Franca.Calc.mod$3(Math.floor(frame), frames.length);
				return frames[f.$];
			}
			{
				var frames1 = this.$standing;
				f.$ = Franca.Calc.mod$3(Math.floor(frame), frames1.length);
				return frames1[f.$];
			}
		},
		getIdle: function(frame) {
			var f = {};
			return this.getIdle$1(frame, f);
		},
		getIdle$1: function(frame, f) {
			if (ss.isNullOrUndefined(this.$idle) || this.$idle.length === 0) {
				return this.getStanding$1(frame, f);
			}
			var frames = this.$idle;
			f.$ = Franca.Calc.mod$3(Math.floor(frame), frames.length);
			return frames[f.$];
		},
		getCrouching: function(frame) {
			var f = {};
			return this.getCrouching$1(frame, f);
		},
		getCrouching$1: function(frame, f) {
			if (ss.isNullOrUndefined(this.$crouching) || this.$crouching.length === 0) {
				return this.getStanding$1(frame, f);
			}
			var frames = this.$crouching;
			f.$ = Franca.Calc.mod$3(Math.floor(frame), frames.length);
			return frames[f.$];
		},
		getMoving: function(frame) {
			var f = {};
			return this.getMoving$1(frame, f);
		},
		getMoving$1: function(frame, f) {
			if (ss.isNullOrUndefined(this.$moving) || this.$moving.length === 0) {
				return this.getStanding$1(frame, f);
			}
			var frames = this.$moving;
			f.$ = Franca.Calc.mod$3(Math.floor(frame), frames.length);
			return frames[f.$];
		},
		getSkidding: function(frame) {
			var f = {};
			return this.getSkidding$1(frame, f);
		},
		getSkidding$1: function(frame, f) {
			if (ss.isNullOrUndefined(this.$skidding) || this.$skidding.length === 0) {
				return this.getMoving$1(frame, f);
			}
			var frames = this.$skidding;
			f.$ = Franca.Calc.mod$3(Math.floor(frame), frames.length);
			return frames[f.$];
		},
		getJumping: function(frame) {
			var f = {};
			return this.getJumping$1(frame, f);
		},
		getJumping$1: function(frame, f) {
			if (ss.isNullOrUndefined(this.$jumping) || this.$jumping.length === 0) {
				return this.getMoving$1(frame, f);
			}
			var frames = this.$jumping;
			f.$ = Franca.Calc.mod$3(Math.floor(frame), frames.length);
			return frames[f.$];
		},
		getFalling: function(frame) {
			var f = {};
			return this.getFalling$1(frame, f);
		},
		getFalling$1: function(frame, f) {
			if (ss.isNullOrUndefined(this.$falling) || this.$falling.length === 0) {
				return this.getJumping$1(frame, f);
			}
			var frames = this.$falling;
			f.$ = Franca.Calc.mod$3(Math.floor(frame), frames.length);
			return frames[f.$];
		},
		getDying: function(frame) {
			var f = {};
			return this.getDying$1(frame, f);
		},
		getDying$1: function(frame, f) {
			if (ss.isNullOrUndefined(this.$dying) || this.$dying.length === 0) {
				return this.getStanding$1(frame, f);
			}
			var frames = this.$dying;
			f.$ = Franca.Calc.mod$3(Math.floor(frame), frames.length);
			return frames[f.$];
		},
		getPowerUp: function(frame) {
			var f = {};
			return this.getPowerUp$1(frame, f);
		},
		getPowerUp$1: function(frame, f) {
			if (ss.isNullOrUndefined(this.$powerUp) || this.$powerUp.length === 0) {
				return this.getStanding$1(frame, f);
			}
			var frames = this.$powerUp;
			f.$ = Franca.Calc.mod$3(Math.floor(frame), frames.length);
			return frames[f.$];
		},
		getPowerDown: function(frame) {
			var f = {};
			return this.getPowerDown$1(frame, f);
		},
		getPowerDown$1: function(frame, f) {
			if (ss.isNullOrUndefined(this.$powerUp) || this.$powerUp.length === 0) {
				return this.getStanding$1(frame, f);
			}
			var frames = this.$powerUp;
			f.$ = Franca.Calc.mod$3(Math.floor(-frame - 0.0001), frames.length);
			return frames[f.$];
		},
		get_sizeX: function() {
			return this.$1$SizeXField;
		},
		set_sizeX: function(value) {
			this.$1$SizeXField = value;
		},
		get_sizeY: function() {
			return this.$1$SizeYField;
		},
		set_sizeY: function(value) {
			this.$1$SizeYField = value;
		},
		get_powerUpFrames: function() {
			return (ss.isValue(this.$powerUp) ? this.$powerUp.length : 8);
		}
	});
	(function() {
		$SuperBernieWorld_Time.$1$GameField = ss.getDefaultValue(ss.TimeSpan);
		$SuperBernieWorld_Time.$1$RealField = ss.getDefaultValue(ss.TimeSpan);
		$SuperBernieWorld_Time.$1$GameElapsedField = ss.getDefaultValue(ss.TimeSpan);
		$SuperBernieWorld_Time.$1$RealElapsedField = ss.getDefaultValue(ss.TimeSpan);
	})();
	(function() {
		$SuperBernieWorld_Score.$value = 0;
		$SuperBernieWorld_Score.$votes = 0;
	})();
	(function() {
		$SuperBernieWorld_Entities_AIThrower.$jumpSeconds = 1;
		$SuperBernieWorld_Entities_AIThrower.defaultJumpHeight = 3.25;
		$SuperBernieWorld_Entities_AIThrower.$throwSeconds = 0.75;
	})();
	(function() {
		$SuperBernieWorld_Entities_Entity.$idleRandom = new Franca.RNG();
		$SuperBernieWorld_Entities_Entity.$jumpBuffer = new ss.TimeSpan(500000);
	})();
	(function() {
		$SuperBernieWorld_Entities_Bernie.invulTimeSeconds = 2;
	})();
	(function() {
		$SuperBernieWorld_Core.throwCoroutines = false;
		$SuperBernieWorld_Core.$1$GraphicsDeviceField = null;
		$SuperBernieWorld_Core.$1$ContainerField = null;
		$SuperBernieWorld_Core.$1$ContentField = null;
		$SuperBernieWorld_Core.$1$BernieStateField = 0;
		$SuperBernieWorld_Core.$1$RandomField = null;
		$SuperBernieWorld_Core.$1$CoinTileField = ss.getDefaultValue($SuperBernieWorld_Maps_TileID);
		$SuperBernieWorld_Core.$currentTarget = null;
		$SuperBernieWorld_Core.$lastTarget = null;
		$SuperBernieWorld_Core.$renderTargets = null;
		$SuperBernieWorld_Core.$renderTargetIndex = 0;
		$SuperBernieWorld_Core.tileSize = 16;
		$SuperBernieWorld_Core.screenWidth = 256;
		$SuperBernieWorld_Core.screenHeight = 240;
		$SuperBernieWorld_Core.drawTilesX = 18;
		$SuperBernieWorld_Core.killPlaneY = 19;
		$SuperBernieWorld_Core.starBlockMinID = 32;
		$SuperBernieWorld_Core.starBlockMaxID = 35;
		$SuperBernieWorld_Core.chrLeft = 57600;
		$SuperBernieWorld_Core.chrRight = 57601;
		$SuperBernieWorld_Core.chrDown = 57602;
		$SuperBernieWorld_Core.chrUp = 57603;
		$SuperBernieWorld_Core.chrAltBtn = 57604;
		$SuperBernieWorld_Core.chrMainBtn = 57605;
		$SuperBernieWorld_Core.chrAltBtn2 = 57606;
		$SuperBernieWorld_Core.chrMainBtn2 = 57607;
		$SuperBernieWorld_Core.chrLeft2 = 57608;
		$SuperBernieWorld_Core.chrRight2 = 57609;
		$SuperBernieWorld_Core.chrDown2 = 57610;
		$SuperBernieWorld_Core.chrFullscreen = 57631;
		$SuperBernieWorld_Core.$1$GodModeField = false;
		$SuperBernieWorld_Core.$1$AntiGravField = false;
		$SuperBernieWorld_Core.$coroutines = new Coroutines.CoroutinePool();
		$SuperBernieWorld_Core.$isRendering = false;
		$SuperBernieWorld_Core.$renderTweens = new $SuperBernieWorld_RenderTweenManager();
		$SuperBernieWorld_Core.$1$OnSpawnEntityField = null;
		$SuperBernieWorld_Core.$1$OnSpawnParticleField = null;
		$SuperBernieWorld_Core.$controllerType = 0;
		$SuperBernieWorld_Core.$mainFontXbox = null;
		$SuperBernieWorld_Core.$mainFontKeyboard = null;
		$SuperBernieWorld_Core.$mainFontNintendo = null;
		$SuperBernieWorld_Core.$mainFontPlayStation = null;
		$SuperBernieWorld_Core.$localStorageRoot = 'SuperBernieWorld';
		$SuperBernieWorld_Core.$localStorage = null;
	})();
	(function() {
		$SuperBernieWorld_Assets.$content = null;
		$SuperBernieWorld_Assets.$assets = null;
		$SuperBernieWorld_Assets.audio = null;
		$SuperBernieWorld_Assets.soundManager = null;
		$SuperBernieWorld_Assets.musicManager = null;
		$SuperBernieWorld_Assets.maps = null;
		var $t1 = [];
		$t1.push('New Mexico');
		$t1.push('Louisiana');
		$t1.push('Texas');
		$t1.push('Pennsylvania');
		$t1.push('Michigan');
		$t1.push('Ohio');
		$t1.push('Illinois');
		$t1.push('Missouri');
		$t1.push('Kentucky');
		$t1.push('Florida');
		$t1.push('New York');
		$t1.push('D.C.');
		$SuperBernieWorld_Assets.mapNames = $t1;
		var $t1 = [];
		$t1.push('New Mex.');
		$t1.push('Louisiana');
		$t1.push('Texas');
		$t1.push('Penn.');
		$t1.push('Michigan');
		$t1.push('Ohio');
		$t1.push('Illinois');
		$t1.push('Missouri');
		$t1.push('Kentucky');
		$t1.push('Florida');
		$t1.push('New York');
		$t1.push('D.C.');
		$SuperBernieWorld_Assets.mapNamesShort = $t1;
		var $t1 = [];
		$t1.push('Ted Cruz');
		$t1.push('Jim Jordan');
		$t1.push('Mitch McConnell');
		$t1.push('Donald Trump');
		$SuperBernieWorld_Assets.gopNames = $t1;
	})();
	(function() {
		$SuperBernieWorld_Audio.lastMusic = 0;
		$SuperBernieWorld_Audio.$1$ContextField = null;
		$SuperBernieWorld_Audio.$1$MusicField = null;
		$SuperBernieWorld_Audio.$1$EffectsField = null;
	})();
	(function() {
		$SuperBernieWorld_Entities_Physics.ticksPerFrame = 4;
		$SuperBernieWorld_Entities_Physics.stepsPerMove = 2;
		$SuperBernieWorld_Entities_Physics.gravity = 0.006;
		$SuperBernieWorld_Entities_Physics.maxGrav = 0.4;
		$SuperBernieWorld_Entities_Physics.accel = 0.001;
		$SuperBernieWorld_Entities_Physics.maxAccel = 0.1;
		$SuperBernieWorld_Entities_Physics.$ticks = 0;
		$SuperBernieWorld_Entities_Physics.$timeStep = new ss.TimeSpan(41666);
		$SuperBernieWorld_Entities_Physics.$blockingLayers = [];
	})();
	(function() {
		$SuperBernieWorld_Maps_TiledMapReader.$placeholderIdGen = new Franca.IDGenerator();
	})();
	(function() {
		$SuperBernieWorld_Entities_AIPopup.$phaseLurkSeconds = 1.5;
		$SuperBernieWorld_Entities_AIPopup.$phaseRiseSeconds = 1;
		$SuperBernieWorld_Entities_AIPopup.$phaseThreatSeconds = 1.5;
		$SuperBernieWorld_Entities_AIPopup.$phaseLowerSeconds = 1;
	})();
	(function() {
		$SuperBernieWorld_Maps_MapInstance.$flagBase = 137;
		$SuperBernieWorld_Maps_MapInstance.$flagPole = 105;
		$SuperBernieWorld_Maps_MapInstance.$flagLeft = 72;
		$SuperBernieWorld_Maps_MapInstance.$flagRight = 73;
		$SuperBernieWorld_Maps_MapInstance.$flagTop = 41;
		var $t1 = [];
		$t1.push($SuperBernieWorld_Maps_MapInstance.$flagPole);
		$t1.push($SuperBernieWorld_Maps_MapInstance.$flagLeft);
		$t1.push($SuperBernieWorld_Maps_MapInstance.$flagRight);
		$t1.push($SuperBernieWorld_Maps_MapInstance.$flagTop);
		$SuperBernieWorld_Maps_MapInstance.flagTiles = $t1;
	})();
	(function() {
		$SuperBernieWorld_Cutscenes.scenes = null;
	})();
	(function() {
		$SuperBernieWorld_SpeedrunHelper.$uniqueTag = 2.85569345600408E+16;
		$SuperBernieWorld_SpeedrunHelper.$gameID = 1;
		$SuperBernieWorld_SpeedrunHelper.$tag = 1.00614528597969E+17;
		$SuperBernieWorld_SpeedrunHelper.$state = null;
	})();
	(function() {
		$SuperBernieWorld_Menu.cancelSoundPitch = 0.8;
		$SuperBernieWorld_Menu.cancelSound = 37;
	})();
	(function() {
		$SuperBernieWorld_Game.$timerGraceSeconds = 3;
		$SuperBernieWorld_Game.$tutorialText = 'Move {0}{1}{5}\r\nJump {2}\r\nRun/Fire {3}\r\nCrouch {4}{7}\r\n{6}';
	})();
	(function() {
		$SuperBernieWorld_Container.$transitionFadeSeconds = 1;
		$SuperBernieWorld_Container.$transitionPauseSeconds = 0.5;
		$SuperBernieWorld_Container.$axisThreshold = 0.33;
		$SuperBernieWorld_Container.webLinkAlert = 'Your browser is blocking popups, please [[LINK]]click here[[/LINK]] to visit the selected url.';
		$SuperBernieWorld_Container.webLinkAlertGamepad = 'Your browser cannot open links in response to gamepad input, to visit the selected url please [[LINK]]click here[[/LINK]].';
		$SuperBernieWorld_Container.$popupLink = '<a href="[[URL]]" target="_blank" onclick="window[\'{0}\'].close()">';
		$SuperBernieWorld_Container.$urlPopupUID = 'cantOpenUrl';
		$SuperBernieWorld_Container.$urlPopupInstance = 'cantOpenUrlPopup';
	})();
	(function() {
		$SuperBernieWorld_$Program.$logPath = 'sbw-run.log';
		$SuperBernieWorld_$Program.$adaptiveVSync = false;
		$SuperBernieWorld_$Program.$noVSync = false;
		$SuperBernieWorld_$Program.$debug = false;
		$SuperBernieWorld_$Program.$exceptionLock = new Object();
		$SuperBernieWorld_$Program.$exceptionHandled = false;
	})();
	$SuperBernieWorld_$Program.$main();
})();


